{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.5) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AddressUpgradeable.sol\\\";\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * Consider any assumption about calldata validation performed by the sender may be violated if it's not especially\\n * careful about sending transactions invoking {multicall}. For example, a relay address that filters function\\n * selectors won't filter calls nested within a {multicall} operation.\\n *\\n * NOTE: Since 5.0.1 and 4.9.4, this contract identifies non-canonical contexts (i.e. `msg.sender` is not {_msgSender}).\\n * If a non-canonical context is identified, the following self `delegatecall` appends the last bytes of `msg.data`\\n * to the subcall. This makes it safe to use with {ERC2771Context}. Contexts that don't affect the resolution of\\n * {_msgSender} are not propagated to subcalls.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract MulticallUpgradeable is Initializable, ContextUpgradeable {\\n    function __Multicall_init() internal onlyInitializing {\\n    }\\n\\n    function __Multicall_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        bytes memory context = msg.sender == _msgSender()\\n            ? new bytes(0)\\n            : msg.data[msg.data.length - _contextSuffixLength():];\\n\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = AddressUpgradeable.functionDelegateCall(address(this), bytes.concat(data[i], context));\\n        }\\n        return results;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/libraries/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IERC20.sol\": {\r\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity =0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\r\\n\\r\\npragma solidity =0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IERC20Permit {\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\r\\n     * given ``owner``'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\"\r\n    },\r\n    \"contracts/IPermit2/IAllowanceTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.20;\\r\\n\\r\\n/// @title AllowanceTransfer\\r\\n/// @notice Handles ERC20 token permissions through signature based allowance setting and ERC20 token transfers by checking allowed amounts\\r\\n/// @dev Requires user's token approval on the Permit2 contract\\r\\ninterface IAllowanceTransfer {\\r\\n    /// @notice Thrown when an allowance on a token has expired.\\r\\n    /// @param deadline The timestamp at which the allowed amount is no longer valid\\r\\n    error AllowanceExpired(uint256 deadline);\\r\\n\\r\\n    /// @notice Thrown when an allowance on a token has been depleted.\\r\\n    /// @param amount The maximum amount allowed\\r\\n    error InsufficientAllowance(uint256 amount);\\r\\n\\r\\n    /// @notice Thrown when too many nonces are invalidated.\\r\\n    error ExcessiveInvalidation();\\r\\n\\r\\n    /// @notice Emits an event when the owner successfully invalidates an ordered nonce.\\r\\n    event NonceInvalidation(\\r\\n        address indexed owner, address indexed token, address indexed spender, uint48 newNonce, uint48 oldNonce\\r\\n    );\\r\\n\\r\\n    /// @notice Emits an event when the owner successfully sets permissions on a token for the spender.\\r\\n    event Approval(\\r\\n        address indexed owner, address indexed token, address indexed spender, uint160 amount, uint48 expiration\\r\\n    );\\r\\n\\r\\n    /// @notice Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender.\\r\\n    event Permit(\\r\\n        address indexed owner,\\r\\n        address indexed token,\\r\\n        address indexed spender,\\r\\n        uint160 amount,\\r\\n        uint48 expiration,\\r\\n        uint48 nonce\\r\\n    );\\r\\n\\r\\n    /// @notice Emits an event when the owner sets the allowance back to 0 with the lockdown function.\\r\\n    event Lockdown(address indexed owner, address token, address spender);\\r\\n\\r\\n    /// @notice The permit data for a token\\r\\n    struct PermitDetails {\\r\\n        // ERC20 token address\\r\\n        address token;\\r\\n        // the maximum amount allowed to spend\\r\\n        uint160 amount;\\r\\n        // timestamp at which a spender's token allowances become invalid\\r\\n        uint48 expiration;\\r\\n        // an incrementing value indexed per owner,token,and spender for each signature\\r\\n        uint48 nonce;\\r\\n    }\\r\\n\\r\\n    /// @notice The permit message signed for a single token allownce\\r\\n    struct PermitSingle {\\r\\n        // the permit data for a single token alownce\\r\\n        PermitDetails details;\\r\\n        // address permissioned on the allowed tokens\\r\\n        address spender;\\r\\n        // deadline on the permit signature\\r\\n        uint256 sigDeadline;\\r\\n    }\\r\\n\\r\\n    /// @notice The permit message signed for multiple token allowances\\r\\n    struct PermitBatch {\\r\\n        // the permit data for multiple token allowances\\r\\n        PermitDetails[] details;\\r\\n        // address permissioned on the allowed tokens\\r\\n        address spender;\\r\\n        // deadline on the permit signature\\r\\n        uint256 sigDeadline;\\r\\n    }\\r\\n\\r\\n    /// @notice The saved permissions\\r\\n    /// @dev This info is saved per owner, per token, per spender and all signed over in the permit message\\r\\n    /// @dev Setting amount to type(uint160).max sets an unlimited approval\\r\\n    struct PackedAllowance {\\r\\n        // amount allowed\\r\\n        uint160 amount;\\r\\n        // permission expiry\\r\\n        uint48 expiration;\\r\\n        // an incrementing value indexed per owner,token,and spender for each signature\\r\\n        uint48 nonce;\\r\\n    }\\r\\n\\r\\n    /// @notice A token spender pair.\\r\\n    struct TokenSpenderPair {\\r\\n        // the token the spender is approved\\r\\n        address token;\\r\\n        // the spender address\\r\\n        address spender;\\r\\n    }\\r\\n\\r\\n    /// @notice Details for a token transfer.\\r\\n    struct AllowanceTransferDetails {\\r\\n        // the owner of the token\\r\\n        address from;\\r\\n        // the recipient of the token\\r\\n        address to;\\r\\n        // the amount of the token\\r\\n        uint160 amount;\\r\\n        // the token to be transferred\\r\\n        address token;\\r\\n    }\\r\\n\\r\\n    /// @notice A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.\\r\\n    /// @notice The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]\\r\\n    /// @dev The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals.\\r\\n    function allowance(address, address, address) external view returns (uint160, uint48, uint48);\\r\\n\\r\\n    /// @notice Approves the spender to use up to amount of the specified token up until the expiration\\r\\n    /// @param token The token to approve\\r\\n    /// @param spender The spender address to approve\\r\\n    /// @param amount The approved amount of the token\\r\\n    /// @param expiration The timestamp at which the approval is no longer valid\\r\\n    /// @dev The packed allowance also holds a nonce, which will stay unchanged in approve\\r\\n    /// @dev Setting amount to type(uint160).max sets an unlimited approval\\r\\n    function approve(address token, address spender, uint160 amount, uint48 expiration) external;\\r\\n\\r\\n    /// @notice Permit a spender to a given amount of the owners token via the owner's EIP-712 signature\\r\\n    /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\\r\\n    /// @param owner The owner of the tokens being approved\\r\\n    /// @param permitSingle Data signed over by the owner specifying the terms of approval\\r\\n    /// @param signature The owner's signature over the permit data\\r\\n    function permit(address owner, PermitSingle memory permitSingle, bytes calldata signature) external;\\r\\n\\r\\n    /// @notice Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature\\r\\n    /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\\r\\n    /// @param owner The owner of the tokens being approved\\r\\n    /// @param permitBatch Data signed over by the owner specifying the terms of approval\\r\\n    /// @param signature The owner's signature over the permit data\\r\\n    function permit(address owner, PermitBatch memory permitBatch, bytes calldata signature) external;\\r\\n\\r\\n    /// @notice Transfer approved tokens from one address to another\\r\\n    /// @param from The address to transfer from\\r\\n    /// @param to The address of the recipient\\r\\n    /// @param amount The amount of the token to transfer\\r\\n    /// @param token The token address to transfer\\r\\n    /// @dev Requires the from address to have approved at least the desired amount\\r\\n    /// of tokens to msg.sender.\\r\\n    function transferFrom(address from, address to, uint160 amount, address token) external;\\r\\n\\r\\n    /// @notice Transfer approved tokens in a batch\\r\\n    /// @param transferDetails Array of owners, recipients, amounts, and tokens for the transfers\\r\\n    /// @dev Requires the from addresses to have approved at least the desired amount\\r\\n    /// of tokens to msg.sender.\\r\\n    function transferFrom(AllowanceTransferDetails[] calldata transferDetails) external;\\r\\n\\r\\n    /// @notice Enables performing a \\\"lockdown\\\" of the sender's Permit2 identity\\r\\n    /// by batch revoking approvals\\r\\n    /// @param approvals Array of approvals to revoke.\\r\\n    function lockdown(TokenSpenderPair[] calldata approvals) external;\\r\\n\\r\\n    /// @notice Invalidate nonces for a given (token, spender) pair\\r\\n    /// @param token The token to invalidate nonces for\\r\\n    /// @param spender The spender to invalidate nonces for\\r\\n    /// @param newNonce The new nonce to set. Invalidates all nonces less than it.\\r\\n    /// @dev Can't invalidate more than 2**16 nonces per transaction.\\r\\n    function invalidateNonces(address token, address spender, uint48 newNonce) external;\\r\\n}\"\r\n    },\r\n    \"contracts/IPermitDai.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n// Just an interface for Dai's permits\\r\\npragma solidity =0.8.20;\\r\\nabstract contract IPermitDai {\\r\\n    function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) external virtual;\\r\\n    // Defining details for checking\\r\\n    function PERMIT_TYPEHASH() public virtual returns (bytes32);\\r\\n    function nonces(address) public virtual returns (uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/IToadRouter04.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: NONE\\r\\npragma solidity =0.8.20;\\r\\n\\r\\nimport \\\"./ToadStructs.sol\\\";\\r\\nimport \\\"./IPermit2/IAllowanceTransfer.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * IToadRouter04\\r\\n * Extends the V3 router with Uniswap V3 capabilities and vETH support\\r\\n */\\r\\nabstract contract IToadRouter04 is Initializable {\\r\\n\\r\\n    address public vETH;\\r\\n        \\r\\n    // IToadRouter01\\r\\n    string public versionRecipient;\\r\\n\\r\\n\\r\\n    address public factory;\\r\\n    address public WETH;\\r\\n\\r\\n\\r\\n    mapping(address => uint256) public accountNonces;\\r\\n\\r\\n   function initialize(address fac, address weth, address veth) public onlyInitializing {\\r\\n        factory = fac;\\r\\n        WETH = weth;\\r\\n        vETH = veth;\\r\\n        versionRecipient =  \\\"3.0.0\\\";\\r\\n   } \\r\\n\\r\\n\\r\\n\\r\\n    function useNonce(uint256 nonce, address account) external virtual;\\r\\n\\r\\n    function exactInputWETH(ToadStructs.ExactInputParams memory params, ToadStructs.FeeStruct memory fees) external payable virtual returns (uint256 amountOut);\\r\\n    function exactInputSingleWETH(ToadStructs.ExactInputSingleParams memory params, ToadStructs.FeeStruct memory fees) external payable virtual returns (uint256 amountOut);\\r\\n    function exactInput(ToadStructs.ExactInputParams memory params, ToadStructs.FeeStruct memory fees, ToadStructs.GasRepayParams memory repay) external payable virtual returns (uint256 amountOut);\\r\\n    function exactInputSingle(ToadStructs.ExactInputSingleParams memory params, ToadStructs.FeeStruct memory fees, ToadStructs.GasRepayParams memory repay) external payable virtual returns (uint256 amountOut);\\r\\n\\r\\n    function unwrapVETH(address to, uint256 amount, ToadStructs.FeeStruct calldata fees) external virtual;\\r\\n\\r\\n    function sendETHToCoinbase() external payable virtual;\\r\\n\\r\\n    function convertVETHtoWETH(address to, uint256 amount, ToadStructs.FeeStruct calldata fees) external virtual;\\r\\n    //function swapExactTokensForTokens\\r\\n        /**\\r\\n     * Run a permit on a token to the Permit2 contract for max uint256\\r\\n     * @param holder the token owner\\r\\n     * @param tok the token to permit\\r\\n     * @param deadline A deadline to expire by\\r\\n     * @param v v of the sig\\r\\n     * @param r r of the sig\\r\\n     * @param s s of the sig\\r\\n     */\\r\\n    function performPermit(address holder, address tok, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual;\\r\\n\\r\\n    /**\\r\\n     * Run a permit on a token to the Permit2 contract via the Dai-style permit\\r\\n     * @param holder the token owner\\r\\n     * @param tok the token to permit\\r\\n     * @param deadline A deadline to expire by\\r\\n     * @param nonce the nonce\\r\\n     * @param v v of the sig\\r\\n     * @param r r of the sig\\r\\n     * @param s s of the sig\\r\\n     */\\r\\n    function performPermitDai(address holder, address tok, uint256 nonce, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual;\\r\\n\\r\\n    /**\\r\\n     * Run a Permit2 permit on a token to be spent by us\\r\\n     * @param holder The tokens owner\\r\\n     * @param permitSingle The struct \\r\\n     * @param signature The signature\\r\\n     */\\r\\n    function performPermit2Single(address holder, IAllowanceTransfer.PermitSingle memory permitSingle, bytes calldata signature) public virtual;\\r\\n\\r\\n    /**\\r\\n     * Run a batch of Permit2 permits on a token to be spent by us\\r\\n     * @param holder The tokens owner\\r\\n     * @param permitBatch The struct\\r\\n     * @param signature The signature\\r\\n     */\\r\\n    function performPermit2Batch(address holder, IAllowanceTransfer.PermitBatch memory permitBatch, bytes calldata signature) public virtual;\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokensWithWETHGas(uint amountIn, uint amountOutMin, ToadStructs.AggPath[] calldata path1, ToadStructs.AggPath[] calldata path2, address to, uint deadline, ToadStructs.FeeStruct calldata fees, ToadStructs.DexData[] calldata dexes) public virtual returns(uint256 outputAmount);\\r\\n\\r\\n    function swapExactTokensForWETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, ToadStructs.AggPath[] calldata path, address to, uint deadline, ToadStructs.FeeStruct calldata fees, ToadStructs.DexData[] calldata dexes, bool unwrap) public virtual returns(uint256 outputAmount);\\r\\n\\r\\n    function swapExactWETHforTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, ToadStructs.AggPath[] memory path, address to, uint deadline, ToadStructs.FeeStruct calldata fees, ToadStructs.DexData[] calldata dexes) public virtual returns(uint256 outputAmount);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, ToadStructs.AggPath[] calldata path, address to, uint deadline, ToadStructs.FeeStruct calldata fees, uint256 ethFee, ToadStructs.AggPath[] calldata gasPath, ToadStructs.DexData[] calldata dexes) public virtual returns(uint256 outputAmount);\\r\\n\\r\\n    function getPriceOut(uint256 amountIn, ToadStructs.AggPath[] calldata path, ToadStructs.DexData[] calldata dexes) public view virtual returns (uint256[] memory amounts);\\r\\n    \\r\\n    function getAmountsOut(uint amountIn, ToadStructs.AggPath[] calldata path, ToadStructs.DexData[] calldata dexes) external view virtual returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, ToadStructs.AggPath[] calldata path, ToadStructs.DexData[] calldata dexes) external view virtual returns (uint[] memory amounts);\\r\\n\\r\\n    function unwrapWETH(address to, uint256 amount, ToadStructs.FeeStruct calldata fees) external virtual;\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n//swapExactTokensForTokensSupportingFeeOnTransferTokensWithWETHGas(uint256,uint256,(address,uint96)[],(address,uint96)[],address,uint256,(uint256,address,uint96),(bytes32,address)[])\\r\\n\"\r\n    },\r\n    \"contracts/IvETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: NONE\\r\\npragma solidity =0.8.20;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title vETH\\r\\n * @author Riley - Two Brothers Crypto (riley@twobrotherscrypto.dev)\\r\\n * @notice Holds Ethereum on behalf of end users to be used in ToadSwap operations without subsequent approvals being required.\\r\\n * In essence, a privileged version of WETH9. Implements the WETH9 spec, but with extra functions.\\r\\n */\\r\\nabstract contract IvETH {\\r\\n\\r\\n\\r\\n\\r\\n    function balanceOf(address account) public virtual view returns (uint);\\r\\n\\r\\n    function deposit() external virtual payable;\\r\\n\\r\\n    function withdraw(uint wad) public virtual;\\r\\n\\r\\n    function convertFromWETH9(uint256 amount, address recipient) external virtual;\\r\\n\\r\\n    function convertToWETH9(uint256 amount, address recipient) external virtual;\\r\\n\\r\\n    function addToFullApproval(address account) external virtual;\\r\\n\\r\\n    function removeFromFullApproval(address account) external virtual;\\r\\n\\r\\n    /**\\r\\n     * Performs a WETH9->vETH conversion with pre-deposited WETH9\\r\\n     * @param amount amount to convert \\r\\n     * @param recipient recipient to credit\\r\\n     */\\r\\n    function approvedConvertFromWETH9(uint256 amount, address recipient) external virtual;\\r\\n    /**\\r\\n     * Performs a vETH->WETH9 conversion on behalf of a user. Approved contracts only.\\r\\n     * @param user user to perform on behalf of\\r\\n     * @param amount amount to convert\\r\\n     * @param recipient recipient wallet to send to\\r\\n     */\\r\\n    function approvedConvertToWETH9(address user, uint256 amount, address recipient) external virtual;\\r\\n    /**\\r\\n     * Performs a withdrawal on behalf of a user. Approved contracts only.\\r\\n     * @param user user to perform on behalf of\\r\\n     * @param amount amount to withdraw\\r\\n     * @param recipient recipient wallet to send to\\r\\n     */\\r\\n    function approvedWithdraw(address user, uint256 amount, address recipient) external virtual;\\r\\n\\r\\n    function approvedTransferFrom(address user, uint256 amount, address recipient) external virtual;\\r\\n\\r\\n    function transfer(address to, uint value) public virtual;\\r\\n\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/IWETH.sol\": {\r\n      \"content\": \"pragma solidity =0.8.20;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function withdraw(uint) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ToadRouter04.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.8.20;\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./ToadswapLibrary.sol\\\";\\r\\nimport \\\"./TransferHelper.sol\\\";\\r\\nimport \\\"./IWETH.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\\\";\\r\\nimport \\\"./IToadRouter04.sol\\\";\\r\\nimport \\\"./IPermitDai.sol\\\";\\r\\nimport \\\"./V3/CallbackValidation.sol\\\";\\r\\nimport \\\"./V3/Constants.sol\\\";\\r\\nimport \\\"./V3/TickMath.sol\\\";\\r\\nimport \\\"./V3/Path.sol\\\";\\r\\nimport \\\"./IvETH.sol\\\";\\r\\nimport '@uniswap/v3-core/contracts/libraries/SafeCast.sol';\\r\\nimport \\\"./ToadswapPermits.sol\\\";\\r\\n/**\\r\\n *\\r\\n * \\r\\n * ToadRouter04\\r\\n * A re-implementation of the Uniswap v2 (and now v3) router with bot-driven meta-transactions and multi-router aggregation. \\r\\n * Bot private keys are all stored on a hardware wallet.\\r\\n * ToadRouter03 implements ERC2612 (ERC20Permit) and auto-unwrap functions\\r\\n * \\r\\n */\\r\\ncontract ToadRouter04 is IToadRouter04, OwnableUpgradeable, MulticallUpgradeable {\\r\\n    using Path for bytes;\\r\\n    using SafeCast for uint256;\\r\\n    mapping(address => bool) allowedBots;\\r\\n\\r\\n\\r\\n    address PERMIT2;\\r\\n\\r\\n    // Threshold for gas withdraw/payout to the runner\\r\\n    uint256 public gasPayThreshold;\\r\\n    \\r\\n    /// @dev Used as the placeholder value for amountInCached, because the computed amount in for an exact output swap\\r\\n    /// can never actually be this value\\r\\n    uint256 private DEFAULT_AMOUNT_IN_CACHED;\\r\\n\\r\\n    /// @dev Transient storage variable used for returning the computed amount in for an exact output swap.\\r\\n    uint256 private amountInCached;\\r\\n\\r\\n    bytes32 private callbackDataHash;\\r\\n\\r\\n    // 0x90a2caf2\\r\\n    error Unsupported();\\r\\n    // 0x77efb076\\r\\n    error Untrusted();\\r\\n    // 0xaf7f02d5\\r\\n    error NoAcceptETH();\\r\\n    // 5397a1f9\\r\\n    error NotEnoughOutput();\\r\\n    error InvalidPath();\\r\\n    error NotEnoughGas();\\r\\n    error Expired();\\r\\n    error NonceInvalid();\\r\\n\\r\\n    event BotAdded(address bot);\\r\\n    event BotRemoved(address bot);\\r\\n    event GasPayThresholdUpdated(uint256 newThreshold);\\r\\n\\r\\n    modifier ensure(uint deadline) {\\r\\n        if(deadline < block.timestamp) {\\r\\n            revert Expired();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Anything with the onlyBot modifier is naturally protected from reentrancy, by the nature of onlyBot. If an external contract attempts to reenter, it isn't a trusted bot and the tx reverts. \\r\\n    // The only external/public call we have that isn't protected in this manner is the v3 swap callback, which is validated via other methods to ensure it came from a legitimate V3 pool. \\r\\n    modifier onlyBot() {\\r\\n        if(!allowedBots[_msgSender()]) {\\r\\n            revert Untrusted();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n        // Disable initializers on the implementation contract, this won't run in the context of the proxy as constructors basically don't exist to them\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    // We added this as we are now using Initializable and an upgradable proxy\\r\\n    function initialize(address fac, address weth, address permit, address veth) public initializer {\\r\\n        // Upgradeable inits\\r\\n        IToadRouter04.initialize(fac, weth, veth);\\r\\n        __Ownable_init();\\r\\n        __Multicall_init();\\r\\n        allowedBots[_msgSender()] = true;\\r\\n        PERMIT2 = permit;\\r\\n        // These used to be set up higher but Upgradeability means no\\r\\n        gasPayThreshold = 100000000000000000;\\r\\n        DEFAULT_AMOUNT_IN_CACHED = type(uint256).max;\\r\\n        amountInCached = DEFAULT_AMOUNT_IN_CACHED;\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n    function modifyGasPayThreshold(uint256 newThreshold) external onlyOwner {\\r\\n        gasPayThreshold = newThreshold;\\r\\n        emit GasPayThresholdUpdated(newThreshold);\\r\\n    }\\r\\n\\r\\n    function addTrustedBot(address newBot) external onlyOwner {\\r\\n        allowedBots[newBot] = true;\\r\\n        emit BotAdded(newBot);\\r\\n    }\\r\\n\\r\\n    function removeTrustedBot(address bot) external onlyOwner {\\r\\n        allowedBots[bot] = false;\\r\\n        emit BotRemoved(bot);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        // We very particularly reject ETH from untrusted sources, to prevent ETH lock-up in our router.\\r\\n        if (_msgSender() != WETH && _msgSender() != vETH) {\\r\\n            revert NoAcceptETH();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function performPermit2Single(\\r\\n        address holder,\\r\\n        IAllowanceTransfer.PermitSingle memory permitSingle,\\r\\n        bytes calldata signature\\r\\n    ) public virtual override onlyBot {\\r\\n        IAllowanceTransfer permitCA = IAllowanceTransfer(PERMIT2);\\r\\n        permitCA.permit(holder, permitSingle, signature);\\r\\n    }\\r\\n\\r\\n    function performPermit2Batch(\\r\\n        address holder,\\r\\n        IAllowanceTransfer.PermitBatch memory permitBatch,\\r\\n        bytes calldata signature\\r\\n    ) public virtual override onlyBot {\\r\\n        IAllowanceTransfer permitCA = IAllowanceTransfer(PERMIT2);\\r\\n        permitCA.permit(holder, permitBatch, signature);\\r\\n    }\\r\\n\\r\\n    function performPermit(\\r\\n        address holder,\\r\\n        address tok,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) public virtual override ensure(deadline) onlyBot {\\r\\n        ToadswapPermits.permit(PERMIT2, holder, tok, deadline, v, r, s);\\r\\n    }\\r\\n\\r\\n    function performPermitDai(address holder, address tok, uint256 nonce, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override onlyBot {\\r\\n        ToadswapPermits.permitDai(PERMIT2, holder, tok, nonce, deadline, v, r, s);\\r\\n    }\\r\\n\\r\\n    function stfFirstHop(uint256 amountIn, ToadStructs.DexData memory dex1, address path0, address path1, address sender) internal {\\r\\n        TransferHelper.safeTransferFrom(PERMIT2, path0, sender, ToadswapLibrary.pairFor(path0, path1, dex1), amountIn);\\r\\n    }\\r\\n\\r\\n    function useNonce(uint256 nonce, address account) external virtual override onlyBot {\\r\\n        if(accountNonces[account] != nonce) {\\r\\n            revert NonceInvalid();\\r\\n        }\\r\\n\\r\\n        accountNonces[account] = accountNonces[account] + 1;\\r\\n    }\\r\\n\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokensWithWETHGas(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        ToadStructs.AggPath[] calldata path1,\\r\\n        ToadStructs.AggPath[] calldata path2,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        ToadStructs.FeeStruct calldata fees,\\r\\n        ToadStructs.DexData[] calldata dexes\\r\\n    )\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        ensure(deadline)\\r\\n        onlyBot\\r\\n        returns (uint256 outputAmount)\\r\\n    {\\r\\n        uint256 gasReturn = fees.gasLimit * tx.gasprice;\\r\\n        // This does two half-swaps, so we can extract the gas return\\r\\n\\r\\n        // Swap the first half\\r\\n        stfFirstHop(amountIn, ToadswapLibrary.getDexId(path1[0], dexes), path1[0].token, path1[1].token, to);\\r\\n        \\r\\n        uint256 wethBalanceBefore = IERC20(WETH).balanceOf(address(this));\\r\\n        // Swap to us\\r\\n        _swapSupportingFeeOnTransferTokens(path1, address(this), dexes);\\r\\n        \\r\\n        if (fees.fee > 0) {\\r\\n            // Send the fee anyway\\r\\n            TransferHelper.safeTransfer(WETH, fees.feeReceiver, fees.fee);\\r\\n        }\\r\\n        // Accmulate the gas return fee\\r\\n        wethBalanceBefore = wethBalanceBefore + gasReturn;\\r\\n        \\r\\n        // Send the remaining WETH to the next hop - no STF as we are sender\\r\\n        TransferHelper.safeTransfer(path2[0].token, ToadswapLibrary.pairFor(path2[0].token, path2[1].token, dexes[path1[1].dexId]), IERC20(WETH).balanceOf(address(this)) - wethBalanceBefore);\\r\\n        // Process WETH remainder\\r\\n        processWETH();\\r\\n        // Grab the pre-balance\\r\\n        uint256 balanceBefore = IERC20(path2[path2.length - 1].token).balanceOf(to);\\r\\n        // Run the final half of swap to the end user\\r\\n        _swapSupportingFeeOnTransferTokens(path2, to, dexes);\\r\\n        // Do the output amount check\\r\\n        outputAmount = IERC20(path2[path2.length - 1].token).balanceOf(to) - (balanceBefore);\\r\\n        if(outputAmount < amountOutMin) {\\r\\n            revert NotEnoughOutput();\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        ToadStructs.AggPath[] calldata path,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        ToadStructs.FeeStruct calldata fees,\\r\\n        uint256 ethFee,\\r\\n        ToadStructs.AggPath[] calldata gasPath,\\r\\n        ToadStructs.DexData[] calldata dexes\\r\\n    )\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        ensure(deadline)\\r\\n        onlyBot\\r\\n        returns (uint256 outputAmount)\\r\\n    {\\r\\n        // So ethFee is how much token to swap for the gas price\\r\\n        {\\r\\n            uint256 totalFees = ethFee + fees.fee;\\r\\n            if (totalFees > 0) {\\r\\n                uint256 gasReturnEth = fees.gasLimit * tx.gasprice;\\r\\n            \\r\\n                // Swap the gasReturn tokens from their wallet to us as WETH, unwrap and send to tx origin\\r\\n                stfFirstHop(\\r\\n                    totalFees,\\r\\n                    ToadswapLibrary.getDexId(path[1], dexes),\\r\\n                    gasPath[0].token,\\r\\n                    gasPath[1].token,\\r\\n                    to\\r\\n                );\\r\\n                uint256 wethBefore = IERC20(WETH).balanceOf(address(this));\\r\\n                _swapSupportingFeeOnTransferTokens(gasPath, address(this), dexes);\\r\\n                uint256 ethVal = IERC20(WETH).balanceOf(address(this)) - wethBefore;\\r\\n                require(ethVal >= gasReturnEth, \\\"Not enough paid for gas.\\\");\\r\\n                if (fees.fee > 0) {\\r\\n                    // Send fee\\r\\n                    uint256 feePortion = fees.fee*10000 / (totalFees);\\r\\n                    TransferHelper.safeTransfer(WETH, fees.feeReceiver, ethVal*feePortion/10000);\\r\\n                }\\r\\n                processWETH();\\r\\n            }\\r\\n            amountIn = amountIn - totalFees;\\r\\n        }\\r\\n        // Swap remaining tokens to the path provided\\r\\n        stfFirstHop(\\r\\n            amountIn,\\r\\n            dexes[path[1].dexId],\\r\\n            path[0].token,\\r\\n            path[1].token,\\r\\n            to\\r\\n        );\\r\\n\\r\\n        uint balanceBefore = IERC20(path[path.length - 1].token).balanceOf(to);\\r\\n\\r\\n        _swapSupportingFeeOnTransferTokens(path, to, dexes);\\r\\n        outputAmount = IERC20(path[path.length - 1].token).balanceOf(to) - (balanceBefore);\\r\\n        if(outputAmount < amountOutMin) {\\r\\n            revert NotEnoughOutput();\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function processWETH() internal {\\r\\n        uint256 wethBal = IERC20(WETH).balanceOf(address(this));\\r\\n        if (wethBal > gasPayThreshold) {\\r\\n            // Withdraw over threshold\\r\\n            IWETH(WETH).withdraw(wethBal);\\r\\n            // Send the gas payout\\r\\n            // tx.origin here is used, not as authentication, but as the user to repay gas to. Given they paid the gas, they get it.\\r\\n            TransferHelper.safeTransferETH(tx.origin, wethBal);\\r\\n        }\\r\\n    }\\r\\n\\r\\n \\r\\n\\r\\n    function swapExactWETHforTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        ToadStructs.AggPath[] memory path,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        ToadStructs.FeeStruct calldata fees,\\r\\n        ToadStructs.DexData[] calldata dexes\\r\\n    )\\r\\n        public \\r\\n        virtual\\r\\n        override\\r\\n        ensure(deadline)\\r\\n        onlyBot\\r\\n        returns (uint256 outputAmount)\\r\\n    {\\r\\n        // Grab gas limit first\\r\\n        if(path[0].token != WETH && path[0].token != vETH) {\\r\\n            revert InvalidPath();\\r\\n        }\\r\\n        uint256 gasReturn = fees.gasLimit * tx.gasprice;\\r\\n        if (path[0].token == vETH) {\\r\\n            // Virtual ETH\\r\\n            address recipientPair = ToadswapLibrary.pairFor(WETH, path[1].token, ToadswapLibrary.getDexId(path[1], dexes));\\r\\n            inputVETHHandle(to, gasReturn, amountIn, fees, recipientPair);\\r\\n            path[0].token = WETH;\\r\\n        } else {\\r\\n            if (gasReturn + fees.fee > 0) {\\r\\n\\r\\n                TransferHelper.safeTransferFrom(\\r\\n                    PERMIT2,\\r\\n                    WETH,\\r\\n                    to,\\r\\n                    address(this),\\r\\n                    gasReturn + fees.fee\\r\\n                );\\r\\n                if(fees.fee > 0) {\\r\\n                    TransferHelper.safeTransfer(WETH, fees.feeReceiver, fees.fee);\\r\\n                }\\r\\n                processWETH();\\r\\n            }\\r\\n            // Send to first pool\\r\\n            stfFirstHop(\\r\\n                amountIn - gasReturn - fees.fee,\\r\\n                dexes[path[1].dexId],\\r\\n                path[0].token,\\r\\n                path[1].token,\\r\\n                to\\r\\n            );\\r\\n        }\\r\\n        // This code is the same\\r\\n        uint256 balanceBefore = IERC20(path[path.length - 1].token).balanceOf(to);\\r\\n        _swapSupportingFeeOnTransferTokens(path, to, dexes);\\r\\n        outputAmount =\\r\\n            IERC20(path[path.length - 1].token).balanceOf(to) -\\r\\n            (balanceBefore);\\r\\n        if(outputAmount < amountOutMin) {\\r\\n            revert NotEnoughOutput();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapExactTokensForWETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        ToadStructs.AggPath[] calldata path,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        ToadStructs.FeeStruct calldata fees,\\r\\n        ToadStructs.DexData[] calldata dexes,\\r\\n        bool unwrap\\r\\n    )\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        ensure(deadline)\\r\\n        onlyBot\\r\\n        returns (uint256 outputAmount)\\r\\n    {\\r\\n        if(path[path.length - 1].token != WETH) {\\r\\n            revert InvalidPath();\\r\\n        }\\r\\n\\r\\n        uint256 gasReturn = fees.gasLimit * tx.gasprice;\\r\\n\\r\\n        stfFirstHop(\\r\\n            amountIn,\\r\\n            dexes[path[1].dexId],\\r\\n            path[0].token,\\r\\n            path[1].token,\\r\\n            to\\r\\n        );\\r\\n        uint256 balBefore = IERC20(WETH).balanceOf(address(this));\\r\\n        _swapSupportingFeeOnTransferTokens(path, address(this), dexes);\\r\\n        uint amountOut = IERC20(WETH).balanceOf(address(this)) - balBefore;\\r\\n        // Adjust output amount to be exclusive of the payout of gas\\r\\n        outputAmount = amountOut - gasReturn - fees.fee;\\r\\n        if(outputAmount < amountOutMin) {\\r\\n            revert NotEnoughOutput();\\r\\n        }\\r\\n\\r\\n        outputWETHHandle(unwrap, to, gasReturn, amountOut, fees);\\r\\n\\r\\n    }\\r\\n\\r\\n    // Gasloan WETH unwrapper\\r\\n    function unwrapWETH(\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        ToadStructs.FeeStruct calldata fees\\r\\n    ) external virtual override onlyBot {\\r\\n        uint256 gasReturn = fees.gasLimit * tx.gasprice;\\r\\n        TransferHelper.safeTransferFrom(PERMIT2, WETH, to, address(this), amount);\\r\\n        // Unwrap occurring, so unwrap all our WETH\\r\\n        IWETH(WETH).withdraw(IERC20(WETH).balanceOf(address(this)));\\r\\n        // Send fee\\r\\n        if (fees.fee > 0) {\\r\\n            TransferHelper.safeTransferETH(fees.feeReceiver, fees.fee);\\r\\n        }\\r\\n        // Send amount that was withdrawn\\r\\n        TransferHelper.safeTransferETH(to, amount - gasReturn - fees.fee);\\r\\n        // Send remainder to the tx.origin\\r\\n        // tx.origin here is used, not as authentication, but as the user to repay gas to. Given they paid the gas, they get it.\\r\\n        TransferHelper.safeTransferETH(tx.origin, address(this).balance);\\r\\n    }\\r\\n\\r\\n    // Pays eth to coinbase for 0 fee txns\\r\\n    function sendETHToCoinbase() external payable override onlyBot {\\r\\n        TransferHelper.safeTransferETH(block.coinbase, msg.value);\\r\\n    }\\r\\n\\r\\n    \\r\\n    function unwrapVETH(\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        ToadStructs.FeeStruct calldata fees\\r\\n    ) external virtual override onlyBot {\\r\\n        uint256 gasReturn = fees.gasLimit * tx.gasprice;\\r\\n        IvETH vet = IvETH(vETH);\\r\\n        vet.approvedWithdraw(to, amount, address(this));\\r\\n        // tx.origin here is used, not as authentication, but as the user to repay gas to. Given they paid the gas, they get it.\\r\\n        TransferHelper.safeTransferETH(tx.origin, gasReturn);\\r\\n        if (fees.fee > 0) {\\r\\n            TransferHelper.safeTransferETH(fees.feeReceiver, fees.fee);\\r\\n        }\\r\\n        TransferHelper.safeTransferETH(to, amount - gasReturn - fees.fee);\\r\\n    }\\r\\n    function convertVETHtoWETH(\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        ToadStructs.FeeStruct calldata fees\\r\\n    ) external virtual override onlyBot {\\r\\n        uint256 gasReturn = fees.gasLimit * tx.gasprice;\\r\\n        IvETH vet = IvETH(vETH);\\r\\n        vet.approvedConvertToWETH9(to, amount, address(this));\\r\\n        IWETH(WETH).withdraw(fees.fee + gasReturn);\\r\\n        \\r\\n        //TransferHelper.safeTransferETH(tx.origin, fees.gasReturn);\\r\\n        if (fees.fee > 0) {\\r\\n            TransferHelper.safeTransferETH(fees.feeReceiver, fees.fee);\\r\\n        }\\r\\n        // Send the remaining WETH back\\r\\n        IWETH(WETH).transfer(to, amount - gasReturn - fees.fee);\\r\\n    }\\r\\n\\r\\n    function getPriceOut(\\r\\n        uint256 amountIn,\\r\\n        ToadStructs.AggPath[] calldata path,\\r\\n        ToadStructs.DexData[] calldata dexes\\r\\n    ) public view virtual override returns (uint256[] memory amounts) {\\r\\n        return ToadswapLibrary.getPriceOut(amountIn, path, dexes);\\r\\n    }\\r\\n\\r\\n    function _swapSupportingFeeOnTransferTokens(\\r\\n        ToadStructs.AggPath[] memory path,\\r\\n        address _to,\\r\\n        ToadStructs.DexData[] memory dexes\\r\\n    ) internal virtual {\\r\\n        for (uint i; i < path.length - 1; i++) {\\r\\n            (address input, address output) = (\\r\\n                path[i].token,\\r\\n                path[i + 1].token\\r\\n            );\\r\\n            (address token0, ) = ToadswapLibrary.sortTokens(input, output);\\r\\n            IUniswapV2Pair pair = IUniswapV2Pair(\\r\\n                ToadswapLibrary.pairFor(\\r\\n                    input,\\r\\n                    output,\\r\\n                    dexes[path[i + 1].dexId]\\r\\n                )\\r\\n            );\\r\\n            uint amountInput;\\r\\n            uint amountOutput;\\r\\n            {\\r\\n                // scope to avoid stack too deep errors\\r\\n                (uint reserve0, uint reserve1, ) = pair.getReserves();\\r\\n                (uint reserveInput, uint reserveOutput) = input == token0\\r\\n                    ? (reserve0, reserve1)\\r\\n                    : (reserve1, reserve0);\\r\\n                amountInput =\\r\\n                    IERC20(input).balanceOf(address(pair)) -\\r\\n                    reserveInput;\\r\\n                amountOutput = ToadswapLibrary.getAmountOut(\\r\\n                    amountInput,\\r\\n                    reserveInput,\\r\\n                    reserveOutput\\r\\n                );\\r\\n            }\\r\\n            (uint amount0Out, uint amount1Out) = input == token0\\r\\n                ? (uint(0), amountOutput)\\r\\n                : (amountOutput, uint(0));\\r\\n            address to = i < path.length - 2\\r\\n                ? ToadswapLibrary.pairFor(\\r\\n                    output,\\r\\n                    path[i + 2].token,\\r\\n                    dexes[path[i + 2].dexId]\\r\\n                )\\r\\n                : _to;\\r\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // **** LIBRARY FUNCTIONS ****\\r\\n   \\r\\n    function getAmountsOut(\\r\\n        uint amountIn,\\r\\n        ToadStructs.AggPath[] calldata path,\\r\\n        ToadStructs.DexData[] calldata dexes\\r\\n    ) external view virtual override returns (uint[] memory amounts) {\\r\\n        return ToadswapLibrary.getAmountsOut(amountIn, path, dexes, vETH, WETH);\\r\\n    }\\r\\n\\r\\n    function getAmountsIn(\\r\\n        uint amountOut,\\r\\n        ToadStructs.AggPath[] calldata path,\\r\\n        ToadStructs.DexData[] calldata dexes\\r\\n    ) external view virtual override returns (uint[] memory amounts) {\\r\\n        return ToadswapLibrary.getAmountsIn(amountOut, path, dexes, vETH, WETH);\\r\\n    }\\r\\n\\r\\n    // V3-compatible stuff here\\r\\n\\r\\n    /// @dev Returns the pool for the given token pair and fee. The pool contract may or may not exist.\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee,\\r\\n        ToadStructs.DexData memory dex\\r\\n    ) private pure returns (IUniswapV3Pool) {\\r\\n        return IUniswapV3Pool(PoolAddress.computeAddress(dex.factory, dex.initcode, PoolAddress.getPoolKey(tokenA, tokenB, fee)));\\r\\n    }\\r\\n\\r\\n    function uniswapV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata _data\\r\\n    ) external {\\r\\n        // This is one of the only public/external calls that is not privileged, but this call is designed to be called during execution of another transaction. This is why we validate the callback.\\r\\n\\r\\n        require(amount0Delta > 0 || amount1Delta > 0); // swaps entirely within 0-liquidity regions are not supported\\r\\n\\r\\n        // Validate the expected hash matches the data returned to us\\r\\n        if(callbackDataHash != keccak256(_data)) {\\r\\n            revert Untrusted();\\r\\n        }        \\r\\n        ToadStructs.SwapCallbackData memory data = abi.decode(_data, (ToadStructs.SwapCallbackData));\\r\\n        (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool();\\r\\n        // This validates the callback came from a legitimate and trusted V3 pool\\r\\n        // The verification derives the correct LP pool based on tokenIn, tokenOut, and fee - based on data.dex which identifies the initcodehash/factory pair used to generate this deployment. \\r\\n        CallbackValidation.verifyCallback(tokenIn, tokenOut, fee, data.dex);\\r\\n\\r\\n        (bool isExactInput, uint256 amountToPay) =\\r\\n            amount0Delta > 0\\r\\n                ? (tokenIn < tokenOut, uint256(amount0Delta))\\r\\n                : (tokenOut < tokenIn, uint256(amount1Delta));\\r\\n        if (isExactInput) {\\r\\n            pay(tokenIn, data.payer, msg.sender, amountToPay, data.isVeth);\\r\\n        } else {\\r\\n            revert Unsupported();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @param token The token to pay\\r\\n    /// @param payer The entity that must pay\\r\\n    /// @param recipient The entity that will receive payment\\r\\n    /// @param value The amount to pay\\r\\n    function pay(\\r\\n        address token,\\r\\n        address payer,\\r\\n        address recipient,\\r\\n        uint256 value,\\r\\n        bool isVeth\\r\\n    ) internal {\\r\\n        if (isVeth) {\\r\\n            // Convert vETH to WETH and deposit it in the recipients wallet\\r\\n            IvETH(vETH).approvedConvertToWETH9(payer, value, recipient);\\r\\n        } else if (payer == address(this)) {\\r\\n            // pay with tokens already in the contract (for the exact input multihop case)\\r\\n            TransferHelper.safeTransfer(token, recipient, value);\\r\\n        } else {\\r\\n            // pull payment via permit2\\r\\n            TransferHelper.safeTransferFrom(PERMIT2, token, payer, recipient, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n     /// @dev Performs a single exact input swap\\r\\n    function exactInputInternal(\\r\\n        uint256 amountIn,\\r\\n        address recipient,\\r\\n        uint160 sqrtPriceLimitX96,\\r\\n        ToadStructs.SwapCallbackData memory data\\r\\n    ) private returns (uint256 amountOut) {\\r\\n        // Input validation on the bot submission prevents manipulation of this\\r\\n        // find and replace recipient addresses\\r\\n        if (recipient == Constants.MSG_SENDER) recipient = msg.sender;\\r\\n        else if (recipient == Constants.ADDRESS_THIS) recipient = address(this);\\r\\n\\r\\n        (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool();\\r\\n\\r\\n        // Generate the abi encode of the callback data\\r\\n        bytes memory callbackData = abi.encode(data);\\r\\n        // Generate a callback data hash\\r\\n        callbackDataHash = keccak256(callbackData);\\r\\n        bool zeroForOne = tokenIn < tokenOut;\\r\\n\\r\\n        (int256 amount0, int256 amount1) =\\r\\n            getPool(tokenIn, tokenOut, fee, data.dex).swap(\\r\\n                recipient,\\r\\n                zeroForOne,\\r\\n                amountIn.toInt256(),\\r\\n                sqrtPriceLimitX96 == 0\\r\\n                    ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\\r\\n                    : sqrtPriceLimitX96,\\r\\n                callbackData\\r\\n            );\\r\\n            // Clear the callback data hash\\r\\n        delete(callbackDataHash);\\r\\n        return uint256(-(zeroForOne ? amount1 : amount0));\\r\\n    }\\r\\n\\r\\n    function exactInputGas(ToadStructs.FeeStruct memory fees, ToadStructs.GasRepayParams memory repay) internal {\\r\\n        // No WETH in the hops, so we need to run a sell of our own first off\\r\\n        uint256 gasReturn = fees.gasLimit * tx.gasprice;\\r\\n        if((gasReturn + fees.fee) == 0) {\\r\\n            return;\\r\\n        }\\r\\n        address payer = msg.sender;\\r\\n        uint256 amtOutGas = 0;\\r\\n        while (true) { \\r\\n            bool hasMultiplePools = repay.path.hasMultiplePools();\\r\\n            repay.amountIn = exactInputInternal(\\r\\n                repay.amountIn,\\r\\n                address(this) , // Always pays out to the router, as this will end in WETH9 to be given as gas repay\\r\\n                0,\\r\\n                ToadStructs.SwapCallbackData({\\r\\n                    path: repay.path.getFirstPool(), // only the first pool in the path is necessary\\r\\n                    payer: payer,\\r\\n                    isVeth: false,\\r\\n                    dex: repay.dex\\r\\n                })\\r\\n            );\\r\\n            // decide whether to continue or terminate\\r\\n            if (hasMultiplePools) {\\r\\n                payer = address(this);\\r\\n                repay.path = repay.path.skipToken();\\r\\n            } else {\\r\\n                amtOutGas = repay.amountIn;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if(amtOutGas < gasReturn + fees.fee) {\\r\\n            revert NotEnoughGas();\\r\\n        }\\r\\n        \\r\\n        if (fees.fee > 0) {\\r\\n            // Send the WETH on its own\\r\\n            TransferHelper.safeTransfer(WETH, fees.feeReceiver, fees.fee);\\r\\n        }\\r\\n        processWETH();\\r\\n    }\\r\\n\\r\\n    function exactInputSingle(ToadStructs.ExactInputSingleParams memory params, ToadStructs.FeeStruct memory fees, ToadStructs.GasRepayParams memory repay)\\r\\n        external\\r\\n        payable\\r\\n        override\\r\\n        onlyBot\\r\\n        returns (uint256 amountOut)\\r\\n    {\\r\\n        exactInputGas(fees, repay);\\r\\n\\r\\n        // Now, do the swap\\r\\n        amountOut = exactInputInternal(\\r\\n            params.amountIn,\\r\\n            params.recipient,\\r\\n            params.sqrtPriceLimitX96,\\r\\n            ToadStructs.SwapCallbackData({\\r\\n                path: abi.encodePacked(params.tokenIn, params.fee, params.tokenOut),\\r\\n                payer: params.holder,\\r\\n                isVeth: false,\\r\\n                dex: params.dex\\r\\n            })\\r\\n        );\\r\\n        if(amountOut < params.amountOutMinimum) {\\r\\n            revert NotEnoughOutput();\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function exactInputSingleWETH(ToadStructs.ExactInputSingleParams memory params, ToadStructs.FeeStruct memory fees)\\r\\n        external\\r\\n        payable\\r\\n        override\\r\\n        onlyBot\\r\\n        returns (uint256 amountOut)\\r\\n    {\\r\\n        if(params.tokenIn != WETH && params.tokenIn != vETH && params.tokenOut != WETH) {\\r\\n            revert InvalidPath();\\r\\n        }\\r\\n        uint256 gasReturn = fees.gasLimit * tx.gasprice;\\r\\n        // We don't support the swap entire contract balance\\r\\n        bool isveth = false;\\r\\n        if(params.tokenIn == WETH) {\\r\\n            inputWETHHandle(params.holder, gasReturn, fees);\\r\\n        } else if(params.tokenIn == vETH) {\\r\\n            // vETH\\r\\n            inputVETHHandle(params.holder, gasReturn, params.amountIn, fees, address(this));\\r\\n            isveth = true;\\r\\n            params.tokenIn == WETH;\\r\\n        } \\r\\n        // Otherwise, output must be WETH\\r\\n        if(params.tokenOut == WETH) {\\r\\n            // Pay to us, so we can interdict and pay on\\r\\n            amountOut = exactInputInternal(\\r\\n                params.amountIn,\\r\\n                address(this),\\r\\n                params.sqrtPriceLimitX96,\\r\\n                ToadStructs.SwapCallbackData({\\r\\n                    path: abi.encodePacked(params.tokenIn, params.fee, params.tokenOut),\\r\\n                    payer: params.holder,\\r\\n                    isVeth: isveth,\\r\\n                    dex: params.dex\\r\\n                })\\r\\n            );\\r\\n            if(amountOut < params.amountOutMinimum) {\\r\\n            revert NotEnoughOutput();\\r\\n            }\\r\\n            outputWETHHandle(params.unwrap, params.recipient, gasReturn, amountOut, fees);\\r\\n\\r\\n        } else {\\r\\n            amountOut = exactInputInternal(\\r\\n                params.amountIn,\\r\\n                params.recipient,\\r\\n                params.sqrtPriceLimitX96,\\r\\n                ToadStructs.SwapCallbackData({\\r\\n                    path: abi.encodePacked(params.tokenIn, params.fee, params.tokenOut),\\r\\n                    payer: params.holder,\\r\\n                    isVeth: isveth,\\r\\n                    dex: params.dex\\r\\n                })\\r\\n            );\\r\\n            if(amountOut < params.amountOutMinimum) {\\r\\n                revert NotEnoughOutput();\\r\\n            }\\r\\n           \\r\\n        }\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n    function exactInput(ToadStructs.ExactInputParams memory params, ToadStructs.FeeStruct memory fees, ToadStructs.GasRepayParams memory repay) external payable override onlyBot returns (uint256 amountOut) {\\r\\n        \\r\\n        address payer = params.holder;\\r\\n        exactInputGas(fees, repay);\\r\\n        while (true) {\\r\\n            bool hasMultiplePools = params.path.hasMultiplePools();\\r\\n            \\r\\n            // the outputs of prior swaps become the inputs to subsequent ones\\r\\n            params.amountIn = exactInputInternal(\\r\\n                params.amountIn,\\r\\n                hasMultiplePools ? address(this) : params.recipient, // for intermediate swaps, this contract custodies\\r\\n                0,\\r\\n                ToadStructs.SwapCallbackData({\\r\\n                    path: params.path.getFirstPool(), // only the first pool in the path is necessary\\r\\n                    payer: payer,\\r\\n                    isVeth: false,\\r\\n                    dex: params.dex\\r\\n                })\\r\\n            );\\r\\n\\r\\n            // decide whether to continue or terminate\\r\\n            if (hasMultiplePools) {\\r\\n                payer = address(this);\\r\\n                params.path = params.path.skipToken();\\r\\n            } else {\\r\\n                amountOut = params.amountIn;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if(amountOut < params.amountOutMinimum) {\\r\\n            revert NotEnoughOutput();\\r\\n        }\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n    function inputWETHHandle(address holder, uint256 amount, ToadStructs.FeeStruct memory fees) internal {\\r\\n        // Is weth, so take the payment for gas and fee now\\r\\n        if(amount + fees.fee > 0) {\\r\\n            TransferHelper.safeTransferFrom(PERMIT2, WETH, holder, address(this), amount + fees.fee);\\r\\n            if (fees.fee > 0) {\\r\\n                // Send the WETH on its own\\r\\n                TransferHelper.safeTransfer(WETH, fees.feeReceiver, fees.fee);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        processWETH();\\r\\n    }\\r\\n\\r\\n    function inputVETHHandle(address holder, uint256 gasReturn, uint256 amount, ToadStructs.FeeStruct memory fees, address onward) internal {\\r\\n        IvETH vet = IvETH(vETH);\\r\\n        // Pull all to us\\r\\n        if(gasReturn + fees.fee > 0) {\\r\\n            vet.approvedTransferFrom(holder, gasReturn + fees.fee, address(this));\\r\\n        }\\r\\n        // Send the onward portion as WETH\\r\\n        if(amount > 0) {\\r\\n            vet.approvedConvertToWETH9(holder, amount - gasReturn - fees.fee, onward);\\r\\n        }\\r\\n        if (fees.fee > 0) {\\r\\n            vet.transfer(fees.feeReceiver, fees.fee);\\r\\n        }\\r\\n        if(vet.balanceOf(address(this)) > gasPayThreshold) {\\r\\n            // tx.origin here is used, not as authentication, but as the user to repay gas to. Given they paid the gas, they get it.\\r\\n            vet.approvedWithdraw(address(this), vet.balanceOf(address(this)), tx.origin);\\r\\n            \\r\\n        } \\r\\n    }\\r\\n\\r\\n    function outputWETHHandle(bool unwrap, address recipient, uint256 gasReturn, uint256 amountOut, ToadStructs.FeeStruct memory fees) internal {\\r\\n        // Pay fee\\r\\n        if (fees.fee > 0) {\\r\\n            TransferHelper.safeTransfer(WETH, fees.feeReceiver, fees.fee);\\r\\n        }\\r\\n        if(unwrap) {\\r\\n            // Unwrap it all, as we need to pay the user in ETH\\r\\n            IWETH(WETH).withdraw(IERC20(WETH).balanceOf(address(this)));\\r\\n            // Send user the ETH\\r\\n            TransferHelper.safeTransferETH(recipient, amountOut - fees.fee - gasReturn);\\r\\n            // send the rest to the tx origin \\r\\n            // tx.origin here is used, not as authentication, but as the user to repay gas to. Given they paid the gas, they get it.\\r\\n            TransferHelper.safeTransferETH(tx.origin, address(this).balance);\\r\\n        } else {\\r\\n            TransferHelper.safeTransfer(WETH, recipient, amountOut - fees.fee - gasReturn);\\r\\n            processWETH();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function exactInputWETH(ToadStructs.ExactInputParams memory params, ToadStructs.FeeStruct memory fees) external payable override onlyBot returns (uint256 amountOut) {\\r\\n        uint256 gasReturn = fees.gasLimit * tx.gasprice;\\r\\n        address payer = msg.sender;\\r\\n        bool hasPaid = false;\\r\\n        bool isveth = false;\\r\\n        (address tokenIn, ,) = params.path.decodeFirstPool();\\r\\n        if(tokenIn == WETH) {\\r\\n            inputWETHHandle(params.holder, gasReturn, fees);\\r\\n        } else if (tokenIn == vETH) {\\r\\n\\r\\n            inputVETHHandle(params.holder, gasReturn, params.amountIn, fees, address(this));\\r\\n            isveth = true;\\r\\n            params.path = params.path.replaceFirstPoolAddress(WETH);\\r\\n        }\\r\\n        while (true) {\\r\\n            bool hasMultiplePools = params.path.hasMultiplePools();\\r\\n            (, address tokenOut,) = params.path.decodeFirstPool();\\r\\n            \\r\\n            // the outputs of prior swaps become the inputs to subsequent ones\\r\\n            params.amountIn = exactInputInternal(\\r\\n                params.amountIn,\\r\\n                hasMultiplePools ? address(this) : params.recipient, // for intermediate swaps, this contract custodies\\r\\n                0,\\r\\n                ToadStructs.SwapCallbackData({\\r\\n                    path: params.path.getFirstPool(), // only the first pool in the path is necessary\\r\\n                    payer: payer,\\r\\n                    isVeth: isveth,\\r\\n                    dex: params.dex\\r\\n                })\\r\\n            );\\r\\n            isveth = false;\\r\\n            if (tokenOut == WETH) {\\r\\n                // Subtract fees now\\r\\n                params.amountIn = (params.amountIn - fees.fee - gasReturn);\\r\\n                if (fees.fee > 0) {\\r\\n                    TransferHelper.safeTransfer(WETH, fees.feeReceiver, fees.fee);\\r\\n                }\\r\\n                hasPaid = true;\\r\\n            }\\r\\n            \\r\\n\\r\\n            // decide whether to continue or terminate\\r\\n            if (hasMultiplePools) {\\r\\n                payer = address(this);\\r\\n                params.path = params.path.skipToken();\\r\\n            } else {\\r\\n                amountOut = params.amountIn;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        processWETH();\\r\\n        if(amountOut < params.amountOutMinimum) {\\r\\n            revert NotEnoughOutput();\\r\\n        }\\r\\n        if(!hasPaid) {\\r\\n            revert NotEnoughGas();\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ToadStructs.sol\": {\r\n      \"content\": \"\\r\\n// SPDX-License-Identifier: NONE\\r\\npragma solidity =0.8.20;\\r\\n\\r\\ncontract ToadStructs {\\r\\n    /**\\r\\n     * token: The token\\r\\n     * dexId: the position of the dex struct in the list provided - should be the same between input and output token \\r\\n     \\r\\n     */\\r\\n    struct AggPath {\\r\\n        address token;\\r\\n        uint96 dexId;\\r\\n    }\\r\\n    /**\\r\\n     * DexData - a list of UniV2 dexes referred to in AggPath - shared between gasPath and path\\r\\n     * initcode: the initcode to feed the create2 seed\\r\\n     * factory: the factory address to feed the create2 seed\\r\\n     */\\r\\n    struct DexData {\\r\\n        bytes32 initcode;\\r\\n        address factory;\\r\\n    }\\r\\n    /**\\r\\n     * FeeStruct - a batch of fees to be paid in gas and optionally to another account\\r\\n     */\\r\\n    struct FeeStruct {\\r\\n        uint256 gasLimit;\\r\\n        address feeReceiver;\\r\\n        uint96 fee;\\r\\n    }\\r\\n\\r\\n\\r\\n    struct ExactInputSingleParams {\\r\\n        address holder;\\r\\n        bool unwrap;\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n        DexData dex;\\r\\n    }\\r\\n\\r\\n    struct GasRepayParams {\\r\\n        bytes path;\\r\\n        DexData dex;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    struct SwapCallbackData {\\r\\n        bytes path;\\r\\n        address payer;\\r\\n        bool isVeth;\\r\\n        \\r\\n        DexData dex;\\r\\n    }\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        address holder;\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        DexData dex;\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ToadswapLibrary.sol\": {\r\n      \"content\": \"/**\\r\\n * Modified version of the UniswapV2Library to use inbuilt SafeMath\\r\\n * Also supports Toad struct stuff\\r\\n */\\r\\n//SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.8.20;\\r\\n\\r\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\r\\n\\r\\nimport './ToadStructs.sol';\\r\\n\\r\\nlibrary ToadswapLibrary {\\r\\n\\r\\n\\r\\n    error InsufficientAmount();\\r\\n    error InsufficientLiquidity();\\r\\n    error IdenticalAddress();\\r\\n    error ZeroAddress();\\r\\n    error InvalidPathLib();\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, 'ToadswapLibrary: IDENTICAL_ADDRESSES');\\r\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'ToadswapLibrary: ZERO_ADDRESS');\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a UniswapV2 pair without making any external calls\\r\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\r\\n        pair = pairFor(tokenA, tokenB, ToadStructs.DexData(hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f', factory));\\r\\n    }\\r\\n\\r\\n\\r\\n    function pairFor(address tokenA, address tokenB, ToadStructs.DexData memory dex) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(uint160(uint256(keccak256(abi.encodePacked(\\r\\n            hex'ff',\\r\\n            dex.factory,\\r\\n            keccak256(abi.encodePacked(token0, token1)),\\r\\n            dex.initcode // init code hash\\r\\n\\r\\n        )))));\\r\\n\\r\\n    }\\r\\n\\r\\n    function getDexId(ToadStructs.AggPath memory path, ToadStructs.DexData[] memory dexes ) internal pure returns(ToadStructs.DexData memory dex) {\\r\\n        dex = dexes[path.dexId];\\r\\n    }\\r\\n\\r\\n\\r\\n    function getPriceOut(uint256 amountIn, ToadStructs.AggPath[] calldata path, ToadStructs.DexData[] calldata dexes) internal view returns (uint256[] memory amounts) {\\r\\n        if(path.length < 2) {\\r\\n            revert InvalidPathLib();\\r\\n        }\\r\\n        amounts = new uint[](path.length);\\r\\n        amounts[0] = amountIn;\\r\\n        for (uint i; i < path.length - 1; i++) {\\r\\n\\r\\n            (uint reserveIn, uint reserveOut) = getReserves(path[i].token, path[i + 1].token, dexes[path[i+1].dexId]);\\r\\n            amounts[i + 1] = quote(amounts[i], reserveIn, reserveOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    // fetches and sorts the reserves for a pair\\r\\n    function getReserves(address tokenA, address tokenB, ToadStructs.DexData memory dex) internal view returns (uint reserveA, uint reserveB) {\\r\\n        (address token0,) = sortTokens(tokenA, tokenB);\\r\\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(tokenA, tokenB, dex)).getReserves();\\r\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\r\\n    }\\r\\n\\r\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\r\\n        if (amountA == 0) {\\r\\n            revert InsufficientAmount();\\r\\n        }\\r\\n        if(reserveA == 0 && reserveB == 0) {\\r\\n            revert InsufficientLiquidity();\\r\\n        }\\r\\n    \\r\\n        amountB = amountA * (reserveB) / reserveA;\\r\\n    }\\r\\n\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\r\\n        if (amountIn == 0) {\\r\\n            revert InsufficientAmount();\\r\\n        }\\r\\n        if(reserveIn == 0 && reserveOut == 0) {\\r\\n            revert InsufficientLiquidity();\\r\\n        }\\r\\n        uint amountInWithFee = amountIn * 997;\\r\\n        uint numerator = amountInWithFee * reserveOut;\\r\\n        uint denominator = (reserveIn * 1000) + amountInWithFee;\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n\\r\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\\r\\n        if (amountOut == 0) {\\r\\n            revert InsufficientAmount();\\r\\n        }\\r\\n        if(reserveIn == 0 && reserveOut == 0) {\\r\\n            revert InsufficientLiquidity();\\r\\n        }\\r\\n        uint numerator = reserveIn * amountOut * 1000;\\r\\n        uint denominator = (reserveOut - amountOut) * 997;\\r\\n        amountIn = (numerator / denominator) + 1;\\r\\n    }\\r\\n\\r\\n    // performs chained getAmountOut calculations on any number of pairs\\r\\n    function getAmountsOut(uint amountIn, ToadStructs.AggPath[] memory path, ToadStructs.DexData[] memory dexes, address vETH, address WETH) internal view returns (uint[] memory amounts) {\\r\\n        if(path.length < 2) {\\r\\n            revert InvalidPathLib();\\r\\n        }\\r\\n        if(path[0].token == vETH) {\\r\\n            path[0].token = WETH;\\r\\n        }\\r\\n        amounts = new uint[](path.length);\\r\\n        amounts[0] = amountIn;\\r\\n\\r\\n        for (uint i; i < path.length - 1; i++) {\\r\\n            (uint reserveIn, uint reserveOut) = getReserves(path[i].token, path[i + 1].token, dexes[path[i+1].dexId]);\\r\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    // performs chained getAmountIn calculations on any number of pairs\\r\\n    function getAmountsIn(uint amountOut, ToadStructs.AggPath[] memory path, ToadStructs.DexData[] memory dexes, address vETH, address WETH) internal view returns (uint[] memory amounts) {\\r\\n        if(path.length < 2) {\\r\\n            revert InvalidPathLib();\\r\\n        }\\r\\n        if(path[0].token == vETH) {\\r\\n            path[0].token = WETH;\\r\\n        }\\r\\n        amounts = new uint[](path.length);\\r\\n        amounts[amounts.length - 1] = amountOut;\\r\\n        for (uint i = path.length - 1; i > 0; i--) {\\r\\n            (uint reserveIn, uint reserveOut) = getReserves(path[i - 1].token, path[i].token, dexes[path[i].dexId]);\\r\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ToadswapPermits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.8.20;\\r\\nimport \\\"./IPermitDai.sol\\\";\\r\\nimport \\\"./IERC20Permit.sol\\\";\\r\\nlibrary ToadswapPermits {\\r\\n    bytes32 public constant DAI_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\\r\\n    error NotDaiPermit();\\r\\n    error NotPermittable();\\r\\n    function permitDai(address PERMIT2, address holder, address tok, uint256 nonce, uint256 deadline, uint8 v, bytes32 r, bytes32 s) internal {\\r\\n        IPermitDai dpermit = IPermitDai(tok);\\r\\n        // The Dai-style permit's typehash is always the same\\r\\n        if(dpermit.PERMIT_TYPEHASH() != DAI_TYPEHASH) {\\r\\n            revert NotDaiPermit();\\r\\n        }\\r\\n        dpermit.permit(holder, PERMIT2, nonce, deadline, true, v, r, s);\\r\\n    }\\r\\n\\r\\n    function permit(address PERMIT2, address holder, address tok, uint256 deadline, uint8 v, bytes32 r, bytes32 s) internal {\\r\\n        // There isn't actually a really easy way to check if an IERC20Permit actually meets the standard\\r\\n        // So best we can do is try and ensure success on the selector nonces(address) - this will match Permit and Dai Permit\\r\\n        (bool success, ) = tok.call(abi.encodeWithSelector(0x7ecebe00, holder));\\r\\n        if(!success) {\\r\\n            revert NotPermittable();\\r\\n        }\\r\\n        IERC20Permit ptok = IERC20Permit(tok);\\r\\n        ptok.permit(holder, PERMIT2, type(uint256).max, deadline, v, r, s);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/TransferHelper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\r\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\r\\n// Modified by TBC to use Permit2's transferFrom and vETH privs\\r\\nimport \\\"./IPermit2/IAllowanceTransfer.sol\\\";\\r\\npragma solidity =0.8.20;\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address permit2, address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint160,address)')));\\r\\n        IAllowanceTransfer permitter = IAllowanceTransfer(permit2);\\r\\n        permitter.transferFrom(from, to, uint160(value), token);\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        (bool success,) = to.call{value:value}(new bytes(0));\\r\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/V3/BytesLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\n/*\\r\\n * @title Solidity Bytes Arrays Utils\\r\\n * @author Gon\u00e7alo S\u00e1 <goncalo.sa@consensys.net>\\r\\n *\\r\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\r\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\r\\n */\\r\\npragma solidity =0.8.20;\\r\\n\\r\\nlibrary BytesLib {\\r\\n    function slice(\\r\\n        bytes memory _bytes,\\r\\n        uint256 _start,\\r\\n        uint256 _length\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        require(_length + 31 >= _length, 'slice_overflow');\\r\\n        require(_start + _length >= _start, 'slice_overflow');\\r\\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\\r\\n\\r\\n        bytes memory tempBytes;\\r\\n\\r\\n        assembly {\\r\\n            switch iszero(_length)\\r\\n                case 0 {\\r\\n                    // Get a location of some free memory and store it in tempBytes as\\r\\n                    // Solidity does for memory variables.\\r\\n                    tempBytes := mload(0x40)\\r\\n\\r\\n                    // The first word of the slice result is potentially a partial\\r\\n                    // word read from the original array. To read it, we calculate\\r\\n                    // the length of that partial word and start copying that many\\r\\n                    // bytes into the array. The first word we copy will start with\\r\\n                    // data we don't care about, but the last `lengthmod` bytes will\\r\\n                    // land at the beginning of the contents of the new array. When\\r\\n                    // we're done copying, we overwrite the full first word with\\r\\n                    // the actual length of the slice.\\r\\n                    let lengthmod := and(_length, 31)\\r\\n\\r\\n                    // The multiplication in the next line is necessary\\r\\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\\r\\n                    // the following copy loop was copying the origin's length\\r\\n                    // and then ending prematurely not copying everything it should.\\r\\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\r\\n                    let end := add(mc, _length)\\r\\n\\r\\n                    for {\\r\\n                        // The multiplication in the next line has the same exact purpose\\r\\n                        // as the one above.\\r\\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\r\\n                    } lt(mc, end) {\\r\\n                        mc := add(mc, 0x20)\\r\\n                        cc := add(cc, 0x20)\\r\\n                    } {\\r\\n                        mstore(mc, mload(cc))\\r\\n                    }\\r\\n\\r\\n                    mstore(tempBytes, _length)\\r\\n\\r\\n                    //update free-memory pointer\\r\\n                    //allocating the array padded to 32 bytes like the compiler does now\\r\\n                    mstore(0x40, and(add(mc, 31), not(31)))\\r\\n                }\\r\\n                //if we want a zero-length slice let's just return a zero-length array\\r\\n                default {\\r\\n                    tempBytes := mload(0x40)\\r\\n                    //zero out the 32 bytes slice we are about to return\\r\\n                    //we need to do it because Solidity does not garbage collect\\r\\n                    mstore(tempBytes, 0)\\r\\n\\r\\n                    mstore(0x40, add(tempBytes, 0x20))\\r\\n                }\\r\\n        }\\r\\n\\r\\n        return tempBytes;\\r\\n    }\\r\\n\\r\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\r\\n        require(_start + 20 >= _start, 'toAddress_overflow');\\r\\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\\r\\n        address tempAddress;\\r\\n\\r\\n        assembly {\\r\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\r\\n        }\\r\\n\\r\\n        return tempAddress;\\r\\n    }\\r\\n\\r\\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\\r\\n        require(_start + 3 >= _start, 'toUint24_overflow');\\r\\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\\r\\n        uint24 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/V3/CallbackValidation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity =0.8.20;\\r\\n\\r\\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\\r\\nimport './PoolAddress.sol';\\r\\nimport \\\"../ToadStructs.sol\\\";\\r\\n/// @notice Provides validation for callbacks from Uniswap V3 Pools\\r\\nlibrary CallbackValidation {\\r\\n    /// @notice Returns the address of a valid Uniswap V3 Pool\\r\\n    /// @param tokenA The contract address of either token0 or token1\\r\\n    /// @param tokenB The contract address of the other token\\r\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\r\\n    /// @param dex The dex that represents the V3 factory and initcode\\r\\n    /// @return pool The V3 pool contract address\\r\\n    function verifyCallback(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee,\\r\\n        ToadStructs.DexData memory dex\\r\\n    ) internal view returns (IUniswapV3Pool pool) {\\r\\n        return verifyCallback(PoolAddress.getPoolKey(tokenA, tokenB, fee), dex);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the address of a valid Uniswap V3 Pool\\r\\n    /// @param poolKey The identifying key of the V3 pool\\r\\n    /// @return pool The V3 pool contract address\\r\\n    function verifyCallback( PoolAddress.PoolKey memory poolKey, ToadStructs.DexData memory dex)\\r\\n        internal\\r\\n        view\\r\\n        returns (IUniswapV3Pool pool)\\r\\n    {\\r\\n        pool = IUniswapV3Pool(PoolAddress.computeAddress(dex.factory, dex.initcode, poolKey));\\r\\n        require(msg.sender == address(pool));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/V3/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity =0.8.20;\\r\\n\\r\\n/// @title Constant state\\r\\n/// @notice Constant state used by the swap router\\r\\nlibrary Constants {\\r\\n    /// @dev Used for identifying cases when this contract's balance of a token is to be used\\r\\n    uint256 internal constant CONTRACT_BALANCE = 0;\\r\\n\\r\\n    /// @dev Used as a flag for identifying msg.sender, saves gas by sending more 0 bytes\\r\\n    address internal constant MSG_SENDER = address(1);\\r\\n\\r\\n    /// @dev Used as a flag for identifying address(this), saves gas by sending more 0 bytes\\r\\n    address internal constant ADDRESS_THIS = address(2);\\r\\n}\"\r\n    },\r\n    \"contracts/V3/Path.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity =0.8.20;\\r\\n\\r\\nimport './BytesLib.sol';\\r\\n\\r\\n/// @title Functions for manipulating path data for multihop swaps\\r\\nlibrary Path {\\r\\n    using BytesLib for bytes;\\r\\n\\r\\n    /// @dev The length of the bytes encoded address\\r\\n    uint256 private constant ADDR_SIZE = 20;\\r\\n    /// @dev The length of the bytes encoded fee\\r\\n    uint256 private constant FEE_SIZE = 3;\\r\\n\\r\\n    /// @dev The offset of a single token address and pool fee\\r\\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\\r\\n    /// @dev The offset of an encoded pool key\\r\\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\\r\\n    /// @dev The minimum length of an encoding that contains 2 or more pools\\r\\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\\r\\n\\r\\n    /// @notice Returns true iff the path contains two or more pools\\r\\n    /// @param path The encoded swap path\\r\\n    /// @return True if path contains two or more pools, otherwise false\\r\\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\\r\\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the number of pools in the path\\r\\n    /// @param path The encoded swap path\\r\\n    /// @return The number of pools in the path\\r\\n    function numPools(bytes memory path) internal pure returns (uint256) {\\r\\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\\r\\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\\r\\n    }\\r\\n\\r\\n    /// @notice Decodes the first pool in path\\r\\n    /// @param path The bytes encoded swap path\\r\\n    /// @return tokenA The first token of the given pool\\r\\n    /// @return tokenB The second token of the given pool\\r\\n    /// @return fee The fee level of the pool\\r\\n    function decodeFirstPool(bytes memory path)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            address tokenA,\\r\\n            address tokenB,\\r\\n            uint24 fee\\r\\n        )\\r\\n    {\\r\\n        tokenA = path.toAddress(0);\\r\\n        fee = path.toUint24(ADDR_SIZE);\\r\\n        tokenB = path.toAddress(NEXT_OFFSET);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Replaces the first pool address with the input\\r\\n     * Added by TBC for ToadSwap\\r\\n     * @param path path to modify\\r\\n     * @param inp address to add\\r\\n     * @return the modified path\\r\\n     */\\r\\n    function replaceFirstPoolAddress(bytes memory path, address inp) internal pure returns (bytes memory) {\\r\\n        bytes20 addr20 = bytes20(inp); \\r\\n        for(uint256 i = 0; i < 20; i++) {\\r\\n            path[i] = addr20[i];\\r\\n        }\\r\\n        return path;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the segment corresponding to the first pool in the path\\r\\n    /// @param path The bytes encoded swap path\\r\\n    /// @return The segment containing all data necessary to target the first pool in the path\\r\\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\\r\\n        return path.slice(0, POP_OFFSET);\\r\\n    }\\r\\n\\r\\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\\r\\n    /// @param path The swap path\\r\\n    /// @return The remaining token + fee elements in the path\\r\\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\\r\\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/V3/PoolAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity =0.8.20;\\r\\n\\r\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\r\\nlibrary PoolAddress {\\r\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\r\\n\\r\\n    /// @notice The identifying key of the pool\\r\\n    struct PoolKey {\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint24 fee;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\r\\n    /// @param tokenA The first token of a pool, unsorted\\r\\n    /// @param tokenB The second token of a pool, unsorted\\r\\n    /// @param fee The fee level of the pool\\r\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\r\\n    function getPoolKey(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) internal pure returns (PoolKey memory) {\\r\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\r\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\r\\n    }\\r\\n\\r\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\r\\n    /// @param factory The Uniswap V3 factory contract address\\r\\n    /// @param key The PoolKey\\r\\n    /// @return pool The contract address of the V3 pool\\r\\n    function computeAddress(address factory, bytes32 initcode, PoolKey memory key) internal pure returns (address pool) {\\r\\n        require(key.token0 < key.token1);\\r\\n        pool = address(uint160(\\r\\n            uint256(\\r\\n                keccak256(\\r\\n                    abi.encodePacked(\\r\\n                        hex'ff',\\r\\n                        factory,\\r\\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\\r\\n                        initcode\\r\\n                    )\\r\\n                )\\r\\n            ))\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/V3/TickMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity =0.8.20;\\r\\n\\r\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\r\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\r\\n/// prices between 2**-128 and 2**128\\r\\nlibrary TickMath {\\r\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\r\\n    int24 internal constant MIN_TICK = -887272;\\r\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\r\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\r\\n\\r\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\r\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\r\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\r\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\r\\n\\r\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\r\\n    /// @dev Throws if |tick| > max tick\\r\\n    /// @param tick The input tick for the above formula\\r\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\r\\n    /// at the given tick\\r\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\r\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\r\\n        require(absTick <= uint256(uint24(MAX_TICK)), 'T');\\r\\n\\r\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\r\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\r\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\r\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\r\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\r\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\r\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\r\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\r\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\r\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\r\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\r\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\r\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\r\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\r\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\r\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\r\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\r\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\r\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\r\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\r\\n\\r\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\r\\n\\r\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\r\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\r\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\r\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\r\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\r\\n    /// ever return.\\r\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\r\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\r\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\r\\n        // second inequality must be < because the price can never reach the price at the max tick\\r\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\r\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\r\\n\\r\\n        uint256 r = ratio;\\r\\n        uint256 msb = 0;\\r\\n\\r\\n        assembly {\\r\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(4, gt(r, 0xFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(3, gt(r, 0xFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(2, gt(r, 0xF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(1, gt(r, 0x3))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := gt(r, 0x1)\\r\\n            msb := or(msb, f)\\r\\n        }\\r\\n\\r\\n        if (msb >= 128) r = ratio >> (msb - 127);\\r\\n        else r = ratio << (127 - msb);\\r\\n\\r\\n        int256 log_2 = (int256(msb) - 128) << 64;\\r\\n\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(63, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(62, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(61, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(60, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(59, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(58, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(57, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(56, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(55, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(54, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(53, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(52, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(51, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(50, f))\\r\\n        }\\r\\n\\r\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\r\\n\\r\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\r\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\r\\n\\r\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"viaIR\": true,\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Expired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPath\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPathLib\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAcceptETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonceInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDaiPermit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughGas\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughOutput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPermittable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unsupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Untrusted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bot\",\"type\":\"address\"}],\"name\":\"BotAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bot\",\"type\":\"address\"}],\"name\":\"BotRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"GasPayThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBot\",\"type\":\"address\"}],\"name\":\"addTrustedBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"internalType\":\"struct ToadStructs.FeeStruct\",\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"convertVETHtoWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"initcode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"internalType\":\"struct ToadStructs.DexData\",\"name\":\"dex\",\"type\":\"tuple\"}],\"internalType\":\"struct ToadStructs.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"internalType\":\"struct ToadStructs.FeeStruct\",\"name\":\"fees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"initcode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"internalType\":\"struct ToadStructs.DexData\",\"name\":\"dex\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ToadStructs.GasRepayParams\",\"name\":\"repay\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"initcode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"internalType\":\"struct ToadStructs.DexData\",\"name\":\"dex\",\"type\":\"tuple\"}],\"internalType\":\"struct ToadStructs.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"internalType\":\"struct ToadStructs.FeeStruct\",\"name\":\"fees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"initcode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"internalType\":\"struct ToadStructs.DexData\",\"name\":\"dex\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ToadStructs.GasRepayParams\",\"name\":\"repay\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"initcode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"internalType\":\"struct ToadStructs.DexData\",\"name\":\"dex\",\"type\":\"tuple\"}],\"internalType\":\"struct ToadStructs.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"internalType\":\"struct ToadStructs.FeeStruct\",\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"exactInputSingleWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"initcode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"internalType\":\"struct ToadStructs.DexData\",\"name\":\"dex\",\"type\":\"tuple\"}],\"internalType\":\"struct ToadStructs.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"internalType\":\"struct ToadStructs.FeeStruct\",\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"exactInputWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPayThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"dexId\",\"type\":\"uint96\"}],\"internalType\":\"struct ToadStructs.AggPath[]\",\"name\":\"path\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"initcode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"internalType\":\"struct ToadStructs.DexData[]\",\"name\":\"dexes\",\"type\":\"tuple[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"dexId\",\"type\":\"uint96\"}],\"internalType\":\"struct ToadStructs.AggPath[]\",\"name\":\"path\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"initcode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"internalType\":\"struct ToadStructs.DexData[]\",\"name\":\"dexes\",\"type\":\"tuple[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"dexId\",\"type\":\"uint96\"}],\"internalType\":\"struct ToadStructs.AggPath[]\",\"name\":\"path\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"initcode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"internalType\":\"struct ToadStructs.DexData[]\",\"name\":\"dexes\",\"type\":\"tuple[]\"}],\"name\":\"getPriceOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fac\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"veth\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fac\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"permit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"veth\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"modifyGasPayThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tok\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"performPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"internalType\":\"struct IAllowanceTransfer.PermitDetails[]\",\"name\":\"details\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sigDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowanceTransfer.PermitBatch\",\"name\":\"permitBatch\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"performPermit2Batch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"internalType\":\"struct IAllowanceTransfer.PermitDetails\",\"name\":\"details\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sigDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowanceTransfer.PermitSingle\",\"name\":\"permitSingle\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"performPermit2Single\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tok\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"performPermitDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bot\",\"type\":\"address\"}],\"name\":\"removeTrustedBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendETHToCoinbase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"dexId\",\"type\":\"uint96\"}],\"internalType\":\"struct ToadStructs.AggPath[]\",\"name\":\"path\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"internalType\":\"struct ToadStructs.FeeStruct\",\"name\":\"fees\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"ethFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"dexId\",\"type\":\"uint96\"}],\"internalType\":\"struct ToadStructs.AggPath[]\",\"name\":\"gasPath\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"initcode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"internalType\":\"struct ToadStructs.DexData[]\",\"name\":\"dexes\",\"type\":\"tuple[]\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"dexId\",\"type\":\"uint96\"}],\"internalType\":\"struct ToadStructs.AggPath[]\",\"name\":\"path1\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"dexId\",\"type\":\"uint96\"}],\"internalType\":\"struct ToadStructs.AggPath[]\",\"name\":\"path2\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"internalType\":\"struct ToadStructs.FeeStruct\",\"name\":\"fees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"initcode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"internalType\":\"struct ToadStructs.DexData[]\",\"name\":\"dexes\",\"type\":\"tuple[]\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokensWithWETHGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"dexId\",\"type\":\"uint96\"}],\"internalType\":\"struct ToadStructs.AggPath[]\",\"name\":\"path\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"internalType\":\"struct ToadStructs.FeeStruct\",\"name\":\"fees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"initcode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"internalType\":\"struct ToadStructs.DexData[]\",\"name\":\"dexes\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"name\":\"swapExactTokensForWETHSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"dexId\",\"type\":\"uint96\"}],\"internalType\":\"struct ToadStructs.AggPath[]\",\"name\":\"path\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"internalType\":\"struct ToadStructs.FeeStruct\",\"name\":\"fees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"initcode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"internalType\":\"struct ToadStructs.DexData[]\",\"name\":\"dexes\",\"type\":\"tuple[]\"}],\"name\":\"swapExactWETHforTokensSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"internalType\":\"struct ToadStructs.FeeStruct\",\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"unwrapVETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"internalType\":\"struct ToadStructs.FeeStruct\",\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"unwrapWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"useNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ToadRouter04", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}