{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/libraries/ChainHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {IOPGasPriceOracle} from \\\"../interfaces/IOPGasPriceOracle.sol\\\";\\n\\nlibrary ChainHelper {\\n    address public constant OP_GAS_PRICE_ORACLE_ADDR = address(0x420000000000000000000000000000000000000F);\\n    uint256 public constant OP_MAINNET_CHAIN_ID = 10;\\n    uint256 public constant OP_GOERLI_TESTNET_CHAIN_ID = 420;\\n    uint256 public constant OP_DEVNET_L1_CHAIN_ID = 900;\\n    uint256 public constant OP_DEVNET_L2_CHAIN_ID = 901;\\n    uint32 public constant OP_BASIC_FULFILLMENT_L1_GAS_USED = 5016;\\n    uint32 public constant OP_FULFILLMENT_GAS_PER_PARTICIPANT = 652;\\n    uint256 public constant OP_DIVISOR_DECIMALS = 6;\\n\\n    function getBlockTime() public view returns (uint256) {\\n        uint256 chainId = block.chainid;\\n        if (chainId == OP_MAINNET_CHAIN_ID || chainId == OP_GOERLI_TESTNET_CHAIN_ID || chainId == OP_DEVNET_L2_CHAIN_ID)\\n        {\\n            return 2;\\n        } else if (chainId == OP_DEVNET_L1_CHAIN_ID) {\\n            return 3;\\n        }\\n        return 12;\\n    }\\n\\n    function getCurrentTxL1GasFees() public view returns (uint256) {\\n        uint256 chainId = block.chainid;\\n        if (chainId == OP_MAINNET_CHAIN_ID || chainId == OP_GOERLI_TESTNET_CHAIN_ID || chainId == OP_DEVNET_L2_CHAIN_ID)\\n        {\\n            return IOPGasPriceOracle(OP_GAS_PRICE_ORACLE_ADDR).getL1Fee(msg.data);\\n        }\\n        return 0;\\n    }\\n\\n    function getTxL1GasFees(uint256 l1GasUsed) public view returns (uint256) {\\n        uint256 chainId = block.chainid;\\n        if (chainId == OP_MAINNET_CHAIN_ID || chainId == OP_GOERLI_TESTNET_CHAIN_ID || chainId == OP_DEVNET_L2_CHAIN_ID)\\n        {\\n            uint256 l1Fee = l1GasUsed * IOPGasPriceOracle(OP_GAS_PRICE_ORACLE_ADDR).l1BaseFee();\\n            uint256 divisor = 10 ** OP_DIVISOR_DECIMALS;\\n            uint256 unscaled = l1Fee * IOPGasPriceOracle(OP_GAS_PRICE_ORACLE_ADDR).scalar();\\n            return unscaled / divisor;\\n        }\\n        return 0;\\n    }\\n\\n    function getFulfillmentTxL1GasUsed(uint32 groupSize) public view returns (uint256) {\\n        uint256 chainId = block.chainid;\\n        if (chainId == OP_MAINNET_CHAIN_ID || chainId == OP_GOERLI_TESTNET_CHAIN_ID || chainId == OP_DEVNET_L2_CHAIN_ID)\\n        {\\n            return OP_BASIC_FULFILLMENT_L1_GAS_USED + groupSize * OP_FULFILLMENT_GAS_PER_PARTICIPANT;\\n        }\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOPGasPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IOPGasPriceOracle {\\n    /// @notice Computes the L1 portion of the fee based on the size of the rlp encoded input\\n    ///         transaction, the current L1 base fee, and the various dynamic parameters.\\n    /// @param _data Unsigned fully RLP-encoded transaction to get the L1 fee for.\\n    /// @return L1 fee that should be paid for the tx\\n    function getL1Fee(bytes memory _data) external view returns (uint256);\\n    /// @notice Retrieves the current fee scalar.\\n    /// @return Current fee scalar.\\n    function scalar() external view returns (uint256);\\n    /// @notice Retrieves the latest known L1 base fee.\\n    /// @return Latest known L1 base fee.\\n    function l1BaseFee() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"Randcast-User-Contract/=lib/Randcast-User-Contract/contracts/\",\r\n      \"Staking-v0.1/=lib/Staking-v0.1/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 300\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"OP_BASIC_FULFILLMENT_L1_GAS_USED\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OP_DEVNET_L1_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OP_DEVNET_L2_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OP_DIVISOR_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OP_FULFILLMENT_GAS_PER_PARTICIPANT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OP_GAS_PRICE_ORACLE_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OP_GOERLI_TESTNET_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OP_MAINNET_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTxL1GasFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"groupSize\",\"type\":\"uint32\"}],\"name\":\"getFulfillmentTxL1GasUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"l1GasUsed\",\"type\":\"uint256\"}],\"name\":\"getTxL1GasFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ChainHelper", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "300", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}