{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\n/**\r\n * @title   BlazeLottery\r\n * @author  SemiInvader\r\n * @notice  This contract is a lottery contract that will be used to distribute BLZ tokens to users\r\n *          The lottery will be a 5/63 lottery, where users will buy tickets with 5 numbers each spanning 8 bits in length\r\n *          The lottery will be run on a weekly basis, with the lottery ending on a specific time and date\r\n * @dev IMPORTANT DEPENDENCIES:\r\n *      - Chainlink VRF ConsumerBase -> Request randomness for winner number\r\n *      - Chainlink VRF Coordinator (Interface only) -> receive randomness from this one\r\n *      - Chainlink Keepers Implementation -> Once winner is received, check all tickets for matches and return count of matches back to contract to save that particular data\r\n *      - Chainlink Keeper Implementation 2 -> request randomness for next round\r\n */\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\ncontract AutomationBase {\r\n  error OnlySimulatedBackend();\r\n\r\n  /**\r\n   * @notice method that allows it to be simulated via eth_call by checking that\r\n   * the sender is the zero address.\r\n   */\r\n  function preventExecution() internal view {\r\n    if (tx.origin != address(0)) {\r\n      revert OnlySimulatedBackend();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice modifier that allows it to be simulated via eth_call by checking\r\n   * that the sender is the zero address.\r\n   */\r\n  modifier cannotExecute() {\r\n    preventExecution();\r\n    _;\r\n  }\r\n}\r\n\r\ninterface AutomationCompatibleInterface {\r\n  /**\r\n   * @notice method that is simulated by the keepers to see if any work actually\r\n   * needs to be performed. This method does does not actually need to be\r\n   * executable, and since it is only ever simulated it can consume lots of gas.\r\n   * @dev To ensure that it is never called, you may want to add the\r\n   * cannotExecute modifier from KeeperBase to your implementation of this\r\n   * method.\r\n   * @param checkData specified in the upkeep registration so it is always the\r\n   * same for a registered upkeep. This can easily be broken down into specific\r\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\r\n   * same contract and easily differentiated by the contract.\r\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\r\n   * performUpkeep or not.\r\n   * @return performData bytes that the keeper should call performUpkeep with, if\r\n   * upkeep is needed. If you would like to encode data to decode later, try\r\n   * `abi.encode`.\r\n   */\r\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\r\n\r\n  /**\r\n   * @notice method that is actually executed by the keepers, via the registry.\r\n   * The data returned by the checkUpkeep simulation will be passed into\r\n   * this method to actually be executed.\r\n   * @dev The input to this method should not be trusted, and the caller of the\r\n   * method should not even be restricted to any single registry. Anyone should\r\n   * be able call it, and the input should be validated, there is no guarantee\r\n   * that the data passed in is the performData returned from checkUpkeep. This\r\n   * could happen due to malicious keepers, racing keepers, or simply a state\r\n   * change while the performUpkeep transaction is waiting for confirmation.\r\n   * Always validate the data passed in.\r\n   * @param performData is the data which was passed back from the checkData\r\n   * simulation. If it is encoded, it can easily be decoded into other types by\r\n   * calling `abi.decode`. This data should not be trusted, and should be\r\n   * validated against the contract's current state.\r\n   */\r\n  function performUpkeep(bytes calldata performData) external;\r\n}\r\n\r\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\r\n\r\n/** ****************************************************************************\r\n * @notice Interface for contracts using VRF randomness\r\n * *****************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\r\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\r\n * @dev making his output up to suit himself. Reggie provides Vera a public key\r\n * @dev to which he knows the secret key. Each time Vera provides a seed to\r\n * @dev Reggie, he gives back a value which is computed completely\r\n * @dev deterministically from the seed and the secret key.\r\n *\r\n * @dev Reggie provides a proof by which Vera can verify that the output was\r\n * @dev correctly computed once Reggie tells it to her, but without that proof,\r\n * @dev the output is indistinguishable to her from a uniform random sample\r\n * @dev from the output space.\r\n *\r\n * @dev The purpose of this contract is to make it easy for unrelated contracts\r\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\r\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\r\n * @dev 1. The fulfillment came from the VRFCoordinator\r\n * @dev 2. The consumer contract implements fulfillRandomWords.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\r\n * @dev initialize VRFConsumerBase's attributes in their constructor as\r\n * @dev shown:\r\n *\r\n * @dev   contract VRFConsumer {\r\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\r\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\r\n * @dev         <initialization with other arguments goes here>\r\n * @dev       }\r\n * @dev   }\r\n *\r\n * @dev The oracle will have given you an ID for the VRF keypair they have\r\n * @dev committed to (let's call it keyHash). Create subscription, fund it\r\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\r\n * @dev subscription management functions).\r\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\r\n * @dev callbackGasLimit, numWords),\r\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\r\n *\r\n * @dev Once the VRFCoordinator has received and validated the oracle's response\r\n * @dev to your request, it will call your contract's fulfillRandomWords method.\r\n *\r\n * @dev The randomness argument to fulfillRandomWords is a set of random words\r\n * @dev generated from your requestId and the blockHash of the request.\r\n *\r\n * @dev If your contract could have concurrent requests open, you can use the\r\n * @dev requestId returned from requestRandomWords to track which response is associated\r\n * @dev with which randomness request.\r\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\r\n * @dev if your contract could have multiple requests in flight simultaneously.\r\n *\r\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\r\n * @dev differ.\r\n *\r\n * *****************************************************************************\r\n * @dev SECURITY CONSIDERATIONS\r\n *\r\n * @dev A method with the ability to call your fulfillRandomness method directly\r\n * @dev could spoof a VRF response with any random value, so it's critical that\r\n * @dev it cannot be directly called by anything other than this base contract\r\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\r\n *\r\n * @dev For your users to trust that your contract's random behavior is free\r\n * @dev from malicious interference, it's best if you can write it so that all\r\n * @dev behaviors implied by a VRF response are executed *during* your\r\n * @dev fulfillRandomness method. If your contract must store the response (or\r\n * @dev anything derived from it) and use it later, you must ensure that any\r\n * @dev user-significant behavior which depends on that stored value cannot be\r\n * @dev manipulated by a subsequent VRF request.\r\n *\r\n * @dev Similarly, both miners and the VRF oracle itself have some influence\r\n * @dev over the order in which VRF responses appear on the blockchain, so if\r\n * @dev your contract could have multiple VRF requests in flight simultaneously,\r\n * @dev you must ensure that the order in which the VRF responses arrive cannot\r\n * @dev be used to manipulate your contract's user-significant behavior.\r\n *\r\n * @dev Since the block hash of the block which contains the requestRandomness\r\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\r\n * @dev miner could, in principle, fork the blockchain to evict the block\r\n * @dev containing the request, forcing the request to be included in a\r\n * @dev different block with a different hash, and therefore a different input\r\n * @dev to the VRF. However, such an attack would incur a substantial economic\r\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\r\n * @dev until it calls responds to a request. It is for this reason that\r\n * @dev that you can signal to an oracle you'd like them to wait longer before\r\n * @dev responding to the request (however this is not enforced in the contract\r\n * @dev and so remains effective only in the case of unmodified oracle software).\r\n */\r\nabstract contract VRFConsumerBaseV2 {\r\n  error OnlyCoordinatorCanFulfill(address have, address want);\r\n  address private immutable vrfCoordinator;\r\n\r\n  /**\r\n   * @param _vrfCoordinator address of VRFCoordinator contract\r\n   */\r\n  constructor(address _vrfCoordinator) {\r\n    vrfCoordinator = _vrfCoordinator;\r\n  }\r\n\r\n  /**\r\n   * @notice fulfillRandomness handles the VRF response. Your contract must\r\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\r\n   * @notice principles to keep in mind when implementing your fulfillRandomness\r\n   * @notice method.\r\n   *\r\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\r\n   * @dev signature, and will call it once it has verified the proof\r\n   * @dev associated with the randomness. (It is triggered via a call to\r\n   * @dev rawFulfillRandomness, below.)\r\n   *\r\n   * @param requestId The Id initially returned by requestRandomness\r\n   * @param randomWords the VRF output expanded to the requested number of words\r\n   */\r\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\r\n\r\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n  // the origin of the call\r\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\r\n    if (msg.sender != vrfCoordinator) {\r\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\r\n    }\r\n    fulfillRandomWords(requestId, randomWords);\r\n  }\r\n}\r\n\r\ninterface VRFCoordinatorV2Interface {\r\n  /**\r\n   * @notice Get configuration relevant for making requests\r\n   * @return minimumRequestConfirmations global min for request confirmations\r\n   * @return maxGasLimit global max for request gas limit\r\n   * @return s_provingKeyHashes list of registered key hashes\r\n   */\r\n  function getRequestConfig()\r\n    external\r\n    view\r\n    returns (\r\n      uint16,\r\n      uint32,\r\n      bytes32[] memory\r\n    );\r\n\r\n  /**\r\n   * @notice Request a set of random words.\r\n   * @param keyHash - Corresponds to a particular oracle job which uses\r\n   * that key for generating the VRF proof. Different keyHash's have different gas price\r\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\r\n   * @param subId  - The ID of the VRF subscription. Must be funded\r\n   * with the minimum subscription balance required for the selected keyHash.\r\n   * @param minimumRequestConfirmations - How many blocks you'd like the\r\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\r\n   * for why you may want to request more. The acceptable range is\r\n   * [minimumRequestBlockConfirmations, 200].\r\n   * @param callbackGasLimit - How much gas you'd like to receive in your\r\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\r\n   * may be slightly less than this amount because of gas used calling the function\r\n   * (argument decoding etc.), so you may need to request slightly more than you expect\r\n   * to have inside fulfillRandomWords. The acceptable range is\r\n   * [0, maxGasLimit]\r\n   * @param numWords - The number of uint256 random values you'd like to receive\r\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\r\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\r\n   * @return requestId - A unique identifier of the request. Can be used to match\r\n   * a request to a response in fulfillRandomWords.\r\n   */\r\n  function requestRandomWords(\r\n    bytes32 keyHash,\r\n    uint64 subId,\r\n    uint16 minimumRequestConfirmations,\r\n    uint32 callbackGasLimit,\r\n    uint32 numWords\r\n  ) external returns (uint256 requestId);\r\n\r\n  /**\r\n   * @notice Create a VRF subscription.\r\n   * @return subId - A unique subscription id.\r\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\r\n   * @dev Note to fund the subscription, use transferAndCall. For example\r\n   * @dev  LINKTOKEN.transferAndCall(\r\n   * @dev    address(COORDINATOR),\r\n   * @dev    amount,\r\n   * @dev    abi.encode(subId));\r\n   */\r\n  function createSubscription() external returns (uint64 subId);\r\n\r\n  /**\r\n   * @notice Get a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @return balance - LINK balance of the subscription in juels.\r\n   * @return reqCount - number of requests for this subscription, determines fee tier.\r\n   * @return owner - owner of the subscription.\r\n   * @return consumers - list of consumer address which are able to use this subscription.\r\n   */\r\n  function getSubscription(uint64 subId)\r\n    external\r\n    view\r\n    returns (\r\n      uint96 balance,\r\n      uint64 reqCount,\r\n      address owner,\r\n      address[] memory consumers\r\n    );\r\n\r\n  /**\r\n   * @notice Request subscription owner transfer.\r\n   * @param subId - ID of the subscription\r\n   * @param newOwner - proposed new owner of the subscription\r\n   */\r\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\r\n\r\n  /**\r\n   * @notice Request subscription owner transfer.\r\n   * @param subId - ID of the subscription\r\n   * @dev will revert if original owner of subId has\r\n   * not requested that msg.sender become the new owner.\r\n   */\r\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\r\n\r\n  /**\r\n   * @notice Add a consumer to a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @param consumer - New consumer which can use the subscription\r\n   */\r\n  function addConsumer(uint64 subId, address consumer) external;\r\n\r\n  /**\r\n   * @notice Remove a consumer from a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @param consumer - Consumer to remove from the subscription\r\n   */\r\n  function removeConsumer(uint64 subId, address consumer) external;\r\n\r\n  /**\r\n   * @notice Cancel a subscription\r\n   * @param subId - ID of the subscription\r\n   * @param to - Where to send the remaining LINK to\r\n   */\r\n  function cancelSubscription(uint64 subId, address to) external;\r\n\r\n  /*\r\n   * @notice Check to see if there exists a request commitment consumers\r\n   * for all consumers and keyhashes for a given sub.\r\n   * @param subId - ID of the subscription\r\n   * @return true if there exists at least one unfulfilled request for the subscription, false\r\n   * otherwise.\r\n   */\r\n  function pendingRequestExists(uint64 subId) external view returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function burn(\r\n        address to\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(\r\n        uint256 amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n//-------------------------------------------------------------------------\r\n//    INTERFACES\r\n//-------------------------------------------------------------------------\r\ninterface IERC20Burnable is IERC20 {\r\n    function burn(uint256 amount) external;\r\n\r\n    function burnFrom(address account, uint256 amount) external;\r\n}\r\n//-------------------------------------------------------------------------\r\n//    ERRORS\r\n//-------------------------------------------------------------------------\r\nerror BlazeLot__RoundInactive(uint256);\r\nerror BlazeLot__InsufficientTickets();\r\nerror BlazeLot__InvalidMatchers();\r\nerror BlazeLot__InvalidMatchRound();\r\nerror BlazeLot__InvalidUpkeeper();\r\nerror BlazeLot__InvalidRoundEndConditions();\r\nerror BlazeLot__InvalidRound();\r\nerror BlazeLot__TransferFailed();\r\nerror BlazeLot__InvalidClaim();\r\nerror BlazeLot__DuplicateTicketIdClaim(uint _round, uint _ticketIndex);\r\nerror BlazeLot__InvalidClaimMatch(uint ticketIndex);\r\nerror BlazeLot__InvalidDistribution(uint totalDistribution);\r\nerror BlazeLot__InvalidToken();\r\nerror BlazeLot__InvalidETHAmount();\r\nerror BlazeLot__InvalidCurrencyClaim();\r\nerror BlazeLot__InvalidTokenPair();\r\n\r\ncontract BlazeLottery is\r\n    Ownable,\r\n    ReentrancyGuard,\r\n    AutomationCompatible,\r\n    VRFConsumerBaseV2\r\n{\r\n    //-------------------------------------------------------------------------\r\n    //    TYPE DECLARATIONS\r\n    //-------------------------------------------------------------------------\r\n    struct RoundInfo {\r\n        uint256[5] distribution; // This is the total pot distributed to each item - NOT the percentages\r\n        uint256 pot;\r\n        uint256 ticketsBought;\r\n        uint256 price;\r\n        uint256 endRound; // Timestamp OR block number when round ends\r\n        uint256 randomnessRequestID;\r\n        bool active;\r\n    }\r\n    struct UserTickets {\r\n        uint64[] tickets;\r\n        bool[] claimed;\r\n    }\r\n    struct Matches {\r\n        uint256 match1;\r\n        uint256 match2;\r\n        uint256 match3;\r\n        uint256 match4;\r\n        uint256 match5;\r\n        uint256 roundId;\r\n        uint64 winnerNumber; // We'll need to process this so it matches the same format as the tickets\r\n        bool completed;\r\n    }\r\n    struct AcceptedTokens {\r\n        uint price;\r\n        uint match3;\r\n        uint match4;\r\n        uint match5;\r\n        uint dev;\r\n        uint burn;\r\n        address v2Pair;\r\n        bool accepted;\r\n    }\r\n    //-------------------------------------------------------------------------\r\n    //    State Variables\r\n    //-------------------------------------------------------------------------\r\n    // kept for coverage purposes\r\n    // mapping(address => bool ) public upkeeper;\r\n    // mapping(uint  => Matches ) public matches;\r\n    // mapping(uint => RoundInfo) public roundInfo;\r\n    // mapping(uint => address[]) private roundUsers;\r\n    // mapping(address  => mapping(uint => UserTickets))\r\n    //     private userTickets;\r\n    // We will accept BLZE, ETH, SHIB, and USDC\r\n    mapping(address _token => AcceptedTokens _acceptedTokens)\r\n        public acceptedTokens;\r\n\r\n    mapping(address _upkeep => bool _enabled) public upkeeper;\r\n    mapping(uint _randomnessRequestID => Matches _winnerMatches) public matches;\r\n    mapping(uint _roundId => RoundInfo) public roundInfo;\r\n    mapping(uint _roundId => address[] participatingUsers) private roundUsers;\r\n    mapping(address _user => mapping(uint _round => UserTickets _all))\r\n        private userTickets;\r\n\r\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address public constant SHIB = 0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE;\r\n    IUniswapV2Pair private mainPair =\r\n        IUniswapV2Pair(0x6BfCDA57Eff355A1BfFb76c584Fea20188B12166);\r\n    address private immutable OTCWallet;\r\n\r\n    uint[5] public distributionPercentages; // This percentage allocates to the different distribution amounts per ROUND\r\n    // [match1, match2, match3, match4, match5, burn, team]\r\n    // 25% Match 5\r\n    // 25% Match 4\r\n    // 25% Match 3\r\n    // 0% Match 2 (ommited)\r\n    // 0% Match 1 (ommited)\r\n    // 20% Burns\r\n    // 5%  Team\r\n    address public constant DEAD_WALLET =\r\n        0x000000000000000000000000000000000000dEaD;\r\n    address public burnWallet;\r\n    //-------------------------------------------------------------------------\r\n    //    VRF Config Variables\r\n    //-------------------------------------------------------------------------\r\n    address public immutable vrfCoordinator;\r\n    bytes32 public immutable keyHash;\r\n    uint64 private immutable subscriptionId;\r\n    uint16 private constant minimumRequestConfirmations = 4;\r\n    uint32 private callbackGasLimit = 100000;\r\n\r\n    address public teamWallet;\r\n\r\n    IERC20Burnable public currency;\r\n    uint256 public currentRound;\r\n    uint256 public roundDuration;\r\n    uint256 public constant PERCENTAGE_BASE = 100;\r\n    uint64 public constant BIT_8_MASK = 0x00000000000000FF;\r\n    uint64 public constant BIT_6_MASK = 0x000000000000003F;\r\n    uint8 public constant BIT_1_MASK = 0x01;\r\n\r\n    //-------------------------------------------------------------------------\r\n    //    Events\r\n    //-------------------------------------------------------------------------\r\n    event AddToPot(address indexed user, uint256 indexed round, uint256 amount);\r\n    event BoughtTickets(address indexed user, uint _round, uint amount);\r\n    event EditRoundPrice(uint _round, uint _newPrice);\r\n    event RolloverPot(uint _round, uint _newPot);\r\n    event RoundEnded(uint indexed _round);\r\n    event StartRound(uint indexed _round);\r\n    event UpkeeperSet(address indexed upkeeper, bool isUpkeeper);\r\n    event RewardClaimed(address indexed _user, uint rewardAmount);\r\n    event RoundDurationSet(uint _oldDuration, uint _newDuration);\r\n    event TransferFailed(address _to, uint _amount);\r\n    event AltDistributionChanged(\r\n        address _token,\r\n        uint m3,\r\n        uint m4,\r\n        uint m5,\r\n        uint dev,\r\n        uint burn\r\n    );\r\n    event AltAcceptanceChanged(address indexed _token, bool status);\r\n    event EditAltPrice(address _token, uint _newPrice);\r\n\r\n    //-------------------------------------------------------------------------\r\n    //    Modifiers\r\n    //-------------------------------------------------------------------------\r\n    modifier onlyUpkeeper() {\r\n        if (!upkeeper[msg.sender]) revert BlazeLot__InvalidUpkeeper();\r\n        _;\r\n    }\r\n\r\n    modifier activeRound() {\r\n        RoundInfo storage playingRound = roundInfo[currentRound];\r\n        if (!playingRound.active || block.timestamp > playingRound.endRound)\r\n            revert BlazeLot__RoundInactive(currentRound);\r\n        _;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    //    Constructor\r\n    //-------------------------------------------------------------------------\r\n    constructor(\r\n        address _tokenAccepted,\r\n        address _vrfCoordinator,\r\n        bytes32 _keyHash,\r\n        uint64 _subscriptionId,\r\n        address _team,\r\n        address _burnWallet,\r\n        address _otcWallet\r\n    ) VRFConsumerBaseV2(_vrfCoordinator) {\r\n        burnWallet = _burnWallet;\r\n        // _tokenAccepted is BLZ token\r\n        currency = IERC20Burnable(_tokenAccepted);\r\n\r\n        roundDuration = 1 weeks;\r\n        vrfCoordinator = _vrfCoordinator;\r\n        keyHash = _keyHash;\r\n        subscriptionId = _subscriptionId;\r\n\r\n        distributionPercentages = [25, 25, 25, 20, 5];\r\n        teamWallet = _team;\r\n        acceptedTokens[SHIB] = AcceptedTokens({\r\n            price: 120_000 ether,\r\n            match3: 25,\r\n            match4: 25,\r\n            match5: 25,\r\n            dev: 5,\r\n            burn: 20,\r\n            v2Pair: 0x811beEd0119b4AfCE20D2583EB608C6F7AF1954f,\r\n            accepted: true\r\n        });\r\n        acceptedTokens[address(0)] = AcceptedTokens({\r\n            price: 0.0006 ether,\r\n            match3: 25,\r\n            match4: 25,\r\n            match5: 25,\r\n            dev: 5,\r\n            burn: 20,\r\n            v2Pair: address(0),\r\n            accepted: true\r\n        });\r\n        OTCWallet = _otcWallet;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    //    EXTERNAL Functions\r\n    //-------------------------------------------------------------------------\r\n    /**\r\n     * @notice Buy tickets with ALT tokens or ETH\r\n     * @param tickets Array of tickets to buy. The tickets need to have 5 numbers each spanning 8 bits in length\r\n     * @param token Address of the token to use to buy tickets\r\n     * @dev BLZE buys not accepted here\r\n     */\r\n    function buyTicketsWithAltTokens(\r\n        uint64[] calldata tickets,\r\n        address token\r\n    ) external payable nonReentrant activeRound {\r\n        AcceptedTokens storage altToken = acceptedTokens[token];\r\n        // Make sure token is approved token\r\n        if (!altToken.accepted) revert BlazeLot__InvalidToken();\r\n        uint price = altToken.price * tickets.length;\r\n        uint toBurn = (price * altToken.burn) / PERCENTAGE_BASE;\r\n        uint devAmount = (price * altToken.dev) / PERCENTAGE_BASE;\r\n        uint toPot = price - toBurn - devAmount;\r\n        // if token = address(0) then we're using ETH\r\n        if (token == address(0)) {\r\n            if (msg.value < price) revert BlazeLot__InvalidETHAmount();\r\n            // Send ETH to burn wallet\r\n            (bool succ, ) = payable(burnWallet).call{value: toBurn}(\"\");\r\n            if (!succ) emit TransferFailed(burnWallet, toBurn);\r\n            (succ, ) = payable(teamWallet).call{value: devAmount}(\"\");\r\n            if (!succ) emit TransferFailed(teamWallet, devAmount);\r\n            (uint reserve0, uint reserve1, ) = mainPair.getReserves();\r\n            uint toBuy = (toPot * reserve0) / reserve1;\r\n            // Buy BLZE from OTC wallet\r\n            currency.transferFrom(OTCWallet, address(this), toBuy);\r\n            (succ, ) = payable(OTCWallet).call{value: toPot}(\"\");\r\n            if (!succ) emit TransferFailed(OTCWallet, toPot);\r\n            uint[] memory dist = new uint[](5);\r\n            dist[0] = altToken.match3;\r\n            dist[1] = altToken.match4;\r\n            dist[2] = altToken.match5;\r\n            dist[3] = 0;\r\n            dist[4] = 0;\r\n            _addToPot(toBuy, currentRound, dist);\r\n        } else {\r\n            // Send token to burn wallet\r\n            IERC20(token).transferFrom(msg.sender, burnWallet, toBurn);\r\n            IERC20(token).transferFrom(msg.sender, teamWallet, devAmount);\r\n            IERC20(token).transferFrom(msg.sender, OTCWallet, toPot);\r\n            // Buy BLZE from OTC wallet\r\n            // get token to ETH price using v2Pair\r\n            (uint reserve0, uint reserve1, ) = IUniswapV2Pair(altToken.v2Pair)\r\n                .getReserves();\r\n            address token0 = IUniswapV2Pair(altToken.v2Pair).token0();\r\n            uint toBuy = 0;\r\n            if (token0 == WETH) toBuy = (reserve0 * toPot) / reserve1;\r\n            else toBuy = (reserve1 * toPot) / reserve0;\r\n\r\n            (reserve0, reserve1, ) = mainPair.getReserves();\r\n\r\n            toBuy = (toBuy * reserve0) / reserve1;\r\n\r\n            currency.transferFrom(OTCWallet, address(this), toBuy);\r\n            uint[] memory dist = new uint[](5);\r\n            dist[0] = altToken.match3;\r\n            dist[1] = altToken.match4;\r\n            dist[2] = altToken.match5;\r\n            dist[3] = 0;\r\n            dist[4] = 0;\r\n            _addToPot(toBuy, currentRound, dist);\r\n        }\r\n        // Buy Tickets\r\n        _buyTickets(tickets, 0, msg.sender);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param tickets Array of tickets to buy. The tickets need to have 5 numbers each spanning 8 bits in length\r\n     * @dev each number will be constrained to 6 bit numbers e.g. 0 - 63\r\n     * @dev since each number is 6 bits in length but stored on an 8 bit space, we'll be using uint64 to store the numbers\r\n     *      E.G.\r\n     *      Storing the ticket with numbers 35, 12, 0, 63, 1\r\n     *      each number in 8 bit hex becomes 0x23, 0x0C, 0x00, 0x3F, 0x01\r\n     *      number to store = 0x000000230C003F01\r\n     *      Although we will not check for this, the numbers will be be checked using bit shifting with a mask so any larger numbers will be ignored\r\n     * @dev gas cost is reduced ludicrously, however we will be relying heavily on chainlink keepers to check for winners and get the match amount data\r\n     */\r\n    function buyTickets(\r\n        uint64[] calldata tickets\r\n    ) external nonReentrant activeRound {\r\n        RoundInfo storage playingRound = roundInfo[currentRound];\r\n        uint potAmount = playingRound.price * tickets.length;\r\n        currency.transferFrom(msg.sender, address(this), potAmount);\r\n        _buyTickets(tickets, potAmount, msg.sender);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param _round round to claim tickets from\r\n     * @param _userTicketIndexes Indexes / IDs of the tickets to claim\r\n     * @param _matches matching number of the ticket/id to claim\r\n     */\r\n    function claimTickets(\r\n        uint _round,\r\n        uint[] calldata _userTicketIndexes,\r\n        uint8[] calldata _matches\r\n    ) public nonReentrant {\r\n        uint toReward = _claimTickets(_round, _userTicketIndexes, _matches);\r\n        if (toReward > 0) currency.transfer(msg.sender, toReward);\r\n        emit RewardClaimed(msg.sender, toReward);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param _rounds array of all rounds that will be claimed\r\n     * @param _ticketsPerRound number of tickets that will be claimed in this call\r\n     * @param _ticketIndexes array of ticket indexes to be claimed, the length of this array should be equal to the sum of _ticketsPerRound\r\n     * @param _matches array to matches per ticket, the length of this array should be equal to the sum of _ticketsPerRound\r\n     */\r\n    function claimMultipleRounds(\r\n        uint[] calldata _rounds,\r\n        uint[] calldata _ticketsPerRound,\r\n        uint[] calldata _ticketIndexes,\r\n        uint8[] calldata _matches\r\n    ) external nonReentrant {\r\n        if (\r\n            _rounds.length != _ticketsPerRound.length ||\r\n            _rounds.length == 0 ||\r\n            _ticketIndexes.length != _matches.length ||\r\n            _ticketIndexes.length == 0\r\n        ) revert BlazeLot__InvalidClaim();\r\n        uint ticketOffset;\r\n        uint rewards;\r\n        for (uint i = 0; i < _rounds.length; i++) {\r\n            uint round = _rounds[i];\r\n            uint endOffset = _ticketsPerRound[i] - 1;\r\n            uint[] memory tickets = _ticketIndexes[ticketOffset:ticketOffset +\r\n                endOffset];\r\n            uint8[] memory allegedMatch = _matches[ticketOffset:ticketOffset +\r\n                endOffset];\r\n\r\n            rewards += _claimTickets(round, tickets, allegedMatch);\r\n            ticketOffset += _ticketsPerRound[i];\r\n        }\r\n        if (rewards > 0) currency.transfer(msg.sender, rewards);\r\n        emit RewardClaimed(msg.sender, rewards);\r\n    }\r\n\r\n    /**\r\n     * @notice Edit the price for an upcoming round\r\n     * @param _newPrice Price for the next upcoming round\r\n     * @param _roundId ID of the upcoming round to edit\r\n     * @dev If this is not called, on round end, the price will be the same as the previous round\r\n     */\r\n    function setCurrencyPrice(\r\n        uint256 _newPrice,\r\n        uint256 _roundId\r\n    ) external onlyOwner {\r\n        require(_roundId > currentRound, \"Invalid ID\");\r\n        roundInfo[_roundId].price = _newPrice;\r\n        emit EditRoundPrice(_roundId, _newPrice);\r\n    }\r\n\r\n    function setAltPrice(uint _newPrice, address _token) external onlyOwner {\r\n        AcceptedTokens storage altToken = acceptedTokens[_token];\r\n        altToken.price = _newPrice;\r\n        emit EditAltPrice(_token, _newPrice);\r\n    }\r\n\r\n    function setAltDistribution(\r\n        uint m3,\r\n        uint m4,\r\n        uint m5,\r\n        uint dev,\r\n        uint burn,\r\n        address _token,\r\n        address tokenV2Pair\r\n    ) external onlyOwner {\r\n        AcceptedTokens storage altToken = acceptedTokens[_token];\r\n        uint totalDistribution = m3 + m4 + m5 + dev + burn;\r\n        if (totalDistribution != PERCENTAGE_BASE)\r\n            revert BlazeLot__InvalidDistribution(totalDistribution);\r\n        address token0 = IUniswapV2Pair(tokenV2Pair).token0();\r\n        address token1 = IUniswapV2Pair(tokenV2Pair).token1();\r\n        if (\r\n            (token0 != _token && token1 != _token) ||\r\n            (token0 != WETH && token1 != WETH)\r\n        ) revert BlazeLot__InvalidTokenPair();\r\n        altToken.v2Pair = tokenV2Pair;\r\n        altToken.match3 = m3;\r\n        altToken.match4 = m4;\r\n        altToken.match5 = m5;\r\n        altToken.dev = dev;\r\n        altToken.burn = burn;\r\n        emit AltDistributionChanged(_token, m3, m4, m5, dev, burn);\r\n    }\r\n\r\n    function acceptAlt(address _token, bool status) external onlyOwner {\r\n        acceptedTokens[_token].accepted = status;\r\n        emit AltAcceptanceChanged(_token, status);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param initPrice Price for the first round\r\n     * @param firstRoundEnd the Time when the first round ends\r\n     * @dev This function can only be called once by owner and sets the initial price\r\n     */\r\n    function activateLottery(\r\n        uint initPrice,\r\n        uint firstRoundEnd\r\n    ) external onlyOwner {\r\n        require(currentRound == 0, \"Lottery started\");\r\n        currentRound++;\r\n        RoundInfo storage startRound = roundInfo[1];\r\n        startRound.price = initPrice;\r\n        startRound.active = true;\r\n        startRound.endRound = firstRoundEnd;\r\n        emit StartRound(1);\r\n    }\r\n\r\n    /**\r\n     * @param _upkeeper Address of the upkeeper\r\n     * @param _status Status of the upkeeper\r\n     * @dev enable or disable an address that can call performUpkeep\r\n     */\r\n    function setUpkeeper(address _upkeeper, bool _status) external onlyOwner {\r\n        upkeeper[_upkeeper] = _status;\r\n        emit UpkeeperSet(_upkeeper, _status);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param performData Data to perform upkeep\r\n     * @dev performData is abi encoded as (bool, uint256[])\r\n     *      - bool is if it's a round end request upkeep or winner array request upkeep\r\n     *      - uint256[] is the array of winners that match the criteria\r\n     */\r\n    function performUpkeep(bytes calldata performData) external onlyUpkeeper {\r\n        //Only upkeepers can do this\r\n        if (!upkeeper[msg.sender]) revert BlazeLot__InvalidUpkeeper();\r\n\r\n        (bool isRandomRequest, uint256[] memory matchers) = abi.decode(\r\n            performData,\r\n            (bool, uint256[])\r\n        );\r\n        RoundInfo storage playingRound = roundInfo[currentRound];\r\n        if (isRandomRequest) {\r\n            endRound();\r\n        } else {\r\n            if (matchers.length != 5 || playingRound.active)\r\n                revert BlazeLot__InvalidMatchers();\r\n            Matches storage currentMatches = matches[\r\n                playingRound.randomnessRequestID\r\n            ];\r\n            if (currentMatches.winnerNumber == 0 || currentMatches.completed)\r\n                revert BlazeLot__InvalidMatchRound();\r\n            currentMatches.match1 = matchers[0];\r\n            currentMatches.match2 = matchers[1];\r\n            currentMatches.match3 = matchers[2];\r\n            currentMatches.match4 = matchers[3];\r\n            currentMatches.match5 = matchers[4];\r\n            currentMatches.completed = true;\r\n            rolloverAmount(currentRound, currentMatches);\r\n            newRound(playingRound);\r\n        }\r\n    }\r\n\r\n    function setRoundDuration(uint256 _newDuration) external onlyOwner {\r\n        emit RoundDurationSet(roundDuration, _newDuration);\r\n        roundDuration = _newDuration;\r\n    }\r\n\r\n    function claimNonPrizeTokens(address _token) external onlyOwner {\r\n        if (_token == address(currency))\r\n            revert BlazeLot__InvalidCurrencyClaim();\r\n        if (_token == address(0)) {\r\n            (bool succ, ) = payable(owner()).call{value: address(this).balance}(\r\n                \"\"\r\n            );\r\n            if (!succ) emit TransferFailed(owner(), address(this).balance);\r\n        } else {\r\n            IERC20 token = IERC20(_token);\r\n            token.transfer(owner(), token.balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    function addToPot(\r\n        uint amount,\r\n        uint round,\r\n        uint[] memory customDistribution\r\n    ) external {\r\n        currency.transferFrom(msg.sender, address(this), amount);\r\n        _addToPot(amount, round, customDistribution);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    //    PUBLIC FUNCTIONS\r\n    //-------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @notice End the current round\r\n     * @dev this function can be called by anyone as long as the conditions to end the round are met\r\n     */\r\n    function endRound() public {\r\n        RoundInfo storage playingRound = roundInfo[currentRound];\r\n        // Check that endRound of current Round is passed\r\n        if (\r\n            block.timestamp > playingRound.endRound &&\r\n            playingRound.active &&\r\n            playingRound.randomnessRequestID == 0\r\n        ) {\r\n            playingRound.active = false;\r\n            emit RoundEnded(currentRound);\r\n            if (playingRound.ticketsBought == 0) {\r\n                rolloverAmount(currentRound, matches[0]);\r\n                newRound(playingRound);\r\n            } else {\r\n                uint requestId = VRFCoordinatorV2Interface(vrfCoordinator)\r\n                    .requestRandomWords(\r\n                        keyHash,\r\n                        subscriptionId,\r\n                        minimumRequestConfirmations,\r\n                        callbackGasLimit,\r\n                        1\r\n                    );\r\n                playingRound.randomnessRequestID = requestId;\r\n                matches[requestId].roundId = currentRound;\r\n            }\r\n        } else revert BlazeLot__InvalidRoundEndConditions();\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    //    INTERNAL FUNCTIONS\r\n    //-------------------------------------------------------------------------\r\n    /**\r\n     * @notice Add Blaze to the POT of the selected round\r\n     * @param amount Amount of Blaze to add to the pot\r\n     * @param round Round to add the Blaze to\r\n     * @param customDistribution Distribution of the funds into the pot\r\n        // 25% Match 3   0\r\n        // 25% Match 4   1\r\n        // 25% Match 5   2\r\n        // 20% Burns     3\r\n        // 5%  Team      4\r\n     */\r\n    function _addToPot(\r\n        uint amount,\r\n        uint round,\r\n        uint[] memory customDistribution\r\n    ) internal {\r\n        if (round < currentRound || round == 0) revert BlazeLot__InvalidRound();\r\n        uint distributionLength = customDistribution.length;\r\n        uint totalPercentage = PERCENTAGE_BASE;\r\n        if (distributionLength == 0 || distributionLength != 5) {\r\n            customDistribution = new uint[](5);\r\n            customDistribution[0] = distributionPercentages[0];\r\n            customDistribution[1] = distributionPercentages[1];\r\n            customDistribution[2] = distributionPercentages[2];\r\n            customDistribution[3] = distributionPercentages[3];\r\n            customDistribution[4] = distributionPercentages[4];\r\n        } else {\r\n            for (uint i = 0; i < 5; i++) {\r\n                totalPercentage += customDistribution[i];\r\n            }\r\n            totalPercentage -= PERCENTAGE_BASE;\r\n        }\r\n        RoundInfo storage playingRound = roundInfo[round];\r\n        for (uint i = 0; i < 5; i++) {\r\n            playingRound.distribution[i] +=\r\n                (customDistribution[i] * amount) /\r\n                totalPercentage;\r\n        }\r\n\r\n        playingRound.pot += amount;\r\n\r\n        emit AddToPot(msg.sender, amount, round);\r\n    }\r\n\r\n    function fulfillRandomWords(\r\n        uint requestId,\r\n        uint256[] memory randomWords\r\n    ) internal override {\r\n        uint64 winnerNumber = uint64(randomWords[0]);\r\n        uint64 addedMask = 0;\r\n        for (uint8 i = 0; i < 5; i++) {\r\n            uint64 currentNumber = (winnerNumber >> (8 * i)) & BIT_6_MASK;\r\n            if (i == 0) {\r\n                addedMask += currentNumber;\r\n                continue;\r\n            }\r\n            for (uint8 j = 1; j < i + 1; j++) {\r\n                if (\r\n                    currentNumber == ((addedMask >> (8 * (j - 1))) & BIT_6_MASK)\r\n                ) {\r\n                    currentNumber++;\r\n                    j = 0;\r\n                    continue;\r\n                }\r\n            }\r\n            // pass a 6 bit mask to get the last 6 bits of each number\r\n            addedMask += (currentNumber & BIT_6_MASK) << (8 * i);\r\n        }\r\n        if (addedMask == 0) addedMask = uint64(1);\r\n        matches[requestId].winnerNumber = addedMask;\r\n    }\r\n\r\n    function _claimTickets(\r\n        uint _round,\r\n        uint[] memory _userTicketIndexes,\r\n        uint8[] memory _matches\r\n    ) internal returns (uint) {\r\n        if (_round >= currentRound) revert BlazeLot__InvalidRound();\r\n        if (\r\n            _userTicketIndexes.length != _matches.length ||\r\n            _userTicketIndexes.length == 0\r\n        ) revert BlazeLot__InvalidClaim();\r\n        RoundInfo storage round = roundInfo[_round];\r\n\r\n        UserTickets storage user = userTickets[msg.sender][_round];\r\n        if (user.tickets.length < _userTicketIndexes.length)\r\n            revert BlazeLot__InvalidClaim();\r\n\r\n        Matches storage roundMatches = matches[round.randomnessRequestID];\r\n        uint toReward;\r\n\r\n        // Cycle through all tickets to claim\r\n        for (uint i = 0; i < _userTicketIndexes.length; i++) {\r\n            uint ticketIndex = _userTicketIndexes[i];\r\n            // index is checked and if out of bounds, will revert\r\n            if (_matches[i] < 3 || _matches[i] > 5)\r\n                revert BlazeLot__InvalidClaimMatch(i);\r\n\r\n            if (user.claimed[ticketIndex])\r\n                revert BlazeLot__DuplicateTicketIdClaim(_round, ticketIndex);\r\n\r\n            uint64 ticket = user.tickets[ticketIndex];\r\n\r\n            if (\r\n                _compareTickets(roundMatches.winnerNumber, ticket) ==\r\n                _matches[i]\r\n            ) {\r\n                uint totalMatches = getTotalMatches(roundMatches, _matches[i]);\r\n\r\n                user.claimed[ticketIndex] = true;\r\n\r\n                uint256 matchReward = round.distribution[_matches[i] - 3] /\r\n                    totalMatches;\r\n                toReward += matchReward;\r\n            } else {\r\n                revert BlazeLot__InvalidClaimMatch(i);\r\n            }\r\n        }\r\n        return toReward;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    //    PRIVATE FUNCTIONS\r\n    //-------------------------------------------------------------------------\r\n\r\n    function _buyTickets(\r\n        uint64[] calldata tickets,\r\n        uint256 potAmount,\r\n        address _user\r\n    ) private {\r\n        RoundInfo storage playingRound = roundInfo[currentRound];\r\n        if (!playingRound.active || block.timestamp > playingRound.endRound)\r\n            revert BlazeLot__RoundInactive(currentRound);\r\n        // Check ticket array\r\n        uint256 ticketAmount = tickets.length;\r\n        if (ticketAmount == 0) {\r\n            revert BlazeLot__InsufficientTickets();\r\n        }\r\n\r\n        uint[] memory dist = new uint[](1);\r\n        if (potAmount > 0) _addToPot(potAmount, currentRound, dist);\r\n\r\n        playingRound.ticketsBought += ticketAmount;\r\n        // Save Ticket to current Round\r\n        UserTickets storage user = userTickets[_user][currentRound];\r\n        // Add user to the list of users to check for winners\r\n        if (user.tickets.length == 0) roundUsers[currentRound].push(_user);\r\n\r\n        for (uint i = 0; i < ticketAmount; i++) {\r\n            user.tickets.push(tickets[i]);\r\n            user.claimed.push(false);\r\n        }\r\n        emit BoughtTickets(_user, currentRound, ticketAmount);\r\n    }\r\n\r\n    function rolloverAmount(uint round, Matches storage matchInfo) private {\r\n        RoundInfo storage playingRound = roundInfo[round];\r\n        RoundInfo storage nextRound = roundInfo[round + 1];\r\n\r\n        uint nextPot = 0;\r\n        if (playingRound.pot == 0) return;\r\n        // Check amount of winners of each match type and their distribution percentages\r\n        // if (matchInfo.match1 == 0 && playingRound.distribution[0] > 0)\r\n        //     nextPot += (currentPot * playingRound.distribution[0]) / 100;\r\n        // if (matchInfo.match2 == 0 && playingRound.distribution[1] > 0)\r\n        //     nextPot += (currentPot * playingRound.distribution[1]) / 100;\r\n        if (matchInfo.match3 == 0) {\r\n            nextPot += playingRound.distribution[0];\r\n            nextRound.distribution[0] = playingRound.distribution[0];\r\n        }\r\n        if (matchInfo.match4 == 0) {\r\n            nextPot += playingRound.distribution[1];\r\n            nextRound.distribution[1] = playingRound.distribution[1];\r\n        }\r\n        if (matchInfo.match5 == 0) {\r\n            nextPot += playingRound.distribution[2];\r\n            nextRound.distribution[2] = playingRound.distribution[2];\r\n        }\r\n        // BURN the Currency Amount\r\n        uint burnAmount = playingRound.distribution[3];\r\n        // Send the appropriate percent to the team wallet\r\n        uint teamPot = playingRound.distribution[4];\r\n        if (burnAmount > 0) currency.transfer(burnWallet, burnAmount);\r\n        if (teamPot > 0) {\r\n            bool succ = currency.transfer(teamWallet, teamPot);\r\n            if (!succ) revert BlazeLot__TransferFailed();\r\n        }\r\n        nextRound.pot += nextPot;\r\n        emit RolloverPot(round, nextPot);\r\n    }\r\n\r\n    function newRound(RoundInfo storage playingRound) private {\r\n        currentRound++;\r\n        roundInfo[currentRound].active = true;\r\n        roundInfo[currentRound].endRound =\r\n            playingRound.endRound +\r\n            roundDuration;\r\n        if (roundInfo[currentRound].price == 0)\r\n            roundInfo[currentRound].price = playingRound.price;\r\n    }\r\n\r\n    function getTotalMatches(\r\n        Matches storage winners,\r\n        uint8 matched\r\n    ) private view returns (uint) {\r\n        if (matched == 1) return winners.match1;\r\n        if (matched == 2) return winners.match2;\r\n        if (matched == 3) return winners.match3;\r\n        if (matched == 4) return winners.match4;\r\n        if (matched == 5) return winners.match5;\r\n        return 0;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    //    INTERNAL & PRIVATE VIEW & PURE FUNCTIONS\r\n    //-------------------------------------------------------------------------\r\n    /**\r\n     *\r\n     * @param winnerNumber Base Number to check against\r\n     * @param ticketNumber Number to check against the base number\r\n     * @return matchAmount Number of matches between the two numbers\r\n     */\r\n    function _compareTickets(\r\n        uint64 winnerNumber,\r\n        uint64 ticketNumber\r\n    ) private pure returns (uint8 matchAmount) {\r\n        uint64 winnerMask;\r\n        uint64 ticketMask;\r\n        uint8 matchesChecked = 0x00;\r\n\r\n        // cycle through all 5 numbers on winnerNumber\r\n        for (uint8 i = 0; i < 5; i++) {\r\n            winnerMask = (winnerNumber >> (8 * i)) & BIT_6_MASK;\r\n            // cycle through all 5 numbers on ticketNumber\r\n            for (uint8 j = 0; j < 5; j++) {\r\n                // check if this ticket Mask has already been matched\r\n                uint8 maskCheck = BIT_1_MASK << j;\r\n                if (matchesChecked & maskCheck == maskCheck) {\r\n                    continue;\r\n                }\r\n                ticketMask = (ticketNumber >> (8 * j)) & BIT_8_MASK;\r\n                // If number is larger than 6 bits, ignore\r\n                if (ticketMask > BIT_6_MASK) {\r\n                    matchesChecked = matchesChecked | maskCheck;\r\n                    continue;\r\n                }\r\n\r\n                if (winnerMask == ticketMask) {\r\n                    matchAmount++;\r\n                    matchesChecked = matchesChecked | maskCheck;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    //    EXTERNAL AND PUBLIC VIEW & PURE FUNCTIONS\r\n    //-------------------------------------------------------------------------\r\n    /**\r\n     * @notice Check if upkeep is needed\r\n     * @param checkData Data to check for upkeep\r\n     * @return upkeepNeeded Whether upkeep is needed\r\n     * @return performData Data to perform upkeep\r\n     *          - We use two types of upkeeps here. 1 Time , 2 Custom logic\r\n     *          - 1. Time based upkeep is used to end the round and request for randomness\r\n     *          - 2. Custom logic is used to check for winners\r\n     *          - performData has 2 values, endRoundRequest (bool) and matching numbers (uint[])\r\n     *           if endRoundRequest is true, then we will end the round and request for randomness\r\n     *          if matching numbers is not empty, then we will check for winners\r\n     *          after winners are selected we increase the round number and activate it\r\n     */\r\n    function checkUpkeep(\r\n        bytes calldata checkData\r\n    ) external view returns (bool upkeepNeeded, bytes memory performData) {\r\n        checkData; // Dummy to remove unused var warning\r\n        // Is this a endRound request or a checkWinner request?\r\n        RoundInfo storage playingRound = roundInfo[currentRound];\r\n        uint[] memory matchingNumbers = new uint[](5);\r\n        performData = bytes(\"\");\r\n        if (playingRound.active) {\r\n            upkeepNeeded = playingRound.endRound < block.timestamp;\r\n            performData = abi.encode(true, matchingNumbers);\r\n        } else if (\r\n            playingRound.randomnessRequestID > 0 &&\r\n            !matches[playingRound.randomnessRequestID].completed &&\r\n            matches[playingRound.randomnessRequestID].winnerNumber > 0\r\n        ) {\r\n            upkeepNeeded = true;\r\n            address[] storage participants = roundUsers[currentRound];\r\n            uint participantsLength = participants.length;\r\n            uint64 winnerNumber = matches[playingRound.randomnessRequestID]\r\n                .winnerNumber;\r\n            for (uint i = 0; i < participantsLength; i++) {\r\n                UserTickets storage user = userTickets[participants[i]][\r\n                    currentRound\r\n                ];\r\n                uint ticketsLength = user.tickets.length;\r\n                for (uint j = 0; j < ticketsLength; j++) {\r\n                    uint8 matchAmount = _compareTickets(\r\n                        winnerNumber,\r\n                        user.tickets[j]\r\n                    );\r\n                    if (matchAmount > 0) {\r\n                        matchingNumbers[matchAmount - 1]++;\r\n                    }\r\n                }\r\n            }\r\n            performData = abi.encode(false, matchingNumbers);\r\n        } else upkeepNeeded = false;\r\n    }\r\n\r\n    function checkTicket(\r\n        uint round,\r\n        uint _userTicketIndex,\r\n        address _user\r\n    ) external view returns (uint) {\r\n        uint pot = roundInfo[round].pot;\r\n        uint64 winnerNumber = matches[roundInfo[round].randomnessRequestID]\r\n            .winnerNumber;\r\n        if (pot == 0 || winnerNumber == 0) return 0;\r\n        // Check if user has claimed this ticket\r\n        if (userTickets[_user][round].claimed[_userTicketIndex]) return 0;\r\n\r\n        uint8 _matched_ = _compareTickets(\r\n            matches[roundInfo[round].randomnessRequestID].winnerNumber,\r\n            userTickets[_user][round].tickets[_userTicketIndex]\r\n        );\r\n        if (_matched_ < 3) return 0;\r\n        uint totalMatches = getTotalMatches(\r\n            matches[roundInfo[round].randomnessRequestID],\r\n            _matched_\r\n        );\r\n        if (totalMatches == 0) return 0;\r\n        return roundInfo[round].distribution[_matched_ - 3] / totalMatches;\r\n    }\r\n\r\n    function checkTickets(\r\n        uint round,\r\n        uint[] calldata _userTicketIndexes,\r\n        address _user\r\n    ) external view returns (uint) {\r\n        uint pot = roundInfo[round].pot;\r\n        uint64 winnerNumber = matches[roundInfo[round].randomnessRequestID]\r\n            .winnerNumber;\r\n        if (pot == 0 || winnerNumber == 0) return 0;\r\n\r\n        uint totalReward;\r\n        uint rndId = roundInfo[round].randomnessRequestID;\r\n\r\n        for (uint i = 0; i < _userTicketIndexes.length; i++) {\r\n            uint ticketIndex = _userTicketIndexes[i];\r\n            // Check if user has claimed this ticket\r\n            if (userTickets[_user][round].claimed[ticketIndex]) continue;\r\n\r\n            uint8 _matched_ = _compareTickets(\r\n                matches[rndId].winnerNumber,\r\n                userTickets[_user][round].tickets[ticketIndex]\r\n            );\r\n            if (_matched_ < 3) continue;\r\n            uint totalMatches = getTotalMatches(matches[rndId], _matched_);\r\n            if (totalMatches == 0) continue;\r\n            totalReward +=\r\n                roundInfo[round].distribution[_matched_ - 3] /\r\n                totalMatches;\r\n        }\r\n        return totalReward;\r\n    }\r\n\r\n    function getUserTickets(\r\n        address _user,\r\n        uint round\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint64[] memory _userTickets,\r\n            bool[] memory claimed,\r\n            uint tickets\r\n        )\r\n    {\r\n        UserTickets storage user = userTickets[_user][round];\r\n        tickets = user.tickets.length;\r\n        _userTickets = new uint64[](tickets);\r\n        claimed = new bool[](tickets);\r\n        for (uint i = 0; i < tickets; i++) {\r\n            _userTickets[i] = user.tickets[i];\r\n            claimed[i] = user.claimed[i];\r\n        }\r\n    }\r\n\r\n    function checkTicketMatching(\r\n        uint64 ticket1,\r\n        uint64 ticket2\r\n    ) external pure returns (uint8) {\r\n        return _compareTickets(ticket1, ticket2);\r\n    }\r\n\r\n    function roundDistribution(\r\n        uint round\r\n    ) external view returns (uint[] memory) {\r\n        uint[] memory distribution = new uint[](5);\r\n        for (uint i = 0; i < 5; i++) {\r\n            distribution[i] = roundInfo[round].distribution[i];\r\n        }\r\n        return distribution;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAccepted\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_team\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_otcWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ticketIndex\",\"type\":\"uint256\"}],\"name\":\"BlazeLot__DuplicateTicketIdClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlazeLot__InsufficientTickets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlazeLot__InvalidClaim\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketIndex\",\"type\":\"uint256\"}],\"name\":\"BlazeLot__InvalidClaimMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlazeLot__InvalidCurrencyClaim\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDistribution\",\"type\":\"uint256\"}],\"name\":\"BlazeLot__InvalidDistribution\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlazeLot__InvalidETHAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlazeLot__InvalidMatchRound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlazeLot__InvalidMatchers\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlazeLot__InvalidRound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlazeLot__InvalidRoundEndConditions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlazeLot__InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlazeLot__InvalidTokenPair\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlazeLot__InvalidUpkeeper\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BlazeLot__RoundInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlazeLot__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddToPot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AltAcceptanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"m3\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"m4\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"m5\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"}],\"name\":\"AltDistributionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BoughtTickets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"EditAltPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"EditRoundPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newPot\",\"type\":\"uint256\"}],\"name\":\"RolloverPot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newDuration\",\"type\":\"uint256\"}],\"name\":\"RoundDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"RoundEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"StartRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upkeeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isUpkeeper\",\"type\":\"bool\"}],\"name\":\"UpkeeperSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BIT_1_MASK\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BIT_6_MASK\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BIT_8_MASK\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEAD_WALLET\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHIB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"acceptAlt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"acceptedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"match3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"match4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"match5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"v2Pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstRoundEnd\",\"type\":\"uint256\"}],\"name\":\"activateLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"customDistribution\",\"type\":\"uint256[]\"}],\"name\":\"addToPot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"tickets\",\"type\":\"uint64[]\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"tickets\",\"type\":\"uint64[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"buyTicketsWithAltTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userTicketIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkTicket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"ticket1\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"ticket2\",\"type\":\"uint64\"}],\"name\":\"checkTicketMatching\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_userTicketIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rounds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ticketsPerRound\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ticketIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_matches\",\"type\":\"uint8[]\"}],\"name\":\"claimMultipleRounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimNonPrizeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_userTicketIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_matches\",\"type\":\"uint8[]\"}],\"name\":\"claimTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"contract IERC20Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributionPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getUserTickets\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_userTickets\",\"type\":\"uint64[]\"},{\"internalType\":\"bool[]\",\"name\":\"claimed\",\"type\":\"bool[]\"},{\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomnessRequestID\",\"type\":\"uint256\"}],\"name\":\"matches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"match1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"match2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"match3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"match4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"match5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"winnerNumber\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"roundDistribution\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"roundInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketsBought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomnessRequestID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"m3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"m4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"m5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenV2Pair\",\"type\":\"address\"}],\"name\":\"setAltDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setAltPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"setCurrencyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDuration\",\"type\":\"uint256\"}],\"name\":\"setRoundDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upkeeper\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setUpkeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upkeep\",\"type\":\"address\"}],\"name\":\"upkeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfCoordinator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BlazeLottery", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001831186e1cbd4fa7f4f23d8453a68969067e34e1000000000000000000000000271682deb8c4e0901d1a1550ad2e64d568e699098af398995b04c28e9951adb9721ef74c74f93e6a478f39e7e0777be13527e7ef000000000000000000000000000000000000000000000000000000000000031900000000000000000000000028b170c9b73603e09bf51b485252218a68e279d20000000000000000000000008abea08e540824c92884213c8ff9c1fe873e243300000000000000000000000028b170c9b73603e09bf51b485252218a68e279d2", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dcdd9dd168f82accee8d6f14d701d63ef9ec0d7c8c3dfbdff2753f65197b0399"}