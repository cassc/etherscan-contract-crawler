{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"egmc.sol\": {\r\n      \"content\": \"// Docs - https://docs.egmc.info\\n// Twitter - https://twitter.com/EGMC_eth\\n// Telegram - https://t.me/EGMC_eth\\n// Website - https://egmc.info\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address who) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function approve(address spender, uint256 value) external returns (bool);\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface InterfaceLP {\\n    function sync() external;\\n    function mint(address to) external returns (uint liquidity);\\n}\\n\\nabstract contract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    constructor(\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        uint8 _tokenDecimals\\n    ) {\\n        _name = _tokenName;\\n        _symbol = _tokenSymbol;\\n        _decimals = _tokenDecimals;\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\\ninterface IDEXRouter {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\\n}\\n\\ninterface IDEXFactory {\\n    function createPair(address tokenA, address tokenB)\\n    external\\n    returns (address pair);\\n}\\n\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipRenounced(address indexed previousOwner);\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor() {\\n        _owner = msg.sender;\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == _owner, \\\"Not owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipRenounced(_owner);\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n}\\n\\ncontract EGMC is ERC20Detailed, Ownable {\\n\\n    uint256 public rebaseFrequency = 4 hours;\\n    uint256 public nextRebase;\\n    uint256 public finalRebase;\\n    bool public autoRebase = true;\\n    bool public rebaseStarted = false;\\n    uint256 public rebasesThisCycle;\\n    uint256 public lastRebaseThisCycle;\\n\\n    uint256 public maxTxnAmount;\\n    uint256 public maxWallet;\\n\\n    address public taxWallet;\\n    uint256 public taxPercentBuy;\\n    uint256 public taxPercentSell;\\n\\n    string public _1_x;\\n    string public _2_telegram;\\n    string public _3_website;\\n\\n    mapping (address => bool) public isWhitelisted;\\n\\n    uint8 private constant DECIMALS = 9;\\n    uint256 private constant INITIAL_TOKENS_SUPPLY = 18_236_939_125_700_000 * 10**DECIMALS;\\n    uint256 private constant TOTAL_PARTS = type(uint256).max - (type(uint256).max % INITIAL_TOKENS_SUPPLY);\\n\\n    event Rebase(uint256 indexed time, uint256 totalSupply);\\n    event RemovedLimits();\\n\\n    IWETH public immutable weth;\\n\\n    IDEXRouter public immutable router;\\n    address public immutable pair;\\n    \\n    bool public limitsInEffect = true;\\n    bool public tradingIsLive = false;\\n    \\n    uint256 private _totalSupply;\\n    uint256 private _partsPerToken;\\n    uint256 private partsSwapThreshold = (TOTAL_PARTS / 100000 * 25);\\n\\n    mapping(address => uint256) private _partBalances;\\n    mapping(address => mapping(address => uint256)) private _allowedTokens;\\n    \\n    mapping(address => bool) private _bots;\\n\\n    modifier validRecipient(address to) {\\n        require(to != address(0x0));\\n        _;\\n    }\\n\\n    bool inSwap;\\n\\n    modifier swapping() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    constructor() ERC20Detailed(block.chainid==1 ? \\\"Ethereum Gold Mining Company\\\" : \\\"EGMC\\\", block.chainid==1 ? \\\"Ethereum\\\" : \\\"EGMC\\\", DECIMALS) {\\n        address dexAddress;\\n        if(block.chainid == 1){\\n            dexAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n        } else if(block.chainid == 5){\\n            dexAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n        } else if (block.chainid == 97){\\n            dexAddress = 0xD99D1c33F9fC3444f8101754aBC46c52416550D1;\\n        } else if (block.chainid == 56){\\n            dexAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\\n        } else {\\n            revert(\\\"Chain not configured\\\");\\n        }\\n\\n       _1_x = \\\"x.com/emoticoin_io\\\"; // @dev update\\n        _2_telegram = \\\"t.me/emoticoin_io\\\";\\n        _3_website = \\\"Emoticoin.io\\\";\\n\\n        taxWallet = msg.sender; // update\\n        taxPercentBuy = 20;\\n        taxPercentSell = 80;\\n\\n        finalRebase = type(uint256).max;\\n        nextRebase = type(uint256).max;\\n\\n        router = IDEXRouter(dexAddress);\\n\\n        _totalSupply = INITIAL_TOKENS_SUPPLY;\\n        _partBalances[msg.sender] = TOTAL_PARTS;\\n        _partsPerToken = TOTAL_PARTS/(_totalSupply);\\n\\n        isWhitelisted[address(this)] = true;\\n        isWhitelisted[address(router)] = true;\\n        isWhitelisted[msg.sender] = true;\\n\\n        maxTxnAmount = _totalSupply * 2 / 100;\\n        maxWallet = _totalSupply * 2 / 100;\\n\\n        weth = IWETH(router.WETH());\\n        pair = IDEXFactory(router.factory()).createPair(address(this), router.WETH());\\n\\n        _allowedTokens[address(this)][address(router)] = type(uint256).max;\\n        _allowedTokens[address(this)][address(this)] = type(uint256).max;\\n        _allowedTokens[address(msg.sender)][address(router)] = type(uint256).max;\\n\\n        emit Transfer(address(0x0), address(msg.sender), balanceOf(address(this)));\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function allowance(address owner_, address spender) external view override returns (uint256){\\n        return _allowedTokens[owner_][spender];\\n    }\\n\\n    function balanceOf(address who) public view override returns (uint256) {\\n        return _partBalances[who]/(_partsPerToken);\\n    }\\n\\n    function shouldRebase() public view returns (bool) {\\n        return nextRebase <= block.timestamp || (autoRebase && rebaseStarted && rebasesThisCycle < 10 && lastRebaseThisCycle + 60 <= block.timestamp);\\n    }\\n\\n    function lpSync() internal {\\n        InterfaceLP _pair = InterfaceLP(pair);\\n        _pair.sync();\\n    }\\n\\n    function transfer(address to, uint256 value) external override validRecipient(to) returns (bool){\\n        _transferFrom(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function removeLimits() external onlyOwner {\\n        require(limitsInEffect, \\\"Limits already removed\\\");\\n        limitsInEffect = false;\\n        emit RemovedLimits();\\n    }\\n\\n    function whitelistWallet(address _address, bool _isWhitelisted) external onlyOwner {\\n        isWhitelisted[_address] = _isWhitelisted;\\n    }\\n\\n    function updateTaxWallet(address _address) external onlyOwner {\\n        require(_address != address(0), \\\"Zero Address\\\");\\n        taxWallet = _address;\\n    }\\n\\n    function updateTaxPercent(uint256 _taxPercentBuy, uint256 _taxPercentSell) external onlyOwner {\\n        require(_taxPercentBuy <= taxPercentBuy || _taxPercentBuy <= 10, \\\"Tax too high\\\");\\n        require(_taxPercentSell <= taxPercentSell  || _taxPercentSell <= 10, \\\"Tax too high\\\");\\n        taxPercentBuy = _taxPercentBuy;\\n        taxPercentSell = _taxPercentSell;\\n    }\\n\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\n        address pairAddress = pair;\\n        uint256 partAmount = amount*(_partsPerToken);\\n\\n        require(!_bots[sender] && !_bots[recipient] && !_bots[msg.sender], \\\"Blacklisted\\\");\\n\\n        if(autoRebase && !inSwap && !isWhitelisted[sender] && !isWhitelisted[recipient]){\\n            require(tradingIsLive, \\\"Trading not live\\\");\\n            if(limitsInEffect){\\n                if (sender == pairAddress || recipient == pairAddress){\\n                    require(amount <= maxTxnAmount, \\\"Max Tx Exceeded\\\");\\n                }\\n                if (recipient != pairAddress){\\n                    require(balanceOf(recipient) + amount <= maxWallet, \\\"Max Wallet Exceeded\\\");\\n                }\\n            }\\n\\n            if(recipient == pairAddress){\\n                if(balanceOf(address(this)) >= partsSwapThreshold/(_partsPerToken)){\\n                    try this.swapBack(){} catch {}\\n                }\\n                if(shouldRebase()){\\n                    rebase();\\n                }\\n            }\\n\\n            uint256 taxPartAmount;\\n\\n            if(sender == pairAddress){\\n                taxPartAmount = partAmount * taxPercentBuy / 100;\\n            }\\n            else if (recipient == pairAddress) {\\n                taxPartAmount = partAmount * taxPercentSell / 100;\\n            }\\n\\n            if(taxPartAmount > 0){\\n                _partBalances[sender] -= taxPartAmount;\\n                _partBalances[address(this)] += taxPartAmount;\\n                emit Transfer(sender, address(this), taxPartAmount / _partsPerToken);\\n                partAmount -= taxPartAmount;\\n            }\\n            \\n        }\\n\\n        _partBalances[sender] = _partBalances[sender]-(partAmount);\\n        _partBalances[recipient] = _partBalances[recipient]+(partAmount);\\n\\n        emit Transfer(sender, recipient, partAmount/(_partsPerToken));\\n\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to,  uint256 value) external override validRecipient(to) returns (bool) {\\n        if (_allowedTokens[from][msg.sender] != type(uint256).max) {\\n            require(_allowedTokens[from][msg.sender] >= value,\\\"Insufficient Allowance\\\");\\n            _allowedTokens[from][msg.sender] = _allowedTokens[from][msg.sender]-(value);\\n        }\\n        _transferFrom(from, to, value);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool){\\n        uint256 oldValue = _allowedTokens[msg.sender][spender];\\n        if (subtractedValue >= oldValue) {\\n            _allowedTokens[msg.sender][spender] = 0;\\n        } else {\\n            _allowedTokens[msg.sender][spender] = oldValue-(\\n                subtractedValue\\n            );\\n        }\\n        emit Approval(\\n            msg.sender,\\n            spender,\\n            _allowedTokens[msg.sender][spender]\\n        );\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool){\\n        _allowedTokens[msg.sender][spender] = _allowedTokens[msg.sender][\\n        spender\\n        ]+(addedValue);\\n        emit Approval(\\n            msg.sender,\\n            spender,\\n            _allowedTokens[msg.sender][spender]\\n        );\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 value) public override returns (bool){\\n        _allowedTokens[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function rebase() internal returns (uint256) {\\n        uint256 time = block.timestamp;\\n\\n        uint256 supplyDelta = _totalSupply * 2 / 100;\\n        if(nextRebase < block.timestamp){\\n            rebasesThisCycle = 1;\\n            nextRebase += rebaseFrequency;\\n        } else {\\n            rebasesThisCycle += 1;\\n            lastRebaseThisCycle = block.timestamp;\\n        }\\n\\n        if (supplyDelta == 0) {\\n            emit Rebase(time, _totalSupply);\\n            return _totalSupply;\\n        }\\n\\n        _totalSupply = _totalSupply-supplyDelta;\\n\\n        if (nextRebase >= finalRebase) {\\n            nextRebase = type(uint256).max;\\n            autoRebase = false;\\n            _totalSupply = 777_777_777 * (10 ** decimals());\\n\\n            if(limitsInEffect){\\n                limitsInEffect = false;\\n                emit RemovedLimits();\\n            }\\n\\n            if(balanceOf(address(this)) > 0){\\n                try this.swapBack(){} catch {}\\n            }\\n\\n            taxPercentBuy = 0;\\n            taxPercentSell = 0;\\n        }\\n\\n        _partsPerToken = TOTAL_PARTS/(_totalSupply);\\n\\n        lpSync();\\n\\n        emit Rebase(time, _totalSupply);\\n        return _totalSupply;\\n    }\\n\\n    function manualRebase() external {\\n        require(shouldRebase(), \\\"Not in time\\\");\\n        rebase();\\n    }\\n\\n    function enableTrading() external onlyOwner {\\n        require(!tradingIsLive, \\\"Trading Live Already\\\");\\n        _bots[0x58dF81bAbDF15276E761808E872a3838CbeCbcf9] = true;\\n        tradingIsLive = true;\\n    }\\n\\n    function startRebaseCycles() external onlyOwner {\\n        require(!rebaseStarted, \\\"already started\\\");\\n        nextRebase = block.timestamp + rebaseFrequency;\\n        finalRebase = block.timestamp + 14 days;\\n        rebaseStarted = true;\\n    }\\n\\n    function manageBots(address[] memory _accounts, bool _isBot) external onlyOwner {\\n        for(uint256 i = 0; i < _accounts.length; i++){\\n            _bots[_accounts[i]] = _isBot;\\n        }\\n    }\\n\\n    function swapBack() public swapping {\\n        uint256 contractBalance = balanceOf(address(this));\\n        if(contractBalance == 0){\\n            return;\\n        }\\n\\n        if(contractBalance > partsSwapThreshold/(_partsPerToken) * 20){\\n            contractBalance = partsSwapThreshold/(_partsPerToken) * 20;\\n        }\\n\\n        swapTokensForETH(contractBalance);\\n    }\\n\\n    function swapTokensForETH(uint256 tokenAmount) internal {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = address(router.WETH());\\n\\n        // make the swap\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount\\n            path,\\n            address(taxWallet),\\n            block.timestamp\\n        );\\n    }\\n\\n    function refreshBalances(address[] memory wallets) external {\\n        address wallet;\\n        for(uint256 i = 0; i < wallets.length; i++){\\n            wallet = wallets[i];\\n            emit Transfer(wallet, wallet, 0);\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"Rebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RemovedLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_1_x\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_2_telegram\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_3_website\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebaseThisCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_isBot\",\"type\":\"bool\"}],\"name\":\"manageBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebasesThisCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"}],\"name\":\"refreshBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startRebaseCycles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPercentBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPercentSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingIsLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxPercentBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taxPercentSell\",\"type\":\"uint256\"}],\"name\":\"updateTaxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"name\":\"whitelistWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EGMC", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}