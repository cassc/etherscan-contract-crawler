{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/contracts-BatchDepositWithELRVault/ELRewardVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IELRewardVault.sol\\\";\\n\\ncontract ELRewardVault is IELRewardVault, Ownable, ReentrancyGuard {\\n    /// @dev Commission fee receiver address\\n    address public commissionReceiver;\\n\\n    /// @dev Operator address\\n    address public operatorPartOne;\\n\\n    /// @dev Operator address\\n    address public operatorPartTwo;\\n\\n    /// @dev Calculate commission fee rate\\n    uint256 public constant basePct = 10000;\\n    uint256 public commissionPct;\\n\\n    /// @dev Maximum users` info that can be processed in a single distributeReward\u3001submitELRewardInfo\u3001updateELRewardInfo transaction\\n    uint256 public maxLimit;\\n\\n    /// @dev Users` withdraw request id\\n    uint256 public nextRequestId;\\n    \\n    /// @dev ID of the next pending order info\\n    uint256 public nextDistributeId;\\n\\n    /// @dev Operators` signature status\\n    mapping(address => bool) public signStatus;\\n\\n    /// @dev Users` ELReward info\\n    mapping(uint256 => userInfo) public ELRewardInfo;\\n\\n    constructor(\\n        address _commissionReceiver, \\n        address _operatorPartOne, \\n        address _operatorPartTwo, \\n        uint256 _commissionPct, \\n        uint256 _maxLimit\\n        ) payable {\\n        if(address(_operatorPartOne) == address(_operatorPartTwo)) revert RepeatSetup();\\n        commissionReceiver = _commissionReceiver;\\n        operatorPartOne = _operatorPartOne;\\n        operatorPartTwo = _operatorPartTwo;\\n        commissionPct = _commissionPct;\\n        maxLimit = _maxLimit;\\n    }\\n\\n    modifier onlyOperator() {\\n        if(msg.sender != operatorPartOne && msg.sender != operatorPartTwo) revert NotOperator();\\n        _;\\n    }\\n\\n    /// @dev Update commission percentage\\n    /// @param _newCommissionPct New commission percentage\\n    function updateCommissionPct(uint256 _newCommissionPct) external onlyOwner {\\n        if(_newCommissionPct == commissionPct ) revert RepeatSetup();\\n        if(_newCommissionPct > basePct) revert InvalidFeePoint();\\n        initSignStatus();\\n        commissionPct = _newCommissionPct;\\n        emit UpdateCommissionPct(_newCommissionPct);\\n    }\\n\\n    /// @dev Update commission receiver address\\n    /// @param _newCommissionReceiver New commission receiver address\\n    function updateCommissionReceiver(address _newCommissionReceiver) external onlyOwner {\\n        if(address(_newCommissionReceiver) == address(0)) revert ZeroValueSet();\\n        if(_newCommissionReceiver == commissionReceiver) revert RepeatSetup();\\n        initSignStatus();\\n        commissionReceiver = _newCommissionReceiver;\\n        emit UpdateCommissionReceiver(_newCommissionReceiver);\\n    }\\n\\n    /// @dev Update operatorPartOne\\n    /// @param _newOperatorPartOne New operatorPartOne address\\n    function updateOperatorPartOne(address _newOperatorPartOne) external onlyOwner {\\n        if(address(_newOperatorPartOne) == address(0)) revert ZeroValueSet();\\n        if(_newOperatorPartOne == operatorPartOne) revert RepeatSetup();\\n        if(_newOperatorPartOne == operatorPartTwo) revert InvalidRoleSet();\\n        initSignStatus();\\n        operatorPartOne = _newOperatorPartOne;\\n        emit UpdateOperatorPartOne(_newOperatorPartOne);\\n    }\\n\\n    /// @dev Update operatorPartTwo\\n    /// @param _newOperatorPartTwo New operatorPartTwo address\\n    function updateOperatorPartTwo(address _newOperatorPartTwo) external onlyOwner {\\n        if(address(_newOperatorPartTwo) == address(0)) revert ZeroValueSet();\\n        if(_newOperatorPartTwo == operatorPartTwo) revert RepeatSetup();\\n        if(_newOperatorPartTwo == operatorPartOne) revert InvalidRoleSet();\\n        initSignStatus();\\n        operatorPartTwo = _newOperatorPartTwo;\\n        emit UpdateOperatorPartTwo(_newOperatorPartTwo);\\n    }\\n\\n    /// @dev Update maxLimit\\n    /// @param _newMaxLimit New maxLimit\\n    function updateMaxLimit(uint256 _newMaxLimit) external onlyOwner {\\n        if(_newMaxLimit == 0) revert ZeroValueSet();\\n        if(_newMaxLimit == maxLimit) revert RepeatSetup();\\n        initSignStatus();\\n        maxLimit = _newMaxLimit;\\n        emit UpdateMaxLimit(_newMaxLimit);\\n    }\\n\\n    /// @dev Submit users` ELReward info\\n    /// @param usersInfo Users` ELReward info\\n    /// @param replace bool value\\n    /// replace value is false: submit users` ELReward info\\n    /// replace value is true: correct users` historical ELReward info and set nextId to new index\\n    function submitELRewardInfo(userInfo[] calldata usersInfo, bool replace) external onlyOperator {\\n        if(usersInfo.length > maxLimit) revert OverMaxLimit();\\n        if(replace) {\\n            if(nextRequestId == 0) revert EmptyELRewardInfo();\\n            nextDistributeId = nextRequestId;\\n        }\\n        for(uint256 i = 0; i < usersInfo.length; ) {\\n            ELRewardInfo[nextRequestId] = usersInfo[i];\\n            unchecked {\\n                nextRequestId++;\\n                ++i;\\n            }\\n        }\\n        emit SubmitELRewardInfo(msg.sender, usersInfo, nextDistributeId);\\n    }\\n\\n    /// @dev distribute users` EL reward\\n    function distributeReward() external onlyOperator {  \\n        if(signStatus[msg.sender]) revert NotSignTwice();\\n        if(nextRequestId == nextDistributeId) revert EmptyELRewardInfo();\\n        address executor = msg.sender == operatorPartOne ? operatorPartTwo : operatorPartOne;\\n        if(signStatus[executor]) {\\n            uint256 currentMaxLimit = maxLimit + nextDistributeId;\\n            while(nextDistributeId < nextRequestId && nextDistributeId < currentMaxLimit) {\\n                _distributeReward(ELRewardInfo[nextDistributeId].withdrawAddress, ELRewardInfo[nextDistributeId].ELReward);\\n                nextDistributeId++;\\n            }\\n            delete signStatus[executor];\\n            emit ExecTransaction(msg.sender, nextDistributeId);\\n        } else {\\n            signStatus[msg.sender] = true;\\n            emit SignTransaction(msg.sender, signStatus[msg.sender]);\\n        }\\n    }\\n\\n    /// @dev Migrate ETH to a new EL reward vault contract when current contract is suspended\\n    /// @param newELRewardVault New ELRewardVault contract address\\n    function migrateFund(address newELRewardVault) external onlyOwner {\\n        if(address(newELRewardVault) == address(0)) revert ZeroValueSet(); \\n        uint256 currentBalance = address(this).balance;\\n        if(currentBalance == 0) revert NotFund(); \\n        Address.sendValue(payable(newELRewardVault), currentBalance);\\n        emit MigrateFund(msg.sender, newELRewardVault, currentBalance);\\n    }\\n\\n    /// @dev distribute user's EL reward\\n    function _distributeReward(address _userAddress, uint256 _ELReward) internal nonReentrant {\\n        if(_ELReward > address(this).balance) revert RewardTooLarge();\\n\\n        uint256 commissionFee = _ELReward * commissionPct / basePct;\\n        Address.sendValue(payable(_userAddress), (_ELReward - commissionFee));\\n        emit UserRewardDistributed(_userAddress, (_ELReward - commissionFee));\\n        Address.sendValue(payable(commissionReceiver), commissionFee);\\n        emit CommissionFeeTransferred(commissionReceiver, commissionFee);\\n    }\\n\\n    function initSignStatus() internal {\\n        if(signStatus[operatorPartOne]){\\n            delete signStatus[operatorPartOne]; \\n            emit InitSignStatus(operatorPartOne, signStatus[operatorPartOne]);\\n        } \\n        if(signStatus[operatorPartTwo]) { \\n            delete signStatus[operatorPartTwo]; \\n            emit InitSignStatus(operatorPartTwo, signStatus[operatorPartTwo]);\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\"\r\n    },\r\n    \"contracts/contracts-BatchDepositWithELRVault/interfaces/IELRewardVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IELRewardVault {\\n    /// @notice Thrown when over limit\\n    error OverMaxLimit();\\n\\n    /// @notice Thrown when update operatorPartOne or operatorPartTwo\\n    error InvalidRoleSet();\\n\\n    /// @notice Thrown when a function is called by an address that is not the current operator\\n    error NotOperator();\\n\\n    /// @notice Thrown when zero value is set \\n    error ZeroValueSet();\\n\\n    /// @notice Thrown when values are set repeatedly\\n    error RepeatSetup();\\n\\n    /// @notice Thrown when update fee point but new fee point over base point\\n    error InvalidFeePoint();\\n\\n    /// @notice Each user's EL reward must be less than the contract ETH balance\\n    error RewardTooLarge();\\n\\n    /// @notice Thrown when operator want sign same transaction \\n    error NotSignTwice();\\n\\n    /// @notice Thrown when migrate fund if valid fun is zero\\n    error NotFund();\\n\\n    /// @notice Thrown when update users` ELReward info but requestId is zero\\n    error EmptyELRewardInfo();\\n\\n    /// @notice Emitted when a new commissionPct is updated\\n    /// @param newCommissionPct New commissionPct\\n    event UpdateCommissionPct(uint256 newCommissionPct);\\n\\n    /// @notice Emitted when a new commission receiver address is updated\\n    /// @param newCommissionReceiver New commission receiver address\\n    event UpdateCommissionReceiver(address newCommissionReceiver);\\n\\n    /// @notice Emitted when a new operatorPartOne address is updated\\n    /// @param newOperatorPartOne New OperatorPartOne\\n    event UpdateOperatorPartOne(address newOperatorPartOne);\\n\\n    /// @notice Emitted when a new operatorPartTwo address is updated\\n    /// @param newOperatorPartTwo New OperatorPartTwo\\n    event UpdateOperatorPartTwo(address newOperatorPartTwo);\\n\\n    /// @notice Emitted when a new maxLimit threshold is updated\\n    /// @param newMaxLimit New maxLimit\\n    event UpdateMaxLimit(uint256 newMaxLimit);\\n\\n    /// @notice Emitted when submit users` ELReward info\\n    event SubmitELRewardInfo(address operatorAddress, userInfo[] usersInfo, uint256 currentNextId);\\n\\n    /// @notice Emitted when one of operator send distributeReward transaction\\n    event SignTransaction(address signerAddress, bool signStatus);\\n\\n    /// @notice Emitted when another operator confirm distributeReward transaction\\n    event ExecTransaction(address execAddress, uint256 currentNextId);\\n\\n    /// @notice Emitted when distribute users reward\\n    /// @param userAddress User's address\\n    /// @param ETHAmount User's ETH reward\\n    event UserRewardDistributed(address userAddress, uint256 ETHAmount);\\n\\n    /// @notice Emitted when users claim their reward\\n    /// @param commissionReceiver commission fee receiver address\\n    /// @param ETHAmount ETH paid by the users\\n    event CommissionFeeTransferred(address commissionReceiver, uint256 ETHAmount);\\n\\n    /// @notice Emitted when contract owner mi\\n    event MigrateFund(address senderAddress, address toAddress,uint256 migrateETHAmount);\\n\\n    /// @notice Emitted when init operator sign status\\n    event InitSignStatus(address operatorAddr, bool signStatus);\\n\\n    struct userInfo {\\n        address withdrawAddress;\\n        uint256 ELReward;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_commissionReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operatorPartOne\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operatorPartTwo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_commissionPct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptyELRewardInfo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeePoint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRoleSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFund\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSignTwice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OverMaxLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RepeatSetup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValueSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"commissionReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ETHAmount\",\"type\":\"uint256\"}],\"name\":\"CommissionFeeTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"execAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentNextId\",\"type\":\"uint256\"}],\"name\":\"ExecTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operatorAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"signStatus\",\"type\":\"bool\"}],\"name\":\"InitSignStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrateETHAmount\",\"type\":\"uint256\"}],\"name\":\"MigrateFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"signStatus\",\"type\":\"bool\"}],\"name\":\"SignTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ELReward\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IELRewardVault.userInfo[]\",\"name\":\"usersInfo\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentNextId\",\"type\":\"uint256\"}],\"name\":\"SubmitELRewardInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCommissionPct\",\"type\":\"uint256\"}],\"name\":\"UpdateCommissionPct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCommissionReceiver\",\"type\":\"address\"}],\"name\":\"UpdateCommissionReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxLimit\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperatorPartOne\",\"type\":\"address\"}],\"name\":\"UpdateOperatorPartOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperatorPartTwo\",\"type\":\"address\"}],\"name\":\"UpdateOperatorPartTwo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ETHAmount\",\"type\":\"uint256\"}],\"name\":\"UserRewardDistributed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ELRewardInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ELReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newELRewardVault\",\"type\":\"address\"}],\"name\":\"migrateFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextDistributeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorPartOne\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorPartTwo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ELReward\",\"type\":\"uint256\"}],\"internalType\":\"struct IELRewardVault.userInfo[]\",\"name\":\"usersInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"replace\",\"type\":\"bool\"}],\"name\":\"submitELRewardInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCommissionPct\",\"type\":\"uint256\"}],\"name\":\"updateCommissionPct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCommissionReceiver\",\"type\":\"address\"}],\"name\":\"updateCommissionReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxLimit\",\"type\":\"uint256\"}],\"name\":\"updateMaxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperatorPartOne\",\"type\":\"address\"}],\"name\":\"updateOperatorPartOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperatorPartTwo\",\"type\":\"address\"}],\"name\":\"updateOperatorPartTwo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ELRewardVault", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d0c3e013b7a900e7bfab3fc4c9628602d7552b2b000000000000000000000000ca3527d3dc3a397afd1a1e1c8af1fef206f9f731000000000000000000000000ff02711591f99c81f7c94154500607493b62fb080000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000000000000000000000000000000000000000000a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}