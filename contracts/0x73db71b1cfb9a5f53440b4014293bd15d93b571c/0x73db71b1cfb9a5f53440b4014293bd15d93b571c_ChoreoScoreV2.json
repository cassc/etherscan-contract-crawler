{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 /* firstTokenId */,\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solady/src/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Library to encode strings in Base64.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/Base64.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/Base64.sol)\\n/// @author Modified from (https://github.com/Brechtpd/base64/blob/main/base64.sol) by Brecht Devos - <brecht@loopring.org>.\\nlibrary Base64 {\\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n    /// See: https://datatracker.ietf.org/doc/html/rfc4648\\n    /// @param fileSafe  Whether to replace '+' with '-' and '/' with '_'.\\n    /// @param noPadding Whether to strip away the padding.\\n    function encode(bytes memory data, bool fileSafe, bool noPadding)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let dataLength := mload(data)\\n\\n            if dataLength {\\n                // Multiply by 4/3 rounded up.\\n                // The `shl(2, ...)` is equivalent to multiplying by 4.\\n                let encodedLength := shl(2, div(add(dataLength, 2), 3))\\n\\n                // Set `result` to point to the start of the free memory.\\n                result := mload(0x40)\\n\\n                // Store the table into the scratch space.\\n                // Offsetted by -1 byte so that the `mload` will load the character.\\n                // We will rewrite the free memory pointer at `0x40` later with\\n                // the allocated size.\\n                // The magic constant 0x0670 will turn \\\"-_\\\" into \\\"+/\\\".\\n                mstore(0x1f, \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef\\\")\\n                mstore(0x3f, xor(\\\"ghijklmnopqrstuvwxyz0123456789-_\\\", mul(iszero(fileSafe), 0x0670)))\\n\\n                // Skip the first slot, which stores the length.\\n                let ptr := add(result, 0x20)\\n                let end := add(ptr, encodedLength)\\n\\n                // Run over the input, 3 bytes at a time.\\n                for {} 1 {} {\\n                    data := add(data, 3) // Advance 3 bytes.\\n                    let input := mload(data)\\n\\n                    // Write 4 bytes. Optimized for fewer stack operations.\\n                    mstore8(0, mload(and(shr(18, input), 0x3F)))\\n                    mstore8(1, mload(and(shr(12, input), 0x3F)))\\n                    mstore8(2, mload(and(shr(6, input), 0x3F)))\\n                    mstore8(3, mload(and(input, 0x3F)))\\n                    mstore(ptr, mload(0x00))\\n\\n                    ptr := add(ptr, 4) // Advance 4 bytes.\\n                    if iszero(lt(ptr, end)) { break }\\n                }\\n                mstore(0x40, add(end, 0x20)) // Allocate the memory.\\n                // Equivalent to `o = [0, 2, 1][dataLength % 3]`.\\n                let o := div(2, mod(dataLength, 3))\\n                // Offset `ptr` and pad with '='. We can simply write over the end.\\n                mstore(sub(ptr, o), shl(240, 0x3d3d))\\n                // Set `o` to zero if there is padding.\\n                o := mul(iszero(iszero(noPadding)), o)\\n                mstore(sub(ptr, o), 0) // Zeroize the slot after the string.\\n                mstore(result, sub(encodedLength, o)) // Store the length.\\n            }\\n        }\\n    }\\n\\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n    /// Equivalent to `encode(data, false, false)`.\\n    function encode(bytes memory data) internal pure returns (string memory result) {\\n        result = encode(data, false, false);\\n    }\\n\\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n    /// Equivalent to `encode(data, fileSafe, false)`.\\n    function encode(bytes memory data, bool fileSafe)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        result = encode(data, fileSafe, false);\\n    }\\n\\n    /// @dev Decodes base64 encoded `data`.\\n    ///\\n    /// Supports:\\n    /// - RFC 4648 (both standard and file-safe mode).\\n    /// - RFC 3501 (63: ',').\\n    ///\\n    /// Does not support:\\n    /// - Line breaks.\\n    ///\\n    /// Note: For performance reasons,\\n    /// this function will NOT revert on invalid `data` inputs.\\n    /// Outputs for invalid inputs will simply be undefined behaviour.\\n    /// It is the user's responsibility to ensure that the `data`\\n    /// is a valid base64 encoded string.\\n    function decode(string memory data) internal pure returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let dataLength := mload(data)\\n\\n            if dataLength {\\n                let decodedLength := mul(shr(2, dataLength), 3)\\n\\n                for {} 1 {} {\\n                    // If padded.\\n                    if iszero(and(dataLength, 3)) {\\n                        let t := xor(mload(add(data, dataLength)), 0x3d3d)\\n                        // forgefmt: disable-next-item\\n                        decodedLength := sub(\\n                            decodedLength,\\n                            add(iszero(byte(30, t)), iszero(byte(31, t)))\\n                        )\\n                        break\\n                    }\\n                    // If non-padded.\\n                    decodedLength := add(decodedLength, sub(and(dataLength, 3), 1))\\n                    break\\n                }\\n                result := mload(0x40)\\n\\n                // Write the length of the bytes.\\n                mstore(result, decodedLength)\\n\\n                // Skip the first slot, which stores the length.\\n                let ptr := add(result, 0x20)\\n                let end := add(ptr, decodedLength)\\n\\n                // Load the table into the scratch space.\\n                // Constants are optimized for smaller bytecode with zero gas overhead.\\n                // `m` also doubles as the mask of the upper 6 bits.\\n                let m := 0xfc000000fc00686c7074787c8084888c9094989ca0a4a8acb0b4b8bcc0c4c8cc\\n                mstore(0x5b, m)\\n                mstore(0x3b, 0x04080c1014181c2024282c3034383c4044484c5054585c6064)\\n                mstore(0x1a, 0xf8fcf800fcd0d4d8dce0e4e8ecf0f4)\\n\\n                for {} 1 {} {\\n                    // Read 4 bytes.\\n                    data := add(data, 4)\\n                    let input := mload(data)\\n\\n                    // Write 3 bytes.\\n                    // forgefmt: disable-next-item\\n                    mstore(ptr, or(\\n                        and(m, mload(byte(28, input))),\\n                        shr(6, or(\\n                            and(m, mload(byte(29, input))),\\n                            shr(6, or(\\n                                and(m, mload(byte(30, input))),\\n                                shr(6, mload(byte(31, input)))\\n                            ))\\n                        ))\\n                    ))\\n                    ptr := add(ptr, 3)\\n                    if iszero(lt(ptr, end)) { break }\\n                }\\n                mstore(0x40, add(end, 0x20)) // Allocate the memory.\\n                mstore(end, 0) // Zeroize the slot after the bytes.\\n                mstore(0x60, 0) // Restore the zero slot.\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solady/src/utils/LibZip.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Library for compressing and decompressing bytes.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibZip.sol)\\n/// @author Calldata compression by clabby (https://github.com/clabby/op-kompressor)\\n/// @author FastLZ by ariya (https://github.com/ariya/FastLZ)\\n///\\n/// @dev Note:\\n/// The accompanying solady.js library includes implementations of\\n/// FastLZ and calldata operations for convenience.\\nlibrary LibZip {\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                     FAST LZ OPERATIONS                     */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    // LZ77 implementation based on FastLZ.\\n    // Equivalent to level 1 compression and decompression at the following commit:\\n    // https://github.com/ariya/FastLZ/commit/344eb4025f9ae866ebf7a2ec48850f7113a97a42\\n    // Decompression is backwards compatible.\\n\\n    /// @dev Returns the compressed `data`.\\n    function flzCompress(bytes memory data) internal pure returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            function ms8(d_, v_) -> _d {\\n                mstore8(d_, v_)\\n                _d := add(d_, 1)\\n            }\\n            function u24(p_) -> _u {\\n                let w := mload(p_)\\n                _u := or(shl(16, byte(2, w)), or(shl(8, byte(1, w)), byte(0, w)))\\n            }\\n            function cmp(p_, q_, e_) -> _l {\\n                for { e_ := sub(e_, q_) } lt(_l, e_) { _l := add(_l, 1) } {\\n                    e_ := mul(iszero(byte(0, xor(mload(add(p_, _l)), mload(add(q_, _l))))), e_)\\n                }\\n            }\\n            function literals(runs_, src_, dest_) -> _o {\\n                for { _o := dest_ } iszero(lt(runs_, 0x20)) { runs_ := sub(runs_, 0x20) } {\\n                    mstore(ms8(_o, 31), mload(src_))\\n                    _o := add(_o, 0x21)\\n                    src_ := add(src_, 0x20)\\n                }\\n                if iszero(runs_) { leave }\\n                mstore(ms8(_o, sub(runs_, 1)), mload(src_))\\n                _o := add(1, add(_o, runs_))\\n            }\\n            function match(l_, d_, o_) -> _o {\\n                for { d_ := sub(d_, 1) } iszero(lt(l_, 263)) { l_ := sub(l_, 262) } {\\n                    o_ := ms8(ms8(ms8(o_, add(224, shr(8, d_))), 253), and(0xff, d_))\\n                }\\n                if iszero(lt(l_, 7)) {\\n                    _o := ms8(ms8(ms8(o_, add(224, shr(8, d_))), sub(l_, 7)), and(0xff, d_))\\n                    leave\\n                }\\n                _o := ms8(ms8(o_, add(shl(5, l_), shr(8, d_))), and(0xff, d_))\\n            }\\n            function setHash(i_, v_) {\\n                let p := add(mload(0x40), shl(2, i_))\\n                mstore(p, xor(mload(p), shl(224, xor(shr(224, mload(p)), v_))))\\n            }\\n            function getHash(i_) -> _h {\\n                _h := shr(224, mload(add(mload(0x40), shl(2, i_))))\\n            }\\n            function hash(v_) -> _r {\\n                _r := and(shr(19, mul(2654435769, v_)), 0x1fff)\\n            }\\n            function setNextHash(ip_, ipStart_) -> _ip {\\n                setHash(hash(u24(ip_)), sub(ip_, ipStart_))\\n                _ip := add(ip_, 1)\\n            }\\n            codecopy(mload(0x40), codesize(), 0x8000) // Zeroize the hashmap.\\n            let op := add(mload(0x40), 0x8000)\\n            let a := add(data, 0x20)\\n            let ipStart := a\\n            let ipLimit := sub(add(ipStart, mload(data)), 13)\\n            for { let ip := add(2, a) } lt(ip, ipLimit) {} {\\n                let r := 0\\n                let d := 0\\n                for {} 1 {} {\\n                    let s := u24(ip)\\n                    let h := hash(s)\\n                    r := add(ipStart, getHash(h))\\n                    setHash(h, sub(ip, ipStart))\\n                    d := sub(ip, r)\\n                    if iszero(lt(ip, ipLimit)) { break }\\n                    ip := add(ip, 1)\\n                    if iszero(gt(d, 0x1fff)) { if eq(s, u24(r)) { break } }\\n                }\\n                if iszero(lt(ip, ipLimit)) { break }\\n                ip := sub(ip, 1)\\n                if gt(ip, a) { op := literals(sub(ip, a), a, op) }\\n                let l := cmp(add(r, 3), add(ip, 3), add(ipLimit, 9))\\n                op := match(l, d, op)\\n                ip := setNextHash(setNextHash(add(ip, l), ipStart), ipStart)\\n                a := ip\\n            }\\n            op := literals(sub(add(ipStart, mload(data)), a), a, op)\\n            result := mload(0x40)\\n            let t := add(result, 0x8000)\\n            let n := sub(op, t)\\n            mstore(result, n) // Store the length.\\n            // Copy the result to compact the memory, overwriting the hashmap.\\n            let o := add(result, 0x20)\\n            for { let i } lt(i, n) { i := add(i, 0x20) } { mstore(add(o, i), mload(add(t, i))) }\\n            mstore(add(o, n), 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(add(o, n), 0x20)) // Allocate the memory.\\n        }\\n    }\\n\\n    /// @dev Returns the decompressed `data`.\\n    function flzDecompress(bytes memory data) internal pure returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := 0\\n            let end := add(add(data, 0x20), mload(data))\\n            result := mload(0x40)\\n            let op := add(result, 0x20)\\n            for { data := add(data, 0x20) } lt(data, end) {} {\\n                let w := mload(data)\\n                let c := byte(0, w)\\n                let t := shr(5, c)\\n                if iszero(t) {\\n                    mstore(add(op, n), mload(add(data, 1)))\\n                    data := add(data, add(2, c))\\n                    n := add(n, add(1, c))\\n                    continue\\n                }\\n                let g := eq(t, 7)\\n                let l := add(2, xor(t, mul(g, xor(t, add(7, byte(1, w))))))\\n                for {\\n                    let s := add(add(shl(8, and(0x1f, c)), byte(add(1, g), w)), 1)\\n                    let r := add(op, sub(n, s))\\n                    let o := add(op, n)\\n                    let f := xor(s, mul(gt(s, 0x20), xor(s, 0x20)))\\n                    let j := 0\\n                } 1 {} {\\n                    mstore(add(o, j), mload(add(r, j)))\\n                    j := add(j, f)\\n                    if iszero(lt(j, l)) { break }\\n                }\\n                data := add(data, add(2, g))\\n                n := add(n, l)\\n            }\\n            mstore(result, n) // Store the length.\\n            let o := add(add(result, 0x20), n)\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate the memory.\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                    CALLDATA OPERATIONS                     */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    // Calldata compression and decompression using selective run length encoding:\\n    // - Sequences of 0x00 (up to 128 consecutive).\\n    // - Sequences of 0xff (up to 32 consecutive).\\n    //\\n    // A run length encoded block consists of two bytes:\\n    // (0) 0x00\\n    // (1) A control byte with the following bit layout:\\n    //     - [7]     `0: 0x00, 1: 0xff`.\\n    //     - [0..6]  `runLength - 1`.\\n    //\\n    // The first 4 bytes are bitwise negated so that the compressed calldata\\n    // can be dispatched into the `fallback` and `receive` functions.\\n\\n    /// @dev Returns the compressed `data`.\\n    function cdCompress(bytes memory data) internal pure returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            function rle(v_, o_, d_) -> _o, _d {\\n                mstore(o_, shl(240, or(and(0xff, add(d_, 0xff)), and(0x80, v_))))\\n                _o := add(o_, 2)\\n            }\\n            result := mload(0x40)\\n            let o := add(result, 0x20)\\n            let z := 0 // Number of consecutive 0x00.\\n            let y := 0 // Number of consecutive 0xff.\\n            for { let end := add(data, mload(data)) } iszero(eq(data, end)) {} {\\n                data := add(data, 1)\\n                let c := byte(31, mload(data))\\n                if iszero(c) {\\n                    if y { o, y := rle(0xff, o, y) }\\n                    z := add(z, 1)\\n                    if eq(z, 0x80) { o, z := rle(0x00, o, 0x80) }\\n                    continue\\n                }\\n                if eq(c, 0xff) {\\n                    if z { o, z := rle(0x00, o, z) }\\n                    y := add(y, 1)\\n                    if eq(y, 0x20) { o, y := rle(0xff, o, 0x20) }\\n                    continue\\n                }\\n                if y { o, y := rle(0xff, o, y) }\\n                if z { o, z := rle(0x00, o, z) }\\n                mstore8(o, c)\\n                o := add(o, 1)\\n            }\\n            if y { o, y := rle(0xff, o, y) }\\n            if z { o, z := rle(0x00, o, z) }\\n            // Bitwise negate the first 4 bytes.\\n            mstore(add(result, 4), not(mload(add(result, 4))))\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate the memory.\\n        }\\n    }\\n\\n    /// @dev Returns the decompressed `data`.\\n    function cdDecompress(bytes memory data) internal pure returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mload(data) {\\n                result := mload(0x40)\\n                let o := add(result, 0x20)\\n                let s := add(data, 4)\\n                let v := mload(s)\\n                let end := add(data, mload(data))\\n                mstore(s, not(v)) // Bitwise negate the first 4 bytes.\\n                for {} lt(data, end) {} {\\n                    data := add(data, 1)\\n                    let c := byte(31, mload(data))\\n                    if iszero(c) {\\n                        data := add(data, 1)\\n                        let d := byte(31, mload(data))\\n                        // Fill with either 0xff or 0x00.\\n                        mstore(o, not(0))\\n                        if iszero(gt(d, 0x7f)) { codecopy(o, codesize(), add(d, 1)) }\\n                        o := add(o, add(and(d, 0x7f), 1))\\n                        continue\\n                    }\\n                    mstore8(o, c)\\n                    o := add(o, 1)\\n                }\\n                mstore(s, v) // Restore the first 4 bytes.\\n                mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n                mstore(o, 0) // Zeroize the slot after the string.\\n                mstore(0x40, add(o, 0x20)) // Allocate the memory.\\n            }\\n        }\\n    }\\n\\n    /// @dev To be called in the `receive` and `fallback` functions.\\n    /// ```\\n    ///     receive() external payable { LibZip.cdFallback(); }\\n    ///     fallback() external payable { LibZip.cdFallback(); }\\n    /// ```\\n    /// For efficiency, this function will directly return the results, terminating the context.\\n    /// If called internally, it must be called at the end of the function.\\n    function cdFallback() internal {\\n        assembly {\\n            if iszero(calldatasize()) { return(calldatasize(), calldatasize()) }\\n            let o := 0\\n            let f := not(3) // For negating the first 4 bytes.\\n            for { let i := 0 } lt(i, calldatasize()) {} {\\n                let c := byte(0, xor(add(i, f), calldataload(i)))\\n                i := add(i, 1)\\n                if iszero(c) {\\n                    let d := byte(0, xor(add(i, f), calldataload(i)))\\n                    i := add(i, 1)\\n                    // Fill with either 0xff or 0x00.\\n                    mstore(o, not(0))\\n                    if iszero(gt(d, 0x7f)) { codecopy(o, codesize(), add(d, 1)) }\\n                    o := add(o, add(and(d, 0x7f), 1))\\n                    continue\\n                }\\n                mstore8(o, c)\\n                o := add(o, 1)\\n            }\\n            let success := delegatecall(gas(), address(), 0x00, o, codesize(), 0x00)\\n            returndatacopy(0x00, 0x00, returndatasize())\\n            if iszero(success) { revert(0x00, returndatasize()) }\\n            return(0x00, returndatasize())\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/ChoreoLibrary.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.17;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport \\\"lib/solady/src/utils/Base64.sol\\\";\\nimport {ChoreoLibraryConfig} from \\\"src/ChoreoLibraryConfig.sol\\\";\\n\\ncontract ChoreoLibrary is Ownable, ChoreoLibraryConfig {\\n    using Strings for uint16;\\n\\n    mapping(uint8 => MovementStruct) public movements;\\n    mapping(AttributesEnum => TextOverlay) public attributes;\\n    mapping(AttributeValuesEnum => mapping(uint8 => TextOverlay))\\n        public attributeValues;\\n\\n    function setMovementWidth(uint8 movement, uint16 width) external onlyOwner {\\n        movements[movement].width = width;\\n    }\\n\\n    function loadMovement(\\n        uint8 movement,\\n        uint16 width,\\n        bytes calldata svg\\n    ) external onlyOwner {\\n        movements[movement].svg = svg;\\n        movements[movement].width = width;\\n    }\\n\\n    function setAttributeSize(\\n        AttributesEnum attr,\\n        uint16 width,\\n        uint16 height\\n    ) external onlyOwner {\\n        attributes[attr].width = width;\\n        attributes[attr].height = height;\\n    }\\n\\n    function loadattributes(\\n        AttributesEnum attr,\\n        uint16 height,\\n        uint16 width,\\n        bytes calldata svg\\n    ) external onlyOwner {\\n        attributes[attr] = TextOverlay({\\n            svg: svg,\\n            width: width,\\n            height: height\\n        });\\n    }\\n\\n    function setAttributeValueSize(\\n        AttributeValuesEnum attr,\\n        uint8 valueId,\\n        uint16 width,\\n        uint16 height\\n    ) external onlyOwner {\\n        attributeValues[attr][valueId].width = width;\\n        attributeValues[attr][valueId].height = height;\\n    }\\n\\n    function loadattributeValues(\\n        AttributeValuesEnum attr,\\n        uint16 height,\\n        uint16 width,\\n        uint8[] calldata valueIds,\\n        bytes[] calldata svgs\\n    ) external onlyOwner {\\n        // require arrays are same length\\n        require(valueIds.length == svgs.length, \\\"Arrays must be same length\\\");\\n        uint16 svgsLength = uint16(svgs.length);\\n        for (uint16 i = 0; i < svgsLength; i++) {\\n            attributeValues[attr][valueIds[i]] = TextOverlay({\\n                svg: svgs[i],\\n                width: width,\\n                height: height\\n            });\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/ChoreoLibraryConfig.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.17;\\n\\ninterface ChoreoLibraryConfig {\\n\\n    struct ChoreographyParams {\\n        uint8[] tokenHashArray;\\n        uint8[] sequence;\\n        uint8[] pauseFrames;\\n        uint8[] tempo;\\n        uint8[] params;\\n    }\\n\\n    struct TextOverlay {\\n        bytes svg;\\n        uint16 width;\\n        uint16 height;\\n    }\\n\\n    struct MovementStruct {\\n        uint16 width;\\n        bytes svg;\\n    }\\n\\n    struct CanvasStruct {\\n        uint16 scale;\\n        uint16 maxWidth;\\n    }\\n\\n    enum AttributesEnum {\\n        Stamp,\\n        Header,\\n        FooterTitle,\\n        FooterSubtitle,\\n        FooterStage,\\n        FooterSequenceLength,\\n        FooterPerformers,\\n        FooterShare,\\n        FooterClimate,\\n        FooterABHash,\\n        FooterSigBone,\\n        FooterVuln,\\n        FooterHeartDist,\\n        FooterChoreoHash,\\n        TempoDouble,\\n        TempoHalf,\\n        SideView,\\n        Pause,\\n        VulnerableStamp\\n    }\\n    enum AttributeValuesEnum {\\n        Numeric,\\n        Alphabetic,\\n        Symbolic,\\n        StageOptions,\\n        ShareOptions,\\n        ClimateOptions,\\n        SigBoneOptions,\\n        VulnOptions,\\n        NumericSmall,\\n        SequenceOptions,\\n        MovementOverlayOptions\\n    }\\n}\\n\"\r\n    },\r\n    \"src/ChoreoScoreV2.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.17;\\n\\nimport {ERC721} from \\\"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\\\";\\nimport {IERC721} from \\\"lib/openzeppelin-contracts/contracts/interfaces/IERC721.sol\\\";\\nimport {Strings} from \\\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\\\";\\nimport {Ownable} from \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport {MerkleProof} from \\\"lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {Base64} from \\\"lib/solady/src/utils/Base64.sol\\\";\\nimport {ChoreoLibrary} from \\\"./ChoreoLibrary.sol\\\";\\nimport {ChoreoLibraryConfig} from \\\"src/ChoreoLibraryConfig.sol\\\";\\nimport {LibZip} from \\\"lib/solady/src/utils/LibZip.sol\\\";\\nimport {IChoreoScore} from \\\"src/IChoreoScore.sol\\\";\\n\\ncontract ChoreoScoreV2 is IChoreoScore, Ownable {\\n    using Strings for uint256;\\n    using Strings for uint16;\\n    using Strings for uint8;\\n    using LibZip for bytes;\\n\\n    enum ChoreoParamsEnum {\\n        Climate,\\n        Stage,\\n        Performers,\\n        Share,\\n        SignatureBone,\\n        Vulnerability,\\n        HeartTravel,\\n        HeartTravelMantissa,\\n        Invert\\n    }\\n\\n    address public choreoNft;\\n\\n    uint256 public safeRenderGas = 350000000; // Most tokens are less but use this to default to backup\\n\\n    string private _backupBaseUri;\\n\\n    function setBackupBaseURI(string memory uri) external onlyOwner {\\n        _backupBaseUri = uri;\\n    }\\n\\n    function setChoreoNft(address choreoNft_) external onlyOwner {\\n        choreoNft = choreoNft_;\\n    }\\n\\n    function setDescriptions(string[] memory _descriptions) external onlyOwner {\\n        require(_descriptions.length == 2);\\n        descriptions[0] = _descriptions[0];\\n        descriptions[1] = _descriptions[1];\\n    }\\n\\n    function setSafeRenderGas(uint256 _safeRenderGas) external onlyOwner {\\n        safeRenderGas = _safeRenderGas;\\n    }\\n\\n    string[2] public descriptions = [\\n        \\\"Choreographic score detailing the underlying movement sequence that created Human Unreadable #\\\",\\n        unicode\\\". The score should be read from top to bottom and left to right. The uncovering of this choreographic score is part of Act II of Human Unreadable, an experiential journey of slowly recovering within Operator\u2019s Privacy Collection. Human Unreadable unfolds in three acts while merging performance, cryptography, blockchain, and generative art into an experience that began on Art Blocks and ends in a live performance. Lot 03 (2023). operator.la/human-unreadable\\\"\\n    ];\\n\\n    string[6] public climateNames = [\\n        \\\"Just heard bad news\\\",\\n        \\\"Relaxed\\\",\\n        \\\"Some clouds\\\",\\n        \\\"On edge\\\",\\n        \\\"Current\\\",\\n        \\\"Your crush responded\\\"\\n    ];\\n\\n    string[3] public vulnerabilityNames = [\\n        \\\"Guarded\\\",\\n        \\\"Door cracked open\\\",\\n        \\\"Vulnerable\\\"\\n    ];\\n\\n    string[5] public orientationNames = [\\n        \\\"\\\",\\n        \\\"North\\\", // Starts at 1\\n        \\\"South\\\",\\n        \\\"East\\\",\\n        \\\"West\\\"\\n    ];\\n\\n    string[11] public boneNames = [\\n        \\\"\\\", // Don't show N/A\\n        \\\"Head\\\",\\n        \\\"L_Ankle\\\",\\n        \\\"L_Elbow\\\",\\n        \\\"L_Foot\\\",\\n        \\\"L_Knee\\\",\\n        \\\"L_Shoulder\\\",\\n        \\\"L_Wrist\\\",\\n        \\\"R_Ankle\\\",\\n        \\\"R_Shoulder\\\",\\n        \\\"R_Wrist\\\"\\n    ];\\n\\n    uint8 constant _DECIMAL_SYMBOL = 17;\\n    uint8 constant _OCTOTHORPE_SYMBOL = 19;\\n    uint8 constant _METERS_SYMBOL = 18;\\n    uint8 constant _PAUSE_SYMBOL = 3;\\n\\n    /** Render Constants**/\\n    uint256 constant _SEQUENCE_CANVAS_WIDTH_BASE = 915;\\n    uint256 constant _BASE_MOVEMENT_HEIGHT = 142;\\n    uint256 constant _MOVEMENT_CANVAS_HEIGHT = 980;\\n\\n    uint256 constant _SCALE_RES = 1000;\\n    uint256 constant _SCALE_MIN = 700;\\n\\n    /** Render Configuration**/\\n    ChoreoLibrary _choreoLibrary;\\n\\n    constructor(ChoreoLibrary choreoLibrary_) {\\n        _choreoLibrary = choreoLibrary_;\\n    }\\n\\n    function _renderBackupSvgUri(\\n        uint256 tokenId\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(_backupBaseUri, tokenId.toString(), \\\".svg\\\")\\n            );\\n    }\\n\\n    function renderTokenURI(\\n        uint256 tokenId,\\n        ChoreographyParams memory choreoToRender\\n    ) public view returns (string memory) {\\n        require(msg.sender == choreoNft, \\\"Only ChoreoNFT can render\\\");\\n        uint256 gasStart = gasleft();\\n        string memory name = string(\\n            abi.encodePacked(\\n                \\\"Human Unreadable: Choreographic Score \\\",\\n                (tokenId % 1000).toString()\\n            )\\n        );\\n        string memory image;\\n        if (gasStart >= safeRenderGas) {\\n            image = string(\\n                abi.encodePacked(\\n                    \\\"data:image/svg+xml;base64,\\\",\\n                    Base64.encode(bytes(_generateSVG(tokenId, choreoToRender)))\\n                )\\n            );\\n        } else {\\n            // If caller has not supplied enough gas return external render reference\\n            image = _renderBackupSvgUri(tokenId);\\n        }\\n\\n        string memory render = string(\\n            abi.encodePacked(\\n                \\\"data:application/json;base64,\\\",\\n                Base64.encode(\\n                    bytes(\\n                        abi.encodePacked(\\n                            '{\\\"name\\\":\\\"',\\n                            name,\\n                            '\\\", \\\"description\\\": \\\"',\\n                            descriptions[0],\\n                            (tokenId % 1000).toString(),\\n                            descriptions[1],\\n                            '\\\",\\\"external_url\\\":\\\"https://www.operator.la/human-unreadable\\\", \\\"attributes\\\": ',\\n                            _getAttributes(choreoToRender),\\n                            ', \\\"image\\\": \\\"',\\n                            image,\\n                            '\\\"}'\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n        return render;\\n    }\\n\\n    function _formatHeartDistance(\\n        ChoreographyParams memory choreoToRender\\n    ) internal pure returns (string memory) {\\n        uint8 mantissa = choreoToRender.params[\\n            uint8(ChoreoParamsEnum.HeartTravelMantissa)\\n        ];\\n        string memory mantissaStr = mantissa < 10\\n            ? string(abi.encodePacked(\\\"0\\\", mantissa.toString()))\\n            : mantissa.toString();\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    choreoToRender\\n                        .params[uint8(ChoreoParamsEnum.HeartTravel)]\\n                        .toString(),\\n                    \\\".\\\",\\n                    mantissaStr\\n                )\\n            );\\n    }\\n\\n    function _hasShare(\\n        ChoreographyParams memory choreoToRender\\n    ) internal pure returns (bool) {\\n        return\\n            choreoToRender.params[uint8(ChoreoParamsEnum.Performers)] > 0 &&\\n            choreoToRender.params[uint8(ChoreoParamsEnum.Share)] == 1;\\n    }\\n\\n    function _hasPause(\\n        ChoreographyParams memory choreoToRender\\n    ) internal pure returns (bool) {\\n        for (uint i = 0; i < choreoToRender.pauseFrames.length; i++) {\\n            if (choreoToRender.pauseFrames[i] != 0) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _hasImprovisation(\\n        ChoreographyParams memory choreoToRender\\n    ) internal pure returns (bool) {\\n        for (uint i = 0; i < choreoToRender.sequence.length; i++) {\\n            if (choreoToRender.sequence[i] == 0) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _getAttributes(\\n        ChoreographyParams memory choreoToRender\\n    ) internal view returns (string memory) {\\n        string[] memory parts = new string[](25);\\n\\n        parts[\\n            0\\n        ] = '[{\\\"trait_type\\\": \\\"Sequence Length\\\", \\\"display_type\\\": \\\"number\\\", \\\"value\\\": ';\\n        parts[1] = choreoToRender.sequence.length.toString();\\n        parts[2] = '},{\\\"trait_type\\\": \\\"Emotional Climate\\\", \\\"value\\\": \\\"';\\n        parts[3] = climateNames[\\n            choreoToRender.params[uint8(ChoreoParamsEnum.Climate)]\\n        ];\\n        parts[4] = '\\\"},{\\\"trait_type\\\": \\\"Improv\\\", \\\"value\\\": \\\"';\\n        parts[5] = _hasImprovisation(choreoToRender) ? \\\"Present\\\" : \\\"Absent\\\";\\n        parts[6] = '\\\"},{\\\"trait_type\\\": \\\"Pause\\\", \\\"value\\\": \\\"';\\n        parts[7] = _hasPause(choreoToRender) ? \\\"Yes\\\" : \\\"No\\\";\\n        if (choreoToRender.params[uint8(ChoreoParamsEnum.SignatureBone)] != 0) {\\n            parts[8] = '\\\"},{\\\"trait_type\\\": \\\"Signature Bone\\\", \\\"value\\\": \\\"';\\n            parts[9] = boneNames[\\n                choreoToRender.params[uint8(ChoreoParamsEnum.SignatureBone)]\\n            ];\\n        } else {\\n            parts[8] = \\\"\\\";\\n            parts[9] = \\\"\\\";\\n        }\\n        parts[10] = '\\\"},{\\\"trait_type\\\": \\\"Vulnerability\\\", \\\"value\\\": \\\"';\\n\\n        parts[11] = vulnerabilityNames[\\n            choreoToRender.params[uint8(ChoreoParamsEnum.Vulnerability)]\\n        ];\\n        parts[12] = '\\\"},{\\\"trait_type\\\": \\\"Stage Front\\\", \\\"value\\\": \\\"';\\n        parts[13] = orientationNames[\\n            choreoToRender.params[uint8(ChoreoParamsEnum.Stage)]\\n        ];\\n        parts[\\n            14\\n        ] = '\\\"},{\\\"trait_type\\\": \\\"Simultaneous Performers\\\", \\\"display_type\\\": \\\"number\\\", \\\"value\\\": ';\\n        parts[15] = choreoToRender\\n            .params[uint8(ChoreoParamsEnum.Performers)]\\n            .toString();\\n        parts[16] = '},{\\\"trait_type\\\": \\\"Share Sequence\\\", \\\"value\\\": \\\"';\\n        parts[17] = _hasShare(choreoToRender) ? \\\"Yes\\\" : \\\"No\\\";\\n        parts[\\n            18\\n        ] = '\\\"},{\\\"trait_type\\\": \\\"Distance of Heart Travel\\\", \\\"display_type\\\": \\\"number\\\", \\\"value\\\": ';\\n        parts[19] = _formatHeartDistance(choreoToRender);\\n        parts[20] = '},{\\\"trait_type\\\": \\\"Privacy Enabled\\\", \\\"value\\\": \\\"';\\n        parts[21] = choreoToRender.params[uint8(ChoreoParamsEnum.Invert)] == 1\\n            ? \\\"Yes\\\"\\n            : \\\"No\\\";\\n        parts[22] = '\\\"},{\\\"trait_type\\\": \\\"Choreographic Hash\\\", \\\"value\\\": \\\"';\\n        parts[23] = _joinSequence(choreoToRender.sequence);\\n        parts[24] = '\\\"}]';\\n        string memory result = parts[0];\\n        for (uint i = 1; i < parts.length; i++) {\\n            result = string(abi.encodePacked(result, parts[i]));\\n        }\\n\\n        return result;\\n    }\\n\\n    function _joinSequence(\\n        uint8[] memory arr\\n    ) internal pure returns (string memory tmp) {\\n        for (uint256 index = 0; index < arr.length; index++) {\\n            string memory value = arr[index] == 0 ? \\\"i\\\" : arr[index].toString();\\n            tmp = index < (arr.length - 1)\\n                ? string(abi.encodePacked(tmp, value, \\\"-\\\"))\\n                : string(abi.encodePacked(tmp, value));\\n        }\\n    }\\n\\n    function _generateSVG(\\n        uint256 tokenId,\\n        ChoreographyParams memory choreoToRender\\n    ) internal view returns (string memory) {\\n        bool invert = _isInverted(choreoToRender);\\n        string memory svg = string(\\n            abi.encodePacked(\\n                '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"915\\\" height=\\\"1220\\\"> <rect width=\\\"100%\\\" height=\\\"100%\\\" fill=',\\n                invert ? '\\\"black\\\"/>' : '\\\"white\\\"/>',\\n                \\\"<defs> <style> .difference { mix-blend-mode: difference; } \\\",\\n                invert // half tempo classes\\n                    ? '.st0{stroke:#fff;stroke-width:0.2;stroke-miterlimit:10;}.st1{fill:#000;stroke:#fff;stroke-width:0.2;stroke-miterlimit:10;} </style> </defs> <svg style=\\\"stroke:#fff;stroke-width:0;fill:#fff;\\\">'\\n                    : '.st0{stroke:#000;stroke-width:0.2;stroke-miterlimit:10;}.st1{fill:#fff;stroke:#000;stroke-width:0.2;stroke-miterlimit:10;} </style> </defs> <svg style=\\\"stroke:#000;stroke-width:0;fill:#000;\\\">',\\n                _renderBackground(choreoToRender),\\n                _renderHeader(choreoToRender),\\n                _renderFooters(tokenId, choreoToRender),\\n                _renderToken(choreoToRender),\\n                \\\"</svg> </svg>\\\"\\n            )\\n        );\\n\\n        return svg;\\n    }\\n\\n    function _renderFooters(\\n        uint256 tokenId,\\n        ChoreographyParams memory choreoToRender\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _renderFooterA(tokenId, choreoToRender),\\n                    _renderFooterB(choreoToRender),\\n                    _renderFooterC(choreoToRender)\\n                )\\n            );\\n    }\\n\\n    function _isInverted(\\n        ChoreographyParams memory choreoToRender\\n    ) internal pure returns (bool) {\\n        bool invert = choreoToRender.params[uint8(ChoreoParamsEnum.Invert)] ==\\n            1;\\n        return invert;\\n    }\\n\\n    function _isVulnerable(\\n        ChoreographyParams memory choreoToRender\\n    ) internal pure returns (bool) {\\n        uint8 vulnerability = choreoToRender.params[\\n            uint8(ChoreoParamsEnum.Vulnerability)\\n        ];\\n        return vulnerability == 2;\\n    }\\n\\n    function _renderBackground(\\n        ChoreographyParams memory choreoToRender\\n    ) internal view returns (string memory) {\\n        return\\n            _isVulnerable(choreoToRender)\\n                ? string(\\n                    abi.encodePacked(\\n                        \\\"<svg> <defs> <style> .stv{fill:\\\",\\n                        _isInverted(choreoToRender) ? \\\"#fff\\\" : \\\"#ec1e24\\\",\\n                        \\\"} </style> </defs>\\\",\\n                        _renderAttribute(AttributesEnum.VulnerableStamp, 0, 0),\\n                        \\\"</svg>\\\"\\n                    )\\n                )\\n                : \\\"\\\";\\n    }\\n\\n    function _renderHeader(\\n        ChoreographyParams memory choreoToRender\\n    ) internal view returns (string memory) {\\n        string memory render = _renderAttribute(AttributesEnum.Header, 20, 20);\\n\\n        return\\n            _isInverted(choreoToRender) && _isVulnerable(choreoToRender)\\n                ? _withDifference(render)\\n                : render;\\n    }\\n\\n    function _renderAttributeWithValue(\\n        AttributesEnum attributeId,\\n        AttributeValuesEnum attributeValueId,\\n        uint8[] memory attributeValueOptions,\\n        uint8 x,\\n        uint8 y\\n    ) internal view returns (string memory) {\\n        (bytes memory svg, uint256 width, uint256 height) = _choreoLibrary\\n            .attributes(attributeId);\\n\\n        uint256 offsetX = x + width;\\n        uint256 offsetY = y; // Total y offset\\n        string memory render = _placeSvg(\\n            string(svg.flzDecompress()),\\n            x,\\n            y,\\n            width,\\n            height\\n        );\\n        for (uint8 index = 0; index < attributeValueOptions.length; index++) {\\n            (render, offsetX, offsetY) = _renderAttributeValue(\\n                render,\\n                attributeValueId,\\n                attributeValueOptions[index],\\n                offsetX,\\n                offsetY\\n            );\\n        }\\n        return render;\\n    }\\n\\n    function _renderAttributeValues(\\n        AttributeValuesEnum attributeValueId,\\n        uint8[] memory attributeValueOptions,\\n        uint256 x,\\n        uint256 y\\n    ) internal view returns (string memory) {\\n        uint256 offsetX = x;\\n        uint256 offsetY = y;\\n        string memory render;\\n        for (uint8 index = 0; index < attributeValueOptions.length; index++) {\\n            (render, offsetX, offsetY) = _renderAttributeValue(\\n                render,\\n                attributeValueId,\\n                attributeValueOptions[index],\\n                offsetX,\\n                offsetY\\n            );\\n        }\\n        return render;\\n    }\\n\\n    function _renderAttributeValue(\\n        string memory render,\\n        AttributeValuesEnum attributeValueId,\\n        uint8 attributeOption,\\n        uint256 offsetX,\\n        uint256 offsetY\\n    ) internal view returns (string memory, uint256, uint256) {\\n        (bytes memory valueSvg, uint256 width, uint256 height) = _choreoLibrary\\n            .attributeValues(attributeValueId, attributeOption);\\n\\n        render = string(\\n            abi.encodePacked(\\n                render,\\n                _placeSvg(\\n                    string(valueSvg.flzDecompress()),\\n                    offsetX,\\n                    offsetY,\\n                    width,\\n                    height\\n                )\\n            )\\n        );\\n\\n        offsetX += width;\\n\\n        return (render, offsetX, offsetY);\\n    }\\n\\n    function _renderMultilineAttributeValues(\\n        AttributeValuesEnum attributeValueId,\\n        uint8[] memory attributeValueOptions,\\n        uint256 maxWidth,\\n        uint256 lineHeight,\\n        uint256 x,\\n        uint256 y\\n    ) internal view returns (string memory) {\\n        uint256 offsetX = x;\\n        uint256 offsetY = y; // Total y offset\\n        string memory render;\\n        for (uint8 index = 0; index < attributeValueOptions.length; index++) {\\n            (render, offsetX, offsetY) = _renderMultilineAttributeValue(\\n                render,\\n                attributeValueId,\\n                attributeValueOptions[index],\\n                maxWidth,\\n                lineHeight,\\n                offsetX,\\n                offsetY\\n            );\\n        }\\n        return render;\\n    }\\n\\n    function _renderMultilineAttributeValue(\\n        string memory render,\\n        AttributeValuesEnum attributeValueId,\\n        uint8 attributeOption,\\n        uint256 maxWidth,\\n        uint256 lineHeight,\\n        uint256 offsetX,\\n        uint256 offsetY\\n    ) internal view returns (string memory, uint256, uint256) {\\n        (bytes memory valueSvg, uint256 width, uint256 height) = _choreoLibrary\\n            .attributeValues(attributeValueId, attributeOption);\\n\\n        if (offsetX + width > maxWidth) {\\n            offsetX = 0;\\n            offsetY += lineHeight;\\n        }\\n\\n        render = string(\\n            abi.encodePacked(\\n                render,\\n                _placeSvg(\\n                    string(valueSvg.flzDecompress()),\\n                    offsetX,\\n                    offsetY,\\n                    width,\\n                    height\\n                )\\n            )\\n        );\\n\\n        offsetX += width;\\n\\n        return (render, offsetX, offsetY);\\n    }\\n\\n    function _renderAttributeWithJitter(\\n        AttributesEnum attributeId,\\n        uint256[2][2] memory range,\\n        bytes32 seed,\\n        bool withDifference\\n    ) internal view returns (string memory) {\\n        // Split the seed into two halves\\n        bytes16 xSeed = bytes16(seed);\\n        bytes16 ySeed = bytes16(uint128(uint256(seed)));\\n\\n        // Generate pseudo-random x and y within the provided range using the seed halves\\n        uint256 x = (uint256(keccak256(abi.encodePacked(xSeed))) %\\n            (range[0][1] - range[0][0] + 1)) + range[0][0];\\n        uint256 y = (uint256(keccak256(abi.encodePacked(ySeed))) %\\n            (range[1][1] - range[1][0] + 1)) + range[1][0];\\n\\n        // Call _renderAttribute with the generated x and y\\n        return\\n            withDifference\\n                ? _withDifference(_renderAttribute(attributeId, x, y))\\n                : _renderAttribute(attributeId, x, y);\\n    }\\n\\n    function _renderAttribute(\\n        AttributesEnum attributeId,\\n        uint256 x,\\n        uint256 y\\n    ) internal view returns (string memory) {\\n        (bytes memory svg, uint256 width, uint256 height) = _choreoLibrary\\n            .attributes(attributeId);\\n        return _placeSvg(string(svg.flzDecompress()), x, y, width, height);\\n    }\\n\\n    function _optionId(uint8 optionId) internal pure returns (uint8[] memory) {\\n        uint8[] memory optionIds = new uint8[](1);\\n        optionIds[0] = optionId;\\n        return optionIds;\\n    }\\n\\n    function _climateOptionIds(\\n        uint8 optionId\\n    ) internal pure returns (uint8[] memory) {\\n        uint8[] memory optionIds = new uint8[](2);\\n        optionIds[0] = optionId;\\n\\n        if (optionId == 0) {\\n            optionIds[1] = 6;\\n        } else if (optionId == 5) {\\n            optionIds[1] = 7;\\n        } else {\\n            optionIds[1] = type(uint8).max; // Empty\\n        }\\n\\n        return optionIds;\\n    }\\n\\n    function _numericOptionIds(\\n        uint16 numericValue,\\n        bool withOctothorpe\\n    ) internal pure returns (uint8[] memory) {\\n        uint8 hundreds = uint8(numericValue / 100);\\n        uint8 tens = uint8((numericValue % 100) / 10);\\n        uint8 ones = uint8(numericValue % 10);\\n\\n        if (hundreds != 0) {\\n            uint8[] memory optionIds = new uint8[](withOctothorpe ? 4 : 3);\\n            if (withOctothorpe) optionIds[0] = _OCTOTHORPE_SYMBOL;\\n            optionIds[withOctothorpe ? 1 : 0] = hundreds;\\n            optionIds[withOctothorpe ? 2 : 1] = tens;\\n            optionIds[withOctothorpe ? 3 : 2] = ones;\\n            return optionIds;\\n        } else if (tens != 0) {\\n            uint8[] memory optionIds = new uint8[](withOctothorpe ? 3 : 2);\\n            if (withOctothorpe) optionIds[0] = _OCTOTHORPE_SYMBOL;\\n            optionIds[withOctothorpe ? 1 : 0] = tens;\\n            optionIds[withOctothorpe ? 2 : 1] = ones;\\n            return optionIds;\\n        } else {\\n            uint8[] memory optionIds = new uint8[](withOctothorpe ? 2 : 1);\\n            if (withOctothorpe) optionIds[0] = _OCTOTHORPE_SYMBOL;\\n            optionIds[withOctothorpe ? 1 : 0] = ones;\\n            return optionIds;\\n        }\\n    }\\n\\n    function _distanceOptionIds(\\n        uint8 numericValueInteger,\\n        uint8 numericValueMantissa\\n    ) internal pure returns (uint8[] memory) {\\n        uint8 tens = uint8((numericValueInteger % 100) / 10);\\n        uint8 ones = uint8(numericValueInteger % 10);\\n        uint8 mantissaTens = uint8((numericValueMantissa % 100) / 10);\\n        uint8 mantissaOnes = uint8(numericValueMantissa % 10);\\n\\n        if (tens != 0) {\\n            uint8[] memory optionIds = new uint8[](6);\\n            optionIds[0] = tens;\\n            optionIds[1] = ones;\\n            optionIds[2] = _DECIMAL_SYMBOL;\\n            optionIds[3] = mantissaTens;\\n            optionIds[4] = mantissaOnes;\\n            optionIds[5] = _METERS_SYMBOL;\\n            return optionIds;\\n        } else {\\n            uint8[] memory optionIds = new uint8[](5);\\n            optionIds[0] = ones;\\n            optionIds[1] = _DECIMAL_SYMBOL;\\n            optionIds[2] = mantissaTens;\\n            optionIds[3] = mantissaOnes;\\n            optionIds[4] = _METERS_SYMBOL;\\n            return optionIds;\\n        }\\n    }\\n\\n    function _renderFooterA(\\n        uint256 tokenId,\\n        ChoreographyParams memory choreoToRender\\n    ) internal view returns (string memory) {\\n        string memory render = string(\\n            abi.encodePacked(\\n                '<svg x=\\\"20\\\" y=\\\"1050\\\" viewBox=\\\"0 0 260 154\\\" width=\\\"260\\\" height=\\\"154\\\">',\\n                _renderAttributeWithValue(\\n                    AttributesEnum.FooterTitle,\\n                    AttributeValuesEnum.Numeric,\\n                    _numericOptionIds(uint16(tokenId % 1000), true),\\n                    0,\\n                    0\\n                ),\\n                _renderAttribute(AttributesEnum.FooterSubtitle, 0, 29),\\n                _renderAttributeWithValue(\\n                    AttributesEnum.FooterVuln,\\n                    AttributeValuesEnum.VulnOptions,\\n                    _optionId(\\n                        choreoToRender.params[\\n                            uint8(ChoreoParamsEnum.Vulnerability)\\n                        ]\\n                    ),\\n                    0,\\n                    51\\n                ),\\n                _renderAttributeWithValue(\\n                    AttributesEnum.FooterPerformers,\\n                    AttributeValuesEnum.NumericSmall,\\n                    _numericOptionIds(\\n                        uint16(\\n                            choreoToRender.params[\\n                                uint8(ChoreoParamsEnum.Performers)\\n                            ]\\n                        ),\\n                        false\\n                    ),\\n                    0,\\n                    73\\n                ),\\n                _renderAttribute(AttributesEnum.FooterABHash, 0, 95),\\n                _renderMultilineAttributeValues(\\n                    AttributeValuesEnum.NumericSmall,\\n                    choreoToRender.tokenHashArray,\\n                    261,\\n                    22,\\n                    118,\\n                    95\\n                ),\\n                \\\"</svg>\\\"\\n            )\\n        );\\n\\n        return render;\\n    }\\n\\n    function _renderFooterB(\\n        ChoreographyParams memory choreoToRender\\n    ) internal view returns (string memory) {\\n        string memory render = string(\\n            abi.encodePacked(\\n                '<svg x=\\\"320\\\" y=\\\"1078\\\" viewBox=\\\"0 0 257 126\\\" width=\\\"257\\\" height=\\\"126\\\">',\\n                _renderAttributeWithValue(\\n                    AttributesEnum.FooterShare,\\n                    AttributeValuesEnum.ShareOptions,\\n                    _optionId(_hasShare(choreoToRender) ? 1 : 0),\\n                    0,\\n                    0\\n                ),\\n                _renderAttributeWithValue(\\n                    AttributesEnum.FooterHeartDist,\\n                    AttributeValuesEnum.NumericSmall,\\n                    _distanceOptionIds(\\n                        choreoToRender.params[\\n                            uint8(ChoreoParamsEnum.HeartTravel)\\n                        ],\\n                        choreoToRender.params[\\n                            uint8(ChoreoParamsEnum.HeartTravelMantissa)\\n                        ]\\n                    ),\\n                    0,\\n                    22\\n                ),\\n                _renderAttributeWithValue(\\n                    AttributesEnum.FooterStage,\\n                    AttributeValuesEnum.StageOptions,\\n                    _optionId(\\n                        choreoToRender.params[uint8(ChoreoParamsEnum.Stage)]\\n                    ),\\n                    0,\\n                    44\\n                ),\\n                _renderAttributeWithValue(\\n                    AttributesEnum.FooterSigBone,\\n                    AttributeValuesEnum.SigBoneOptions,\\n                    _optionId(\\n                        choreoToRender.params[\\n                            uint8(ChoreoParamsEnum.SignatureBone)\\n                        ]\\n                    ),\\n                    0,\\n                    66\\n                ),\\n                _renderAttribute(AttributesEnum.FooterClimate, 0, 88),\\n                _renderMultilineAttributeValues(\\n                    AttributeValuesEnum.ClimateOptions,\\n                    _climateOptionIds(\\n                        choreoToRender.params[uint8(ChoreoParamsEnum.Climate)]\\n                    ),\\n                    279,\\n                    22,\\n                    145,\\n                    88\\n                ),\\n                \\\"</svg>\\\"\\n            )\\n        );\\n\\n        return\\n            _isInverted(choreoToRender) && _isVulnerable(choreoToRender)\\n                ? _withDifference(render)\\n                : render;\\n    }\\n\\n    function _renderFooterC(\\n        ChoreographyParams memory choreoToRender\\n    ) internal view returns (string memory) {\\n        string memory render = string(\\n            abi.encodePacked(\\n                '<svg x=\\\"617\\\" y=\\\"1078\\\" viewBox=\\\"0 0 278 126\\\" width=\\\"278\\\" height=\\\"126\\\">',\\n                _renderAttribute(AttributesEnum.FooterChoreoHash, 0, 0),\\n                _renderMultilineAttributeValues(\\n                    AttributeValuesEnum.SequenceOptions,\\n                    choreoToRender.sequence,\\n                    297, // 278 + padding\\n                    35,\\n                    0,\\n                    20\\n                ),\\n                \\\"</svg>\\\"\\n            )\\n        );\\n\\n        return\\n            _isInverted(choreoToRender) && _isVulnerable(choreoToRender)\\n                ? _withDifference(render)\\n                : render;\\n    }\\n\\n    function _withDifference(\\n        string memory svg\\n    ) internal pure returns (string memory) {\\n        string memory render = string(\\n            abi.encodePacked(\\n                \\\"<svg\\\",\\n                ' class=\\\"difference\\\"',\\n                ' style=\\\"stroke:#fff;stroke-width:0;fill:#fff;\\\"',\\n                \\\">\\\",\\n                svg,\\n                \\\"</svg>\\\"\\n            )\\n        );\\n\\n        return render;\\n    }\\n\\n    function _placeSvg(\\n        string memory svg,\\n        uint256 x,\\n        uint256 y,\\n        uint256 width,\\n        uint256 height\\n    ) internal pure returns (string memory) {\\n        string memory render = string(\\n            abi.encodePacked(\\n                \\\"<svg\\\",\\n                ' x=\\\"',\\n                x.toString(),\\n                '\\\" y=\\\"',\\n                y.toString(),\\n                '\\\" width=\\\"',\\n                width.toString(),\\n                '\\\" height=\\\"',\\n                height.toString(),\\n                '\\\">',\\n                svg,\\n                \\\"</svg>\\\"\\n            )\\n        );\\n\\n        return render;\\n    }\\n\\n    function _transformFigure(\\n        string memory path,\\n        string memory offsetX,\\n        string memory offsetY,\\n        string memory scaleX,\\n        string memory scaleY\\n    ) internal pure returns (string memory) {\\n        string memory render = string(\\n            abi.encodePacked(\\n                \\\"<g \\\",\\n                'transform=\\\"translate(',\\n                (offsetX),\\n                \\\",\\\",\\n                (offsetY),\\n                \\\") scale(\\\",\\n                (scaleX),\\n                \\\",\\\",\\n                (scaleY),\\n                ')\\\">',\\n                path,\\n                \\\"</g>\\\"\\n            )\\n        );\\n\\n        return render;\\n    }\\n\\n    function _getSequenceWidth(\\n        uint8[] memory sequence\\n    ) internal view returns (uint256[] memory) {\\n        uint256[] memory imageWidths = new uint256[](sequence.length);\\n        for (uint8 index = 0; index < sequence.length; index++) {\\n            (uint256 width, ) = _choreoLibrary.movements(sequence[index]);\\n            imageWidths[index] = width;\\n        }\\n        return imageWidths;\\n    }\\n\\n    function _renderToken(\\n        ChoreographyParams memory choreoToRender\\n    ) internal view returns (string memory) {\\n        uint256[] memory imageWidths = _getSequenceWidth(\\n            choreoToRender.sequence\\n        );\\n\\n        (uint256 canvasScale, uint256 rows) = _calculateScale(imageWidths);\\n        uint256 scaledHeight = _scaleParam(_BASE_MOVEMENT_HEIGHT, canvasScale);\\n        string memory scaledString = _scaleString(canvasScale);\\n\\n        uint256 totalHeight = rows * scaledHeight;\\n\\n        uint256 offsetX; // Current x offset for this row\\n        uint256 offsetY; // Total y offset\\n        uint256 lastScaledWidth;\\n\\n        string memory render;\\n        for (uint8 index = 0; index < choreoToRender.sequence.length; index++) {\\n            (render, offsetX, offsetY, lastScaledWidth) = _renderMovement(\\n                render,\\n                choreoToRender,\\n                index,\\n                offsetX,\\n                offsetY,\\n                canvasScale,\\n                scaledString\\n            );\\n        }\\n\\n        uint256 sectionYOffset = _MOVEMENT_CANVAS_HEIGHT - totalHeight;\\n\\n        render = _layoutToken(\\n            choreoToRender,\\n            render,\\n            canvasScale,\\n            sectionYOffset,\\n            lastScaledWidth + offsetX\\n        );\\n\\n        return\\n            _isInverted(choreoToRender) && _isVulnerable(choreoToRender)\\n                ? _withDifference(render)\\n                : render;\\n    }\\n\\n    function _calculateCanvasOffsets(\\n        uint256 canvasScale\\n    )\\n        internal\\n        pure\\n        returns (uint256 scaledBaseOffset, uint256 scaledCanvasWidth)\\n    {\\n        uint256 desiredMargin = 20;\\n        uint256 baseMargin = 33;\\n        uint256 scaledBaseMargin = _scaleParam(baseMargin, canvasScale);\\n        scaledBaseOffset = scaledBaseMargin - desiredMargin;\\n        scaledCanvasWidth = _SEQUENCE_CANVAS_WIDTH_BASE + scaledBaseOffset * 2;\\n    }\\n\\n    function _layoutToken(\\n        ChoreographyParams memory choreoToRender,\\n        string memory render,\\n        uint256 canvasScale,\\n        uint256 sectionYOffset,\\n        uint256 lastXPosition\\n    ) internal view returns (string memory) {\\n        (\\n            uint256 scaledBaseOffset,\\n            uint256 scaledCanvasWidth\\n        ) = _calculateCanvasOffsets(canvasScale);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<svg x=\\\"0\\\" y=\\\"54\\\" viewBox=\\\"0 0 915 980\\\" width=\\\"915\\\" height=\\\"980\\\"> <svg x=\\\"-',\\n                    scaledBaseOffset.toString(),\\n                    '\\\" y=\\\"',\\n                    sectionYOffset.toString(),\\n                    '\\\" viewBox=\\\"0 0 ',\\n                    scaledCanvasWidth.toString(),\\n                    ' 980\\\" width=\\\"',\\n                    scaledCanvasWidth.toString(),\\n                    '\\\" height=\\\"980\\\">',\\n                    render,\\n                    '</svg></svg><svg x=\\\"0\\\" y=\\\"-50\\\">',\\n                    _renderStamp(\\n                        choreoToRender,\\n                        sectionYOffset,\\n                        lastXPosition,\\n                        canvasScale\\n                    ),\\n                    \\\"</svg>\\\"\\n                )\\n            );\\n    }\\n\\n    function _getRangeSettings(\\n        uint256 sectionYOffset,\\n        uint256 lastOffsetX,\\n        uint256 canvasScale\\n    ) internal pure returns (uint256[2][2] memory range) {\\n        (, uint256 scaledCanvasWidth) = _calculateCanvasOffsets(canvasScale);\\n        // Rule 1 - if small yOffset and if gap on bottom right, stamp goes in bottom right\\n\\n        // Check if sectionYOffset is below a certain threshold (100?)\\n        if (sectionYOffset < 100) {\\n            // Check if last offset x is less than 2/3 of the canvas width\\n            if (lastOffsetX < ((scaledCanvasWidth * 2) / 3)) {\\n                // Stamp goes in bottom right\\n                range[0][0] = _SEQUENCE_CANVAS_WIDTH_BASE / 2; // Start halfway across\\n                range[0][1] = (_SEQUENCE_CANVAS_WIDTH_BASE * 2) / 3; // End 2/3 across\\n                range[1][0] = 50 + (_MOVEMENT_CANVAS_HEIGHT * 2) / 3; // Start 2/3 down movement score\\n                range[1][1] = 50 + (_MOVEMENT_CANVAS_HEIGHT * 3) / 4; // End 3/4 down movement score\\n                return range;\\n            }\\n        }\\n\\n        // Rule 2 - if gap on top, stamp goes on top middle or left\\n        if (sectionYOffset > 100) {\\n            // Check if last offset x is less than 2/3 of the canvas width\\n            // Stamp goes in bottom right\\n            range[0][0] = 50; // Start 50 from left\\n            range[0][1] = (_SEQUENCE_CANVAS_WIDTH_BASE * 1) / 3; // End 1/3 across\\n            range[1][0] = 0; // Start at top\\n            range[1][1] = 100; // End 50 down\\n            return range;\\n        }\\n\\n        // Rule 3 - if large scale and gap on bottom right, stamp goes in bottom right\\n        if (canvasScale > 2000) {\\n            // Check if last offset x is less than 3/4 of the canvas width\\n            if (lastOffsetX < ((scaledCanvasWidth * 3) / 4)) {\\n                // Stamp goes in bottom right\\n                range[0][0] = _SEQUENCE_CANVAS_WIDTH_BASE / 2; // Start halfway across\\n                range[0][1] = (_SEQUENCE_CANVAS_WIDTH_BASE * 2) / 3; // End 2/3 across\\n                range[1][0] = 50 + (_MOVEMENT_CANVAS_HEIGHT * 2) / 3; // Start 2/3 down movement score\\n                range[1][1] = 50 + (_MOVEMENT_CANVAS_HEIGHT * 3) / 4; // End 3/4 down movement score\\n                return range;\\n            }\\n        }\\n\\n        // Otherwise random\\n        range[0][0] = _SEQUENCE_CANVAS_WIDTH_BASE / 2; // Start halfway across\\n        range[0][1] = (_SEQUENCE_CANVAS_WIDTH_BASE * 2) / 3; // End 2/3 across\\n        range[1][0] = 50 + (_MOVEMENT_CANVAS_HEIGHT * 1) / 3; // Start 1/3 down movement score\\n        range[1][1] = 50 + (_MOVEMENT_CANVAS_HEIGHT * 2) / 3; // End 2/3 down movement score\\n        return range;\\n    }\\n\\n    function _renderStamp(\\n        ChoreographyParams memory choreoToRender,\\n        uint256 sectionYOffset,\\n        uint256 lastXOffset,\\n        uint256 canvasScale\\n    ) internal view returns (string memory) {\\n        bytes32 seed = keccak256(\\n            abi.encodePacked(\\n                choreoToRender.sequence,\\n                choreoToRender.params[uint8(ChoreoParamsEnum.HeartTravel)]\\n            )\\n        );\\n        return\\n            _renderAttributeWithJitter(\\n                AttributesEnum.Stamp,\\n                _getRangeSettings(sectionYOffset, lastXOffset, canvasScale),\\n                seed,\\n                !_isVulnerable(choreoToRender) || _isInverted(choreoToRender)\\n            );\\n    }\\n\\n    function _scales(\\n        uint8 movementId,\\n        uint256 canvasScale\\n    ) internal view returns (string memory, uint256) {\\n        (uint256 width, bytes memory svg) = _choreoLibrary.movements(\\n            movementId\\n        );\\n        uint256 scaledWidth = _scaleParam(width, canvasScale);\\n        return (string(svg.flzDecompress()), scaledWidth);\\n    }\\n\\n    function _renderMovementOverlays(\\n        uint8 tempo,\\n        uint8 pause\\n    ) internal view returns (string memory) {\\n        uint8[] memory optionIds = new uint8[](3);\\n        optionIds[0] = tempo; // 1 is halftime and 2 is doubletime\\n        optionIds[1] = pause == 0 ? 0 : _PAUSE_SYMBOL;\\n        return\\n            _renderAttributeValues(\\n                AttributeValuesEnum.MovementOverlayOptions,\\n                optionIds,\\n                33,\\n                125\\n            );\\n    }\\n\\n    function _isImprov(uint8 movementId) internal pure returns (bool) {\\n        return movementId == 0;\\n    }\\n\\n    function _renderMovement(\\n        string memory render,\\n        ChoreographyParams memory choreoToRender,\\n        uint8 index,\\n        uint256 offsetX,\\n        uint256 offsetY,\\n        uint256 canvasScale,\\n        string memory scaledString\\n    ) internal view returns (string memory, uint256, uint256, uint256) {\\n        (string memory svg, uint256 scaledWidth) = _scales(\\n            choreoToRender.sequence[index],\\n            canvasScale\\n        );\\n\\n        svg = string(\\n            abi.encodePacked(\\n                svg,\\n                _isImprov(choreoToRender.sequence[index])\\n                    ? \\\"\\\"\\n                    : _renderMovementOverlays(\\n                        choreoToRender.tempo[index],\\n                        choreoToRender.pauseFrames[index]\\n                    )\\n            )\\n        );\\n\\n        uint256 scaledY = _scaleParam(_BASE_MOVEMENT_HEIGHT, canvasScale);\\n\\n        render = string(\\n            abi.encodePacked(\\n                render,\\n                _transformFigure(\\n                    svg,\\n                    offsetX.toString(),\\n                    offsetY.toString(),\\n                    scaledString,\\n                    scaledString\\n                )\\n            )\\n        );\\n\\n        if (index < choreoToRender.sequence.length - 1) {\\n            (offsetX, offsetY) = _calculateOffsets(\\n                choreoToRender,\\n                index,\\n                offsetX,\\n                offsetY,\\n                scaledWidth,\\n                scaledY,\\n                canvasScale\\n            );\\n        }\\n\\n        return (render, offsetX, offsetY, scaledWidth);\\n    }\\n\\n    function _calculateOffsets(\\n        ChoreographyParams memory choreoToRender,\\n        uint8 index,\\n        uint256 offsetX,\\n        uint256 offsetY,\\n        uint256 scaledWidth,\\n        uint256 scaledY,\\n        uint256 canvasScale\\n    ) internal view returns (uint256, uint256) {\\n        (, uint256 scaledCanvasWidth) = _calculateCanvasOffsets(canvasScale);\\n\\n        (uint256 nextWidth, ) = _choreoLibrary.movements(\\n            choreoToRender.sequence[index + 1]\\n        );\\n        uint256 scaledNextWidth = _scaleParam(nextWidth, canvasScale);\\n        if (offsetX + scaledWidth + scaledNextWidth > scaledCanvasWidth) {\\n            offsetY += scaledY;\\n            offsetX = 0;\\n        } else {\\n            offsetX += scaledWidth;\\n        }\\n\\n        return (offsetX, offsetY);\\n    }\\n\\n    function _calculateRowsAndAccumulator(\\n        uint256[] memory imageWidths,\\n        uint256 scale\\n    ) private pure returns (uint256) {\\n        (, uint256 scaledCanvasWidth) = _calculateCanvasOffsets(scale);\\n        uint256 rows = 1;\\n        uint256 widthAccumulator = 0;\\n\\n        for (uint16 i = 0; i < imageWidths.length; i++) {\\n            uint256 newWidthAccumulator = widthAccumulator +\\n                (imageWidths[i] * scale) /\\n                _SCALE_RES;\\n            if (newWidthAccumulator > scaledCanvasWidth) {\\n                rows++;\\n                widthAccumulator = (imageWidths[i] * scale) / _SCALE_RES;\\n            } else {\\n                widthAccumulator = newWidthAccumulator;\\n            }\\n        }\\n\\n        return rows;\\n    }\\n\\n    function _maxAndMin(\\n        uint256[] memory imageWidths\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 maxImageWidth = imageWidths[0];\\n        uint256 minImageWidth = imageWidths[0];\\n\\n        for (uint16 i = 1; i < imageWidths.length; i++) {\\n            if (imageWidths[i] > maxImageWidth) {\\n                maxImageWidth = imageWidths[i];\\n            }\\n            if (imageWidths[i] < minImageWidth) {\\n                minImageWidth = imageWidths[i];\\n            }\\n        }\\n        return (maxImageWidth, minImageWidth);\\n    }\\n\\n    function _maxUint(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function _minUint(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a <= b ? a : b;\\n    }\\n\\n    function _calculateMaxScale(\\n        uint256[] memory imageWidths\\n    ) internal pure returns (uint256) {\\n        (uint256 maxWidth, ) = _maxAndMin(imageWidths);\\n\\n        uint256 maxScaleByHeight = (((_MOVEMENT_CANVAS_HEIGHT * _SCALE_RES) /\\n            2) / _BASE_MOVEMENT_HEIGHT) - 1; // Clamp max scale by ensuring at least 2 rows\\n\\n        uint256 scale = maxScaleByHeight;\\n        (, uint256 scaledCanvasWidth) = _calculateCanvasOffsets(scale);\\n        uint256 maxScale = maxWidth == 0\\n            ? maxScaleByHeight\\n            : (((scaledCanvasWidth) * _SCALE_RES) / maxWidth) - 1; // Calculate max scale in case lower\\n\\n        scale = _minUint(maxScale, maxScaleByHeight); // Clamp scale to lower of maxScale and maxScaleByHeight\\n        return scale;\\n    }\\n\\n    function _calculateScale(\\n        uint256[] memory imageWidths\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 minScale = _SCALE_MIN;\\n        uint256 maxScale = _calculateMaxScale(imageWidths);\\n        uint256 scale;\\n        uint256 rows;\\n        uint256 totalHeight;\\n\\n        uint256 lastValidScale;\\n        uint256 lastValidRows;\\n\\n        uint256 iterationCounter;\\n\\n        while (minScale <= maxScale) {\\n            iterationCounter++;\\n            scale = (minScale + maxScale) / 2;\\n            rows = _calculateRowsAndAccumulator(imageWidths, scale);\\n            totalHeight = _scaleParam(_BASE_MOVEMENT_HEIGHT * rows, scale);\\n\\n            if (totalHeight > _MOVEMENT_CANVAS_HEIGHT) {\\n                maxScale = scale - 1;\\n            } else {\\n                lastValidScale = scale;\\n                lastValidRows = rows;\\n                if (totalHeight < _MOVEMENT_CANVAS_HEIGHT) {\\n                    minScale = scale + 1;\\n                } else {\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if (totalHeight > _MOVEMENT_CANVAS_HEIGHT) {\\n            scale = lastValidScale;\\n            rows = lastValidRows;\\n        }\\n\\n        return (scale, rows);\\n    }\\n\\n    function _scaleParam(\\n        uint256 base,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        return (base * scale) / _SCALE_RES;\\n    }\\n\\n    function _scaleString(uint256 scale) internal pure returns (string memory) {\\n        uint256 integerPart = scale / _SCALE_RES;\\n        uint256 mantissa = scale % _SCALE_RES;\\n        string memory mantissaStr;\\n\\n        if (mantissa < 10) {\\n            mantissaStr = string(abi.encodePacked(\\\"00\\\", mantissa.toString()));\\n        } else if (mantissa < 100) {\\n            mantissaStr = string(abi.encodePacked(\\\"0\\\", mantissa.toString()));\\n        } else {\\n            mantissaStr = mantissa.toString();\\n        }\\n\\n        return\\n            string(abi.encodePacked(integerPart.toString(), \\\".\\\", mantissaStr));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/IChoreoScore.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.17;\\n\\nimport {ChoreoLibraryConfig} from \\\"src/ChoreoLibraryConfig.sol\\\";\\n\\ninterface IChoreoScore is ChoreoLibraryConfig {\\n    function renderTokenURI(\\n        uint256 tokenId,\\n        ChoreographyParams memory choreoToRender\\n    ) external view returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {},\r\n    \"remappings\": [\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"solady/=lib/solady/src/\",\r\n      \"src/=src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"artblocks/=lib/artblocks-contracts/contracts/\",\r\n      \"artblocks-contracts/=lib/artblocks-contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ]\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ChoreoLibrary\",\"name\":\"choreoLibrary_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boneNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"choreoNft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"climateNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"descriptions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orientationNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"tokenHashArray\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sequence\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"pauseFrames\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"tempo\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"params\",\"type\":\"uint8[]\"}],\"internalType\":\"struct ChoreoLibraryConfig.ChoreographyParams\",\"name\":\"choreoToRender\",\"type\":\"tuple\"}],\"name\":\"renderTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeRenderGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBackupBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"choreoNft_\",\"type\":\"address\"}],\"name\":\"setChoreoNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_descriptions\",\"type\":\"string[]\"}],\"name\":\"setDescriptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_safeRenderGas\",\"type\":\"uint256\"}],\"name\":\"setSafeRenderGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vulnerabilityNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ChoreoScoreV2", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007af67c4333f612b2429903f3ce8e6840719eeed9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}