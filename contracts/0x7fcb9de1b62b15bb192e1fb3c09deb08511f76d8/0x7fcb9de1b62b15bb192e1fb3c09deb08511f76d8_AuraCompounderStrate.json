{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/compounder/strategies/AuraCompounderStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\n// Copyright (c) 2023 JonesDAO - All rights reserved\\n// Jones DAO: https://www.jonesdao.io/\\n\\n// Check https://docs.jonesdao.io/jones-dao/other/bounty for details on our bounty program.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\\\";\\nimport \\\"openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"src/interfaces/IAuraRouter.sol\\\";\\nimport \\\"src/interfaces/IStrategy.sol\\\";\\nimport \\\"src/interfaces/IAuraLocker.sol\\\";\\nimport \\\"src/interfaces/IDelegateRegistry.sol\\\";\\nimport \\\"src/interfaces/ITokenSwapper.sol\\\";\\nimport \\\"src/interfaces/IRewardDistributor.sol\\\";\\nimport \\\"src/interfaces/IWeth.sol\\\";\\nimport \\\"src/errors/Errors.sol\\\";\\nimport \\\"solmate/utils/FixedPointMathLib.sol\\\";\\nimport \\\"src/interfaces/IAuraBribe.sol\\\";\\n\\ncontract AuraCompounderStrategy is IStrategy, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using FixedPointMathLib for uint256;\\n\\n    event OnBribeNotify(address[] rewardTokens, uint256[] rewardAmounts);\\n    event Relock(uint256 amount);\\n\\n    struct IncentiveSettings {\\n        address jAURAVoter;\\n        address jonesTreasury;\\n        address auraTreasury;\\n        address withdrawRecipient;\\n        address jAuraLPAddress;\\n        uint64 jonesTreasuryPercent; // denominator 10000\\n        uint64 auraTreasuryPercent; // denominator 10000\\n        uint64 withdrawPercent; // denominator 10000\\n        uint64 bribesPercent; // denominator 10000\\n    }\\n\\n    IAuraRouter public router;\\n    IAuraBribe public constant auraBribe = IAuraBribe(0x642c59937A62cf7dc92F70Fd78A13cEe0aa2Bd9c);\\n    address private constant gov = 0x2a88a454A7b0C29d36D5A121b7Cf582db01bfCEC;\\n    address public vault;\\n    address public keeper;\\n    IncentiveSettings public incentiveSettings;\\n\\n    uint256 private lsdBalance;\\n\\n    bool private isClaimingBribes;\\n    bool private shouldRelock;\\n\\n    mapping(address => mapping(address => ITokenSwapper)) public swappers; // tokenIn => tokenOut => swapper\\n\\n    // constant variables\\n    IERC20Upgradeable public constant WETH = IERC20Upgradeable(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    IERC20Upgradeable public constant AURA = IERC20Upgradeable(0xC0c293ce456fF0ED870ADd98a0828Dd4d2903DBF);\\n    IERC20Upgradeable public constant AURABAL = IERC20Upgradeable(0x616e8BfA43F920657B3497DBf40D6b1A02D4608d);\\n    IAuraLocker public constant LOCKER = IAuraLocker(0x3Fa73f1E5d8A792C80F426fc8F84FBF7Ce9bBCAC);\\n    IDelegateRegistry public constant SNAPSHOT = IDelegateRegistry(0x469788fE6E9E9681C6ebF3bF78e7Fd26Fc015446);\\n    uint256 public constant DENOMINATOR = 10000;\\n    ITokenSwapper public constant inchSwapper = ITokenSwapper(0x1111111254fb6c44bAC0beD2854e76F90643097d);\\n\\n    ITokenSwapper public defaultSwapper;\\n\\n    IAuraBribe public newAuraBribe;\\n\\n    // Fallback function to receive ETH and wrap it into WETH.\\n    receive() external payable {\\n        address WETH_ADDRESS = address(WETH);\\n\\n        assembly {\\n            // ---------------------------------------------------\\n            // 0. The value of the call\\n            // ---------------------------------------------------\\n            // callvalue = msg.value\\n            let _amount := callvalue()\\n\\n            // ---------------------------------------------------\\n            // 1. The Function Selector\\n            // ---------------------------------------------------\\n            // 0x2e1a7d4d (first 4 bytes of the keccak-256 hash of the string \\\"deposit()\\\")\\n            let functionSelector := 0x2e1a7d4d\\n\\n            // ---------------------------------------------------\\n            // 2. The Memory Layout\\n            // ---------------------------------------------------\\n            // Memory is divided into slots, and each slot is 32 bytes (256 bits).\\n            // The free memory pointer always points to the next available slot in memory.\\n            // mload(0x40) retrieves the current free memory pointer.\\n            let ptr := mload(0x40)\\n\\n            // ptr now points here (let's call this position A):\\n            // A: [            ???            ]\\n            // As you can see, it's uninitialized memory, indicated by ???.\\n\\n            // ---------------------------------------------------\\n            // 3. Creating Calldata\\n            // ---------------------------------------------------\\n            // Calldata for our call needs to be the function selector.\\n            // We store it at the position ptr (position A).\\n            mstore(ptr, functionSelector)\\n\\n            // Memory now looks like this:\\n            // A: [     functionSelector     ]\\n\\n            // But, Ethereum is big-endian, which means the most significant byte is stored at the smallest address.\\n            // So, our memory looks like this in a more detailed view:\\n            // A: [  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n            //      00 00 00 00 00 00 00 00 00 00 00 00 2e 1a 7d 4d  ]\\n\\n            // ---------------------------------------------------\\n            // 4. Making the External Call\\n            // ---------------------------------------------------\\n            // We are now ready to make the external call to the WETH contract.\\n            // call(gas, to, value, inOffset, inSize, outOffset, outSize) is the structure.\\n\\n            // gas() - Remaining gas for the transaction.\\n            // WETH_ADDRESS - The address of the WETH contract.\\n            // _amount - The ether value we're sending with the call.\\n            // add(functionSelector, 0x20) - Where our calldata starts in memory.\\n            // 0x04 - Size of our calldata (4 bytes for the function selector).\\n            // 0 - We don't expect any return data, so outOffset is 0.\\n            // 0 - We don't expect any return data, so outSize is 0.\\n            let result := call(gas(), WETH_ADDRESS, _amount, add(ptr, 0x20), 0x04, 0, 0)\\n\\n            // Check if the call was successful, if not revert.\\n            switch iszero(result)\\n            case 1 {\\n                // Store the error message in memory.\\n                let err := \\\"WETH: FAIL\\\"\\n\\n                mstore(ptr, err)\\n\\n                // Revert with our custom error message.\\n                revert(ptr, 10) // \\\"WETH: FAIL\\\" has 10 characters.\\n            }\\n        }\\n    }\\n\\n    function initialize(address _router, address _vault, address _keeper, IncentiveSettings memory _incentiveSettings)\\n        external\\n        initializer\\n    {\\n        if (msg.sender != gov) {\\n            revert Errors.notOwner();\\n        }\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n\\n        router = IAuraRouter(_router);\\n        vault = _vault;\\n        keeper = _keeper;\\n        incentiveSettings = _incentiveSettings;\\n        AURA.safeApprove(address(LOCKER), type(uint256).max);\\n        shouldRelock = true;\\n    }\\n\\n    /**\\n     * @notice Gets the total amount of locked and unlocked AURA assets.\\n     * @return The total amount of locked and unlocked AURA assets.\\n     */\\n    function totalAssets() external view override returns (uint256) {\\n        IAuraLocker.Balances memory balances = LOCKER.balances(address(this));\\n        unchecked {\\n            return balances.locked + AURA.balanceOf(address(this));\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the total assets of LSD Vault`.\\n     */\\n    function totalAssetsLSD() external view returns (uint256) {\\n        return lsdBalance;\\n    }\\n\\n    /**\\n     * @notice Returns the total assets of no tokenized Vault`.\\n     */\\n    function totalNoTokenizedAssets() external view returns (uint256) {\\n        (uint256 noTokenzedBalance,) = vaultsPosition();\\n        return noTokenzedBalance;\\n    }\\n\\n    /**\\n     * @notice Returns the recipient and percent values from `incentiveSettings`.\\n     * @return recipient Address of the incentive receiver\\n     * @return percent Retention percentage\\n     */\\n    function withdrawRetention() external view returns (address recipient, uint64 percent) {\\n        return (incentiveSettings.withdrawRecipient, incentiveSettings.withdrawPercent);\\n    }\\n\\n    /**\\n     * @notice Return Vaults balances\\n     * @return No tokenized Vault Balance\\n     * @return LSD Vault balance\\n     */\\n    function vaultsPosition() public view returns (uint256, uint256) {\\n        IAuraLocker.Balances memory balances = LOCKER.balances(address(this));\\n        unchecked {\\n            uint256 auraBalance = balances.locked + AURA.balanceOf(address(this));\\n\\n            return (auraBalance - lsdBalance, lsdBalance);\\n        }\\n    }\\n\\n    /**\\n     * @notice Return Current Vaults portion in Strategy\\n     * @return No tokenized Vault Portion\\n     * @return LSD Vault Portion\\n     */\\n    function vaultsCurrentPosition() public view returns (uint256, uint256) {\\n        uint256 strategyBalance = AURA.balanceOf(address(this));\\n\\n        (uint256 ntBalance, uint256 tBalance) = vaultsPosition();\\n\\n        uint256 noTokenizedPortion = (ntBalance * strategyBalance) / (ntBalance + tBalance);\\n        unchecked {\\n            uint256 tokenizedPortion = strategyBalance > 0 ? strategyBalance - noTokenizedPortion : 0;\\n\\n            return (noTokenizedPortion, tokenizedPortion);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows the vaults to relock AURA in the contract.\\n     */\\n    function deposit(uint256 auraAmount, bool tokenized) external nonReentrant {\\n        _onlyRouter();\\n\\n        if (tokenized) {\\n            lsdBalance = lsdBalance + auraAmount;\\n        }\\n    }\\n\\n    function withdraw(address user, uint256 amount, bool tokenized) external nonReentrant returns (uint256) {\\n        _onlyRouter();\\n\\n        // Get current AURA balance\\n        uint256 balNow = AURA.balanceOf(address(this));\\n\\n        // If we dont have enough AURA\\n        if (balNow < amount) {\\n            // Check how much we can get by process unlocks\\n            (, uint256 unlockable,,) = LOCKER.lockedBalances(address(this));\\n\\n            // If still not enough, revert\\n            if (unlockable + balNow < amount) revert Errors.InsufficientWithdraw();\\n\\n            LOCKER.processExpiredLocks(false);\\n        }\\n\\n        if (tokenized) {\\n            unchecked {\\n                lsdBalance = lsdBalance > amount ? lsdBalance - amount : 0;\\n            }\\n        }\\n\\n        if (incentiveSettings.withdrawPercent > 0 && incentiveSettings.withdrawRecipient != address(0)) {\\n            uint256 withdrawalRetention = (amount * incentiveSettings.withdrawPercent) / DENOMINATOR;\\n\\n            uint256 jonesRetention = (withdrawalRetention * 2) / 3;\\n\\n            AURA.safeTransfer(incentiveSettings.withdrawRecipient, jonesRetention);\\n\\n            unchecked {\\n                //`withdrawalRetention` is always less than `amount` so it should never overflow\\n                amount -= withdrawalRetention;\\n            }\\n        }\\n\\n        AURA.safeTransfer(user, amount);\\n\\n        return amount;\\n    }\\n\\n    function afterRehyphotecate(uint256 _auraAmount, bool _tokenized) external {\\n        _onlyRouter();\\n\\n        if (!_tokenized) {\\n            lsdBalance = lsdBalance + _auraAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows the keeper address to harvest auraBAL reward from AuraLocker.\\n     * @param autoCompoundAll If true, the rewards will be automatically compounded into AURA.\\n     * @param minAmountOut keeper calculates both assets price and amounts and inputs the desired value.\\n     */\\n    function harvest(bool autoCompoundAll, uint256 minAmountOut) external {\\n        _onlyKeeper();\\n\\n        uint256 balanceBefore = AURABAL.balanceOf(address(this));\\n        // Claim auraBAL from AuraLocker\\n        LOCKER.getReward(address(this));\\n\\n        // Calculate how much was harvested in rewards, revert if no new rewards\\n        unchecked {\\n            uint256 amountEarned = AURABAL.balanceOf(address(this)) - balanceBefore;\\n            if (amountEarned == 0) {\\n                revert Errors.NoReward();\\n            }\\n\\n            if (autoCompoundAll) {\\n                // Swap auraBAL to AURA\\n                processEarned(address(AURABAL), amountEarned, address(AURA), minAmountOut, \\\"\\\");\\n            }\\n        }\\n    }\\n\\n    function relockExpiredLocks(bool _shouldRelock) external {\\n        _onlyKeeper();\\n\\n        LOCKER.processExpiredLocks(_shouldRelock);\\n    }\\n\\n    /**\\n     * @notice Allows the keeper address to claim rewards from the hiddenHandDistributor contract and process them accordingly. OnBribeNotify is emitted with the claimed reward tokens and amounts.\\n     * @param hiddenHandDistributor The contract that will be used to claim rewards.\\n     * @param _claims An array of claims to be made with the hiddenHandDistributor contract.\\n     */\\n    function claimHiddenHand(IRewardDistributor hiddenHandDistributor, IRewardDistributor.Claim[] calldata _claims)\\n        external\\n        nonReentrant\\n    {\\n        _onlyKeeper();\\n\\n        uint256 numClaims = _claims.length;\\n\\n        // Track token balances before bribes claim\\n        uint256[] memory beforeBalance = new uint256[](numClaims);\\n        address[] memory rewardTokens = new address[](numClaims);\\n        uint256 i;\\n        for (; i < numClaims;) {\\n            (rewardTokens[i],,,) = hiddenHandDistributor.rewards(_claims[i].identifier);\\n            beforeBalance[i] = IERC20Upgradeable(rewardTokens[i]).balanceOf(address(this));\\n            //++i should never overflow since it will always be less than the length of the _claims array\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        (uint256 ntBalance, uint256 tBalance) = vaultsPosition();\\n\\n        // Claim bribes\\n        isClaimingBribes = true;\\n        hiddenHandDistributor.claim(_claims);\\n        // Update bribe field for token receive lock\\n        delete isClaimingBribes;\\n        i = 0;\\n\\n        uint256[] memory rewardAmounts = new uint256[](numClaims);\\n        for (; i < numClaims;) {\\n            rewardAmounts[i] = IERC20Upgradeable(rewardTokens[i]).balanceOf(address(this)) - beforeBalance[i];\\n\\n            // Check if AURA earned\\n            if (rewardTokens[i] == address(AURA) && rewardAmounts[i] > 0) {\\n                _processAuraEarned(rewardAmounts[i], ntBalance, tBalance);\\n            }\\n\\n            unchecked {\\n                //++j should never overflow since it will always be less than the length of the _claims array\\n                ++i;\\n            }\\n        }\\n\\n        emit OnBribeNotify(rewardTokens, rewardAmounts);\\n    }\\n\\n    /**\\n     * @notice Processes an earned token amount and swaps it for `tokenOut` token.\\n     * @param tokenIn The address of the input token contract.\\n     * @param amountIn The amount of the input token to be transferred.\\n     * @param tokenOut The address of the output token contract.\\n     * @param minAmountOut The minimum amount of the output token to be received.\\n     * @param externalData External data that can be used by token swapper contracts.\\n     */\\n    function processEarned(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address tokenOut,\\n        uint256 minAmountOut,\\n        bytes memory externalData // this external data can be used in token swappers to get some off-chain data (e.g. 1Inch)\\n    ) public nonReentrant {\\n        _onlyKeeper();\\n\\n        if (tokenIn == address(AURA)) {\\n            revert Errors.InvalidTokenIn(tokenIn, address(AURA));\\n        }\\n\\n        if (amountIn == 0 || amountIn > IERC20Upgradeable(tokenIn).balanceOf(address(this))) {\\n            revert Errors.InvalidAmountIn(amountIn, IERC20Upgradeable(tokenIn).balanceOf(address(this)));\\n        }\\n\\n        ITokenSwapper tokenSwapper = getSwapper(tokenIn, tokenOut);\\n        if (address(tokenSwapper) == address(0)) {\\n            revert Errors.NoSwapper();\\n        }\\n\\n        (uint256 ntBalance, uint256 tBalance) = vaultsPosition();\\n\\n        if (tokenIn != address(AURABAL)) {\\n            IERC20Upgradeable(tokenIn).safeTransfer(address(tokenSwapper), amountIn);\\n        }\\n\\n        uint256 amountOut = tokenSwapper.swap(tokenIn, amountIn, tokenOut, minAmountOut, externalData);\\n\\n        if (tokenOut == address(AURA)) {\\n            _processAuraEarned(amountOut, ntBalance, tBalance);\\n        }\\n    }\\n\\n    /**\\n     * @notice Processes AURA \\\"bribes\\\" to various recipients based on the amount of AURA earned.\\n     * @param auraEarned The amount of AURA earned.\\n     */\\n    function _processAuraEarned(uint256 auraEarned, uint256 ntBalance, uint256 tBalance) private {\\n        unchecked {\\n            uint256 remaining = auraEarned;\\n            // transfer bribe incentive to jones treasury\\n            if (incentiveSettings.jonesTreasury != address(0)) {\\n                uint256 amount = (auraEarned * incentiveSettings.jonesTreasuryPercent) / DENOMINATOR;\\n                if (amount > 0) {\\n                    AURA.safeTransfer(incentiveSettings.jonesTreasury, amount);\\n                    remaining -= amount;\\n                }\\n            }\\n\\n            // transfer bribe to aura treasury\\n            if (incentiveSettings.auraTreasury != address(0)) {\\n                uint256 amount = (auraEarned * incentiveSettings.auraTreasuryPercent) / DENOMINATOR;\\n                if (amount > 0) {\\n                    AURA.safeTransfer(incentiveSettings.auraTreasury, amount);\\n                    remaining -= amount;\\n                }\\n            }\\n\\n            // Update Vault Balances\\n            uint256 lsdEarned = (tBalance * remaining) / (tBalance + ntBalance);\\n\\n            lsdBalance = lsdBalance + lsdEarned;\\n\\n            // transfer bribe to jAURA/AURA pool voter\\n            if (incentiveSettings.jAURAVoter != address(0) && incentiveSettings.jAuraLPAddress != address(0)) {\\n                uint256 amount = (\\n                    (\\n                        lsdEarned * IERC20Upgradeable(vault).balanceOf(incentiveSettings.jAuraLPAddress)\\n                            * incentiveSettings.bribesPercent\\n                    ) / IERC20Upgradeable(vault).totalSupply()\\n                ) / DENOMINATOR;\\n                if (amount > 0) {\\n                    AURA.safeTransfer(incentiveSettings.jAURAVoter, amount);\\n                    lsdBalance = lsdBalance - amount;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows the keeper address to claim rewards from the hiddenHandDistributor contract on L2s and not go through the usual flow.\\n     * @param hiddenHandDistributor The contract that will be used to claim rewards.\\n     * @param _claims An array of claims to be made with the hiddenHandDistributor contract.\\n     */\\n    function L2sClaimHiddenHand(\\n        IRewardDistributor hiddenHandDistributor,\\n        IRewardDistributor.Claim[] calldata _claims,\\n        address rewardBridge\\n    ) external nonReentrant {\\n        _onlyKeeper();\\n\\n        uint256 numClaims = _claims.length;\\n\\n        // Hidden hand uses BRIBE_VAULT address as a substitute for ETH\\n        address hhBribeVault = hiddenHandDistributor.BRIBE_VAULT();\\n\\n        // Track token balances before bribes claim\\n        address[] memory rewardTokens = new address[](numClaims);\\n        uint256 i;\\n        for (; i < numClaims;) {\\n            (rewardTokens[i],,,) = hiddenHandDistributor.rewards(_claims[i].identifier);\\n            //++i should never overflow since it will always be less than the length of the _claims array\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Claim bribes\\n        hiddenHandDistributor.claim(_claims);\\n\\n        i = 0;\\n\\n        // send rewards to bridge contract\\n\\n        for (; i < numClaims;) {\\n            if (rewardTokens[i] == hhBribeVault) {\\n                uint256 rewards = address(this).balance;\\n                if (rewards > 0) {\\n                    IWeth(address(WETH)).deposit{value: rewards}();\\n                    WETH.transfer(rewardBridge, rewards);\\n                }\\n            } else {\\n                uint256 rewards = IERC20Upgradeable(rewardTokens[i]).balanceOf(address(this));\\n                if (rewards > 0) {\\n                    IERC20Upgradeable(rewardTokens[i]).transfer(rewardBridge, rewards);\\n                }\\n            }\\n\\n            unchecked {\\n                //++j should never overflow since it will always be less than the length of the _claims array\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows the strategy to relock AURA in the contract.\\n     */\\n    function relock() external nonReentrant {\\n        _onlyKeeper();\\n\\n        _relock();\\n    }\\n\\n    /**\\n     * @notice Internal processer of AURA relock.\\n     */\\n    function _relock() internal {\\n        if (shouldRelock) {\\n            uint256 currentBalance = AURA.balanceOf(address(this));\\n            uint256 withdrawRequests = router.totalWithdrawRequests();\\n            unchecked {\\n                if (currentBalance > withdrawRequests) {\\n                    uint256 relockAmount = currentBalance - withdrawRequests;\\n                    // relock\\n                    LOCKER.lock(address(this), relockAmount);\\n\\n                    emit Relock(relockAmount);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// ----- Ownable Functions ------\\n    /**\\n     * @notice Sets the `router` contract.\\n     * @param _router The new `router` address.\\n     * @dev This function can only be called by the contract owner.\\n     */\\n    function setRouter(address _router) external onlyOwner {\\n        router = IAuraRouter(_router);\\n    }\\n\\n    /**\\n     * @notice Sets the `vault` address.\\n     * @param _vault The new `_vault` address.\\n     * @dev This function can only be called by the contract owner.\\n     */\\n    function setVault(address _vault) external onlyOwner {\\n        vault = _vault;\\n    }\\n\\n    /**\\n     * @notice Sets the `keeper` address.\\n     * @param _keeper The new `keeper` address.\\n     * @dev This function can only be called by the contract owner.\\n     */\\n    function setKeeper(address _keeper) external onlyOwner {\\n        keeper = _keeper;\\n    }\\n\\n    /**\\n     * @notice Sets the `IncentiveSettings` values.\\n     * @param _incentiveSettings The new `incentiveSettings` values.\\n     * @dev This function can only be called by the contract owner.\\n     */\\n    function setFeeSettings(IncentiveSettings memory _incentiveSettings) external onlyOwner {\\n        incentiveSettings = _incentiveSettings;\\n    }\\n\\n    /**\\n     * @notice Sets the token swapper contract for the given token pair.\\n     * @param tokenIn The address of the input token contract.\\n     * @param tokenOut The address of the output token contract.\\n     * @param tokenSwapper The address of the token swapper contract.\\n     * @param allowance The allowance for the token swapper contract to transfer the input token.\\n     * @dev This function can only be called by the contract owner.\\n     */\\n    function setTokenSwapper(address tokenIn, address tokenOut, address tokenSwapper, uint256 allowance)\\n        external\\n        onlyOwner\\n    {\\n        swappers[tokenIn][tokenOut] = ITokenSwapper(tokenSwapper);\\n\\n        IERC20Upgradeable(tokenIn).safeApprove(tokenSwapper, allowance);\\n    }\\n\\n    /**\\n     * @notice Sets the custom allowance for the given token and token swapper contract.\\n     * @param token The address of the token contract.\\n     * @param tokenSwapper The address of the token swapper contract.\\n     * @param allowance The new allowance for the token swapper contract to transfer the token.\\n     * @dev This function can only be called by the contract owner.\\n     */\\n    function setCustomAllowance(address token, address tokenSwapper, uint256 allowance) external onlyOwner {\\n        IERC20Upgradeable(token).safeApprove(tokenSwapper, 0);\\n        if (allowance > 0) {\\n            IERC20Upgradeable(token).safeApprove(tokenSwapper, allowance);\\n        }\\n    }\\n\\n    /// ------ Delegation ------\\n    /**\\n     * @notice Sets the delegate for the Aura Locker contract.\\n     * @param delegate The new delegate address.\\n     * @dev This function can only be called by the contract owner.\\n     */\\n    function setAuraLockerDelegate(address delegate) external onlyOwner {\\n        // Set delegate is enough as it will clear previous delegate automatically\\n        LOCKER.delegate(delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the delegate for the Snapshot contract with the given ID.\\n     * @param id The ID of the Snapshot contract.\\n     * @param delegate The new delegate address.\\n     * @dev This function can only be called by the contract owner. This cannot be used to remove delegation.\\n     */\\n    function setSnapshotDelegate(bytes32 id, address delegate) external onlyOwner {\\n        // Set delegate is enough as it will clear previous delegate automatically\\n        SNAPSHOT.setDelegate(id, delegate);\\n    }\\n\\n    /**\\n     * @notice Set the address able to claim Hidden Hand rewards.\\n     * @param delegate The new delegate address.\\n     * @dev This function can only be called by the contract owner.\\n     */\\n    function forwardHiddenHandRewards(address delegate) external onlyOwner {\\n        // Set delegate is enough as it will clear previous delegate automatically\\n        auraBribe.setRewardForwarding(delegate);\\n    }\\n\\n    /**\\n     * @notice Clears the snapshot delegate associated with the given snapshot ID.\\n     * @param id The ID of the snapshot to clear the delegate for.\\n     * @dev This function can only be called by the contract owner.\\n     */\\n    function clearSnapshotDelegate(bytes32 id) external onlyOwner {\\n        SNAPSHOT.clearDelegate(id);\\n    }\\n\\n    function updateShouldRelock(bool _status) external onlyOwner {\\n        shouldRelock = _status;\\n    }\\n\\n    function updateDefaultSwapper(ITokenSwapper _defaultSwapper) external onlyOwner {\\n        defaultSwapper = _defaultSwapper;\\n    }\\n\\n    function updateNewAuraBribe(IAuraBribe _newAuraBribe) external onlyOwner {\\n        newAuraBribe = _newAuraBribe;\\n    }\\n\\n    function rescueStuckEther() external onlyOwner {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    //// ------ Access ------\\n\\n    /// @notice Checks if msg.sender is router.\\n    /// @dev Reverts if sender != router.\\n    function _onlyRouter() private view {\\n        if (msg.sender != address(router)) {\\n            revert Errors.Unauthorized();\\n        }\\n    }\\n\\n    /// @notice Checks if msg.sender is keeper.\\n    /// @dev Reverts if sender != keeper.\\n    function _onlyKeeper() private view {\\n        if (msg.sender != keeper) {\\n            revert Errors.Unauthorized();\\n        }\\n    }\\n\\n    function _isWhitelisted(address _token) private view returns (bool) {\\n        return newAuraBribe.isWhitelistedToken(_token);\\n    }\\n\\n    function getSwapper(address _tokenIn, address _tokenOut) public view returns (ITokenSwapper) {\\n        ITokenSwapper swapper = swappers[_tokenIn][_tokenOut];\\n\\n        if (address(swapper) != address(0)) {\\n            return swapper;\\n        } else if (_isWhitelisted(_tokenIn) && address(swapper) == address(0)) {\\n            return defaultSwapper;\\n        } else {\\n            revert Errors.InvalidToken();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IAuraRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IAuraRouter {\\n    function deposit(uint256 _assets, bool _tokenized) external returns (uint256);\\n    function withdrawRequest(uint256 _shares, bool _tokenized, address _receiver) external;\\n    function withdraw(uint256 _assets, bool _tokenized) external returns (uint256);\\n    function rehypothecate(uint256 assets, bool _tokenized) external returns (uint256);\\n\\n    function noTokenizedUserInfo(address _user) external view returns (uint128, uint64, uint64);\\n    function lsdUserInfo(address _user) external view returns (uint128, uint64, uint64);\\n\\n    function totalWithdrawRequests() external view returns (uint256);\\n    function totalWithdrawRequestsLSD() external view returns (uint256);\\n    function totalWithdrawRequestsNoTokenized() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IStrategy {\\n    function totalAssets() external view returns (uint256);\\n    function totalAssetsLSD() external view returns (uint256);\\n    function totalNoTokenizedAssets() external view returns (uint256);\\n\\n    function deposit(uint256 auraAmount, bool tokenized) external;\\n    function withdrawRetention() external view returns (address recipient, uint64 percent);\\n    function withdraw(address user, uint256 amount, bool tokenized) external returns (uint256);\\n\\n    function afterRehyphotecate(uint256 auraAmount, bool tokenized) external;\\n\\n    function vaultsPosition() external view returns (uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IAuraLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IAuraLocker {\\n    struct EarnedData {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    struct Balances {\\n        uint112 locked;\\n        uint32 nextUnlockIndex;\\n    }\\n\\n    struct LockedBalance {\\n        uint112 amount;\\n        uint32 unlockTime;\\n    }\\n\\n    struct Epoch {\\n        uint224 supply;\\n        uint32 date; //epoch start date\\n    }\\n\\n    function lock(address _account, uint256 _amount) external;\\n\\n    function getReward(address _account) external;\\n\\n    function getReward(address _account, bool _stake) external;\\n\\n    function claimableRewards(address _account) external view returns (EarnedData[] memory userRewards);\\n\\n    function rewardTokens(uint256 _index) external view returns (address token);\\n\\n    function rewardPerToken(address _rewardsToken) external view returns (uint256);\\n\\n    function lastTimeRewardApplicable(address _rewardsToken) external view returns (uint256);\\n\\n    //BOOSTED balance of an account which only includes properly locked tokens as of the most recent eligible epoch\\n    function balanceOf(address _user) external view returns (uint256 amount);\\n\\n    function balanceAtEpochOf(uint256 _epoch, address _user) external view returns (uint256 amount);\\n\\n    function balances(address _user) external view returns (Balances memory bals);\\n\\n    function userLocks(address _user, uint256 _index) external view returns (LockedBalance memory lockedBals);\\n\\n    function lockedBalances(address _user)\\n        external\\n        view\\n        returns (uint256 total, uint256 unlockable, uint256 locked, LockedBalance[] memory lockData);\\n\\n    function findEpochId(uint256 _time) external view returns (uint256 epoch);\\n\\n    function epochs(uint256 _index) external view returns (Epoch memory epoch);\\n\\n    function lockedSupply() external view returns (uint256);\\n\\n    // Withdraw/relock all currently locked tokens where the unlock time has passed\\n    function processExpiredLocks(bool _relock, uint256 _spendRatio, address _withdrawTo) external;\\n\\n    // Withdraw/relock all currently locked tokens where the unlock time has passed\\n    function processExpiredLocks(bool _relock) external;\\n\\n    function delegate(address newDelegatee) external;\\n\\n    function delegates(address account) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IDelegateRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IDelegateRegistry {\\n    function setDelegate(bytes32 id, address delegate) external;\\n\\n    function clearDelegate(bytes32 id) external;\\n\\n    function delegation(address, bytes32) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ITokenSwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n// token swapper for AURA (tokenin => AURA)\\ninterface ITokenSwapper {\\n    function swap(address tokenIn, uint256 amountIn, address tokenOut, uint256 minAmountOut, bytes memory externalData)\\n        external\\n        returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IRewardDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IRewardDistributor {\\n    struct Claim {\\n        bytes32 identifier;\\n        address account;\\n        uint256 amount;\\n        bytes32[] merkleProof;\\n    }\\n\\n    event RewardClaimed(\\n        bytes32 indexed identifier, address indexed token, address indexed account, uint256 amount, uint256 updateCount\\n    );\\n    event RewardMetadataUpdated(\\n        bytes32 indexed identifier,\\n        address indexed token,\\n        bytes32 merkleRoot,\\n        bytes32 proof,\\n        uint256 indexed updateCount\\n    );\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    function BRIBE_VAULT() external view returns (address);\\n\\n    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);\\n\\n    function claim(Claim[] calldata _claims) external;\\n\\n    function claimed(bytes32, address) external view returns (uint256);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function rewards(bytes32)\\n        external\\n        view\\n        returns (address token, bytes32 merkleRoot, bytes32 proof, uint256 updateCount);\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    function updateRewardsMetadata(Claim[] calldata _distributions) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWeth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IWeth {\\n    function deposit() external payable;\\n}\\n\"\r\n    },\r\n    \"src/errors/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\n// Copyright (c) 2023 JonesDAO - All rights reserved\\n// Jones DAO: https://www.jonesdao.io/\\n\\n// Check https://docs.jonesdao.io/jones-dao/other/bounty for details on our bounty program.\\n\\npragma solidity ^0.8.10;\\n\\ninterface Errors {\\n    // Vault\\n    error ZeroAddress();\\n    error ZeroAmount();\\n    error WithdrawCooldown();\\n    error InsufficientShares();\\n    error InsufficientAssets();\\n    error InsufficientRequest();\\n    error notOwner();\\n\\n    // Strategy\\n    error OnlyFromHiddenHand();\\n    error Unauthorized();\\n    error InsufficientWithdraw();\\n    error NoReward();\\n    error NoSwapper();\\n\\n    // Swapper\\n    error Slippage(uint256 amountOut, uint256 minAmountOut);\\n    error InvalidToken();\\n\\n    // Misc.\\n    error InvalidTokenIn(address have, address want);\\n    error InvalidTokenOut(address have, address want);\\n    error InvalidAmountIn(uint256 have, uint256 want);\\n    error InvalidMinAmountOut(uint256 have, uint256 want);\\n    error InvalidReceiver(address have, address want);\\n    error InvalidPathSegment(address from, address to);\\n    error EmptyPath();\\n    error EmptyTokenIn();\\n    error EmptyTokenOut();\\n    error EmptyRouter();\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/FixedPointMathLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    function powWad(int256 x, int256 y) internal pure returns (int256) {\\n        // Equivalent to x to the power of y because x ** y = (e ** ln(x)) ** y = e ** (ln(x) * y)\\n        return expWad((lnWad(x) * y) / int256(WAD)); // Using ln(x) means x must be greater than 0.\\n    }\\n\\n    function expWad(int256 x) internal pure returns (int256 r) {\\n        unchecked {\\n            // When the result is < 0.5 we return zero. This happens when\\n            // x <= floor(log(0.5e18) * 1e18) ~ -42e18\\n            if (x <= -42139678854452767551) return 0;\\n\\n            // When the result is > (2**255 - 1) / 1e18 we can not represent it as an\\n            // int. This happens when x >= floor(log((2**255 - 1) / 1e18) * 1e18) ~ 135.\\n            if (x >= 135305999368893231589) revert(\\\"EXP_OVERFLOW\\\");\\n\\n            // x is now in the range (-42, 136) * 1e18. Convert to (-42, 136) * 2**96\\n            // for more intermediate precision and a binary basis. This base conversion\\n            // is a multiplication by 1e18 / 2**96 = 5**18 / 2**78.\\n            x = (x << 78) / 5**18;\\n\\n            // Reduce range of x to (-\u00bd ln 2, \u00bd ln 2) * 2**96 by factoring out powers\\n            // of two such that exp(x) = exp(x') * 2**k, where k is an integer.\\n            // Solving this gives k = round(x / log(2)) and x' = x - k * log(2).\\n            int256 k = ((x << 96) / 54916777467707473351141471128 + 2**95) >> 96;\\n            x = x - k * 54916777467707473351141471128;\\n\\n            // k is in the range [-61, 195].\\n\\n            // Evaluate using a (6, 7)-term rational approximation.\\n            // p is made monic, we'll multiply by a scale factor later.\\n            int256 y = x + 1346386616545796478920950773328;\\n            y = ((y * x) >> 96) + 57155421227552351082224309758442;\\n            int256 p = y + x - 94201549194550492254356042504812;\\n            p = ((p * y) >> 96) + 28719021644029726153956944680412240;\\n            p = p * x + (4385272521454847904659076985693276 << 96);\\n\\n            // We leave p in 2**192 basis so we don't need to scale it back up for the division.\\n            int256 q = x - 2855989394907223263936484059900;\\n            q = ((q * x) >> 96) + 50020603652535783019961831881945;\\n            q = ((q * x) >> 96) - 533845033583426703283633433725380;\\n            q = ((q * x) >> 96) + 3604857256930695427073651918091429;\\n            q = ((q * x) >> 96) - 14423608567350463180887372962807573;\\n            q = ((q * x) >> 96) + 26449188498355588339934803723976023;\\n\\n            assembly {\\n                // Div in assembly because solidity adds a zero check despite the unchecked.\\n                // The q polynomial won't have zeros in the domain as all its roots are complex.\\n                // No scaling is necessary because p is already 2**96 too large.\\n                r := sdiv(p, q)\\n            }\\n\\n            // r should be in the range (0.09, 0.25) * 2**96.\\n\\n            // We now need to multiply r by:\\n            // * the scale factor s = ~6.031367120.\\n            // * the 2**k factor from the range reduction.\\n            // * the 1e18 / 2**96 factor for base conversion.\\n            // We do this all at once, with an intermediate result in 2**213\\n            // basis, so the final right shift is always by a positive amount.\\n            r = int256((uint256(r) * 3822833074963236453042738258902158003155416615667) >> uint256(195 - k));\\n        }\\n    }\\n\\n    function lnWad(int256 x) internal pure returns (int256 r) {\\n        unchecked {\\n            require(x > 0, \\\"UNDEFINED\\\");\\n\\n            // We want to convert x from 10**18 fixed point to 2**96 fixed point.\\n            // We do this by multiplying by 2**96 / 10**18. But since\\n            // ln(x * C) = ln(x) + ln(C), we can simply do nothing here\\n            // and add ln(2**96 / 10**18) at the end.\\n\\n            // Reduce range of x to (1, 2) * 2**96\\n            // ln(2^k * x) = k * ln(2) + ln(x)\\n            int256 k = int256(log2(uint256(x))) - 96;\\n            x <<= uint256(159 - k);\\n            x = int256(uint256(x) >> 159);\\n\\n            // Evaluate using a (8, 8)-term rational approximation.\\n            // p is made monic, we will multiply by a scale factor later.\\n            int256 p = x + 3273285459638523848632254066296;\\n            p = ((p * x) >> 96) + 24828157081833163892658089445524;\\n            p = ((p * x) >> 96) + 43456485725739037958740375743393;\\n            p = ((p * x) >> 96) - 11111509109440967052023855526967;\\n            p = ((p * x) >> 96) - 45023709667254063763336534515857;\\n            p = ((p * x) >> 96) - 14706773417378608786704636184526;\\n            p = p * x - (795164235651350426258249787498 << 96);\\n\\n            // We leave p in 2**192 basis so we don't need to scale it back up for the division.\\n            // q is monic by convention.\\n            int256 q = x + 5573035233440673466300451813936;\\n            q = ((q * x) >> 96) + 71694874799317883764090561454958;\\n            q = ((q * x) >> 96) + 283447036172924575727196451306956;\\n            q = ((q * x) >> 96) + 401686690394027663651624208769553;\\n            q = ((q * x) >> 96) + 204048457590392012362485061816622;\\n            q = ((q * x) >> 96) + 31853899698501571402653359427138;\\n            q = ((q * x) >> 96) + 909429971244387300277376558375;\\n            assembly {\\n                // Div in assembly because solidity adds a zero check despite the unchecked.\\n                // The q polynomial is known not to have zeros in the domain.\\n                // No scaling required because p is already 2**96 too large.\\n                r := sdiv(p, q)\\n            }\\n\\n            // r is in the range (0, 0.125) * 2**96\\n\\n            // Finalization, we need to:\\n            // * multiply by the scale factor s = 5.549\u2026\\n            // * add ln(2**96 / 10**18)\\n            // * add k * ln(2)\\n            // * multiply by 10**18 / 2**96 = 5**18 >> 78\\n\\n            // mul s * 5e18 * 2**96, base is now 5**18 * 2**192\\n            r *= 1677202110996718588342820967067443963516166;\\n            // add ln(2) * k * 5e18 * 2**192\\n            r += 16597577552685614221487285958193947469193820559219878177908093499208371 * k;\\n            // add ln(2**96 / 10**18) * 5e18 * 2**192\\n            r += 600920179829731861736702779321621459595472258049074101567377883020018308;\\n            // base conversion: mul 2**18 / 2**192\\n            r >>= 174;\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        require(x > 0, \\\"UNDEFINED\\\");\\n\\n        assembly {\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            r := or(r, shl(2, lt(0xf, shr(r, x))))\\n            r := or(r, shl(1, lt(0x3, shr(r, x))))\\n            r := or(r, lt(0x1, shr(r, x)))\\n        }\\n    }\\n\\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            // z will equal 0 if y is 0, unlike in Solidity where it will revert.\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            // z will equal 0 if y is 0, unlike in Solidity where it will revert.\\n            z := div(x, y)\\n        }\\n    }\\n\\n    /// @dev Will return 0 instead of reverting if y is zero.\\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            // Add 1 to x * y if x % y > 0.\\n            z := add(gt(mod(x, y), 0), div(x, y))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IAuraBribe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IAuraBribe {\\n    function depositBribeERC20(bytes32 proposal, address token, uint256 amount) external;\\n    function isWhitelistedToken(address token) external view returns (bool);\\n    function setRewardForwarding(address to) external;\\n    function rewardForwarding(address from) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"@uniswap/v3-core/=lib/v3-core/\",\r\n      \"@uniswap/v3-periphery/=lib/v3-periphery/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"v3-core/=lib/v3-core/\",\r\n      \"v3-periphery/=lib/v3-periphery/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"InsufficientWithdraw\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"have\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"want\",\"type\":\"uint256\"}],\"name\":\"InvalidAmountIn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"InvalidTokenIn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoReward\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSwapper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"notOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardAmounts\",\"type\":\"uint256[]\"}],\"name\":\"OnBribeNotify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Relock\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AURA\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AURABAL\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardDistributor\",\"name\":\"hiddenHandDistributor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IRewardDistributor.Claim[]\",\"name\":\"_claims\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"rewardBridge\",\"type\":\"address\"}],\"name\":\"L2sClaimHiddenHand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCKER\",\"outputs\":[{\"internalType\":\"contract IAuraLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SNAPSHOT\",\"outputs\":[{\"internalType\":\"contract IDelegateRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auraAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_tokenized\",\"type\":\"bool\"}],\"name\":\"afterRehyphotecate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auraBribe\",\"outputs\":[{\"internalType\":\"contract IAuraBribe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardDistributor\",\"name\":\"hiddenHandDistributor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IRewardDistributor.Claim[]\",\"name\":\"_claims\",\"type\":\"tuple[]\"}],\"name\":\"claimHiddenHand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"clearSnapshotDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultSwapper\",\"outputs\":[{\"internalType\":\"contract ITokenSwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auraAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"tokenized\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"forwardHiddenHandRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"getSwapper\",\"outputs\":[{\"internalType\":\"contract ITokenSwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"autoCompoundAll\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentiveSettings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"jAURAVoter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jonesTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auraTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jAuraLPAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"jonesTreasuryPercent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"auraTreasuryPercent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"withdrawPercent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"bribesPercent\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inchSwapper\",\"outputs\":[{\"internalType\":\"contract ITokenSwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"jAURAVoter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jonesTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auraTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jAuraLPAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"jonesTreasuryPercent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"auraTreasuryPercent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"withdrawPercent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"bribesPercent\",\"type\":\"uint64\"}],\"internalType\":\"struct AuraCompounderStrategy.IncentiveSettings\",\"name\":\"_incentiveSettings\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newAuraBribe\",\"outputs\":[{\"internalType\":\"contract IAuraBribe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"externalData\",\"type\":\"bytes\"}],\"name\":\"processEarned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldRelock\",\"type\":\"bool\"}],\"name\":\"relockExpiredLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueStuckEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IAuraRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"setAuraLockerDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenSwapper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"setCustomAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"jAURAVoter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jonesTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auraTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jAuraLPAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"jonesTreasuryPercent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"auraTreasuryPercent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"withdrawPercent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"bribesPercent\",\"type\":\"uint64\"}],\"internalType\":\"struct AuraCompounderStrategy.IncentiveSettings\",\"name\":\"_incentiveSettings\",\"type\":\"tuple\"}],\"name\":\"setFeeSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"setSnapshotDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenSwapper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"setTokenSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swappers\",\"outputs\":[{\"internalType\":\"contract ITokenSwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssetsLSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNoTokenizedAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITokenSwapper\",\"name\":\"_defaultSwapper\",\"type\":\"address\"}],\"name\":\"updateDefaultSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuraBribe\",\"name\":\"_newAuraBribe\",\"type\":\"address\"}],\"name\":\"updateNewAuraBribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateShouldRelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultsCurrentPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultsPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"tokenized\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRetention\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"percent\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AuraCompounderStrategy", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}