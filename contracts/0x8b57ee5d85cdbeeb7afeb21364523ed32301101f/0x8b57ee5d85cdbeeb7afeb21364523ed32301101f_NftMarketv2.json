{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/NftMarketV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n//    ____                      _  __    _   ______________   __  ___           __        __ \\n//   / __ \\\\____  ___  ____     | |/ /   / | / / ____/_  __/  /  |/  /___ ______/ /_____  / /_\\n//  / / / / __ \\\\/ _ \\\\/ __ \\\\    |   /   /  |/ / /_    / /    / /|_/ / __ `/ ___/ //_/ _ \\\\/ __/\\n// / /_/ / /_/ /  __/ / / /   /   |   / /|  / __/   / /    / /  / / /_/ / /  / ,< /  __/ /_  \\n// \\\\____/ .___/\\\\___/_/ /_/   /_/|_|  /_/ |_/_/     /_/    /_/  /_/\\\\__,_/_/  /_/|_|\\\\___/\\\\__/  \\n//     /_/                                                                                   \\n// \u00a9 The OpenX Project. Made with love by Alex. Keep the dream alive.\\n\\n\\ncontract NftMarketv2 is Ownable {\\n\\t\\n\\t//fee per 10k\\n\\tuint256 public feePer10K = 100;\\n\\t//WETH\\n\\taddress public WETH;\\n\\n\\tstruct nftlisting {\\n\\t\\taddress nft;\\n\\t\\taddress seller;\\n\\t\\taddress buyer;\\n\\t\\tuint256 tokenId;\\n\\t\\taddress fundingToken;\\n\\t\\taddress[] whitelist;\\n\\t\\tuint256 price;\\n\\t\\tuint256 startDate;\\n\\t\\tuint256 endDate;\\n\\t\\tuint256 saleDate;\\n\\t}\\n\\n\\tstruct bid {\\n\\t\\tuint256 listingID;\\n\\t\\taddress fundingToken;\\n\\t\\tuint256 price;\\n\\t\\taddress user;\\n\\t}\\n\\n\\tstruct offer {\\n\\t\\taddress nft;\\n\\t\\tuint256 tokenId;\\n\\t\\taddress fundingToken;\\n\\t\\tuint256 price;\\n\\t\\taddress user;\\n\\t}\\n\\n\\tstruct collection{\\n\\t\\taddress nft;\\n\\t\\taddress fundingToken;\\n\\t\\tuint256 price;\\n\\t\\taddress seller;\\n\\t\\taddress[] whitelist;\\t\\n\\t}\\n\\n\\tuint internal _unlocked = 1;\\n    modifier lock() {\\n        require(_unlocked == 1);\\n        _unlocked = 2;\\n        _;\\n        _unlocked = 1;\\n    }\\n\\n\\tnftlisting[] public Listings;\\n\\tcollection[] public Collections;\\n\\tbid[] public Bids;\\n\\toffer[] public Offers;\\n\\n\\tmapping(address=> uint256) public nftRoyaltyFee;\\n\\tmapping(address=> address) public nftRoyaltyFeeTo;\\n\\tmapping(address=> string) public nftContractUrl;\\n\\n\\tevent nftListed(address indexed seller,\\taddress indexed nft, uint256 tokenId, address fundingToken,\\n\\t \\t\\t\\t\\tuint256 price, address[] whitelist, uint256 startDate, uint256 endDate, uint256 listingID);\\n\\tevent Bid(uint256 indexed bidId,uint256 indexed listingID,address fundingToken,uint256 price,address user);\\n\\tevent Offer(uint256 offerId, address nft, uint256 tokenId, address fundingToken, uint256 price, address owner);\\n\\tevent nftSold(uint256 listingID);\\n\\tevent AcceptBid(uint256 indexed bidId);\\n\\tevent AcceptOffer(uint256 indexed bidId);\\n\\tevent removeNft(uint256 indexed listingID);\\n\\tevent updateRoyalties(address indexed nft,address to,uint256 _feePer10K);\\n\\tevent updateContractMetadata(address indexed nft, string metadata);\\n\\tevent updateMarketFee(uint256 amount);\\n\\tevent msgEvent(address indexed from, address indexed to, uint256 id, string msg);\\n\\tevent CollectionRemoved(uint256 collectionId);\\n\\tevent CollectionListed(uint256 collectionId, address nft, address fundingToken, uint256 price, address[] whitelist, address seller);\\n\\tevent CollectionSold(uint256 collectionId, uint256 tokenId);\\n\\n\\tconstructor(address _WETH){\\n\\t\\tWETH = _WETH;\\n\\t\\trequire(msg.sender == 0xFC8367eF6bcfC10746e5B9B034314812db8D7213);\\n\\t\\temit updateMarketFee(100);\\n\\t}\\n\\n\\tfunction getListingLength() public view returns(uint256){\\n\\t\\treturn Listings.length;\\n\\t}\\n\\n\\tfunction getWhitelistLength(uint256 _listingID) public view returns(uint256){\\n\\t\\treturn Listings[_listingID].whitelist.length;\\n\\t}\\n\\n\\tfunction removeListing(uint256 _listingID) public {\\n\\t\\tif(msg.sender != owner()){\\n\\t\\t\\trequire(msg.sender == Listings[_listingID].seller);\\n\\t\\t}\\n\\t\\trequire(Listings[_listingID].saleDate == 0, \\\"Already sold.\\\");\\n\\t\\trequire(Listings[_listingID].endDate > block.timestamp, \\\"End date past.\\\");\\n\\t\\tListings[_listingID].saleDate = 420;\\n\\t\\tdelete Listings[_listingID];\\n\\t\\temit removeNft(_listingID);\\n\\t}\\n\\n\\tfunction listNFT(address _nft, uint256 _tokenId, address _fundingToken, uint256 _price, address[] memory _whitelist, uint256 _startDate, uint256 _endDate) public {\\n\\t\\trequire(IERC721(_nft).ownerOf(_tokenId) == msg.sender, \\\"Cant sell what you dont own.\\\");\\n\\t\\trequire(IERC721(_nft).getApproved(_tokenId) == address(this), \\\"Must Be Approved.\\\");\\n\\t\\tnftlisting memory newListing;\\n\\t\\tnewListing.nft = _nft;\\t\\n\\t\\tnewListing.seller = msg.sender;\\n\\t\\tnewListing.tokenId = _tokenId;\\n\\t\\tnewListing.fundingToken = _fundingToken;\\n\\t\\tnewListing.price = _price;\\n\\t\\tnewListing.whitelist = _whitelist;\\n\\t\\tnewListing.startDate = _startDate;\\n\\t\\tnewListing.endDate = _endDate;\\n\\n\\t\\tuint256 id = Listings.length;\\n\\t\\tListings.push(newListing);\\n\\t\\temit nftListed(msg.sender, _nft,_tokenId, _fundingToken, _price, _whitelist, _startDate, _endDate, id);\\n\\t}\\n\\n\\tfunction listNFTs(address _nft, uint256[] memory _tokenIds, address[] memory _fundingTokens, uint256[] memory _prices, address[] memory _whitelist, uint256 _startDate, uint256 _endDate) public {\\n\\t\\trequire(_tokenIds.length == _prices.length, \\\"invalid Array\\\");\\n\\t\\tfor(uint256 id; id > _tokenIds.length; id++){\\n\\t\\t\\tuint256 _tokenId = _tokenIds[id];\\n\\t\\t\\tuint256 _price = _prices[id];\\n\\t\\t\\taddress _fundingToken = _fundingTokens[id];\\n\\t\\t\\trequire(IERC721(_nft).ownerOf(_tokenId) == msg.sender, \\\"Cant sell what you dont own.\\\");\\n\\t\\t\\trequire(IERC721(_nft).getApproved(_tokenId) == address(this), \\\"Must Be Approved.\\\");\\n\\t\\t\\tnftlisting memory newListing;\\n\\t\\t\\tnewListing.nft = _nft;\\t\\n\\t\\t\\tnewListing.seller = msg.sender;\\n\\t\\t\\tnewListing.tokenId = _tokenId;\\n\\t\\t\\tnewListing.fundingToken = _fundingToken;\\n\\t\\t\\tnewListing.price = _price;\\n\\t\\t\\tnewListing.whitelist = _whitelist;\\n\\t\\t\\tnewListing.startDate = _startDate;\\n\\t\\t\\tnewListing.endDate = _endDate;\\n\\n\\t\\t\\tuint256 listingId = Listings.length;\\n\\t\\t\\tListings.push(newListing);\\n\\t\\t\\temit nftListed(msg.sender, _nft,_tokenId, _fundingToken, _price, _whitelist, _startDate, _endDate, listingId);\\n\\t\\t}\\n\\t\\t\\n\\t}\\n\\n\\tfunction listCollection(address _nft, address _fundingToken, uint256 _price, address[] memory _whitelist) public {\\n\\t\\trequire(Ownable(_nft).owner() == msg.sender, \\\"Must Be Owner\\\");\\n\\t\\trequire(IERC721(_nft).isApprovedForAll(msg.sender, address(this)), \\\"Not approved for all.\\\");\\n\\t\\tcollection memory newCollection;\\n\\t\\tnewCollection.nft = _nft;\\n\\t\\tnewCollection.fundingToken = _fundingToken;\\n\\t\\tnewCollection.price = _price;\\n\\t\\tnewCollection.whitelist = _whitelist;\\n\\t\\tnewCollection.seller = msg.sender;\\n\\t\\tuint256 colId = Collections.length;\\n\\t\\tCollections.push(newCollection);\\n\\n\\t\\temit CollectionListed(colId, _nft, _fundingToken, _price, _whitelist, msg.sender);\\n\\t}\\n\\n\\tfunction removeCollection(uint256 _collectionId) public {\\n\\t\\tif(msg.sender != owner()){\\n\\t\\t\\trequire(Ownable(Collections[_collectionId].nft).owner() == msg.sender, \\\"Must Be Owner\\\");\\n\\t\\t\\trequire(!IERC721(Collections[_collectionId].nft).isApprovedForAll(msg.sender, address(this)), \\\"Approved for all\\\");\\n\\t\\t}\\n\\n\\t\\tdelete Collections[_collectionId];\\n\\t\\temit CollectionRemoved(_collectionId);\\n\\t}\\n\\n\\tfunction buyCollection(uint256 _collectionId, uint256 _tokenId) public payable lock {\\n\\t\\tuint256 feeAmount = Collections[_collectionId].price * feePer10K / 10000;\\n\\t\\tuint256 feeAmountRoyalty = Collections[_collectionId].price * nftRoyaltyFee[Collections[_collectionId].nft] / 10000;\\n\\n\\t\\tif(Collections[_collectionId].whitelist.length > 0){\\n\\t\\t\\trequire(_checkWhitelist(Collections[_collectionId].whitelist, msg.sender), \\\"Private sale.\\\");\\n\\t\\t}\\n\\n\\t\\tIERC721(Collections[_collectionId].nft).safeTransferFrom(Collections[_collectionId].seller, msg.sender, _tokenId);\\n\\n\\t\\tbool success;\\n\\t\\tif(Collections[_collectionId].fundingToken == WETH){\\n\\t\\t\\trequire(Collections[_collectionId].price == msg.value, \\\"Missing ETH\\\");\\n\\n\\t\\t\\tif(feeAmountRoyalty>0){\\n\\t\\t\\t\\tsafeTransferETH(nftRoyaltyFeeTo[Collections[_collectionId].nft], feeAmountRoyalty);\\n\\t\\t\\t}\\n\\n\\t\\t\\tsafeTransferETH(owner(), feeAmount);\\n\\t\\t\\tsafeTransferETH(Collections[_collectionId].seller, Collections[_collectionId].price - feeAmount - feeAmountRoyalty);\\n\\n\\t\\t}else{\\n\\t\\t\\tif(feeAmountRoyalty>0){\\n\\t\\t\\t\\tsuccess = IERC20(Collections[_collectionId].fundingToken).transferFrom(msg.sender, nftRoyaltyFeeTo[Collections[_collectionId].nft], feeAmountRoyalty);\\n\\t\\t\\t\\trequire(success, \\\"Transfer From Failed.\\\");\\n\\t\\t\\t}\\n\\t\\t\\tsuccess = IERC20(Collections[_collectionId].fundingToken).transferFrom(msg.sender, Collections[_collectionId].seller, Collections[_collectionId].price - feeAmount - feeAmountRoyalty);\\n\\t\\t\\trequire(success, \\\"Transfer From Failed.\\\");\\n\\t\\t\\tsuccess = IERC20(Collections[_collectionId].fundingToken).transferFrom(msg.sender, owner(), feeAmount);\\n\\t\\t\\trequire(success, \\\"Transfer From Failed.\\\");\\n\\t\\t}\\n\\t\\temit CollectionSold(_collectionId, _tokenId);\\n\\t}\\n\\n\\tfunction buyNFT(uint256 _listingID) public payable lock {\\n\\t\\trequire(Listings[_listingID].startDate < block.timestamp, \\\"Start date not past.\\\");\\n\\t\\trequire(Listings[_listingID].endDate > block.timestamp, \\\"End date past.\\\");\\n\\t\\trequire(Listings[_listingID].saleDate == 0, \\\"Already sold.\\\");\\n\\t\\tuint256 feeAmount = Listings[_listingID].price * feePer10K / 10000;\\n\\t\\tuint256 feeAmountRoyalty = Listings[_listingID].price * nftRoyaltyFee[Listings[_listingID].nft] / 10000;\\n\\n\\t\\tif(Listings[_listingID].whitelist.length > 0){\\n\\t\\t\\trequire(_checkWhitelist(Listings[_listingID].whitelist, msg.sender), \\\"Private sale.\\\");\\n\\t\\t}\\n\\n\\t\\tIERC721(Listings[_listingID].nft).safeTransferFrom(Listings[_listingID].seller, msg.sender, Listings[_listingID].tokenId);\\n\\t\\tListings[_listingID].saleDate = block.timestamp;\\n\\n\\t\\tbool success;\\n\\t\\tif(Listings[_listingID].fundingToken == WETH){\\n\\t\\t\\trequire(Listings[_listingID].price == msg.value, \\\"Missing ETH\\\");\\n\\n\\t\\t\\tif(feeAmountRoyalty>0){\\n\\t\\t\\t\\tsafeTransferETH(nftRoyaltyFeeTo[Listings[_listingID].nft], feeAmountRoyalty);\\n\\t\\t\\t}\\n\\n\\t\\t\\tsafeTransferETH(owner(), feeAmount);\\n\\t\\t\\tsafeTransferETH(Listings[_listingID].seller, Listings[_listingID].price - feeAmount - feeAmountRoyalty);\\n\\n\\t\\t}else{\\n\\t\\t\\tif(feeAmountRoyalty>0){\\n\\t\\t\\t\\tsuccess = IERC20(Listings[_listingID].fundingToken).transferFrom(msg.sender, nftRoyaltyFeeTo[Listings[_listingID].nft], feeAmountRoyalty);\\n\\t\\t\\t\\trequire(success, \\\"Transfer From Failed.\\\");\\n\\t\\t\\t}\\n\\t\\t\\tsuccess = IERC20(Listings[_listingID].fundingToken).transferFrom(msg.sender, Listings[_listingID].seller, Listings[_listingID].price - feeAmount - feeAmountRoyalty);\\n\\t\\t\\trequire(success, \\\"Transfer From Failed.\\\");\\n\\t\\t\\tsuccess = IERC20(Listings[_listingID].fundingToken).transferFrom(msg.sender, owner(), feeAmount);\\n\\t\\t\\trequire(success, \\\"Transfer From Failed.\\\");\\n\\t\\t}\\n\\t\\temit nftSold(_listingID);\\n\\t}\\n\\n\\n\\tfunction bidListing(uint256 _listingID,address _fundingToken, uint256 _price) public {\\n\\t\\tbid memory newBid;\\n\\t\\tnewBid.listingID = _listingID;\\n\\t\\tnewBid.fundingToken = _fundingToken;\\n\\t\\tnewBid.price = _price;\\n\\t\\tnewBid.user = msg.sender;\\n\\t\\tuint256 _bidID = Bids.length;\\n\\t\\tBids.push(newBid);\\n\\t\\temit Bid(_bidID, _listingID, _fundingToken, _price, msg.sender);\\n\\t}\\n\\n\\tfunction makeOffer(address _nft, uint256 _tokenId, address _fundingToken, uint256 _price) public {\\n\\t\\taddress owner = IERC721(_nft).ownerOf(_tokenId);\\n\\t\\toffer memory newOffer;\\n\\t\\tnewOffer.nft = _nft;\\n\\t\\tnewOffer.tokenId = _tokenId;\\n\\t\\tnewOffer.fundingToken = _fundingToken;\\n\\t\\tnewOffer.price = _price;\\n\\t\\tnewOffer.user = msg.sender;\\n\\t\\tuint256 offerId = Offers.length;\\n\\t\\tOffers.push(newOffer);\\n\\t\\temit Offer(offerId, _nft, _tokenId, _fundingToken, _price, owner);\\n\\t}\\n\\n\\tfunction acceptOffer(uint256 _offerId) public {\\n\\t\\toffer storage currentOffer = Offers[_offerId];\\n\\t\\trequire(IERC721(currentOffer.nft).ownerOf(currentOffer.tokenId) == msg.sender, \\\"Cant sell what you dont own.\\\");\\n\\t\\trequire(IERC721(currentOffer.nft).getApproved(currentOffer.tokenId) == address(this), \\\"Must Be Approved.\\\");\\n\\n\\t\\taddress[] memory whitelist = new address[](1);\\n\\t\\twhitelist[0] = currentOffer.user;\\n\\t\\tnftlisting memory newListing;\\n\\n\\t\\tnewListing.nft = currentOffer.nft;\\t\\n\\t\\tnewListing.seller = msg.sender;\\n\\t\\tnewListing.tokenId = currentOffer.tokenId;\\n\\t\\tnewListing.fundingToken = currentOffer.fundingToken;\\n\\t\\tnewListing.price = currentOffer.price;\\n\\t\\tnewListing.whitelist = whitelist;\\n\\t\\tnewListing.startDate = block.timestamp;\\n\\t\\tnewListing.endDate = block.timestamp + (60*60*24*7*4);\\n\\n\\t\\tuint256 id = Listings.length;\\n\\t\\tListings.push(newListing);\\n\\t\\temit nftListed(msg.sender, newListing.nft,newListing.tokenId, newListing.fundingToken, newListing.price, newListing.whitelist, newListing.startDate, newListing.endDate, id);\\n\\t\\temit AcceptOffer(_offerId);\\n\\t}\\n\\n\\tfunction setRoyalties(address _nft,address _to, uint256 _feePer10K) public {\\n\\t\\tif(msg.sender != owner()){\\n\\t\\t\\trequire(Ownable(_nft).owner() == msg.sender, \\\"Not owner\\\");\\n\\t\\t}\\n\\t\\trequire(_feePer10K <= 2500, \\\"Unsupported fee tier.\\\");\\n\\n\\t\\tnftRoyaltyFee[_nft] = _feePer10K;\\n\\t\\tnftRoyaltyFeeTo[_nft] = _to;\\n\\n\\t\\temit updateRoyalties(_nft, _to, _feePer10K);\\n\\t}\\n\\n\\tfunction updateContractMetadataUrl(address _nft,string memory _metadataUrl) public {\\n\\t\\tif(msg.sender != owner()){\\n\\t\\t\\trequire(Ownable(_nft).owner() == msg.sender, \\\"Not owner\\\");\\n\\t\\t}\\n\\t\\tnftContractUrl[_nft] = _metadataUrl;\\n\\t\\temit updateContractMetadata(_nft, _metadataUrl);\\n\\t}\\n\\n\\tfunction acceptBid(uint256 _bidID) public {\\n\\t\\tbid storage currentBid = Bids[_bidID];\\n\\t\\tuint256 _listingID = currentBid.listingID;\\n\\n\\t\\trequire(Listings[_listingID].seller == msg.sender, \\\"Not lister\\\");\\n\\n\\t\\tListings[_listingID].whitelist = [currentBid.user];\\n\\t\\tListings[_listingID].fundingToken = currentBid.fundingToken;\\n\\t\\tListings[_listingID].price = currentBid.price;\\n\\t\\temit AcceptBid(_bidID);\\n\\t}\\n\\n\\tfunction _checkWhitelist(address[] memory _whitelist, address _user) internal pure returns(bool){\\n\\t\\tfor(uint256 i;i<_whitelist.length;i++){\\n\\t\\t\\tif(_whitelist[i] == _user){\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\tfunction message(address _to, uint256 _id, string memory _msg) public {\\n\\t\\temit msgEvent(msg.sender,_to,_id,_msg);\\n\\t}\\n\\n\\tfunction collectFees(address _token) public onlyOwner{\\n\\t\\tuint256 bal = IERC20(_token).balanceOf(address(this));\\n\\t\\tbool succ = IERC20(_token).transfer(owner(), bal);\\n\\t\\trequire(succ, \\\"Transfer Failed.\\\");\\n\\t}\\n\\n\\tfunction setFee(uint256 _feePer10K) public onlyOwner {\\n\\t\\trequire(_feePer10K <= 500, \\\"Unsupported fee tier.\\\");\\n\\t\\tfeePer10K = _feePer10K;\\n\\t\\temit updateMarketFee(_feePer10K);\\n\\t}\\n\\n\\tfunction safeTransferETH(address to, uint _value) internal {\\n        (bool success,) = to.call{value:_value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"AcceptBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"AcceptOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fundingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fundingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"CollectionListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"CollectionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"CollectionSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fundingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Offer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\"}],\"name\":\"msgEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fundingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingID\",\"type\":\"uint256\"}],\"name\":\"nftListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingID\",\"type\":\"uint256\"}],\"name\":\"nftSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingID\",\"type\":\"uint256\"}],\"name\":\"removeNft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"updateContractMetadata\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateMarketFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feePer10K\",\"type\":\"uint256\"}],\"name\":\"updateRoyalties\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Bids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"listingID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fundingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Collections\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Listings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fundingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Offers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fundingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidID\",\"type\":\"uint256\"}],\"name\":\"acceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"acceptOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fundingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"bidListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyCollection\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingID\",\"type\":\"uint256\"}],\"name\":\"buyNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePer10K\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getListingLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingID\",\"type\":\"uint256\"}],\"name\":\"getWhitelistLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_whitelist\",\"type\":\"address[]\"}],\"name\":\"listCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fundingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_whitelist\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"listNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_fundingTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_whitelist\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"listNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fundingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"makeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_msg\",\"type\":\"string\"}],\"name\":\"message\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftContractUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftRoyaltyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftRoyaltyFeeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"}],\"name\":\"removeCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingID\",\"type\":\"uint256\"}],\"name\":\"removeListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePer10K\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feePer10K\",\"type\":\"uint256\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metadataUrl\",\"type\":\"string\"}],\"name\":\"updateContractMetadataUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NftMarketv2", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9595f396e38792ab542eae39b1178da4f2d35fe261d86f465c22e9a3c967898d"}