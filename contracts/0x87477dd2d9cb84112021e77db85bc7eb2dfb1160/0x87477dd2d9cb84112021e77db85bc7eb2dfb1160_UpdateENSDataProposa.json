{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/UpdateENSDataProposal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport { IGovernance } from \\\"@interfaces/IGovernance.sol\\\";\\nimport { ITorn } from \\\"@interfaces/ITornToken.sol\\\";\\nimport { IENSRegistry } from \\\"@interfaces/IENSRegistry.sol\\\";\\nimport { IENSResolver } from \\\"@interfaces/IENSResolver.sol\\\";\\n\\ncontract UpdateENSDataProposal {\\n    address constant usdtTokenAddress = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address constant tornTokenAddress = 0x77777FeDdddFfC19Ff86DB637967013e6C6A116C;\\n    address constant governanceAddress = 0x5efda50f22d34F262c29268506C5Fa42cB56A1Ce;\\n    address payable constant developerAddress = payable(0x9Ff3C1Bea9ffB56a78824FE29f457F066257DD58);\\n\\n    address constant ensResolverAddress = 0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41;\\n    address constant ensRegistryAddress = 0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e;\\n\\n    IENSRegistry internal constant ensRegistry = IENSRegistry(ensRegistryAddress);\\n    IENSResolver internal constant ensResolver = IENSResolver(ensResolverAddress);\\n\\n    bytes32 internal constant rootTornadoDomainNode = 0xe6ae31d630cc7a8279c0f1c7cbe6e7064814c47d1785fa2703d9ae511ee2be0c;\\n    bytes32 internal constant sourcesDomainNode = 0x4e5775b58e8aeaa32fc2b429c9485da9de5a1c6fead70b8704ce0f970a6f127d;\\n    bytes32 internal constant docsDomainNode = 0xd7b8aac14a9b2507ab99b5fde3060197fddb9735afa9bf38b1f7e34923cb935e;\\n    bytes32 internal constant relayersUiSiteDomainNode = 0x5d1d6b09c964d7e0f4511d6dc896d8cc8899508fb73a202ecfa80a7f50ae3d8a;\\n    bytes32 internal constant relayersUiSiteOldDomainNode = 0x4e37047f2c961db41dfb7d38cf79ca745faf134a8392cfb834d3a93330b9108d;\\n    bytes32 internal constant downloadScriptSourceDomainNode = 0x4a6bb62eaa2524f194a206df4c15dcc8e9a93036119d40516dab5b7c021fa43b;\\n    bytes32 internal constant ipfsHostHelpScriptSourceDomainNode = 0xb0406167f975c3168de8d385bb5a6c6bd572727ad505e37734e0a6ec54201a75;\\n    bytes32 internal constant docsSourceDomainNode = 0xdd158a78d03e8c953fe2b54edcf9f9919efaec1d782a6603b3f8f5871107672c;\\n    bytes32 internal constant relayersUISourceDomainNode = 0x0315c3730f5894b97933d148a24f1b29f823c6a64caadc4a55b5600b510234b2;\\n    bytes32 internal constant relayerSoftwareSourceNode = 0xedfb4f99b2a0b005fa627cfd899fabc4ca52f23df310c32597fa23c593220877;\\n\\n    bytes32 internal constant relayersUiSiteDomainLabelhash = 0xea7c97223b0629f1c3bea11a57dd6179a12e9cc4bbdf8f69fb999c4051c682cf;\\n    bytes32 internal constant ipfsHostHelpScriptSourceDomainLabelhash = 0x0825203969ee8c01895e26a522db220e9541acc7b27e3cb4a1a9317cb0c30bfb;\\n    bytes32 internal constant relayerSoftwareSourceLabelhash = 0x802cf867c2da464d4ff0ebc4dfcccdfbd65d75a8bc1c273fb02e80bf3446b516;\\n\\n    function executeProposal() public {\\n        // Register missing subnodes, set Governance as an owner\\n        ensRegistry.setSubnodeRecord(rootTornadoDomainNode, relayersUiSiteDomainLabelhash, governanceAddress, ensResolverAddress, 0);\\n        ensRegistry.setSubnodeRecord(sourcesDomainNode, relayerSoftwareSourceLabelhash, governanceAddress, ensResolverAddress, 0);\\n        ensRegistry.setSubnodeRecord(sourcesDomainNode, ipfsHostHelpScriptSourceDomainLabelhash, governanceAddress, ensResolverAddress, 0);\\n\\n        // From data/ensDomainsIPFSContenthashes.txt, calculated via scripts/calculateIPFSContenthashes.ts\\n        bytes memory relayersUiSourceContenthash = hex\\\"e3010170122072dd7fe08bc98404c3a2e402dac817562b2533aa549c475e8e85b9a266bc507c\\\";\\n        bytes memory relayersUiSiteContenthash = hex\\\"e3010170122052a5331f2ff57ce75b2fb48870e2f1f0752d0da2a0d612104028ce5930976adb\\\";\\n        bytes memory downloadScriptSourceContenthash = hex\\\"e301017012208f759bcffb194cb59161916ee7f1f1d225016f03514b5430d3fb4c5fb254a3bb\\\";\\n        bytes memory ipfsHostHelpScriptSourceContenthash = hex\\\"e301017012200c8e358709e32756da156639a8aedbf6950090d4e73c2dc6e1c012fe5b78e4e9\\\";\\n        bytes memory downloadInstructionsHtmlContenthash = hex\\\"e301017012201a9748cd5f0f64c682d309f6af6354944e0d2e572e81c301ea8ce76c11dee1f5\\\";\\n        bytes memory tornadoRelayerSoftwareSourceContenthash =\\n            hex\\\"e301017012205d51d0e5b49830f59f91f6a36e44c40d69474078c5e5b41e0df4f23fddd89b13\\\";\\n        bytes memory docsSourceContenthash = hex\\\"e30101701220a02b6c5846715cae70d0f7a7df09cbc929b5af97d38dd130ffd44aa0adf21daa\\\";\\n        bytes memory docsSiteContenthash = hex\\\"e30101701220615111f92c8087a46a397f77046d8c0eed57b27fbb9221e4d270307f0fb317a4\\\";\\n\\n        // Set IPFS Cids in ENS subdomain contenthashes\\n        ensResolver.setContenthash(sourcesDomainNode, downloadInstructionsHtmlContenthash);\\n        ensResolver.setContenthash(downloadScriptSourceDomainNode, downloadScriptSourceContenthash);\\n        ensResolver.setContenthash(relayerSoftwareSourceNode, tornadoRelayerSoftwareSourceContenthash);\\n        ensResolver.setContenthash(docsSourceDomainNode, docsSourceContenthash);\\n        ensResolver.setContenthash(relayersUISourceDomainNode, relayersUiSourceContenthash);\\n        ensResolver.setContenthash(relayersUiSiteDomainNode, relayersUiSiteContenthash);\\n        ensResolver.setContenthash(relayersUiSiteOldDomainNode, relayersUiSiteContenthash);\\n        ensResolver.setContenthash(ipfsHostHelpScriptSourceDomainNode, ipfsHostHelpScriptSourceContenthash);\\n        ensResolver.setContenthash(docsDomainNode, docsSiteContenthash);\\n\\n        ITorn(tornTokenAddress).rescueTokens(usdtTokenAddress, developerAddress, 0);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nenum ProposalState {\\n    Pending,\\n    Active,\\n    Defeated,\\n    Timelocked,\\n    AwaitingExecution,\\n    Executed,\\n    Expired\\n}\\n\\nstruct Proposal {\\n    // Creator of the proposal\\n    address proposer;\\n    // target addresses for the call to be made\\n    address target;\\n    // The block at which voting begins\\n    uint256 startTime;\\n    // The block at which voting ends: votes must be cast prior to this block\\n    uint256 endTime;\\n    // Current number of votes in favor of this proposal\\n    uint256 forVotes;\\n    // Current number of votes in opposition to this proposal\\n    uint256 againstVotes;\\n    // Flag marking whether the proposal has been executed\\n    bool executed;\\n    // Flag marking whether the proposal voting time has been extended\\n    // Voting time can be extended once, if the proposal outcome has changed during CLOSING_PERIOD\\n    bool extended;\\n}\\n\\ninterface IGovernance {\\n    function initialized() external view returns (bool);\\n    function initializing() external view returns (bool);\\n    function EXECUTION_DELAY() external view returns (uint256);\\n    function EXECUTION_EXPIRATION() external view returns (uint256);\\n    function QUORUM_VOTES() external view returns (uint256);\\n    function PROPOSAL_THRESHOLD() external view returns (uint256);\\n    function VOTING_DELAY() external view returns (uint256);\\n    function VOTING_PERIOD() external view returns (uint256);\\n    function CLOSING_PERIOD() external view returns (uint256);\\n    function VOTE_EXTEND_TIME() external view returns (uint256);\\n    function torn() external view returns (address);\\n    function proposals(uint256 index) external view returns (Proposal memory);\\n    function proposalCount() external view returns (uint256);\\n    function lockedBalance(address account) external view returns (uint256);\\n    function propose(address target, string memory description) external returns (uint256);\\n    function castVote(uint256 proposalId, bool support) external;\\n    function lock(address owner, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function unlock(uint256 amount) external;\\n    function lockWithApproval(uint256 amount) external;\\n    function execute(uint256 proposalId) external payable;\\n    function state(uint256 proposalId) external view returns (ProposalState);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ITornToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface ITorn {\\r\\n    function rescueTokens(address _token, address payable _to, uint256 _balance) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/interfaces/IENSRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\ninterface IENSRegistry {\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external returns (bytes32);\\n\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external;\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IENSResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\ninterface IENSResolver {\\n    function setContenthash(bytes32 node, bytes memory hash) external;\\n\\n    function setAddr(bytes32 node, address a) external;\\n\\n    function addr(bytes32 node) external view returns (address);\\n\\n    function contenthash(bytes32 node) external returns (bytes memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@ens/contracts/=node_modules/@ensdomains/ens-contracts/contracts/\",\r\n      \"@ensdomains/=node_modules/@ensdomains/\",\r\n      \"@forge-std/=lib/forge-std/src/\",\r\n      \"@gnosis/contracts/=node_modules/@gnosis.pm/safe-contracts/contracts/\",\r\n      \"@gnosis/ido-contracts/=node_modules/@gnosis.pm/ido-contracts/contracts/\",\r\n      \"@interfaces/=src/interfaces/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\r\n      \"@openzeppelin/upgrades/=node_modules/@openzeppelin/upgrades-core/\",\r\n      \"@proprietary/=src/proprietary/\",\r\n      \"@root/=src/\",\r\n      \"@torn-token/=node_modules/torn-token/\",\r\n      \"base58-solidity/=node_modules/base58-solidity/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat/=node_modules/hardhat/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UpdateENSDataProposal", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}