{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/libraries/AuthManager.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: SSPL-1.-0\\n\\n/**\\n * @custom:org.protocol='mevETH LST Protocol'\\n * @custom:org.security='mailto:security@manifoldfinance.com'\\n * @custom:org.vcs-commit=$GIT_COMMIT_SHA\\n * @custom:org.vendor='CommodityStream, Inc'\\n * @custom:org.schema-version=\\\"1.0\\\"\\n * @custom.org.encryption=\\\"manifoldfinance.com/.well-known/pgp-key.asc\\\"\\n * @custom:org.preferred-languages=\\\"en\\\"\\n */\\n\\npragma solidity ^0.8.19;\\n\\nimport { IAuth } from \\\"src/interfaces/IAuth.sol\\\";\\n\\n/// @notice Periphery contract to unify Auth updates across MevEth, MevEthShareVault and WagyuStaker\\n/// @dev deployment address should be added as admin in initial setup\\n/// @dev contract addresses are upgradeable. To upgrade auth a redeploy is necessary\\ncontract AuthManager {\\n    address public immutable auth;\\n    address public mevEth;\\n    address public mevEthShareVault;\\n    address public wagyuStaker;\\n\\n    error Unauthorized();\\n\\n    enum Operation {\\n        ADDADMIN,\\n        DELETEADMIN,\\n        ADDOPERATOR,\\n        DELETEOPERATOR\\n    }\\n\\n    /// @notice emitted when MevEthShareVault is a multisig to log missed auth updates\\n    /// @dev missed updates will need to be manually added when upgrading from a multisig\\n    event MevEthShareVaultAuthUpdateMissed(address changeAddress, Operation operation);\\n\\n    constructor(address initialAdmin, address initialMevEth, address initialShareVault, address initialStaker) {\\n        // auth set one time for safety\\n        auth = initialAdmin;\\n        // upgradeable contract addresses\\n        mevEth = initialMevEth;\\n        mevEthShareVault = initialShareVault;\\n        wagyuStaker = initialStaker;\\n    }\\n\\n    modifier onlyAuth() {\\n        if (msg.sender != auth) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Updates the mevEth address\\n     * @dev This function is only callable by the authorized address\\n     * @param newMevEth The new mevEth address\\n     */\\n    function updateMevEth(address newMevEth) external onlyAuth {\\n        mevEth = newMevEth;\\n    }\\n\\n    function updateMevEthShareVault(address newMevEthShareVault) external onlyAuth {\\n        mevEthShareVault = newMevEthShareVault;\\n    }\\n\\n    function updateWagyuStaker(address newWagyuStaker) external onlyAuth {\\n        wagyuStaker = newWagyuStaker;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                           Maintenance Functions\\n    //////////////////////////////////////////////////////////////*/\\n    /**\\n     * @notice Adds a new admin to the MevEth, WagyuStaker, and MevEthShareVault contracts.\\n     * @dev If the MevEthShareVault is a multisig, the `MevEthShareVaultAuthUpdateMissed` event is emitted.\\n     */\\n    function addAdmin(address newAdmin) external onlyAuth {\\n        IAuth(mevEth).addAdmin(newAdmin);\\n        IAuth(wagyuStaker).addAdmin(newAdmin);\\n        try IAuth(mevEthShareVault).addAdmin(newAdmin) { }\\n        catch {\\n            // handle multisig case\\n            emit MevEthShareVaultAuthUpdateMissed(newAdmin, Operation.ADDADMIN);\\n        }\\n    }\\n\\n    function deleteAdmin(address oldAdmin) external onlyAuth {\\n        IAuth(mevEth).deleteAdmin(oldAdmin);\\n        IAuth(wagyuStaker).deleteAdmin(oldAdmin);\\n        try IAuth(mevEthShareVault).deleteAdmin(oldAdmin) { }\\n        catch {\\n            // handle multisig case\\n            emit MevEthShareVaultAuthUpdateMissed(oldAdmin, Operation.DELETEADMIN);\\n        }\\n    }\\n\\n    function addOperator(address newOperator) external onlyAuth {\\n        IAuth(mevEth).addOperator(newOperator);\\n        IAuth(wagyuStaker).addOperator(newOperator);\\n        try IAuth(mevEthShareVault).addOperator(newOperator) { }\\n        catch {\\n            // handle multisig case\\n            emit MevEthShareVaultAuthUpdateMissed(newOperator, Operation.ADDOPERATOR);\\n        }\\n    }\\n\\n    function deleteOperator(address oldOperator) external onlyAuth {\\n        IAuth(mevEth).deleteOperator(oldOperator);\\n        IAuth(wagyuStaker).deleteOperator(oldOperator);\\n        try IAuth(mevEthShareVault).deleteOperator(oldOperator) { }\\n        catch {\\n            // handle multisig case\\n            emit MevEthShareVaultAuthUpdateMissed(oldOperator, Operation.DELETEOPERATOR);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IAuth.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: SSPL-1.-0\\n\\n/**\\n * @custom:org.protocol='mevETH LST Protocol'\\n * @custom:org.security='mailto:security@manifoldfinance.com'\\n * @custom:org.vcs-commit=$GIT_COMMIT_SHA\\n * @custom:org.vendor='CommodityStream, Inc'\\n * @custom:org.schema-version=\\\"1.0\\\"\\n * @custom.org.encryption=\\\"manifoldfinance.com/.well-known/pgp-key.asc\\\"\\n * @custom:org.preferred-languages=\\\"en\\\"\\n */\\n\\npragma solidity ^0.8.19;\\n\\ninterface IAuth {\\n    event AdminAdded(address indexed newAdmin);\\n    event AdminDeleted(address indexed oldAdmin);\\n    event OperatorAdded(address indexed newOperator);\\n    event OperatorDeleted(address indexed oldOperator);\\n\\n    /**\\n     * @notice Adds an admin to the contract.\\n     * @dev Only existing admins can add new admins.\\n     */\\n    function addAdmin(address newAdmin) external;\\n    /**\\n     * @notice This function adds a new operator to the contract.\\n     * @dev This function adds a new operator to the contract. It is only callable by the contract owner. The new operator must be a valid Ethereum address.\\n     */\\n    function addOperator(address newOperator) external;\\n    /**\\n     * @notice This function is used to check if an address is an admin.\\n     * @dev This function is used to check if an address is an admin. It takes an address as an argument and returns a boolean value.\\n     */\\n    function admins(address) external view returns (bool);\\n    /**\\n     * @notice This function is used to delete an admin from the list of admins.\\n     * @dev This function requires the address of the admin to be deleted. It will delete the admin from the list of admins.\\n     */\\n    function deleteAdmin(address oldAdmin) external;\\n    /**\\n     * @notice This function is used to delete an operator from the contract.\\n     * @dev This function is called by the owner of the contract to delete an operator from the contract. The address of the operator to be deleted is passed as\\n     * an argument.\\n     */\\n    function deleteOperator(address oldOperator) external;\\n    /**\\n     * @notice This function checks if the given address is an operator.\\n     * @dev This function is used to check if the given address is an operator. It returns a boolean value indicating whether the address is an operator or not.\\n     */\\n    function operators(address) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"safe-contracts/=lib/safe-tools/lib/safe-contracts/contracts/\",\r\n      \"safe-tools/=lib/safe-tools/src/\",\r\n      \"properties/=lib/properties/contracts/\",\r\n      \"solady/utils/=lib/solady/src/utils/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 512,\r\n      \"details\": {\r\n        \"constantOptimizer\": true,\r\n        \"yul\": true,\r\n        \"yulDetails\": {\r\n          \"stackAllocation\": true\r\n        }\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\",\r\n      \"appendCBOR\": false\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialMevEth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialShareVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialStaker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"changeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum AuthManager.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"MevEthShareVaultAuthUpdateMissed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"}],\"name\":\"deleteAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldOperator\",\"type\":\"address\"}],\"name\":\"deleteOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mevEth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mevEthShareVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMevEth\",\"type\":\"address\"}],\"name\":\"updateMevEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMevEthShareVault\",\"type\":\"address\"}],\"name\":\"updateMevEthShareVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWagyuStaker\",\"type\":\"address\"}],\"name\":\"updateWagyuStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wagyuStaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AuthManager", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "512", "ConstructorArguments": "00000000000000000000000018f3e9ab3dcd396c2d3e6e598a9f77621ea50fc300000000000000000000000024ae2da0f361aa4be46b48eb19c91e02c5e4f27e000000000000000000000000617c8de5bde54ffbb8d92716cc947858ca38f582000000000000000000000000c5920c99d09e5444c079c01f06763b5d6ab09cbb", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}