{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/dummyImplementations/InstaliteVaultV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\ncontract IUserModule {\\n    /**\\n     * @dev Returns total underlying assets of the vault.\\n     */\\n    function totalAssets() public view returns (uint256) {}\\n\\n    /**\\n     * @dev See {IERC4626-deposit}.\\n     * @dev User function to deposit.\\n     * @param assets_ amount to supply.\\n     * @param receiver_ address to send iTokens to.\\n     * @return shares_ amount of iTokens sent to the `receiver_` address passed\\n     */\\n    function deposit(uint256 assets_, address receiver_)\\n        public\\n        returns (uint256 shares_)\\n    {}\\n\\n    /**\\n     * @dev See {IERC4626-mint}.\\n     * @dev User function to mint.\\n     * @param shares_ amount to iToken shares to mint.\\n     * @param receiver_ address to send iTokens to.\\n     * @return assets_ amount of underlying assets sent to the `receiver_` address passed\\n     */\\n    function mint(uint256 shares_, address receiver_)\\n        public\\n        returns (uint256 assets_)\\n    {}\\n\\n    /**\\n     * @dev See {IERC4626-withdraw}.\\n     * @dev User function to withdraw.\\n     * @param assets_ amount to withdraw.\\n     * @param receiver_ address to send withdrawn amount to.\\n     * @param owner_ address of owner whose shares will be burned.\\n     * @return shares_ amount of iTokens burned of owner.\\n     */\\n    function withdraw(\\n        uint256 assets_,\\n        address receiver_,\\n        address owner_\\n    ) public returns (uint256 shares_) {}\\n\\n    /**\\n     * @dev See {IERC4626-redeem}.\\n     * @dev User function to redeem.\\n     * @param shares_ amount of shares to redeem.\\n     * @param receiver_ address to send underlying withdrawn amount to.\\n     * @param owner_ address of owner whose shares will be burned.\\n     * @return assetsAfterFee_ underlying tokens sent to the receiver after withdraw fee.\\n     */\\n    function redeem(\\n        uint256 shares_,\\n        address receiver_,\\n        address owner_\\n    ) public returns (uint256 assetsAfterFee_) {}\\n\\n    /**\\n     * @notice Importing iETH v1 to Aave V3.\\n     * @dev User function to import.\\n     * @param deleverageWETHAmount_ The amount of weth debt to payback on Eth Vault V1.\\n     * @param withdrawStETHAmount_ The amount of net stETH to withdraw from Eth Vault V1.\\n     * @param receiver_ The address who will recieve the shares.\\n     * @return shares_ amount of new iTokens minted.\\n     */\\n    function importPosition(\\n        uint256 route_,\\n        uint256 deleverageWETHAmount_,\\n        uint256 withdrawStETHAmount_,\\n        address receiver_\\n    ) public returns (uint256 shares_) {}\\n\\n    /// Emitted whenever a user withdraws assets and a fee is collected.\\n    event LogWithdrawFeeCollected(address indexed payer, uint256 indexed fee);\\n\\n    /// Emitted whenever a user imports his old Eth vault position.\\n    event LogImportV1ETHVault(\\n        address indexed receiver,\\n        uint256 indexed iTokenAmount,\\n        uint256 indexed route,\\n        uint256 deleverageWethAmount,\\n        uint256 withdrawStETHAmount,\\n        uint256 userNetDeposit\\n    );\\n\\n    event Deposit(\\n        address indexed sender,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n}\\n\\ncontract IRefinanceModule {\\n    /**\\n     * @notice Core function to perform refinance.\\n     * @param fromProtocolId_ Id of the protocol to refinance from.\\n     * @param toProtocolId_ Id of the protocol to refinance to.\\n     * @param route_ Route for flashloan. Flashloan will always be taken in `WSTETH`.\\n     * @param wstETHflashAmount_ Amount of flashloan.\\n     * @param wETHBorrowAmount_ Amount of wETH to be borrowed.\\n     * @param withdrawAmount_ Amount to be withdrawn. Will always be in stETH.\\n     * @return ratioFromProtocol_ Ratio of `from` protocol\\n     * @return ratioToProtocol_ Ratio of `to` protocol\\n     */\\n    function refinance(\\n        uint8 fromProtocolId_,\\n        uint8 toProtocolId_,\\n        uint256 route_,\\n        uint256 wstETHflashAmount_,\\n        uint256 wETHBorrowAmount_,\\n        uint256 withdrawAmount_\\n    ) external returns (uint256 ratioFromProtocol_, uint256 ratioToProtocol_) {}\\n\\n    /// @notice Emitted whenever rebalancer refinances between 2 protocols.\\n    event LogRefinance(\\n        uint8 indexed protocolFrom,\\n        uint8 indexed protocolTo,\\n        uint256 indexed route,\\n        uint256 wstETHflashAmount,\\n        uint256 wETHBorrowAmount,\\n        uint256 withdrawAmount\\n    );\\n}\\n\\ncontract IRebalancerModule {\\n    /**\\n     * @notice Deposits assets from the Vault to Protocol.\\n     * @dev Moves asset from vault\\n     * @param protocolId_ Protocol Id in which stETH will be deposited.\\n     * @param depositAmount_ stETH amount to deposit.\\n     */\\n    function vaultToProtocolDeposit(uint8 protocolId_, uint256 depositAmount_)\\n        external\\n    {}\\n\\n    /**\\n     * @notice Deposits assets from the Protocol to vault.\\n     * @param protocolId_ Protocol id from which amount will be withdrawn.\\n     * @param withdrawAmount_ stEth amount to withdraw based on the protocol.\\n     */\\n    function fillVaultAvailability(uint8 protocolId_, uint256 withdrawAmount_)\\n        external\\n    {}\\n\\n    /**\\n     * @notice Open function to sweep ideal `weth` to `stETH` in Dsa.\\n     */\\n    function sweepWethToSteth() public {}\\n\\n    /**\\n     * @notice Open function to sweep ideal `eth` to `stETH` in Dsa.\\n     */\\n    function sweepEthToSteth() public {}\\n\\n    /**\\n     * @dev Open function to collect revenue to the `treasur` address set.\\n     * @param amount_ Amount of `STETH` revenue to collect.\\n     */\\n    function collectRevenue(uint256 amount_) external {}\\n\\n    /**\\n     * @notice Sets the exchange price and revenue based on current net assets(excluding reveune)\\n     * @dev Open function to update exchange price.\\n     * @return newExchangePrice_ new exchange price\\n     * @return newRevenue_ if collected.\\n     */\\n    function updateExchangePrice()\\n        public\\n        returns (uint256 newExchangePrice_, uint256 newRevenue_)\\n    {}\\n\\n    /// Emitted when stETH is deposited from vault to protocols.\\n    event LogVaultToProtocolDeposit(\\n        uint8 indexed protocol,\\n        uint256 depositAmount\\n    );\\n\\n    /// Emitted whenever stETH is deposited from protocol\\n    /// to vault to craete withdrawal vaialability.\\n    event LogFillVaultAvailability(\\n        uint8 indexed protocol,\\n        uint256 withdrawAmount\\n    );\\n\\n    /// Emitted whenever ideal Weth DSA balance is swapped to stETH.\\n    event LogWethSweep(uint256 wethAmount);\\n\\n    /// Emitted whenever ideal Eth DSA balance is swapped to stETH.\\n    event LogEthSweep(uint256 ethAmount);\\n\\n    /// Emitted whenever rebalancer refinances between 2 protocols.\\n    event LogCollectRevenue(uint256 amount, address indexed to);\\n\\n    /// Emitted whenever exchange price is updated.\\n    event LogUpdateExchangePrice(\\n        uint256 indexed exchangePriceBefore,\\n        uint256 indexed exchangePriceAfter\\n    );\\n}\\n\\ncontract ILeverageModule {\\n    /**\\n     * @notice Core function to perform leverage.\\n     * @param protocolId_ Id of the protocol to leverage.\\n     * @param route_ Route for flashloan\\n     * @param wstETHflashAmount_ Amount of flashloan.\\n     * @param wETHBorrowAmount_ Amount of weth to be borrowed.\\n     * @param vaults_ Addresses of old vaults to deleverage.\\n     * @param vaultAmounts_ Amount of `WETH` that we will payback in old vaults.\\n     * @param swapMode_ Mode of swap.(0 = no swap, 1 = 1Inch, 2 = direct Lido route)\\n     * @param unitAmount_ `WSTETH` per `WETH` conversion ratio with slippage.\\n     * @param oneInchData_ Bytes calldata required for `WETH` to `WSTETH` swapping.\\n     */\\n    function leverage(\\n        uint8 protocolId_,\\n        uint256 route_,\\n        uint256 wstETHflashAmount_,\\n        uint256 wETHBorrowAmount_,\\n        address[] memory vaults_,\\n        uint256[] memory vaultAmounts_,\\n        uint256 swapMode_,\\n        uint256 unitAmount_,\\n        bytes memory oneInchData_\\n    ) external {}\\n\\n    /// Emitted whenever a protocol is leveraged.\\n    event LogLeverage(\\n        uint8 indexed protocol,\\n        uint256 indexed route,\\n        uint256 wstETHflashAmt,\\n        uint256 ethAmountBorrow,\\n        address[] vaults,\\n        uint256[] vaultAmts,\\n        uint256 indexed swapMode,\\n        uint256 unitAmt,\\n        uint256 vaultSwapAmt\\n    );\\n}\\n\\ncontract IWithdrawalsModule {\\n    /// @notice withdraws `stethAmount_` of stETH from protocol at `fromProtocolId_` and\\n    /// queues ETH withdrawal request for `stethAmount_` stETH at Lido WithdrawalQueue\\n    /// @dev more details in event logged by Lido contract WithdrawalQueue event \\\"WithdrawalRequested\\\"\\n    /// @param stethAmount_ amount to withdraw (Always in stETH).\\n    /// @param fromProtocolId_ Id of the protocol to withdraw stETH from. leverage ratio must be safe after request.\\n    /// Set to 0 to skip withdrawing from a protocol (recommended to do all in one tx to avoid risk of someone withdrawing)\\n    /// if set to 0, enough stETH to cover `stethAmount_` must already be in vault contract\\n    /// @return requestId_ Lido withdrawal request id\\n    function queueEthWithdrawal(\\n        uint256 stethAmount_,\\n        uint8 fromProtocolId_\\n    ) external returns (uint256 requestId_) {}\\n\\n    /// @notice accept ERC721 token transfers ONLY from LIDO_WITHDRAWAL_QUEUE\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public returns (bytes4) {}\\n\\n    /// @notice claims ETH for queued Lido withdraw request and repays the debt at `toProtocolId_`\\n    /// @dev more details in event logged by Lido contract WithdrawalQueue event \\\"WithdrawClaimed\\\" (e.g. amount of ETH claimed)\\n    /// @param requestId_ Id of request at Lido. Can be found with `getEthWithdrawalRequests()`\\n    /// @param toProtocolId_ Id of the protocol to repay claimed ETH to (as WETH). Protocol ID should be sent as '0' to skip repaying.\\n    function claimEthWithdrawal(\\n        uint256 requestId_,\\n        uint8 toProtocolId_\\n    ) external {}\\n\\n    /// @notice Transfers WETH from vault to DSA and repays debt at `toProtocolId_`\\n    /// @param toProtocolId_ Id of the protocol to repay claimed ETH to (as WETH)\\n    function paybackDebt(\\n        uint8 toProtocolId_\\n    ) external {}\\n\\n    /// @notice Emitted when a Lido ETH withdrawal is queued\\n    event LogQueueEthWithdrawal(\\n        uint256 indexed stEthAmount,\\n        uint256 indexed requestId,\\n        uint256 indexed protocolId\\n    );\\n\\n    /// @notice Emitted when debt is repaid\\n    event LogWethPayback(uint256 indexed amount, uint256 indexed protocolId);\\n\\n    /// @notice Emitted when a Lido ETH withdrawal is claimed\\n    event LogClaimEthWithdrawal(\\n        uint256 indexed stEthAmount,\\n        uint256 indexed requestId,\\n        uint256 indexed protocolId\\n    );\\n}\\n\\ncontract IDSAModule {\\n    /**\\n     * @dev Admin Spell function\\n     * @param to_ target address\\n     * @param calldata_ function calldata\\n     * @param value_ function msg.value\\n     * @param operation_ .call or .delegate. (0 => .call, 1 => .delegateCall)\\n     */\\n    function spell(\\n        address to_,\\n        bytes memory calldata_,\\n        uint256 value_,\\n        uint256 operation_\\n    ) external payable {}\\n\\n    /**\\n     * @dev Admin function to add auth on DSA\\n     * @param auth_ new auth address for DSA\\n     */\\n    function addDSAAuth(address auth_) external {}\\n}\\n\\ncontract IAdminModule {\\n    /**\\n     * @notice Initializes the vault for asset_ for the ERC4626 vault.\\n     * @param asset_ The base ERC20 asset address for the ERC4626 vault.\\n     * @param secondaryAuth_ Secondary auth for vault.\\n     * @param treasury_ Address that collects vault's revenue.\\n     * @param rebalancers_ Array of rebalancers to enable.\\n     * @param maxRiskRatio_ Array of max risk ratio allowed for protocols.\\n     * @param withdrawalFeePercentage_ Initial withdrawalFeePercentage.\\n     * @param withdrawFeeAbsoluteMin_ Initial withdrawFeeAbsoluteMin.\\n     * @param revenueFeePercentage_ Initial revenueFeePercentage_.\\n     * @param aggrMaxVaultRatio_ Aggregated max ratio of the vault.\\n     * @param leverageMaxUnitAmountLimit_  Max limit (in wei) allowed for wsteth per eth unit amount.\\n     */\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address asset_,\\n        address secondaryAuth_,\\n        address treasury_,\\n        address[] memory rebalancers_,\\n        uint256[] memory maxRiskRatio_,\\n        uint256 withdrawalFeePercentage_,\\n        uint256 withdrawFeeAbsoluteMin_,\\n        uint256 revenueFeePercentage_,\\n        uint256 aggrMaxVaultRatio_,\\n        uint256 leverageMaxUnitAmountLimit_\\n    ) external {}\\n\\n    /**\\n     * @notice Re-initializes the vault with new protocol IDs and risk ratios.\\n     */\\n    function initializeV2() external {}\\n\\n    /**\\n     * @notice Vault owner and secondary wuth can update the secondary auth.\\n     * @param secondaryAuth_ New secondary auth to set.\\n     */\\n    function updateSecondaryAuth(address secondaryAuth_) public {}\\n\\n    /**\\n     * @notice Auth can add or remove allowed rebalancers\\n     * @param rebalancer_ the address for the rebalancer to set the flag for\\n     * @param isRebalancer_ flag for if rebalancer is allowed or not\\n     */\\n    function updateRebalancer(address rebalancer_, bool isRebalancer_) public {}\\n\\n    /**\\n     * @notice Auth can update the risk ratio for each protocol.\\n     * @param protocolId_ The Id of the protocol to update the risk ratio.\\n     * @param newRiskRatio_ New risk ratio of the protocol in terms of Eth and Steth, scaled to factor 4. i.e 1e6 = 100%, 1e4 = 1%\\n     */\\n    function updateMaxRiskRatio(\\n        uint8[] memory protocolId_,\\n        uint256[] memory newRiskRatio_\\n    ) public {}\\n\\n    /**\\n     * @notice Secondary auth can lower the risk ratio of any protocol.\\n     * @param protocolId_ The Id of the protocol to reduce the risk ratio.\\n     * @param newRiskRatio_ New risk ratio of the protocol in terms of Eth and Steth, scaled to factor 4. i.e 1e6 = 100%, 1e4 = 1%\\n     */\\n    function reduceMaxRiskRatio(\\n        uint8[] memory protocolId_,\\n        uint256[] memory newRiskRatio_\\n    ) public {}\\n\\n    /**\\n     * @notice Auth can update the max risk ratio set for the vault.\\n     * @param newAggrMaxVaultRatio_ New aggregated max ratio of the vault. Scaled to factor 4. i.e 1e6 = 100%, 1e4 = 1%\\n     */\\n    function updateAggrMaxVaultRatio(uint256 newAggrMaxVaultRatio_) public {}\\n\\n    /**\\n     * @notice Secondary auth can reduce the max risk ratio set for the vault.\\n     * @param newAggrMaxVaultRatio_ New aggregated max ratio of the vault. Scaled to factor 4. i.e 1e6 = 100%, 1e4 = 1%\\n     */\\n    function reduceAggrMaxVaultRatio(uint256 newAggrMaxVaultRatio_) public {}\\n\\n    /**\\n     * @notice Secondary auth can update the max wsteth per weth unit amount deviation limit.\\n     * @param newLimit_ New limit to set.\\n     */\\n    function updateLeverageMaxUnitAmountLimit(uint256 newLimit_) public {}\\n\\n    /**\\n     * @notice Auth can pause or resume all functionality of the vault.\\n     * @param status_ New status of the vault.\\n     * Note status = 1 => Vault functions are enabled; status = 2 => Vault functions are paused.\\n     */\\n    function changeVaultStatus(uint8 status_) public {}\\n\\n    /**\\n     * @notice Auth can update the revenue and withdrawal fee percentage.\\n     * @param revenueFeePercent_ New revenue fee percentage, scaled to factor 4. i.e 1e6 = 100%, 1e4 = 1%\\n     * @param withdrawalFeePercent_ New withdrawal fee percentage, scaled to factor 4. i.e 1e6 = 100%, 1e4 = 1%\\n     * @param withdrawFeeAbsoluteMin_ New withdraw fee absolute. 1 ETH = 1e18, 0.01 = 1e16\\n     */\\n    function updateFees(\\n        uint256 revenueFeePercent_,\\n        uint256 withdrawalFeePercent_,\\n        uint256 withdrawFeeAbsoluteMin_\\n    ) public {}\\n\\n    /**\\n     * @notice Auth can update the address that collected revenue.\\n     * @param newTreasury_ Address that will collect the revenue.\\n     */\\n    function updateTreasury(address newTreasury_) public {}\\n\\n    /// @notice Emitted when rebalancer is added or removed.\\n    event LogUpdateRebalancer(\\n        address indexed rebalancer,\\n        bool indexed isRebalancer\\n    );\\n\\n    /// @notice Emitted when vault's functionality is paused or resumed.\\n    event LogChangeStatus(uint8 indexed status);\\n\\n    /// @notice Emitted when the revenue or withdrawal fee is updated.\\n    event LogUpdateFees(\\n        uint256 indexed revenueFeePercentage,\\n        uint256 indexed withdrawalFeePercentage,\\n        uint256 indexed withdrawFeeAbsoluteMin\\n    );\\n\\n    /// @notice Emitted when the protocol's risk ratio is updated.\\n    event LogUpdateMaxRiskRatio(uint8 indexed protocolId, uint256 newRiskRatio);\\n\\n    /// @notice Emitted whenever the address collecting the revenue is updated.\\n    event LogUpdateTreasury(\\n        address indexed oldTreasury,\\n        address indexed newTreasury\\n    );\\n\\n    /// @notice Emitted when secondary auth is updated.\\n    event LogUpdateSecondaryAuth(\\n        address indexed oldSecondaryAuth,\\n        address indexed secondaryAuth\\n    );\\n\\n    /// @notice Emitted when max vault ratio is updated.\\n    event LogUpdateAggrMaxVaultRatio(\\n        uint256 indexed oldAggrMaxVaultRatio,\\n        uint256 indexed aggrMaxVaultRatio\\n    );\\n\\n    /// @notice Emitted when max leverage wsteth per weth unit amount is updated.\\n    event LogUpdateLeverageMaxUnitAmountLimit(\\n        uint256 indexed oldLimit,\\n        uint256 indexed newLimit\\n    );\\n}\\n\\ncontract IERC4626Functions {\\n    function decimals() public view returns (uint8) {}\\n\\n    function asset() public view returns (address) {}\\n\\n    function convertToShares(uint256 assets)\\n        public\\n        view\\n        returns (uint256 shares)\\n    {}\\n\\n    function convertToAssets(uint256 shares)\\n        public\\n        view\\n        returns (uint256 assets)\\n    {}\\n\\n    function maxDeposit(address) public view returns (uint256) {}\\n\\n    function maxMint(address) public view returns (uint256) {}\\n\\n    function maxWithdraw(address owner) public view returns (uint256) {}\\n\\n    function maxRedeem(address owner) public view returns (uint256) {}\\n\\n    function previewDeposit(uint256 assets) public view returns (uint256) {}\\n\\n    function previewMint(uint256 shares) public view returns (uint256) {}\\n\\n    function previewWithdraw(uint256 assets) public view returns (uint256) {}\\n\\n    function previewRedeem(uint256 shares) public view returns (uint256) {}\\n}\\n\\ncontract IERC20Functions {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    function name() public view returns (string memory) {}\\n\\n    function symbol() public view returns (string memory) {}\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() public view returns (uint256) {}\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {}\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) public returns (bool) {}\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        returns (uint256)\\n    {}\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {}\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public returns (bool) {}\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        returns (bool)\\n    {}\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {}\\n}\\n\\ncontract IHelpersRead {\\n    struct ProtocolAssetsInStETH {\\n        uint256 stETH; // supply\\n        uint256 wETH; // borrow\\n    }\\n\\n    struct ProtocolAssetsInWstETH {\\n        uint256 wstETH; // supply\\n        uint256 wETH; // borrow\\n    }\\n\\n    struct IdealBalances {\\n        uint256 stETH;\\n        uint256 wstETH;\\n        uint256 wETH;\\n    }\\n\\n    struct NetAssetsHelper {\\n        ProtocolAssetsInStETH aaveV2;\\n        ProtocolAssetsInWstETH aaveV3;\\n        ProtocolAssetsInWstETH compoundV3;\\n        ProtocolAssetsInWstETH euler;\\n        ProtocolAssetsInStETH morphoAaveV2;\\n        IdealBalances vaultBalances;\\n        IdealBalances dsaBalances;\\n    }\\n\\n    /**\\n     * @dev Returns ratio of Aave V2 in terms of `WETH` and `STETH`.\\n     */\\n    function getRatioAaveV2()\\n        public\\n        view\\n        returns (\\n            uint256 stEthAmount_,\\n            uint256 ethAmount_,\\n            uint256 ratio_\\n        )\\n    {}\\n\\n    /**\\n     * @dev Returns ratio of Aave V3 in terms of `WETH` and `STETH`.\\n     * @param stEthPerWsteth_ Amount of stETH for one wstETH.\\n     * Note `stEthPerWsteth_` can be sent as 0 and it will internally calculate the conversion rate.\\n     */\\n    function getRatioAaveV3(uint256 stEthPerWsteth_)\\n        public\\n        view\\n        returns (\\n            uint256 wstEthAmount_,\\n            uint256 stEthAmount_,\\n            uint256 ethAmount_,\\n            uint256 ratio_\\n        )\\n    {}\\n\\n    /**\\n     * @dev Returns ratio of Compound V3 in terms of `WETH` and `STETH`.\\n     * @param stEthPerWsteth_ Amount of stETH for one wstETH.\\n     * Note `stEthPerWsteth_` can be sent as 0 and it will internally calculate the conversion rate.\\n     */\\n    function getRatioCompoundV3(uint256 stEthPerWsteth_)\\n        public\\n        view\\n        returns (\\n            uint256 wstEthAmount_,\\n            uint256 stEthAmount_,\\n            uint256 ethAmount_,\\n            uint256 ratio_\\n        )\\n    {}\\n\\n    /**\\n     * @dev Returns ratio of Euler in terms of `WETH` and `STETH`.\\n     * @param stEthPerWsteth_ Amount of stETH for one wstETH.\\n     * Note `stEthPerWsteth_` can be sent as 0 and it will internally calculate the conversion rate.\\n     */\\n    function getRatioEuler(uint256 stEthPerWsteth_)\\n        public\\n        view\\n        returns (\\n            uint256 wstEthAmount_,\\n            uint256 stEthAmount_,\\n            uint256 ethAmount_,\\n            uint256 ratio_\\n        )\\n    {}\\n\\n    /**\\n     * @dev Returns ratio of Morpho Aave in terms of `WETH` and `STETH`.\\n     */\\n    function getRatioMorphoAaveV2()\\n        public\\n        view\\n        returns (\\n            uint256 stEthAmount_, // Aggreagted value of stETH in Pool and P2P\\n            uint256 stEthAmountPool_,\\n            uint256 stEthAmountP2P_,\\n            uint256 ethAmount_, // Aggreagted value of eth in Pool and P2P\\n            uint256 ethAmountPool_,\\n            uint256 ethAmountP2P_,\\n            uint256 ratio_\\n        )\\n    {}\\n\\n    /**\\n     * @dev Returns the borrow balance in underlying in a given market.\\n     * @param underlying_ The address of the underlying asset.\\n     */\\n    function borrowBalanceMorphoAaveV3(address underlying_)\\n        public\\n        view\\n        returns (uint256 totalBalance_)\\n    {}\\n\\n    /**\\n     * @dev Returns the supply collateral balance on the `underlying` market (in underlying).\\n     * @param underlying_ The address of the underlying asset.\\n     */\\n    function collateralBalanceMorphoAaveV3(address underlying_)\\n        public\\n        view\\n        returns (uint256 collateralBalance_)\\n    {}\\n\\n    /**\\n     * @dev Returns ratio of Morpho Aave V3 in terms of `WETH` and `STETH`.\\n     * @param stEthPerWsteth_ Amount of stETH for one wstETH.\\n     */\\n    function getRatioMorphoAaveV3(\\n        uint256 stEthPerWsteth_\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 wstEthAmount_,\\n            uint256 stEthAmount_,\\n            uint256 ethAmount_,\\n            uint256 ratio_\\n        )\\n    {}\\n\\n    /**\\n     * @dev eturns ratio of Spark in terms of `WETH` and `STETH`.\\n     * @param stEthPerWsteth_ Amount of stETH for one wstETH.\\n     */\\n    function getRatioSpark(\\n        uint256 stEthPerWsteth_\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 wstEthAmount_,\\n            uint256 stEthAmount_,\\n            uint256 ethAmount_,\\n            uint256 ratio_\\n        )\\n    {}\\n\\n    /**\\n     * @dev Returns protocol ratio.\\n     * @param protocolId_ Id of the protocol to get the ratio.\\n     */\\n    function getProtocolRatio(uint8 protocolId_)\\n        public\\n        view\\n        returns (uint256 ratio_)\\n    {}\\n\\n    /**\\n     * @dev Returns the net assets of the vault.\\n     */\\n    function getNetAssets()\\n        public\\n        view\\n        returns (\\n            uint256 totalAssets_, // Total assets(collaterals + ideal balances + queued withdraws) inlcuding reveune\\n            uint256 totalDebt_, // Total debt\\n            uint256 netAssets_, // Total assets - Total debt - Reveune\\n            uint256 aggregatedRatio_, // Aggregated ratio of vault (Total debt/ (Total assets - revenue))\\n            NetAssetsHelper memory assets_\\n        )\\n    {}\\n\\n    /**\\n     * @notice calculates the withdraw fee: max(percentage amount, absolute amount)\\n     * @param stETHAmount_ the amount of assets being withdrawn\\n     */\\n    function getWithdrawFee(uint256 stETHAmount_)\\n        public\\n        view\\n        returns (uint256)\\n    {}\\n}\\n\\ncontract IVariablesRead {\\n    /**\\n     * @dev DSA for this particular vault\\n     */\\n    function vaultDSA() public view returns (address) {}\\n\\n    /**\\n     * @dev Max limit (in wei) allowed for wsteth per eth unit amount.\\n     */\\n    function leverageMaxUnitAmountLimit() public view returns (uint256) {}\\n\\n    /**\\n     * @dev Secondary auth that only has the power to reduce max risk ratio.\\n     */\\n    function secondaryAuth() public view returns (address) {}\\n\\n    /**\\n     * @dev Current exchange price.\\n     */\\n    function exchangePrice() public view returns (uint256) {}\\n\\n    // Revenue exchange price (helps in calculating revenue).\\n    // Exchange price when revenue got updated last. It'll only increase overtime.\\n    function revenueExchangePrice() public view returns (uint256) {}\\n\\n    /// @notice mapping to store allowed rebalancers\\n    ///         modifiable by auth\\n    mapping(address => bool) public isRebalancer;\\n\\n    //Mapping of protocol id => max risk ratio, scaled to factor 4,\\n    // i.e. 1% would equal 10,000; 10% would be 100,000 etc.\\n    mapping(uint8 => uint256) public maxRiskRatio;\\n\\n    //Max aggregated risk ratio of the vault that can be reached, scaled to factor 4.\\n    function aggrMaxVaultRatio() public view returns (uint256) {}\\n\\n    /// @notice withdraw fee is either amount in percentage or absolute minimum. This var defines the percentage in 1e6\\n    /// this number is given in 1e4, i.e. 1% would equal 10,000; 10% would be 100,000 etc.\\n    /// modifiable by owner\\n    function withdrawalFeePercentage() public view returns (uint256) {}\\n\\n    /// @notice withdraw fee is either amount in percentage or absolute minimum. This var defines the absolute minimum\\n    /// this number is given in decimals for the respective asset of the vault.\\n    /// modifiable by owner\\n    function withdrawFeeAbsoluteMin() public view returns (uint256) {}\\n\\n    function revenueFeePercentage() public view returns (uint256) {}\\n\\n    /// @notice Stores profit revenue and withdrawal fees collected.\\n    function revenue() public view returns (uint256) {}\\n\\n    /// @notice Revenue will be transffered to this address upon collection.\\n    function treasury() public view returns (address) {}\\n\\n    /// @notice Tracker for amount of stETH queued for withdrawal.\\n    function queuedWithdrawStEth() public view returns (uint256) {}\\n}\\n\\ncontract VaultDummyImplementation is\\n    IUserModule,\\n    IRefinanceModule,\\n    IRebalancerModule,\\n    ILeverageModule,\\n    IWithdrawalsModule,\\n    IDSAModule,\\n    IAdminModule,\\n    IERC4626Functions,\\n    IERC20Functions,\\n    IHelpersRead,\\n    IVariablesRead\\n{\\n    receive() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"LogChangeStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stEthAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"protocolId\",\"type\":\"uint256\"}],\"name\":\"LogClaimEthWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"LogCollectRevenue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"LogEthSweep\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"LogFillVaultAvailability\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"iTokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"route\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deleverageWethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawStETHAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userNetDeposit\",\"type\":\"uint256\"}],\"name\":\"LogImportV1ETHVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"route\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wstETHflashAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmountBorrow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"vaults\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"vaultAmts\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"swapMode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultSwapAmt\",\"type\":\"uint256\"}],\"name\":\"LogLeverage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stEthAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"protocolId\",\"type\":\"uint256\"}],\"name\":\"LogQueueEthWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"protocolFrom\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"protocolTo\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"route\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wstETHflashAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wETHBorrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"LogRefinance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldAggrMaxVaultRatio\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"aggrMaxVaultRatio\",\"type\":\"uint256\"}],\"name\":\"LogUpdateAggrMaxVaultRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"exchangePriceBefore\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"exchangePriceAfter\",\"type\":\"uint256\"}],\"name\":\"LogUpdateExchangePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"revenueFeePercentage\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"withdrawalFeePercentage\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"withdrawFeeAbsoluteMin\",\"type\":\"uint256\"}],\"name\":\"LogUpdateFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldLimit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"LogUpdateLeverageMaxUnitAmountLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"protocolId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRiskRatio\",\"type\":\"uint256\"}],\"name\":\"LogUpdateMaxRiskRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rebalancer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isRebalancer\",\"type\":\"bool\"}],\"name\":\"LogUpdateRebalancer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldSecondaryAuth\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"secondaryAuth\",\"type\":\"address\"}],\"name\":\"LogUpdateSecondaryAuth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"LogUpdateTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"LogVaultToProtocolDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"protocolId\",\"type\":\"uint256\"}],\"name\":\"LogWethPayback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"}],\"name\":\"LogWethSweep\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"auth_\",\"type\":\"address\"}],\"name\":\"addDSAAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggrMaxVaultRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"}],\"name\":\"borrowBalanceMorphoAaveV3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBalance_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"status_\",\"type\":\"uint8\"}],\"name\":\"changeVaultStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"toProtocolId_\",\"type\":\"uint8\"}],\"name\":\"claimEthWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"}],\"name\":\"collateralBalanceMorphoAaveV3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralBalance_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"collectRevenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"protocolId_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount_\",\"type\":\"uint256\"}],\"name\":\"fillVaultAvailability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNetAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAssets_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"netAssets_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregatedRatio_\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wETH\",\"type\":\"uint256\"}],\"internalType\":\"struct IHelpersRead.ProtocolAssetsInStETH\",\"name\":\"aaveV2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"wstETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wETH\",\"type\":\"uint256\"}],\"internalType\":\"struct IHelpersRead.ProtocolAssetsInWstETH\",\"name\":\"aaveV3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"wstETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wETH\",\"type\":\"uint256\"}],\"internalType\":\"struct IHelpersRead.ProtocolAssetsInWstETH\",\"name\":\"compoundV3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"wstETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wETH\",\"type\":\"uint256\"}],\"internalType\":\"struct IHelpersRead.ProtocolAssetsInWstETH\",\"name\":\"euler\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wETH\",\"type\":\"uint256\"}],\"internalType\":\"struct IHelpersRead.ProtocolAssetsInStETH\",\"name\":\"morphoAaveV2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wstETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wETH\",\"type\":\"uint256\"}],\"internalType\":\"struct IHelpersRead.IdealBalances\",\"name\":\"vaultBalances\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wstETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wETH\",\"type\":\"uint256\"}],\"internalType\":\"struct IHelpersRead.IdealBalances\",\"name\":\"dsaBalances\",\"type\":\"tuple\"}],\"internalType\":\"struct IHelpersRead.NetAssetsHelper\",\"name\":\"assets_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"protocolId_\",\"type\":\"uint8\"}],\"name\":\"getProtocolRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRatioAaveV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stEthAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stEthPerWsteth_\",\"type\":\"uint256\"}],\"name\":\"getRatioAaveV3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wstEthAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stEthAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stEthPerWsteth_\",\"type\":\"uint256\"}],\"name\":\"getRatioCompoundV3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wstEthAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stEthAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stEthPerWsteth_\",\"type\":\"uint256\"}],\"name\":\"getRatioEuler\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wstEthAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stEthAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRatioMorphoAaveV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stEthAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stEthAmountPool_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stEthAmountP2P_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmountPool_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmountP2P_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stEthPerWsteth_\",\"type\":\"uint256\"}],\"name\":\"getRatioMorphoAaveV3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wstEthAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stEthAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stEthPerWsteth_\",\"type\":\"uint256\"}],\"name\":\"getRatioSpark\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wstEthAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stEthAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stETHAmount_\",\"type\":\"uint256\"}],\"name\":\"getWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"route_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deleverageWETHAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawStETHAmount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"importPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"asset_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondaryAuth_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rebalancers_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxRiskRatio_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalFeePercentage_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFeeAbsoluteMin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revenueFeePercentage_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggrMaxVaultRatio_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverageMaxUnitAmountLimit_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRebalancer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"protocolId_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"route_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wstETHflashAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wETHBorrowAmount_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"vaults_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"vaultAmounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapMode_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"oneInchData_\",\"type\":\"bytes\"}],\"name\":\"leverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leverageMaxUnitAmountLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"maxRiskRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"toProtocolId_\",\"type\":\"uint8\"}],\"name\":\"paybackDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stethAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"fromProtocolId_\",\"type\":\"uint8\"}],\"name\":\"queueEthWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queuedWithdrawStEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetsAfterFee_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAggrMaxVaultRatio_\",\"type\":\"uint256\"}],\"name\":\"reduceAggrMaxVaultRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"protocolId_\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newRiskRatio_\",\"type\":\"uint256[]\"}],\"name\":\"reduceMaxRiskRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"fromProtocolId_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"toProtocolId_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"route_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wstETHflashAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wETHBorrowAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount_\",\"type\":\"uint256\"}],\"name\":\"refinance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ratioFromProtocol_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratioToProtocol_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueExchangePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondaryAuth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"calldata_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operation_\",\"type\":\"uint256\"}],\"name\":\"spell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepEthToSteth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepWethToSteth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAggrMaxVaultRatio_\",\"type\":\"uint256\"}],\"name\":\"updateAggrMaxVaultRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateExchangePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newExchangePrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRevenue_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"revenueFeePercent_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalFeePercent_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFeeAbsoluteMin_\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit_\",\"type\":\"uint256\"}],\"name\":\"updateLeverageMaxUnitAmountLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"protocolId_\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newRiskRatio_\",\"type\":\"uint256[]\"}],\"name\":\"updateMaxRiskRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rebalancer_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRebalancer_\",\"type\":\"bool\"}],\"name\":\"updateRebalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"secondaryAuth_\",\"type\":\"address\"}],\"name\":\"updateSecondaryAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasury_\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultDSA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"protocolId_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount_\",\"type\":\"uint256\"}],\"name\":\"vaultToProtocolDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeAbsoluteMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "VaultDummyImplementation", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}