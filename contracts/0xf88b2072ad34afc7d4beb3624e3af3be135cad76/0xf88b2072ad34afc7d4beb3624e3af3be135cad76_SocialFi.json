{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\nThe First Social Trading Aggregator + Trading Guild with Social Network on #Web3. SocialFi/DeFi/NFT/GameFi to Earn. We define #SocialFi Trading.\r\n\r\nWebsite: https://www.socialfinance.cloud\r\nTelegram: https://t.me/socialfi_erc\r\nTwitter: https://twitter.com/socialfi_erc\r\n */\r\n\r\npragma solidity 0.8.19;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint derichexine\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint derichexine\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint derichexine\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint derichexine\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint derichexine\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address _uniswapPair);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    constructor(address owner) {\r\n        _owner = owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_isOwner(msg.sender), \"!OWNER\");\r\n        _;\r\n    }\r\n\r\n    function _isOwner(address account) internal view returns (bool) {\r\n        return account == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        _owner = address(0);\r\n        emit OwnershipTransferred(address(0));\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ncontract SocialFi is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private constant _name = \"SocialFi Network\";\r\n    string private constant _symbol = \"SocialFi\";\r\n\r\n    mapping (address => uint256) private balances;\r\n    mapping (address => mapping (address => uint256)) private allowances;\r\n    mapping (address => bool) private no_tax_address;\r\n    mapping (address => bool) private no_max_tx_address;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private total_supply = 10 ** 9 * (10 ** _decimals);\r\n\r\n    bool private swap_enabled = true;\r\n    uint256 private min_swap_threshold = total_supply / 100000; // 0.1%\r\n    bool private swapping;\r\n\r\n    uint256 private tax_liq = 0; \r\n    uint256 private tax_market = 23;\r\n    uint256 private tax_total = tax_liq + tax_market;\r\n    uint256 private denominator = 100;\r\n\r\n    modifier lock_swap() { swapping = true; _; swapping = false; }\r\n\r\n    uint256 private max_tx_amount = (total_supply * 25) / 1000;\r\n    address private tax_address;\r\n    IUniswapV2Router private uniswap_router;\r\n    address private uniswap_pair;\r\n\r\n    address private router_addr = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address private dead_address = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    constructor (address richex_address) Ownable(msg.sender) {\r\n        uniswap_router = IUniswapV2Router(router_addr);\r\n        uniswap_pair = IUniswapV2Factory(uniswap_router.factory()).createPair(uniswap_router.WETH(), address(this));\r\n        allowances[address(this)][address(uniswap_router)] = type(uint256).max;\r\n        tax_address = richex_address;\r\n        no_tax_address[tax_address] = true;\r\n        no_max_tx_address[_owner] = true;\r\n        no_max_tx_address[tax_address] = true;\r\n        no_max_tx_address[dead_address] = true;\r\n        balances[_owner] = total_supply;\r\n        emit Transfer(address(0), _owner, total_supply);\r\n    }\r\n    \r\n    function perform_richex_swap() internal lock_swap {\r\n        uint256 contract_token_balance = balanceOf(address(this));\r\n        uint256 tokens_to_lp = contract_token_balance.mul(tax_liq).div(tax_total).div(2);\r\n        uint256 amount_to_swap = contract_token_balance.sub(tokens_to_lp);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswap_router.WETH();\r\n\r\n        uniswap_router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount_to_swap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        uint256 amount_eth = address(this).balance;\r\n        uint256 total_fee_tokens = tax_total.sub(tax_liq.div(2));\r\n        uint256 eth_to_lp = amount_eth.mul(tax_liq).div(total_fee_tokens).div(2);\r\n        uint256 eth_to_marketing = amount_eth.mul(tax_market).div(total_fee_tokens);\r\n\r\n        payable(tax_address).transfer(eth_to_marketing);\r\n        if(tokens_to_lp > 0){\r\n            uniswap_router.addLiquidityETH{value: eth_to_lp}(\r\n                address(this),\r\n                tokens_to_lp,\r\n                0,\r\n                0,\r\n                tax_address,\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function _transfer_from(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if(swapping){ return _transfer_basic(sender, recipient, amount); }\r\n        \r\n        if (recipient != uniswap_pair && recipient != dead_address) {\r\n            require(no_max_tx_address[recipient] || balances[recipient] + amount <= max_tx_amount, \"Transfer amount exceeds the bag size.\");\r\n        }        \r\n        if(_verify_swap_back(sender, recipient, amount)){ \r\n            perform_richex_swap(); \r\n        } \r\n        bool should_tax = _should_charge_tax(sender);\r\n        if (should_tax) {\r\n            balances[recipient] = balances[recipient].add(_sending_amt(sender, amount));\r\n        } else {\r\n            balances[recipient] = balances[recipient].add(amount);\r\n        }\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function _should_charge_tax(address sender) internal view returns (bool) {\r\n        return !no_tax_address[sender];\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function balanceOf(address account) public view override returns (uint256) { return balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return allowances[holder][spender]; }\r\n    \r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transfer_from(msg.sender, recipient, amount);\r\n    }\r\n\r\n    receive() external payable { }\r\n                  \r\n    function _verify_swap_back(address sender, address recipient, uint256 amount) private view returns (bool) {\r\n        return _check_if_swap() && \r\n            _should_charge_tax(sender) && \r\n            _check_if_sell_tx(recipient) && \r\n            amount > min_swap_threshold;\r\n    }\r\n\r\n    function _sending_amt(address sender, uint256 amount) internal returns (uint256) {\r\n        balances[sender] = balances[sender].sub(amount, \"Insufficient Balance\");\r\n        uint256 fee_tokens = amount.mul(tax_total).div(denominator);\r\n        bool has_no_fee = sender == _owner;\r\n        if (has_no_fee) {\r\n            fee_tokens = 0;\r\n        }\r\n        \r\n        balances[address(this)] = balances[address(this)].add(fee_tokens);\r\n        emit Transfer(sender, address(this), fee_tokens);\r\n        return amount.sub(fee_tokens);\r\n    }\r\n    \r\n    function update_richex_tax(uint256 lp_fee, uint256 dev_fee) external onlyOwner {\r\n         tax_liq = lp_fee; \r\n         tax_market = dev_fee;\r\n         tax_total = tax_liq + tax_market;\r\n    }    \r\n    \r\n    function _check_if_sell_tx(address recipient) private view returns (bool){\r\n        return recipient == uniswap_pair;\r\n    }\r\n\r\n    function _check_if_swap() internal view returns (bool) {\r\n        return !swapping\r\n        && swap_enabled\r\n        && balances[address(this)] >= min_swap_threshold;\r\n    }\r\n    \r\n    function adjust_richex_wallet_size(uint256 percent) external onlyOwner {\r\n        max_tx_amount = (total_supply * percent) / 1000;\r\n    }\r\n\r\n    function _transfer_basic(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        balances[sender] = balances[sender].sub(amount, \"Insufficient Balance\");\r\n        balances[recipient] = balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) { return total_supply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(allowances[sender][msg.sender] != type(uint256).max){\r\n            allowances[sender][msg.sender] = allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transfer_from(sender, recipient, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"richex_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"adjust_richex_wallet_size\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lp_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev_fee\",\"type\":\"uint256\"}],\"name\":\"update_richex_tax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SocialFi", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000908e2d23987a8701164a0e87146b6e598b3f3f44", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f9bb80152c784e1c1141d7e442cfc24c50e8f80e51bcb112aae63550665bd219"}