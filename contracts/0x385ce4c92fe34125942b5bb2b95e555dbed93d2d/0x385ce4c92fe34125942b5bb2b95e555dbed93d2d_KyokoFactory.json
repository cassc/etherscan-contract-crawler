{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/factory/KyokoFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"../interfaces/IKyokoFactory.sol\\\";\\nimport \\\"../interfaces/IKyokoPool.sol\\\";\\nimport \\\"../interfaces/IKyokoPoolAddressesProvider.sol\\\";\\nimport \\\"../interfaces/IKyokoPoolConfigurator.sol\\\";\\nimport \\\"../interfaces/IInterestRateStrategy.sol\\\";\\nimport \\\"../interfaces/IKToken.sol\\\";\\nimport \\\"../interfaces/IStableDebtToken.sol\\\";\\nimport \\\"../interfaces/IVariableDebtToken.sol\\\";\\nimport \\\"../libraries/utils/Errors.sol\\\";\\nimport \\\"../tokens/VariableDebtToken.sol\\\";\\n\\ncontract KyokoFactory is IKyokoFactory, ContextUpgradeable {\\n    address internal WETH;\\n    IKyokoPoolAddressesProvider public _addressesProvider;\\n    address public _treasury;\\n    uint16 public _factor;\\n    uint40 internal MIN_BORROW_TIME;\\n    uint256 public _initilLiquidity = 0.01 ether;\\n    uint16 public _liquidationThreshold = 13333;\\n    uint32 public _lockTime = 30 days;\\n    bool only = true;\\n\\n    address internal _createKToken;\\n    address internal _createDebtToken;\\n\\n    string private s1 = \\\" \\\";\\n    string private s2 = \\\"ETH\\\";\\n\\n    mapping(address => address) public kTokenCreator;\\n    mapping(address => address) public sTokenCreator;\\n    mapping(address => address) public vTokenCreator;\\n\\n    modifier onlyPoolAdmin() {\\n        require(\\n            _addressesProvider.isAdmin(_msgSender()),\\n            Errors.CALLER_NOT_POOL_ADMIN\\n        );\\n        _;\\n    }\\n\\n    modifier onlyPoolAdminCreater() {\\n        if (only) {\\n            require(\\n                _addressesProvider.isAdmin(_msgSender()),\\n                Errors.CALLER_NOT_POOL_ADMIN\\n            );\\n        }\\n        _;\\n    }\\n\\n    modifier onlyKyokoPoolConfigurator() {\\n        _onlyKyokoPoolConfigurator();\\n        _;\\n    }\\n\\n    function _onlyKyokoPoolConfigurator() internal view {\\n        require(\\n            _addressesProvider.isConfigurator(_msgSender()),\\n            Errors.LP_CALLER_NOT_KYOKO_POOL_CONFIGURATOR\\n        );\\n    }\\n\\n    constructor(\\n        address weth,\\n        address provider,\\n        address treasury,\\n        address createKToken,\\n        address createDebtToken\\n    ) initializer {\\n        WETH = weth;\\n        _addressesProvider = IKyokoPoolAddressesProvider(provider);\\n        _treasury = treasury;\\n        _factor = 2000;\\n        MIN_BORROW_TIME = 5 minutes;\\n        _createKToken = createKToken;\\n        _createDebtToken = createDebtToken;\\n    }\\n\\n    function createPool(address _nftAddress)\\n        external\\n        override\\n        onlyPoolAdminCreater\\n        returns (\\n            address kTokenAddress,\\n            address variableDebtAddress,\\n            address stableDebtAddress\\n        )\\n    {\\n        string memory _nftSymbol = INFT(_nftAddress).symbol();\\n        IKyokoPool pool = _getKyokoPool();\\n        uint256 reservesCount = pool.getReservesCount();\\n\\n        kTokenAddress = createK(reservesCount, _nftSymbol);\\n        variableDebtAddress = createVariableDebtToken(\\n            WETH,\\n            address(_addressesProvider),\\n            reservesCount,\\n            _nftSymbol\\n        );\\n        stableDebtAddress = createStable(reservesCount, _nftSymbol);\\n        uint256 blockNumber = block.number;\\n\\n        kTokenCreator[kTokenAddress] = msg.sender;\\n        sTokenCreator[stableDebtAddress] = msg.sender;\\n        vTokenCreator[variableDebtAddress] = msg.sender;\\n\\n        emit CreatePool(\\n            blockNumber,\\n            kTokenAddress,\\n            variableDebtAddress,\\n            stableDebtAddress\\n        );\\n    }\\n\\n    function createSharedPool()\\n        external\\n        override\\n        onlyPoolAdmin\\n        returns (\\n            address kTokenAddress,\\n            address variableDebtAddress,\\n            address stableDebtAddress\\n        )\\n    {\\n        string memory _nftSymbol = \\\"SHARED\\\";\\n        IKyokoPool pool = _getKyokoPool();\\n        uint256 reservesCount = pool.getReservesCount();\\n\\n        kTokenAddress = createK(reservesCount, _nftSymbol);\\n        variableDebtAddress = createVariableDebtToken(\\n            WETH,\\n            address(_addressesProvider),\\n            reservesCount,\\n            _nftSymbol\\n        );\\n        stableDebtAddress = createStable(reservesCount, _nftSymbol);\\n        uint256 blockNumber = block.number;\\n\\n        kTokenCreator[kTokenAddress] = msg.sender;\\n        sTokenCreator[stableDebtAddress] = msg.sender;\\n        vTokenCreator[variableDebtAddress] = msg.sender;\\n\\n        emit CreatePool(\\n            blockNumber,\\n            kTokenAddress,\\n            variableDebtAddress,\\n            stableDebtAddress\\n        );\\n    }\\n\\n    function initReserve(\\n        address _nftAddress,\\n        uint40 _period,\\n        uint16 _ratio,\\n        uint24 _liqDuration,\\n        uint24 _bidDuration,\\n        bool _enabledStableBorrow,\\n        address kTokenAddress,\\n        address variableDebtAddress,\\n        address stableDebtAddress,\\n        DataTypes.RateStrategyInput memory _rateInput\\n    ) external payable override onlyPoolAdminCreater {\\n        uint256 amount = msg.value;\\n        require(amount >= _initilLiquidity, Errors.KF_LIQUIDITY_INSUFFICIENT);\\n        require(\\n            kTokenCreator[kTokenAddress] == msg.sender &&\\n                sTokenCreator[stableDebtAddress] == msg.sender &&\\n                vTokenCreator[variableDebtAddress] == msg.sender,\\n            Errors.KT_ERROR_CREATOR\\n        );\\n        DataTypes.InitReserveInput memory input;\\n        DataTypes.RateStrategyInput memory rateInput = _rateInput;\\n        input.underlyingAsset = _nftAddress;\\n        input.treasury = _treasury;\\n        input.factor = _factor;\\n        input.borrowRatio = _ratio;\\n        input.period = _period;\\n        input.minBorrowTime = MIN_BORROW_TIME;\\n        input.liqThreshold = _liquidationThreshold;\\n        input.liqDuration = _liqDuration;\\n        input.bidDuration = _bidDuration;\\n        input.lockTime = _lockTime;\\n        input.stableBorrowed = _enabledStableBorrow;\\n        IKyokoPool pool = _getKyokoPool();\\n        IKyokoPoolConfigurator configurator = IKyokoPoolConfigurator(\\n            _addressesProvider.getKyokoPoolConfigurator()[0]\\n        );\\n        uint256 reservesCount = rateInput.reserveId = input.reserveId = pool\\n            .getReservesCount();\\n\\n        input.kTokenImpl = kTokenAddress;\\n        input.variableDebtTokenImpl = variableDebtAddress;\\n        input.stableDebtTokenImpl = stableDebtAddress;\\n        input.interestRateStrategyAddress = _addressesProvider\\n            .getRateStrategy()[0];\\n\\n        configurator.factoryInitReserve(input, rateInput);\\n\\n        pool.deposit{value: amount}(reservesCount, msg.sender);\\n    }\\n\\n    function setFactor(uint16 factor)\\n        external\\n        override\\n        onlyKyokoPoolConfigurator\\n    {\\n        _factor = factor;\\n        emit FactorUpdate(factor);\\n    }\\n\\n    function setInitialLiquidity(uint256 amount)\\n        external\\n        override\\n        onlyKyokoPoolConfigurator\\n    {\\n        _initilLiquidity = amount;\\n        emit InitilLiquidityUpdate(amount);\\n    }\\n\\n    function setLiqThreshold(uint16 threshold)\\n        external\\n        override\\n        onlyKyokoPoolConfigurator\\n    {\\n        _liquidationThreshold = threshold;\\n        emit LiquidationThreshold(threshold);\\n    }\\n\\n    function setLockTime(uint32 lockTime)\\n        external\\n        override\\n        onlyKyokoPoolConfigurator\\n    {\\n        _lockTime = lockTime;\\n        emit LockTime(lockTime);\\n    }\\n\\n    function setTokenFactory(address createKToken, address createDebtToken)\\n        external\\n        override\\n        onlyKyokoPoolConfigurator\\n    {\\n        if (createKToken != address(0)) {\\n            _createKToken = createKToken;\\n        }\\n        if (createDebtToken != address(0)) {\\n            _createDebtToken = createDebtToken;\\n        }\\n        emit FactoryUpdate(createKToken, createDebtToken);\\n    }\\n\\n    function switchOnly() external override onlyPoolAdmin {\\n        if (only) {\\n            only = false;\\n        } else {\\n            only = true;\\n        }\\n    }\\n\\n    function createK(uint256 reserveId, string memory _nftSymbol)\\n        internal\\n        returns (address kTokenAddress)\\n    {\\n        (bool success, bytes memory result) = _createKToken.delegatecall(\\n            abi.encodeWithSignature(\\n                \\\"createKToken(address,address,address,uint256,string,string,string)\\\",\\n                WETH,\\n                address(_addressesProvider),\\n                _treasury,\\n                reserveId,\\n                _nftSymbol,\\n                s1,\\n                s2\\n            )\\n        );\\n        require(success, Errors.KT_CREATION_FAILED);\\n\\n        kTokenAddress = abi.decode(result, (address));\\n    }\\n\\n    function createVariableDebtToken(\\n        address _weth,\\n        address _provider,\\n        uint256 _reserveId,\\n        string memory symbol\\n    ) internal returns (address variableAddress) {\\n        address weth = _weth;\\n        IKyokoPoolAddressesProvider provider = IKyokoPoolAddressesProvider(\\n            _provider\\n        );\\n        uint256 reserveId = _reserveId;\\n        string memory s3 = \\\"Kyoko variable bearing \\\";\\n        string memory s4 = \\\"kVariable\\\";\\n        string memory hVariableName = string(\\n            abi.encodePacked(s3, symbol, s1, s2)\\n        );\\n        string memory hVariableSymbol = string(\\n            abi.encodePacked(s4, symbol, s2)\\n        );\\n        VariableDebtToken variableDebtToken = new VariableDebtToken(\\n            provider,\\n            reserveId,\\n            weth,\\n            18,\\n            hVariableName,\\n            hVariableSymbol\\n        );\\n        variableAddress = address(variableDebtToken);\\n\\n        emit CreateVariableToken(msg.sender, variableAddress);\\n    }\\n\\n    function createStable(uint256 reserveId, string memory _nftSymbol)\\n        internal\\n        returns (address stableDebtAddress)\\n    {\\n        (bool success, bytes memory result) = _createDebtToken.delegatecall(\\n            abi.encodeWithSignature(\\n                \\\"createStableDebtToken(address,address,uint256,string,string,string)\\\",\\n                WETH,\\n                address(_addressesProvider),\\n                reserveId,\\n                _nftSymbol,\\n                s1,\\n                s2\\n            )\\n        );\\n        require(success, Errors.SDT_CREATION_FAILED);\\n\\n        stableDebtAddress = abi.decode(result, (address));\\n    }\\n\\n    function _getKyokoPool() internal view returns (IKyokoPool) {\\n        return IKyokoPool(_addressesProvider.getKyokoPool()[0]);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICreditDelegationToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\ninterface ICreditDelegationToken {\\n  event BorrowAllowanceDelegated(\\n    address indexed fromUser,\\n    address indexed toUser,\\n    address asset,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev delegates borrowing power to a user on the specific debt token\\n   * @param delegatee the address receiving the delegated borrowing power\\n   * @param amount the maximum amount being delegated. Delegation will still\\n   * respect the liquidation constraints (even if delegated, a delegatee cannot\\n   * force a delegator HF to go below 1)\\n   **/\\n  function approveDelegation(address delegatee, uint256 amount) external;\\n\\n  /**\\n   * @dev returns the borrow allowance of the user\\n   * @param fromUser The user to giving allowance\\n   * @param toUser The user to give allowance to\\n   * @return the current allowance of toUser\\n   **/\\n  function borrowAllowance(address fromUser, address toUser) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInitializableDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\nimport \\\"./IKyokoPoolAddressesProvider.sol\\\";\\n\\n/**\\n * @title IInitializableDebtToken\\n * @notice Interface for the initialize function common between debt tokens\\n * @author Kyoko\\n **/\\ninterface IInitializableDebtToken {\\n  /**\\n   * @dev Emitted when a debt token is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   * @param pool The address of the associated lending pool\\n   * @param reserveId The id of the reserve\\n   * @param debtTokenDecimals the decimals of the debt token\\n   * @param debtTokenName the name of the debt token\\n   * @param debtTokenSymbol the symbol of the debt token\\n   **/\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    uint256 reserveId,\\n    uint8 debtTokenDecimals,\\n    string debtTokenName,\\n    string debtTokenSymbol\\n  );\\n\\n  /**\\n   * @dev Initializes the debt token.\\n   * @param provider The address of the address provider where this debtToken will be used\\n   * @param reserveId The id of the reserve\\n   * @param underlyingAsset The address of the underlying asset of this kToken (E.g. WETH for hWETH)\\n   * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\n   * @param debtTokenName The name of the token\\n   * @param debtTokenSymbol The symbol of the token\\n   */\\n  function initialize(\\n    IKyokoPoolAddressesProvider provider,\\n    uint256 reserveId,\\n    address underlyingAsset,\\n    uint8 debtTokenDecimals,\\n    string memory debtTokenName,\\n    string memory debtTokenSymbol\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInterestRateStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\nimport \\\"../libraries/utils/DataTypes.sol\\\";\\n\\ninterface IInterestRateStrategy {\\n    event SetMinBorrowTime(uint40 newTime);\\n\\n    event VariableRateUpdated(\\n        uint256 indexed reserveId,\\n        uint256 newBaseStableRate,\\n        uint256 newVariableSlope1,\\n        uint256 newVariableSlope2\\n    );\\n\\n    event StableRateUpdated(\\n        uint256 indexed reserveId,\\n        uint256 newBaseStableRate,\\n        uint256 newVariableSlope1,\\n        uint256 newVariableSlope2\\n    );\\n\\n    event AddNewRate(uint256 reserveId);\\n\\n    function getRate(uint256 reserveId)\\n        external\\n        view\\n        returns (DataTypes.Rate memory);\\n\\n    function getMaxVariableBorrowRate(uint256 reserveId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calculateInterestRates(\\n        uint256 reserveId,\\n        address reserve,\\n        address kToken,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 totalVariableDebt,\\n        uint256 averageStableBorrowRate,\\n        uint256 reserveFactor\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function calculateInterestRates(\\n        DataTypes.Rate memory rate,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 totalVariableDebt,\\n        uint256 averageStableBorrowRate,\\n        uint256 reserveFactor\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n    \\n    function setRate(\\n        uint256 reserveId,\\n        uint256 _optimalUtilizationRate,\\n        uint256 _baseVariableBorrowRate,\\n        uint256 _variableSlope1,\\n        uint256 _variableSlope2,\\n        uint256 _baseStableBorrowRate,\\n        uint256 _stableSlope1,\\n        uint256 _stableSlope2\\n    ) external;\\n\\n    function setVariableRate(\\n        uint256 reserveId,\\n        uint256 _baseVariableRate,\\n        uint256 _variableSlope1,\\n        uint256 _variableSlope2\\n    ) external;\\n\\n    function setStableRate(\\n        uint256 reserveId,\\n        uint256 _baseStableRate,\\n        uint256 _stableSlope1,\\n        uint256 _stableSlope2\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\nimport \\\"./IScaledBalanceToken.sol\\\";\\nimport \\\"./IKyokoPoolAddressesProvider.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IKToken is IERC20Upgradeable, IScaledBalanceToken {\\n    /**\\n     * @dev Emitted when an kToken is initialized\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param pool The address of the associated lending pool\\n     * @param reserveId The id of the reserves\\n     * @param treasury The address of the treasury\\n     * @param kTokenDecimals the decimals of the underlying\\n     * @param kTokenName the name of the kToken\\n     * @param kTokenSymbol the symbol of the kToken\\n     **/\\n    event Initialize(\\n        address indexed underlyingAsset,\\n        address indexed pool,\\n        uint256 indexed reserveId,\\n        address treasury,\\n        uint8 kTokenDecimals,\\n        string kTokenName,\\n        string kTokenSymbol\\n    );\\n\\n    /**\\n     * @dev Initializes the kToken\\n     * @param pool The address of the lending pool where this kToken will be used\\n     * @param reserveId The id of the reserves\\n     * @param treasury The address of the Kyoko treasury, receiving the fees on this kToken\\n     * @param underlyingAsset The address of the underlying asset of this kToken (E.g. WETH for kWETH)\\n     * @param kTokenDecimals The decimals of the kToken, same as the underlying asset's\\n     * @param kTokenName The name of the kToken\\n     * @param kTokenSymbol The symbol of the kToken\\n     */\\n    function initialize(\\n        IKyokoPoolAddressesProvider pool,\\n        uint256 reserveId,\\n        address treasury,\\n        address underlyingAsset,\\n        uint8 kTokenDecimals,\\n        string calldata kTokenName,\\n        string calldata kTokenSymbol\\n    ) external;\\n\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param from The address performing the mint\\n     * @param value The amount being\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    event Mint(address indexed from, uint256 value, uint256 index);\\n\\n    /**\\n     * @dev Mints `amount` kTokens to `user`\\n     * @param user The address receiving the minted tokens\\n     * @param amount The amount of tokens getting minted\\n     * @param index The new liquidity index of the reserve\\n     * @return `true` if the the previous balance of the user was 0\\n     */\\n    function mint(\\n        address user,\\n        uint256 amount,\\n        uint256 index\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted after kTokens are burned\\n     * @param from The owner of the kTokens, getting them burned\\n     * @param target The address that will receive the underlying\\n     * @param value The amount being burned\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    event Burn(\\n        address indexed from,\\n        address indexed target,\\n        uint256 value,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @dev Emitted during the transfer action\\n     * @param from The user whose tokens are being transferred\\n     * @param to The recipient\\n     * @param value The amount being transferred\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    event BalanceTransfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @dev Burns kTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n     * @param user The owner of the kTokens, getting them burned\\n     * @param receiverOfUnderlying The address that will receive the underlying\\n     * @param amount The amount being burned\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    function burn(\\n        address user,\\n        address receiverOfUnderlying,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    /**\\n     * @dev Burns kTokens from `user`\\n     * @param user The owner of the kTokens, getting them burned\\n     * @param amount The amount being burned\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    function burn(address user, uint256 amount, uint256 index) external;\\n\\n    /**\\n     * @dev Mints kTokens to the reserve treasury\\n     * @param amount The amount of tokens getting minted\\n     * @param index The new liquidity index of the reserve\\n     */\\n    function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n    /**\\n     * @dev Transfers kTokens in the event of a borrow being liquidated, in case the liquidators reclaims the kToken\\n     * @param from The address getting liquidated, current owner of the kTokens\\n     * @param to The recipient\\n     * @param value The amount of tokens getting transferred\\n     **/\\n    function transferOnLiquidation(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external;\\n\\n    /**\\n     * @dev Transfers the underlying asset to `target`. Used by the KyokoPool to transfer\\n     * assets in borrow(), withdraw() and flashLoan()\\n     * @param user The recipient of the underlying\\n     * @param amount The amount getting transferred\\n     * @return The amount transferred\\n     **/\\n    function transferUnderlyingTo(\\n        address user,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    function transferUnderlyingNFTTo(\\n        address nft,\\n        address target,\\n        uint256 nftId\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Invoked to execute actions on the kToken side after a repayment.\\n     * @param user The user executing the repayment\\n     * @param amount The amount getting repaid\\n     **/\\n    function handleRepayment(address user, uint256 amount) external;\\n\\n    /**\\n     * @dev Returns the address of the underlying asset of this kToken (E.g. WETH for aWETH)\\n     **/\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKyokoFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\nimport \\\"../libraries/utils/DataTypes.sol\\\";\\n\\ninterface IKyokoFactory {\\n    event CreatePool(uint256 indexed blockNumber, address kToken, address variableDebtAddress, address stableDebtAddress);\\n    event CreateKToken(address indexed user, address kToken);\\n    event CreateVariableToken(address indexed user, address variableDebtAddress);\\n    event CreateStableToken(address indexed user, address stableDebtAddress);\\n    event FactorUpdate(uint16 factor);\\n    event InitilLiquidityUpdate(uint256 amount);\\n    event LiquidationThreshold(uint16 threshold);\\n    event LockTime(uint32 lockTime);\\n    event FactoryUpdate(address kToken, address debtToken);\\n\\n    function createPool(\\n        address _nftAddress\\n    ) external returns (address kTokenAddress, address variableDebtAddress, address stableDebtAddress);\\n\\n    function createSharedPool() external returns (address kTokenAddress, address variableDebtAddress, address stableDebtAddress);\\n\\n    function initReserve(\\n        address _nftAddress,\\n        uint40 _period,\\n        uint16 _ratio,\\n        uint24 _liqDuration,\\n        uint24 _bidDuration,\\n        bool _enabledStableBorrow,\\n        address kTokenAddress, \\n        address variableDebtAddress, \\n        address stableDebtAddress,\\n        DataTypes.RateStrategyInput memory _rateInput\\n    ) external payable;\\n\\n    function setFactor(uint16 _factor) external;\\n    function setInitialLiquidity(uint256 amount) external;\\n    function setLiqThreshold(uint16 threshold) external;\\n    function setLockTime(uint32 lockTime) external;\\n    function setTokenFactory(address _createKToken, address _createDebtToken) external;\\n    function switchOnly() external;\\n}\\n\\ninterface INFT {\\n    function symbol() external view returns (string memory);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IKyokoPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\nimport \\\"../libraries/utils/DataTypes.sol\\\";\\n\\ninterface IKyokoPool {\\n    /**\\n     * @dev Emitted on deposit()\\n     * @param reserveId The id of the reserve\\n     * @param user The beneficiary of the deposit, receiving the kTokens\\n     * @param onBehalfOf The beneficiary of the deposit, receiving the kTokens\\n     * @param amount The amount deposited\\n     **/\\n    event Deposit(\\n        uint256 indexed reserveId,\\n        address indexed user,\\n        address indexed onBehalfOf,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserveId The id of the reserve\\n     * @param user The address initiating the withdrawal, owner of kTokens\\n     * @param to Address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     **/\\n    event Withdraw(\\n        uint256 indexed reserveId,\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserveId The id of the reserve\\n     * @param borrowId The id of the borrow info\\n     * @param asset The address of the borrowed nft\\n     * @param nftId The tokenId of the borrowed nft\\n     * @param borrowMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param amount The amount of the borrow\\n     * @param borrowRate The numeric rate at which the user has borrowed\\n     **/\\n    event Borrow(\\n        uint256 indexed reserveId,\\n        uint256 indexed borrowId,\\n        address indexed asset,\\n        uint256 nftId,\\n        uint256 borrowMode,\\n        uint256 amount,\\n        uint256 borrowRate\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserveId The id of the reserve\\n     * @param borrowId The id of the borrow info\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param nft The nft corresponding to repayment\\n     * @param nftId The tokenId of the borrowed nft\\n     * @param amount The amount repaid\\n     **/\\n    event Repay(\\n        uint256 indexed reserveId,\\n        uint256 indexed borrowId,\\n        address user,\\n        address indexed nft,\\n        uint256 nftId,\\n        uint256 amount\\n    );\\n\\n    event LiquidationCall(\\n        uint256 indexed reserveId,\\n        uint256 indexed borrowId,\\n        address indexed user,\\n        address nft,\\n        uint256 id,\\n        uint256 amount,\\n        uint256 time\\n    );\\n\\n    event BidCall(\\n        uint256 indexed reserveId,\\n        uint256 indexed borrowId,\\n        address indexed user,\\n        uint256 amount,\\n        uint256 time\\n    );\\n\\n    event ClaimCall(\\n        uint256 indexed reserveId,\\n        uint256 indexed borrowId,\\n        address indexed user,\\n        uint256 time\\n    );\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserveId The id of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     **/\\n    event RebalanceStableBorrowRate(\\n        uint256 indexed reserveId,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted when the pause is triggered.\\n     */\\n    event Paused();\\n\\n    /**\\n     * @dev Emitted when the pause is lifted.\\n     */\\n    event Unpaused();\\n\\n    /**\\n     * @dev Emitted when new stable debt is increased\\n     * @param reserveId The id of the reserve\\n     * @param asset The address of nft\\n     * @param user The address of the user who triggered the minting\\n     * @param amount The amount minted\\n     * @param currentBalance The current balance of the user\\n     * @param balanceIncrease The increase in balance since the last action of the user\\n     * @param newRate The rate of the debt after the minting\\n     * @param newTotalSupply The new total supply of the stable debt token after the action\\n     **/\\n    event StableDebtIncrease(\\n        uint256 indexed reserveId,\\n        address indexed asset,\\n        address indexed user,\\n        uint256 amount,\\n        uint256 currentBalance,\\n        uint256 balanceIncrease,\\n        uint256 newRate,\\n        uint256 avgStableRate,\\n        uint256 newTotalSupply\\n    );\\n\\n    /**\\n     * @dev Emitted when new stable debt is decreased\\n     * @param reserveId The id of the reserve\\n     * @param user The address of the user\\n     * @param amount The amount being burned\\n     * @param currentBalance The current balance of the user\\n     * @param balanceIncrease The the increase in balance since the last action of the user\\n     * @param avgStableRate The new average stable rate after the burning\\n     * @param newTotalSupply The new total supply of the stable debt token after the action\\n     **/\\n    event StableDebtDecrease(\\n        uint256 indexed reserveId,\\n        address indexed asset,\\n        address indexed user,\\n        uint256 amount,\\n        uint256 currentBalance,\\n        uint256 balanceIncrease,\\n        uint256 avgStableRate,\\n        uint256 newTotalSupply\\n    );\\n\\n    /**\\n     * @dev Emitted when new varibale debt is increased\\n     * @param reserveId The id of the reserve\\n     * @param asset The address performing the nft\\n     * @param user The address of the user on which behalf minting has been performed\\n     * @param value The amount to be minted\\n     * @param index The last index of the reserve\\n     **/\\n    event VariableDebtIncrease(\\n        uint256 indexed reserveId,\\n        address indexed asset,\\n        address indexed user,\\n        uint256 value,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @dev Emitted when variable debt is decreased\\n     * @param reserveId The id of the reserve\\n     * @param asset The address of the nft\\n     * @param user The user which debt has been burned\\n     * @param amount The amount of debt being burned\\n     * @param index The index of the user\\n     **/\\n    event VariableDebtDecrease(\\n        uint256 indexed reserveId,\\n        address indexed asset,\\n        address indexed user,\\n        uint256 amount,\\n        uint256 index\\n    );\\n\\n    event SetMinBorrowTime(uint40 time);\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying kTokens.\\n     * @param reserveId The id of the reserve\\n     * @param onBehalfOf The beneficiary of the deposit, receiving the kTokens\\n     **/\\n    function deposit(uint256 reserveId, address onBehalfOf) external payable;\\n\\n    /**\\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent kTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param reserveId The id of the reserve\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole kToken balance\\n     * @param to Address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        uint256 reserveId,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows users to borrow an estimate `amount` of the reserve underlying asset according to the value of the nft\\n     * @param reserveId The id of the reserve\\n     * @param asset The address of the nft to be borrowed\\n     * @param nftId The tokenId of the nft to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf The address that will recieve the borrow asset and debt token (must be msg.sender or the msg.sender must be punkGateway)\\n     **/\\n    function borrow(\\n        uint256 reserveId,\\n        address asset,\\n        uint256 nftId,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve\\n     * @param borrowId The id of the borrow to repay\\n     * @param onBehalfOf The address that will burn the debt token (must be msg.sender or the msg.sender must be punkGateway)\\n     * @return The final amount repaid\\n     **/\\n    function repay(\\n        uint256 borrowId,\\n        address onBehalfOf\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n     *        borrowed at a stable rate and depositors are not earning enough\\n     * @param reserveId The id of the reserve\\n     * @param user The address of the user to be rebalanced\\n     **/\\n    function rebalanceStableBorrowRate(\\n        uint256 reserveId,\\n        address user\\n    ) external;\\n\\n    /**\\n     * @dev Function to liquidate an expired borrow info.\\n     * @param borrowId The id of liquidate borrow target\\n     **/\\n    function liquidationCall(\\n        uint256 borrowId\\n    ) external payable;\\n\\n    /**\\n     * @dev Function to bid for the liquidate auction.\\n     * @param borrowId The id of liquidate borrow target\\n     **/\\n    function bidCall(uint256 borrowId) external payable;\\n\\n    /**\\n     * @dev Function to claim the liquidate NFT.\\n     * @param borrowId The id of liquidate borrow target\\n     **/\\n    function claimCall(uint256 borrowId) external;\\n\\n    function claimCall(\\n        uint256 borrowId,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @dev Returns the list of user's borrowId\\n     * @param user The address of the user\\n     **/\\n    function getUserBorrowList(\\n        address user\\n    ) external view returns (uint256[] memory borrowIds);\\n\\n    /**\\n     * @dev Returns the list of borrowId in auction\\n     **/\\n    function getAuctions() external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns the list of user's borrowId\\n     * @param borrowId The id of the borrow info\\n     **/\\n    function getDebt(uint256 borrowId) external view returns (uint256 debt);\\n\\n    function getInitialLockTime(\\n        uint256 reserveId\\n    ) external view returns (uint256);\\n\\n    function enabledLiquidation(uint256 borrowId) external view returns (bool);\\n\\n    function initReserve(\\n        address asset,\\n        address kTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    function updateReserveNFT(\\n        uint256 reserveId,\\n        address asset,\\n        bool flag\\n    ) external;\\n\\n    function setReserveInterestRateStrategyAddress(\\n        uint256 reserveId,\\n        address rateStrategyAddress\\n    ) external;\\n\\n    function burnLiquidity(uint256 reserveId, uint256 amount) external;\\n\\n    function setConfiguration(\\n        uint256 reserveId,\\n        uint256 configuration\\n    ) external;\\n\\n    /**\\n     * @dev Returns the configuration of the reserve\\n     * @param reserveId The id of the reserve\\n     * @return The configuration of the reserve\\n     **/\\n    function getConfiguration(\\n        uint256 reserveId\\n    ) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the normalized income normalized income of the reserve\\n     * @param reserveId The id of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(\\n        uint256 reserveId\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized variable debt per unit of asset\\n     * @param reserveId The id of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(\\n        uint256 reserveId\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the state and configuration of the reserve\\n     * @param reserveId The id of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(\\n        uint256 reserveId\\n    ) external view returns (DataTypes.ReserveData memory);\\n\\n    function getReservesList() external view returns (address[] memory);\\n\\n    function getBorrowInfo(\\n        uint256 borrowId\\n    ) external view returns (DataTypes.BorrowInfo memory);\\n\\n    function setPause(bool val) external;\\n\\n    function paused() external view returns (bool);\\n\\n    function getReservesCount() external view returns (uint256);\\n}\\n\\ninterface IPriceOracle {\\n    function getPrice(address _nft) external returns (int);\\n\\n    function getPrice_view(address _nft) external view returns (int);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKyokoPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Kyoko Governance\\n * @author Kyoko\\n **/\\ninterface IKyokoPoolAddressesProvider {\\n    event MarketIdSet(string newMarketId);\\n    event KyokoPoolUpdated(address indexed newAddress);\\n    event ConfigurationAdminUpdated(address indexed newAddress);\\n    event EmergencyAdminUpdated(address indexed newAddress);\\n    event KyokoPoolLiquidatorUpdated(address indexed newAddress);\\n    event KyokoPoolConfiguratorUpdated(address indexed newAddress);\\n    event KyokoPoolFactoryUpdated(address indexed newAddress);\\n    event RateStrategyUpdated(address indexed newAddress);\\n    event PriceOracleUpdated(address indexed newAddress);\\n    event AddressSet(bytes32 id, address indexed newAddress);\\n    event AddressRevoke(bytes32 id, address indexed oldAddress);\\n\\n    function getMarketId() external view returns (string memory);\\n\\n    function setMarketId(string calldata marketId) external;\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function revokeAddress(bytes32 id, address oldAddress) external;\\n\\n    function getAddress(bytes32 id) external view returns (address[] memory);\\n\\n    function hasRole(bytes32 id, address account) external view returns (bool);\\n\\n    function getKyokoPool() external view returns (address[] memory);\\n\\n    function isKyokoPool(address account) external view returns (bool);\\n\\n    function setKyokoPool(address pool) external;\\n\\n    function getKyokoPoolLiquidator() external view returns (address[] memory);\\n    \\n    function isLiquidator(address account) external view returns (bool);\\n\\n    function setKyokoPoolLiquidator(address liquidator) external;\\n\\n    function getKyokoPoolConfigurator() external view returns (address[] memory);\\n    \\n    function isConfigurator(address account) external view returns (bool);\\n\\n    function setKyokoPoolConfigurator(address configurator) external;\\n\\n    function getKyokoPoolFactory() external view returns (address[] memory);\\n    \\n    function isFactory(address account) external view returns (bool);\\n\\n    function setKyokoPoolFactory(address factory) external;\\n\\n    function getPoolAdmin() external view returns (address[] memory);\\n    \\n    function isAdmin(address account) external view returns (bool);\\n\\n    function setPoolAdmin(address admin) external;\\n\\n    function getEmergencyAdmin() external view returns (address[] memory);\\n    \\n    function isEmergencyAdmin(address account) external view returns (bool);\\n\\n    function setEmergencyAdmin(address admin) external;\\n\\n    function getPriceOracle() external view returns (address[] memory);\\n\\n    function isOracle(address account) external view returns (bool);\\n\\n    function setPriceOracle(address priceOracle) external;\\n\\n    function getRateStrategy() external view returns (address[] memory);\\n\\n    function isStrategy(address account) external view returns (bool);\\n\\n    function setRateStrategy(address rateStrategy) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKyokoPoolConfigurator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\nimport \\\"../libraries/utils/DataTypes.sol\\\";\\n\\ninterface IKyokoPoolConfigurator {\\n    /**\\n     * @dev Emitted when a reserve is initialized.\\n     * @param reserveId The id of the reserve\\n     * @param asset The address of the underlying nft asset of the reserve\\n     * @param kToken The address of the associated kToken contract\\n     * @param stableDebtToken The address of the associated stable rate debt token\\n     * @param variableDebtToken The address of the associated variable rate debt token\\n     * @param interestRateStrategyAddress The address of the interest rate strategy for the reserve\\n     **/\\n    event ReserveInitialized(\\n        uint256 indexed reserveId,\\n        address indexed asset,\\n        address indexed kToken,\\n        address stableDebtToken,\\n        address variableDebtToken,\\n        address interestRateStrategyAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a reserve is activated\\n     * @param reserveId The id of the reserve\\n     **/\\n    event ReserveActivated(uint256 indexed reserveId);\\n\\n    /**\\n     * @dev Emitted when a reserve is deactivated\\n     * @param reserveId The id of the reserve\\n     **/\\n    event ReserveDeactivated(uint256 indexed reserveId);\\n\\n    /**\\n     * @dev Emitted when a reserve is frozen\\n     * @param reserveId The id of the reserve\\n     **/\\n    event ReserveFrozen(uint256 indexed reserveId);\\n\\n    /**\\n     * @dev Emitted when a reserve is unfrozen\\n     * @param reserveId The id of the reserve\\n     **/\\n    event ReserveUnfrozen(uint256 indexed reserveId);\\n\\n    /**\\n     * @dev Emitted when a reserve factor is updated\\n     * @param reserveId The id of the reserve\\n     * @param factor The new reserve factor\\n     **/\\n    event ReserveFactorChanged(uint256 indexed reserveId, uint256 factor);\\n\\n    /**\\n     * @dev Emitted when a borrow ratio is updated\\n     * @param reserveId The id of the reserve\\n     * @param ratio The new borrow ratio\\n     **/\\n    event ReserveBorrowRatioChanged(uint256 indexed reserveId, uint256 ratio);\\n\\n    /**\\n     * @dev Emitted when a fixed borrow perdio is updated\\n     * @param reserveId The id of the reserve\\n     * @param period The new fixed borrow period\\n     **/\\n    event ReservePeriodChanged(uint256 indexed reserveId, uint256 period);\\n\\n    /**\\n     * @dev Emitted when a fixed borrow perdio is updated\\n     * @param reserveId The id of the reserve\\n     * @param time The new minimum borrow time\\n     **/\\n    event ReserveMinBorrowTimeChanged(uint256 indexed reserveId, uint256 time);\\n\\n    /**\\n     * @dev Emitted when borrowing is enabled on a reserve\\n     * @param reserveId The id of the reserve\\n     * @param stableRateEnabled True if stable rate borrowing is enabled, false otherwise\\n     **/\\n    event BorrowingEnabledOnReserve(\\n        uint256 indexed reserveId,\\n        bool stableRateEnabled\\n    );\\n\\n    /**\\n     * @dev Emitted when borrowing is disabled on a reserve\\n     * @param reserveId The id of the reserve\\n     **/\\n    event BorrowingDisabledOnReserve(uint256 indexed reserveId);\\n\\n    /**\\n     * @dev Emitted when stable rate borrowing is enabled on a reserve\\n     * @param reserveId The id of the reserve\\n     **/\\n    event StableRateEnabledOnReserve(uint256 indexed reserveId);\\n\\n    /**\\n     * @dev Emitted when stable rate borrowing is disabled on a reserve\\n     * @param reserveId The id of the reserve\\n     **/\\n    event StableRateDisabledOnReserve(uint256 indexed reserveId);\\n\\n    /**\\n     * @dev Emitted when a reserve liquidation threshold is updated\\n     * @param reserveId The id of the reserve\\n     * @param threshold The new liquidation threshold of the reserve\\n     **/\\n    event ReserveLiquidationThresholdChanged(\\n        uint256 indexed reserveId,\\n        uint256 threshold\\n    );\\n\\n    /**\\n     * @dev Emitted when a reserve liquidation duration is updated\\n     * @param reserveId The id of the reserve\\n     * @param duration The duration of the liquidation\\n     **/\\n    event ReserveLiquidationDurationChanged(\\n        uint256 indexed reserveId,\\n        uint256 duration\\n    );\\n\\n    /**\\n     * @dev Emitted when a reserve bid duration is updated\\n     * @param reserveId The id of the reserve\\n     * @param duration The duration of each auction\\n     **/\\n    event ReserveBidDurationChanged(\\n        uint256 indexed reserveId,\\n        uint256 duration\\n    );\\n\\n    /**\\n     * @dev Emitted when a reserve initial liquidity lock time is updated\\n     * @param reserveId The id of the reserve\\n     * @param lockTime The lock time\\n     **/\\n    event ReserveLockTimeChanged(uint256 indexed reserveId, uint256 lockTime);\\n\\n    /**\\n     * @dev Emitted when a reserve type is updated\\n     * @param reserveId The id of the reserve\\n     * @param reserveType The reserve type\\n     **/\\n    event ReserveTypeChanged(uint256 indexed reserveId, uint256 reserveType);\\n\\n    /**\\n     * @dev Emitted when a reserve initial liquidity is burned\\n     * @param reserveId The id of the reserve\\n     * @param amount The burned amount\\n     **/\\n    event ReserveInitialLiquidityBurned(\\n        uint256 indexed reserveId,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted when a reserve interest strategy contract is updated\\n     * @param reserveId The id of the reserve\\n     * @param strategy The new address of the interest strategy contract\\n     **/\\n    event ReserveInterestRateStrategyChanged(\\n        uint256 indexed reserveId,\\n        address strategy\\n    );\\n\\n    /**\\n     * @dev Emitted when an kToken implementation is upgraded\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param proxy The kToken proxy address\\n     * @param implementation The new kToken implementation\\n     **/\\n    event kTokenUpgraded(\\n        address indexed asset,\\n        address indexed proxy,\\n        address indexed implementation\\n    );\\n\\n    /**\\n     * @dev Emitted when the implementation of a stable debt token is upgraded\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param proxy The stable debt token proxy address\\n     * @param implementation The new kToken implementation\\n     **/\\n    event StableDebtTokenUpgraded(\\n        address indexed asset,\\n        address indexed proxy,\\n        address indexed implementation\\n    );\\n\\n    /**\\n     * @dev Emitted when the implementation of a variable debt token is upgraded\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param proxy The variable debt token proxy address\\n     * @param implementation The new kToken implementation\\n     **/\\n    event VariableDebtTokenUpgraded(\\n        address indexed asset,\\n        address indexed proxy,\\n        address indexed implementation\\n    );\\n\\n    function factoryInitReserve(\\n        DataTypes.InitReserveInput memory input,\\n        DataTypes.RateStrategyInput memory rateInput\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IScaledBalanceToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n   * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   **/\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled balance and the scaled total supply\\n   **/\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   **/\\n  function scaledTotalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStableDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\nimport \\\"./IInitializableDebtToken.sol\\\";\\n\\n/**\\n * @title IStableDebtToken\\n * @notice Defines the interface for the stable debt token\\n * @dev It does not inherit from IERC20 to save in code size\\n * @author Kyoko\\n **/\\n\\ninterface IStableDebtToken is IInitializableDebtToken {\\n  /**\\n   * @dev Emitted when new stable debt is minted\\n   * @param user The address of the user who triggered the minting\\n   * @param onBehalfOf The recipient of stable debt tokens\\n   * @param amount The amount minted\\n   * @param currentBalance The current balance of the user\\n   * @param balanceIncrease The increase in balance since the last action of the user\\n   * @param newRate The rate of the debt after the minting\\n   * @param avgStableRate The new average stable rate after the minting\\n   * @param newTotalSupply The new total supply of the stable debt token after the action\\n   **/\\n  event Mint(\\n    address indexed user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 currentBalance,\\n    uint256 balanceIncrease,\\n    uint256 newRate,\\n    uint256 avgStableRate,\\n    uint256 newTotalSupply\\n  );\\n\\n  /**\\n   * @dev Emitted when new stable debt is burned\\n   * @param user The address of the user\\n   * @param amount The amount being burned\\n   * @param currentBalance The current balance of the user\\n   * @param balanceIncrease The the increase in balance since the last action of the user\\n   * @param avgStableRate The new average stable rate after the burning\\n   * @param newTotalSupply The new total supply of the stable debt token after the action\\n   **/\\n  event Burn(\\n    address indexed user,\\n    uint256 amount,\\n    uint256 currentBalance,\\n    uint256 balanceIncrease,\\n    uint256 avgStableRate,\\n    uint256 newTotalSupply\\n  );\\n\\n  /**\\n   * @dev Mints debt token to the `onBehalfOf` address.\\n   * - The resulting rate is the weighted average between the rate of the new debt\\n   * and the rate of the previous debt\\n   * @param user The address receiving the borrowed underlying, being the delegatee in case\\n   * of credit delegate, or same as `onBehalfOf` otherwise\\n   * @param onBehalfOf The address receiving the debt tokens\\n   * @param amount The amount of debt tokens to mint\\n   * @param rate The rate of the debt being minted\\n   **/\\n  function mint(\\n    address user,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 rate\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Burns debt of `user`\\n   * - The resulting rate is the weighted average between the rate of the new debt\\n   * and the rate of the previous debt\\n   * @param user The address of the user getting his debt burned\\n   * @param amount The amount of debt tokens getting burned\\n   **/\\n  function burn(address user, uint256 amount) external;\\n\\n  /**\\n   * @dev Returns the average rate of all the stable rate loans.\\n   * @return The average stable rate\\n   **/\\n  function getAverageStableRate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the stable rate of the user debt\\n   * @return The stable rate of the user\\n   **/\\n  function getUserStableRate(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the timestamp of the last update of the user\\n   * @return The timestamp\\n   **/\\n  function getUserLastUpdated(address user) external view returns (uint40);\\n\\n  /**\\n   * @dev Returns the principal, the total supply and the average stable rate\\n   **/\\n  function getSupplyData()\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint40\\n    );\\n\\n  /**\\n   * @dev Returns the timestamp of the last update of the total supply\\n   * @return The timestamp\\n   **/\\n  function getTotalSupplyLastUpdated() external view returns (uint40);\\n\\n  /**\\n   * @dev Returns the total supply and the average stable rate\\n   **/\\n  function getTotalSupplyAndAvgRate() external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the principal debt balance of the user\\n   * @return The debt balance of the user since the last burn/mint action\\n   **/\\n  function principalBalanceOf(address user) external view returns (uint256);\\n\\n  function balanceOfAmount(address account, uint256 amount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVariableDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\nimport \\\"./IScaledBalanceToken.sol\\\";\\nimport \\\"./IInitializableDebtToken.sol\\\";\\n\\n/**\\n * @title IVariableDebtToken\\n * @author Kyoko\\n * @notice Defines the basic interface for a variable debt token.\\n **/\\ninterface IVariableDebtToken is IScaledBalanceToken, IInitializableDebtToken {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param from The address performing the mint\\n   * @param onBehalfOf The address of the user on which behalf minting has been performed\\n   * @param value The amount to be minted\\n   * @param index The last index of the reserve\\n   **/\\n  event Mint(address indexed from, address indexed onBehalfOf, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Mints debt token to the `onBehalfOf` address\\n   * @param user The address receiving the borrowed underlying, being the delegatee in case\\n   * of credit delegate, or same as `onBehalfOf` otherwise\\n   * @param onBehalfOf The address receiving the debt tokens\\n   * @param amount The amount of debt being minted\\n   * @param index The variable debt index of the reserve\\n   * @return `true` if the the previous balance of the user is 0\\n   **/\\n  function mint(\\n    address user,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when variable debt is burnt\\n   * @param user The user which debt has been burned\\n   * @param amount The amount of debt being burned\\n   * @param index The index of the user\\n   **/\\n  event Burn(address indexed user, uint256 amount, uint256 index);\\n\\n  /**\\n   * @dev Burns user variable debt\\n   * @param user The user which debt is burnt\\n   * @param index The variable debt index of the reserve\\n   **/\\n  function burn(\\n    address user,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  function balanceOfAmount(address user, uint256 amount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/utils/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        // variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        // the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        uint40 lastUpdateTimestamp;\\n        //tokens addresses\\n        address kTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint256 id;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        // bit 0-15: factor\\n        // bit 16-31: borrow ratio\\n        // bit 32-71: period\\n        // bit 72-111: min borrow time\\n        // bit 112: reserve is active\\n        // bit 113-128: Liq. threshold\\n        // bit 129: borrowing is enabled\\n        // bit 130: stable rate borrowing enabled\\n        // bit 131-154: liquidation duration\\n        // bit 155-178: auction duration\\n        // bit 179: reserve is frozen\\n        // bit 180-211: initial liquidity lock period\\n        // bit 212-219: reserve type\\n        uint256 data;\\n    }\\n\\n    struct Request {\\n        address user;\\n        address nft;\\n        uint256 id;\\n        InterestRateMode rateMode;\\n        uint256 reserveId;\\n    }\\n\\n    enum Status {\\n        BORROW,\\n        REPAY,\\n        AUCTION,\\n        WITHDRAW\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n\\n    struct BorrowInfo {\\n        uint256 reserveId;\\n        address nft;\\n        uint256 nftId;\\n        address user;\\n        uint64 startTime;\\n        uint256 principal;\\n        uint256 borrowId;\\n        uint64 liquidateTime;\\n        Status status;\\n        InterestRateMode rateMode;\\n    }\\n\\n    struct Auction {\\n        // ID for the Noun (ERC721 token ID)\\n        uint256 borrowId;\\n        // The current highest bid amount\\n        uint256 amount;\\n        // The time that the auction started\\n        uint256 startTime;\\n        // The time that the auction is scheduled to end\\n        uint256 endTime;\\n        // The address of the current highest bid\\n        address payable bidder;\\n        // Whether or not the auction has been settled\\n        bool settled;\\n    }\\n\\n    struct InitReserveInput {\\n        uint256 reserveId;\\n        address kTokenImpl;\\n        address stableDebtTokenImpl;\\n        address variableDebtTokenImpl;\\n        address interestRateStrategyAddress;\\n        address underlyingAsset;\\n        address treasury;\\n        uint16 factor;\\n        uint16 borrowRatio;\\n        uint40 period;\\n        uint40 minBorrowTime;\\n        uint16 liqThreshold;\\n        uint24 liqDuration;\\n        uint24 bidDuration;\\n        uint32 lockTime;\\n        bool stableBorrowed;\\n    }\\n\\n    struct RateStrategyInput {\\n        uint256 reserveId;\\n        uint256 optimalUtilizationRate;\\n        uint256 baseVariableBorrowRate;\\n        uint256 variableSlope1;\\n        uint256 variableSlope2;\\n        uint256 baseStableBorrowRate;\\n        uint256 stableSlope1;\\n        uint256 stableSlope2;\\n    }\\n    \\n    struct Rate {\\n        /**\\n         * @dev this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates.\\n         * Expressed in ray\\n         **/\\n        uint256 optimalUtilizationRate;\\n        /**\\n         * @dev This constant represents the excess utilization rate above the optimal. It's always equal to\\n         * 1-optimal utilization rate. Added as a constant here for gas optimizations.\\n         * Expressed in ray\\n         **/\\n        uint256 excessUtilizationRate;\\n        // Base variable borrow rate when Utilization rate = 0. Expressed in ray\\n        uint256 baseVariableBorrowRate;\\n        // Slope of the variable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n        uint256 variableRateSlope1;\\n        // Slope of the variable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n        uint256 variableRateSlope2;\\n        // Base stable borrow rate when Utilization rate = 0. Expressed in ray\\n        uint256 baseStableBorrowRate;\\n        // Slope of the stable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n        uint256 stableRateSlope1;\\n        // Slope of the stable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n        uint256 stableRateSlope2;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/utils/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Errors library\\n * @author Kyoko\\n * @notice Defines the error messages emitted by the different contracts of the Kyoko protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (KToken, VariableDebtToken and StableDebtToken)\\n *  - KT = KToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - KP = KyokoPool\\n *  - KF = KyokoFactory\\n *  - KPC = KyokoPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - KPCM = KyokoPoolCollateralManager\\n *  - P = Pausable\\n */\\nlibrary Errors {\\n  //common errors\\n  string public constant CALLER_NOT_POOL_ADMIN = '25'; // 'The caller must be the pool admin'\\n  string public constant BORROW_ALLOWANCE_NOT_ENOUGH = '26'; // User borrows on behalf, but allowance are too small\\n  string public constant ERROR = '27'; // User borrows on behalf, but allowance are too small\\n\\n  //contract specific errors\\n  string public constant VL_INVALID_AMOUNT = '1'; // 'Amount must be greater than 0'\\n  string public constant VL_NO_ACTIVE_RESERVE = '2'; // 'Action requires an active reserve'\\n  string public constant VL_RESERVE_FROZEN = '3'; // 'Action cannot be performed because the reserve is frozen'\\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = '4'; // 'User cannot withdraw more than the available balance'\\n  string public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = '5'; // 'Invalid interest rate mode selected'\\n  string public constant VL_BORROWING_NOT_ENABLED = '6'; // 'Borrowing is not enabled'\\n  string public constant VL_STABLE_BORROWING_NOT_ENABLED = '7'; // stable borrowing not enabled\\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = '8'; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\\n  string public constant VL_NOT_NFT_OWNER = '9'; // 'User is not the owner of the nft'\\n  string public constant VL_NOT_SUPPORT = '10'; // 'User's nft for borrow is not support'\\n  string public constant VL_TOO_EARLY = '11'; // 'Action is earlier than requested'\\n  string public constant VL_TOO_LATE = '12'; // 'Action is later than requested'\\n  string public constant VL_BAD_STATUS = '13'; // 'Action with wrong borrow status'\\n  string public constant VL_INVALID_USER = '14'; // 'User is not borrow owner'\\n  string public constant VL_AUCTION_ALREADY_SETTLED = '15'; // 'Auction is already done'\\n  string public constant VL_BAD_PRICE_TO_REPAY = '16'; // 'The floor price below liquidation price'\\n  string public constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = '31'; // 'User does not have any stable rate loan for this reserve'\\n  string public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '32'; // 'Interest rate rebalance conditions were not met'\\n  string public constant LP_LIQUIDATION_CALL_FAILED = '33'; // 'Liquidation call failed'\\n  string public constant LP_REQUESTED_AMOUNT_TOO_SMALL = '34'; // 'The requested amount is too small for an action.'\\n  string public constant LP_CALLER_NOT_KYOKO_POOL_CONFIGURATOR = '35'; // 'The caller of the function is Kyoko pool configurator'\\n  string public constant LP_CALLER_NOT_KYOKO_POOL_ORACLE = '36'; // 'The caller of the function is not the Kyoko pool oracle'\\n  string public constant LP_CALLER_NOT_KYOKO_POOL_FACTORY = '37'; // 'The caller of the function is not the Kyoko pool factory'\\n  string public constant LP_NFT_ALREADY_EXIST = '38'; // 'The initial reserve nft is already exist'\\n  string public constant LP_WETH_TRANSFER_FAILED = '39'; // 'Failed to transfer eth and weth'\\n  string public constant LP_BORROW_FAILED = '41'; // 'Can't be borrowed'\\n  string public constant LP_LIQUIDITY_INSUFFICIENT = '42'; // 'Insufficient pool balance'\\n  string public constant LP_IS_PAUSED = '43'; // 'Pool is paused'\\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = '44';\\n  string public constant LP_NOT_CONTRACT = '45';\\n  string public constant LP_NFT_NOT_SUPPORT = '46';\\n  string public constant CT_CALLER_MUST_BE_KYOKO_POOL = '51'; // 'The caller of this function must be a Kyoko pool'\\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = '52'; // 'Reserve has already been initialized'\\n  string public constant KPC_RESERVE_LIQUIDITY_NOT_0 = '53'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant KPC_CALLER_NOT_EMERGENCY_ADMIN = '54'; // 'The caller must be the emergency admin'\\n  string public constant KPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '55'; // 'Health factor is not below the threshold'\\n  string public constant KPCM_LIQUIDATION_DISABLED = '56'; // 'Health factor is not below the threshold'\\n  string public constant KPCM_NO_ERRORS = '57'; // 'No errors'\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = '58';\\n  string public constant MATH_ADDITION_OVERFLOW = '59';\\n  string public constant MATH_DIVISION_BY_ZERO = '60';\\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = '61'; //  Liquidity index overflows uint128\\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = '62'; //  Variable borrow index overflows uint128\\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = '63'; //  Liquidity rate overflows uint128\\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = '64'; //  Variable borrow rate overflows uint128\\n  string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '65'; //  Stable borrow rate overflows uint128\\n  string public constant CT_INVALID_MINT_AMOUNT = '66'; //invalid amount to mint\\n  string public constant CT_INVALID_BURN_AMOUNT = '67'; //invalid amount to burn\\n  string public constant RC_INVALID_RESERVE_FACTOR = '71';\\n  string public constant RC_INVALID_BORROW_RATIO = '72';\\n  string public constant RC_INVALID_PERIOD = '73';\\n  string public constant RC_INVALID_MIN_BORROW_TIME = '74';\\n  string public constant RC_INVALID_LIQ_THRESHOLD = '75';\\n  string public constant RC_INVALID_LIQ_TIME = '76';\\n  string public constant RC_INVALID_BID_TIME = '77';\\n  string public constant SDT_STABLE_DEBT_OVERFLOW = '81';\\n  string public constant SDT_BURN_EXCEEDS_BALANCE = '82';\\n  string public constant SDT_CREATION_FAILED = '83';\\n  string public constant VDT_CREATION_FAILED = '84';\\n  string public constant KF_LIQUIDITY_INSUFFICIENT = '85';\\n  string public constant KT_CREATION_FAILED = '86';\\n  string public constant KT_ERROR_CREATOR = '87';\\n  string public constant KT_INITIAL_LIQUIDITY_LOCK = '88';\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/utils/WadRayMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\nimport \\\"./Errors.sol\\\";\\n\\n/**\\n * @title WadRayMath library\\n * @author Kyoko\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @return One ray, 1e27\\n   **/\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  /**\\n   * @return One wad, 1e18\\n   **/\\n\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e27/2\\n   **/\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e18/2\\n   **/\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    require(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * b + halfWAD) / WAD;\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * WAD + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a*b, in ray\\n   **/\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    require(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * b + halfRAY) / RAY;\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a/b, in ray\\n   **/\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * RAY + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @param a Ray\\n   * @return a casted to wad, rounded half up to the nearest wad\\n   **/\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n    require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n    return result / WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @param a Wad\\n   * @return a converted in ray\\n   **/\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * WAD_RAY_RATIO;\\n    require(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n    return result;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/BasicERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\n/**\\n * @title ERC20\\n * @notice Basic ERC20 implementation\\n **/\\nabstract contract BasicERC20 is ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable\\n{\\n\\n    mapping(address => uint256) internal _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    uint256 internal _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals\\n    ) internal {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @return The name of the token\\n     **/\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @return The symbol of the token\\n     **/\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @return The decimals of the token\\n     **/\\n    function decimals() public view override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @return The total supply of the token\\n     **/\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @return The balance of the token\\n     **/\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev Executes a transfer of tokens from _msgSender() to recipient\\n     * @param recipient The recipient of the tokens\\n     * @param amount The amount of tokens being transferred\\n     * @return `true` if the transfer succeeds, `false` otherwise\\n     **/\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        emit Transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the allowance of spender on the tokens owned by owner\\n     * @param owner The owner of the tokens\\n     * @param spender The user allowed to spend the owner's tokens\\n     * @return The amount of owner's tokens spender is allowed to spend\\n     **/\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev Allows `spender` to spend the tokens owned by _msgSender()\\n     * @param spender The user allowed to spend _msgSender() tokens\\n     * @return `true`\\n     **/\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Executes a transfer of token from sender to recipient, if _msgSender() is allowed to do so\\n     * @param sender The owner of the tokens\\n     * @param recipient The recipient of the tokens\\n     * @param amount The amount of tokens being transferred\\n     * @return `true` if the transfer succeeds, `false` otherwise\\n     **/\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        require(_allowances[sender][_msgSender()] >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()] - amount\\n        );\\n        emit Transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increases the allowance of spender to spend _msgSender() tokens\\n     * @param spender The user allowed to spend on behalf of _msgSender()\\n     * @param addedValue The amount being added to the allowance\\n     * @return `true`\\n     **/\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decreases the allowance of spender to spend _msgSender() tokens\\n     * @param spender The user allowed to spend on behalf of _msgSender()\\n     * @param subtractedValue The amount being subtracted to the allowance\\n     * @return `true`\\n     **/\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        require(_allowances[_msgSender()][spender] >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] - subtractedValue\\n        );\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 oldSenderBalance = _balances[sender];\\n        require(oldSenderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = oldSenderBalance - amount;\\n        _balances[recipient] = _balances[recipient] + amount;\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        uint256 oldTotalSupply = _totalSupply;\\n        _totalSupply = oldTotalSupply + amount;\\n\\n        uint256 oldAccountBalance = _balances[account];\\n        _balances[account] = oldAccountBalance + amount;\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 oldTotalSupply = _totalSupply;\\n        _totalSupply = oldTotalSupply - amount;\\n\\n        uint256 oldAccountBalance = _balances[account];\\n        require(oldAccountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = oldAccountBalance - amount;\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _setName(string memory newName) internal {\\n        _name = newName;\\n    }\\n\\n    function _setSymbol(string memory newSymbol) internal {\\n        _symbol = newSymbol;\\n    }\\n\\n    function _setDecimals(uint8 newDecimals) internal {\\n        _decimals = newDecimals;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/DebtTokenBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\nimport \\\"../libraries/utils/Errors.sol\\\";\\nimport \\\"../interfaces/IKyokoPool.sol\\\";\\nimport \\\"../interfaces/ICreditDelegationToken.sol\\\";\\nimport \\\"./BasicERC20.sol\\\";\\n\\n/**\\n * @title DebtTokenBase\\n * @notice Base contract for different types of debt tokens, like StableDebtToken or VariableDebtToken\\n * @author Kyoko\\n */\\n\\nabstract contract DebtTokenBase is\\n  BasicERC20('DEBTTOKEN_IMPL', 'DEBTTOKEN_IMPL', 0),\\n  ICreditDelegationToken\\n{\\n  mapping(address => mapping(address => uint256)) internal _borrowAllowances;\\n\\n  /**\\n   * @dev Only lending pool can call functions marked by this modifier\\n   **/\\n  modifier onlyKyokoPool {\\n    require(_msgSender() == address(_getKyokoPool()), Errors.CT_CALLER_MUST_BE_KYOKO_POOL);\\n    _;\\n  }\\n\\n  /**\\n   * @dev delegates borrowing power to a user on the specific debt token\\n   * @param delegatee the address receiving the delegated borrowing power\\n   * @param amount the maximum amount being delegated. Delegation will still\\n   * respect the liquidation constraints (even if delegated, a delegatee cannot\\n   * force a delegator HF to go below 1)\\n   **/\\n  function approveDelegation(address delegatee, uint256 amount) external override {\\n    _borrowAllowances[_msgSender()][delegatee] = amount;\\n    emit BorrowAllowanceDelegated(_msgSender(), delegatee, _getUnderlyingAssetAddress(), amount);\\n  }\\n\\n  /**\\n   * @dev returns the borrow allowance of the user\\n   * @param fromUser The user to giving allowance\\n   * @param toUser The user to give allowance to\\n   * @return the current allowance of toUser\\n   **/\\n  function borrowAllowance(address fromUser, address toUser)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return _borrowAllowances[fromUser][toUser];\\n  }\\n\\n  /**\\n   * @dev Being non transferrable, the debt token does not implement any of the\\n   * standard ERC20 functions for transfer and allowance.\\n   **/\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    recipient;\\n    amount;\\n    revert('TRANSFER_NOT_SUPPORTED');\\n  }\\n\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    owner;\\n    spender;\\n    revert('ALLOWANCE_NOT_SUPPORTED');\\n  }\\n\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    spender;\\n    amount;\\n    revert('APPROVAL_NOT_SUPPORTED');\\n  }\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    sender;\\n    recipient;\\n    amount;\\n    revert('TRANSFER_NOT_SUPPORTED');\\n  }\\n\\n  function increaseAllowance(address spender, uint256 addedValue)\\n    public\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    spender;\\n    addedValue;\\n    revert('ALLOWANCE_NOT_SUPPORTED');\\n  }\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    spender;\\n    subtractedValue;\\n    revert('ALLOWANCE_NOT_SUPPORTED');\\n  }\\n\\n  function _decreaseBorrowAllowance(\\n    address delegator,\\n    address delegatee,\\n    uint256 amount\\n  ) internal {\\n      require(_borrowAllowances[delegator][delegatee] >= amount, Errors.BORROW_ALLOWANCE_NOT_ENOUGH);\\n    uint256 newAllowance =\\n      _borrowAllowances[delegator][delegatee] - amount;\\n\\n    _borrowAllowances[delegator][delegatee] = newAllowance;\\n\\n    emit BorrowAllowanceDelegated(delegator, delegatee, _getUnderlyingAssetAddress(), newAllowance);\\n  }\\n\\n  function _getUnderlyingAssetAddress() internal view virtual returns (address);\\n\\n  function _getKyokoPool() internal view virtual returns (IKyokoPool);\\n\\n  function _getReserveId() internal view virtual returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/VariableDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\nimport \\\"../libraries/utils/WadRayMath.sol\\\";\\nimport \\\"../libraries/utils/Errors.sol\\\";\\nimport \\\"../interfaces/IVariableDebtToken.sol\\\";\\nimport \\\"../interfaces/IKyokoPool.sol\\\";\\nimport \\\"../interfaces/IKyokoPoolAddressesProvider.sol\\\";\\nimport \\\"./DebtTokenBase.sol\\\";\\n\\n/**\\n * @title VariableDebtToken\\n * @notice Implements a variable debt token to track the borrowing positions of users\\n * at variable rate mode\\n * @author Kyoko\\n **/\\ncontract VariableDebtToken is DebtTokenBase, IVariableDebtToken {\\n  using WadRayMath for uint256;\\n\\n  uint256 public constant DEBT_TOKEN_REVISION = 0x1;\\n\\n  IKyokoPoolAddressesProvider internal _addressesProvider;\\n  address internal _underlyingAsset;\\n  uint256 internal _reserveId;\\n\\n  constructor(\\n    IKyokoPoolAddressesProvider provider,\\n    uint256 reserveId,\\n    address underlyingAsset,\\n    uint8 debtTokenDecimals,\\n    string memory debtTokenName,\\n    string memory debtTokenSymbol\\n  ) initializer {\\n    _setName(debtTokenName);\\n    _setSymbol(debtTokenSymbol);\\n    _setDecimals(debtTokenDecimals);\\n\\n    _addressesProvider = provider;\\n    _reserveId = reserveId;\\n    _underlyingAsset = underlyingAsset;\\n\\n    emit Initialized(\\n      underlyingAsset,\\n      _addressesProvider.getKyokoPool()[0],\\n      reserveId,\\n      debtTokenDecimals,\\n      debtTokenName,\\n      debtTokenSymbol\\n    );\\n  }\\n\\n  /**\\n   * @dev Initializes the debt token.\\n   * @param provider The address of the address provider where this stableToken will be used\\n   * @param reserveId The id of the reserve\\n   * @param underlyingAsset The address of the underlying asset of this kToken (E.g. WETH for hWETH)\\n   * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\n   * @param debtTokenName The name of the token\\n   * @param debtTokenSymbol The symbol of the token\\n   */\\n  function initialize(\\n    IKyokoPoolAddressesProvider provider,\\n    uint256 reserveId,\\n    address underlyingAsset,\\n    uint8 debtTokenDecimals,\\n    string memory debtTokenName,\\n    string memory debtTokenSymbol\\n  ) public override initializer {\\n    _setName(debtTokenName);\\n    _setSymbol(debtTokenSymbol);\\n    _setDecimals(debtTokenDecimals);\\n\\n    _addressesProvider = provider;\\n    _reserveId = reserveId;\\n    _underlyingAsset = underlyingAsset;\\n\\n    emit Initialized(\\n      underlyingAsset,\\n      _addressesProvider.getKyokoPool()[0],\\n      reserveId,\\n      debtTokenDecimals,\\n      debtTokenName,\\n      debtTokenSymbol\\n    );\\n  }\\n\\n  /**\\n   * @dev Calculates the accumulated debt balance of the user\\n   * @return The debt balance of the user\\n   **/\\n  function balanceOf(address user) public view virtual override returns (uint256) {\\n    uint256 scaledBalance = super.balanceOf(user);\\n\\n    if (scaledBalance == 0) {\\n      return 0;\\n    }\\n\\n    IKyokoPool pool = _getKyokoPool();\\n    return scaledBalance.rayMul(pool.getReserveNormalizedVariableDebt(_reserveId));\\n  }\\n\\n  /**\\n   * @dev Calculates the specific debt balance of the user\\n   * @return The debt balance of the user\\n   **/\\n  function balanceOfAmount(address user, uint256 amount) public view virtual override returns (uint256) {\\n    uint256 original = super.balanceOf(user);\\n    uint256 scaledBalance = amount > original ? original : amount;\\n\\n    if (scaledBalance == 0) {\\n      return 0;\\n    }\\n\\n    IKyokoPool pool = _getKyokoPool();\\n    return scaledBalance.rayMul(pool.getReserveNormalizedVariableDebt(_reserveId));\\n  }\\n\\n  /**\\n   * @dev Mints debt token to the `onBehalfOf` address\\n   * -  Only callable by the LendingPool\\n   * @param user The address receiving the borrowed underlying, being the delegatee in case\\n   * of credit delegate, or same as `onBehalfOf` otherwise\\n   * @param onBehalfOf The address receiving the debt tokens\\n   * @param amount The amount of debt being minted\\n   * @param index The variable debt index of the reserve\\n   * @return `true` if the the previous balance of the user is 0\\n   **/\\n  function mint(\\n    address user,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 index\\n  ) external override onlyKyokoPool returns (bool) {\\n    if (user != onBehalfOf) {\\n      _decreaseBorrowAllowance(onBehalfOf, user, amount);\\n    }\\n\\n    uint256 previousBalance = super.balanceOf(onBehalfOf);\\n    uint256 amountScaled = amount.rayDiv(index);\\n    require(amountScaled != 0, Errors.CT_INVALID_MINT_AMOUNT);\\n\\n    _mint(onBehalfOf, amountScaled);\\n\\n    emit Transfer(address(0), onBehalfOf, amount);\\n    emit Mint(user, onBehalfOf, amount, index);\\n\\n    return previousBalance == 0;\\n  }\\n\\n  /**\\n   * @dev Burns user variable debt\\n   * - Only callable by the LendingPool\\n   * @param user The user whose debt is getting burned\\n   * @param amount The amount getting burned\\n   * @param index The variable debt index of the reserve\\n   **/\\n  function burn(\\n    address user,\\n    uint256 amount,\\n    uint256 index\\n  ) external override onlyKyokoPool {\\n    uint256 amountScaled = amount.rayDiv(index);\\n    require(amountScaled != 0, Errors.CT_INVALID_BURN_AMOUNT);\\n\\n    _burn(user, amountScaled);\\n\\n    emit Transfer(user, address(0), amount);\\n    emit Burn(user, amount, index);\\n  }\\n\\n  /**\\n   * @dev Returns the principal debt balance of the user from\\n   * @return The debt balance of the user since the last burn/mint action\\n   **/\\n  function scaledBalanceOf(address user) public view virtual override returns (uint256) {\\n    return super.balanceOf(user);\\n  }\\n\\n  /**\\n   * @dev Returns the total supply of the variable debt token. Represents the total debt accrued by the users\\n   * @return The total supply\\n   **/\\n  function totalSupply() public view virtual override returns (uint256) {\\n    IKyokoPool pool = _getKyokoPool();\\n    return super.totalSupply().rayMul(pool.getReserveNormalizedVariableDebt(_reserveId));\\n  }\\n\\n  /**\\n   * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n   * @return the scaled total supply\\n   **/\\n  function scaledTotalSupply() public view virtual override returns (uint256) {\\n    return super.totalSupply();\\n  }\\n\\n  /**\\n   * @dev Returns the principal balance of the user and principal total supply.\\n   * @param user The address of the user\\n   * @return The principal balance of the user\\n   * @return The principal total supply\\n   **/\\n  function getScaledUserBalanceAndSupply(address user)\\n    external\\n    view\\n    override\\n    returns (uint256, uint256)\\n  {\\n    return (super.balanceOf(user), super.totalSupply());\\n  }\\n\\n  /**\\n   * @dev Returns the address of the underlying asset of this kToken (E.g. WETH for aWETH)\\n   **/\\n  function UNDERLYING_ASSET_ADDRESS() public view returns (address) {\\n    return _underlyingAsset;\\n  }\\n\\n  /**\\n   * @dev Returns the address of the lending pool where this kToken is used\\n   **/\\n  function POOL() public view returns (IKyokoPool) {\\n    return _getKyokoPool();\\n  }\\n\\n  function _getUnderlyingAssetAddress() internal view override returns (address) {\\n    return _underlyingAsset;\\n  }\\n\\n  function _getKyokoPool() internal view override returns (IKyokoPool) {\\n    return IKyokoPool(_addressesProvider.getKyokoPool()[0]);\\n  }\\n\\n  function _getReserveId() internal view override returns (uint256) {\\n    return _reserveId;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"createKToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"createDebtToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"kToken\",\"type\":\"address\"}],\"name\":\"CreateKToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"kToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"variableDebtAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stableDebtAddress\",\"type\":\"address\"}],\"name\":\"CreatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stableDebtAddress\",\"type\":\"address\"}],\"name\":\"CreateStableToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"variableDebtAddress\",\"type\":\"address\"}],\"name\":\"CreateVariableToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"factor\",\"type\":\"uint16\"}],\"name\":\"FactorUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"kToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"}],\"name\":\"FactoryUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InitilLiquidityUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"threshold\",\"type\":\"uint16\"}],\"name\":\"LiquidationThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"lockTime\",\"type\":\"uint32\"}],\"name\":\"LockTime\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_addressesProvider\",\"outputs\":[{\"internalType\":\"contract IKyokoPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_factor\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_initilLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidationThreshold\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lockTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"kTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSharedPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"kTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"_period\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"_ratio\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"_liqDuration\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_bidDuration\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"_enabledStableBorrow\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"kTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optimalUtilizationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseVariableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableSlope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableSlope2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseStableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableSlope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableSlope2\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.RateStrategyInput\",\"name\":\"_rateInput\",\"type\":\"tuple\"}],\"name\":\"initReserve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"kTokenCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sTokenCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"factor\",\"type\":\"uint16\"}],\"name\":\"setFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setInitialLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"threshold\",\"type\":\"uint16\"}],\"name\":\"setLiqThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"lockTime\",\"type\":\"uint32\"}],\"name\":\"setLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"createKToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"createDebtToken\",\"type\":\"address\"}],\"name\":\"setTokenFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchOnly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vTokenCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "KyokoFactory", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000533d4df07e232c9914916573c07e4030f2ba7a0d000000000000000000000000973cafa22d1badffe941b8428b9c7fac9a3da87f0000000000000000000000006671d410601ccebf3a99d794227d7ea65adce915000000000000000000000000584583fbc2956b11b96abdf7ce2191c394f86708", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}