{"SourceCode": "pragma solidity ^0.8.19;\r\n\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n\r\n// \r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\n// \r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n//\r\nuint256 constant REFERAL_COMMISSION_RATE = 10;\r\n\r\n// uint256 constant USDC_DECIMALS = 6;\r\n\r\n//\r\ncontract Referrals is Ownable {\r\n    uint256 public referralCommissionRate = REFERAL_COMMISSION_RATE;\r\n\r\n    mapping(address => address) private referrers;\r\n\r\n    function setReferralCommissionRate(\r\n        uint256 _referralCommissionRate\r\n    ) external onlyOwner {\r\n        require(_referralCommissionRate <= 100, \"ReferralManagement: > 100%\");\r\n        referralCommissionRate = _referralCommissionRate;\r\n    }\r\n\r\n    function _setAndGetReferrerIfPossible(\r\n        address _user,\r\n        address _referrer\r\n    ) internal returns (address) {\r\n        _safelySetReferrer(_user, _referrer);\r\n        return _getReferrer(_user);\r\n    }\r\n\r\n    function _getReferrer(address _user) internal view returns (address) {\r\n        address referrer = referrers[_user];\r\n        return referrer;\r\n    }\r\n\r\n    function setReferrer(address _referrer) external {\r\n        _setReffererFor(msg.sender, _referrer);\r\n    }\r\n\r\n    function _safelySetReferrer(address _user, address _referrer) internal {\r\n        // does not revert if referrer is already set or if referrer is the user or if referrer is 0x0\r\n        if (\r\n            referrers[_user] == address(0) &&\r\n            _referrer != _user &&\r\n            _referrer != address(0)\r\n        ) {\r\n            _setReffererFor(_user, _referrer);\r\n        }\r\n    }\r\n\r\n    function _setReffererFor(address _user, address _referrer) internal {\r\n        require(\r\n            _referrer != address(0),\r\n            \"ReferralManagement: invalid referrer address\"\r\n        );\r\n        require(\r\n            _referrer != _user,\r\n            \"ReferralManagement: referrer cannot be the user\"\r\n        );\r\n        require(\r\n            referrers[_user] == address(0),\r\n            \"ReferralManagement: referrer already set\"\r\n        );\r\n        referrers[_user] = _referrer;\r\n    }\r\n\r\n    function setReferrerFor(\r\n        address _user,\r\n        address _referrer\r\n    ) external onlyOwner {\r\n        _setReffererFor(_user, _referrer);\r\n    }\r\n\r\n    function referrerOf(address account) external view returns (address) {\r\n        return referrers[account];\r\n    }\r\n}\r\n\r\n// \r\n// A presale stage is only active if the current active presale is sold out , or it is the active presale\r\nuint256 constant RATIODENOMINATOR = 1_000;\r\n\r\nstruct PresaleStage {\r\n    uint128 price;\r\n    uint128 offeredAmount;\r\n    uint128 soldAmount;\r\n    uint64 duration;\r\n    uint64 startedAt;\r\n    uint64 firstUnlockRatio;\r\n    uint64 unlockEvery;\r\n    uint64 unlockEveryRatio;\r\n}\r\n\r\nstruct PresaleStageArg {\r\n    uint128 price;\r\n    uint128 offeredAmount;\r\n    uint64 duration;\r\n    uint64 firstUnlockRatio;\r\n    uint64 unlockEvery;\r\n    uint64 unlockEveryRatio;\r\n}\r\n\r\nstruct UserData {\r\n    uint128 boughtAmount;\r\n}\r\n\r\nstruct ReferalData {\r\n    uint128 usdcRefReceived;\r\n    uint128 usdtRefReceived;\r\n    uint128 ethRefReceived;\r\n}\r\n\r\ninterface IERC20Meta is IERC20 {\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract Presale is Ownable, Referrals {\r\n    using SafeERC20 for IERC20Meta;\r\n\r\n    AggregatorV3Interface internal immutable dataFeed; // ETH Price\r\n    IERC20Meta public immutable saleToken;\r\n    IERC20Meta public immutable usdcToken;\r\n    IERC20Meta public immutable usdtToken;\r\n\r\n    uint8 public immutable saleTokenDecimals;\r\n    uint256 public immutable dataFeedDecimals;\r\n    uint256 public immutable usdcDecimals;\r\n    uint256 public immutable usdtDecimals;\r\n\r\n    PresaleStage[] private _presaleStages;\r\n\r\n    function getStage(\r\n        uint256 _index\r\n    ) external view returns (PresaleStage memory) {\r\n        return _presaleStages[_index];\r\n    }\r\n\r\n    function stagesCount() external view returns (uint256) {\r\n        return _presaleStages.length;\r\n    }\r\n\r\n    // stage => user => data\r\n    mapping(uint256 => mapping(address => UserData)) public userData;\r\n\r\n    mapping(address => ReferalData) public referalData;\r\n\r\n    mapping(address => uint256) public claimedAmount;\r\n\r\n    uint256 public presaleStart; //\r\n\r\n    uint256 public __activePresale;\r\n\r\n    uint256 public claimEnabled;\r\n\r\n    function enableClaim() external onlyOwner {\r\n        claimEnabled = block.timestamp;\r\n    }\r\n\r\n    event Buy(\r\n        address indexed user,\r\n        uint256 indexed stage,\r\n        address referrer,\r\n        address token,\r\n        uint256 totalAmount,\r\n        uint256 refAmount,\r\n        uint256 saldAmount\r\n    );\r\n\r\n    constructor(\r\n        AggregatorV3Interface _chainlinkEthFeed,\r\n        IERC20Meta _saleToken,\r\n        IERC20Meta _usdcToken,\r\n        IERC20Meta _usdtToken\r\n    ) {\r\n        dataFeed = _chainlinkEthFeed;\r\n        saleToken = _saleToken;\r\n        usdcToken = _usdcToken;\r\n        usdtToken = _usdtToken;\r\n\r\n        saleTokenDecimals = _saleToken.decimals();\r\n        dataFeedDecimals = _chainlinkEthFeed.decimals();\r\n        usdcDecimals = _usdcToken.decimals();\r\n        usdtDecimals = _usdtToken.decimals();\r\n    }\r\n\r\n    function _getPresaleStage(\r\n        uint256 _index\r\n    ) internal view returns (PresaleStage storage) {\r\n        require(\r\n            presaleStart != 0 && block.timestamp >= presaleStart,\r\n            \"Presale: not started yet\"\r\n        );\r\n\r\n        require(_index < _presaleStages.length, \"Presale: sold out\");\r\n        PresaleStage storage presale = _presaleStages[_index];\r\n\r\n        require(\r\n            presale.startedAt + presale.duration >= block.timestamp,\r\n            \"Presale: Presale Stage Ended\"\r\n        );\r\n        return presale;\r\n    }\r\n\r\n    function _getRefAmount(\r\n        address _user,\r\n        address _ref,\r\n        uint256 _amount\r\n    ) internal returns (uint256 refAmount, address) {\r\n        address ref = _setAndGetReferrerIfPossible(_user, _ref);\r\n        refAmount = ref != address(0)\r\n            ? uint128((_amount * referralCommissionRate) / 100)\r\n            : 0;\r\n\r\n        if (refAmount > 0)\r\n            referalData[ref].usdcRefReceived += uint128(refAmount);\r\n\r\n        return (refAmount, ref);\r\n    }\r\n\r\n    function _getRefAmountETH(\r\n        address _user,\r\n        address _ref,\r\n        uint256 _amount\r\n    ) internal returns (uint256 refAmount, address ref) {\r\n        ref = _setAndGetReferrerIfPossible(_user, _ref);\r\n        refAmount = ref != address(0)\r\n            ? uint128((_amount * referralCommissionRate) / 100)\r\n            : 0;\r\n\r\n        if (refAmount > 0)\r\n            referalData[ref].ethRefReceived += uint128(refAmount);\r\n    }\r\n\r\n    function buyWithUSD(\r\n        uint128 _usdcAmount,\r\n        address _referrer,\r\n        bool _withUSDC\r\n    ) external {\r\n        uint256 _activePresale = _activeStage();\r\n        PresaleStage storage presale = _getPresaleStage(_activePresale);\r\n\r\n        uint256 saleTokenAmount = (_usdcAmount * 10 ** saleTokenDecimals) /\r\n            presale.price;\r\n\r\n        uint256 refundAmount;\r\n\r\n        // if presale left is less than the intended purchase amount only purchase what is left and return the rest\r\n        if (presale.offeredAmount - presale.soldAmount < saleTokenAmount) {\r\n            saleTokenAmount = presale.offeredAmount - presale.soldAmount;\r\n            refundAmount =\r\n                _usdcAmount -\r\n                (saleTokenAmount * presale.price) /\r\n                10 ** saleTokenDecimals;\r\n        }\r\n\r\n        uint256 netAmount = _usdcAmount - refundAmount;\r\n\r\n        (uint256 refAmount, address ref) = _getRefAmount(\r\n            msg.sender,\r\n            _referrer,\r\n            netAmount\r\n        );\r\n\r\n        presale.soldAmount += uint128(saleTokenAmount);\r\n\r\n        // to do add ref to the user's object\r\n        userData[_activePresale][msg.sender].boughtAmount += uint128(\r\n            saleTokenAmount\r\n        );\r\n\r\n        // transfer USDC to this contract address but only net amount\r\n        if (_withUSDC)\r\n            usdcToken.safeTransferFrom(\r\n                msg.sender,\r\n                owner(),\r\n                netAmount - refAmount\r\n            );\r\n        else\r\n            usdtToken.safeTransferFrom(\r\n                msg.sender,\r\n                owner(),\r\n                netAmount - refAmount\r\n            );\r\n\r\n        // transfer ref amount to ref\r\n        if (refAmount > 0) {\r\n            if (_withUSDC)\r\n                usdcToken.safeTransferFrom(msg.sender, ref, refAmount);\r\n            else usdtToken.safeTransferFrom(msg.sender, ref, refAmount);\r\n        }\r\n\r\n        emit Buy(\r\n            msg.sender,\r\n            _activePresale,\r\n            ref,\r\n            address(_withUSDC ? usdcToken : usdtToken),\r\n            netAmount,\r\n            refAmount,\r\n            saleTokenAmount\r\n        );\r\n    }\r\n\r\n    function buyWithEth(address _referrer) external payable {\r\n        uint256 _ethAmount = msg.value;\r\n        uint256 _activePresale = _activeStage();\r\n        PresaleStage storage presale = _getPresaleStage(_activePresale);\r\n\r\n        uint256 ethPrice = (uint256(getLatestETHPrice()) * 10 ** (18)) /\r\n            10 ** dataFeedDecimals;\r\n\r\n        uint256 _usdcAmount = (_ethAmount * ethPrice) / 10 ** (18);\r\n\r\n        _usdcAmount = (_usdcAmount * 10 ** usdcDecimals) / 10 ** 18;\r\n\r\n        uint256 saleTokenAmount = (_usdcAmount * 10 ** saleTokenDecimals) /\r\n            presale.price;\r\n\r\n        uint256 refundAmount; // in eth\r\n\r\n        // if presale left is less than the intended purchase amount only purchase what is left and return the rest\r\n        if (presale.offeredAmount - presale.soldAmount < saleTokenAmount) {\r\n            uint256 saleTokenAmountNew = presale.offeredAmount -\r\n                presale.soldAmount;\r\n            refundAmount =\r\n                (_ethAmount * (saleTokenAmount - saleTokenAmountNew)) /\r\n                saleTokenAmount;\r\n            saleTokenAmount = saleTokenAmountNew;\r\n        }\r\n\r\n        uint256 netAmount = _ethAmount - refundAmount;\r\n\r\n        (uint256 refAmount, address ref) = _getRefAmountETH(\r\n            msg.sender,\r\n            _referrer,\r\n            netAmount\r\n        );\r\n\r\n        presale.soldAmount += uint128(saleTokenAmount);\r\n\r\n        userData[_activePresale][msg.sender].boughtAmount += uint128(\r\n            saleTokenAmount\r\n        );\r\n\r\n        // transfer back the refund amount\r\n        if (refundAmount > 0) {\r\n            (bool success, ) = payable(msg.sender).call{value: refundAmount}(\r\n                \"\"\r\n            );\r\n            require(success, \"Presale: unable to send ETH\");\r\n        }\r\n\r\n        // trasnfer eth to owner\r\n        (bool success_owner, ) = payable(owner()).call{\r\n            value: netAmount - refAmount\r\n        }(\"\");\r\n        require(success_owner, \"Presale: unable to send ETH\");\r\n        // transfer ref amount to ref\r\n        if (refAmount > 0) {\r\n            (bool success, ) = payable(ref).call{value: refAmount}(\"\");\r\n            require(success, \"Presale: unable to send ETH\");\r\n        }\r\n\r\n        emit Buy(\r\n            msg.sender,\r\n            _activePresale,\r\n            ref,\r\n            address(0),\r\n            netAmount,\r\n            refAmount,\r\n            saleTokenAmount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Initializes the presale\r\n     * @param _presaleStart the timestamp when the presale starts\r\n     * @param _presaleStagesArg the presale stages\r\n     */\r\n    function initializePresale(\r\n        uint256 _presaleStart,\r\n        PresaleStageArg[] calldata _presaleStagesArg\r\n    ) external onlyOwner {\r\n        require(_presaleStages.length == 0, \"Presale: already initialized\");\r\n\r\n        presaleStart = _presaleStart;\r\n        uint128 totalOfferedAmount;\r\n\r\n        for (uint256 i = 0; i < _presaleStagesArg.length; i++) {\r\n            require(\r\n                _presaleStagesArg[i].firstUnlockRatio <= RATIODENOMINATOR,\r\n                \"Presale: invalid first unlock ratio\"\r\n            );\r\n            require(\r\n                _presaleStagesArg[i].unlockEveryRatio <= RATIODENOMINATOR,\r\n                \"Presale: invalid unlock every ratio\"\r\n            );\r\n\r\n            _presaleStages.push(\r\n                PresaleStage({\r\n                    price: _presaleStagesArg[i].price,\r\n                    offeredAmount: _presaleStagesArg[i].offeredAmount,\r\n                    soldAmount: 0,\r\n                    duration: _presaleStagesArg[i].duration,\r\n                    startedAt: 0,\r\n                    firstUnlockRatio: _presaleStagesArg[i].firstUnlockRatio,\r\n                    unlockEvery: _presaleStagesArg[i].unlockEvery,\r\n                    unlockEveryRatio: _presaleStagesArg[i].unlockEveryRatio\r\n                })\r\n            );\r\n            totalOfferedAmount += _presaleStagesArg[i].offeredAmount;\r\n        }\r\n\r\n        _presaleStages[0].startedAt = uint64(_presaleStart);\r\n\r\n        saleToken.safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            totalOfferedAmount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Recovers unsold tokens from a presale stage\r\n     * @param _presaleIndex the index of the presale stage\r\n     */\r\n    function recoverUnsoldFromStage(uint256 _presaleIndex) external onlyOwner {\r\n        PresaleStage storage presale = _presaleStages[_presaleIndex];\r\n        uint128 offeredAmount = presale.offeredAmount;\r\n        uint128 soldAmount = presale.soldAmount;\r\n        uint128 unsoldAmount = offeredAmount - soldAmount;\r\n        presale.offeredAmount = soldAmount;\r\n        saleToken.safeTransfer(msg.sender, unsoldAmount);\r\n    }\r\n\r\n    /**\r\n     * @param _presaleStart the timestamp when the presale starts\r\n     */\r\n    function setPresaleStart(uint256 _presaleStart) external onlyOwner {\r\n        require(\r\n            _presaleStart > block.timestamp,\r\n            \"Presale: presale start in the past\"\r\n        );\r\n        require(\r\n            presaleStart == 0 || block.timestamp < presaleStart,\r\n            \"Presale: presale already started\"\r\n        );\r\n        presaleStart = _presaleStart;\r\n\r\n        _presaleStages[0].startedAt = uint64(_presaleStart);\r\n    }\r\n\r\n    function setActivePresale(uint256 _activePresale) external onlyOwner {\r\n        // can't go back to past presales\r\n        require(_activePresale >= __activePresale, \"Presale: invalid presale\");\r\n        require(\r\n            _activePresale < _presaleStages.length,\r\n            \"Presale: invalid presale\"\r\n        );\r\n        __activePresale = _activePresale;\r\n        _presaleStages[__activePresale].startedAt = uint64(block.timestamp);\r\n    }\r\n\r\n    function _activeStage() internal returns (uint256) {\r\n        require(__activePresale < _presaleStages.length, \"Presale: sold out\");\r\n        PresaleStage storage presale = _presaleStages[__activePresale];\r\n\r\n        if (presale.offeredAmount - presale.soldAmount == 0) {\r\n            require(\r\n                __activePresale + 1 < _presaleStages.length,\r\n                \"Presale: sold out\"\r\n            );\r\n            __activePresale = __activePresale + 1;\r\n            _presaleStages[__activePresale].startedAt = uint64(block.timestamp);\r\n        }\r\n        return (__activePresale);\r\n    }\r\n\r\n    function addPresaleStage(\r\n        uint128 _price,\r\n        uint128 _offredAmount,\r\n        uint64 _duration,\r\n        uint64 _firstUnlockRatio,\r\n        uint64 _unlockEvery,\r\n        uint64 _unlockEveryRatio\r\n    ) external onlyOwner {\r\n        require(\r\n            _firstUnlockRatio <= RATIODENOMINATOR,\r\n            \"Presale: invalid first unlock ratio\"\r\n        );\r\n        require(\r\n            _unlockEveryRatio <= RATIODENOMINATOR && _unlockEveryRatio > 0,\r\n            \"Presale: invalid unlock every ratio\"\r\n        );\r\n\r\n        require(_unlockEvery > 0, \"Presale: unlockEvery cannot be zero\");\r\n\r\n        require(_duration > 0, \"empty duration not supported\");\r\n\r\n        require(claimEnabled == 0, \"Presale: Presale Ended\");\r\n\r\n        saleToken.safeTransferFrom(msg.sender, address(this), _offredAmount);\r\n        _presaleStages.push(\r\n            PresaleStage({\r\n                price: _price,\r\n                offeredAmount: _offredAmount,\r\n                soldAmount: 0,\r\n                duration: _duration,\r\n                startedAt: 0,\r\n                firstUnlockRatio: _firstUnlockRatio,\r\n                unlockEvery: _unlockEvery,\r\n                unlockEveryRatio: _unlockEveryRatio\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param _presaleIndex  the index of the presale stage\r\n     * @param _price  the price of the token in USDC\r\n     * @param _amount the amount of tokens offered\r\n     * @param _duration the duration of the presale stage in seconds\r\n     */\r\n    function updatePresaleStage(\r\n        uint256 _presaleIndex,\r\n        uint128 _price,\r\n        uint128 _amount,\r\n        uint64 _duration,\r\n        uint64 _firstUnlockRatio,\r\n        uint64 _unlockEvery,\r\n        uint64 _unlockEveryRatio\r\n    ) external onlyOwner {\r\n        require(\r\n            _presaleIndex >= _activeStage(),\r\n            \"Presale: can't update past presale\"\r\n        );\r\n\r\n        require(\r\n            _firstUnlockRatio <= RATIODENOMINATOR,\r\n            \"Presale: invalid first unlock ratio\"\r\n        );\r\n\r\n        require(\r\n            _unlockEveryRatio <= RATIODENOMINATOR && _unlockEveryRatio > 0,\r\n            \"Presale: invalid unlock every ratio\"\r\n        );\r\n\r\n        require(_unlockEvery > 0, \"Presale: unlockEvery cannot be zero\");\r\n\r\n        require(_duration > 0, \"empty duration not supported\");\r\n\r\n        PresaleStage storage presale = _presaleStages[_presaleIndex];\r\n        uint128 offeredAmount = presale.offeredAmount;\r\n        presale.price = _price;\r\n        presale.offeredAmount = _amount;\r\n        presale.duration = _duration;\r\n        presale.firstUnlockRatio = _firstUnlockRatio;\r\n        presale.unlockEvery = _unlockEvery;\r\n        presale.unlockEveryRatio = _unlockEveryRatio;\r\n\r\n        if (offeredAmount > _amount) {\r\n            require(_amount >= presale.soldAmount, \"Presale: invalid amount\");\r\n            saleToken.safeTransfer(msg.sender, offeredAmount - _amount);\r\n        } else if (offeredAmount < _amount) {\r\n            saleToken.safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _amount - offeredAmount\r\n            );\r\n        }\r\n    }\r\n\r\n    function activeStage() external view returns (uint256 stageIndex) {\r\n        PresaleStage storage presale = _presaleStages[__activePresale];\r\n        stageIndex = __activePresale;\r\n        if (presale.offeredAmount - presale.soldAmount == 0) {\r\n            stageIndex = __activePresale + 1;\r\n        }\r\n\r\n        return (stageIndex);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    function getLatestETHPrice() public view returns (int256) {\r\n        // prettier-ignore\r\n        (\r\n        /* uint80 roundID */,\r\n            int answer,\r\n        /*uint startedAt*/,\r\n        /*uint timeStamp*/,\r\n        /*uint80 answeredInRound*/\r\n        ) = dataFeed.latestRoundData();\r\n        return answer; // 8 decimals\r\n    }\r\n\r\n    function getUserData(\r\n        uint256 _stage,\r\n        address _user\r\n    ) external view returns (UserData memory) {\r\n        return userData[_stage][_user];\r\n    }\r\n\r\n    struct UserClaimData {\r\n        uint256 total;\r\n        uint256 unlocked;\r\n        uint256 claimed;\r\n        uint256 available;\r\n    }\r\n\r\n    function getUserClaimData(\r\n        address user\r\n    ) public view returns (UserClaimData memory) {\r\n        UserClaimData memory data;\r\n        for (uint256 i = 0; i < _presaleStages.length; i++) {\r\n            PresaleStage storage presale = _presaleStages[i];\r\n            data.total += userData[i][user].boughtAmount;\r\n            if (claimEnabled != 0) {\r\n                data.unlocked +=\r\n                    (userData[i][user].boughtAmount *\r\n                        presale.firstUnlockRatio) /\r\n                    RATIODENOMINATOR;\r\n\r\n                uint256 numOfUnlocks = (block.timestamp - claimEnabled) /\r\n                    presale.unlockEvery;\r\n\r\n                uint256 unlockedTotalRatio = (numOfUnlocks *\r\n                    presale.unlockEveryRatio);\r\n\r\n                if (\r\n                    unlockedTotalRatio + presale.firstUnlockRatio >\r\n                    RATIODENOMINATOR\r\n                ) {\r\n                    unlockedTotalRatio =\r\n                        RATIODENOMINATOR -\r\n                        presale.firstUnlockRatio;\r\n                    // avoids precision loss\r\n                    data.unlocked +=\r\n                        userData[i][user].boughtAmount -\r\n                        (userData[i][user].boughtAmount *\r\n                            presale.firstUnlockRatio) /\r\n                        RATIODENOMINATOR;\r\n                } else {\r\n                    data.unlocked +=\r\n                        (userData[i][user].boughtAmount * unlockedTotalRatio) /\r\n                        RATIODENOMINATOR;\r\n                }\r\n            }\r\n        }\r\n\r\n        data.claimed = claimedAmount[user];\r\n        data.available = data.unlocked - data.claimed;\r\n        return data;\r\n    }\r\n\r\n    event Claim(address indexed user, uint256 amount);\r\n\r\n    function claimBoughtTokens() external {\r\n        UserClaimData memory data = getUserClaimData(msg.sender);\r\n\r\n        require(data.available > 0, \"Presale: nothing to claim\");\r\n\r\n        claimedAmount[msg.sender] += data.available;\r\n\r\n        saleToken.safeTransfer(msg.sender, data.available);\r\n\r\n        emit Claim(msg.sender, data.available);\r\n    }\r\n\r\n    function recoverAsset(\r\n        address _token,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external onlyOwner {\r\n        if (_token == address(0)) {\r\n            (bool success, ) = payable(_to).call{value: _amount}(\"\");\r\n            require(success, \"Presale: unable to send ETH\");\r\n        }\r\n        IERC20Meta(_token).safeTransfer(_to, _amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_chainlinkEthFeed\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Meta\",\"name\":\"_saleToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Meta\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Meta\",\"name\":\"_usdtToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saldAmount\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__activePresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stageIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_price\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_offredAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_firstUnlockRatio\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_unlockEvery\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_unlockEveryRatio\",\"type\":\"uint64\"}],\"name\":\"addPresaleStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"buyWithEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_usdcAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUSDC\",\"type\":\"bool\"}],\"name\":\"buyWithUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBoughtTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataFeedDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestETHPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getStage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"offeredAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"soldAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startedAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstUnlockRatio\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"unlockEvery\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"unlockEveryRatio\",\"type\":\"uint64\"}],\"internalType\":\"struct PresaleStage\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserClaimData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"internalType\":\"struct Presale.UserClaimData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"boughtAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct UserData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_presaleStart\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"offeredAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstUnlockRatio\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"unlockEvery\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"unlockEveryRatio\",\"type\":\"uint64\"}],\"internalType\":\"struct PresaleStageArg[]\",\"name\":\"_presaleStagesArg\",\"type\":\"tuple[]\"}],\"name\":\"initializePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_presaleIndex\",\"type\":\"uint256\"}],\"name\":\"recoverUnsoldFromStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referalData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"usdcRefReceived\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"usdtRefReceived\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ethRefReceived\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralCommissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"referrerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleToken\",\"outputs\":[{\"internalType\":\"contract IERC20Meta\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_activePresale\",\"type\":\"uint256\"}],\"name\":\"setActivePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_presaleStart\",\"type\":\"uint256\"}],\"name\":\"setPresaleStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referralCommissionRate\",\"type\":\"uint256\"}],\"name\":\"setReferralCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"setReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"setReferrerFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stagesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_presaleIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_price\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_firstUnlockRatio\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_unlockEvery\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_unlockEveryRatio\",\"type\":\"uint64\"}],\"name\":\"updatePresaleStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20Meta\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20Meta\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"boughtAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Presale", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b84190000000000000000000000006923f9b683111dcc0e20124e9a031deeae5dad93000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://156871a418c7227d1e7148ff54566aa8eea6ae2abb36a0d2b0aa0e783fe4af3c"}