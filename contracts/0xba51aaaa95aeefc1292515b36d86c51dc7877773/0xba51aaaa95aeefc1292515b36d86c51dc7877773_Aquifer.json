{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC5267Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils//AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils//Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils//ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils//Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils//cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils//cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils//CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils//Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils//Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/EIP712Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils//Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SignedMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils//Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Aquifer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport {ReentrancyGuard} from \\\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport {IAquifer} from \\\"src/interfaces/IAquifer.sol\\\";\\nimport {IWell} from \\\"src/Well.sol\\\";\\nimport {LibClone} from \\\"src/libraries/LibClone.sol\\\";\\n\\n/**\\n * @title Aquifer\\n * @author Publius, Silo Chad, Brean\\n * @notice Aquifer is a permissionless Well registry and factory.\\n * @dev Aquifer deploys Wells by cloning a pre-deployed Well implementation.\\n */\\ncontract Aquifer is IAquifer, ReentrancyGuard {\\n    using LibClone for address;\\n\\n    // A mapping of Well address to the Well implementation addresses\\n    // Mapping gets set on Well deployment\\n    mapping(address => address) public wellImplementation;\\n\\n    constructor() ReentrancyGuard() {}\\n\\n    /**\\n     * @dev\\n     * Use `salt == 0` to deploy a new Well with `create`\\n     * Use `salt > 0` to deploy a new Well with `create2`\\n     */\\n    function boreWell(\\n        address implementation,\\n        bytes calldata immutableData,\\n        bytes calldata initFunctionCall,\\n        bytes32 salt\\n    ) external nonReentrant returns (address well) {\\n        if (immutableData.length > 0) {\\n            if (salt != bytes32(0)) {\\n                // Encode the salt with the `msg.sender` address to prevent frontrunning attack\\n                salt = keccak256(abi.encode(msg.sender, salt));\\n                well = implementation.cloneDeterministic(immutableData, salt);\\n            } else {\\n                well = implementation.clone(immutableData);\\n            }\\n        } else {\\n            if (salt != bytes32(0)) {\\n                // Encode the salt with the `msg.sender` address to prevent frontrunning attack\\n                salt = keccak256(abi.encode(msg.sender, salt));\\n                well = implementation.cloneDeterministic(salt);\\n            } else {\\n                well = implementation.clone();\\n            }\\n        }\\n\\n        if (initFunctionCall.length > 0) {\\n            (bool success, bytes memory returnData) = well.call(initFunctionCall);\\n            if (!success) {\\n                // Next 5 lines are based on https://ethereum.stackexchange.com/a/83577\\n                if (returnData.length < 68) revert InitFailed(\\\"\\\");\\n                assembly {\\n                    returnData := add(returnData, 0x04)\\n                }\\n                revert InitFailed(abi.decode(returnData, (string)));\\n            }\\n        }\\n\\n        if (!IWell(well).isInitialized()) {\\n            revert WellNotInitialized();\\n        }\\n\\n        // The Aquifer address MUST be set, either (a) via immutable data during cloning,\\n        // or (b) as a storage variable during an init function call. In either case,\\n        // the address MUST match the address of the Aquifer that performed deployment.\\n        if (IWell(well).aquifer() != address(this)) {\\n            revert InvalidConfig();\\n        }\\n\\n        // Save implementation\\n        wellImplementation[well] = implementation;\\n\\n        emit BoreWell(\\n            well,\\n            implementation,\\n            IWell(well).tokens(),\\n            IWell(well).wellFunction(),\\n            IWell(well).pumps(),\\n            IWell(well).wellData()\\n        );\\n    }\\n\\n    function predictWellAddress(\\n        address implementation,\\n        bytes calldata immutableData,\\n        bytes32 salt\\n    ) external view returns (address well) {\\n        // Aquifer doesn't support using a salt of 0 to deploy a Well at a deterministic address.\\n        if (salt == bytes32(0)) {\\n            revert InvalidSalt();\\n        }\\n        salt = keccak256(abi.encode(msg.sender, salt));\\n        if (immutableData.length > 0) {\\n            well = implementation.predictDeterministicAddress(immutableData, salt, address(this));\\n        } else {\\n            well = implementation.predictDeterministicAddress(salt, address(this));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IAquifer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20, SafeERC20} from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IWell, Call} from \\\"src/interfaces/IWell.sol\\\";\\n\\n/**\\n * @title IAquifer\\n * @author Publius\\n * @notice Interface for the Aquifer, a permissionless Well deployer and registry.\\n */\\ninterface IAquifer {\\n    /**\\n     * @notice Thrown when the {init} function call on the Well reverts.\\n     */\\n    error InitFailed(string reason);\\n\\n    /**\\n     * @notice Thrown when the user attempts to bore a Well with invalid configuration.\\n     */\\n    error InvalidConfig();\\n\\n    /**\\n     * @notice Thrown a Well is bored, but not initialized.\\n     */\\n    error WellNotInitialized();\\n\\n    /**\\n     * @notice Thrown when the user attempts to predict a Well's deterministic address with a salt of 0.\\n     */\\n    error InvalidSalt();\\n\\n    /**\\n     * @notice Emitted when a Well is deployed.\\n     * @param well The address of the new Well\\n     * @param implementation The Well implementation address\\n     * @param tokens The tokens in the Well\\n     * @param wellFunction The Well function\\n     * @param pumps The pumps to bore in the Well\\n     * @param wellData The Well data to implement into the Well\\n     */\\n    event BoreWell(\\n        address well, address implementation, IERC20[] tokens, Call wellFunction, Call[] pumps, bytes wellData\\n    );\\n\\n    /**\\n     * @notice Deploys a Well.\\n     * @param implementation The Well implementation to clone.\\n     * @param immutableData The data to append to the bytecode of the contract.\\n     * @param initFunctionCall The function call to initialize the Well. Set to empty bytes for no call.\\n     * @param salt The salt to deploy the Well with (`bytes32(0)` for none). See {LibClone}.\\n     * @return wellAddress The address of the new Well\\n     */\\n    function boreWell(\\n        address implementation,\\n        bytes calldata immutableData,\\n        bytes calldata initFunctionCall,\\n        bytes32 salt\\n    ) external returns (address wellAddress);\\n\\n    /**\\n     * @notice Returns the implementation that a given Well was deployed with.\\n     * @param well The Well to get the implementation of\\n     * @return implementation The address of the implementation of a Well.\\n     * @dev Always verify that a Well was deployed by a trusted Aquifer using a trusted implementation before using.\\n     * If `wellImplementation == address(0)`, then the Aquifer did not deploy the Well.\\n     */\\n    function wellImplementation(address well) external view returns (address implementation);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWell.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Call is the struct that contains the target address and extra calldata of a generic call.\\n */\\nstruct Call {\\n    address target; // The address the call is executed on.\\n    bytes data; // Extra calldata to be passed during the call\\n}\\n\\n/**\\n * @title IWell is the interface for the Well contract.\\n *\\n * In order for a Well to be verified using a permissionless on-chain registry, a Well Implementation should:\\n * - Not be able to self-destruct (Aquifer's registry would be vulnerable to a metamorphic contract attack)\\n * - Not be able to change its tokens, Well Function, Pumps and Well Data\\n */\\ninterface IWell {\\n    /**\\n     * @notice Emitted when a Swap occurs.\\n     * @param fromToken The token swapped from\\n     * @param toToken The token swapped to\\n     * @param amountIn The amount of `fromToken` transferred into the Well\\n     * @param amountOut The amount of `toToken` transferred out of the Well\\n     * @param recipient The address that received `toToken`\\n     */\\n    event Swap(IERC20 fromToken, IERC20 toToken, uint256 amountIn, uint256 amountOut, address recipient);\\n\\n    /**\\n     * @notice Emitted when liquidity is added to the Well.\\n     * @param tokenAmountsIn The amount of each token added to the Well\\n     * @param lpAmountOut The amount of LP tokens minted\\n     * @param recipient The address that received the LP tokens\\n     */\\n    event AddLiquidity(uint256[] tokenAmountsIn, uint256 lpAmountOut, address recipient);\\n\\n    /**\\n     * @notice Emitted when liquidity is removed from the Well as multiple underlying tokens.\\n     * @param lpAmountIn The amount of LP tokens burned\\n     * @param tokenAmountsOut The amount of each underlying token removed\\n     * @param recipient The address that received the underlying tokens\\n     * @dev Gas cost scales with `n` tokens.\\n     */\\n    event RemoveLiquidity(uint256 lpAmountIn, uint256[] tokenAmountsOut, address recipient);\\n\\n    /**\\n     * @notice Emitted when liquidity is removed from the Well as a single underlying token.\\n     * @param lpAmountIn The amount of LP tokens burned\\n     * @param tokenOut The underlying token removed\\n     * @param tokenAmountOut The amount of `tokenOut` removed\\n     * @param recipient The address that received the underlying tokens\\n     * @dev Emitting a separate event when removing liquidity as a single token\\n     * saves gas, since `tokenAmountsOut` in {RemoveLiquidity} must emit a value\\n     * for each token in the Well.\\n     */\\n    event RemoveLiquidityOneToken(uint256 lpAmountIn, IERC20 tokenOut, uint256 tokenAmountOut, address recipient);\\n\\n    /**\\n     * @notice Emitted when a Shift occurs.\\n     * @param reserves The ending reserves after a shift\\n     * @param toToken The token swapped to\\n     * @param amountOut The amount of `toToken` transferred out of the Well\\n     * @param recipient The address that received `toToken`\\n     */\\n    event Shift(uint256[] reserves, IERC20 toToken, uint256 amountOut, address recipient);\\n\\n    /**\\n     * @notice Emitted when a Sync occurs.\\n     * @param reserves The ending reserves after a sync\\n     * @param lpAmountOut The amount of LP tokens received from the sync.\\n     * @param recipient The address that received the LP tokens\\n     */\\n    event Sync(uint256[] reserves, uint256 lpAmountOut, address recipient);\\n\\n    //////////////////// WELL DEFINITION ////////////////////\\n\\n    /**\\n     * @notice Returns a list of ERC20 tokens supported by the Well.\\n     */\\n    function tokens() external view returns (IERC20[] memory);\\n\\n    /**\\n     * @notice Returns the Well function as a Call struct.\\n     * @dev Contains the address of the Well function contract and extra data to\\n     * pass during calls.\\n     *\\n     * **Well functions** define a relationship between the reserves of the\\n     * tokens in the Well and the number of LP tokens.\\n     *\\n     * A Well function MUST implement {IWellFunction}.\\n     */\\n    function wellFunction() external view returns (Call memory);\\n\\n    /**\\n     * @notice Returns the Pumps attached to the Well as Call structs.\\n     * @dev Contains the addresses of the Pumps contract and extra data to pass\\n     * during calls.\\n     *\\n     * **Pumps** are on-chain oracles that are updated every time the Well is\\n     * interacted with.\\n     *\\n     * A Pump is not required for Well operation. For Wells without a Pump:\\n     * `pumps().length = 0`.\\n     *\\n     * An attached Pump MUST implement {IPump}.\\n     */\\n    function pumps() external view returns (Call[] memory);\\n\\n    /**\\n     * @notice Returns the Well data that the Well was bored with.\\n     * @dev The existence and signature of Well data is determined by each individual implementation.\\n     */\\n    function wellData() external view returns (bytes memory);\\n\\n    /**\\n     * @notice Returns the Aquifer that created this Well.\\n     * @dev Wells can be permissionlessly bored in an Aquifer.\\n     *\\n     * Aquifers stores the implementation that was used to bore the Well.\\n     */\\n    function aquifer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the tokens, Well Function, Pumps and Well Data associated\\n     * with the Well as well as the Aquifer that deployed the Well.\\n     */\\n    function well()\\n        external\\n        view\\n        returns (\\n            IERC20[] memory _tokens,\\n            Call memory _wellFunction,\\n            Call[] memory _pumps,\\n            bytes memory _wellData,\\n            address _aquifer\\n        );\\n\\n    //////////////////// SWAP: FROM ////////////////////\\n\\n    /**\\n     * @notice Swaps from an exact amount of `fromToken` to a minimum amount of `toToken`.\\n     * @param fromToken The token to swap from\\n     * @param toToken The token to swap to\\n     * @param amountIn The amount of `fromToken` to spend\\n     * @param minAmountOut The minimum amount of `toToken` to receive\\n     * @param recipient The address to receive `toToken`\\n     * @param deadline The timestamp after which this operation is invalid\\n     * @return amountOut The amount of `toToken` received\\n     */\\n    function swapFrom(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address recipient,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    /**\\n     * @notice Swaps from an exact amount of `fromToken` to a minimum amount of `toToken` and supports fee on transfer tokens.\\n     * @param fromToken The token to swap from\\n     * @param toToken The token to swap to\\n     * @param amountIn The amount of `fromToken` to spend\\n     * @param minAmountOut The minimum amount of `toToken` to take from the Well. Note that if `toToken` charges a fee on transfer, `recipient` will receive less than this amount.\\n     * @param recipient The address to receive `toToken`\\n     * @param deadline The timestamp after which this operation is invalid\\n     * @return amountOut The amount of `toToken` transferred from the Well. Note that if `toToken` charges a fee on transfer, `recipient` may receive less than this amount.\\n     * @dev Can also be used for tokens without a fee on transfer, but is less gas efficient.\\n     */\\n    function swapFromFeeOnTransfer(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address recipient,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    /**\\n     * @notice Gets the amount of one token received for swapping an amount of another token.\\n     * @param fromToken The token to swap from\\n     * @param toToken The token to swap to\\n     * @param amountIn The amount of `fromToken` to spend\\n     * @return amountOut The amount of `toToken` to receive\\n     */\\n    function getSwapOut(IERC20 fromToken, IERC20 toToken, uint256 amountIn) external view returns (uint256 amountOut);\\n\\n    //////////////////// SWAP: TO ////////////////////\\n\\n    /**\\n     * @notice Swaps from a maximum amount of `fromToken` to an exact amount of `toToken`.\\n     * @param fromToken The token to swap from\\n     * @param toToken The token to swap to\\n     * @param maxAmountIn The maximum amount of `fromToken` to spend\\n     * @param amountOut The amount of `toToken` to receive\\n     * @param recipient The address to receive `toToken`\\n     * @param deadline The timestamp after which this operation is invalid\\n     * @return amountIn The amount of `toToken` received\\n     */\\n    function swapTo(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 maxAmountIn,\\n        uint256 amountOut,\\n        address recipient,\\n        uint256 deadline\\n    ) external returns (uint256 amountIn);\\n\\n    /**\\n     * @notice Gets the amount of one token that must be spent to receive an amount of another token during a swap.\\n     * @param fromToken The token to swap from\\n     * @param toToken The token to swap to\\n     * @param amountOut The amount of `toToken` desired\\n     * @return amountIn The amount of `fromToken` that must be spent\\n     */\\n    function getSwapIn(IERC20 fromToken, IERC20 toToken, uint256 amountOut) external view returns (uint256 amountIn);\\n\\n    //////////////////// SHIFT ////////////////////\\n\\n    /**\\n     * @notice Shifts at least `minAmountOut` excess tokens held by the Well into `tokenOut` and delivers to `recipient`.\\n     * @param tokenOut The token to shift into\\n     * @param minAmountOut The minimum amount of `tokenOut` to receive\\n     * @param recipient The address to receive the token\\n     * @return amountOut The amount of `tokenOut` received\\n     * @dev Can be used in a multicall using a contract like Pipeline to perform gas efficient swaps.\\n     * No deadline is needed since this function does not use the user's assets. If adding liquidity in a multicall,\\n     * then a deadline check can be added to the multicall.\\n     */\\n    function shift(IERC20 tokenOut, uint256 minAmountOut, address recipient) external returns (uint256 amountOut);\\n\\n    /**\\n     * @notice Calculates the amount of the token out received from shifting excess tokens held by the Well.\\n     * @param tokenOut The token to shift into\\n     * @return amountOut The amount of `tokenOut` received\\n     */\\n    function getShiftOut(IERC20 tokenOut) external returns (uint256 amountOut);\\n\\n    //////////////////// ADD LIQUIDITY ////////////////////\\n\\n    /**\\n     * @notice Adds liquidity to the Well as multiple tokens in any ratio.\\n     * @param tokenAmountsIn The amount of each token to add; MUST match the indexing of {Well.tokens}\\n     * @param minLpAmountOut The minimum amount of LP tokens to receive\\n     * @param recipient The address to receive the LP tokens\\n     * @param deadline The timestamp after which this operation is invalid\\n     * @return lpAmountOut The amount of LP tokens received\\n     */\\n    function addLiquidity(\\n        uint256[] memory tokenAmountsIn,\\n        uint256 minLpAmountOut,\\n        address recipient,\\n        uint256 deadline\\n    ) external returns (uint256 lpAmountOut);\\n\\n    /**\\n     * @notice Adds liquidity to the Well as multiple tokens in any ratio and supports\\n     * fee on transfer tokens.\\n     * @param tokenAmountsIn The amount of each token to add; MUST match the indexing of {Well.tokens}\\n     * @param minLpAmountOut The minimum amount of LP tokens to receive\\n     * @param recipient The address to receive the LP tokens\\n     * @param deadline The timestamp after which this operation is invalid\\n     * @return lpAmountOut The amount of LP tokens received\\n     * @dev Can also be used for tokens without a fee on transfer, but is less gas efficient.\\n     */\\n    function addLiquidityFeeOnTransfer(\\n        uint256[] memory tokenAmountsIn,\\n        uint256 minLpAmountOut,\\n        address recipient,\\n        uint256 deadline\\n    ) external returns (uint256 lpAmountOut);\\n\\n    /**\\n     * @notice Gets the amount of LP tokens received from adding liquidity as multiple tokens in any ratio.\\n     * @param tokenAmountsIn The amount of each token to add; MUST match the indexing of {Well.tokens}\\n     * @return lpAmountOut The amount of LP tokens received\\n     */\\n    function getAddLiquidityOut(uint256[] memory tokenAmountsIn) external view returns (uint256 lpAmountOut);\\n\\n    //////////////////// REMOVE LIQUIDITY: BALANCED ////////////////////\\n\\n    /**\\n     * @notice Removes liquidity from the Well as all underlying tokens in a balanced ratio.\\n     * @param lpAmountIn The amount of LP tokens to burn\\n     * @param minTokenAmountsOut The minimum amount of each underlying token to receive; MUST match the indexing of {Well.tokens}\\n     * @param recipient The address to receive the underlying tokens\\n     * @param deadline The timestamp after which this operation is invalid\\n     * @return tokenAmountsOut The amount of each underlying token received\\n     */\\n    function removeLiquidity(\\n        uint256 lpAmountIn,\\n        uint256[] calldata minTokenAmountsOut,\\n        address recipient,\\n        uint256 deadline\\n    ) external returns (uint256[] memory tokenAmountsOut);\\n\\n    /**\\n     * @notice Gets the amount of each underlying token received from removing liquidity in a balanced ratio.\\n     * @param lpAmountIn The amount of LP tokens to burn\\n     * @return tokenAmountsOut The amount of each underlying token received\\n     */\\n    function getRemoveLiquidityOut(uint256 lpAmountIn) external view returns (uint256[] memory tokenAmountsOut);\\n\\n    //////////////////// REMOVE LIQUIDITY: ONE TOKEN ////////////////////\\n\\n    /**\\n     * @notice Removes liquidity from the Well as a single underlying token.\\n     * @param lpAmountIn The amount of LP tokens to burn\\n     * @param tokenOut The underlying token to receive\\n     * @param minTokenAmountOut The minimum amount of `tokenOut` to receive\\n     * @param recipient The address to receive the underlying tokens\\n     * @param deadline The timestamp after which this operation is invalid\\n     * @return tokenAmountOut The amount of `tokenOut` received\\n     */\\n    function removeLiquidityOneToken(\\n        uint256 lpAmountIn,\\n        IERC20 tokenOut,\\n        uint256 minTokenAmountOut,\\n        address recipient,\\n        uint256 deadline\\n    ) external returns (uint256 tokenAmountOut);\\n\\n    /**\\n     * @notice Gets the amount received from removing liquidity from the Well as a single underlying token.\\n     * @param lpAmountIn The amount of LP tokens to burn\\n     * @param tokenOut The underlying token to receive\\n     * @return tokenAmountOut The amount of `tokenOut` received\\n     *\\n     */\\n    function getRemoveLiquidityOneTokenOut(\\n        uint256 lpAmountIn,\\n        IERC20 tokenOut\\n    ) external view returns (uint256 tokenAmountOut);\\n\\n    //////////////////// REMOVE LIQUIDITY: IMBALANCED ////////////////////\\n\\n    /**\\n     * @notice Removes liquidity from the Well as multiple underlying tokens in any ratio.\\n     * @param maxLpAmountIn The maximum amount of LP tokens to burn\\n     * @param tokenAmountsOut The amount of each underlying token to receive; MUST match the indexing of {Well.tokens}\\n     * @param recipient The address to receive the underlying tokens\\n     * @return lpAmountIn The amount of LP tokens burned\\n     */\\n    function removeLiquidityImbalanced(\\n        uint256 maxLpAmountIn,\\n        uint256[] calldata tokenAmountsOut,\\n        address recipient,\\n        uint256 deadline\\n    ) external returns (uint256 lpAmountIn);\\n\\n    /**\\n     * @notice Gets the amount of LP tokens to burn from removing liquidity as multiple underlying tokens in any ratio.\\n     * @param tokenAmountsOut The amount of each underlying token to receive; MUST match the indexing of {Well.tokens}\\n     * @return lpAmountIn The amount of LP tokens burned\\n     */\\n    function getRemoveLiquidityImbalancedIn(uint256[] calldata tokenAmountsOut)\\n        external\\n        view\\n        returns (uint256 lpAmountIn);\\n\\n    //////////////////// RESERVES ////////////////////\\n\\n    /**\\n     * @notice Syncs the Well's reserves with the Well's balances of underlying tokens. If the reserves\\n     * increase, mints at least `minLpAmountOut` LP Tokens to `recipient`.\\n     * @param recipient The address to receive the LP tokens\\n     * @param minLpAmountOut The minimum amount of LP tokens to receive\\n     * @return lpAmountOut The amount of LP tokens received\\n     * @dev Can be used in a multicall using a contract like Pipeline to perform gas efficient additions of liquidity.\\n     * No deadline is needed since this function does not use the user's assets. If adding liquidity in a multicall,\\n     * then a deadline check can be added to the multicall.\\n     * If `sync` decreases the Well's reserves, then no LP tokens are minted and `lpAmountOut` must be 0.\\n     */\\n    function sync(address recipient, uint256 minLpAmountOut) external returns (uint256 lpAmountOut);\\n\\n    /**\\n     * @notice Calculates the amount of LP Tokens received from syncing the Well's reserves with the Well's balances.\\n     * @return lpAmountOut The amount of LP tokens received\\n     */\\n    function getSyncOut() external view returns (uint256 lpAmountOut);\\n\\n    /**\\n     * @notice Sends excess tokens held by the Well to the `recipient`.\\n     * @param recipient The address to send the tokens\\n     * @return skimAmounts The amount of each token skimmed\\n     * @dev No deadline is needed since this function does not use the user's assets.\\n     */\\n    function skim(address recipient) external returns (uint256[] memory skimAmounts);\\n\\n    /**\\n     * @notice Gets the reserves of each token held by the Well.\\n     */\\n    function getReserves() external view returns (uint256[] memory reserves);\\n\\n    /**\\n     * @notice Returns whether or not the Well is initialized if it requires initialization.\\n     * If a Well does not require initialization, it should always return `true`.\\n     */\\n    function isInitialized() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWellErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title IWellErrors defines all Well errors.\\n * @dev The errors are separated into a different interface as not all Well\\n * implementations may share the same errors.\\n */\\ninterface IWellErrors {\\n    /**\\n     * @notice Thrown when an operation would deliver fewer tokens than `minAmountOut`.\\n     */\\n    error SlippageOut(uint256 amountOut, uint256 minAmountOut);\\n\\n    /**\\n     * @notice Thrown when an operation would require more tokens than `maxAmountIn`.\\n     */\\n    error SlippageIn(uint256 amountIn, uint256 maxAmountIn);\\n\\n    /**\\n     * @notice Thrown if one or more tokens used in the operation are not supported by the Well.\\n     */\\n    error InvalidTokens();\\n\\n    /**\\n     * @notice Thrown if this operation would cause an incorrect change in Well reserves.\\n     */\\n    error InvalidReserves();\\n\\n    /**\\n     * @notice Thrown when a Well is bored with duplicate tokens.\\n     */\\n    error DuplicateTokens(IERC20 token);\\n\\n    /**\\n     * @notice Thrown if an operation is executed after the provided `deadline` has passed.\\n     */\\n    error Expired();\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWellFunction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IWellFunction\\n * @notice Defines a relationship between token reserves and LP token supply.\\n * @dev Well Functions can contain arbitrary logic, but should be deterministic\\n * if expected to be used alongside a Pump. When interacing with a Well or\\n * Well Function, always verify that the Well Function is valid.\\n */\\ninterface IWellFunction {\\n    /**\\n     * @notice Thrown if the user inputs a `j` value is out of bounds.\\n     */\\n    error InvalidJArgument();\\n\\n    /**\\n     * @notice Calculates the `j`th reserve given a list of `reserves` and `lpTokenSupply`.\\n     * @param reserves A list of token reserves. The jth reserve will be ignored, but a placeholder must be provided.\\n     * @param j The index of the reserve to solve for\\n     * @param lpTokenSupply The supply of LP tokens\\n     * @param data Extra Well function data provided on every call\\n     * @return reserve The resulting reserve at the jth index\\n     * @dev Should round up to ensure that Well reserves are marginally higher to enforce calcLpTokenSupply(...) >= totalSupply()\\n     */\\n    function calcReserve(\\n        uint256[] memory reserves,\\n        uint256 j,\\n        uint256 lpTokenSupply,\\n        bytes calldata data\\n    ) external view returns (uint256 reserve);\\n\\n    /**\\n     * @notice Gets the LP token supply given a list of reserves.\\n     * @param reserves A list of token reserves\\n     * @param data Extra Well function data provided on every call\\n     * @return lpTokenSupply The resulting supply of LP tokens\\n     * @dev Should round down to ensure so that the Well Token supply is marignally lower to enforce calcLpTokenSupply(...) >= totalSupply()\\n     */\\n    function calcLpTokenSupply(\\n        uint256[] memory reserves,\\n        bytes calldata data\\n    ) external view returns (uint256 lpTokenSupply);\\n\\n    /**\\n     * @notice Calculates the amount of each reserve token underlying a given amount of LP tokens.\\n     * @param lpTokenAmount An amount of LP tokens\\n     * @param reserves A list of token reserves\\n     * @param lpTokenSupply The current supply of LP tokens\\n     * @param data Extra Well function data provided on every call\\n     * @return underlyingAmounts The amount of each reserve token that underlies the LP tokens\\n     * @dev The constraint totalSupply() <= calcLPTokenSupply(...) must be held in the case where\\n     * `lpTokenAmount` LP tokens are burned in exchanged for `underlyingAmounts`. If the constraint\\n     * does not hold, then the Well Function is invalid.\\n     */\\n    function calcLPTokenUnderlying(\\n        uint256 lpTokenAmount,\\n        uint256[] memory reserves,\\n        uint256 lpTokenSupply,\\n        bytes calldata data\\n    ) external view returns (uint256[] memory underlyingAmounts);\\n\\n    /**\\n     * @notice Returns the name of the Well function.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the symbol of the Well function.\\n     */\\n    function symbol() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/pumps/IPump.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IPump defines the interface for a Pump.\\n *\\n * @dev Pumps are on-chain oracles that are updated upon each interaction with a {IWell}.\\n * When reading a Pump, always verify the Pump's functionality.\\n */\\ninterface IPump {\\n    /**\\n     * @notice Updates the Pump with the given reserves.\\n     * @param reserves The previous reserves of the tokens in the Well.\\n     * @param data data specific to the Well\\n     * @dev Pumps are updated every time a user swaps, adds liquidity, or\\n     * removes liquidity from a Well.\\n     */\\n    function update(uint256[] calldata reserves, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"src/libraries/LibBytes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title LibBytes\\n * @author Publius\\n * @notice Contains byte operations used during storage reads & writes.\\n *\\n * {LibBytes} tightly packs an array of `uint256` values into `n / 2` storage\\n * slots, where `n` is number of items to pack.\\n *\\n * Each value must be `<= type(uint128).max` in order pack properly.\\n */\\nlibrary LibBytes {\\n    uint256 constant MAX_UINT128 = 340_282_366_920_938_463_463_374_607_431_768_211_455; // type(uint128).max\\n\\n    /**\\n     * @dev Store packed uint128 `reserves` starting at storage position `slot`.\\n     * Balances are passed as an uint256[], but values must be <= max uint128\\n     * to allow for packing into a single storage slot.\\n     */\\n    function storeUint128(bytes32 slot, uint256[] memory reserves) internal {\\n        // Shortcut: two reserves can be packed into one slot without a loop\\n        if (reserves.length == 2) {\\n            require(reserves[0] <= MAX_UINT128, \\\"ByteStorage: too large\\\");\\n            require(reserves[1] <= MAX_UINT128, \\\"ByteStorage: too large\\\");\\n            assembly {\\n                sstore(slot, add(mload(add(reserves, 32)), shl(128, mload(add(reserves, 64)))))\\n            }\\n        } else {\\n            uint256 maxI = reserves.length / 2; // number of fully-packed slots\\n            uint256 iByte; // byte offset of the current reserve\\n            for (uint256 i; i < maxI; ++i) {\\n                require(reserves[2 * i] <= MAX_UINT128, \\\"ByteStorage: too large\\\");\\n                require(reserves[2 * i + 1] <= MAX_UINT128, \\\"ByteStorage: too large\\\");\\n                iByte = i * 64;\\n                assembly {\\n                    sstore(\\n                        add(slot, i),\\n                        add(mload(add(reserves, add(iByte, 32))), shl(128, mload(add(reserves, add(iByte, 64)))))\\n                    )\\n                }\\n            }\\n            // If there is an odd number of reserves, create a slot with the last reserve\\n            // Since `i < maxI` above, the next byte offset `maxI * 64`\\n            // Equivalent to \\\"reserves.length % 2 == 1\\\", but cheaper.\\n            if (reserves.length & 1 == 1) {\\n                require(reserves[reserves.length - 1] <= MAX_UINT128, \\\"ByteStorage: too large\\\");\\n                iByte = maxI * 64;\\n                assembly {\\n                    sstore(\\n                        add(slot, maxI),\\n                        add(mload(add(reserves, add(iByte, 32))), shr(128, shl(128, sload(add(slot, maxI)))))\\n                    )\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Read `n` packed uint128 reserves at storage position `slot`.\\n     */\\n    function readUint128(bytes32 slot, uint256 n) internal view returns (uint256[] memory reserves) {\\n        // Initialize array with length `n`, fill it in via assembly\\n        reserves = new uint256[](n);\\n\\n        // Shortcut: two reserves can be quickly unpacked from one slot\\n        if (n == 2) {\\n            assembly {\\n                mstore(add(reserves, 32), shr(128, shl(128, sload(slot))))\\n                mstore(add(reserves, 64), shr(128, sload(slot)))\\n            }\\n            return reserves;\\n        }\\n\\n        uint256 iByte;\\n        for (uint256 i = 1; i <= n; ++i) {\\n            // `iByte` is the byte position for the current slot:\\n            // i        1 2 3 4 5 6\\n            // iByte    0 0 1 1 2 2\\n            iByte = (i - 1) / 2;\\n            // Equivalent to \\\"i % 2 == 1\\\", but cheaper.\\n            if (i & 1 == 1) {\\n                assembly {\\n                    mstore(\\n                        // store at index i * 32; i = 0 is skipped by loop\\n                        add(reserves, mul(i, 32)),\\n                        shr(128, shl(128, sload(add(slot, iByte))))\\n                    )\\n                }\\n            } else {\\n                assembly {\\n                    mstore(add(reserves, mul(i, 32)), shr(128, sload(add(slot, iByte))))\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/LibClone.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice Minimal proxy library.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibClone.sol)\\n/// @author Minimal proxy by 0age (https://github.com/0age)\\n/// @author Clones with immutable args by wighawag, zefram.eth, Saw-mon & Natalie\\n/// (https://github.com/Saw-mon-and-Natalie/clones-with-immutable-args)\\n///\\n/// @dev Minimal proxy:\\n/// Although the sw0nt pattern saves 5 gas over the erc-1167 pattern during runtime,\\n/// it is not supported out-of-the-box on Etherscan. Hence, we choose to use the 0age pattern,\\n/// which saves 4 gas over the erc-1167 pattern during runtime, and has the smallest bytecode.\\n///\\n/// @dev Clones with immutable args (CWIA):\\n/// The implementation of CWIA here implements a `receive()` method that emits the\\n/// `ReceiveETH(uint256)` event. This skips the `DELEGATECALL` when there is no calldata,\\n/// enabling us to accept hard gas-capped `sends` & `transfers` for maximum backwards\\n/// composability. The minimal proxy implementation does not offer this feature.\\nlibrary LibClone {\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Unable to deploy the clone.\\n    error DeploymentFailed();\\n\\n    /// @dev The salt must start with either the zero address or the caller.\\n    error SaltDoesNotStartWithCaller();\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                  MINIMAL PROXY OPERATIONS                  */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Deploys a clone of `implementation`.\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            /**\\n             * --------------------------------------------------------------------------+\\n             * CREATION (9 bytes)                                                        |\\n             * --------------------------------------------------------------------------|\\n             * Opcode     | Mnemonic          | Stack     | Memory                       |\\n             * --------------------------------------------------------------------------|\\n             * 60 runSize | PUSH1 runSize     | r         |                              |\\n             * 3d         | RETURNDATASIZE    | 0 r       |                              |\\n             * 81         | DUP2              | r 0 r     |                              |\\n             * 60 offset  | PUSH1 offset      | o r 0 r   |                              |\\n             * 3d         | RETURNDATASIZE    | 0 o r 0 r |                              |\\n             * 39         | CODECOPY          | 0 r       | [0..runSize): runtime code   |\\n             * f3         | RETURN            |           | [0..runSize): runtime code   |\\n             * --------------------------------------------------------------------------|\\n             * RUNTIME (44 bytes)                                                        |\\n             * --------------------------------------------------------------------------|\\n             * Opcode  | Mnemonic       | Stack                  | Memory                |\\n             * --------------------------------------------------------------------------|\\n             *                                                                           |\\n             * ::: keep some values in stack ::::::::::::::::::::::::::::::::::::::::::: |\\n             * 3d      | RETURNDATASIZE | 0                      |                       |\\n             * 3d      | RETURNDATASIZE | 0 0                    |                       |\\n             * 3d      | RETURNDATASIZE | 0 0 0                  |                       |\\n             * 3d      | RETURNDATASIZE | 0 0 0 0                |                       |\\n             *                                                                           |\\n             * ::: copy calldata to memory ::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 36      | CALLDATASIZE   | cds 0 0 0 0            |                       |\\n             * 3d      | RETURNDATASIZE | 0 cds 0 0 0 0          |                       |\\n             * 3d      | RETURNDATASIZE | 0 0 cds 0 0 0 0        |                       |\\n             * 37      | CALLDATACOPY   | 0 0 0 0                | [0..cds): calldata    |\\n             *                                                                           |\\n             * ::: delegate call to the implementation contract :::::::::::::::::::::::: |\\n             * 36      | CALLDATASIZE   | cds 0 0 0 0            | [0..cds): calldata    |\\n             * 3d      | RETURNDATASIZE | 0 cds 0 0 0 0          | [0..cds): calldata    |\\n             * 73 addr | PUSH20 addr    | addr 0 cds 0 0 0 0     | [0..cds): calldata    |\\n             * 5a      | GAS            | gas addr 0 cds 0 0 0 0 | [0..cds): calldata    |\\n             * f4      | DELEGATECALL   | success 0 0            | [0..cds): calldata    |\\n             *                                                                           |\\n             * ::: copy return data to memory :::::::::::::::::::::::::::::::::::::::::: |\\n             * 3d      | RETURNDATASIZE | rds success 0 0        | [0..cds): calldata    |\\n             * 3d      | RETURNDATASIZE | rds rds success 0 0    | [0..cds): calldata    |\\n             * 93      | SWAP4          | 0 rds success 0 rds    | [0..cds): calldata    |\\n             * 80      | DUP1           | 0 0 rds success 0 rds  | [0..cds): calldata    |\\n             * 3e      | RETURNDATACOPY | success 0 rds          | [0..rds): returndata  |\\n             *                                                                           |\\n             * 60 0x2a | PUSH1 0x2a     | 0x2a success 0 rds     | [0..rds): returndata  |\\n             * 57      | JUMPI          | 0 rds                  | [0..rds): returndata  |\\n             *                                                                           |\\n             * ::: revert :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * fd      | REVERT         |                        | [0..rds): returndata  |\\n             *                                                                           |\\n             * ::: return :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 5b      | JUMPDEST       | 0 rds                  | [0..rds): returndata  |\\n             * f3      | RETURN         |                        | [0..rds): returndata  |\\n             * --------------------------------------------------------------------------+\\n             */\\n\\n            mstore(0x21, 0x5af43d3d93803e602a57fd5bf3)\\n            mstore(0x14, implementation)\\n            mstore(0x00, 0x602c3d8160093d39f33d3d3d3d363d3d37363d73)\\n            instance := create(0, 0x0c, 0x35)\\n            // Restore the part of the free memory pointer that has been overwritten.\\n            mstore(0x21, 0)\\n            // If `instance` is zero, revert.\\n            if iszero(instance) {\\n                // Store the function selector of `DeploymentFailed()`.\\n                mstore(0x00, 0x30116425)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Deploys a deterministic clone of `implementation` with `salt`.\\n    function cloneDeterministic(address implementation, bytes32 salt)\\n        internal\\n        returns (address instance)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x21, 0x5af43d3d93803e602a57fd5bf3)\\n            mstore(0x14, implementation)\\n            mstore(0x00, 0x602c3d8160093d39f33d3d3d3d363d3d37363d73)\\n            instance := create2(0, 0x0c, 0x35, salt)\\n            // Restore the part of the free memory pointer that has been overwritten.\\n            mstore(0x21, 0)\\n            // If `instance` is zero, revert.\\n            if iszero(instance) {\\n                // Store the function selector of `DeploymentFailed()`.\\n                mstore(0x00, 0x30116425)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the initialization code hash of the clone of `implementation`.\\n    /// Used for mining vanity addresses with create2crunch.\\n    function initCodeHash(address implementation) internal pure returns (bytes32 hash) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x21, 0x5af43d3d93803e602a57fd5bf3)\\n            mstore(0x14, implementation)\\n            mstore(0x00, 0x602c3d8160093d39f33d3d3d3d363d3d37363d73)\\n            hash := keccak256(0x0c, 0x35)\\n            // Restore the part of the free memory pointer that has been overwritten.\\n            mstore(0x21, 0)\\n        }\\n    }\\n\\n    /// @dev Returns the address of the deterministic clone of `implementation`,\\n    /// with `salt` by `deployer`.\\n    function predictDeterministicAddress(address implementation, bytes32 salt, address deployer)\\n        internal\\n        pure\\n        returns (address predicted)\\n    {\\n        bytes32 hash = initCodeHash(implementation);\\n        predicted = predictDeterministicAddress(hash, salt, deployer);\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*           CLONES WITH IMMUTABLE ARGS OPERATIONS            */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Deploys a minimal proxy with `implementation`,\\n    /// using immutable arguments encoded in `data`.\\n    function clone(address implementation, bytes memory data) internal returns (address instance) {\\n        assembly {\\n            // Compute the boundaries of the data and cache the memory slots around it.\\n            let mBefore3 := mload(sub(data, 0x60))\\n            let mBefore2 := mload(sub(data, 0x40))\\n            let mBefore1 := mload(sub(data, 0x20))\\n            let dataLength := mload(data)\\n            let dataEnd := add(add(data, 0x20), dataLength)\\n            let mAfter1 := mload(dataEnd)\\n\\n            // +2 bytes for telling how much data there is appended to the call.\\n            let extraLength := add(dataLength, 2)\\n            // The `creationSize` is `extraLength + 108`\\n            // The `runSize` is `creationSize - 10`.\\n\\n            /**\\n             * ---------------------------------------------------------------------------------------------------+\\n             * CREATION (10 bytes)                                                                                |\\n             * ---------------------------------------------------------------------------------------------------|\\n             * Opcode     | Mnemonic          | Stack     | Memory                                                |\\n             * ---------------------------------------------------------------------------------------------------|\\n             * 61 runSize | PUSH2 runSize     | r         |                                                       |\\n             * 3d         | RETURNDATASIZE    | 0 r       |                                                       |\\n             * 81         | DUP2              | r 0 r     |                                                       |\\n             * 60 offset  | PUSH1 offset      | o r 0 r   |                                                       |\\n             * 3d         | RETURNDATASIZE    | 0 o r 0 r |                                                       |\\n             * 39         | CODECOPY          | 0 r       | [0..runSize): runtime code                            |\\n             * f3         | RETURN            |           | [0..runSize): runtime code                            |\\n             * ---------------------------------------------------------------------------------------------------|\\n             * RUNTIME (98 bytes + extraLength)                                                                   |\\n             * ---------------------------------------------------------------------------------------------------|\\n             * Opcode   | Mnemonic       | Stack                    | Memory                                      |\\n             * ---------------------------------------------------------------------------------------------------|\\n             *                                                                                                    |\\n             * ::: if no calldata, emit event & return w/o `DELEGATECALL` ::::::::::::::::::::::::::::::::::::::: |\\n             * 36       | CALLDATASIZE   | cds                      |                                             |\\n             * 60 0x2c  | PUSH1 0x2c     | 0x2c cds                 |                                             |\\n             * 57       | JUMPI          |                          |                                             |\\n             * 34       | CALLVALUE      | cv                       |                                             |\\n             * 3d       | RETURNDATASIZE | 0 cv                     |                                             |\\n             * 52       | MSTORE         |                          | [0..0x20): callvalue                        |\\n             * 7f sig   | PUSH32 0x9e..  | sig                      | [0..0x20): callvalue                        |\\n             * 59       | MSIZE          | 0x20 sig                 | [0..0x20): callvalue                        |\\n             * 3d       | RETURNDATASIZE | 0 0x20 sig               | [0..0x20): callvalue                        |\\n             * a1       | LOG1           |                          | [0..0x20): callvalue                        |\\n             * 00       | STOP           |                          | [0..0x20): callvalue                        |\\n             * 5b       | JUMPDEST       |                          |                                             |\\n             *                                                                                                    |\\n             * ::: copy calldata to memory :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 36       | CALLDATASIZE   | cds                      |                                             |\\n             * 3d       | RETURNDATASIZE | 0 cds                    |                                             |\\n             * 3d       | RETURNDATASIZE | 0 0 cds                  |                                             |\\n             * 37       | CALLDATACOPY   |                          | [0..cds): calldata                          |\\n             *                                                                                                    |\\n             * ::: keep some values in stack :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 3d       | RETURNDATASIZE | 0                        | [0..cds): calldata                          |\\n             * 3d       | RETURNDATASIZE | 0 0                      | [0..cds): calldata                          |\\n             * 3d       | RETURNDATASIZE | 0 0 0                    | [0..cds): calldata                          |\\n             * 3d       | RETURNDATASIZE | 0 0 0 0                  | [0..cds): calldata                          |\\n             * 61 extra | PUSH2 extra    | e 0 0 0 0                | [0..cds): calldata                          |\\n             *                                                                                                    |\\n             * ::: copy extra data to memory :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 80       | DUP1           | e e 0 0 0 0              | [0..cds): calldata                          |\\n             * 60 0x62  | PUSH1 0x62     | 0x62 e e 0 0 0 0         | [0..cds): calldata                          |\\n             * 36       | CALLDATASIZE   | cds 0x62 e e 0 0 0 0     | [0..cds): calldata                          |\\n             * 39       | CODECOPY       | e 0 0 0 0                | [0..cds): calldata, [cds..cds+e): extraData |\\n             *                                                                                                    |\\n             * ::: delegate call to the implementation contract ::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 36       | CALLDATASIZE   | cds e 0 0 0 0            | [0..cds): calldata, [cds..cds+e): extraData |\\n             * 01       | ADD            | cds+e 0 0 0 0            | [0..cds): calldata, [cds..cds+e): extraData |\\n             * 3d       | RETURNDATASIZE | 0 cds+e 0 0 0 0          | [0..cds): calldata, [cds..cds+e): extraData |\\n             * 73 addr  | PUSH20 addr    | addr 0 cds+e 0 0 0 0     | [0..cds): calldata, [cds..cds+e): extraData |\\n             * 5a       | GAS            | gas addr 0 cds+e 0 0 0 0 | [0..cds): calldata, [cds..cds+e): extraData |\\n             * f4       | DELEGATECALL   | success 0 0              | [0..cds): calldata, [cds..cds+e): extraData |\\n             *                                                                                                    |\\n             * ::: copy return data to memory ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 3d       | RETURNDATASIZE | rds success 0 0          | [0..cds): calldata, [cds..cds+e): extraData |\\n             * 3d       | RETURNDATASIZE | rds rds success 0 0      | [0..cds): calldata, [cds..cds+e): extraData |\\n             * 93       | SWAP4          | 0 rds success 0 rds      | [0..cds): calldata, [cds..cds+e): extraData |\\n             * 80       | DUP1           | 0 0 rds success 0 rds    | [0..cds): calldata, [cds..cds+e): extraData |\\n             * 3e       | RETURNDATACOPY | success 0 rds            | [0..rds): returndata                        |\\n             *                                                                                                    |\\n             * 60 0x60  | PUSH1 0x60     | 0x60 success 0 rds       | [0..rds): returndata                        |\\n             * 57       | JUMPI          | 0 rds                    | [0..rds): returndata                        |\\n             *                                                                                                    |\\n             * ::: revert ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * fd       | REVERT         |                          | [0..rds): returndata                        |\\n             *                                                                                                    |\\n             * ::: return ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 5b       | JUMPDEST       | 0 rds                    | [0..rds): returndata                        |\\n             * f3       | RETURN         |                          | [0..rds): returndata                        |\\n             * ---------------------------------------------------------------------------------------------------+\\n             */\\n            // Write the bytecode before the data.\\n            mstore(data, 0x5af43d3d93803e606057fd5bf3)\\n            // Write the address of the implementation.\\n            mstore(sub(data, 0x0d), implementation)\\n            // Write the rest of the bytecode.\\n            mstore(\\n                sub(data, 0x21),\\n                or(shl(0x48, extraLength), 0x593da1005b363d3d373d3d3d3d610000806062363936013d73)\\n            )\\n            // `keccak256(\\\"ReceiveETH(uint256)\\\")`\\n            mstore(\\n                sub(data, 0x3a), 0x9e4ac34f21c619cefc926c8bd93b54bf5a39c7ab2127a895af1cc0691d7e3dff\\n            )\\n            mstore(\\n                sub(data, 0x5a),\\n                or(shl(0x78, add(extraLength, 0x62)), 0x6100003d81600a3d39f336602c57343d527f)\\n            )\\n            mstore(dataEnd, shl(0xf0, extraLength))\\n\\n            // Create the instance.\\n            instance := create(0, sub(data, 0x4c), add(extraLength, 0x6c))\\n\\n            // If `instance` is zero, revert.\\n            if iszero(instance) {\\n                // Store the function selector of `DeploymentFailed()`.\\n                mstore(0x00, 0x30116425)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Restore the overwritten memory surrounding `data`.\\n            mstore(dataEnd, mAfter1)\\n            mstore(data, dataLength)\\n            mstore(sub(data, 0x20), mBefore1)\\n            mstore(sub(data, 0x40), mBefore2)\\n            mstore(sub(data, 0x60), mBefore3)\\n        }\\n    }\\n\\n    /// @dev Deploys a deterministic clone of `implementation`,\\n    /// using immutable arguments encoded in `data`, with `salt`.\\n    function cloneDeterministic(address implementation, bytes memory data, bytes32 salt)\\n        internal\\n        returns (address instance)\\n    {\\n        assembly {\\n            // Compute the boundaries of the data and cache the memory slots around it.\\n            let mBefore3 := mload(sub(data, 0x60))\\n            let mBefore2 := mload(sub(data, 0x40))\\n            let mBefore1 := mload(sub(data, 0x20))\\n            let dataLength := mload(data)\\n            let dataEnd := add(add(data, 0x20), dataLength)\\n            let mAfter1 := mload(dataEnd)\\n\\n            // +2 bytes for telling how much data there is appended to the call.\\n            let extraLength := add(dataLength, 2)\\n\\n            // Write the bytecode before the data.\\n            mstore(data, 0x5af43d3d93803e606057fd5bf3)\\n            // Write the address of the implementation.\\n            mstore(sub(data, 0x0d), implementation)\\n            // Write the rest of the bytecode.\\n            mstore(\\n                sub(data, 0x21),\\n                or(shl(0x48, extraLength), 0x593da1005b363d3d373d3d3d3d610000806062363936013d73)\\n            )\\n            // `keccak256(\\\"ReceiveETH(uint256)\\\")`\\n            mstore(\\n                sub(data, 0x3a), 0x9e4ac34f21c619cefc926c8bd93b54bf5a39c7ab2127a895af1cc0691d7e3dff\\n            )\\n            mstore(\\n                sub(data, 0x5a),\\n                or(shl(0x78, add(extraLength, 0x62)), 0x6100003d81600a3d39f336602c57343d527f)\\n            )\\n            mstore(dataEnd, shl(0xf0, extraLength))\\n\\n            // Create the instance.\\n            instance := create2(0, sub(data, 0x4c), add(extraLength, 0x6c), salt)\\n\\n            // If `instance` is zero, revert.\\n            if iszero(instance) {\\n                // Store the function selector of `DeploymentFailed()`.\\n                mstore(0x00, 0x30116425)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Restore the overwritten memory surrounding `data`.\\n            mstore(dataEnd, mAfter1)\\n            mstore(data, dataLength)\\n            mstore(sub(data, 0x20), mBefore1)\\n            mstore(sub(data, 0x40), mBefore2)\\n            mstore(sub(data, 0x60), mBefore3)\\n        }\\n    }\\n\\n    /// @dev Returns the initialization code hash of the clone of `implementation`\\n    /// using immutable arguments encoded in `data`.\\n    /// Used for mining vanity addresses with create2crunch.\\n    function initCodeHash(address implementation, bytes memory data)\\n        internal\\n        pure\\n        returns (bytes32 hash)\\n    {\\n        assembly {\\n            // Compute the boundaries of the data and cache the memory slots around it.\\n            let mBefore3 := mload(sub(data, 0x60))\\n            let mBefore2 := mload(sub(data, 0x40))\\n            let mBefore1 := mload(sub(data, 0x20))\\n            let dataLength := mload(data)\\n            let dataEnd := add(add(data, 0x20), dataLength)\\n            let mAfter1 := mload(dataEnd)\\n\\n            // +2 bytes for telling how much data there is appended to the call.\\n            let extraLength := add(dataLength, 2)\\n\\n            // Write the bytecode before the data.\\n            mstore(data, 0x5af43d3d93803e606057fd5bf3)\\n            // Write the address of the implementation.\\n            mstore(sub(data, 0x0d), implementation)\\n            // Write the rest of the bytecode.\\n            mstore(\\n                sub(data, 0x21),\\n                or(shl(0x48, extraLength), 0x593da1005b363d3d373d3d3d3d610000806062363936013d73)\\n            )\\n            // `keccak256(\\\"ReceiveETH(uint256)\\\")`\\n            mstore(\\n                sub(data, 0x3a), 0x9e4ac34f21c619cefc926c8bd93b54bf5a39c7ab2127a895af1cc0691d7e3dff\\n            )\\n            mstore(\\n                sub(data, 0x5a),\\n                or(shl(0x78, add(extraLength, 0x62)), 0x6100003d81600a3d39f336602c57343d527f)\\n            )\\n            mstore(dataEnd, shl(0xf0, extraLength))\\n\\n            // Compute and store the bytecode hash.\\n            hash := keccak256(sub(data, 0x4c), add(extraLength, 0x6c))\\n\\n            // Restore the overwritten memory surrounding `data`.\\n            mstore(dataEnd, mAfter1)\\n            mstore(data, dataLength)\\n            mstore(sub(data, 0x20), mBefore1)\\n            mstore(sub(data, 0x40), mBefore2)\\n            mstore(sub(data, 0x60), mBefore3)\\n        }\\n    }\\n\\n    /// @dev Returns the address of the deterministic clone of\\n    /// `implementation` using immutable arguments encoded in `data`, with `salt`, by `deployer`.\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes memory data,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        bytes32 hash = initCodeHash(implementation, data);\\n        predicted = predictDeterministicAddress(hash, salt, deployer);\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                      OTHER OPERATIONS                      */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Returns the address when a contract with initialization code hash,\\n    /// `hash`, is deployed with `salt`, by `deployer`.\\n    function predictDeterministicAddress(bytes32 hash, bytes32 salt, address deployer)\\n        internal\\n        pure\\n        returns (address predicted)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and store the bytecode hash.\\n            mstore8(0x00, 0xff) // Write the prefix.\\n            mstore(0x35, hash)\\n            mstore(0x01, shl(96, deployer))\\n            mstore(0x15, salt)\\n            predicted := keccak256(0x00, 0x55)\\n            // Restore the part of the free memory pointer that has been overwritten.\\n            mstore(0x35, 0)\\n        }\\n    }\\n\\n    /// @dev Reverts if `salt` does not start with either the zero address or the caller.\\n    function checkStartsWithCaller(bytes32 salt) internal view {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If the salt does not start with the zero address or the caller.\\n            if iszero(or(iszero(shr(96, salt)), eq(caller(), shr(96, salt)))) {\\n                // Store the function selector of `SaltDoesNotStartWithCaller()`.\\n                mstore(0x00, 0x2f634836)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"src/utils/Clone.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD\\npragma solidity ^0.8.20;\\n\\n/// @title Clone\\n/// @author zefram.eth, Saw-mon & Natalie\\n/// @notice Provides helper functions for reading immutable args from calldata\\ncontract Clone {\\n\\n    uint256 internal constant ONE_WORD = 0x20;\\n\\n    /// @notice Reads an immutable arg with type address\\n    /// @param argOffset The offset of the arg in the packed data\\n    /// @return arg The arg value\\n    function _getArgAddress(uint256 argOffset)\\n        internal\\n        pure\\n        returns (address arg)\\n    {\\n        uint256 offset = _getImmutableArgsOffset();\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            arg := shr(0x60, calldataload(add(offset, argOffset)))\\n        }\\n    }\\n\\n    /// @notice Reads an immutable arg with type uint256\\n    /// @param argOffset The offset of the arg in the packed data\\n    /// @return arg The arg value\\n    function _getArgUint256(uint256 argOffset)\\n        internal\\n        pure\\n        returns (uint256 arg)\\n    {\\n        uint256 offset = _getImmutableArgsOffset();\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            arg := calldataload(add(offset, argOffset))\\n        }\\n    }\\n\\n    /// @notice Reads a uint256 array stored in the immutable args.\\n    /// @param argOffset The offset of the arg in the packed data\\n    /// @param arrLen Number of elements in the array\\n    /// @return arr The array\\n    function _getArgUint256Array(uint256 argOffset, uint256 arrLen)\\n        internal\\n        pure\\n      returns (uint256[] memory arr)\\n    {\\n        uint256 offset = _getImmutableArgsOffset() + argOffset;\\n        arr = new uint256[](arrLen);\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            calldatacopy(\\n                add(arr, ONE_WORD),\\n                offset,\\n                shl(5, arrLen)\\n            )\\n        }\\n    }\\n\\n    /// @notice Reads an immutable arg with type uint64\\n    /// @param argOffset The offset of the arg in the packed data\\n    /// @return arg The arg value\\n    function _getArgUint64(uint256 argOffset)\\n        internal\\n        pure\\n        returns (uint64 arg)\\n    {\\n        uint256 offset = _getImmutableArgsOffset();\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            arg := shr(0xc0, calldataload(add(offset, argOffset)))\\n        }\\n    }\\n\\n    /// @notice Reads an immutable arg with type uint8\\n    /// @param argOffset The offset of the arg in the packed data\\n    /// @return arg The arg value\\n    function _getArgUint8(uint256 argOffset) internal pure returns (uint8 arg) {\\n        uint256 offset = _getImmutableArgsOffset();\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            arg := shr(0xf8, calldataload(add(offset, argOffset)))\\n        }\\n    }\\n\\n    /// @return offset The offset of the packed immutable args in calldata\\n    function _getImmutableArgsOffset() internal pure returns (uint256 offset) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            offset := sub(\\n                calldatasize(),\\n                shr(0xf0, calldataload(sub(calldatasize(), 2)))\\n            )\\n        }\\n    }\\n}\"\r\n    },\r\n    \"src/utils/ClonePlus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD\\npragma solidity ^0.8.20;\\n\\nimport {Clone} from \\\"./Clone.sol\\\";\\nimport {IERC20} from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title ClonePlus\\n/// @notice Extends Clone with additional helper functions\\ncontract ClonePlus is Clone {\\n    /// @notice Reads a IERC20 array stored in the immutable args.\\n    /// @param argOffset The offset of the arg in the packed data\\n    /// @param arrLen Number of elements in the array\\n    /// @return arr The array\\n    function _getArgIERC20Array(uint256 argOffset, uint256 arrLen) internal pure returns (IERC20[] memory arr) {\\n        uint256 offset = _getImmutableArgsOffset() + argOffset;\\n        arr = new IERC20[](arrLen);\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            calldatacopy(add(arr, ONE_WORD), offset, shl(5, arrLen))\\n        }\\n    }\\n\\n    /// @notice Reads a bytes data stored in the immutable args.\\n    /// @param argOffset The offset of the arg in the packed data\\n    /// @param bytesLen Number of bytes in the data\\n    /// @return data the bytes data\\n    function _getArgBytes(uint256 argOffset, uint256 bytesLen) internal pure returns (bytes memory data) {\\n        if (bytesLen == 0) return data;\\n        uint256 offset = _getImmutableArgsOffset() + argOffset;\\n        data = new bytes(bytesLen);\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            calldatacopy(add(data, ONE_WORD), offset, bytesLen)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Well.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport {ReentrancyGuardUpgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {ERC20Upgradeable, ERC20PermitUpgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20PermitUpgradeable.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IWell, Call} from \\\"src/interfaces/IWell.sol\\\";\\nimport {IWellErrors} from \\\"src/interfaces/IWellErrors.sol\\\";\\nimport {IPump} from \\\"src/interfaces/pumps/IPump.sol\\\";\\nimport {IWellFunction} from \\\"src/interfaces/IWellFunction.sol\\\";\\nimport {LibBytes} from \\\"src/libraries/LibBytes.sol\\\";\\nimport {ClonePlus} from \\\"src/utils/ClonePlus.sol\\\";\\n\\n/**\\n * @title Well\\n * @author Publius, Silo Chad, Brean\\n * @dev A Well is a constant function AMM allowing the provisioning of liquidity\\n * into a single pooled on-chain liquidity position.\\n *\\n * Rebasing Tokens:\\n * - Positive rebasing tokens are supported by Wells, but any tokens recieved from a\\n *   rebase will not be rewarded to LP holders and instead can be extracted by anyone\\n *   using `skim`, `sync` or `shift`.\\n * - Negative rebasing tokens should not be used in Well as the effect of a negative\\n *   rebase will be realized by users interacting with the Well, not LP token holders.\\n *\\n * Fee on Tranfer (FoT) Tokens:\\n * - When transferring fee on transfer tokens to a Well (swapping from or adding liquidity),\\n *   use `swapFromFeeOnTrasfer` or `addLiquidityFeeOnTransfer`. `swapTo` does not support\\n *   fee on transfer tokens (See {swapTo}).\\n * - When recieving fee on transfer tokens from a Well (swapping to and removing liquidity),\\n *   INCLUDE the fee that is taken on transfer when calculating amount out values.\\n */\\ncontract Well is ERC20PermitUpgradeable, IWell, IWellErrors, ReentrancyGuardUpgradeable, ClonePlus {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 private constant PACKED_ADDRESS = 20;\\n    uint256 private constant ONE_WORD_PLUS_PACKED_ADDRESS = 52; // For gas efficiency purposes\\n    bytes32 private constant RESERVES_STORAGE_SLOT = 0x4bba01c388049b5ebd30398b65e8ad45b632802c5faf4964e58085ea8ab03715; // bytes32(uint256(keccak256(\\\"reserves.storage.slot\\\")) - 1);\\n\\n    constructor() {\\n        // Disable Initializers to prevent the init function from being callable on the implementation contract\\n        _disableInitializers();\\n    }\\n\\n    function init(string memory _name, string memory _symbol) external initializer {\\n        __ERC20Permit_init(_name);\\n        __ERC20_init(_name, _symbol);\\n        __ReentrancyGuard_init();\\n\\n        IERC20[] memory _tokens = tokens();\\n        uint256 tokensLength = _tokens.length;\\n        for (uint256 i; i < tokensLength - 1; ++i) {\\n            for (uint256 j = i + 1; j < tokensLength; ++j) {\\n                if (_tokens[i] == _tokens[j]) {\\n                    revert DuplicateTokens(_tokens[i]);\\n                }\\n            }\\n        }\\n    }\\n\\n    function isInitialized() external view returns (bool) {\\n        return _getInitializedVersion() > 0;\\n    }\\n\\n    //////////////////// WELL DEFINITION ////////////////////\\n\\n    /// This Well uses a dynamic immutable storage layout. Immutable storage is\\n    /// used for gas-efficient reads during Well operation. The Well must be\\n    /// created by cloning with a pre-encoded byte string containing immutable\\n    /// data.\\n    ///\\n    /// Let n = number of tokens\\n    ///     m = length of well function data (bytes)\\n    ///\\n    /// TYPE        NAME                       LOCATION (CONSTANT)\\n    /// ==============================================================\\n    /// address     aquifer()                  0        (LOC_AQUIFER_ADDR)\\n    /// uint256     numberOfTokens()           20       (LOC_TOKENS_COUNT)\\n    /// address     wellFunctionAddress()      52       (LOC_WELL_FUNCTION_ADDR)\\n    /// uint256     wellFunctionDataLength()   72       (LOC_WELL_FUNCTION_DATA_LENGTH)\\n    /// uint256     numberOfPumps()            104      (LOC_PUMPS_COUNT)\\n    /// --------------------------------------------------------------\\n    /// address     token0                     136      (LOC_VARIABLE)\\n    /// ...\\n    /// address     tokenN                     136 + (n-1) * 32\\n    /// --------------------------------------------------------------\\n    /// byte        wellFunctionData0          136 + n * 32\\n    /// ...\\n    /// byte        wellFunctionDataM          136 + n * 32 + m\\n    /// --------------------------------------------------------------\\n    /// address     pump1Address               136 + n * 32 + m\\n    /// uint256     pump1DataLength            136 + n * 32 + m + 20\\n    /// byte        pump1Data                  136 + n * 32 + m + 52\\n    /// ...\\n    /// ==============================================================\\n\\n    uint256 private constant LOC_AQUIFER_ADDR = 0;\\n    uint256 private constant LOC_TOKENS_COUNT = 20; // LOC_AQUIFER_ADDR + PACKED_ADDRESS\\n    uint256 private constant LOC_WELL_FUNCTION_ADDR = 52; // LOC_TOKENS_COUNT + ONE_WORD\\n    uint256 private constant LOC_WELL_FUNCTION_DATA_LENGTH = 72; // LOC_WELL_FUNCTION_ADDR + PACKED_ADDRESS;\\n    uint256 private constant LOC_PUMPS_COUNT = 104; // LOC_WELL_FUNCTION_DATA_LENGTH + ONE_WORD;\\n    uint256 private constant LOC_VARIABLE = 136; // LOC_PUMPS_COUNT + ONE_WORD;\\n\\n    function tokens() public pure returns (IERC20[] memory _tokens) {\\n        _tokens = _getArgIERC20Array(LOC_VARIABLE, numberOfTokens());\\n    }\\n\\n    function wellFunction() public pure returns (Call memory _wellFunction) {\\n        _wellFunction.target = wellFunctionAddress();\\n        _wellFunction.data = _getArgBytes(LOC_VARIABLE + numberOfTokens() * ONE_WORD, wellFunctionDataLength());\\n    }\\n\\n    function pumps() public pure returns (Call[] memory _pumps) {\\n        uint256 _numberOfPumps = numberOfPumps();\\n        if (_numberOfPumps == 0) return _pumps;\\n\\n        _pumps = new Call[](_numberOfPumps);\\n        uint256 dataLoc = LOC_VARIABLE + numberOfTokens() * ONE_WORD + wellFunctionDataLength();\\n\\n        uint256 pumpDataLength;\\n        for (uint256 i; i < _pumps.length; ++i) {\\n            _pumps[i].target = _getArgAddress(dataLoc);\\n            dataLoc += PACKED_ADDRESS;\\n            pumpDataLength = _getArgUint256(dataLoc);\\n            dataLoc += ONE_WORD;\\n            _pumps[i].data = _getArgBytes(dataLoc, pumpDataLength);\\n            dataLoc += pumpDataLength;\\n        }\\n    }\\n\\n    /**\\n     * @dev {wellData} is unused in this implementation.\\n     */\\n    function wellData() public pure returns (bytes memory) {}\\n\\n    function aquifer() public pure override returns (address) {\\n        return _getArgAddress(LOC_AQUIFER_ADDR);\\n    }\\n\\n    function well()\\n        external\\n        pure\\n        returns (\\n            IERC20[] memory _tokens,\\n            Call memory _wellFunction,\\n            Call[] memory _pumps,\\n            bytes memory _wellData,\\n            address _aquifer\\n        )\\n    {\\n        _tokens = tokens();\\n        _wellFunction = wellFunction();\\n        _pumps = pumps();\\n        _wellData = wellData();\\n        _aquifer = aquifer();\\n    }\\n\\n    //////////////////// WELL DEFINITION: HELPERS ////////////////////\\n\\n    /**\\n     * @notice Returns the number of tokens that are tradable in this Well.\\n     * @dev Length of the `tokens()` array.\\n     */\\n    function numberOfTokens() public pure returns (uint256) {\\n        return _getArgUint256(LOC_TOKENS_COUNT);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the Well Function.\\n     */\\n    function wellFunctionAddress() public pure returns (address) {\\n        return _getArgAddress(LOC_WELL_FUNCTION_ADDR);\\n    }\\n\\n    /**\\n     * @notice Returns the length of the configurable `data` parameter passed during calls to the Well Function.\\n     */\\n    function wellFunctionDataLength() public pure returns (uint256) {\\n        return _getArgUint256(LOC_WELL_FUNCTION_DATA_LENGTH);\\n    }\\n\\n    /**\\n     * @notice Returns the number of Pumps which this Well was initialized with.\\n     */\\n    function numberOfPumps() public pure returns (uint256) {\\n        return _getArgUint256(LOC_PUMPS_COUNT);\\n    }\\n\\n    /**\\n     * @notice Returns address & data used to call the first Pump.\\n     * @dev Provided as an optimization in the case where {numberOfPumps} returns 1.\\n     */\\n    function firstPump() public pure returns (Call memory _pump) {\\n        uint256 dataLoc = LOC_VARIABLE + numberOfTokens() * ONE_WORD + wellFunctionDataLength();\\n        _pump.target = _getArgAddress(dataLoc);\\n        _pump.data = _getArgBytes(dataLoc + ONE_WORD_PLUS_PACKED_ADDRESS, _getArgUint256(dataLoc + PACKED_ADDRESS));\\n    }\\n\\n    //////////////////// SWAP: FROM ////////////////////\\n\\n    /**\\n     * @dev MUST revert if a fee on transfer token is used. The requisite check\\n     * is performed in {_setReserves}.\\n     */\\n    function swapFrom(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address recipient,\\n        uint256 deadline\\n    ) external nonReentrant expire(deadline) returns (uint256 amountOut) {\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountIn);\\n        amountOut = _swapFrom(fromToken, toToken, amountIn, minAmountOut, recipient);\\n    }\\n\\n    /**\\n     * @dev Note that `amountOut` is the amount *transferred* by the Well; if a fee\\n     * is charged on transfers of `toToken`, the amount received by `recipient`\\n     * will be less than `amountOut`.\\n     */\\n    function swapFromFeeOnTransfer(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address recipient,\\n        uint256 deadline\\n    ) external nonReentrant expire(deadline) returns (uint256 amountOut) {\\n        amountIn = _safeTransferFromFeeOnTransfer(fromToken, msg.sender, amountIn);\\n        amountOut = _swapFrom(fromToken, toToken, amountIn, minAmountOut, recipient);\\n    }\\n\\n    function _swapFrom(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address recipient\\n    ) internal returns (uint256 amountOut) {\\n        IERC20[] memory _tokens = tokens();\\n        (uint256 i, uint256 j) = _getIJ(_tokens, fromToken, toToken);\\n        uint256[] memory reserves = _updatePumps(_tokens.length);\\n\\n        reserves[i] += amountIn;\\n        uint256 reserveJBefore = reserves[j];\\n        reserves[j] = _calcReserve(wellFunction(), reserves, j, totalSupply());\\n\\n        // Note: The rounding approach of the Well function determines whether\\n        // slippage from imprecision goes to the Well or to the User.\\n        amountOut = reserveJBefore - reserves[j];\\n        if (amountOut < minAmountOut) {\\n            revert SlippageOut(amountOut, minAmountOut);\\n        }\\n\\n        toToken.safeTransfer(recipient, amountOut);\\n        emit Swap(fromToken, toToken, amountIn, amountOut, recipient);\\n        _setReserves(_tokens, reserves);\\n    }\\n\\n    /**\\n     * @dev Assumes both tokens incur no fee on transfer.\\n     */\\n    function getSwapOut(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 amountIn\\n    ) external view readOnlyNonReentrant returns (uint256 amountOut) {\\n        IERC20[] memory _tokens = tokens();\\n        (uint256 i, uint256 j) = _getIJ(_tokens, fromToken, toToken);\\n        uint256[] memory reserves = _getReserves(_tokens.length);\\n\\n        reserves[i] += amountIn;\\n\\n        // underflow is desired; Well Function SHOULD NOT increase reserves of both `i` and `j`\\n        amountOut = reserves[j] - _calcReserve(wellFunction(), reserves, j, totalSupply());\\n    }\\n\\n    //////////////////// SWAP: TO ////////////////////\\n\\n    /**\\n     * @dev {swapTo} does not support fee on transfer tokens, and no corresponding\\n     * \\\"swapToFeeOnTransfer\\\" function is provided as this would require either:\\n     * (a) inclusion of the fee as a parameter with verification; or\\n     * (b) iterative transfers which attempts to back-calculate the fee.\\n     */\\n    function swapTo(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 maxAmountIn,\\n        uint256 amountOut,\\n        address recipient,\\n        uint256 deadline\\n    ) external nonReentrant expire(deadline) returns (uint256 amountIn) {\\n        IERC20[] memory _tokens = tokens();\\n        (uint256 i, uint256 j) = _getIJ(_tokens, fromToken, toToken);\\n        uint256[] memory reserves = _updatePumps(_tokens.length);\\n\\n        reserves[j] -= amountOut;\\n        uint256 reserveIBefore = reserves[i];\\n        reserves[i] = _calcReserve(wellFunction(), reserves, i, totalSupply());\\n\\n        // Note: The rounding approach of the Well function determines whether\\n        // slippage from imprecision goes to the Well or to the User.\\n        amountIn = reserves[i] - reserveIBefore;\\n\\n        if (amountIn > maxAmountIn) {\\n            revert SlippageIn(amountIn, maxAmountIn);\\n        }\\n\\n        _swapTo(fromToken, toToken, amountIn, amountOut, recipient);\\n        _setReserves(_tokens, reserves);\\n    }\\n\\n    /**\\n     * @dev Executes token transfers and emits Swap event. Used by {swapTo} to\\n     * avoid stack too deep errors.\\n     */\\n    function _swapTo(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address recipient\\n    ) internal {\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountIn);\\n        toToken.safeTransfer(recipient, amountOut);\\n        emit Swap(fromToken, toToken, amountIn, amountOut, recipient);\\n    }\\n\\n    /**\\n     * @dev Assumes both tokens incur no fee on transfer.\\n     */\\n    function getSwapIn(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 amountOut\\n    ) external view readOnlyNonReentrant returns (uint256 amountIn) {\\n        IERC20[] memory _tokens = tokens();\\n        (uint256 i, uint256 j) = _getIJ(_tokens, fromToken, toToken);\\n        uint256[] memory reserves = _getReserves(_tokens.length);\\n\\n        reserves[j] -= amountOut;\\n\\n        amountIn = _calcReserve(wellFunction(), reserves, i, totalSupply()) - reserves[i];\\n    }\\n\\n    //////////////////// SHIFT ////////////////////\\n\\n    /**\\n     * @dev When using Wells for a multi-hop swap in 1 single transaction using a\\n     * multicall contract like Pipeline, costs can be reduced by \\\"shifting\\\" tokens\\n     * from one Well to another rather than returning them to the multicall router.\\n     *\\n     * Example multi-hop swap: WETH -> DAI -> USDC\\n     *\\n     * 1. Using a router without {shift}:\\n     *  WETH.transfer(sender=0xUSER, recipient=0xROUTER)                     [1]\\n     *  Call the router, which performs:\\n     *      Well1.swapFrom(fromToken=WETH, toToken=DAI, recipient=0xROUTER)\\n     *          WETH.transfer(sender=0xROUTER, recipient=Well1)              [2]\\n     *          DAI.transfer(sender=Well1, recipient=0xROUTER)               [3]\\n     *      Well2.swapFrom(fromToken=DAI, toToken=USDC, recipient=0xROUTER)\\n     *          DAI.transfer(sender=0xROUTER, recipient=Well2)               [4]\\n     *          USDC.transfer(sender=Well2, recipient=0xROUTER)              [5]\\n     *  USDC.transfer(sender=0xROUTER, recipient=0xUSER)                     [6]\\n     *\\n     *  Note: this could be optimized by configuring the router to deliver\\n     *  tokens from the last swap directly to the user.\\n     *\\n     * 2. Using a router with {shift}:\\n     *  WETH.transfer(sender=0xUSER, recipient=Well1)                        [1]\\n     *  Call the router, which performs:\\n     *      Well1.shift(tokenOut=DAI, recipient=Well2)\\n     *          DAI.transfer(sender=Well1, recipient=Well2)                  [2]\\n     *      Well2.shift(tokenOut=USDC, recipient=0xUSER)\\n     *          USDC.transfer(sender=Well2, recipient=0xUSER)                [3]\\n     */\\n    function shift(\\n        IERC20 tokenOut,\\n        uint256 minAmountOut,\\n        address recipient\\n    ) external nonReentrant returns (uint256 amountOut) {\\n        IERC20[] memory _tokens = tokens();\\n        uint256 tokensLength = _tokens.length;\\n        _updatePumps(tokensLength);\\n\\n        uint256[] memory reserves = new uint256[](tokensLength);\\n\\n        // Use the balances of the pool instead of the stored reserves.\\n        // If there is a change in token balances relative to the currently\\n        // stored reserves, the extra tokens can be shifted into `tokenOut`.\\n        for (uint256 i; i < tokensLength; ++i) {\\n            reserves[i] = _tokens[i].balanceOf(address(this));\\n        }\\n        uint256 j = _getJ(_tokens, tokenOut);\\n        amountOut = reserves[j] - _calcReserve(wellFunction(), reserves, j, totalSupply());\\n\\n        if (amountOut >= minAmountOut) {\\n            tokenOut.safeTransfer(recipient, amountOut);\\n            reserves[j] -= amountOut;\\n            _setReserves(_tokens, reserves);\\n            emit Shift(reserves, tokenOut, amountOut, recipient);\\n        } else {\\n            revert SlippageOut(amountOut, minAmountOut);\\n        }\\n    }\\n\\n    function getShiftOut(IERC20 tokenOut) external view readOnlyNonReentrant returns (uint256 amountOut) {\\n        IERC20[] memory _tokens = tokens();\\n        uint256 tokensLength = _tokens.length;\\n        uint256[] memory reserves = new uint256[](tokensLength);\\n        for (uint256 i; i < tokensLength; ++i) {\\n            reserves[i] = _tokens[i].balanceOf(address(this));\\n        }\\n\\n        uint256 j = _getJ(_tokens, tokenOut);\\n        amountOut = reserves[j] - _calcReserve(wellFunction(), reserves, j, totalSupply());\\n    }\\n\\n    //////////////////// ADD LIQUIDITY ////////////////////\\n\\n    function addLiquidity(\\n        uint256[] memory tokenAmountsIn,\\n        uint256 minLpAmountOut,\\n        address recipient,\\n        uint256 deadline\\n    ) external nonReentrant expire(deadline) returns (uint256 lpAmountOut) {\\n        lpAmountOut = _addLiquidity(tokenAmountsIn, minLpAmountOut, recipient, false);\\n    }\\n\\n    function addLiquidityFeeOnTransfer(\\n        uint256[] memory tokenAmountsIn,\\n        uint256 minLpAmountOut,\\n        address recipient,\\n        uint256 deadline\\n    ) external nonReentrant expire(deadline) returns (uint256 lpAmountOut) {\\n        lpAmountOut = _addLiquidity(tokenAmountsIn, minLpAmountOut, recipient, true);\\n    }\\n\\n    /**\\n     * @dev Gas optimization: {IWell.AddLiquidity} is emitted even if `lpAmountOut` is 0.\\n     */\\n    function _addLiquidity(\\n        uint256[] memory tokenAmountsIn,\\n        uint256 minLpAmountOut,\\n        address recipient,\\n        bool feeOnTransfer\\n    ) internal returns (uint256 lpAmountOut) {\\n        IERC20[] memory _tokens = tokens();\\n        uint256 tokensLength = _tokens.length;\\n        uint256[] memory reserves = _updatePumps(tokensLength);\\n\\n        uint256 _tokenAmountIn;\\n        if (feeOnTransfer) {\\n            for (uint256 i; i < tokensLength; ++i) {\\n                _tokenAmountIn = tokenAmountsIn[i];\\n                if (_tokenAmountIn == 0) continue;\\n                _tokenAmountIn = _safeTransferFromFeeOnTransfer(_tokens[i], msg.sender, _tokenAmountIn);\\n                reserves[i] += _tokenAmountIn;\\n                tokenAmountsIn[i] = _tokenAmountIn;\\n            }\\n        } else {\\n            for (uint256 i; i < tokensLength; ++i) {\\n                _tokenAmountIn = tokenAmountsIn[i];\\n                if (_tokenAmountIn == 0) continue;\\n                _tokens[i].safeTransferFrom(msg.sender, address(this), _tokenAmountIn);\\n                reserves[i] += _tokenAmountIn;\\n            }\\n        }\\n\\n        lpAmountOut = _calcLpTokenSupply(wellFunction(), reserves) - totalSupply();\\n        if (lpAmountOut < minLpAmountOut) {\\n            revert SlippageOut(lpAmountOut, minLpAmountOut);\\n        }\\n\\n        _mint(recipient, lpAmountOut);\\n        _setReserves(_tokens, reserves);\\n        emit AddLiquidity(tokenAmountsIn, lpAmountOut, recipient);\\n    }\\n\\n    /**\\n     * @dev Assumes that no tokens involved incur a fee on transfer.\\n     */\\n    function getAddLiquidityOut(uint256[] memory tokenAmountsIn)\\n        external\\n        view\\n        readOnlyNonReentrant\\n        returns (uint256 lpAmountOut)\\n    {\\n        IERC20[] memory _tokens = tokens();\\n        uint256 tokensLength = _tokens.length;\\n        uint256[] memory reserves = _getReserves(tokensLength);\\n        for (uint256 i; i < tokensLength; ++i) {\\n            reserves[i] += tokenAmountsIn[i];\\n        }\\n        lpAmountOut = _calcLpTokenSupply(wellFunction(), reserves) - totalSupply();\\n    }\\n\\n    //////////////////// REMOVE LIQUIDITY: BALANCED ////////////////////\\n\\n    function removeLiquidity(\\n        uint256 lpAmountIn,\\n        uint256[] calldata minTokenAmountsOut,\\n        address recipient,\\n        uint256 deadline\\n    ) external nonReentrant expire(deadline) returns (uint256[] memory tokenAmountsOut) {\\n        IERC20[] memory _tokens = tokens();\\n        uint256 tokensLength = _tokens.length;\\n        uint256[] memory reserves = _updatePumps(tokensLength);\\n\\n        tokenAmountsOut = _calcLPTokenUnderlying(wellFunction(), lpAmountIn, reserves, totalSupply());\\n        _burn(msg.sender, lpAmountIn);\\n        uint256 _tokenAmountOut;\\n        for (uint256 i; i < tokensLength; ++i) {\\n            _tokenAmountOut = tokenAmountsOut[i];\\n            if (_tokenAmountOut < minTokenAmountsOut[i]) {\\n                revert SlippageOut(_tokenAmountOut, minTokenAmountsOut[i]);\\n            }\\n            _tokens[i].safeTransfer(recipient, _tokenAmountOut);\\n            reserves[i] -= _tokenAmountOut;\\n        }\\n\\n        _setReserves(_tokens, reserves);\\n        emit RemoveLiquidity(lpAmountIn, tokenAmountsOut, recipient);\\n    }\\n\\n    function getRemoveLiquidityOut(uint256 lpAmountIn)\\n        external\\n        view\\n        readOnlyNonReentrant\\n        returns (uint256[] memory tokenAmountsOut)\\n    {\\n        IERC20[] memory _tokens = tokens();\\n        uint256[] memory reserves = _getReserves(_tokens.length);\\n        uint256 lpTokenSupply = totalSupply();\\n\\n        tokenAmountsOut = _calcLPTokenUnderlying(wellFunction(), lpAmountIn, reserves, lpTokenSupply);\\n    }\\n\\n    //////////////////// REMOVE LIQUIDITY: ONE TOKEN ////////////////////\\n\\n    function removeLiquidityOneToken(\\n        uint256 lpAmountIn,\\n        IERC20 tokenOut,\\n        uint256 minTokenAmountOut,\\n        address recipient,\\n        uint256 deadline\\n    ) external nonReentrant expire(deadline) returns (uint256 tokenAmountOut) {\\n        IERC20[] memory _tokens = tokens();\\n        uint256[] memory reserves = _updatePumps(_tokens.length);\\n        uint256 j = _getJ(_tokens, tokenOut);\\n\\n        tokenAmountOut = _getRemoveLiquidityOneTokenOut(lpAmountIn, j, reserves);\\n        if (tokenAmountOut < minTokenAmountOut) {\\n            revert SlippageOut(tokenAmountOut, minTokenAmountOut);\\n        }\\n\\n        _burn(msg.sender, lpAmountIn);\\n        tokenOut.safeTransfer(recipient, tokenAmountOut);\\n\\n        reserves[j] -= tokenAmountOut;\\n        _setReserves(_tokens, reserves);\\n        emit RemoveLiquidityOneToken(lpAmountIn, tokenOut, tokenAmountOut, recipient);\\n    }\\n\\n    function getRemoveLiquidityOneTokenOut(\\n        uint256 lpAmountIn,\\n        IERC20 tokenOut\\n    ) external view readOnlyNonReentrant returns (uint256 tokenAmountOut) {\\n        IERC20[] memory _tokens = tokens();\\n        uint256[] memory reserves = _getReserves(_tokens.length);\\n        tokenAmountOut = _getRemoveLiquidityOneTokenOut(lpAmountIn, _getJ(_tokens, tokenOut), reserves);\\n    }\\n\\n    /**\\n     * @dev Shared logic for removing a single token from liquidity.\\n     * Calculates change in reserve `j` given a change in LP token supply.\\n     *\\n     * Note: `lpAmountIn` is the amount of LP the user is burning in exchange\\n     * for some amount of token `j`.\\n     */\\n    function _getRemoveLiquidityOneTokenOut(\\n        uint256 lpAmountIn,\\n        uint256 j,\\n        uint256[] memory reserves\\n    ) private view returns (uint256 tokenAmountOut) {\\n        uint256 newReserveJ = _calcReserve(wellFunction(), reserves, j, totalSupply() - lpAmountIn);\\n        tokenAmountOut = reserves[j] - newReserveJ;\\n    }\\n\\n    //////////// REMOVE LIQUIDITY: IMBALANCED ////////////\\n\\n    function removeLiquidityImbalanced(\\n        uint256 maxLpAmountIn,\\n        uint256[] calldata tokenAmountsOut,\\n        address recipient,\\n        uint256 deadline\\n    ) external nonReentrant expire(deadline) returns (uint256 lpAmountIn) {\\n        IERC20[] memory _tokens = tokens();\\n        uint256 tokensLength = _tokens.length;\\n        uint256[] memory reserves = _updatePumps(tokensLength);\\n\\n        uint256 _tokenAmountOut;\\n        for (uint256 i; i < tokensLength; ++i) {\\n            _tokenAmountOut = tokenAmountsOut[i];\\n            _tokens[i].safeTransfer(recipient, _tokenAmountOut);\\n            reserves[i] -= _tokenAmountOut;\\n        }\\n\\n        lpAmountIn = totalSupply() - _calcLpTokenSupply(wellFunction(), reserves);\\n        if (lpAmountIn > maxLpAmountIn) {\\n            revert SlippageIn(lpAmountIn, maxLpAmountIn);\\n        }\\n        _burn(msg.sender, lpAmountIn);\\n\\n        _setReserves(_tokens, reserves);\\n        emit RemoveLiquidity(lpAmountIn, tokenAmountsOut, recipient);\\n    }\\n\\n    function getRemoveLiquidityImbalancedIn(uint256[] calldata tokenAmountsOut)\\n        external\\n        view\\n        readOnlyNonReentrant\\n        returns (uint256 lpAmountIn)\\n    {\\n        IERC20[] memory _tokens = tokens();\\n        uint256 tokensLength = _tokens.length;\\n        uint256[] memory reserves = _getReserves(tokensLength);\\n        for (uint256 i; i < tokensLength; ++i) {\\n            reserves[i] -= tokenAmountsOut[i];\\n        }\\n        lpAmountIn = totalSupply() - _calcLpTokenSupply(wellFunction(), reserves);\\n    }\\n\\n    //////////////////// RESERVES ////////////////////\\n\\n    /**\\n     * @dev Can be used in a multicall to add liquidity similar to how `shift` can be used to swap.\\n     * See {shift} for examples of how to use in a multicall.\\n     */\\n    function sync(address recipient, uint256 minLpAmountOut) external nonReentrant returns (uint256 lpAmountOut) {\\n        IERC20[] memory _tokens = tokens();\\n        uint256 tokensLength = _tokens.length;\\n        _updatePumps(tokensLength);\\n        uint256[] memory reserves = new uint256[](tokensLength);\\n        for (uint256 i; i < tokensLength; ++i) {\\n            reserves[i] = _tokens[i].balanceOf(address(this));\\n        }\\n        uint256 newTokenSupply = _calcLpTokenSupply(wellFunction(), reserves);\\n        uint256 oldTokenSupply = totalSupply();\\n        if (newTokenSupply > oldTokenSupply) {\\n            lpAmountOut = newTokenSupply - oldTokenSupply;\\n            _mint(recipient, lpAmountOut);\\n        }\\n\\n        if (lpAmountOut < minLpAmountOut) {\\n            revert SlippageOut(lpAmountOut, minLpAmountOut);\\n        }\\n\\n        _setReserves(_tokens, reserves);\\n        emit Sync(reserves, lpAmountOut, recipient);\\n    }\\n\\n    function getSyncOut() external view readOnlyNonReentrant returns (uint256 lpAmountOut) {\\n        IERC20[] memory _tokens = tokens();\\n        uint256 tokensLength = _tokens.length;\\n\\n        uint256[] memory reserves = new uint256[](tokensLength);\\n        for (uint256 i; i < tokensLength; ++i) {\\n            reserves[i] = _tokens[i].balanceOf(address(this));\\n        }\\n\\n        uint256 newTokenSupply = _calcLpTokenSupply(wellFunction(), reserves);\\n        uint256 oldTokenSupply = totalSupply();\\n        if (newTokenSupply > oldTokenSupply) {\\n            lpAmountOut = newTokenSupply - oldTokenSupply;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfer excess tokens held by the Well to `recipient`.\\n     */\\n    function skim(address recipient) external nonReentrant returns (uint256[] memory skimAmounts) {\\n        IERC20[] memory _tokens = tokens();\\n        uint256 tokensLength = _tokens.length;\\n        uint256[] memory reserves = _getReserves(tokensLength);\\n        skimAmounts = new uint256[](tokensLength);\\n        for (uint256 i; i < tokensLength; ++i) {\\n            skimAmounts[i] = _tokens[i].balanceOf(address(this)) - reserves[i];\\n            if (skimAmounts[i] > 0) {\\n                _tokens[i].safeTransfer(recipient, skimAmounts[i]);\\n            }\\n        }\\n    }\\n\\n    function getReserves() external view readOnlyNonReentrant returns (uint256[] memory reserves) {\\n        reserves = _getReserves(numberOfTokens());\\n    }\\n\\n    /**\\n     * @dev Gets the Well's token reserves by reading from byte storage.\\n     */\\n    function _getReserves(uint256 _numberOfTokens) internal view returns (uint256[] memory reserves) {\\n        reserves = LibBytes.readUint128(RESERVES_STORAGE_SLOT, _numberOfTokens);\\n    }\\n\\n    /**\\n     * @dev Checks that the balance of each ERC-20 token is >= the reserves and\\n     * sets the Well's reserves of each token by writing to byte storage.\\n     */\\n    function _setReserves(IERC20[] memory _tokens, uint256[] memory reserves) internal {\\n        for (uint256 i; i < reserves.length; ++i) {\\n            if (reserves[i] > _tokens[i].balanceOf(address(this))) revert InvalidReserves();\\n        }\\n        LibBytes.storeUint128(RESERVES_STORAGE_SLOT, reserves);\\n    }\\n\\n    //////////////////// INTERNAL: UPDATE PUMPS ////////////////////\\n\\n    /**\\n     * @dev Fetches the current token reserves of the Well and updates the Pumps.\\n     * Typically called before an operation that modifies the Well's reserves.\\n     */\\n    function _updatePumps(uint256 _numberOfTokens) internal returns (uint256[] memory reserves) {\\n        reserves = _getReserves(_numberOfTokens);\\n\\n        uint256 _numberOfPumps = numberOfPumps();\\n        if (_numberOfPumps == 0) {\\n            return reserves;\\n        }\\n\\n        // gas optimization: avoid looping if there is only one pump\\n        if (_numberOfPumps == 1) {\\n            Call memory _pump = firstPump();\\n            // Don't revert if the update call fails.\\n            try IPump(_pump.target).update(reserves, _pump.data) {}\\n            catch {\\n                // ignore reversion. If an external shutoff mechanism is added to a Pump, it could be called here.\\n            }\\n        } else {\\n            Call[] memory _pumps = pumps();\\n            for (uint256 i; i < _pumps.length; ++i) {\\n                // Don't revert if the update call fails.\\n                try IPump(_pumps[i].target).update(reserves, _pumps[i].data) {}\\n                catch {\\n                    // ignore reversion. If an external shutoff mechanism is added to a Pump, it could be called here.\\n                }\\n            }\\n        }\\n    }\\n\\n    //////////////////// INTERNAL: WELL FUNCTION INTERACTION ////////////////////\\n\\n    /**\\n     * @dev Calculates the LP token supply given a list of `reserves` using the\\n     * provided `_wellFunction`. Wraps {IWellFunction.calcLpTokenSupply}.\\n     *\\n     * The Well function is passed as a parameter to minimize gas in instances\\n     * where it is called multiple times in one transaction.\\n     */\\n    function _calcLpTokenSupply(\\n        Call memory _wellFunction,\\n        uint256[] memory reserves\\n    ) internal view returns (uint256 lpTokenSupply) {\\n        lpTokenSupply = IWellFunction(_wellFunction.target).calcLpTokenSupply(reserves, _wellFunction.data);\\n    }\\n\\n    /**\\n     * @dev Calculates the `j`th reserve given a list of `reserves` and `lpTokenSupply`\\n     * using the provided `_wellFunction`. Wraps {IWellFunction.calcReserve}.\\n     *\\n     * The Well function is passed as a parameter to minimize gas in instances\\n     * where it is called multiple times in one transaction.\\n     */\\n    function _calcReserve(\\n        Call memory _wellFunction,\\n        uint256[] memory reserves,\\n        uint256 j,\\n        uint256 lpTokenSupply\\n    ) internal view returns (uint256 reserve) {\\n        reserve = IWellFunction(_wellFunction.target).calcReserve(reserves, j, lpTokenSupply, _wellFunction.data);\\n    }\\n\\n    /**\\n     * @dev Calculates the amount of tokens that underly a given amount of LP tokens\\n     * Wraps {IWellFunction.calcLPTokenAmount}.\\n     *\\n     * Used to determine the how many tokens to send to a user when they remove LP.\\n     *\\n     * The Well function is passed as a parameter to minimize gas in instances\\n     * where it is called multiple times in one transaction.\\n     */\\n    function _calcLPTokenUnderlying(\\n        Call memory _wellFunction,\\n        uint256 lpTokenAmount,\\n        uint256[] memory reserves,\\n        uint256 lpTokenSupply\\n    ) internal view returns (uint256[] memory tokenAmounts) {\\n        tokenAmounts = IWellFunction(_wellFunction.target).calcLPTokenUnderlying(\\n            lpTokenAmount, reserves, lpTokenSupply, _wellFunction.data\\n        );\\n    }\\n\\n    //////////////////// INTERNAL: WELL TOKEN INDEXING ////////////////////\\n\\n    /**\\n     * @dev Returns the indices of `iToken` and `jToken` in `_tokens`.\\n     * Reverts if either token is not in `_tokens`.\\n     * Reverts if `iToken` and `jToken` are the same.\\n     */\\n    function _getIJ(\\n        IERC20[] memory _tokens,\\n        IERC20 iToken,\\n        IERC20 jToken\\n    ) internal pure returns (uint256 i, uint256 j) {\\n        bool foundOne;\\n        for (uint256 k; k < _tokens.length; ++k) {\\n            if (iToken == _tokens[k]) {\\n                i = k;\\n                if (foundOne) return (i, j);\\n                foundOne = true;\\n            } else if (jToken == _tokens[k]) {\\n                j = k;\\n                if (foundOne) return (i, j);\\n                foundOne = true;\\n            }\\n        }\\n        revert InvalidTokens();\\n    }\\n\\n    /**\\n     * @dev Returns the index of `jToken` in `_tokens`. Reverts if `jToken` is\\n     * not in `_tokens`.\\n     *\\n     * If `_tokens` contains multiple instances of `jToken`, this will return\\n     * the first one. A {Well} with duplicate tokens has been misconfigured.\\n     */\\n    function _getJ(IERC20[] memory _tokens, IERC20 jToken) internal pure returns (uint256 j) {\\n        for (j; j < _tokens.length; ++j) {\\n            if (jToken == _tokens[j]) {\\n                return j;\\n            }\\n        }\\n        revert InvalidTokens();\\n    }\\n\\n    //////////////////// INTERNAL: TRANSFER HELPERS ////////////////////\\n\\n    /**\\n     * @dev Calculates the change in token balance of the Well across a transfer.\\n     * Used when a fee might be incurred during safeTransferFrom.\\n     */\\n    function _safeTransferFromFeeOnTransfer(\\n        IERC20 token,\\n        address from,\\n        uint256 amount\\n    ) internal returns (uint256 amountTransferred) {\\n        uint256 balanceBefore = token.balanceOf(address(this));\\n        token.safeTransferFrom(from, address(this), amount);\\n        amountTransferred = token.balanceOf(address(this)) - balanceBefore;\\n    }\\n\\n    //////////////////// INTERNAL: EXPIRY ////////////////////\\n\\n    /**\\n     * @dev Reverts if the deadline has passed.\\n     */\\n    modifier expire(uint256 deadline) {\\n        if (block.timestamp > deadline) {\\n            revert Expired();\\n        }\\n        _;\\n    }\\n\\n    //////////////////// INTERNAL: Read Only Reentrancy ////////////////////\\n\\n    /**\\n     * @dev Reverts if the reentrncy guard has been entered.\\n     */\\n    modifier readOnlyNonReentrant() {\\n        // Use the same error as `ReentrancyGuardUpgradeable` instead of using a custom error for consistency.\\n        require(!_reentrancyGuardEntered(), \\\"ReentrancyGuard: reentrant call\\\");\\n        _;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"InitFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSalt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WellNotInitialized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"well\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Call\",\"name\":\"wellFunction\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Call[]\",\"name\":\"pumps\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"wellData\",\"type\":\"bytes\"}],\"name\":\"BoreWell\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"immutableData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"initFunctionCall\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"boreWell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"well\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"immutableData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"predictWellAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"well\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wellImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Aquifer", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}