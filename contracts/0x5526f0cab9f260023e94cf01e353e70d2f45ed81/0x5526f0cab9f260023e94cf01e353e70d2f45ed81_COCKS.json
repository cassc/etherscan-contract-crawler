{"SourceCode": "//\r\n//\r\n//          https://twitter.com/CockboxingERC\r\n//          https://gaichon.org\r\n//          https://t.me/Cockboxing_Portal\r\n//          https://t.me/cockboxing_chinese_portal\r\n//\r\n//\r\npragma solidity ^0.8.17;\r\n// SPDX-License-Identifier: MIT\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    \r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address public _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        authorizations[_owner] = true;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface InterfaceLP {\r\n    function sync() external;\r\n}\r\n\r\ncontract COCKS is Ownable, ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    address WETH;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n    \r\n    string constant _name = \"COCKBOXING\";\r\n    string constant _symbol = \"COCKS\";\r\n    uint8 constant _decimals = 9; \r\n\r\n    uint256 _totalSupply =  10_000_000 * (10 ** _decimals);\r\n    \r\n    uint256 public _maxTxAmount = 200_000 * (10 ** _decimals);\r\n    uint256 public _maxWalletToken = 200_000 * (10 ** _decimals);\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    mapping (address => bool) isFeeExempt;\r\n    mapping (address => bool) isTxLimitExempt;\r\n\r\n    uint256 private liquidityFee    = 0;\r\n    uint256 private marketingFee    = 3;\r\n    uint256 private teamshareFee    = 0;\r\n    uint256 private devFee          = 2;\r\n    uint256 private utilityFee      = 0;\r\n    uint256 public  totalFee        = devFee + marketingFee + liquidityFee + teamshareFee + utilityFee;\r\n    uint256 private feeDenominator  = 100;\r\n\r\n    uint256 sellMultiplier = 100;\r\n    uint256 buyMultiplier = 100;\r\n    uint256 transferMultiplier = 100; \r\n\r\n    address private autoLiquidityReceiver;\r\n    address public marketingFeeReceiver;\r\n    address public teamshareFeeReceiver;\r\n    address private devFeeReceiver;\r\n    address private utilityFeeReceiver;\r\n\r\n    uint256 targetLiquidity = 20;\r\n    uint256 targetLiquidityDenominator = 100;\r\n\r\n    IDEXRouter public router;\r\n    InterfaceLP private pairContract;\r\n    address public pair;\r\n    \r\n    bool public TradingOpen = false;    \r\n\r\n    bool public swapEnabled = true;\r\n    uint256 public swapThreshold = _totalSupply * 200 / 100000; \r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n    \r\n    constructor () {\r\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        WETH = router.WETH();\r\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\r\n        pairContract = InterfaceLP(pair);\r\n       \r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n\r\n        isFeeExempt[msg.sender] = true;\r\n        isFeeExempt[teamshareFeeReceiver] = true;\r\n        isFeeExempt[marketingFeeReceiver] = true;\r\n            \r\n        isTxLimitExempt[msg.sender] = true;\r\n        isTxLimitExempt[pair] = true;\r\n        isTxLimitExempt[teamshareFeeReceiver] = true;\r\n        isTxLimitExempt[marketingFeeReceiver] = true;\r\n        isTxLimitExempt[address(this)] = true;\r\n        \r\n        autoLiquidityReceiver = msg.sender;\r\n        marketingFeeReceiver = 0xcB8D606f1a2d37EEc01119114B70CdEbC27F9635;\r\n        teamshareFeeReceiver = 0xcB8D606f1a2d37EEc01119114B70CdEbC27F9635;\r\n        devFeeReceiver = 0xcB8D606f1a2d37EEc01119114B70CdEbC27F9635;\r\n\r\n        utilityFeeReceiver = msg.sender;\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) {return owner();}\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveAll(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n        if(!authorizations[sender] && !authorizations[recipient]){\r\n            require(TradingOpen,\"Trading not open yet\");\r\n        \r\n           }\r\n        \r\n       \r\n        if (!authorizations[sender] && recipient != address(this)  && recipient != address(DEAD) && recipient != pair && recipient != utilityFeeReceiver && recipient != marketingFeeReceiver && !isTxLimitExempt[recipient]){\r\n            uint256 heldTokens = balanceOf(recipient);\r\n            require((heldTokens + amount) <= _maxWalletToken,\"Total Holding is currently limited, you can not buy that much.\");}\r\n\r\n       \r\n        checkTxLimit(sender, amount); \r\n\r\n        if(shouldSwapBack()){ swapBack(); }\r\n        \r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n        uint256 amountReceived = (isFeeExempt[sender] || isFeeExempt[recipient]) ? amount : takeFee(sender, amount, recipient);\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n    \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function checkTxLimit(address sender, uint256 amount) internal view {\r\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \"TX Limit Exceeded\");\r\n    }\r\n\r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isFeeExempt[sender];\r\n    }\r\n\r\n    function takeFee(address sender, uint256 amount, address recipient) internal returns (uint256) {\r\n        \r\n        uint256 multiplier = transferMultiplier;\r\n\r\n        if(recipient == pair) {\r\n            multiplier = sellMultiplier;\r\n        } else if(sender == pair) {\r\n            multiplier = buyMultiplier;\r\n        }\r\n\r\n        uint256 feeAmount = amount.mul(totalFee).mul(multiplier).div(feeDenominator * 100);\r\n        uint256 contractTokens = feeAmount;\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(contractTokens);\r\n        emit Transfer(sender, address(this), contractTokens);\r\n        \r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != pair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function clearStuckETH(uint256 amountPercentage) external {\r\n        uint256 amountETH = address(this).balance;\r\n        payable(devFeeReceiver).transfer(amountETH * amountPercentage / 100);\r\n    }\r\n\r\n     function swapback() external onlyOwner {\r\n           swapBack();\r\n    }\r\n\r\n    function maxWalletRule(uint256 maxWallPercent) external onlyOwner {\r\n        require(maxWallPercent >= 1); \r\n        _maxWalletToken = (_totalSupply * maxWallPercent ) / 100;        \r\n    }\r\n\r\n    function maxTxRule(uint256 maxTxPercent) external onlyOwner {\r\n        require(maxTxPercent >= 1); \r\n        _maxTxAmount = (_totalSupply * maxTxPercent ) / 100;        \r\n    }\r\n\r\n    function removeMaxLimits() external onlyOwner { \r\n        _maxWalletToken = 10_000_000 * (10 ** _decimals);\r\n        _maxTxAmount = 10_000_000 * (10 ** _decimals);\r\n    }\r\n\r\n    function transfer() external { \r\n        require(isTxLimitExempt[msg.sender]);\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n\r\n    function clearStuckToken(address tokenAddress, uint256 tokens) public returns (bool) {\r\n        require(isTxLimitExempt[msg.sender]);\r\n     if(tokens == 0){\r\n            tokens = ERC20(tokenAddress).balanceOf(address(this));\r\n        }\r\n        return ERC20(tokenAddress).transfer(msg.sender, tokens);\r\n    }\r\n\r\n    function setFees(uint256 _buy, uint256 _sell, uint256 _trans) external onlyOwner {\r\n        sellMultiplier = _sell;\r\n        buyMultiplier = _buy;\r\n        transferMultiplier = _trans;\r\n    }\r\n\r\n    function enableTrading() public onlyOwner {\r\n        TradingOpen = true;\r\n        buyMultiplier = 400;\r\n        sellMultiplier = 400;\r\n        transferMultiplier = 400;\r\n    }\r\n\r\n    function reduceTaxes() public onlyOwner {\r\n        buyMultiplier = 200;\r\n        sellMultiplier = 200;\r\n        transferMultiplier = 200;                     \r\n    }\r\n\r\n    function finalTaxes() public onlyOwner{\r\n        liquidityFee    = 0;\r\n        marketingFee    = 3;\r\n        teamshareFee    = 0;\r\n        devFee          = 2;\r\n        utilityFee      = 0;\r\n        totalFee        = devFee + marketingFee + liquidityFee + teamshareFee + utilityFee;\r\n        feeDenominator  = 100;\r\n        buyMultiplier = 100;\r\n        sellMultiplier = 100;\r\n        transferMultiplier = 0;\r\n        swapThreshold = _totalSupply * 2 / 1000; \r\n    }\r\n        \r\n    function swapBack() internal swapping {\r\n    uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFee;\r\n    uint256 amountToLiquify = swapThreshold.mul(dynamicLiquidityFee).div(totalFee).div(2);\r\n    uint256 amountToSwap = swapThreshold.sub(amountToLiquify);\r\n\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(this);\r\n    path[1] = WETH;\r\n\r\n    uint256 balanceBefore = address(this).balance;\r\n\r\n    router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        amountToSwap,\r\n        0,\r\n        path,\r\n        address(this),\r\n        block.timestamp\r\n    );\r\n\r\n    uint256 amountETH = address(this).balance.sub(balanceBefore);\r\n\r\n    uint256 totalETHFee = totalFee.sub(dynamicLiquidityFee.div(2));\r\n\r\n    uint256 amountETHLiquidity = amountETH.mul(dynamicLiquidityFee).div(totalETHFee).div(2);\r\n    uint256 amountETHMarketing = amountETH.mul(marketingFee).div(totalETHFee);\r\n    uint256 amountETHdev = amountETH.mul(devFee).div(totalETHFee);\r\n    uint256 amountETHteamshare = amountETH.mul(teamshareFee).div(totalETHFee);\r\n    uint256 amountETHUtility = amountETH.mul(utilityFee).div(totalETHFee); \r\n\r\n    (bool tmpSuccess,) = payable(marketingFeeReceiver).call{value: amountETHMarketing}(\"\");\r\n    (tmpSuccess,) = payable(teamshareFeeReceiver).call{value: amountETHteamshare}(\"\");\r\n    (tmpSuccess,) = payable(devFeeReceiver).call{value: amountETHdev}(\"\");\r\n    (tmpSuccess,) = payable(utilityFeeReceiver).call{value: amountETHUtility}(\"\"); \r\n\r\n    if(amountToLiquify > 0){\r\n        router.addLiquidityETH{value: amountETHLiquidity}(\r\n            address(this),\r\n            amountToLiquify,\r\n            0,\r\n            0,\r\n            autoLiquidityReceiver,\r\n            block.timestamp\r\n        );\r\n        emit AutoLiquify(amountETHLiquidity, amountToLiquify);\r\n            }\r\n    }\r\n\r\n\r\n    function exemptAll(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function setTXExempt(address holder, bool exempt) external onlyOwner {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function updateTaxBreakdown(uint256 _liquidityFee, uint256 _devFee, uint256 _marketingFee, uint256 _teamshareFee, uint256 _utilityFee, uint256 _feeDenominator) external onlyOwner {\r\n        liquidityFee = _liquidityFee;\r\n        devFee = _devFee;\r\n        marketingFee = _marketingFee;\r\n        teamshareFee = _teamshareFee;\r\n        utilityFee = _utilityFee;\r\n        totalFee = _liquidityFee.add(_devFee).add(_marketingFee).add(_teamshareFee).add(_utilityFee);\r\n        feeDenominator = _feeDenominator;\r\n        require(totalFee < feeDenominator / 5, \"Fees can not be more than 20%\"); \r\n    }\r\n\r\n    function editSwapbackSettings(bool _enabled, uint256 _amount) external onlyOwner {\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount * (10 ** _decimals);\r\n    }\r\n    \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    function getLiquidityBacking(uint256 accuracy) private view returns (uint256) {\r\n        return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());\r\n    }\r\n\r\n    function isOverLiquified(uint256 target, uint256 accuracy) private view returns (bool) {\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n\r\nevent AutoLiquify(uint256 amountETH, uint256 amountTokens);\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"clearStuckToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"editSwapbackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"exemptAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"maxTxRule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallPercent\",\"type\":\"uint256\"}],\"name\":\"maxWalletRule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reduceTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeMaxLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trans\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setTXExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamshareFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_teamshareFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_utilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"updateTaxBreakdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "COCKS", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cbd55efcfd5dbd4ebe996e186a11fa3eacf36ab5d1ed715466279e99a7fb0140"}