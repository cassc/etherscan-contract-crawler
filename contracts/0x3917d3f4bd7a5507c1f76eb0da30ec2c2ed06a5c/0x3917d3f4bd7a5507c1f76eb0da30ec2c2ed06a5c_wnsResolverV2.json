{"SourceCode": "pragma solidity 0.8.7;\r\n\r\ninterface WnsRegistryInterface {\r\n    function owner() external view returns (address);\r\n    function getWnsAddress(string memory _label) external view returns (address);\r\n    function getRecord(uint256 _tokenId) external view returns (string memory);\r\n    function getRecord(bytes32 _hash) external view returns (uint256);\r\n\r\n}\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface WnsERC721Interface {\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n}\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface WnsRegistrarInterface {\r\n    function computeNamehash(string memory _name) external view returns (bytes32);\r\n    function recoverSigner(bytes32 message, bytes memory sig) external view returns (address);\r\n}\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface WnsOldResolverInterface {\r\n    function resolveAddress(address _address) external view returns (string memory);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.7;\r\n\r\ncontract wnsResolverV2 {\r\n \r\n    address private WnsRegistry;\r\n    WnsRegistryInterface wnsRegistry;\r\n    WnsOldResolverInterface wnsOldResolver = WnsOldResolverInterface(0xf56D46948ab9F850F0CdAd3D394C2751214f555F);\r\n\r\n    constructor(address registry_) {\r\n        WnsRegistry = registry_;\r\n        wnsRegistry = WnsRegistryInterface(WnsRegistry);\r\n    }\r\n\r\n    function setRegistry(address _registry) public {\r\n        require(msg.sender == wnsRegistry.owner(), \"Not authorized.\");\r\n        WnsRegistry = _registry;\r\n        wnsRegistry = WnsRegistryInterface(WnsRegistry);\r\n    }\r\n\r\n    //Primary names mapping\r\n    mapping(address => uint256) private _primaryNames;\r\n    mapping(uint256 => mapping(string => string)) private _txtRecords;\r\n    \r\n    event PrimaryNameSet(address indexed address_, uint256 tokenId);\r\n\r\n    function setPrimaryName(address _address, uint256 _tokenID) public {\r\n        WnsERC721Interface wnsErc721 = WnsERC721Interface(wnsRegistry.getWnsAddress(\"_wnsErc721\"));\r\n        require((wnsErc721.ownerOf(_tokenID) == msg.sender && _address == msg.sender) || msg.sender == wnsRegistry.getWnsAddress(\"_wnsMigration\"), \"Not owned by caller.\");\r\n        _primaryNames[_address] = _tokenID + 1;\r\n        emit PrimaryNameSet(_address, _tokenID);\r\n    }\r\n\r\n    function resolveAddress(address _address) public view returns (string memory) {\r\n        uint256 _tokenId = _primaryNames[_address];\r\n\r\n        if(_tokenId == 0) {\r\n            (bool success, bytes memory result) = address(wnsOldResolver).staticcall(\r\n                abi.encodeWithSignature(\"resolveAddress(address)\", _address)\r\n            );\r\n\r\n            if (success) {\r\n                string memory domain = abi.decode(result, (string));\r\n                string memory name = extractSubdomain(domain);\r\n                uint256 newTokenId = resolveNameToTokenId(name, \"\");\r\n                WnsERC721Interface wnsErc721 = WnsERC721Interface(wnsRegistry.getWnsAddress(\"_wnsErc721\"));\r\n                require(wnsErc721.ownerOf(newTokenId) == _address, \"Primary Name not set for the address.\");\r\n                return wnsRegistry.getRecord(newTokenId);\r\n            } else {\r\n                revert(\"Primary Name not set for the address.\");\r\n            }\r\n        } else {\r\n            WnsERC721Interface wnsErc721 = WnsERC721Interface(wnsRegistry.getWnsAddress(\"_wnsErc721\"));\r\n            require(wnsErc721.ownerOf(_tokenId - 1) == _address, \"Primary Name not set for the address.\");\r\n            return wnsRegistry.getRecord(_tokenId - 1);\r\n        }\r\n    }\r\n\r\n    function extractSubdomain(string memory domain) public pure returns (string memory) {\r\n        bytes memory domainBytes = bytes(domain);\r\n        uint256 pos = 0;\r\n        for (uint256 i = 0; i < domainBytes.length; i++) {\r\n            if (domainBytes[i] == \".\") {\r\n                pos = i;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        bytes memory resultBytes = new bytes(pos);\r\n        for (uint256 i = 0; i < pos; i++) {\r\n            resultBytes[i] = domainBytes[i];\r\n        }\r\n        \r\n        return string(resultBytes);\r\n    }\r\n\r\n    function resolveName(string memory _name, string memory _extension) public view returns (address) {\r\n        WnsERC721Interface wnsErc721 = WnsERC721Interface(wnsRegistry.getWnsAddress(\"_wnsErc721\"));\r\n        WnsRegistrarInterface wnsRegistrar = WnsRegistrarInterface(wnsRegistry.getWnsAddress(\"_wnsRegistrar\"));\r\n        bytes32 _hash = wnsRegistrar.computeNamehash(_name);\r\n        uint256 _preTokenId = wnsRegistry.getRecord(_hash);\r\n        require(_preTokenId != 0, \"Name doesn't exist.\");\r\n        return wnsErc721.ownerOf(_preTokenId - 1);\r\n    }\r\n\r\n    function resolveTokenId(uint256 _tokenId) public view returns (string memory) {\r\n        return wnsRegistry.getRecord(_tokenId);\r\n    }\r\n\r\n    function resolveNameToTokenId(string memory _name, string memory _extension) public view returns (uint256) {\r\n        WnsRegistrarInterface wnsRegistrar = WnsRegistrarInterface(wnsRegistry.getWnsAddress(\"_wnsRegistrar\"));\r\n        bytes32 _hash = wnsRegistrar.computeNamehash(_name);\r\n        uint256 _preTokenId = wnsRegistry.getRecord(_hash);\r\n        require(_preTokenId != 0, \"Name doesn't exist.\");\r\n        return _preTokenId - 1;\r\n    }\r\n\r\n    function setTxtRecords(string[] memory labels, string[] memory records, uint256 tokenId, bytes memory sig) public {\r\n        WnsERC721Interface wnsErc721 = WnsERC721Interface(wnsRegistry.getWnsAddress(\"_wnsErc721\"));\r\n        WnsRegistrarInterface wnsRegistrar = WnsRegistrarInterface(wnsRegistry.getWnsAddress(\"_wnsRegistrar\"));\r\n        require(msg.sender == wnsErc721.ownerOf(tokenId), \"Caller is not the Owner.\");\r\n        require(labels.length == records.length, \"Invalid parameters.\");\r\n        bytes32 message = keccak256(abi.encode(labels, records, tokenId));\r\n        require(wnsRegistrar.recoverSigner(message, sig) == wnsRegistry.getWnsAddress(\"_wnsSigner\"), \"Not authorized.\");\r\n        for(uint256 i; i<labels.length; i++) {\r\n            string memory currentRecord = _txtRecords[tokenId][labels[i]];\r\n            if (keccak256(bytes(currentRecord)) != keccak256(bytes(records[i]))) {\r\n                _txtRecords[tokenId][labels[i]] = records[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    function getTxtRecords(uint256 tokenId, string memory label) public view returns (string memory) {\r\n        return _txtRecords[tokenId][label];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"PrimaryNameSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"extractSubdomain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"getTxtRecords\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"resolveAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_extension\",\"type\":\"string\"}],\"name\":\"resolveName\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_extension\",\"type\":\"string\"}],\"name\":\"resolveNameToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"resolveTokenId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"setPrimaryName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"records\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"setTxtRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "wnsResolverV2", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000093a058d7e9c0319666decae667f85586201f300f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b82558a9f0aca21b11744bcfe218733c3410dfd26e5ad8779259cb7bec1864e6"}