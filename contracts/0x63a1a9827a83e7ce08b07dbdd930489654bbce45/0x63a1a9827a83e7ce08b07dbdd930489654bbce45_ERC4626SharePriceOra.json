{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/base/ERC4626SharePriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\nimport { ERC4626 } from \\\"@solmate/mixins/ERC4626.sol\\\";\\nimport { SafeTransferLib } from \\\"@solmate/utils/SafeTransferLib.sol\\\";\\nimport { ERC20 } from \\\"@solmate/tokens/ERC20.sol\\\";\\nimport { Math } from \\\"src/utils/Math.sol\\\";\\nimport { Owned } from \\\"@solmate/auth/Owned.sol\\\";\\nimport { AutomationCompatibleInterface } from \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\nimport { IRegistrar } from \\\"src/interfaces/external/Chainlink/IRegistrar.sol\\\";\\nimport { IRegistry } from \\\"src/interfaces/external/Chainlink/IRegistry.sol\\\";\\n\\ncontract ERC4626SharePriceOracle is AutomationCompatibleInterface {\\n    using Math for uint256;\\n    using SafeTransferLib for ERC20;\\n\\n    // ========================================= STRUCTS =========================================\\n\\n    struct Observation {\\n        uint64 timestamp;\\n        uint192 cumulative;\\n    }\\n\\n    // ========================================= CONSTANTS =========================================\\n    /**\\n     * @notice Gas Limit to use for Upkeep created in `initialize`.\\n     * @dev Should be fairly constant between networks, but 50_000 is a safe limit in\\n     *      most situations.\\n     */\\n    uint32 public constant UPKEEP_GAS_LIMIT = 50_000;\\n\\n    /**\\n     * @notice Decimals used to scale share price for internal calculations.\\n     */\\n    uint8 public constant decimals = 18;\\n\\n    // ========================================= GLOBAL STATE =========================================\\n    /**\\n     * @notice The latest stored onchain answer.\\n     */\\n    uint216 public answer;\\n\\n    /**\\n     * @notice Stores the index of observations with the pending Observation.\\n     */\\n    uint16 public currentIndex;\\n\\n    /**\\n     * @notice The length of the observations array.\\n     * @dev `observations` will never change its length once set in the constructor.\\n     *      By saving this value here, we can take advantage of variable packing to make reads cheaper.\\n     * @dev This is not immutable to make it easier in the future to create oracles that can expand their observations.\\n     */\\n    uint16 public observationsLength;\\n\\n    /**\\n     * @notice Triggered when answer provided by Chainlink Automation is extreme.\\n     * @dev true: No further upkeeps are allowed, `getLatest` and `getLatestAnswer` will return true error bools.\\n     *      false: Continue as normal.\\n     */\\n    bool public killSwitch;\\n\\n    /**\\n     * @notice Stores the observations this contract uses to derive a\\n     *         time weighted average answer.\\n     */\\n    Observation[] public observations;\\n\\n    /**\\n     * @notice The Automation V2 Forwarder address for this contract.\\n     */\\n    address public automationForwarder;\\n\\n    /**\\n     * @notice keccak256 hash of the parameters used to create this upkeep.\\n     * @dev Only set if `initialize` leads to a pending upkeep.\\n     */\\n    bytes32 public pendingUpkeepParamHash;\\n\\n    //============================== ERRORS ===============================\\n\\n    error ERC4626SharePriceOracle__OnlyCallableByAutomationForwarder();\\n    error ERC4626SharePriceOracle__StalePerformData();\\n    error ERC4626SharePriceOracle__CumulativeTooLarge();\\n    error ERC4626SharePriceOracle__NoUpkeepConditionMet();\\n    error ERC4626SharePriceOracle__SharePriceTooLarge();\\n    error ERC4626SharePriceOracle__FuturePerformData();\\n    error ERC4626SharePriceOracle__ContractKillSwitch();\\n    error ERC4626SharePriceOracle__AlreadyInitialized();\\n    error ERC4626SharePriceOracle__ParamHashDiffers();\\n    error ERC4626SharePriceOracle__NoPendingUpkeepToHandle();\\n\\n    //============================== EVENTS ===============================\\n\\n    /**\\n     * @notice Emitted when performUpkeep is ran.\\n     * @param timeUpdated the time the answer was updated on chain\\n     * @param timeAnswerCalculated the time the answer was calculated in checkUpkeep\\n     * @param latestAnswer the new answer\\n     * @param timeWeightedAverageAnswer the new time weighted average answer\\n     * @param isNotSafeToUse bool\\n     *                       if true: `timeWeightedAverageAnswer` is illogical, use `latestAnswer`\\n     *                       if false: use `timeWeightedAverageAnswer`\\n     */\\n    event OracleUpdated(\\n        uint256 timeUpdated,\\n        uint256 timeAnswerCalculated,\\n        uint256 latestAnswer,\\n        uint256 timeWeightedAverageAnswer,\\n        bool isNotSafeToUse\\n    );\\n\\n    /**\\n     * @notice Emitted when the oracles kill switch is activated.\\n     * @dev If this happens, then the proposed performData lead to extremely volatile share price,\\n     *      so we need to investigate why that happened, mitigate it, then launch a new share price oracle.\\n     */\\n    event KillSwitchActivated(uint256 reportedAnswer, uint256 minAnswer, uint256 maxAnswer);\\n\\n    event UpkeepRegistered(uint256 upkeepId, address forwarder);\\n    event UpkeepPending(bytes32 upkeepParamHash);\\n\\n    //============================== IMMUTABLES ===============================\\n\\n    /**\\n     * @notice Determines the minimum time for each observation, and is used to determine if an\\n     *         answer is stale.\\n     */\\n    uint64 public immutable heartbeat;\\n\\n    /**\\n     * @notice Used to enforce that the summation of each observations delay used in\\n     *         a time weighed average calculation is less than the gracePeriod.\\n     * @dev Example: Using a 3 day TWAA with 1 hour grace period.\\n     *      When calculating the TWAA, the total time delta for completed observations must be greater than 3 days but less than\\n     *      3 days + 1hr. So one observation could be delayed 1 hr, or two observations could be\\n     *      delayed 30 min each.\\n     */\\n    uint64 public immutable gracePeriod;\\n\\n    /**\\n     * @notice Number between 0 -> 10_000 that determines how far off the last saved answer\\n     *         can deviate from the current answer.\\n     * @dev This value should be reflective of the vaults expected maximum percent share\\n     *      price change during a heartbeat duration.\\n     * @dev\\n     *    -1_000 == 10%\\n     *    -100 == 1%\\n     *    -10 == 0.1%\\n     *    -1 == 0.01% or 1 bps\\n     */\\n    uint64 public immutable deviationTrigger;\\n\\n    /**\\n     * @notice One share of target vault.\\n     */\\n    uint256 public immutable ONE_SHARE;\\n\\n    /**\\n     * @notice The admin address for the Automation Upkeep.\\n     */\\n    address public immutable automationAdmin;\\n\\n    /**\\n     * @notice Chainlink's Automation Registry contract address.\\n     * @notice For mainnet use 0x6593c7De001fC8542bB1703532EE1E5aA0D458fD.\\n     */\\n    address public immutable automationRegistry;\\n\\n    /**\\n     * @notice Chainlink's Automation Registrar contract address.\\n     * @notice For mainnet use 0x6B0B234fB2f380309D47A7E9391E29E9a179395a.\\n     */\\n    address public immutable automationRegistrar;\\n\\n    /**\\n     * @notice Link Token.\\n     * @notice For mainnet use 0x514910771AF9Ca656af840dff83E8264EcF986CA.\\n     */\\n    ERC20 public immutable link;\\n\\n    /**\\n     * @notice ERC4626 target vault this contract is an oracle for.\\n     */\\n    ERC4626 public immutable target;\\n\\n    /**\\n     * @notice Target vault decimals.\\n     */\\n    uint8 public immutable targetDecimals;\\n\\n    /**\\n     * @notice Multiplier with 4 decimals that determines the acceptable lower band\\n     *         for a performUpkeep answer.\\n     */\\n    uint256 public immutable allowedAnswerChangeLower;\\n\\n    /**\\n     * @notice Multiplier with 4 decimals that determines the acceptable upper band\\n     *         for a performUpkeep answer.\\n     */\\n    uint256 public immutable allowedAnswerChangeUpper;\\n\\n    /**\\n     * @notice TWAA Minimum Duration = `_observationsToUse` * `_heartbeat`.\\n     * @notice TWAA Maximum Duration = `_observationsToUse` * `_heartbeat` + `gracePeriod` + `_heartbeat`.\\n     * @notice TWAA calculations will use the current pending observation, and then `_observationsToUse` observations.\\n     */\\n    constructor(\\n        ERC4626 _target,\\n        uint64 _heartbeat,\\n        uint64 _deviationTrigger,\\n        uint64 _gracePeriod,\\n        uint16 _observationsToUse,\\n        address _automationRegistry,\\n        address _automationRegistrar,\\n        address _automationAdmin,\\n        address _link,\\n        uint216 _startingAnswer,\\n        uint256 _allowedAnswerChangeLower,\\n        uint256 _allowedAnswerChangeUpper\\n    ) {\\n        target = _target;\\n        targetDecimals = target.decimals();\\n        ONE_SHARE = 10 ** targetDecimals;\\n        heartbeat = _heartbeat;\\n        deviationTrigger = _deviationTrigger;\\n        gracePeriod = _gracePeriod;\\n        // Add 1 to observations to use.\\n        _observationsToUse = _observationsToUse + 1;\\n        observationsLength = _observationsToUse;\\n\\n        // Grow Observations array to required length, and fill it with observations that use 1 for timestamp and cumulative.\\n        // That way the initial upkeeps won't need to change state from 0 which is more expensive.\\n        for (uint256 i; i < _observationsToUse; ++i) observations.push(Observation({ timestamp: 1, cumulative: 1 }));\\n\\n        // Set to _startingAnswer so slot is dirty for first upkeep, and does not trigger kill switch.\\n        answer = _startingAnswer;\\n\\n        if (_allowedAnswerChangeLower > 1e4) revert(\\\"Illogical Lower\\\");\\n        allowedAnswerChangeLower = _allowedAnswerChangeLower;\\n        if (_allowedAnswerChangeUpper < 1e4) revert(\\\"Illogical Upper\\\");\\n        allowedAnswerChangeUpper = _allowedAnswerChangeUpper;\\n\\n        automationRegistry = _automationRegistry;\\n        automationRegistrar = _automationRegistrar;\\n        automationAdmin = _automationAdmin;\\n        link = ERC20(_link);\\n    }\\n\\n    //============================== INITIALIZATION ===============================\\n\\n    /**\\n     * @notice Should be called after contract creation.\\n     * @dev Creates a Chainlink Automation Upkeep, and set the `automationForwarder` address.\\n     */\\n    function initialize(uint96 initialUpkeepFunds) external {\\n        // This function is only callable once.\\n        if (automationForwarder != address(0) || pendingUpkeepParamHash != bytes32(0))\\n            revert ERC4626SharePriceOracle__AlreadyInitialized();\\n\\n        link.safeTransferFrom(msg.sender, address(this), initialUpkeepFunds);\\n\\n        // Create the upkeep.\\n        IRegistrar registrar = IRegistrar(automationRegistrar);\\n        IRegistry registry = IRegistry(automationRegistry);\\n        IRegistrar.RegistrationParams memory params = IRegistrar.RegistrationParams({\\n            name: string.concat(target.name(), \\\" Share Price Oracle\\\"),\\n            encryptedEmail: hex\\\"\\\",\\n            upkeepContract: address(this),\\n            gasLimit: UPKEEP_GAS_LIMIT,\\n            adminAddress: automationAdmin,\\n            triggerType: 0,\\n            checkData: hex\\\"\\\",\\n            triggerConfig: hex\\\"\\\",\\n            offchainConfig: hex\\\"\\\",\\n            amount: initialUpkeepFunds\\n        });\\n\\n        link.safeApprove(automationRegistrar, initialUpkeepFunds);\\n        uint256 upkeepID = registrar.registerUpkeep(params);\\n        if (upkeepID > 0) {\\n            // Upkeep was successfully registered.\\n            address forwarder = registry.getForwarder(upkeepID);\\n            automationForwarder = forwarder;\\n            emit UpkeepRegistered(upkeepID, forwarder);\\n        } else {\\n            // Upkeep is pending.\\n            bytes32 paramHash = keccak256(\\n                abi.encode(\\n                    params.upkeepContract,\\n                    params.gasLimit,\\n                    params.adminAddress,\\n                    params.triggerType,\\n                    params.checkData,\\n                    params.offchainConfig\\n                )\\n            );\\n            pendingUpkeepParamHash = paramHash;\\n            emit UpkeepPending(paramHash);\\n        }\\n    }\\n\\n    /**\\n     * @notice Finish setting forwarder address if `initialize` did not get an auto-approved upkeep.\\n     */\\n    function handlePendingUpkeep(uint256 _upkeepId) external {\\n        if (pendingUpkeepParamHash == bytes32(0) || automationForwarder != address(0))\\n            revert ERC4626SharePriceOracle__NoPendingUpkeepToHandle();\\n\\n        IRegistry registry = IRegistry(automationRegistry);\\n\\n        IRegistry.UpkeepInfo memory upkeepInfo = registry.getUpkeep(_upkeepId);\\n        // Build the param hash using upkeepInfo.\\n        // The upkeep id has 16 bytes of entropy, that need to be shifted out(16*8=128).\\n        // Then take the resulting number and only take the last byte of it to get the trigger type.\\n        uint8 triggerType = uint8(_upkeepId >> 128);\\n        bytes32 proposedParamHash = keccak256(\\n            abi.encode(\\n                upkeepInfo.target,\\n                upkeepInfo.executeGas,\\n                upkeepInfo.admin,\\n                triggerType,\\n                upkeepInfo.checkData,\\n                upkeepInfo.offchainConfig\\n            )\\n        );\\n        if (pendingUpkeepParamHash != proposedParamHash) revert ERC4626SharePriceOracle__ParamHashDiffers();\\n\\n        // Hashes match, so finish initialization.\\n        address forwarder = registry.getForwarder(_upkeepId);\\n        automationForwarder = forwarder;\\n        emit UpkeepRegistered(_upkeepId, forwarder);\\n    }\\n\\n    //============================== CHAINLINK AUTOMATION ===============================\\n\\n    /**\\n     * @notice Leverages Automation V2 secure offchain computation to run expensive share price calculations offchain,\\n     *         then inject them onchain using `performUpkeep`.\\n     */\\n    function checkUpkeep(bytes calldata) external view returns (bool upkeepNeeded, bytes memory performData) {\\n        // Get target share price.\\n        uint216 sharePrice = _getTargetSharePrice();\\n        // Read state from one slot.\\n        uint256 _answer = answer;\\n        uint16 _currentIndex = currentIndex;\\n        uint16 _observationsLength = observationsLength;\\n        bool _killSwitch = killSwitch;\\n\\n        if (!_killSwitch) {\\n            // See if we need to update because answer is stale or outside deviation.\\n            // Time since answer was last updated.\\n            uint256 timeDeltaCurrentAnswer = block.timestamp - observations[_currentIndex].timestamp;\\n            uint256 timeDeltaSincePreviousObservation = block.timestamp -\\n                observations[_getPreviousIndex(_currentIndex, _observationsLength)].timestamp;\\n            uint64 _heartbeat = heartbeat;\\n\\n            if (\\n                timeDeltaCurrentAnswer >= _heartbeat ||\\n                timeDeltaSincePreviousObservation >= _heartbeat ||\\n                sharePrice > _answer.mulDivDown(1e4 + deviationTrigger, 1e4) ||\\n                sharePrice < _answer.mulDivDown(1e4 - deviationTrigger, 1e4)\\n            ) {\\n                // We need to update answer.\\n                upkeepNeeded = true;\\n                performData = abi.encode(sharePrice, uint64(block.timestamp));\\n            }\\n        } // else no upkeep is needed\\n    }\\n\\n    /**\\n     * @notice Save answer on chain, and update observations if needed.\\n     */\\n    function performUpkeep(bytes calldata performData) external {\\n        if (msg.sender != automationForwarder) revert ERC4626SharePriceOracle__OnlyCallableByAutomationForwarder();\\n        (uint216 sharePrice, uint64 currentTime) = abi.decode(performData, (uint216, uint64));\\n\\n        // Verify atleast one of the upkeep conditions was met.\\n        bool upkeepConditionMet;\\n\\n        // Read state from one slot.\\n        uint256 _answer = answer;\\n        uint16 _currentIndex = currentIndex;\\n        uint16 _observationsLength = observationsLength;\\n        bool _killSwitch = killSwitch;\\n\\n        if (_killSwitch) revert ERC4626SharePriceOracle__ContractKillSwitch();\\n\\n        // See if kill switch should be activated based on change between answers.\\n        if (_checkIfKillSwitchShouldBeTriggered(sharePrice, _answer)) return;\\n\\n        // See if we are upkeeping because of deviation.\\n        if (\\n            sharePrice > uint256(_answer).mulDivDown(1e4 + deviationTrigger, 1e4) ||\\n            sharePrice < uint256(_answer).mulDivDown(1e4 - deviationTrigger, 1e4)\\n        ) upkeepConditionMet = true;\\n\\n        // Update answer.\\n        answer = sharePrice;\\n\\n        // Update current observation.\\n        Observation storage currentObservation = observations[_currentIndex];\\n        // Make sure time is larger than previous time.\\n        if (currentTime <= currentObservation.timestamp) revert ERC4626SharePriceOracle__StalePerformData();\\n\\n        // Make sure time is not in the future.\\n        if (currentTime > block.timestamp) revert ERC4626SharePriceOracle__FuturePerformData();\\n\\n        // See if we are updating because of staleness.\\n        uint256 timeDelta = currentTime - currentObservation.timestamp;\\n        if (timeDelta >= heartbeat) upkeepConditionMet = true;\\n\\n        // Use the old answer to calculate cumulative.\\n        uint256 currentCumulative = currentObservation.cumulative + (_answer * timeDelta);\\n        if (currentCumulative > type(uint192).max) revert ERC4626SharePriceOracle__CumulativeTooLarge();\\n        currentObservation.cumulative = uint192(currentCumulative);\\n        currentObservation.timestamp = currentTime;\\n\\n        uint256 timeDeltaSincePreviousObservation = currentTime -\\n            observations[_getPreviousIndex(_currentIndex, _observationsLength)].timestamp;\\n        // See if we need to advance to the next cumulative.\\n        if (timeDeltaSincePreviousObservation >= heartbeat) {\\n            uint16 nextIndex = _getNextIndex(_currentIndex, _observationsLength);\\n            currentIndex = nextIndex;\\n            // Update memory variable for event.\\n            _currentIndex = nextIndex;\\n            // Update newest cumulative.\\n            Observation storage newObservation = observations[nextIndex];\\n            newObservation.cumulative = uint192(currentCumulative);\\n            newObservation.timestamp = currentTime;\\n            upkeepConditionMet = true;\\n        }\\n\\n        if (!upkeepConditionMet) revert ERC4626SharePriceOracle__NoUpkeepConditionMet();\\n\\n        (uint256 timeWeightedAverageAnswer, bool isNotSafeToUse) = _getTimeWeightedAverageAnswer(\\n            sharePrice,\\n            _currentIndex,\\n            _observationsLength\\n        );\\n\\n        // See if kill switch should be activated based on change between proposed answer and time weighted average answer.\\n        if (!isNotSafeToUse && _checkIfKillSwitchShouldBeTriggered(sharePrice, timeWeightedAverageAnswer)) return;\\n        emit OracleUpdated(block.timestamp, currentTime, sharePrice, timeWeightedAverageAnswer, isNotSafeToUse);\\n    }\\n\\n    //============================== ORACLE VIEW FUNCTIONS ===============================\\n\\n    /**\\n     * @notice Get the latest answer, time weighted average answer, and bool indicating whether they can be safely used.\\n     */\\n    function getLatest() external view returns (uint256 ans, uint256 timeWeightedAverageAnswer, bool notSafeToUse) {\\n        // Read state from one slot.\\n        ans = answer;\\n        uint16 _currentIndex = currentIndex;\\n        uint16 _observationsLength = observationsLength;\\n        bool _killSwitch = killSwitch;\\n\\n        if (_killSwitch) return (0, 0, true);\\n\\n        // Check if answer is stale, if so set notSafeToUse to true, and return.\\n        uint256 timeDeltaSinceLastUpdated = block.timestamp - observations[currentIndex].timestamp;\\n        // Note add in the grace period here, because it can take time for the upkeep TX to go through.\\n        if (timeDeltaSinceLastUpdated > (heartbeat + gracePeriod)) return (0, 0, true);\\n\\n        (timeWeightedAverageAnswer, notSafeToUse) = _getTimeWeightedAverageAnswer(\\n            ans,\\n            _currentIndex,\\n            _observationsLength\\n        );\\n        if (notSafeToUse) return (0, 0, true);\\n    }\\n\\n    /**\\n     * @notice Get the latest answer, and bool indicating whether answer is safe to use or not.\\n     */\\n    function getLatestAnswer() external view returns (uint256, bool) {\\n        uint256 _answer = answer;\\n        bool _killSwitch = killSwitch;\\n\\n        if (_killSwitch) return (0, true);\\n\\n        // Check if answer is stale, if so set notSafeToUse to true, and return.\\n        uint256 timeDeltaSinceLastUpdated = block.timestamp - observations[currentIndex].timestamp;\\n        // Note add in the grace period here, because it can take time for the upkeep TX to go through.\\n        if (timeDeltaSinceLastUpdated > (heartbeat + gracePeriod)) return (0, true);\\n\\n        return (_answer, false);\\n    }\\n\\n    //============================== INTERNAL HELPER FUNCTIONS ===============================\\n\\n    /**\\n     * @notice Get the next index of observations array.\\n     */\\n    function _getNextIndex(uint16 _currentIndex, uint16 _length) internal pure returns (uint16 nextIndex) {\\n        nextIndex = (_currentIndex == _length - 1) ? 0 : _currentIndex + 1;\\n    }\\n\\n    /**\\n     * @notice Get the previous index of observations array.\\n     */\\n    function _getPreviousIndex(uint16 _currentIndex, uint16 _length) internal pure returns (uint16 previousIndex) {\\n        previousIndex = (_currentIndex == 0) ? _length - 1 : _currentIndex - 1;\\n    }\\n\\n    /**\\n     * @notice Use observations to get the time weighted average answer.\\n     */\\n    function _getTimeWeightedAverageAnswer(\\n        uint256 _answer,\\n        uint16 _currentIndex,\\n        uint16 _observationsLength\\n    ) internal view returns (uint256 timeWeightedAverageAnswer, bool notSafeToUse) {\\n        // Read observations from storage.\\n        Observation memory mostRecentlyCompletedObservation = observations[\\n            _getPreviousIndex(_currentIndex, _observationsLength)\\n        ];\\n        Observation memory oldestObservation = observations[_getNextIndex(_currentIndex, _observationsLength)];\\n\\n        // Data is not set.\\n        if (oldestObservation.timestamp == 1) return (0, true);\\n\\n        // Make sure that the old observations we are using are not too stale.\\n        uint256 timeDelta = mostRecentlyCompletedObservation.timestamp - oldestObservation.timestamp;\\n        /// @dev use _length - 2 because\\n        /// remove 1 because observations array stores the current pending observation.\\n        /// remove 1 because we are really interested in the time between observations.\\n        uint256 minDuration = heartbeat * (_observationsLength - 2);\\n        uint256 maxDuration = minDuration + gracePeriod;\\n        // Data is too new\\n        if (timeDelta < minDuration) return (0, true);\\n        // Data is too old\\n        if (timeDelta > maxDuration) return (0, true);\\n\\n        Observation memory latestObservation = observations[_currentIndex];\\n        uint192 latestCumulative = latestObservation.cumulative +\\n            uint192((_answer * (block.timestamp - latestObservation.timestamp)));\\n\\n        timeWeightedAverageAnswer =\\n            (latestCumulative - oldestObservation.cumulative) /\\n            (block.timestamp - oldestObservation.timestamp);\\n    }\\n\\n    /**\\n     * @notice Get the target ERC4626's share price using totalAssets, and totalSupply.\\n     */\\n    function _getTargetSharePrice() internal view returns (uint216 sharePrice) {\\n        uint256 totalShares = target.totalSupply();\\n        // Get total Assets but scale it up to decimals decimals of precision.\\n        uint256 totalAssets = target.totalAssets().changeDecimals(targetDecimals, decimals);\\n\\n        if (totalShares == 0) return 0;\\n\\n        uint256 _sharePrice = ONE_SHARE.mulDivDown(totalAssets, totalShares);\\n\\n        if (_sharePrice > type(uint216).max) revert ERC4626SharePriceOracle__SharePriceTooLarge();\\n        sharePrice = uint216(_sharePrice);\\n    }\\n\\n    /**\\n     * @notice Activate the kill switch if `proposedAnswer` is extreme when compared to `answerToCompareAgainst`\\n     * @return bool indicating whether calling function should immediately exit or not.\\n     */\\n    function _checkIfKillSwitchShouldBeTriggered(\\n        uint256 proposedAnswer,\\n        uint256 answerToCompareAgainst\\n    ) internal returns (bool) {\\n        if (\\n            proposedAnswer < answerToCompareAgainst.mulDivDown(allowedAnswerChangeLower, 1e4) ||\\n            proposedAnswer > answerToCompareAgainst.mulDivDown(allowedAnswerChangeUpper, 1e4)\\n        ) {\\n            killSwitch = true;\\n            emit KillSwitchActivated(\\n                proposedAnswer,\\n                answerToCompareAgainst.mulDivDown(allowedAnswerChangeLower, 1e4),\\n                answerToCompareAgainst.mulDivDown(allowedAnswerChangeUpper, 1e4)\\n            );\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/mixins/ERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"../utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"../utils/FixedPointMathLib.sol\\\";\\n\\n/// @notice Minimal ERC4626 tokenized Vault implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/mixins/ERC4626.sol)\\nabstract contract ERC4626 is ERC20 {\\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               IMMUTABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    ERC20 public immutable asset;\\n\\n    constructor(\\n        ERC20 _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol, _asset.decimals()) {\\n        asset = _asset;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\\n        // Check for rounding error since we round down in previewDeposit.\\n        require((shares = previewDeposit(assets)) != 0, \\\"ZERO_SHARES\\\");\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 shares) {\\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 assets) {\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, \\\"ZERO_ASSETS\\\");\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function totalAssets() public view virtual returns (uint256);\\n\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\\n    }\\n\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\\n    }\\n\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return convertToShares(assets);\\n    }\\n\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\\n    }\\n\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\n    }\\n\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return convertToAssets(shares);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return convertToAssets(balanceOf[owner]);\\n    }\\n\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HOOKS LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\\n\\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\nlibrary Math {\\n    /**\\n     * @notice Substract with a floor of 0 for the result.\\n     */\\n    function subMinZero(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? x - y : 0;\\n    }\\n\\n    /**\\n     * @notice Used to change the decimals of precision used for an amount.\\n     */\\n    function changeDecimals(uint256 amount, uint8 fromDecimals, uint8 toDecimals) internal pure returns (uint256) {\\n        if (fromDecimals == toDecimals) {\\n            return amount;\\n        } else if (fromDecimals < toDecimals) {\\n            return amount * 10 ** (toDecimals - fromDecimals);\\n        } else {\\n            return amount / 10 ** (fromDecimals - toDecimals);\\n        }\\n    }\\n\\n    // ===================================== OPENZEPPELIN'S MATH =====================================\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    // ================================= SOLMATE's FIXEDPOINTMATHLIB =================================\\n\\n    uint256 public constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulDivDown(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/auth/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/external/Chainlink/IRegistrar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\ninterface IRegistrar {\\n    struct RegistrationParams {\\n        string name;\\n        bytes encryptedEmail;\\n        address upkeepContract;\\n        uint32 gasLimit;\\n        address adminAddress;\\n        uint8 triggerType;\\n        bytes checkData;\\n        bytes triggerConfig;\\n        bytes offchainConfig;\\n        uint96 amount;\\n    }\\n\\n    enum AutoApproveType {\\n        DISABLED,\\n        ENABLED_SENDER_ALLOWLIST,\\n        ENABLED_ALL\\n    }\\n\\n    function registerUpkeep(RegistrationParams calldata requestParams) external returns (uint256 id);\\n\\n    function setTriggerConfig(\\n        uint8 triggerType,\\n        AutoApproveType autoApproveType,\\n        uint32 autoApproveMaxAllowed\\n    ) external;\\n\\n    function owner() external view returns (address);\\n\\n    function approve(\\n        string memory name,\\n        address upkeepContract,\\n        uint32 gasLimit,\\n        address adminAddress,\\n        uint8 triggerType,\\n        bytes calldata checkData,\\n        bytes memory triggerConfig,\\n        bytes calldata offchainConfig,\\n        bytes32 hash\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/external/Chainlink/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\ninterface IRegistry {\\n    struct UpkeepInfo {\\n        address target;\\n        uint32 executeGas;\\n        bytes checkData;\\n        uint96 balance;\\n        address admin;\\n        uint64 maxValidBlocknumber;\\n        uint32 lastPerformBlockNumber;\\n        uint96 amountSpent;\\n        bool paused;\\n        bytes offchainConfig;\\n    }\\n\\n    function getForwarder(uint256 upkeepID) external view returns (address forwarder);\\n\\n    function getUpkeep(uint256 id) external view returns (UpkeepInfo memory upkeepInfo);\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/FixedPointMathLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant MAX_UINT256 = 2**256 - 1;\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide x * y by the denominator.\\n            z := div(mul(x, y), denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // If x * y modulo the denominator is strictly greater than 0,\\n            // 1 is added to round up the division of x * y by the denominator.\\n            z := add(gt(mod(mul(x, y), denominator), 0), div(mul(x, y), denominator))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Mod x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Divide x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            r := div(x, y)\\n        }\\n    }\\n\\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Add 1 to x * y if x % y > 0. Note this will\\n            // return 0 instead of reverting if y is zero.\\n            z := add(gt(mod(x, y), 0), div(x, y))\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@solmate/=lib/solmate/src/\",\r\n      \"@forge-std/=lib/forge-std/src/\",\r\n      \"@ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"@uniswap/v3-periphery/=lib/v3-periphery/\",\r\n      \"@uniswap/v3-core/=lib/v3-core/\",\r\n      \"@chainlink/=lib/chainlink/\",\r\n      \"@uniswapV3P/=lib/v3-periphery/contracts/\",\r\n      \"@uniswapV3C/=lib/v3-core/contracts/\",\r\n      \"@balancer/=lib/balancer-v2-monorepo/pkg/\",\r\n      \"@balancer-labs/=lib/balancer-v2-monorepo/../../node_modules/@balancer-labs/\",\r\n      \"@ensdomains/=node_modules/@ensdomains/\",\r\n      \"axelar-gmp-sdk-solidity/=lib/axelar-gmp-sdk-solidity/contracts/\",\r\n      \"balancer-v2-monorepo/=lib/balancer-v2-monorepo/\",\r\n      \"chainlink/=lib/chainlink/integration-tests/contracts/ethereum/src/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"pendle-core-v2-public/=lib/pendle-core-v2-public/contracts/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"v3-core/=lib/v3-core/contracts/\",\r\n      \"v3-periphery/=lib/v3-periphery/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ERC4626\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_heartbeat\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_deviationTrigger\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_gracePeriod\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"_observationsToUse\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_automationRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_automationRegistrar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_automationAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"uint216\",\"name\":\"_startingAnswer\",\"type\":\"uint216\"},{\"internalType\":\"uint256\",\"name\":\"_allowedAnswerChangeLower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allowedAnswerChangeUpper\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC4626SharePriceOracle__AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC4626SharePriceOracle__ContractKillSwitch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC4626SharePriceOracle__CumulativeTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC4626SharePriceOracle__FuturePerformData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC4626SharePriceOracle__NoPendingUpkeepToHandle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC4626SharePriceOracle__NoUpkeepConditionMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC4626SharePriceOracle__OnlyCallableByAutomationForwarder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC4626SharePriceOracle__ParamHashDiffers\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC4626SharePriceOracle__SharePriceTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC4626SharePriceOracle__StalePerformData\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reportedAnswer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAnswer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAnswer\",\"type\":\"uint256\"}],\"name\":\"KillSwitchActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeUpdated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeAnswerCalculated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"latestAnswer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeWeightedAverageAnswer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isNotSafeToUse\",\"type\":\"bool\"}],\"name\":\"OracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"upkeepParamHash\",\"type\":\"bytes32\"}],\"name\":\"UpkeepPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upkeepId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"UpkeepRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ONE_SHARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPKEEP_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowedAnswerChangeLower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowedAnswerChangeUpper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"answer\",\"outputs\":[{\"internalType\":\"uint216\",\"name\":\"\",\"type\":\"uint216\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"automationAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"automationForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"automationRegistrar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"automationRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deviationTrigger\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeWeightedAverageAnswer\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"notSafeToUse\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestAnswer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gracePeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_upkeepId\",\"type\":\"uint256\"}],\"name\":\"handlePendingUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"heartbeat\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"initialUpkeepFunds\",\"type\":\"uint96\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"link\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint192\",\"name\":\"cumulative\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"observationsLength\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingUpkeepParamHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"contract ERC4626\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ERC4626SharePriceOracle", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005195222f69c5821f8095ec565e71e18ab6a2298f00000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000546000000000000000000000000000000000000000000000000000000000000000060000000000000000000000006593c7de001fc8542bb1703532ee1e5aa0d458fd0000000000000000000000006b0b234fb2f380309d47a7e9391e29e9a179395a000000000000000000000000eef7b7205caf2bcd71437d9acde3874c3388c138000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000004e20", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}