// SPDX-FileCopyrightText: Â© Courtyard Inc. (https://courtyard.io)
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";

/**
 * @author The Courtyard Team
 * @title {Checkout} allows generic checkouts using either the native cryptocurrency of the underlying blockchain
 * ex: ETH for Ethereum) or ERC20 tokens (ex: USDC, WETH, WBTC...) to pay for something.
 * 
 * It works as follows:
 * 
 *  1. A user starts the checkout process in a front-end application off-chain and is ready to pay using the native
 *     currency or one of the ERC20 tokens that are accepted for payment.
 * 
 *  2. Upon receiving a checkout request, a back-end service would typically generate a {signature} containing the
 *     following information:
 * 
 *      - {operatingContract}: the address of the appropriate checkout contract.
 *      - {checkoutId}: a unique identifier for that checkout. The {checkoutId} is used to guarantee that each checkout
 *        would not be processed multiple times accidentally.
 *      - {authorizedPayer}: the account (i.e. address) that will be given the autorization to pay.
 *      - {paymentToken}: the address of the ERC20 token used for payment, or address(0) if the native currency is used.
 *      - {paymentValue}: a uint256 representing the payment value in the smallest unit of the associated currency.
 *        Note that all currencies are not equal: for example ETH has 18 decimals while USDC only has 6.
 *        The appropriate uint256 value must be correctly generated by the caller of the checkout contract beforehand.
 *      - {expirationTimestamp}: timestamp in seconds from epoch after which the checkout cannot be completed anymore.
 *      - {postCheckoutCallData}: the input bytes used to call a {_postCheckoutAction} function immediately after the
 *        checkout has been processed. This is used when an on-chain action needs to happen post-checkout.
 * 
 *  4. The backend sends the signed data along with {signature} back to the front-end application so the transaction
 *     can be executed.
 * 
 *  5. On the front end:
 * 
 *      - (optional, if the payment is to be executed with an ERC20 token): the user is first prompted to approve the
 *        appropriate token allowance to the checkout contract (this does not happen for a native currency checkout).
 *      - The user is then prompted to sign the checkout transaction.
 * 
 *  6. During the on-chain transaction:
 * 
 *      - If everything is in order according to the checkout contract processing the request, the funds are withdrawn
 *        and sent to a receiver wallet.
 *      - Then the {_postCheckoutAction} function is executed before returning. A child contract can implement it
 *        however it sees fit. For example, a minter contract could mint a token at the end of the checkout.
 *      - Finally, the {checkoutId} is marked as processed and a {CheckoutSuccess} event is emitted.
 *  
 *  7. The user now has a successful transaction hash that is a "proof of payment" that can be used to retrieve the 
 *    full transaction result on a block explorer, containing all the information relevant to the checkout, including
 *    the emitted events. This is alike a transaction receipt.
 */
abstract contract Checkout is Pausable, Ownable, ReentrancyGuard {

    using SafeERC20 for IERC20;

    event PaymentReceiverUpdated(address indexed oldAddress, address indexed newAddress);
    event CheckoutOracleUpdated(address indexed oldAddress, address indexed newAddress);
    event PaymentProcessed(address indexed from, address indexed to, address indexed token, uint256 amount);
    event CheckoutSuccess(address indexed caller, string checkoutId);

    /**
     * @dev using a struct to encapsulate all the data that is used to encode a checkout signature.
     */
    struct CheckoutRequest {
        address operatingContract;      // the contract that is supposed to process the given request.
        string checkoutId;              // the id of the checkout.
        address authorizedPayer;        // the account that is authorized to complete this checkout.
        address paymentToken;           // address(0) for the native cryptocurrency (ex: ETH for Ethereum).
        uint256 paymentValue;           // the payment value in the smallest unit of the associated currency.
        uint256 expirationTimestamp;    // expiration timestamp of the request.
        bytes postCheckoutCallData;     // encoded input data to the post-checkout action. Can be empty.
    }

    address public paymentReceiver;         // the account that will be transferred the payments.
    address public checkoutOracle;          // the account that delivers signed messages to enable checkouts.
    mapping(bytes32 => bool) processed;     // mapping of all the checkouts that were processed to avoid duplicate charges.

    /**
     * @dev modifier to ensure the input address is the non null address.
     * @param addr the address to verify as non null.
     */
    modifier nonNullAddress(address addr) {
        require(addr != address(0), "Checkout: Non null address required.");
        _;
    }


    /* ========================================== CONSTRUCTOR AND SETTERS ========================================== */

    /**
     * @dev constructor.
     * @param paymentReceiver_ the address of the payment receiver account.
     * @param checkoutOracle_ the address of the checkout oracle account.
     */
    constructor(
        address paymentReceiver_,
        address checkoutOracle_
    ) Ownable() nonNullAddress(paymentReceiver_) nonNullAddress(checkoutOracle_) {
        paymentReceiver = paymentReceiver_;
        checkoutOracle = checkoutOracle_;
    }

    /**
     * @dev update the payment receiver address.
     * @param newReceiver the address of the new payment receiver account.
     * 
     * Requirements:
     * 
     *      - {newReceiver} cannot be the null address.
     */
    function updatePaymentReceiver(address newReceiver) public onlyOwner nonNullAddress(newReceiver) {
        address oldReceiver = paymentReceiver;
        paymentReceiver = newReceiver;
        emit PaymentReceiverUpdated(oldReceiver, paymentReceiver);
    }

    /**
     * @dev update the checkout oracle address.
     * @param newOracle the address of the new checkout oracle account.
     * 
     * Requirements:
     * 
     *      - {newOracle} cannot be the null address.
     */
    function updateCheckoutOracle(address newOracle) public onlyOwner nonNullAddress(newOracle) {
        address oldOracle = checkoutOracle;
        checkoutOracle = newOracle;
        emit CheckoutOracleUpdated(oldOracle, checkoutOracle);
    }


    /* ============================================= PAUSABLE HELPERS ============================================= */

    /**
     * @dev pause the contract
     * 
     * Requirements:
     * 
     *      - Only the owner of the contract can pause it. 
     */
    function pause() public onlyOwner {
        _pause();
    }

    /**
     * @dev unpause the contract
     * 
     * Requirements:
     * 
     *      - Only the owner of the contract can unpause it. 
     */
    function unpause() public onlyOwner {
        _unpause();
    }


    /* ========================================= CHECKOUT REQUEST HELPERS ========================================= */

    /**
     * @dev helper to encode a checkout hash for both {encodeErc20CheckoutRequest} and {encodeNativeCheckoutRequest}.
     * @param checkoutId the checkout id.
     * @param authorizedPayer the account that is authorized to complete this checkout.
     * @param paymentToken the address of the payment token, or address(0) for the native cryptocurrency.
     * @param paymentValue the payment value in the smallest unit of the associated currency
     * @param expirationTimestamp the expiration timestamp after which this checkout request is no longer valid.
     * @param postCheckoutCallData the input for {_postCheckoutAction}.
     * @return the encoded checkout request as bytes, ready to be signed by the checkout oracle.
     */
    function _encodeCheckoutRequest(
        string memory checkoutId,
        address authorizedPayer,
        address paymentToken,
        uint256 paymentValue,
        uint256 expirationTimestamp,
        bytes calldata postCheckoutCallData
    ) private view returns (bytes memory) {
        return abi.encode(
            CheckoutRequest(
                address(this),
                checkoutId,
                authorizedPayer,
                paymentToken,
                paymentValue,
                expirationTimestamp,
                postCheckoutCallData
            )
        );  
    }

    /**
     * @dev modifier to ensure that a checkout request signature is valid.
     * @param requestData the checkout request as bytes.
     * @param signature the signature block of {requestData}, signed by teh checkout oracle.
     */
    modifier onlyValidSignature(
        bytes memory requestData,
        bytes memory signature
    ) {
        bytes32 expectedSignedMessage = ECDSA.toEthSignedMessageHash(requestData);
        require(ECDSA.recover(expectedSignedMessage, signature) == checkoutOracle, "Checkout: Invalid signature.");
        _;
    }

    /**
     * @dev helper to check the eligibility of a checkout request.
     * @param request the checkout request data as bytes.
     * 
     * Requirements:
     * 
     *      - {request.operatingContract} must be this contract.
     *      - {caller} must be {request.authorizedPayer}, i.e. the account authorized to complete this checkout.
     *      - {request.checkoutId} must not have been marked as processed.
     *      - {request.expirationTimestamp} must not have passed. 
     */
    function _checkEligibility(address caller, CheckoutRequest memory request) private view {
        require(request.operatingContract == address(this), "Checkout: Contract is not authorized to process this request.");
        require(caller == request.authorizedPayer, "Checkout: Caller is not authorized to complete this checkout.");
        require(!exists(request.checkoutId), "Checkout: Checkout with checkoutId was already processed.");
        require(request.expirationTimestamp >= block.timestamp, "Checkout: Checkout time window has expired.");
    }


    /* ============================================ CHECKOUT ID HELPERS ============================================ */

    /**
     * @dev helper to compute the hash of a {checkoutId}.
     * @param checkoutId the checkout id.
     * @return a keccak256 hash of the checkout id.
     */
    function _checkoutIdHash(string memory checkoutId) private pure returns (bytes32) {
        return keccak256(abi.encode(checkoutId));
    }

    /**
     * @dev helper to check if a checkoutId exists, i.e. if the checkout for that id was completed.
     * @param checkoutId the checkout id.
     * @return true if {checkoutId} has been processed, false otherwise.
     */
    function exists(string memory checkoutId) public view returns (bool) {
        return processed[_checkoutIdHash(checkoutId)];
    }


    /* ============================================== ERC20 CHECKOUT ============================================== */

    /**
     * @dev creates and encode a {CheckoutRequest} for a checkout to be paid using an ERC20 token.
     * The {CheckoutRequest} is returned in an encoded form (bytes) and must be signed by the {checkoutOracle} to
     * authorize a checkout. That signature is then fed to {erc20Checkout} along with the encoded {CheckoutRequest} 
     * to be validated before proceeding with the checkout.
     * @param checkoutId the checkout id.
     * @param authorizedPayer the account that is authorized to complete this checkout.
     * @param paymentToken the address of the payment token, or address(0) for the native cryptocurrency.
     * @param paymentValue the payment value in the smallest unit of the associated currency
     * @param expirationTimestamp the expiration timestamp after which this checkout request is no longer valid.
     * @param postCheckoutCallData the input for {_postCheckoutAction}.
     * @return the encoded checkout request as bytes, ready to be signed by the checkout oracle.
     *
     * Notes:
     * 
     *      - A {Checkout} implementation should define its own helper to generate {postCheckoutCallData}.
     *      - The returned encoded {CheckoutRequest} needs to be signed by {checkoutOracle} to be valid.
     *      - If {data} is the result of this function, checkoutOracleAccount.signMessage(ethers.utils.arrayify(data))
     *        must be called in order to properly encode the hash before signing it.
     */
    function encodeErc20CheckoutRequest(
        string calldata checkoutId,
        address authorizedPayer,
        address paymentToken,
        uint256 paymentValue,
        uint256 expirationTimestamp,
        bytes calldata postCheckoutCallData
    ) public view returns (bytes memory) {
        return _encodeCheckoutRequest(checkoutId, authorizedPayer, paymentToken, paymentValue, expirationTimestamp, postCheckoutCallData);
    }

    /**
     * @dev checkout with an ERC20 token.
     * @param requestData the checkout request as bytes.
     * @param signature the signature block of {requestData}, signed by teh checkout oracle.
     */
    function erc20Checkout(
        bytes calldata requestData,
        bytes calldata signature
    ) external nonReentrant whenNotPaused onlyValidSignature(requestData, signature) {
        CheckoutRequest memory request = abi.decode(requestData, (CheckoutRequest));
        address caller = _msgSender();
        _checkEligibility(caller, request);
        require(request.paymentToken != address(0), "Checkout: Wrong call - use nativeCheckout() to pay with the native cryptocurrency.");
        IERC20(request.paymentToken).safeTransferFrom(caller, paymentReceiver, request.paymentValue);
        emit PaymentProcessed(caller, paymentReceiver, request.paymentToken, request.paymentValue);
        _wrapUp(caller, request.checkoutId, request.postCheckoutCallData);
    }


    /* ============================================== NATIVE CHECKOUT ============================================== */

    /**
     * @dev creates and encode a {CheckoutRequest} for a checkout to be paid using a native cryptocurrency.
     * The {CheckoutRequest} is returned in an encoded form (bytes) and must be signed by the {checkoutOracle} to
     * authorize a checkout. That signature then is fed to {erc20Checkout} along with the encoded {CheckoutRequest} 
     * to be validated before proceeding with the checkout.
     * @param checkoutId the checkout id.
     * @param authorizedPayer the account that is authorized to complete this checkout.
     * @param paymentValue the payment value in the smallest unit of the associated currency
     * @param expirationTimestamp the expiration timestamp after which this checkout request is no longer valid.
     * @param postCheckoutCallData the input for {_postCheckoutAction}.
     * @return the encoded checkout request as bytes, ready to be signed by the checkout oracle.
     * 
     * Notes:
     *
     *      - A {Checkout} implementation should define its own helper to generate {postCheckoutCallData}.
     *      - The returned encoded {CheckoutRequest} needs to be signed by {checkoutOracle} to be valid.
     *      - If {data} is the result of this function, checkoutOracleAccount.signMessage(ethers.utils.arrayify(data))
     *        must be called in order to properly encode the hash before signing it.
     *      - Calling this function externally is the same as calling encodeErc20CheckoutRequest with address(0) as
     *        the {paymentToken}. This is not a bug, just an incidental feature.
     */
    function encodeNativeCheckoutRequest(
        string calldata checkoutId,
        address authorizedPayer,
        uint256 paymentValue,
        uint256 expirationTimestamp,
        bytes calldata postCheckoutCallData
    ) public view returns (bytes memory) {
        return _encodeCheckoutRequest(checkoutId, authorizedPayer, address(0), paymentValue, expirationTimestamp, postCheckoutCallData);
    }

    /**
     * @dev checkout with the native cryptocurrency (ex: ETH for Ethereum).
     * @param requestData the checkout request as bytes.
     * @param signature the signature block of {requestData}, signed by teh checkout oracle.
     * 
     * Notes:
     * 
     *      - We could have chosen to send a refund if the user sends too much funds, but because we expect the funds
     *        to match exactly what is requested via the signature and we do not expect users to call the contract
     *        directly on their own, not sending the exact required funds will always result in a failure.
     */
    function nativeCheckout(
        bytes calldata requestData,
        bytes calldata signature
    ) external payable nonReentrant whenNotPaused onlyValidSignature(requestData, signature) {
        CheckoutRequest memory request = abi.decode(requestData, (CheckoutRequest));
        address caller = _msgSender();
        _checkEligibility(caller, request);
        require(request.paymentToken == address(0), "Checkout: Wrong call - use erc20Checkout() to pay with an ERC20 token.");
        require(msg.value == request.paymentValue, "Checkout: Unexpected payment value received.");
        payable(paymentReceiver).transfer(msg.value);
        emit PaymentProcessed(caller, paymentReceiver, request.paymentToken, request.paymentValue);
        _wrapUp(caller, request.checkoutId, request.postCheckoutCallData);
    }


    /* ================================================== WRAP UP ================================================== */

    /**
     * @dev wrap up the checkout by calling {_postCheckoutAction} and marking the checkout as processed.
     * @param caller the account that is checking out.
     * @param checkoutId the checkout id.
     * @param postCheckoutCallData the input to {_postCheckoutAction}. 
     */
    function _wrapUp(address caller, string memory checkoutId, bytes memory postCheckoutCallData) private {
        _postCheckoutAction(checkoutId, postCheckoutCallData);
        processed[_checkoutIdHash(checkoutId)] = true;
        emit CheckoutSuccess(caller, checkoutId);
    }

    /**
     * @dev a post-checkout function that is called at the end of {erc20Checkout} or {nativeCheckout}.
     * @param checkoutId the checkout id.
     * @param data the encoded input data to the post-checkout action.
     * 
     * Notes:
     * 
     *      - This paradigm gives some flexibility for a child contract to implement their own post-checkout logic.
     *        For example, a minting contract could mint a token immediately after a successful check out, or call an
     *        external contract to perform an action.
     *      - The input argument {data} may need to be decoded before being used by a child contract.
     *      - If nothing needs to happen post-checkout, this function can simply be implemented with an empty body.
     */
     function _postCheckoutAction(string memory checkoutId, bytes memory data) internal virtual;

}