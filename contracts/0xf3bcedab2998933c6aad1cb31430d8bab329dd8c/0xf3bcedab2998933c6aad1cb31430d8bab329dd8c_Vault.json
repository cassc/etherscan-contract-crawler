{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.18;\\n\\nimport {VerifiableAddressArray} from \\\"src/lib/VArray.sol\\\";\\nimport {IVault} from \\\"src/interfaces/IVault.sol\\\";\\nimport {TokenInfo} from \\\"src/Common.sol\\\";\\nimport {IIndexToken} from \\\"src/interfaces/IIndexToken.sol\\\";\\nimport {SCALAR, fdiv, fmul, finv} from \\\"./lib/FixedPoint.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\n\\ncontract Vault is Ownable2Step, IVault {\\n    using VerifiableAddressArray for VerifiableAddressArray.VerifiableArray;\\n    using SafeERC20 for IERC20;\\n\\n    IIndexToken public immutable indexToken;\\n\\n    bool public emergency;\\n\\n    address public issuance;\\n    address public rebalancer;\\n    address public feeRecipient;\\n    address public emergencyResponder;\\n\\n    uint256 public inflationRate;\\n\\n    uint256 public lastKnownTimestamp;\\n\\n    VerifiableAddressArray.VerifiableArray internal _underlying;\\n    mapping(address => uint256) internal _nominals;\\n\\n    ///////////////////////// MODIFIERS / CONSTRUCTOR /////////////////////////\\n\\n    modifier onlyInvokers() {\\n        if (msg.sender != issuance && msg.sender != rebalancer) {\\n            revert AMKTVaultOnlyInvokers();\\n        }\\n        _;\\n    }\\n\\n    modifier only(address who) {\\n        if (msg.sender != who) {\\n            revert AMKTVaultOnly(who);\\n        }\\n        _;\\n    }\\n\\n    modifier whenNotEmergency() {\\n        if (emergency) {\\n            revert AMKTVaultEmergency();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Constructor\\n    /// @param _indexToken The index token address\\n    /// @param _owner The owner of the vault\\n    /// @param _feeRecipient The recipient of the fee\\n    /// @param _emergencyResponder The emergency responder, can set emergency flag\\n    /// @param _inflationRate The per second inflation rate\\n    constructor(\\n        IIndexToken _indexToken,\\n        address _owner,\\n        address _feeRecipient,\\n        address _emergencyResponder,\\n        uint256 _inflationRate\\n    ) {\\n        if (_owner == address(0)) revert VaultZeroCheck();\\n        if (_feeRecipient == address(0)) revert VaultZeroCheck();\\n        if (_emergencyResponder == address(0)) revert VaultZeroCheck();\\n        if (_inflationRate > SCALAR) {\\n            revert AMKTVaultInflationRateTooLarge();\\n        }\\n\\n        indexToken = _indexToken;\\n\\n        _transferOwnership(_owner);\\n\\n        emergencyResponder = _emergencyResponder;\\n\\n        feeRecipient = _feeRecipient;\\n        inflationRate = _inflationRate;\\n\\n        lastKnownTimestamp = block.timestamp;\\n    }\\n\\n    ///////////////////////// CONFIG /////////////////////////\\n\\n    /// @notice Set the issuance module for the vault\\n    /// @param _issuance The issuance module address\\n    /// @dev only owner\\n    function setIssuance(address _issuance) external only(owner()) {\\n        if (_issuance == address(0)) revert VaultZeroCheck();\\n        issuance = _issuance;\\n        emit VaultIssuanceSet(_issuance);\\n    }\\n\\n    /// @notice Set the rebalancer module for the vault\\n    /// @param _rebalancer The rebalancer module address\\n    /// @dev only owner\\n    function setRebalancer(address _rebalancer) external only(owner()) {\\n        if (_rebalancer == address(0)) revert VaultZeroCheck();\\n        rebalancer = _rebalancer;\\n        emit VaultRebalancerSet(_rebalancer);\\n    }\\n\\n    /// @notice Set the fee recipient\\n    /// @param _feeRecipient The fee recipient address\\n    /// @dev only owner\\n    function setFeeRecipient(address _feeRecipient) external only(owner()) {\\n        if (_feeRecipient == address(0)) revert VaultZeroCheck();\\n        feeRecipient = _feeRecipient;\\n        emit VaultFeeRecipientSet(_feeRecipient);\\n    }\\n\\n    /// @notice Set the emergency responder\\n    /// @param _emergencyResponder The emergency responder address\\n    /// @dev only owner\\n    function setEmergencyResponder(\\n        address _emergencyResponder\\n    ) external only(owner()) {\\n        if (_emergencyResponder == address(0)) revert VaultZeroCheck();\\n        emergencyResponder = _emergencyResponder;\\n        emit VaultEmergencyResponderSet(_emergencyResponder);\\n    }\\n\\n    /// @notice Set the inflation rate\\n    /// @param _inflationRate The per second inflation rate\\n    /// @dev only owner & accrues inflation\\n    function setInflationRate(uint256 _inflationRate) external only(owner()) {\\n        if (_inflationRate > SCALAR) {\\n            revert AMKTVaultInflationRateTooLarge();\\n        }\\n        inflationRate = _inflationRate;\\n        emit VaultInflationRateSet(_inflationRate);\\n    }\\n\\n    /// @notice Set the emergency flag\\n    /// @param _emergency The emergency flag\\n    /// @dev only emergency responder\\n    function setEmergency(bool _emergency) external only(emergencyResponder) {\\n        emergency = _emergency;\\n        emit VaultEmergencySet(_emergency);\\n    }\\n\\n    ///////////////////////// INFLATION /////////////////////////\\n\\n    /// @notice Try to accrue inflation\\n    function tryInflation() external only(feeRecipient) {\\n        if (block.timestamp < lastKnownTimestamp + 1 days)\\n            revert AMKTVaultFeeTooEarly();\\n        uint256 startingSupply = indexToken.totalSupply();\\n        uint256 timestampDiff = block.timestamp - lastKnownTimestamp;\\n        uint256 inflation = fmul(startingSupply, timestampDiff * inflationRate);\\n        if (inflation == 0) revert AMKTVaultFeeTooSmall();\\n\\n        lastKnownTimestamp = block.timestamp;\\n\\n        uint256 valueMultiplier = fdiv(\\n            startingSupply,\\n            startingSupply + inflation\\n        );\\n\\n        TokenInfo[] memory tokens = virtualUnits();\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _setNominal(\\n                SetNominalArgs({\\n                    token: tokens[i].token,\\n                    virtualUnits: fmul(tokens[i].units, valueMultiplier)\\n                })\\n            );\\n        }\\n\\n        indexToken.mint(feeRecipient, inflation);\\n        invariantCheck();\\n        emit VaultFeeMinted(feeRecipient, inflation);\\n    }\\n\\n    ///////////////////////// INVOKE /////////////////////////\\n\\n    /// @notice Set the nominal units of more than one token\\n    /// @param args The SetNominalArgs[]\\n    /// @dev only rebalancer\\n    function invokeSetNominals(\\n        SetNominalArgs[] calldata args\\n    ) external whenNotEmergency only(rebalancer) {\\n        for (uint256 i; i < args.length; i++) {\\n            _setNominal(args[i]);\\n        }\\n    }\\n\\n    /// @notice Invoke ERC20 transfers\\n    /// @param args The InvokeERC20Args[]\\n    /// @dev only invokers\\n    function invokeERC20s(\\n        InvokeERC20Args[] calldata args\\n    ) external onlyInvokers {\\n        for (uint256 i; i < args.length; i++) {\\n            _transferERC20(args[i]);\\n        }\\n    }\\n\\n    /// @notice Mint index tokens\\n    /// @param to The recipient of the index tokens\\n    /// @param amount The amount of index tokens to mint\\n    /// @dev only issuance\\n    function invokeMint(\\n        address to,\\n        uint256 amount\\n    ) external whenNotEmergency only(issuance) {\\n        indexToken.mint(to, amount);\\n    }\\n\\n    /// @notice Burn index tokens\\n    /// @param from The owner of the index tokens\\n    /// @param amount The amount of index tokens to burn\\n    /// @dev only issuance\\n    function invokeBurn(address from, uint256 amount) external only(issuance) {\\n        indexToken.burn(from, amount);\\n    }\\n\\n    ///////////////////////// VIEW ////////////////////////\\n\\n    /// @notice Returns the underlying tokens\\n    /// @return address[] memory of underlying tokens with nominal units > 0\\n    function underlying() external view returns (address[] memory) {\\n        return _underlying.toMemoryArray();\\n    }\\n\\n    /// @notice Returns the underlying tokens and their nominal units\\n    /// @return the number of tokens backing the index\\n    function underlyingLength() external view returns (uint256) {\\n        return _underlying.size();\\n    }\\n\\n    /// @notice Returns true if the token is an underlying\\n    /// @param _token address\\n    /// @return bool true if underlying\\n    function isUnderlying(address _token) public view returns (bool) {\\n        return _underlying.includes(_token);\\n    }\\n\\n    /// @notice Returns the virtual units of a token\\n    /// @dev warning! does not revert on non-underlying token\\n    /// @param token address\\n    /// @return uint256\\n    function virtualUnits(address token) public view returns (uint256) {\\n        return _nominals[token];\\n    }\\n\\n    /// @notice Returns the virtual units of all tokens\\n    /// @return TokenInfo[] memory\\n    function virtualUnits() public view returns (TokenInfo[] memory) {\\n        address[] storage stor = _underlying.toStorageArray();\\n        uint256 len = stor.length;\\n\\n        TokenInfo[] memory info = new TokenInfo[](len);\\n\\n        for (uint256 i; i < len; i++) {\\n            address token = stor[i];\\n            info[i] = TokenInfo({token: token, units: _nominals[token]});\\n        }\\n\\n        return info;\\n    }\\n\\n    /// @notice Checks that the vault is in a valid state\\n    /// @notice i.e. we can wind down to 0 safely\\n    /// @notice reverts if the check fails\\n    function invariantCheck() public view {\\n        TokenInfo[] memory tokens = virtualUnits();\\n\\n        for (uint256 i; i < tokens.length; ) {\\n            uint256 expectedAmount = fmul(\\n                tokens[i].units,\\n                indexToken.totalSupply()\\n            );\\n            if (\\n                IERC20(tokens[i].token).balanceOf(address(this)) <\\n                expectedAmount\\n            ) revert VaultInvariant();\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    ///////////////////////// INTERNAL /////////////////////////\\n\\n    function _setNominal(SetNominalArgs memory args) internal {\\n        address token = args.token;\\n        uint256 _virtualUnits = args.virtualUnits;\\n\\n        if (_virtualUnits == 0) {\\n            delete _nominals[token];\\n            _underlying.remove(token);\\n            return;\\n        }\\n\\n        if (!isUnderlying(token)) {\\n            _underlying.add(token);\\n        }\\n\\n        _nominals[token] = _virtualUnits;\\n    }\\n\\n    function _transferERC20(InvokeERC20Args memory args) internal {\\n        IERC20(args.token).safeTransfer(args.to, args.amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/VArray.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.18;\\n\\n/// O(1) insertion / deletion to an array\\n/// can also check inclusion\\nlibrary VerifiableAddressArray {\\n    struct VerifiableArray {\\n        address[] elements;\\n        mapping(address => uint256) indexOf;\\n        // use an additional SSTORE to save a SLOAD at user runtime\\n        mapping(address => bool) included;\\n    }\\n\\n    function size(VerifiableArray storage arr) internal view returns (uint256) {\\n        return arr.elements.length;\\n    }\\n\\n    function add(VerifiableArray storage arr, address element) internal {\\n        if (includes(arr, element)) {\\n            revert(\\\"VerifiableArray: element already exists\\\");\\n        } else {\\n            arr.included[element] = true;\\n            arr.indexOf[element] = arr.elements.length;\\n            arr.elements.push(element);\\n        }\\n    }\\n\\n    function remove(VerifiableArray storage arr, address element) internal {\\n        if (!includes(arr, element)) {\\n            revert(\\\"VerifiableArray: element not found\\\");\\n        }\\n\\n        uint256 _size = size(arr);\\n\\n        if (_size == 1) {\\n            delete arr.included[element];\\n            delete arr.indexOf[element];\\n            arr.elements.pop();\\n            return;\\n        }\\n\\n        uint index = arr.indexOf[element];\\n        address lastElement = arr.elements[_size - 1];\\n\\n        arr.indexOf[lastElement] = index;\\n\\n        delete arr.included[element];\\n        delete arr.indexOf[element];\\n\\n        arr.elements[index] = lastElement;\\n        arr.elements.pop();\\n    }\\n\\n    function includes(\\n        VerifiableArray storage arr,\\n        address element\\n    ) internal view returns (bool) {\\n        return arr.included[element];\\n    }\\n\\n    function toStorageArray(\\n        VerifiableArray storage arr\\n    ) internal view returns (address[] storage) {\\n        return arr.elements;\\n    }\\n\\n    function toMemoryArray(\\n        VerifiableArray storage arr\\n    ) internal view returns (address[] memory) {\\n        address[] storage stor = toStorageArray(arr);\\n        uint256 len = stor.length;\\n\\n        address[] memory mem = new address[](len);\\n\\n        for (uint256 i; i < len; i++) {\\n            mem[i] = stor[i];\\n        }\\n\\n        return mem;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.18;\\n\\nimport {TokenInfo} from \\\"src/Common.sol\\\";\\nimport {IIndexToken} from \\\"src/interfaces/IIndexToken.sol\\\";\\n\\ninterface IVault {\\n    error AMKTVaultOnlyInvokers();\\n    error AMKTVaultOnly(address who);\\n    error AMKTVaultInflationRateTooLarge();\\n    error AMKTVaultFeeTooEarly();\\n    error AMKTVaultFeeTooSmall();\\n    error AMKTVaultEmergency();\\n    error VaultInvariant();\\n    error VaultZeroCheck();\\n\\n    event VaultIssuanceSet(address issuance);\\n    event VaultRebalancerSet(address rebalancer);\\n    event VaultFeeRecipientSet(address feeRecipient);\\n    event VaultEmergencyResponderSet(address emergencyResponder);\\n    event VaultInflationRateSet(uint256 inflationRate);\\n    event VaultEmergencySet(bool emergency);\\n    event VaultFeeMinted(address indexed to, uint256 amount);\\n\\n    struct InvokeERC20Args {\\n        address token;\\n        address to;\\n        uint256 amount;\\n    }\\n\\n    struct SetNominalArgs {\\n        address token;\\n        uint256 virtualUnits;\\n    }\\n\\n    function issuance() external view returns (address);\\n\\n    function rebalancer() external view returns (address);\\n\\n    function tryInflation() external;\\n\\n    function inflationRate() external view returns (uint256);\\n\\n    function feeRecipient() external view returns (address);\\n\\n    function lastKnownTimestamp() external view returns (uint256);\\n\\n    function invokeERC20s(InvokeERC20Args[] calldata args) external;\\n\\n    function invokeSetNominals(SetNominalArgs[] calldata args) external;\\n\\n    function virtualUnits(address token) external view returns (uint256);\\n\\n    function virtualUnits() external view returns (TokenInfo[] memory);\\n\\n    function invariantCheck() external view;\\n\\n    function isUnderlying(address target) external view returns (bool);\\n\\n    function underlying() external view returns (address[] memory);\\n\\n    function underlyingLength() external view returns (uint256);\\n\\n    function invokeMint(address to, uint256 amount) external;\\n\\n    function invokeBurn(address from, uint256 amount) external;\\n\\n    function indexToken() external view returns (IIndexToken);\\n}\\n\"\r\n    },\r\n    \"src/Common.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.18;\\n\\nstruct TokenInfo {\\n    address token;\\n    uint256 units;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IIndexToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.18;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\\\";\\n\\ninterface IIndexToken is IERC20Upgradeable {\\n    event MinterSet(address indexed minter);\\n\\n    ///=============================================================================================\\n    /// Initializer\\n    ///=============================================================================================\\n\\n    function initialize(address _minter) external;\\n\\n    ///=============================================================================================\\n    /// State\\n    ///=============================================================================================\\n\\n    function minter() external view returns (address);\\n\\n    ///=============================================================================================\\n    /// Mint Logic\\n    ///=============================================================================================\\n\\n    /// @notice External mint function\\n    /// @dev Mint function can only be called externally by the controller\\n    /// @param to address\\n    /// @param amount uint256\\n    function mint(address to, uint256 amount) external;\\n\\n    /// @notice External burn function\\n    /// @dev burn function can only be called externally by the controller\\n    /// @param from address\\n    /// @param amount uint256\\n    function burn(address from, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"src/lib/FixedPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.18;\\n\\nuint256 constant SCALAR = 1e18;\\n\\nfunction fmul(uint256 a, uint256 b) pure returns (uint256 ret) {\\n    ret = (a * b) / SCALAR;\\n}\\n\\nfunction fdiv(uint256 a, uint256 b) pure returns (uint256 ret) {\\n    ret = (a * SCALAR) / b;\\n}\\n\\nfunction finv(uint256 a) pure returns (uint256 ret) {\\n    ret = fdiv(SCALAR, a);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"src/=src/\",\r\n      \"test/=test/\",\r\n      \"invoke-modules/=src/invoke/\",\r\n      \"core-libs/=src/lib/\",\r\n      \"core-test/=test/core/\",\r\n      \"mocks/=test/mocks/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"halmost-cheatcodes/=lib/halmos-cheatcodes/src/\",\r\n      \"halmos-cheatcodes/=lib/halmos-cheatcodes/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IIndexToken\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_emergencyResponder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inflationRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AMKTVaultEmergency\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AMKTVaultFeeTooEarly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AMKTVaultFeeTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AMKTVaultInflationRateTooLarge\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"AMKTVaultOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AMKTVaultOnlyInvokers\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultInvariant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultZeroCheck\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"emergencyResponder\",\"type\":\"address\"}],\"name\":\"VaultEmergencyResponderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"emergency\",\"type\":\"bool\"}],\"name\":\"VaultEmergencySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VaultFeeMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"VaultFeeRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inflationRate\",\"type\":\"uint256\"}],\"name\":\"VaultInflationRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuance\",\"type\":\"address\"}],\"name\":\"VaultIssuanceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rebalancer\",\"type\":\"address\"}],\"name\":\"VaultRebalancerSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyResponder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexToken\",\"outputs\":[{\"internalType\":\"contract IIndexToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invariantCheck\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"invokeBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.InvokeERC20Args[]\",\"name\":\"args\",\"type\":\"tuple[]\"}],\"name\":\"invokeERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"invokeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"virtualUnits\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.SetNominalArgs[]\",\"name\":\"args\",\"type\":\"tuple[]\"}],\"name\":\"invokeSetNominals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastKnownTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_emergency\",\"type\":\"bool\"}],\"name\":\"setEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_emergencyResponder\",\"type\":\"address\"}],\"name\":\"setEmergencyResponder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inflationRate\",\"type\":\"uint256\"}],\"name\":\"setInflationRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuance\",\"type\":\"address\"}],\"name\":\"setIssuance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rebalancer\",\"type\":\"address\"}],\"name\":\"setRebalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tryInflation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"virtualUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"virtualUnits\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Vault", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f17a3fe536f8f7847f1385ec1bc967b2ca9cae8d00000000000000000000000091f23057ee6e2d1e1ba00a7c1d71ba1a0b2c3113000000000000000000000000c19a5b6e0a923519603985153515222d59cb3f2e000000000000000000000000aeb9ef94b6542be7112f3a295646b5aaaa9fca130000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}