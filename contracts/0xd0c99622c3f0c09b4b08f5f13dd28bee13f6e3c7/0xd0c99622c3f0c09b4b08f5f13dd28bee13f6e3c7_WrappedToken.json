{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\ninterface Callable {\r\n\tfunction tokenCallback(address _from, uint256 _tokens, bytes calldata _data) external returns (bool);\r\n}\r\n\r\ninterface Bridge {\r\n\tfunction depositFor(address _user, address _rootToken, bytes calldata _depositData) external;\r\n}\r\n\r\ninterface Router {\r\n\tfunction WETH() external pure returns (address);\r\n\tfunction factory() external pure returns (address);\r\n}\r\n\r\ninterface Factory {\r\n\tfunction createPair(address, address) external returns (address);\r\n}\r\n\r\ninterface Pair {\r\n\tfunction token0() external view returns (address);\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction balanceOf(address) external view returns (uint256);\r\n\tfunction getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface WhalesGame {\r\n\tfunction krillAddress() external view returns (address);\r\n\tfunction stakingRewardsAddress() external view returns (address);\r\n\tfunction getIsWhale(uint256) external view returns (bool);\r\n\tfunction balanceOf(address) external view returns (uint256);\r\n\tfunction ownerOf(uint256) external view returns (address);\r\n\tfunction fishermenOf(address) external view returns (uint256);\r\n\tfunction whalesOf(address) external view returns (uint256);\r\n\tfunction isApprovedForAll(address, address) external view returns (bool);\r\n\tfunction transferFrom(address, address, uint256) external;\r\n\tfunction claim() external;\r\n}\r\n\r\ninterface KRILL {\r\n\tfunction allowance(address, address) external view returns (uint256);\r\n\tfunction balanceOf(address) external view returns (uint256);\r\n\tfunction approve(address, uint256) external returns (bool);\r\n\tfunction transfer(address, uint256) external returns (bool);\r\n\tfunction transferFrom(address, address, uint256) external returns (bool);\r\n\tfunction burn(uint256) external;\r\n}\r\n\r\ncontract WrappedToken {\r\n\r\n\tuint256 constant private UINT_MAX = type(uint256).max;\r\n\tuint256 constant private FLOAT_SCALAR = 2**64;\r\n\taddress constant private POLYGON_ERC20_BRIDGE = 0x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf;\r\n\r\n\tuint8 constant public decimals = 18;\r\n\r\n\tstruct User {\r\n\t\tuint256 balance;\r\n\t\tmapping(address => uint256) allowance;\r\n\t\tint256 scaledPayout;\r\n\t}\r\n\r\n\tstruct Info {\r\n\t\tuint256 totalSupply;\r\n\t\tuint256 scaledRewardsPerToken;\r\n\t\tuint256 pendingRewards;\r\n\t\tmapping(address => User) users;\r\n\t\tmapping(address => bool) rewardBurn;\r\n\t\taddress burnDestination;\r\n\t\taddress owner;\r\n\t\tbool isBridged;\r\n\t\tBridge bridge;\r\n\t\tRouter router;\r\n\t\tPair pair;\r\n\t\tbool weth0;\r\n\t\tbool isWhale;\r\n\t\tWhalesGame wg;\r\n\t\tKRILL krill;\r\n\t}\r\n\tInfo private info;\r\n\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 tokens);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 tokens);\r\n\tevent Claim(address indexed user, uint256 amount);\r\n\tevent Reward(uint256 amount);\r\n\r\n\r\n\tmodifier _onlyOwner() {\r\n\t\trequire(msg.sender == owner());\r\n\t\t_;\r\n\t}\r\n\r\n\r\n\tconstructor(WhalesGame _wg, bool _isWhale) {\r\n\t\tinfo.isBridged = false;\r\n\t\tinfo.bridge = Bridge(0xA0c68C638235ee32657e8f720a23ceC1bFc77C77);\r\n\t\tinfo.router = Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\t\tinfo.pair = Pair(Factory(info.router.factory()).createPair(info.router.WETH(), address(this)));\r\n\t\tinfo.weth0 = info.pair.token0() == info.router.WETH();\r\n\t\tinfo.wg = _wg;\r\n\t\tinfo.krill = KRILL(_wg.krillAddress());\r\n\t\tinfo.isWhale = _isWhale;\r\n\t\tinfo.owner = tx.origin;\r\n\t\tinfo.rewardBurn[address(this)] = true;\r\n\t\tinfo.rewardBurn[pairAddress()] = true;\r\n\t\tinfo.rewardBurn[POLYGON_ERC20_BRIDGE] = true;\r\n\t\tinfo.krill.approve(POLYGON_ERC20_BRIDGE, UINT_MAX);\r\n\t\tinfo.burnDestination = address(0x0);\r\n\t}\r\n\r\n\tfunction setOwner(address _owner) external _onlyOwner {\r\n\t\tinfo.owner = _owner;\r\n\t}\r\n\r\n\tfunction setIsBridged(bool _isBridged) external _onlyOwner {\r\n\t\tinfo.isBridged = _isBridged;\r\n\t}\r\n\r\n\tfunction setRewardBurn(address _user, bool _shouldBurn) external _onlyOwner {\r\n\t\tuint32 _size;\r\n\t\tassembly {\r\n\t\t\t_size := extcodesize(_user)\r\n\t\t}\r\n\t\trequire(_size > 0);\r\n\t\tinfo.rewardBurn[_user] = _shouldBurn;\r\n\t}\r\n\r\n\tfunction setBurnDestination(address _destination) external _onlyOwner {\r\n\t\tinfo.burnDestination = _destination;\r\n\t}\r\n\r\n\r\n\tfunction disburse(uint256 _amount) external {\r\n\t\tif (_amount > 0) {\r\n\t\t\taddress _this = address(this);\r\n\t\t\tuint256 _balanceBefore = info.krill.balanceOf(_this);\r\n\t\t\tinfo.krill.transferFrom(msg.sender, _this, _amount);\r\n\t\t\t_disburse(info.krill.balanceOf(_this) - _balanceBefore);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction wrap(uint256[] calldata _tokenIds) external {\r\n\t\tuint256 _count = _tokenIds.length;\r\n\t\trequire(_count > 0);\r\n\t\t_update();\r\n\t\tfor (uint256 i = 0; i < _count; i++) {\r\n\t\t\trequire(info.wg.getIsWhale(_tokenIds[i]) == info.isWhale);\r\n\t\t\tinfo.wg.transferFrom(msg.sender, address(this), _tokenIds[i]);\r\n\t\t}\r\n\t\tuint256 _amount = _count * 1e18;\r\n\t\tinfo.totalSupply += _amount;\r\n\t\tinfo.users[msg.sender].balance += _amount;\r\n\t\tinfo.users[msg.sender].scaledPayout += int256(_amount * info.scaledRewardsPerToken);\r\n\t\temit Transfer(address(0x0), msg.sender, _amount);\r\n\t}\r\n\r\n\tfunction unwrap(uint256[] calldata _tokenIds) external returns (uint256 totalUnwrapped) {\r\n\t\tuint256 _count = _tokenIds.length;\r\n\t\trequire(balanceOf(msg.sender) >= _count * 1e18);\r\n\t\t_update();\r\n\t\ttotalUnwrapped = 0;\r\n\t\tfor (uint256 i = 0; i < _count; i++) {\r\n\t\t\tif (info.wg.ownerOf(_tokenIds[i]) == address(this)) {\r\n\t\t\t\trequire(info.wg.getIsWhale(_tokenIds[i]) == info.isWhale);\r\n\t\t\t\tinfo.wg.transferFrom(address(this), msg.sender, _tokenIds[i]);\r\n\t\t\t\ttotalUnwrapped++;\r\n\t\t\t}\r\n\t\t}\r\n\t\trequire(totalUnwrapped > 0);\r\n\t\tuint256 _cost = totalUnwrapped * 1e18;\r\n\t\tinfo.totalSupply -= _cost;\r\n\t\tinfo.users[msg.sender].balance -= _cost;\r\n\t\tinfo.users[msg.sender].scaledPayout -= int256(_cost * info.scaledRewardsPerToken);\r\n\t\temit Transfer(msg.sender, address(0x0), _cost);\r\n\t}\r\n\r\n\tfunction claim() external {\r\n\t\tclaimFor(msg.sender);\r\n\t}\r\n\r\n\tfunction claimFor(address _user) public {\r\n\t\t_update();\r\n\t\tuint256 _rewards = rewardsOf(_user);\r\n\t\tif (_rewards > 0) {\r\n\t\t\tinfo.users[_user].scaledPayout += int256(_rewards * FLOAT_SCALAR);\r\n\t\t\tif (rewardBurn(_user)) {\r\n\t\t\t\taddress _destination = burnDestination();\r\n\t\t\t\tif (_destination == address(0x0)) {\r\n\t\t\t\t\tinfo.krill.burn(_rewards);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (isBridged()) {\r\n\t\t\t\t\t\tinfo.bridge.depositFor(_destination, address(info.krill), abi.encodePacked(_rewards));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tinfo.krill.transfer(_destination, _rewards);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tinfo.krill.transfer(_user, _rewards);\r\n\t\t\t}\r\n\t\t\temit Claim(_user, _rewards);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _tokens) external returns (bool) {\r\n\t\treturn _transfer(msg.sender, _to, _tokens);\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _tokens) external returns (bool) {\r\n\t\tinfo.users[msg.sender].allowance[_spender] = _tokens;\r\n\t\temit Approval(msg.sender, _spender, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {\r\n\t\tuint256 _allowance = allowance(_from, msg.sender);\r\n\t\trequire(_allowance >= _tokens);\r\n\t\tif (_allowance != UINT_MAX) {\r\n\t\t\tinfo.users[_from].allowance[msg.sender] -= _tokens;\r\n\t\t}\r\n\t\treturn _transfer(_from, _to, _tokens);\r\n\t}\r\n\r\n\tfunction transferAndCall(address _to, uint256 _tokens, bytes calldata _data) external returns (bool) {\r\n\t\t_transfer(msg.sender, _to, _tokens);\r\n\t\tuint32 _size;\r\n\t\tassembly {\r\n\t\t\t_size := extcodesize(_to)\r\n\t\t}\r\n\t\tif (_size > 0) {\r\n\t\t\trequire(Callable(_to).tokenCallback(msg.sender, _tokens, _data));\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\r\n\tfunction name() external view returns (string memory) {\r\n\t\treturn info.isWhale ? 'Wrapped Whales' : 'Wrapped Fishermen';\r\n\t}\r\n\r\n\tfunction symbol() external view returns (string memory) {\r\n\t\treturn info.isWhale ? 'wWH' : 'wFM';\r\n\t}\r\n\t\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn info.owner;\r\n\t}\r\n\t\r\n\tfunction isBridged() public view returns (bool) {\r\n\t\treturn info.isBridged;\r\n\t}\r\n\t\r\n\tfunction burnDestination() public view returns (address) {\r\n\t\treturn info.burnDestination;\r\n\t}\r\n\t\r\n\tfunction rewardBurn(address _user) public view returns (bool) {\r\n\t\treturn info.rewardBurn[_user];\r\n\t}\r\n\t\r\n\tfunction pairAddress() public view returns (address) {\r\n\t\treturn address(info.pair);\r\n\t}\r\n\t\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn info.totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address _user) public view returns (uint256) {\r\n\t\treturn info.users[_user].balance;\r\n\t}\r\n\t\r\n\tfunction rewardsOf(address _user) public view returns (uint256) {\r\n\t\treturn uint256(int256(info.scaledRewardsPerToken * balanceOf(_user)) - info.users[_user].scaledPayout) / FLOAT_SCALAR;\r\n\t}\r\n\r\n\tfunction allowance(address _user, address _spender) public view returns (uint256) {\r\n\t\treturn info.users[_user].allowance[_spender];\r\n\t}\r\n\r\n\tfunction allInfoFor(address _user) external view returns (uint256 totalTokens, uint256 totalLPTokens, uint256 wethReserve, uint256 wrappedReserve, uint256 userTokens, bool userApproved, uint256 userBalance, uint256 userRewards, uint256 userLPBalance, uint256 contractFishermen, uint256 contractWhales) {\r\n\t\ttotalTokens = totalSupply();\r\n\t\ttotalLPTokens = info.pair.totalSupply();\r\n\t\t(uint256 _res0, uint256 _res1, ) = info.pair.getReserves();\r\n\t\twethReserve = info.weth0 ? _res0 : _res1;\r\n\t\twrappedReserve = info.weth0 ? _res1 : _res0;\r\n\t\tuserTokens = info.wg.balanceOf(_user);\r\n\t\tuserApproved = info.wg.isApprovedForAll(_user, address(this));\r\n\t\tuserBalance = balanceOf(_user);\r\n\t\tuserRewards = rewardsOf(_user);\r\n\t\tuserLPBalance = info.pair.balanceOf(_user);\r\n\t\tcontractFishermen = info.wg.fishermenOf(address(this));\r\n\t\tcontractWhales = info.wg.whalesOf(address(this));\r\n\t}\r\n\r\n\r\n\tfunction _transfer(address _from, address _to, uint256 _tokens) internal returns (bool) {\r\n\t\trequire(balanceOf(_from) >= _tokens);\r\n\t\t_update();\r\n\t\tinfo.users[_from].balance -= _tokens;\r\n\t\tinfo.users[_from].scaledPayout -= int256(_tokens * info.scaledRewardsPerToken);\r\n\t\tinfo.users[_to].balance += _tokens;\r\n\t\tinfo.users[_to].scaledPayout += int256(_tokens * info.scaledRewardsPerToken);\r\n\t\temit Transfer(_from, _to, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _update() internal {\r\n\t\taddress _this = address(this);\r\n\t\tuint256 _balanceBefore = info.krill.balanceOf(_this);\r\n\t\tinfo.wg.claim();\r\n\t\t_disburse(info.krill.balanceOf(_this) - _balanceBefore);\r\n\t}\r\n\r\n\tfunction _disburse(uint256 _amount) internal {\r\n\t\tif (_amount > 0) {\r\n\t\t\tif (totalSupply() == 0) {\r\n\t\t\t\tinfo.pendingRewards += _amount;\r\n\t\t\t} else {\r\n\t\t\t\tinfo.scaledRewardsPerToken += (_amount + info.pendingRewards) * FLOAT_SCALAR / totalSupply();\r\n\t\t\t\tinfo.pendingRewards = 0;\r\n\t\t\t}\r\n\t\t\temit Reward(_amount);\r\n\t\t}\r\n\t}\r\n}\r\n\r\ncontract Islands {\r\n\r\n\tuint256 constant private UINT_MAX = type(uint256).max;\r\n\tuint256 constant private POLYGON_ISLANDS = 1000;\r\n\tuint256 constant private MINTABLE_ISLANDS = 1000;\r\n\tuint256 constant private MAX_ISLANDS = POLYGON_ISLANDS + MINTABLE_ISLANDS; // 2k\r\n\tuint256 constant private BASE_KRILL_COST = 1e23; // 100k\r\n\tuint256 constant private KRILL_COST_INCREMENT = 2e21; // 2k\r\n\r\n\tstring constant public name = \"Whales Game Islands\";\r\n\tstring constant public symbol = \"ISLAND\";\r\n\tuint8 constant public decimals = 18;\r\n\r\n\tstruct User {\r\n\t\tuint256 balance;\r\n\t\tmapping(address => uint256) allowance;\r\n\t}\r\n\r\n\tstruct Info {\r\n\t\tuint256 totalSupply;\r\n\t\tmapping(address => User) users;\r\n\t\tRouter router;\r\n\t\tPair pair;\r\n\t\tWhalesGame wg;\r\n\t\tKRILL krill;\r\n\t\tWrappedToken wfm;\r\n\t\tWrappedToken wwh;\r\n\t\taddress owner;\r\n\t\taddress feeRecipient;\r\n\t\tbool weth0;\r\n\t\tuint256 openingTime;\r\n\t}\r\n\tInfo private info;\r\n\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 tokens);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 tokens);\r\n\r\n\r\n\tmodifier _onlyOwner() {\r\n\t\trequire(msg.sender == owner());\r\n\t\t_;\r\n\t}\r\n\r\n\r\n\tconstructor(WhalesGame _wg, address _booster, uint256 _openingTime) {\r\n\t\tinfo.router = Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\t\tinfo.pair = Pair(Factory(info.router.factory()).createPair(info.router.WETH(), address(this)));\r\n\t\tinfo.weth0 = info.pair.token0() == info.router.WETH();\r\n\t\tinfo.wg = _wg;\r\n\t\tinfo.krill = KRILL(_wg.krillAddress());\r\n\t\tinfo.wfm = new WrappedToken(_wg, false);\r\n\t\tinfo.wwh = new WrappedToken(_wg, true);\r\n\t\tinfo.owner = msg.sender;\r\n\t\tinfo.feeRecipient = _booster;\r\n\t\tinfo.openingTime = _openingTime;\r\n\r\n\t\tuint256 _polygonIslands = POLYGON_ISLANDS * 1e18;\r\n\t\tinfo.totalSupply = _polygonIslands;\r\n\t\tinfo.users[msg.sender].balance = _polygonIslands;\r\n\t\temit Transfer(address(0x0), msg.sender, _polygonIslands);\r\n\t}\r\n\r\n\tfunction setOwner(address _owner) external _onlyOwner {\r\n\t\tinfo.owner = _owner;\r\n\t}\r\n\r\n\tfunction setFeeRecipient(address _feeRecipient) external _onlyOwner {\r\n\t\tinfo.feeRecipient = _feeRecipient;\r\n\t}\r\n\r\n\tfunction buyIsland(uint256[4] memory _fishermenIds, uint256 _whaleId) external {\r\n\t\trequire(block.timestamp >= info.openingTime);\r\n\t\trequire(totalIslands() < MAX_ISLANDS);\r\n\t\trequire(info.wg.getIsWhale(_whaleId));\r\n\t\tinfo.wg.transferFrom(msg.sender, wrappedWhalesAddress(), _whaleId);\r\n\t\trequire(!info.wg.getIsWhale(_fishermenIds[0]));\r\n\t\tinfo.wg.transferFrom(msg.sender, wrappedFishermenAddress(), _fishermenIds[0]);\r\n\t\trequire(!info.wg.getIsWhale(_fishermenIds[1]));\r\n\t\tinfo.wg.transferFrom(msg.sender, info.wg.stakingRewardsAddress(), _fishermenIds[1]);\r\n\t\trequire(!info.wg.getIsWhale(_fishermenIds[2]));\r\n\t\tinfo.wg.transferFrom(msg.sender, info.wg.stakingRewardsAddress(), _fishermenIds[2]);\r\n\t\trequire(!info.wg.getIsWhale(_fishermenIds[3]));\r\n\t\tinfo.wg.transferFrom(msg.sender, feeRecipient(), _fishermenIds[3]);\r\n\t\tinfo.krill.transferFrom(msg.sender, feeRecipient(), currentKrillCost());\r\n\r\n\t\tinfo.totalSupply += 1e18;\r\n\t\tinfo.users[msg.sender].balance += 1e18;\r\n\t\temit Transfer(address(0x0), msg.sender, 1e18);\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _tokens) external returns (bool) {\r\n\t\treturn _transfer(msg.sender, _to, _tokens);\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _tokens) external returns (bool) {\r\n\t\tinfo.users[msg.sender].allowance[_spender] = _tokens;\r\n\t\temit Approval(msg.sender, _spender, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {\r\n\t\tuint256 _allowance = allowance(_from, msg.sender);\r\n\t\trequire(_allowance >= _tokens);\r\n\t\tif (_allowance != UINT_MAX) {\r\n\t\t\tinfo.users[_from].allowance[msg.sender] -= _tokens;\r\n\t\t}\r\n\t\treturn _transfer(_from, _to, _tokens);\r\n\t}\r\n\r\n\tfunction transferAndCall(address _to, uint256 _tokens, bytes calldata _data) external returns (bool) {\r\n\t\t_transfer(msg.sender, _to, _tokens);\r\n\t\tuint32 _size;\r\n\t\tassembly {\r\n\t\t\t_size := extcodesize(_to)\r\n\t\t}\r\n\t\tif (_size > 0) {\r\n\t\t\trequire(Callable(_to).tokenCallback(msg.sender, _tokens, _data));\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t\r\n\tfunction whalesGameAddress() external view returns (address) {\r\n\t\treturn address(info.wg);\r\n\t}\r\n\r\n\tfunction wrappedFishermenAddress() public view returns (address) {\r\n\t\treturn address(info.wfm);\r\n\t}\r\n\r\n\tfunction wrappedWhalesAddress() public view returns (address) {\r\n\t\treturn address(info.wwh);\r\n\t}\r\n\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn info.owner;\r\n\t}\r\n\r\n\tfunction feeRecipient() public view returns (address) {\r\n\t\treturn info.feeRecipient;\r\n\t}\r\n\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn info.totalSupply;\r\n\t}\r\n\r\n\tfunction totalIslands() public view returns (uint256) {\r\n\t\treturn totalSupply() / 1e18;\r\n\t}\r\n\r\n\tfunction currentKrillCost() public view returns (uint256) {\r\n\t\treturn BASE_KRILL_COST + (totalIslands() - POLYGON_ISLANDS) * KRILL_COST_INCREMENT;\r\n\t}\r\n\r\n\tfunction balanceOf(address _user) public view returns (uint256) {\r\n\t\treturn info.users[_user].balance;\r\n\t}\r\n\r\n\tfunction allowance(address _user, address _spender) public view returns (uint256) {\r\n\t\treturn info.users[_user].allowance[_spender];\r\n\t}\r\n\r\n\tfunction allInfoFor(address _user) external view returns (uint256 openingTime, uint256 totalTokens, uint256 totalLPTokens, uint256 wethReserve, uint256 islandReserve, uint256 userTokens, bool userApproved, uint256 userAllowance, uint256 userKRILL, uint256 userBalance, uint256 userLPBalance) {\r\n\t\topeningTime = info.openingTime;\r\n\t\ttotalTokens = totalSupply();\r\n\t\ttotalLPTokens = info.pair.totalSupply();\r\n\t\t(uint256 _res0, uint256 _res1, ) = info.pair.getReserves();\r\n\t\twethReserve = info.weth0 ? _res0 : _res1;\r\n\t\tislandReserve = info.weth0 ? _res1 : _res0;\r\n\t\tuserTokens = info.wg.balanceOf(_user);\r\n\t\tuserApproved = info.wg.isApprovedForAll(_user, address(this));\r\n\t\tuserAllowance = info.krill.allowance(_user, address(this));\r\n\t\tuserKRILL = info.krill.balanceOf(_user);\r\n\t\tuserBalance = balanceOf(_user);\r\n\t\tuserLPBalance = info.pair.balanceOf(_user);\r\n\t}\r\n\r\n\r\n\tfunction _transfer(address _from, address _to, uint256 _tokens) internal returns (bool) {\r\n\t\trequire(balanceOf(_from) >= _tokens);\r\n\t\tinfo.users[_from].balance -= _tokens;\r\n\t\tinfo.users[_to].balance += _tokens;\r\n\t\temit Transfer(_from, _to, _tokens);\r\n\t\treturn true;\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract WhalesGame\",\"name\":\"_wg\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWhale\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"allInfoFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLPTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wrappedReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"userApproved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"userBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userLPBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractFishermen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractWhales\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"disburse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBridged\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"rewardBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"rewardsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"}],\"name\":\"setBurnDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isBridged\",\"type\":\"bool\"}],\"name\":\"setIsBridged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_shouldBurn\",\"type\":\"bool\"}],\"name\":\"setRewardBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalUnwrapped\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"wrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WrappedToken", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001ebb218415b1f70aeff54041c743082f183318ce0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cd8a9eb3ac97d2581e7db9966bd2022ed3071b3e504d9c104ef955c4bf829ec8"}