{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive vaults via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance \\u003e= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance \\u003e= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\\n            data\\n        );\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"ControllerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Timelocked.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\nabstract contract ControllerBase is Timelocked {\\n    using SafeMath for uint256;\\n\\n    address public leadDev;\\n\\n    uint256 numFuncCalls;\\n\\n    mapping(uint256 =\\u003e uint256) public time;\\n    mapping(uint256 =\\u003e uint256) public funcIndex;\\n    mapping(uint256 =\\u003e address payable) public addressParam;\\n    mapping(uint256 =\\u003e uint256[]) public uintArrayParam;\\n\\n    function transferOwnership(address newOwner) public override virtual {\\n        uint256 fcId = numFuncCalls;\\n        numFuncCalls = numFuncCalls.add(1);\\n        time[fcId] = now;\\n        funcIndex[fcId] = 0;\\n        addressParam[fcId] = payable(newOwner);\\n    }\\n\\n    function initialize() public initializer {\\n        initOwnable();\\n    }\\n\\n    function setLeadDev(address newLeadDev) public virtual onlyOwner {\\n        leadDev = newLeadDev;\\n    }\\n\\n    function stageFuncCall(\\n        uint256 _funcIndex,\\n        address payable _addressParam,\\n        uint256[] memory _uintArrayParam\\n    ) public virtual onlyOwner {\\n        uint256 fcId = numFuncCalls;\\n        numFuncCalls = numFuncCalls.add(1);\\n        time[fcId] = now;\\n        funcIndex[fcId] = _funcIndex;\\n        addressParam[fcId] = _addressParam;\\n        uintArrayParam[fcId] = _uintArrayParam;\\n    }\\n\\n    function cancelFuncCall(uint256 fcId) public virtual onlyOwner {\\n        funcIndex[fcId] = 0;\\n    }\\n\\n    function executeFuncCall(uint256 fcId) public virtual {\\n        if (funcIndex[fcId] == 0) {\\n            return;\\n        } else if (funcIndex[fcId] == 1) {\\n            require(\\n                    uintArrayParam[fcId][2] \\u003e= uintArrayParam[fcId][1] \\u0026\\u0026\\n                        uintArrayParam[fcId][1] \\u003e= uintArrayParam[fcId][0],\\n                    \\\"Invalid delays\\\"\\n                );\\n            if (uintArrayParam[fcId][2] != longDelay) {\\n                onlyIfPastDelay(2, time[fcId]);\\n            } else if (uintArrayParam[fcId][1] != mediumDelay) {\\n                onlyIfPastDelay(1, time[fcId]);\\n            } else {\\n                onlyIfPastDelay(0, time[fcId]);\\n            }\\n            setDelays(\\n                uintArrayParam[fcId][0],\\n                uintArrayParam[fcId][1],\\n                uintArrayParam[fcId][2]\\n            );\\n        } else if (funcIndex[fcId] == 2) {\\n            onlyIfPastDelay(1, time[fcId]);\\n            Ownable.transferOwnership(addressParam[fcId]);\\n        }\\n    }\\n}\\n\"},\"Counter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\ncontract Counter {\\n    uint256 internal number;\\n\\n    function getNumber() public view returns (uint256) {\\n        return number;\\n    }\\n\\n    function increaseNumberBy(uint256 amount) public {\\n        number += amount;\\n    }\\n\\n}\\n\"},\"D2Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./ERC20Burnable.sol\\\";\\n\\ncontract D2Token is Context, Ownable, ERC20Burnable {\\n    address private vaultAddress;\\n\\n    constructor(string memory name, string memory symbol)\\n        public\\n        ERC20(name, symbol)\\n    {\\n        initOwnable();\\n        _mint(msg.sender, 0);\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyOwner {\\n        _mint(to, amount);\\n    }\\n}\\n\"},\"EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity\\u0027s\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -\\u003e address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 =\\u003e uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key\\u0027s index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key\\u0027s index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as \\u0027swap and pop\\u0027).\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length \\u003e index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        return _get(map, key, \\\"EnumerableMap: nonexistent key\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint256(_get(map._inner, bytes32(key))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\\n    }\\n}\\n\"},\"EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 =\\u003e uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        require(\\n            set._values.length \\u003e index,\\n            \\\"EnumerableSet: index out of bounds\\\"\\n        );\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\ncontract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256(\\u0027supportsInterface(bytes4)\\u0027)) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it\\u0027s supported.\\n     */\\n    mapping(bytes4 =\\u003e bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping(address =\\u003e uint256) private _balances;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(\\n                subtractedValue,\\n                \\\"ERC20: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount)\\n        internal\\n        virtual\\n    {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(\\n            amount,\\n            \\\"ERC20: burn amount exceeds balance\\\"\\n        );\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount)\\n        internal\\n        virtual\\n    {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    function _changeName(string memory name_) internal {\\n        _name = name_;\\n    }\\n\\n    function _changeSymbol(string memory symbol_) internal {\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount)\\n        internal\\n        virtual\\n    {}\\n}\\n\"},\"ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller\\u0027s\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(\\n            amount,\\n            \\\"ERC20: burn amount exceeds allowance\\\"\\n        );\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"},\"ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./EnumerableSet.sol\\\";\\nimport \\\"./EnumerableMap.sol\\\";\\nimport \\\"./Strings.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721 is\\n    Context,\\n    ERC165,\\n    IERC721,\\n    IERC721Metadata,\\n    IERC721Enumerable\\n{\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping(address =\\u003e EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 =\\u003e address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 =\\u003e string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /*\\n     *     bytes4(keccak256(\\u0027balanceOf(address)\\u0027)) == 0x70a08231\\n     *     bytes4(keccak256(\\u0027ownerOf(uint256)\\u0027)) == 0x6352211e\\n     *     bytes4(keccak256(\\u0027approve(address,uint256)\\u0027)) == 0x095ea7b3\\n     *     bytes4(keccak256(\\u0027getApproved(uint256)\\u0027)) == 0x081812fc\\n     *     bytes4(keccak256(\\u0027setApprovalForAll(address,bool)\\u0027)) == 0xa22cb465\\n     *     bytes4(keccak256(\\u0027isApprovedForAll(address,address)\\u0027)) == 0xe985e9c5\\n     *     bytes4(keccak256(\\u0027transferFrom(address,address,uint256)\\u0027)) == 0x23b872dd\\n     *     bytes4(keccak256(\\u0027safeTransferFrom(address,address,uint256)\\u0027)) == 0x42842e0e\\n     *     bytes4(keccak256(\\u0027safeTransferFrom(address,address,uint256,bytes)\\u0027)) == 0xb88d4fde\\n     *\\n     *     =\\u003e 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256(\\u0027name()\\u0027)) == 0x06fdde03\\n     *     bytes4(keccak256(\\u0027symbol()\\u0027)) == 0x95d89b41\\n     *     bytes4(keccak256(\\u0027tokenURI(uint256)\\u0027)) == 0xc87b56dd\\n     *\\n     *     =\\u003e 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256(\\u0027totalSupply()\\u0027)) == 0x18160ddd\\n     *     bytes4(keccak256(\\u0027tokenOfOwnerByIndex(address,uint256)\\u0027)) == 0x2f745c59\\n     *     bytes4(keccak256(\\u0027tokenByIndex(uint256)\\u0027)) == 0x4f6ccce7\\n     *\\n     *     =\\u003e 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: balance query for the zero address\\\"\\n        );\\n\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return\\n            _tokenOwners.get(\\n                tokenId,\\n                \\\"ERC721: owner query for nonexistent token\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(_baseURI).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length \\u003e 0) {\\n            return string(abi.encodePacked(_baseURI, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(_baseURI, tokenId.toString()));\\n    }\\n\\n    /**\\n     * @dev Returns the base URI set via {_setBaseURI}. This will be\\n     * automatically added as a prefix in {tokenURI} to each token\\u0027s URI, or\\n     * to the token ID if no specific URI is set for that token ID.\\n     */\\n    function baseURI() public view returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: approved query for nonexistent token\\\"\\n        );\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n    {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId)\\n        public\\n        virtual\\n        override\\n    {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId)\\n        public\\n        virtual\\n        override\\n    {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: operator query for nonexistent token\\\"\\n        );\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner ||\\n            getApproved(tokenId) == spender ||\\n            isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    // For testing\\n    function safeMint(address to, uint256 tokenId) public virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data)\\n        internal\\n        virtual\\n    {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _holderTokens[owner].remove(tokenId);\\n\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId)\\n        internal\\n        virtual\\n    {\\n        require(\\n            ownerOf(tokenId) == from,\\n            \\\"ERC721: transfer of token that is not own\\\"\\n        );\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI)\\n        internal\\n        virtual\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721Metadata: URI set of nonexistent token\\\"\\n        );\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(\\n            abi.encodeWithSelector(\\n                IERC721Receiver(to).onERC721Received.selector,\\n                _msgSender(),\\n                from,\\n                tokenId,\\n                _data\\n            ),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    function _approve(address to, uint256 tokenId) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``\\u0027s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``\\u0027s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\\n        internal\\n        virtual\\n    {}\\n}\\n\"},\"ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"},\"ERC721Public.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./ERC721.sol\\\";\\n\\ncontract ERC721Public is Context, ERC721 {\\n    uint256 public minTokenId;\\n    uint256 public maxTokenId;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint256 _minTokenId,\\n        uint256 _maxTokenId\\n    ) public ERC721(name, symbol) {\\n        minTokenId = _minTokenId;\\n        maxTokenId = _maxTokenId;\\n    }\\n\\n    function mint(uint256 tokenId, address recipient) public {\\n        require(tokenId \\u003e= minTokenId, \\\"tokenId \\u003c minTokenId\\\");\\n        require(tokenId \\u003c= maxTokenId, \\\"tokenId \\u003e maxTokenId\\\");\\n        _mint(recipient, tokenId);\\n    }\\n\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``\\u0027s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"},\"IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"},\"IERC721Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\ninterface IERC721Plus is IERC721 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n}\\n\"},\"IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"},\"INFTX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Pausable.sol\\\";\\nimport \\\"./IXToken.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./EnumerableSet.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\ninterface INFTX {\\n    event NFTsDeposited(uint256 vaultId, uint256[] nftIds, address from);\\n    event NFTsRedeemed(uint256 vaultId, uint256[] nftIds, address to);\\n    event TokensMinted(uint256 vaultId, uint256 amount, address to);\\n    event TokensBurned(uint256 vaultId, uint256 amount, address from);\\n\\n    event EligibilitySet(uint256 vaultId, uint256[] nftIds, bool _boolean);\\n    event ReservesIncreased(uint256 vaultId, uint256 nftId);\\n    event ReservesDecreased(uint256 vaultId, uint256 nftId);\\n\\n    function store() external returns (address);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function vaultSize(uint256 vaultId) external view returns (uint256);\\n\\n    function isEligible(uint256 vaultId, uint256 nftId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function createVault(address _erc20Address, address _nftAddress)\\n        external\\n        returns (uint256);\\n\\n    function depositETH(uint256 vaultId) external payable;\\n\\n    function setIsEligible(\\n        uint256 vaultId,\\n        uint256[] calldata nftIds,\\n        bool _boolean\\n    ) external;\\n\\n    function setNegateEligibility(uint256 vaultId, bool shouldNegate) external;\\n\\n    function setShouldReserve(\\n        uint256 vaultId,\\n        uint256[] calldata nftIds,\\n        bool _boolean\\n    ) external;\\n\\n    function setIsReserved(\\n        uint256 vaultId,\\n        uint256[] calldata nftIds,\\n        bool _boolean\\n    ) external;\\n\\n    function setExtension(address contractAddress, bool _boolean) external;\\n\\n    function directRedeem(uint256 vaultId, uint256[] calldata nftIds)\\n        external\\n        payable;\\n\\n    function mint(uint256 vaultId, uint256[] calldata nftIds, uint256 d2Amount)\\n        external\\n        payable;\\n\\n    function redeem(uint256 vaultId, uint256 numNFTs) external payable;\\n\\n    function mintAndRedeem(uint256 vaultId, uint256[] calldata nftIds)\\n        external\\n        payable;\\n\\n    function changeTokenName(uint256 vaultId, string calldata newName) external;\\n\\n    function changeTokenSymbol(uint256 vaultId, string calldata newSymbol)\\n        external;\\n\\n    function setManager(uint256 vaultId, address newManager) external;\\n\\n    function finalizeVault(uint256 vaultId) external;\\n\\n    function closeVault(uint256 vaultId) external;\\n\\n    function setMintFees(uint256 vaultId, uint256 _ethBase, uint256 _ethStep)\\n        external;\\n\\n    function setBurnFees(uint256 vaultId, uint256 _ethBase, uint256 _ethStep)\\n        external;\\n\\n    function setDualFees(uint256 vaultId, uint256 _ethBase, uint256 _ethStep)\\n        external;\\n\\n    function setSupplierBounty(uint256 vaultId, uint256 ethMax, uint256 length)\\n        external;\\n}\\n\"},\"Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.4.24 \\u003c0.7.0;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n    /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n    bool private initialized;\\n\\n    /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n    bool private initializing;\\n\\n    /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n    modifier initializer() {\\n        require(\\n            initializing || isConstructor() || !initialized,\\n            \\\"Contract instance has already been initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\"},\"ITokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\ninterface ITokenManager {\\n    function mint(address _receiver, uint256 _amount) external;\\n    function issue(uint256 _amount) external;\\n    function assign(address _receiver, uint256 _amount) external;\\n    function burn(address _holder, uint256 _amount) external;\\n    function assignVested(\\n        address _receiver,\\n        uint256 _amount,\\n        uint64 _start,\\n        uint64 _cliff,\\n        uint64 _vested,\\n        bool _revokable\\n    ) external returns (uint256);\\n    function revokeVesting(address _holder, uint256 _vestingId) external;\\n}\\n\"},\"ITransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface ITransparentUpgradeableProxy {\\n    function admin() external returns (address);\\n\\n    function implementation() external returns (address);\\n\\n    function changeAdmin(address newAdmin) external;\\n\\n    function upgradeTo(address newImplementation) external;\\n\\n    function upgradeToAndCall(address newImplementation, bytes calldata data)\\n        external\\n        payable;\\n}\\n\"},\"IXStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IXToken.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./EnumerableSet.sol\\\";\\n\\ninterface IXStore {\\n    struct FeeParams {\\n        uint256 ethBase;\\n        uint256 ethStep;\\n    }\\n\\n    struct BountyParams {\\n        uint256 ethMax;\\n        uint256 length;\\n    }\\n\\n    struct Vault {\\n        address xTokenAddress;\\n        address nftAddress;\\n        address manager;\\n        IXToken xToken;\\n        IERC721 nft;\\n        EnumerableSet.UintSet holdings;\\n        EnumerableSet.UintSet reserves;\\n        mapping(uint256 =\\u003e address) requester;\\n        mapping(uint256 =\\u003e bool) isEligible;\\n        mapping(uint256 =\\u003e bool) shouldReserve;\\n        bool allowMintRequests;\\n        bool flipEligOnRedeem;\\n        bool negateEligibility;\\n        bool isFinalized;\\n        bool isClosed;\\n        FeeParams mintFees;\\n        FeeParams burnFees;\\n        FeeParams dualFees;\\n        BountyParams supplierBounty;\\n        uint256 ethBalance;\\n        uint256 tokenBalance;\\n        bool isD2Vault;\\n        address d2AssetAddress;\\n        IERC20 d2Asset;\\n        uint256 d2Holdings;\\n    }\\n\\n    function isExtension(address addr) external view returns (bool);\\n\\n    function randNonce() external view returns (uint256);\\n\\n    function vaultsLength() external view returns (uint256);\\n\\n    function xTokenAddress(uint256 vaultId) external view returns (address);\\n\\n    function nftAddress(uint256 vaultId) external view returns (address);\\n\\n    function manager(uint256 vaultId) external view returns (address);\\n\\n    function xToken(uint256 vaultId) external view returns (IXToken);\\n\\n    function nft(uint256 vaultId) external view returns (IERC721);\\n\\n    function holdingsLength(uint256 vaultId) external view returns (uint256);\\n\\n    function holdingsContains(uint256 vaultId, uint256 elem)\\n        external\\n        view\\n        returns (bool);\\n\\n    function holdingsAt(uint256 vaultId, uint256 index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function reservesLength(uint256 vaultId) external view returns (uint256);\\n\\n    function reservesContains(uint256 vaultId, uint256 elem)\\n        external\\n        view\\n        returns (bool);\\n\\n    function reservesAt(uint256 vaultId, uint256 index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function requester(uint256 vaultId, uint256 id)\\n        external\\n        view\\n        returns (address);\\n\\n    function isEligible(uint256 vaultId, uint256 id)\\n        external\\n        view\\n        returns (bool);\\n\\n    function shouldReserve(uint256 vaultId, uint256 id)\\n        external\\n        view\\n        returns (bool);\\n\\n    function allowMintRequests(uint256 vaultId) external view returns (bool);\\n\\n    function flipEligOnRedeem(uint256 vaultId) external view returns (bool);\\n\\n    function negateEligibility(uint256 vaultId) external view returns (bool);\\n\\n    function isFinalized(uint256 vaultId) external view returns (bool);\\n\\n    function isClosed(uint256 vaultId) external view returns (bool);\\n\\n    function mintFees(uint256 vaultId) external view returns (uint256, uint256);\\n\\n    function burnFees(uint256 vaultId) external view returns (uint256, uint256);\\n\\n    function dualFees(uint256 vaultId) external view returns (uint256, uint256);\\n\\n    function supplierBounty(uint256 vaultId)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function ethBalance(uint256 vaultId) external view returns (uint256);\\n\\n    function tokenBalance(uint256 vaultId) external view returns (uint256);\\n\\n    function isD2Vault(uint256 vaultId) external view returns (bool);\\n\\n    function d2AssetAddress(uint256 vaultId) external view returns (address);\\n\\n    function d2Asset(uint256 vaultId) external view returns (IERC20);\\n\\n    function d2Holdings(uint256 vaultId) external view returns (uint256);\\n\\n    function setXTokenAddress(uint256 vaultId, address _xTokenAddress) external;\\n\\n    function setNftAddress(uint256 vaultId, address _assetAddress) external;\\n\\n    function setManager(uint256 vaultId, address _manager) external;\\n\\n    function setXToken(uint256 vaultId) external;\\n\\n    function setNft(uint256 vaultId) external;\\n\\n    function holdingsAdd(uint256 vaultId, uint256 elem) external;\\n\\n    function holdingsRemove(uint256 vaultId, uint256 elem) external;\\n\\n    function reservesAdd(uint256 vaultId, uint256 elem) external;\\n\\n    function reservesRemove(uint256 vaultId, uint256 elem) external;\\n\\n    function setRequester(uint256 vaultId, uint256 id, address _requester)\\n        external;\\n\\n    function setIsEligible(uint256 vaultId, uint256 id, bool _bool) external;\\n\\n    function setShouldReserve(uint256 vaultId, uint256 id, bool _shouldReserve)\\n        external;\\n\\n    function setAllowMintRequests(uint256 vaultId, bool isAllowed) external;\\n\\n    function setFlipEligOnRedeem(uint256 vaultId, bool flipElig) external;\\n\\n    function setNegateEligibility(uint256 vaultId, bool negateElig) external;\\n\\n    function setIsFinalized(uint256 vaultId, bool _isFinalized) external;\\n\\n    function setIsClosed(uint256 vaultId, bool _isClosed) external;\\n\\n    function setMintFees(uint256 vaultId, uint256 ethBase, uint256 ethStep)\\n        external;\\n\\n    function setBurnFees(uint256 vaultId, uint256 ethBase, uint256 ethStep)\\n        external;\\n\\n    function setDualFees(uint256 vaultId, uint256 ethBase, uint256 ethStep)\\n        external;\\n\\n    function setSupplierBounty(uint256 vaultId, uint256 ethMax, uint256 length)\\n        external;\\n\\n    function setEthBalance(uint256 vaultId, uint256 _ethBalance) external;\\n\\n    function setTokenBalance(uint256 vaultId, uint256 _tokenBalance) external;\\n\\n    function setIsD2Vault(uint256 vaultId, bool _isD2Vault) external;\\n\\n    function setD2AssetAddress(uint256 vaultId, address _assetAddress) external;\\n\\n    function setD2Asset(uint256 vaultId) external;\\n\\n    function setD2Holdings(uint256 vaultId, uint256 _d2Holdings) external;\\n\\n    ////////////////////////////////////////////////////////////\\n\\n    function setIsExtension(address addr, bool _isExtension) external;\\n\\n    function setRandNonce(uint256 _randNonce) external;\\n\\n    function addNewVault() external returns (uint256);\\n}\\n\"},\"IXToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IXToken is IERC20 {\\n    function owner() external returns (address);\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function changeName(string calldata name) external;\\n\\n    function changeSymbol(string calldata symbol) external;\\n\\n    function setVaultAddress(address vaultAddress) external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\"},\"KittyTest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./ERC721Holder.sol\\\";\\n\\ncontract KittyTest is ERC721Holder {\\n    address public kittyCoreAddress = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\\n    KittyCore kittyCore;\\n    IERC721 kittyNft;\\n\\n    constructor() public {\\n        kittyCore = KittyCore(kittyCoreAddress);\\n        kittyNft = IERC721(kittyCoreAddress);\\n    }\\n\\n    function testA1(uint256 tokenId, address toAddress) public {\\n        kittyNft.transferFrom(msg.sender, toAddress, tokenId);\\n    }\\n\\n    function testA2(uint256 tokenId, address toAddress) public {\\n        kittyCore.transferFrom(msg.sender, toAddress, tokenId);\\n    }\\n\\n    function testB1(uint256 tokenId, address toAddress) public {\\n        kittyNft.transferFrom(msg.sender, toAddress, tokenId);\\n    }\\n\\n    function testB2(uint256 tokenId, address toAddress) public {\\n        kittyCore.transferFrom(msg.sender, toAddress, tokenId);\\n    }\\n\\n    function depositA(uint256 tokenId) public {\\n        kittyNft.transferFrom(msg.sender, address(this), tokenId);\\n    }\\n\\n    function depositB(uint256 tokenId) public {\\n        kittyCore.transferFrom(msg.sender, address(this), tokenId);\\n    }\\n\\n    function withdrawA(uint256 tokenId) public {\\n        kittyNft.transferFrom(address(this), msg.sender, tokenId);\\n    }\\n\\n    function withdrawB(uint256 tokenId) public {\\n        kittyCore.transferFrom(address(this), msg.sender, tokenId);\\n    }\\n}\\n\\ninterface KittyCore {\\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\\n    function transferFrom(address _from, address _to, uint256 _tokenId)\\n        external;\\n    function transfer(address _to, uint256 _tokenId) external;\\n    function getKitty(uint256 _id)\\n        external\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            uint256 _cooldownIndex,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256 _generation,\\n            uint256\\n        );\\n    function kittyIndexToApproved(uint256 index)\\n        external\\n        view\\n        returns (address approved);\\n}\\n\"},\"NFTX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Pausable.sol\\\";\\nimport \\\"./IXToken.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./ERC721Holder.sol\\\";\\nimport \\\"./IXStore.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\ncontract NFTX is Pausable, ReentrancyGuard, ERC721Holder {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event NewVault(uint256 indexed vaultId, address sender);\\n    event Mint(\\n        uint256 indexed vaultId,\\n        uint256[] nftIds,\\n        uint256 d2Amount,\\n        address sender\\n    );\\n    event Redeem(\\n        uint256 indexed vaultId,\\n        uint256[] nftIds,\\n        uint256 d2Amount,\\n        address sender\\n    );\\n    event MintRequested(\\n        uint256 indexed vaultId,\\n        uint256[] nftIds,\\n        address sender\\n    );\\n\\n    IXStore public store;\\n\\n    function initialize(address storeAddress) public initializer {\\n        initOwnable();\\n        initReentrancyGuard();\\n        store = IXStore(storeAddress);\\n    }\\n\\n    /* function onlyManager(uint256 vaultId) internal view {\\n        \\n    } */\\n\\n    function onlyPrivileged(uint256 vaultId) internal view {\\n        if (store.isFinalized(vaultId)) {\\n            require(msg.sender == owner(), \\\"Not owner\\\");\\n        } else {\\n            require(msg.sender == store.manager(vaultId), \\\"Not manager\\\");\\n        }\\n    }\\n\\n    function isEligible(uint256 vaultId, uint256 nftId)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return\\n            store.negateEligibility(vaultId)\\n                ? !store.isEligible(vaultId, nftId)\\n                : store.isEligible(vaultId, nftId);\\n    }\\n\\n    function vaultSize(uint256 vaultId) public view virtual returns (uint256) {\\n        return\\n            store.isD2Vault(vaultId)\\n                ? store.d2Holdings(vaultId)\\n                : store.holdingsLength(vaultId).add(\\n                    store.reservesLength(vaultId)\\n                );\\n    }\\n\\n    function _getPseudoRand(uint256 modulus)\\n        internal\\n        virtual\\n        returns (uint256)\\n    {\\n        store.setRandNonce(store.randNonce().add(1));\\n        return\\n            uint256(\\n                keccak256(abi.encodePacked(now, msg.sender, store.randNonce()))\\n            ) %\\n            modulus;\\n    }\\n\\n    function _calcFee(\\n        uint256 amount,\\n        uint256 ethBase,\\n        uint256 ethStep,\\n        bool isD2\\n    ) internal pure virtual returns (uint256) {\\n        if (amount == 0) {\\n            return 0;\\n        } else if (isD2) {\\n            return ethBase.add(ethStep.mul(amount.sub(10**18)).div(10**18));\\n        } else {\\n            uint256 n = amount;\\n            uint256 nSub1 = amount \\u003e= 1 ? n.sub(1) : 0;\\n            return ethBase.add(ethStep.mul(nSub1));\\n        }\\n    }\\n\\n    function _calcBounty(uint256 vaultId, uint256 numTokens, bool isBurn)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        (, uint256 length) = store.supplierBounty(vaultId);\\n        if (length == 0) return 0;\\n        uint256 ethBounty = 0;\\n        for (uint256 i = 0; i \\u003c numTokens; i = i.add(1)) {\\n            uint256 _vaultSize = isBurn\\n                ? vaultSize(vaultId).sub(i.add(1))\\n                : vaultSize(vaultId).add(i);\\n            uint256 _ethBounty = _calcBountyHelper(vaultId, _vaultSize);\\n            ethBounty = ethBounty.add(_ethBounty);\\n        }\\n        return ethBounty;\\n    }\\n\\n    function _calcBountyD2(uint256 vaultId, uint256 amount, bool isBurn)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        (uint256 ethMax, uint256 length) = store.supplierBounty(vaultId);\\n        if (length == 0) return 0;\\n        uint256 prevSize = vaultSize(vaultId);\\n        uint256 prevDepth = prevSize \\u003e length ? 0 : length.sub(prevSize);\\n        uint256 prevReward = _calcBountyD2Helper(ethMax, length, prevSize);\\n        uint256 newSize = isBurn\\n            ? vaultSize(vaultId).sub(amount)\\n            : vaultSize(vaultId).add(amount);\\n        uint256 newDepth = newSize \\u003e length ? 0 : length.sub(newSize);\\n        uint256 newReward = _calcBountyD2Helper(ethMax, length, newSize);\\n        uint256 prevTriangle = prevDepth.mul(prevReward).div(2).div(10**18);\\n        uint256 newTriangle = newDepth.mul(newReward).div(2).div(10**18);\\n        return\\n            isBurn\\n                ? newTriangle.sub(prevTriangle)\\n                : prevTriangle.sub(newTriangle);\\n    }\\n\\n    function _calcBountyD2Helper(uint256 ethMax, uint256 length, uint256 size)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (size \\u003e= length) return 0;\\n        return ethMax.sub(ethMax.mul(size).div(length));\\n    }\\n\\n    function _calcBountyHelper(uint256 vaultId, uint256 _vaultSize)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        (uint256 ethMax, uint256 length) = store.supplierBounty(vaultId);\\n        if (_vaultSize \\u003e= length) return 0;\\n        uint256 depth = length.sub(_vaultSize);\\n        return ethMax.mul(depth).div(length);\\n    }\\n\\n    function createVault(\\n        address _xTokenAddress,\\n        address _assetAddress,\\n        bool _isD2Vault\\n    ) public virtual nonReentrant returns (uint256) {\\n        onlyOwnerIfPaused(0);\\n        IXToken xToken = IXToken(_xTokenAddress);\\n        require(xToken.owner() == address(this), \\\"Wrong owner\\\");\\n        uint256 vaultId = store.addNewVault();\\n        store.setXTokenAddress(vaultId, _xTokenAddress);\\n\\n        store.setXToken(vaultId);\\n        if (!_isD2Vault) {\\n            store.setNftAddress(vaultId, _assetAddress);\\n            store.setNft(vaultId);\\n            store.setNegateEligibility(vaultId, true);\\n        } else {\\n            store.setD2AssetAddress(vaultId, _assetAddress);\\n            store.setD2Asset(vaultId);\\n            store.setIsD2Vault(vaultId, true);\\n        }\\n        store.setManager(vaultId, msg.sender);\\n        emit NewVault(vaultId, msg.sender);\\n        return vaultId;\\n    }\\n\\n    function depositETH(uint256 vaultId) public payable virtual {\\n        store.setEthBalance(vaultId, store.ethBalance(vaultId).add(msg.value));\\n    }\\n\\n    function _payEthFromVault(\\n        uint256 vaultId,\\n        uint256 amount,\\n        address payable to\\n    ) internal virtual {\\n        uint256 ethBalance = store.ethBalance(vaultId);\\n        uint256 amountToSend = ethBalance \\u003c amount ? ethBalance : amount;\\n        if (amountToSend \\u003e 0) {\\n            store.setEthBalance(vaultId, ethBalance.sub(amountToSend));\\n            to.transfer(amountToSend);\\n        }\\n    }\\n\\n    function _receiveEthToVault(\\n        uint256 vaultId,\\n        uint256 amountRequested,\\n        uint256 amountSent\\n    ) internal virtual {\\n        require(amountSent \\u003e= amountRequested, \\\"Value too low\\\");\\n        store.setEthBalance(\\n            vaultId,\\n            store.ethBalance(vaultId).add(amountRequested)\\n        );\\n        if (amountSent \\u003e amountRequested) {\\n            msg.sender.transfer(amountSent.sub(amountRequested));\\n        }\\n    }\\n\\n    function requestMint(uint256 vaultId, uint256[] memory nftIds)\\n        public\\n        payable\\n        virtual\\n        nonReentrant\\n    {\\n        onlyOwnerIfPaused(1);\\n        require(store.allowMintRequests(vaultId), \\\"Not allowed\\\");\\n        // TODO: implement bounty + fees\\n        for (uint256 i = 0; i \\u003c nftIds.length; i = i.add(1)) {\\n            require(\\n                store.nft(vaultId).ownerOf(nftIds[i]) != address(this),\\n                \\\"Already owner\\\"\\n            );\\n            store.nft(vaultId).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                nftIds[i]\\n            );\\n            require(\\n                store.nft(vaultId).ownerOf(nftIds[i]) == address(this),\\n                \\\"Not received\\\"\\n            );\\n            store.setRequester(vaultId, nftIds[i], msg.sender);\\n        }\\n        emit MintRequested(vaultId, nftIds, msg.sender);\\n    }\\n\\n    function revokeMintRequests(uint256 vaultId, uint256[] memory nftIds)\\n        public\\n        virtual\\n        nonReentrant\\n    {\\n        for (uint256 i = 0; i \\u003c nftIds.length; i = i.add(1)) {\\n            require(\\n                store.requester(vaultId, nftIds[i]) == msg.sender,\\n                \\\"Not requester\\\"\\n            );\\n            store.setRequester(vaultId, nftIds[i], address(0));\\n            store.nft(vaultId).safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                nftIds[i]\\n            );\\n        }\\n    }\\n\\n    function approveMintRequest(uint256 vaultId, uint256[] memory nftIds)\\n        public\\n        virtual\\n    {\\n        onlyPrivileged(vaultId);\\n        for (uint256 i = 0; i \\u003c nftIds.length; i = i.add(1)) {\\n            address requester = store.requester(vaultId, nftIds[i]);\\n            require(requester != address(0), \\\"No request\\\");\\n            require(\\n                store.nft(vaultId).ownerOf(nftIds[i]) == address(this),\\n                \\\"Not owner\\\"\\n            );\\n            store.setRequester(vaultId, nftIds[i], address(0));\\n            store.setIsEligible(vaultId, nftIds[i], true);\\n            if (store.shouldReserve(vaultId, nftIds[i])) {\\n                store.reservesAdd(vaultId, nftIds[i]);\\n            } else {\\n                store.holdingsAdd(vaultId, nftIds[i]);\\n            }\\n            store.xToken(vaultId).mint(requester, 10**18);\\n        }\\n    }\\n\\n    function _mint(uint256 vaultId, uint256[] memory nftIds, bool isDualOp)\\n        internal\\n        virtual\\n    {\\n        for (uint256 i = 0; i \\u003c nftIds.length; i = i.add(1)) {\\n            uint256 nftId = nftIds[i];\\n            require(isEligible(vaultId, nftId), \\\"Not eligible\\\");\\n            require(\\n                store.nft(vaultId).ownerOf(nftId) != address(this),\\n                \\\"Already owner\\\"\\n            );\\n            store.nft(vaultId).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                nftId\\n            );\\n            require(\\n                store.nft(vaultId).ownerOf(nftId) == address(this),\\n                \\\"Not received\\\"\\n            );\\n            if (store.shouldReserve(vaultId, nftId)) {\\n                store.reservesAdd(vaultId, nftId);\\n            } else {\\n                store.holdingsAdd(vaultId, nftId);\\n            }\\n        }\\n        if (!isDualOp) {\\n            uint256 amount = nftIds.length.mul(10**18);\\n            store.xToken(vaultId).mint(msg.sender, amount);\\n        }\\n    }\\n\\n    function _mintD2(uint256 vaultId, uint256 amount) internal virtual {\\n        store.d2Asset(vaultId).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n        store.xToken(vaultId).mint(msg.sender, amount);\\n        store.setD2Holdings(vaultId, store.d2Holdings(vaultId).add(amount));\\n    }\\n\\n    function _redeem(uint256 vaultId, uint256 numNFTs, bool isDualOp)\\n        internal\\n        virtual\\n    {\\n        for (uint256 i = 0; i \\u003c numNFTs; i = i.add(1)) {\\n            uint256[] memory nftIds = new uint256[](1);\\n            if (store.holdingsLength(vaultId) \\u003e 0) {\\n                uint256 rand = _getPseudoRand(store.holdingsLength(vaultId));\\n                nftIds[0] = store.holdingsAt(vaultId, rand);\\n            } else {\\n                uint256 rand = _getPseudoRand(store.reservesLength(vaultId));\\n                nftIds[0] = store.reservesAt(vaultId, rand);\\n            }\\n            _redeemHelper(vaultId, nftIds, isDualOp);\\n            emit Redeem(vaultId, nftIds, 0, msg.sender);\\n        }\\n    }\\n\\n    function _redeemD2(uint256 vaultId, uint256 amount) internal virtual {\\n        store.xToken(vaultId).burnFrom(msg.sender, amount);\\n        store.d2Asset(vaultId).safeTransfer(msg.sender, amount);\\n        store.setD2Holdings(vaultId, store.d2Holdings(vaultId).sub(amount));\\n        uint256[] memory nftIds = new uint256[](0);\\n        emit Redeem(vaultId, nftIds, amount, msg.sender);\\n    }\\n\\n    function _redeemHelper(\\n        uint256 vaultId,\\n        uint256[] memory nftIds,\\n        bool isDualOp\\n    ) internal virtual {\\n        if (!isDualOp) {\\n            store.xToken(vaultId).burnFrom(\\n                msg.sender,\\n                nftIds.length.mul(10**18)\\n            );\\n        }\\n        for (uint256 i = 0; i \\u003c nftIds.length; i = i.add(1)) {\\n            uint256 nftId = nftIds[i];\\n            require(\\n                store.holdingsContains(vaultId, nftId) ||\\n                    store.reservesContains(vaultId, nftId),\\n                \\\"NFT not in vault\\\"\\n            );\\n            if (store.holdingsContains(vaultId, nftId)) {\\n                store.holdingsRemove(vaultId, nftId);\\n            } else {\\n                store.reservesRemove(vaultId, nftId);\\n            }\\n            if (store.flipEligOnRedeem(vaultId)) {\\n                bool isElig = store.isEligible(vaultId, nftId);\\n                store.setIsEligible(vaultId, nftId, !isElig);\\n            }\\n            store.nft(vaultId).safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                nftId\\n            );\\n        }\\n    }\\n\\n    function mint(uint256 vaultId, uint256[] memory nftIds, uint256 d2Amount)\\n        public\\n        payable\\n        virtual\\n        nonReentrant\\n    {\\n        onlyOwnerIfPaused(1);\\n        uint256 amount = store.isD2Vault(vaultId) ? d2Amount : nftIds.length;\\n        uint256 ethBounty = store.isD2Vault(vaultId)\\n            ? _calcBountyD2(vaultId, d2Amount, false)\\n            : _calcBounty(vaultId, amount, false);\\n        (uint256 ethBase, uint256 ethStep) = store.mintFees(vaultId);\\n        uint256 ethFee = _calcFee(\\n            amount,\\n            ethBase,\\n            ethStep,\\n            store.isD2Vault(vaultId)\\n        );\\n        if (ethFee \\u003e ethBounty) {\\n            _receiveEthToVault(vaultId, ethFee.sub(ethBounty), msg.value);\\n        }\\n        if (store.isD2Vault(vaultId)) {\\n            _mintD2(vaultId, d2Amount);\\n        } else {\\n            _mint(vaultId, nftIds, false);\\n        }\\n        if (ethBounty \\u003e ethFee) {\\n            _payEthFromVault(vaultId, ethBounty.sub(ethFee), msg.sender);\\n        }\\n        emit Mint(vaultId, nftIds, d2Amount, msg.sender);\\n    }\\n\\n    function redeem(uint256 vaultId, uint256 amount)\\n        public\\n        payable\\n        virtual\\n        nonReentrant\\n    {\\n        onlyOwnerIfPaused(2);\\n        if (!store.isClosed(vaultId)) {\\n            uint256 ethBounty = store.isD2Vault(vaultId)\\n                ? _calcBountyD2(vaultId, amount, true)\\n                : _calcBounty(vaultId, amount, true);\\n            (uint256 ethBase, uint256 ethStep) = store.burnFees(vaultId);\\n            uint256 ethFee = _calcFee(\\n                amount,\\n                ethBase,\\n                ethStep,\\n                store.isD2Vault(vaultId)\\n            );\\n            if (ethBounty.add(ethFee) \\u003e 0) {\\n                _receiveEthToVault(vaultId, ethBounty.add(ethFee), msg.value);\\n            }\\n        }\\n        if (!store.isD2Vault(vaultId)) {\\n            _redeem(vaultId, amount, false);\\n        } else {\\n            _redeemD2(vaultId, amount);\\n        }\\n\\n    }\\n\\n    /* function mintAndRedeem(uint256 vaultId, uint256[] memory nftIds)\\n        public\\n        payable\\n        virtual\\n        nonReentrant\\n    {\\n        onlyOwnerIfPaused(3);\\n        require(!store.isD2Vault(vaultId), \\\"Is D2 vault\\\");\\n        require(!store.isClosed(vaultId), \\\"Vault is closed\\\");\\n        (uint256 ethBase, uint256 ethStep) = store.dualFees(vaultId);\\n        uint256 ethFee = _calcFee(\\n            nftIds.length,\\n            ethBase,\\n            ethStep,\\n            store.isD2Vault(vaultId)\\n        );\\n        if (ethFee \\u003e 0) {\\n            _receiveEthToVault(vaultId, ethFee, msg.value);\\n        }\\n        _mint(vaultId, nftIds, true);\\n        _redeem(vaultId, nftIds.length, true);\\n    } */\\n\\n    function setIsEligible(\\n        uint256 vaultId,\\n        uint256[] memory nftIds,\\n        bool _boolean\\n    ) public virtual {\\n        onlyPrivileged(vaultId);\\n        for (uint256 i = 0; i \\u003c nftIds.length; i = i.add(1)) {\\n            store.setIsEligible(vaultId, nftIds[i], _boolean);\\n        }\\n    }\\n\\n    function setAllowMintRequests(uint256 vaultId, bool isAllowed)\\n        public\\n        virtual\\n    {\\n        onlyPrivileged(vaultId);\\n        store.setAllowMintRequests(vaultId, isAllowed);\\n    }\\n\\n    function setFlipEligOnRedeem(uint256 vaultId, bool flipElig)\\n        public\\n        virtual\\n    {\\n        onlyPrivileged(vaultId);\\n        store.setFlipEligOnRedeem(vaultId, flipElig);\\n    }\\n\\n    function setNegateEligibility(uint256 vaultId, bool shouldNegate)\\n        public\\n        virtual\\n    {\\n        onlyPrivileged(vaultId);\\n        require(\\n            store\\n                .holdingsLength(vaultId)\\n                .add(store.reservesLength(vaultId))\\n                .add(store.d2Holdings(vaultId)) ==\\n                0,\\n            \\\"Vault not empty\\\"\\n        );\\n        store.setNegateEligibility(vaultId, shouldNegate);\\n    }\\n\\n    /* function setShouldReserve(\\n        uint256 vaultId,\\n        uint256[] memory nftIds,\\n        bool _boolean\\n    ) public virtual {\\n        onlyPrivileged(vaultId);\\n        for (uint256 i = 0; i \\u003c nftIds.length; i.add(1)) {\\n            store.setShouldReserve(vaultId, nftIds[i], _boolean);\\n        }\\n    } */\\n\\n    /* function setIsReserved(\\n        uint256 vaultId,\\n        uint256[] memory nftIds,\\n        bool _boolean\\n    ) public virtual {\\n        onlyPrivileged(vaultId);\\n        for (uint256 i = 0; i \\u003c nftIds.length; i.add(1)) {\\n            uint256 nftId = nftIds[i];\\n            if (_boolean) {\\n                require(\\n                    store.holdingsContains(vaultId, nftId),\\n                    \\\"Invalid nftId\\\"\\n                );\\n                store.holdingsRemove(vaultId, nftId);\\n                store.reservesAdd(vaultId, nftId);\\n            } else {\\n                require(\\n                    store.reservesContains(vaultId, nftId),\\n                    \\\"Invalid nftId\\\"\\n                );\\n                store.reservesRemove(vaultId, nftId);\\n                store.holdingsAdd(vaultId, nftId);\\n            }\\n        }\\n    } */\\n\\n    function changeTokenName(uint256 vaultId, string memory newName)\\n        public\\n        virtual\\n    {\\n        onlyPrivileged(vaultId);\\n        store.xToken(vaultId).changeName(newName);\\n    }\\n\\n    function changeTokenSymbol(uint256 vaultId, string memory newSymbol)\\n        public\\n        virtual\\n    {\\n        onlyPrivileged(vaultId);\\n        store.xToken(vaultId).changeSymbol(newSymbol);\\n    }\\n\\n    function setManager(uint256 vaultId, address newManager) public virtual {\\n        onlyPrivileged(vaultId);\\n        store.setManager(vaultId, newManager);\\n    }\\n\\n    function finalizeVault(uint256 vaultId) public virtual {\\n        onlyPrivileged(vaultId);\\n        if (!store.isFinalized(vaultId)) {\\n            store.setIsFinalized(vaultId, true);\\n        }\\n    }\\n\\n    function closeVault(uint256 vaultId) public virtual {\\n        onlyPrivileged(vaultId);\\n        if (!store.isFinalized(vaultId)) {\\n            store.setIsFinalized(vaultId, true);\\n        }\\n        store.setIsClosed(vaultId, true);\\n    }\\n\\n    function setMintFees(uint256 vaultId, uint256 _ethBase, uint256 _ethStep)\\n        public\\n        virtual\\n    {\\n        onlyPrivileged(vaultId);\\n        store.setMintFees(vaultId, _ethBase, _ethStep);\\n    }\\n\\n    function setBurnFees(uint256 vaultId, uint256 _ethBase, uint256 _ethStep)\\n        public\\n        virtual\\n    {\\n        onlyPrivileged(vaultId);\\n        store.setBurnFees(vaultId, _ethBase, _ethStep);\\n    }\\n\\n    /* function setDualFees(uint256 vaultId, uint256 _ethBase, uint256 _ethStep)\\n        public\\n        virtual\\n    {\\n        onlyPrivileged(vaultId);\\n        store.setDualFees(vaultId, _ethBase, _ethStep);\\n    } */\\n\\n    function setSupplierBounty(uint256 vaultId, uint256 ethMax, uint256 length)\\n        public\\n        virtual\\n    {\\n        onlyPrivileged(vaultId);\\n        store.setSupplierBounty(vaultId, ethMax, length);\\n    }\\n\\n}\\n\"},\"NFTXv2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./NFTX.sol\\\";\\n\\ncontract NFTXv2 is NFTX {\\n    /* function transferERC721(uint256 vaultId, uint256 tokenId, address to)\\n        public\\n        virtual\\n        onlyOwner\\n    {\\n        store.nft(vaultId).transferFrom(address(this), to, tokenId);\\n    }\\n\\n    function createVault(\\n        address _xTokenAddress,\\n        address _assetAddress,\\n        bool _isD2Vault\\n    ) public virtual override nonReentrant returns (uint256) {\\n        if (_xTokenAddress != _assetAddress \\u0026\\u0026 _isD2Vault) {\\n            return 0;\\n        }\\n        return 0;\\n    } */\\n\\n    function _mint(uint256 vaultId, uint256[] memory nftIds, bool isDualOp)\\n        internal\\n        virtual\\n        override\\n    {\\n        for (uint256 i = 0; i \\u003c nftIds.length; i = i.add(1)) {\\n            uint256 nftId = nftIds[i];\\n            require(isEligible(vaultId, nftId), \\\"Not eligible\\\");\\n            require(\\n                store.nft(vaultId).ownerOf(nftId) != address(this),\\n                \\\"Already owner\\\"\\n            );\\n            store.nft(vaultId).transferFrom(msg.sender, address(this), nftId);\\n            require(\\n                store.nft(vaultId).ownerOf(nftId) == address(this),\\n                \\\"Not received\\\"\\n            );\\n            if (store.shouldReserve(vaultId, nftId)) {\\n                store.reservesAdd(vaultId, nftId);\\n            } else {\\n                store.holdingsAdd(vaultId, nftId);\\n            }\\n        }\\n        if (!isDualOp) {\\n            uint256 amount = nftIds.length.mul(10**18);\\n            store.xToken(vaultId).mint(msg.sender, amount);\\n        }\\n    }\\n}\\n\"},\"NFTXv3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./NFTXv2.sol\\\";\\n\\ncontract NFTXv3 is NFTXv2 {\\n    function requestMint(uint256 vaultId, uint256[] memory nftIds)\\n        public\\n        payable\\n        virtual\\n        override\\n        nonReentrant\\n    {\\n        onlyOwnerIfPaused(1);\\n        require(store.allowMintRequests(vaultId), \\\"Not allowed\\\");\\n        // TODO: implement bounty + fees\\n        for (uint256 i = 0; i \\u003c nftIds.length; i = i.add(1)) {\\n            require(\\n                store.nft(vaultId).ownerOf(nftIds[i]) != address(this),\\n                \\\"Already owner\\\"\\n            );\\n            store.nft(vaultId).transferFrom(\\n                msg.sender,\\n                address(this),\\n                nftIds[i]\\n            );\\n            require(\\n                store.nft(vaultId).ownerOf(nftIds[i]) == address(this),\\n                \\\"Not received\\\"\\n            );\\n            store.setRequester(vaultId, nftIds[i], msg.sender);\\n        }\\n        emit MintRequested(vaultId, nftIds, msg.sender);\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context, Initializable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function initOwnable() internal virtual initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\ncontract Pausable is Ownable {\\n    mapping(uint256 =\\u003e bool) isPaused;\\n    // 0 : createVault\\n    // 1 : mint\\n    // 2 : redeem\\n    // 3 : mintAndRedeem\\n\\n    function onlyOwnerIfPaused(uint256 pauserId) public view virtual {\\n        require(!isPaused[pauserId] || msg.sender == owner(), \\\"Paused\\\");\\n    }\\n\\n    function setPaused(uint256 pauserId, bool _isPaused)\\n        public\\n        virtual\\n        onlyOwner\\n    {\\n        isPaused[pauserId] = _isPaused;\\n    }\\n}\\n\"},\"ProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./ITransparentUpgradeableProxy.sol\\\";\\n\\ncontract ProxyController is Ownable {\\n    using SafeMath for uint256;\\n\\n    ITransparentUpgradeableProxy private nftxProxy;\\n    address public implAddress;\\n\\n    constructor(address nftx) public {\\n        initOwnable();\\n        nftxProxy = ITransparentUpgradeableProxy(nftx);\\n    }\\n\\n    function getAdmin() public returns (address) {\\n        return nftxProxy.admin();\\n    }\\n\\n    function fetchImplAddress() public {\\n        implAddress = nftxProxy.implementation();\\n    }\\n\\n    function changeProxyAdmin(address newAdmin) public onlyOwner {\\n        nftxProxy.changeAdmin(newAdmin);\\n    }\\n\\n    function upgradeProxyTo(address newImpl) public onlyOwner {\\n        nftxProxy.upgradeTo(newImpl);\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the revault on every call to nonReentrant will be lower in\\n    // amount. Since revaults are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full revault coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function initReentrancyGuard() internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a revault is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value)\\n        internal\\n    {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value)\\n        internal\\n    {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(\\n            value\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value)\\n        internal\\n    {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length \\u003e 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = byte(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"},\"TimeDelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\ncontract TimeDelay is Ownable {\\n    using SafeMath for uint256;\\n\\n    uint256 public shortDelay;\\n    uint256 public mediumDelay;\\n    uint256 public longDelay;\\n\\n    function setDelays(\\n        uint256 _shortDelay,\\n        uint256 _mediumDelay,\\n        uint256 _longDelay\\n    ) internal virtual {\\n        shortDelay = _shortDelay;\\n        mediumDelay = _mediumDelay;\\n        longDelay = _longDelay;\\n    }\\n\\n    function timeInDays(uint256 num) internal pure returns (uint256) {\\n        return num * 60 * 60 * 24;\\n    }\\n\\n    function getDelay(uint256 delayIndex) public view returns (uint256) {\\n        if (delayIndex == 0) {\\n            return shortDelay;\\n        } else if (delayIndex == 1) {\\n            return mediumDelay;\\n        } else if (delayIndex == 2) {\\n            return longDelay;\\n        }\\n    }\\n\\n    function onlyIfPastDelay(uint256 delayIndex, uint256 startTime)\\n        internal\\n        view\\n    {\\n        require(1 \\u003e= startTime.add(getDelay(delayIndex)), \\\"Delay not over\\\");\\n    }\\n}\\n\"},\"Timelocked.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\ncontract Timelocked is Ownable {\\n    using SafeMath for uint256;\\n\\n    uint256 public shortDelay;\\n    uint256 public mediumDelay;\\n    uint256 public longDelay;\\n\\n    function setDelays(\\n        uint256 _shortDelay,\\n        uint256 _mediumDelay,\\n        uint256 _longDelay\\n    ) internal virtual {\\n        shortDelay = _shortDelay;\\n        mediumDelay = _mediumDelay;\\n        longDelay = _longDelay;\\n    }\\n\\n    function timeInDays(uint256 num) internal pure returns (uint256) {\\n        return num * 60 * 60 * 24;\\n    }\\n\\n    function getDelay(uint256 delayIndex) public view returns (uint256) {\\n        if (delayIndex == 0) {\\n            return shortDelay;\\n        } else if (delayIndex == 1) {\\n            return mediumDelay;\\n        } else if (delayIndex == 2) {\\n            return longDelay;\\n        }\\n    }\\n\\n    function onlyIfPastDelay(uint256 delayIndex, uint256 startTime)\\n        internal\\n        view\\n    {\\n        require(1 \\u003e= startTime.add(getDelay(delayIndex)), \\\"Delay not over\\\");\\n    }\\n}\\n\"},\"TokenAppController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ITokenManager.sol\\\";\\n\\ncontract TokenAppController is Ownable {\\n    ITokenManager public tokenManager;\\n    address public tokenManagerAddr;\\n\\n    function initTAC() internal {\\n        initOwnable();\\n    }\\n\\n    function setTokenManager(address tokenManagerAddress) internal onlyOwner {\\n        tokenManagerAddr = tokenManagerAddress;\\n        tokenManager = ITokenManager(tokenManagerAddr);\\n    }\\n\\n    function callMint(address _receiver, uint256 _amount) internal onlyOwner {\\n        tokenManager.mint(_receiver, _amount);\\n    }\\n\\n    function callIssue(uint256 _amount) internal onlyOwner {\\n        tokenManager.issue(_amount);\\n    }\\n\\n    function callAssign(address _receiver, uint256 _amount) internal onlyOwner {\\n        tokenManager.assign(_receiver, _amount);\\n    }\\n\\n    function callBurn(address _holder, uint256 _amount) internal onlyOwner {\\n        tokenManager.burn(_holder, _amount);\\n    }\\n\\n    function callAssignVested(\\n        address _receiver,\\n        uint256 _amount,\\n        uint64 _start,\\n        uint64 _cliff,\\n        uint64 _vested,\\n        bool _revokable\\n    ) internal returns (uint256) {\\n        return\\n            tokenManager.assignVested(\\n                _receiver,\\n                _amount,\\n                _start,\\n                _cliff,\\n                _vested,\\n                _revokable\\n            );\\n    }\\n\\n    function callRevokeVesting(address _holder, uint256 _vestingId)\\n        internal\\n        onlyOwner\\n    {\\n        tokenManager.revokeVesting(_holder, _vestingId);\\n    }\\n\\n}\\n\"},\"UpgradeController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./ITransparentUpgradeableProxy.sol\\\";\\nimport \\\"./ControllerBase.sol\\\";\\n\\ncontract UpgradeController is ControllerBase {\\n    using SafeMath for uint256;\\n\\n    \\n    ITransparentUpgradeableProxy private nftxProxy;\\n    ITransparentUpgradeableProxy private xControllerProxy;\\n\\n    constructor(address nftx, address xController) public {\\n        ControllerBase.initialize();\\n        nftxProxy = ITransparentUpgradeableProxy(nftx);\\n        xControllerProxy = ITransparentUpgradeableProxy(xController);\\n    }\\n\\n    function executeFuncCall(uint256 fcId) public override onlyOwner {\\n        super.executeFuncCall(fcId);\\n        if (funcIndex[fcId] == 3) {\\n            nftxProxy.changeAdmin(addressParam[fcId]);\\n        } else if (funcIndex[fcId] == 4) {\\n            nftxProxy.upgradeTo(addressParam[fcId]);\\n        } else if (funcIndex[fcId] == 5) {\\n            xControllerProxy.changeAdmin(addressParam[fcId]);\\n        } else if (funcIndex[fcId] == 6) {\\n            xControllerProxy.upgradeTo(addressParam[fcId]);\\n        }\\n    }\\n\\n}\\n\"},\"XBouties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./TokenAppController.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IXStore.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\ncontract XBounties is TokenAppController, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant BASE = 10**18;\\n    uint256 public interval = 15 * 60; // 15 minutes\\n    uint256 public start = 1608580800; // Mon, Dec 21 2020, 12pm PST\\n    uint64 public vestedUntil = 1609876800; // Tue, Jan 5 2021, 12pm PST\\n\\n    IERC20 public nftxToken;\\n    address payable public daoMultiSig;\\n\\n    struct Bounty {\\n        address tokenContract;\\n        uint256 nftxPrice;\\n        uint256 paidOut;\\n        uint256 payoutCap;\\n    }\\n\\n    event NewBountyAdded(uint256 bountyId);\\n    event BountyFilled(\\n        uint256 bountyId,\\n        uint256 nftxAmount,\\n        uint256 assetAmount,\\n        address sender,\\n        uint64 start,\\n        uint64 cliff,\\n        uint64 vested\\n    );\\n    event NftxPriceSet(uint256 bountyId, uint256 newNftxPrice);\\n    event PayoutCapSet(uint256 bountyId, uint256 newCap);\\n    event BountyClosed(uint256 bountyId);\\n    event EthWithdrawn(uint256 amount);\\n    event Erc20Withdrawn(address tokenContract, uint256 amount);\\n    event Erc721Withdrawn(address nftContract, uint256 tokenId);\\n\\n    Bounty[] internal bounties;\\n\\n    constructor(\\n        address _tokenManager,\\n        address payable _daoMultiSig,\\n        address _nftxToken,\\n        address _xStore\\n    ) public {\\n        initTAC();\\n        setTokenManager(_tokenManager);\\n        daoMultiSig = _daoMultiSig;\\n        nftxToken = IERC20(_nftxToken);\\n\\n        IXStore xStore = IXStore(_xStore);\\n\\n        createEthBounty(130 * BASE, 65000 * BASE);\\n        createEthBounty(65 * BASE, 65000 * BASE);\\n        createEthBounty(BASE.mul(130).div(3), 65000 * BASE);\\n        createBounty(\\n            xStore.xTokenAddress(0), // PUNK-BASIC\\n            390 * BASE,\\n            31200 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(1), // PUNK-ATTR-4\\n            585 * BASE,\\n            14625 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(2), // PUNK-ATTR-5\\n            1950 * BASE,\\n            15600 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(3), // PUNK-ZOMBIE\\n            8450 * BASE,\\n            16900 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(4), // AXIE-ORIGIN\\n            130 * BASE,\\n            7800 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(5), // AXIE-MYSTIC-1\\n            780 * BASE,\\n            7800 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(6), // AXIE-MYSTIC-2\\n            3900 * BASE,\\n            7800 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(7), // KITTY-GEN-0\\n            26 * BASE,\\n            5850 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(8), // KITTY-GEN-0-F\\n            39 * BASE,\\n            5850 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(9), // KITTY-FOUNDER\\n            6175 * BASE,\\n            6175 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(10), // AVASTR-BASIC\\n            20 * BASE,\\n            6175 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(11), // AVASTR-RANK-30\\n            26 * BASE,\\n            6175 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(12), // AVASTR-RANK-60\\n            195 * BASE,\\n            6175 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(13), // GLYPH\\n            1300 * BASE,\\n            26000 * BASE\\n        );\\n        createBounty(\\n            xStore.xTokenAddress(14), // JOY\\n            455 * BASE,\\n            10010 * BASE\\n        );\\n    }\\n\\n    function setStart(uint256 newStart) public onlyOwner {\\n        start = newStart;\\n    }\\n\\n    function setInterval(uint256 newInterval) public onlyOwner {\\n        interval = newInterval;\\n    }\\n\\n    function setVestedUntil(uint64 newTime) public onlyOwner {\\n        vestedUntil = newTime;\\n    }\\n\\n    function getBountyInfo(uint256 bountyId)\\n        public\\n        view\\n        returns (address, uint256, uint256, uint256)\\n    {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        return (\\n            bounties[bountyId].tokenContract,\\n            bounties[bountyId].nftxPrice,\\n            bounties[bountyId].paidOut,\\n            bounties[bountyId].payoutCap\\n        );\\n    }\\n\\n    function getMaxPayout() public view returns (uint256) {\\n        uint256 tMinus4 = start.sub(interval.mul(4));\\n        uint256 tMinus3 = start.sub(interval.mul(3));\\n        uint256 tMinus2 = start.sub(interval.mul(2));\\n        uint256 tMinus1 = start.sub(interval.mul(1));\\n        uint256 tm4Max = 0;\\n        uint256 tm3Max = 50 * BASE;\\n        uint256 tm2Max = 500 * BASE;\\n        uint256 tm1Max = 5000 * BASE;\\n        uint256 tm0Max = 50000 * BASE;\\n        if (now \\u003c tMinus4) {\\n            return 0;\\n        } else if (now \\u003c tMinus3) {\\n            uint256 progressBigNum = now.sub(tMinus4).mul(BASE).div(interval);\\n            uint256 addedPayout = tm3Max.sub(tm4Max).mul(progressBigNum).div(\\n                BASE\\n            );\\n            return tm4Max.add(addedPayout);\\n        } else if (now \\u003c tMinus2) {\\n            uint256 progressBigNum = now.sub(tMinus3).mul(BASE).div(interval);\\n            uint256 addedPayout = tm2Max.sub(tm3Max).mul(progressBigNum).div(\\n                BASE\\n            );\\n            return tm3Max.add(addedPayout);\\n        } else if (now \\u003c tMinus1) {\\n            uint256 progressBigNum = now.sub(tMinus2).mul(BASE).div(interval);\\n            uint256 addedPayout = tm1Max.sub(tm2Max).mul(progressBigNum).div(\\n                BASE\\n            );\\n            return tm2Max.add(addedPayout);\\n        } else if (now \\u003c start) {\\n            uint256 progressBigNum = now.sub(tMinus1).mul(BASE).div(interval);\\n            uint256 addedPayout = tm0Max.sub(tm1Max).mul(progressBigNum).div(\\n                BASE\\n            );\\n            return tm1Max.add(addedPayout);\\n        } else {\\n            return tm0Max;\\n        }\\n    }\\n\\n    function getBountiesLength() public view returns (uint256) {\\n        return bounties.length;\\n    }\\n\\n    function getIsEth(uint256 bountyId) public view returns (bool) {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        return bounties[bountyId].tokenContract == address(0);\\n    }\\n\\n    function getTokenContract(uint256 bountyId) public view returns (address) {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        return bounties[bountyId].tokenContract;\\n    }\\n\\n    function getNftxPrice(uint256 bountyId) public view returns (uint256) {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        return bounties[bountyId].nftxPrice;\\n    }\\n\\n    function getPayoutCap(uint256 bountyId) public view returns (uint256) {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        return bounties[bountyId].payoutCap;\\n    }\\n\\n    function getPaidOut(uint256 bountyId) public view returns (uint256) {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        return bounties[bountyId].paidOut;\\n    }\\n\\n    function setNftxPrice(uint256 bountyId, uint256 newPrice) public onlyOwner {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        bounties[bountyId].nftxPrice = newPrice;\\n        emit NftxPriceSet(bountyId, newPrice);\\n    }\\n\\n    function setPayoutCap(uint256 bountyId, uint256 newCap) public onlyOwner {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        bounties[bountyId].payoutCap = newCap;\\n        emit PayoutCapSet(bountyId, newCap);\\n    }\\n\\n    function createEthBounty(uint256 nftxPricePerEth, uint256 amountOfEth)\\n        public\\n        onlyOwner\\n    {\\n        createBounty(address(0), nftxPricePerEth, amountOfEth);\\n    }\\n\\n    function createBounty(address token, uint256 nftxPrice, uint256 payoutCap)\\n        public\\n        onlyOwner\\n    {\\n        Bounty memory newBounty;\\n        newBounty.tokenContract = token;\\n        newBounty.nftxPrice = nftxPrice;\\n        newBounty.payoutCap = payoutCap;\\n        bounties.push(newBounty);\\n        uint256 bountyId = bounties.length.sub(1);\\n        emit NewBountyAdded(bountyId);\\n    }\\n\\n    function closeBounty(uint256 bountyId) public onlyOwner {\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        bounties[bountyId].payoutCap = bounties[bountyId].paidOut;\\n        emit BountyClosed(bountyId);\\n    }\\n\\n    function fillBounty(uint256 bountyId, uint256 amountBeingSent)\\n        public\\n        payable\\n        nonReentrant\\n    {\\n        _fillBountyCustom(\\n            bountyId,\\n            amountBeingSent,\\n            vestedUntil - 2,\\n            vestedUntil - 1,\\n            vestedUntil\\n        );\\n    }\\n\\n    /* function fillBountyCustom(\\n        uint256 bountyId,\\n        uint256 donationSize,\\n        uint64 _start,\\n        uint64 cliff,\\n        uint64 vested\\n    ) public payable nonReentrant {\\n        _fillBountyCustom(bountyId, donationSize, _start, cliff, vested);\\n    } */\\n\\n    function _fillBountyCustom(\\n        uint256 bountyId,\\n        uint256 donationSize,\\n        uint64 _start,\\n        uint64 cliff,\\n        uint64 vested\\n    ) internal {\\n        require(cliff \\u003e= vestedUntil - 1 \\u0026\\u0026 vested \\u003e= vestedUntil, \\\"Not valid\\\");\\n        require(bountyId \\u003c bounties.length, \\\"Invalid bountyId\\\");\\n        Bounty storage bounty = bounties[bountyId];\\n        uint256 rewardCap = getMaxPayout();\\n        require(rewardCap \\u003e 0, \\\"Must wait for cap to be lifted\\\");\\n        uint256 remainingNftx = bounty.payoutCap.sub(bounty.paidOut);\\n        require(remainingNftx \\u003e 0, \\\"Bounty is already finished\\\");\\n        uint256 requestedNftx = donationSize.mul(bounty.nftxPrice).div(BASE);\\n        uint256 willGive = remainingNftx \\u003c requestedNftx\\n            ? remainingNftx\\n            : rewardCap \\u003c requestedNftx\\n            ? rewardCap\\n            : requestedNftx;\\n        uint256 willTake = donationSize.mul(willGive).div(requestedNftx);\\n        if (getIsEth(bountyId)) {\\n            require(msg.value \\u003e= willTake, \\\"Value sent is insufficient\\\");\\n            if (msg.value \\u003e willTake) {\\n                address payable _sender = msg.sender;\\n                _sender.transfer(msg.value.sub(willTake));\\n            }\\n            daoMultiSig.transfer(willTake);\\n        } else {\\n            IERC20 fundToken = IERC20(bounty.tokenContract);\\n            fundToken.safeTransferFrom(msg.sender, daoMultiSig, willTake);\\n        }\\n        if (now \\u003e vested) {\\n            nftxToken.safeTransfer(msg.sender, willGive);\\n        } else {\\n            nftxToken.safeTransfer(tokenManagerAddr, willGive);\\n            callAssignVested(\\n                msg.sender,\\n                willGive,\\n                _start,\\n                cliff,\\n                vested,\\n                false\\n            );\\n        }\\n        bounty.paidOut = bounty.paidOut.add(willGive);\\n        emit BountyFilled(\\n            bountyId,\\n            willGive,\\n            willTake,\\n            msg.sender,\\n            _start,\\n            cliff,\\n            vested\\n        );\\n    }\\n\\n    function withdrawEth(uint256 amount) public onlyOwner {\\n        address payable sender = msg.sender;\\n        sender.transfer(amount);\\n        emit EthWithdrawn(amount);\\n    }\\n\\n    function withdrawErc20(address tokenContract, uint256 amount)\\n        public\\n        onlyOwner\\n    {\\n        IERC20 token = IERC20(tokenContract);\\n        token.safeTransfer(msg.sender, amount);\\n        emit Erc20Withdrawn(tokenContract, amount);\\n    }\\n\\n    function withdrawErc721(address nftContract, uint256 tokenId)\\n        public\\n        onlyOwner\\n    {\\n        IERC721 nft = IERC721(nftContract);\\n        nft.safeTransferFrom(address(this), msg.sender, tokenId);\\n        emit Erc721Withdrawn(nftContract, tokenId);\\n    }\\n}\\n\"},\"XController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./ControllerBase.sol\\\";\\nimport \\\"./INFTX.sol\\\";\\nimport \\\"./IXStore.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\ncontract XController is ControllerBase {\\n    INFTX private nftx;\\n    IXStore store;\\n\\n    /* uint256 numFuncCalls;\\n\\n    mapping(uint256 =\\u003e uint256) public time;\\n    mapping(uint256 =\\u003e uint256) public funcIndex;\\n    mapping(uint256 =\\u003e address payable) public addressParam;\\n    mapping(uint256 =\\u003e uint256[]) public uintArrayParam; */\\n    mapping(uint256 =\\u003e uint256) public uintParam;\\n    mapping(uint256 =\\u003e string) public stringParam;\\n    mapping(uint256 =\\u003e bool) public boolParam;\\n\\n    mapping(uint256 =\\u003e uint256) public pendingEligAdditions;\\n\\n    function initXController(address nftxAddress) public initializer {\\n        initOwnable();\\n        nftx = INFTX(nftxAddress);\\n    }\\n\\n    function onlyOwnerOrLeadDev(uint256 funcIndex) public view virtual {\\n        if (funcIndex \\u003e 3) {\\n            require(\\n                _msgSender() == leadDev || _msgSender() == owner(),\\n                \\\"Not owner or leadDev\\\"\\n            );\\n        } else {\\n            require(_msgSender() == owner(), \\\"Not owner\\\");\\n        }\\n    }\\n\\n    function stageFuncCall(\\n        uint256 _funcIndex,\\n        address payable _addressParam,\\n        uint256 _uintParam,\\n        string memory _stringParam,\\n        uint256[] memory _uintArrayParam,\\n        bool _boolParam\\n    ) public virtual {\\n        onlyOwnerOrLeadDev(_funcIndex);\\n        uint256 fcId = numFuncCalls;\\n        numFuncCalls = numFuncCalls.add(1);\\n        time[fcId] = 1;\\n        funcIndex[fcId] = _funcIndex;\\n        addressParam[fcId] = _addressParam;\\n        uintParam[fcId] = _uintParam;\\n        stringParam[fcId] = _stringParam;\\n        uintArrayParam[fcId] = _uintArrayParam;\\n        boolParam[fcId] = _boolParam;\\n        if (\\n            funcIndex[fcId] == 4 \\u0026\\u0026\\n            store.negateEligibility(uintParam[fcId]) != !boolParam[fcId]\\n        ) {\\n            pendingEligAdditions[uintParam[fcId]] = pendingEligAdditions[uintParam[fcId]]\\n                .add(uintArrayParam[fcId].length);\\n        }\\n    }\\n\\n    function cancelFuncCall(uint256 fcId) public override virtual {\\n        onlyOwnerOrLeadDev(funcIndex[fcId]);\\n        require(funcIndex[fcId] != 0, \\\"Already cancelled\\\");\\n        funcIndex[fcId] = 0;\\n        if (\\n            funcIndex[fcId] == 3 \\u0026\\u0026\\n            store.negateEligibility(uintParam[fcId]) != !boolParam[fcId]\\n        ) {\\n            pendingEligAdditions[uintParam[fcId]] = pendingEligAdditions[uintParam[fcId]]\\n                .sub(uintArrayParam[fcId].length);\\n        }\\n    }\\n\\n    function executeFuncCall(uint256 fcId) public override virtual {\\n        super.executeFuncCall(fcId);\\n        if (funcIndex[fcId] == 3) {\\n            onlyIfPastDelay(2, time[fcId]);\\n            nftx.transferOwnership(addressParam[fcId]);\\n        } else if (funcIndex[fcId] == 4) {\\n            uint256 percentInc = pendingEligAdditions[uintParam[fcId]]\\n                .mul(100)\\n                .div(nftx.vaultSize(uintParam[fcId]));\\n            if (percentInc \\u003e 10) {\\n                onlyIfPastDelay(2, time[fcId]);\\n            } else if (percentInc \\u003e 1) {\\n                onlyIfPastDelay(1, time[fcId]);\\n            } else {\\n                onlyIfPastDelay(0, time[fcId]);\\n            }\\n            nftx.setIsEligible(\\n                uintParam[fcId],\\n                uintArrayParam[fcId],\\n                boolParam[fcId]\\n            );\\n            pendingEligAdditions[uintParam[fcId]] = pendingEligAdditions[uintParam[fcId]]\\n                .sub(uintArrayParam[fcId].length);\\n        } else if (funcIndex[fcId] == 5) {\\n            onlyIfPastDelay(0, time[fcId]); // vault must be empty\\n            nftx.setNegateEligibility(funcIndex[fcId], boolParam[fcId]);\\n        } else if (funcIndex[fcId] == 6) {\\n            onlyIfPastDelay(0, time[fcId]);\\n            nftx.setShouldReserve(\\n                uintParam[fcId],\\n                uintArrayParam[fcId],\\n                boolParam[fcId]\\n            );\\n        } else if (funcIndex[fcId] == 7) {\\n            onlyIfPastDelay(0, time[fcId]);\\n            nftx.setIsReserved(\\n                uintParam[fcId],\\n                uintArrayParam[fcId],\\n                boolParam[fcId]\\n            );\\n        } else if (funcIndex[fcId] == 8) {\\n            onlyIfPastDelay(1, time[fcId]);\\n            nftx.changeTokenName(uintParam[fcId], stringParam[fcId]);\\n        } else if (funcIndex[fcId] == 9) {\\n            onlyIfPastDelay(1, time[fcId]);\\n            nftx.changeTokenSymbol(uintParam[fcId], stringParam[fcId]);\\n        } else if (funcIndex[fcId] == 10) {\\n            onlyIfPastDelay(0, time[fcId]);\\n            nftx.closeVault(uintParam[fcId]);\\n        } else if (funcIndex[fcId] == 11) {\\n            onlyIfPastDelay(0, time[fcId]);\\n            nftx.setMintFees(\\n                uintArrayParam[fcId][0],\\n                uintArrayParam[fcId][1],\\n                uintArrayParam[fcId][2]\\n            );\\n        } else if (funcIndex[fcId] == 12) {\\n            (uint256 ethBase, uint256 ethStep) = store.burnFees(\\n                uintArrayParam[fcId][0]\\n            );\\n            uint256 ethBasePercentInc = uintArrayParam[fcId][1].mul(100).div(\\n                ethBase\\n            );\\n            uint256 ethStepPercentInc = uintArrayParam[fcId][2].mul(100).div(\\n                ethStep\\n            );\\n            if (ethBasePercentInc.add(ethStepPercentInc) \\u003e 15) {\\n                onlyIfPastDelay(2, time[fcId]);\\n            } else if (ethBasePercentInc.add(ethStepPercentInc) \\u003e 5) {\\n                onlyIfPastDelay(1, time[fcId]);\\n            } else {\\n                onlyIfPastDelay(0, time[fcId]);\\n            }\\n            nftx.setBurnFees(\\n                uintArrayParam[fcId][0],\\n                uintArrayParam[fcId][1],\\n                uintArrayParam[fcId][2]\\n            );\\n        } else if (funcIndex[fcId] == 13) {\\n            onlyIfPastDelay(0, time[fcId]);\\n            nftx.setDualFees(\\n                uintArrayParam[fcId][0],\\n                uintArrayParam[fcId][1],\\n                uintArrayParam[fcId][2]\\n            );\\n        } else if (funcIndex[fcId] == 14) {\\n            (uint256 ethMax, uint256 length) = store.supplierBounty(\\n                uintArrayParam[fcId][0]\\n            );\\n            uint256 ethMaxPercentInc = uintArrayParam[fcId][1].mul(100).div(\\n                ethMax\\n            );\\n            uint256 lengthPercentInc = uintArrayParam[fcId][2].mul(100).div(\\n                length\\n            );\\n            if (ethMaxPercentInc.add(lengthPercentInc) \\u003e 20) {\\n                onlyIfPastDelay(2, time[fcId]);\\n            } else if (ethMaxPercentInc.add(lengthPercentInc) \\u003e 5) {\\n                onlyIfPastDelay(1, time[fcId]);\\n            } else {\\n                onlyIfPastDelay(0, time[fcId]);\\n            }\\n            nftx.setSupplierBounty(\\n                uintArrayParam[fcId][0],\\n                uintArrayParam[fcId][1],\\n                uintArrayParam[fcId][2]\\n            );\\n        }\\n    }\\n\\n}\\n\"},\"XSale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\nimport \\\"./INFTX.sol\\\";\\nimport \\\"./IXStore.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./ITokenManager.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\ncontract XSale is Pausable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    INFTX public nftx;\\n    IXStore public xStore;\\n    IERC20 public nftxToken;\\n    ITokenManager public tokenManager;\\n\\n    uint64 public constant vestedUntil = 1610697600000; // Fri Jan 15 2021 00:00:00 GMT-0800\\n\\n    // Bounty[] public ethBounties;\\n    mapping(uint256 =\\u003e Bounty[]) public xBounties;\\n\\n    struct Bounty {\\n        uint256 reward;\\n        uint256 request;\\n    }\\n\\n    constructor(address _nftx, address _nftxToken, address _tokenManager)\\n        public\\n    {\\n        initOwnable();\\n        nftx = INFTX(_nftx);\\n        xStore = IXStore(nftx.store());\\n        nftxToken = IERC20(_nftxToken);\\n        tokenManager = ITokenManager(_tokenManager);\\n    }\\n\\n    function addXBounty(uint256 vaultId, uint256 reward, uint256 request)\\n        public\\n        onlyOwner\\n    {\\n        Bounty memory newXBounty;\\n        newXBounty.reward = reward;\\n        newXBounty.request = request;\\n        xBounties[vaultId].push(newXBounty);\\n    }\\n\\n    function setXBounty(\\n        uint256 vaultId,\\n        uint256 xBountyIndex,\\n        uint256 newReward,\\n        uint256 newRequest\\n    ) public onlyOwner {\\n        Bounty storage xBounty = xBounties[vaultId][xBountyIndex];\\n        xBounty.reward = newReward;\\n        xBounty.request = newRequest;\\n    }\\n\\n    function withdrawNFTX(address to, uint256 amount) public onlyOwner {\\n        nftxToken.transfer(to, amount);\\n    }\\n\\n    function withdrawXToken(uint256 vaultId, address to, uint256 amount)\\n        public\\n        onlyOwner\\n    {\\n        xStore.xToken(vaultId).transfer(to, amount);\\n    }\\n\\n    function withdrawETH(address payable to, uint256 amount) public onlyOwner {\\n        to.transfer(amount);\\n    }\\n\\n    function fillXBounty(uint256 vaultId, uint256 xBountyIndex, uint256 amount)\\n        public\\n        nonReentrant\\n    {\\n        Bounty storage xBounty = xBounties[vaultId][xBountyIndex];\\n        require(amount \\u003c= xBounty.request, \\\"Amount \\u003e bounty\\\");\\n        require(\\n            amount \\u003c= nftxToken.balanceOf(address(nftx)),\\n            \\\"Amount \\u003e balance\\\"\\n        );\\n        xStore.xToken(vaultId).transferFrom(\\n            _msgSender(),\\n            address(nftx),\\n            amount\\n        );\\n        uint256 reward = xBounty.reward.mul(amount).div(xBounty.request);\\n        xBounty.request = xBounty.request.sub(amount);\\n        xBounty.reward = xBounty.reward.sub(reward);\\n        nftxToken.transfer(address(tokenManager), reward);\\n        tokenManager.assignVested(\\n            _msgSender(),\\n            reward,\\n            vestedUntil,\\n            vestedUntil,\\n            vestedUntil,\\n            false\\n        );\\n    }\\n}\\n\"},\"XStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IXToken.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\ncontract XStore is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    struct FeeParams {\\n        uint256 ethBase;\\n        uint256 ethStep;\\n    }\\n\\n    struct BountyParams {\\n        uint256 ethMax;\\n        uint256 length;\\n    }\\n\\n    struct Vault {\\n        address xTokenAddress;\\n        address nftAddress;\\n        address manager;\\n        IXToken xToken;\\n        IERC721 nft;\\n        EnumerableSet.UintSet holdings;\\n        EnumerableSet.UintSet reserves;\\n        mapping(uint256 =\\u003e address) requester;\\n        mapping(uint256 =\\u003e bool) isEligible;\\n        mapping(uint256 =\\u003e bool) shouldReserve;\\n        bool allowMintRequests;\\n        bool flipEligOnRedeem;\\n        bool negateEligibility;\\n        bool isFinalized;\\n        bool isClosed;\\n        FeeParams mintFees;\\n        FeeParams burnFees;\\n        FeeParams dualFees;\\n        BountyParams supplierBounty;\\n        uint256 ethBalance;\\n        uint256 tokenBalance;\\n        bool isD2Vault;\\n        address d2AssetAddress;\\n        IERC20 d2Asset;\\n        uint256 d2Holdings;\\n    }\\n\\n    event XTokenAddressSet(uint256 indexed vaultId, address token);\\n    event NftAddressSet(uint256 indexed vaultId, address asset);\\n    event ManagerSet(uint256 indexed vaultId, address manager);\\n    event XTokenSet(uint256 indexed vaultId);\\n    event NftSet(uint256 indexed vaultId);\\n    event HoldingsAdded(uint256 indexed vaultId, uint256 id);\\n    event HoldingsRemoved(uint256 indexed vaultId, uint256 id);\\n    event ReservesAdded(uint256 indexed vaultId, uint256 id);\\n    event ReservesRemoved(uint256 indexed vaultId, uint256 id);\\n    event RequesterSet(uint256 indexed vaultId, uint256 id, address requester);\\n    event IsEligibleSet(uint256 indexed vaultId, uint256 id, bool _bool);\\n    event ShouldReserveSet(uint256 indexed vaultId, uint256 id, bool _bool);\\n    event AllowMintRequestsSet(uint256 indexed vaultId, bool isAllowed);\\n    event FlipEligOnRedeemSet(uint256 indexed vaultId, bool _bool);\\n    event NegateEligibilitySet(uint256 indexed vaultId, bool _bool);\\n    event IsFinalizedSet(uint256 indexed vaultId, bool _isFinalized);\\n    event IsClosedSet(uint256 indexed vaultId, bool _isClosed);\\n    event MintFeesSet(\\n        uint256 indexed vaultId,\\n        uint256 ethBase,\\n        uint256 ethStep\\n    );\\n    event BurnFeesSet(\\n        uint256 indexed vaultId,\\n        uint256 ethBase,\\n        uint256 ethStep\\n    );\\n    event DualFeesSet(\\n        uint256 indexed vaultId,\\n        uint256 ethBase,\\n        uint256 ethStep\\n    );\\n    event SupplierBountySet(\\n        uint256 indexed vaultId,\\n        uint256 ethMax,\\n        uint256 length\\n    );\\n    event EthBalanceSet(uint256 indexed vaultId, uint256 _ethBalance);\\n    event TokenBalanceSet(uint256 indexed vaultId, uint256 _tokenBalance);\\n    event IsD2VaultSet(uint256 indexed vaultId, bool _isD2Vault);\\n    event D2AssetAddressSet(uint256 indexed vaultId, address _d2Asset);\\n    event D2AssetSet(uint256 indexed vaultId);\\n    event D2HoldingsSet(uint256 indexed vaultId, uint256 _d2Holdings);\\n    event NewVaultAdded(uint256 indexed vaultId);\\n    event IsExtensionSet(address addr, bool _isExtension);\\n    event RandNonceSet(uint256 _randNonce);\\n\\n    Vault[] internal vaults;\\n\\n    mapping(address =\\u003e bool) public isExtension;\\n    uint256 public randNonce;\\n\\n    constructor() public {\\n        initOwnable();\\n    }\\n\\n    function _getVault(uint256 vaultId) internal view returns (Vault storage) {\\n        require(vaultId \\u003c vaults.length, \\\"Invalid vaultId\\\");\\n        return vaults[vaultId];\\n    }\\n\\n    function vaultsLength() public view returns (uint256) {\\n        return vaults.length;\\n    }\\n\\n    function xTokenAddress(uint256 vaultId) public view returns (address) {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.xTokenAddress;\\n    }\\n\\n    function nftAddress(uint256 vaultId) public view returns (address) {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.nftAddress;\\n    }\\n\\n    function manager(uint256 vaultId) public view returns (address) {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.manager;\\n    }\\n\\n    function xToken(uint256 vaultId) public view returns (IXToken) {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.xToken;\\n    }\\n\\n    function nft(uint256 vaultId) public view returns (IERC721) {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.nft;\\n    }\\n\\n    function holdingsLength(uint256 vaultId) public view returns (uint256) {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.holdings.length();\\n    }\\n\\n    function holdingsContains(uint256 vaultId, uint256 elem)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.holdings.contains(elem);\\n    }\\n\\n    function holdingsAt(uint256 vaultId, uint256 index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.holdings.at(index);\\n    }\\n\\n    function reservesLength(uint256 vaultId) public view returns (uint256) {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.holdings.length();\\n    }\\n\\n    function reservesContains(uint256 vaultId, uint256 elem)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.holdings.contains(elem);\\n    }\\n\\n    function reservesAt(uint256 vaultId, uint256 index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.holdings.at(index);\\n    }\\n\\n    function requester(uint256 vaultId, uint256 id)\\n        public\\n        view\\n        returns (address)\\n    {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.requester[id];\\n    }\\n\\n    function isEligible(uint256 vaultId, uint256 id)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.isEligible[id];\\n    }\\n\\n    function shouldReserve(uint256 vaultId, uint256 id)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.shouldReserve[id];\\n    }\\n\\n    function allowMintRequests(uint256 vaultId) public view returns (bool) {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.allowMintRequests;\\n    }\\n\\n    function flipEligOnRedeem(uint256 vaultId) public view returns (bool) {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.flipEligOnRedeem;\\n    }\\n\\n    function negateEligibility(uint256 vaultId) public view returns (bool) {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.negateEligibility;\\n    }\\n\\n    function isFinalized(uint256 vaultId) public view returns (bool) {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.isFinalized;\\n    }\\n\\n    function isClosed(uint256 vaultId) public view returns (bool) {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.isClosed;\\n    }\\n\\n    function mintFees(uint256 vaultId) public view returns (uint256, uint256) {\\n        Vault storage vault = _getVault(vaultId);\\n        return (vault.mintFees.ethBase, vault.mintFees.ethStep);\\n    }\\n\\n    function burnFees(uint256 vaultId) public view returns (uint256, uint256) {\\n        Vault storage vault = _getVault(vaultId);\\n        return (vault.burnFees.ethBase, vault.burnFees.ethStep);\\n    }\\n\\n    function dualFees(uint256 vaultId) public view returns (uint256, uint256) {\\n        Vault storage vault = _getVault(vaultId);\\n        return (vault.dualFees.ethBase, vault.dualFees.ethStep);\\n    }\\n\\n    function supplierBounty(uint256 vaultId)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        Vault storage vault = _getVault(vaultId);\\n        return (vault.supplierBounty.ethMax, vault.supplierBounty.length);\\n    }\\n\\n    function ethBalance(uint256 vaultId) public view returns (uint256) {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.ethBalance;\\n    }\\n\\n    function tokenBalance(uint256 vaultId) public view returns (uint256) {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.tokenBalance;\\n    }\\n\\n    function isD2Vault(uint256 vaultId) public view returns (bool) {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.isD2Vault;\\n    }\\n\\n    function d2AssetAddress(uint256 vaultId) public view returns (address) {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.d2AssetAddress;\\n    }\\n\\n    function d2Asset(uint256 vaultId) public view returns (IERC20) {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.d2Asset;\\n    }\\n\\n    function d2Holdings(uint256 vaultId) public view returns (uint256) {\\n        Vault storage vault = _getVault(vaultId);\\n        return vault.d2Holdings;\\n    }\\n\\n    function setXTokenAddress(uint256 vaultId, address _xTokenAddress)\\n        public\\n        onlyOwner\\n    {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.xTokenAddress = _xTokenAddress;\\n        emit XTokenAddressSet(vaultId, _xTokenAddress);\\n    }\\n\\n    function setNftAddress(uint256 vaultId, address _nft) public onlyOwner {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.nftAddress = _nft;\\n        emit NftAddressSet(vaultId, _nft);\\n    }\\n\\n    function setManager(uint256 vaultId, address _manager) public onlyOwner {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.manager = _manager;\\n        emit ManagerSet(vaultId, _manager);\\n    }\\n\\n    function setXToken(uint256 vaultId) public onlyOwner {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.xToken = IXToken(vault.xTokenAddress);\\n        emit XTokenSet(vaultId);\\n    }\\n\\n    function setNft(uint256 vaultId) public onlyOwner {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.nft = IERC721(vault.nftAddress);\\n        emit NftSet(vaultId);\\n    }\\n\\n    function holdingsAdd(uint256 vaultId, uint256 elem) public onlyOwner {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.holdings.add(elem);\\n        emit HoldingsAdded(vaultId, elem);\\n    }\\n\\n    function holdingsRemove(uint256 vaultId, uint256 elem) public onlyOwner {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.holdings.remove(elem);\\n        emit HoldingsRemoved(vaultId, elem);\\n    }\\n\\n    function reservesAdd(uint256 vaultId, uint256 elem) public onlyOwner {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.reserves.add(elem);\\n        emit ReservesAdded(vaultId, elem);\\n    }\\n\\n    function reservesRemove(uint256 vaultId, uint256 elem) public onlyOwner {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.reserves.remove(elem);\\n        emit ReservesRemoved(vaultId, elem);\\n    }\\n\\n    function setRequester(uint256 vaultId, uint256 id, address _requester)\\n        public\\n        onlyOwner\\n    {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.requester[id] = _requester;\\n        emit RequesterSet(vaultId, id, _requester);\\n    }\\n\\n    function setIsEligible(uint256 vaultId, uint256 id, bool _bool)\\n        public\\n        onlyOwner\\n    {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.isEligible[id] = _bool;\\n        emit IsEligibleSet(vaultId, id, _bool);\\n    }\\n\\n    function setShouldReserve(uint256 vaultId, uint256 id, bool _shouldReserve)\\n        public\\n        onlyOwner\\n    {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.shouldReserve[id] = _shouldReserve;\\n        emit ShouldReserveSet(vaultId, id, _shouldReserve);\\n    }\\n\\n    function setAllowMintRequests(uint256 vaultId, bool isAllowed)\\n        public\\n        onlyOwner\\n    {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.allowMintRequests = isAllowed;\\n        emit AllowMintRequestsSet(vaultId, isAllowed);\\n    }\\n\\n    function setFlipEligOnRedeem(uint256 vaultId, bool flipElig)\\n        public\\n        onlyOwner\\n    {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.flipEligOnRedeem = flipElig;\\n        emit FlipEligOnRedeemSet(vaultId, flipElig);\\n    }\\n\\n    function setNegateEligibility(uint256 vaultId, bool negateElig)\\n        public\\n        onlyOwner\\n    {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.negateEligibility = negateElig;\\n        emit NegateEligibilitySet(vaultId, negateElig);\\n    }\\n\\n    function setIsFinalized(uint256 vaultId, bool _isFinalized)\\n        public\\n        onlyOwner\\n    {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.isFinalized = _isFinalized;\\n        emit IsFinalizedSet(vaultId, _isFinalized);\\n    }\\n\\n    function setIsClosed(uint256 vaultId, bool _isClosed) public onlyOwner {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.isClosed = _isClosed;\\n        emit IsClosedSet(vaultId, _isClosed);\\n    }\\n\\n    function setMintFees(uint256 vaultId, uint256 ethBase, uint256 ethStep)\\n        public\\n        onlyOwner\\n    {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.mintFees = FeeParams(ethBase, ethStep);\\n        emit MintFeesSet(vaultId, ethBase, ethStep);\\n    }\\n\\n    function setBurnFees(uint256 vaultId, uint256 ethBase, uint256 ethStep)\\n        public\\n        onlyOwner\\n    {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.burnFees = FeeParams(ethBase, ethStep);\\n        emit BurnFeesSet(vaultId, ethBase, ethStep);\\n    }\\n\\n    function setDualFees(uint256 vaultId, uint256 ethBase, uint256 ethStep)\\n        public\\n        onlyOwner\\n    {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.dualFees = FeeParams(ethBase, ethStep);\\n        emit DualFeesSet(vaultId, ethBase, ethStep);\\n    }\\n\\n    function setSupplierBounty(uint256 vaultId, uint256 ethMax, uint256 length)\\n        public\\n        onlyOwner\\n    {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.supplierBounty = BountyParams(ethMax, length);\\n        emit SupplierBountySet(vaultId, ethMax, length);\\n    }\\n\\n    function setEthBalance(uint256 vaultId, uint256 _ethBalance)\\n        public\\n        onlyOwner\\n    {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.ethBalance = _ethBalance;\\n        emit EthBalanceSet(vaultId, _ethBalance);\\n    }\\n\\n    function setTokenBalance(uint256 vaultId, uint256 _tokenBalance)\\n        public\\n        onlyOwner\\n    {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.tokenBalance = _tokenBalance;\\n        emit TokenBalanceSet(vaultId, _tokenBalance);\\n    }\\n\\n    function setIsD2Vault(uint256 vaultId, bool _isD2Vault) public onlyOwner {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.isD2Vault = _isD2Vault;\\n        emit IsD2VaultSet(vaultId, _isD2Vault);\\n    }\\n\\n    function setD2AssetAddress(uint256 vaultId, address _d2Asset)\\n        public\\n        onlyOwner\\n    {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.d2AssetAddress = _d2Asset;\\n        emit D2AssetAddressSet(vaultId, _d2Asset);\\n    }\\n\\n    function setD2Asset(uint256 vaultId) public onlyOwner {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.d2Asset = IERC20(vault.d2AssetAddress);\\n        emit D2AssetSet(vaultId);\\n    }\\n\\n    function setD2Holdings(uint256 vaultId, uint256 _d2Holdings)\\n        public\\n        onlyOwner\\n    {\\n        Vault storage vault = _getVault(vaultId);\\n        vault.d2Holdings = _d2Holdings;\\n        emit D2HoldingsSet(vaultId, _d2Holdings);\\n    }\\n\\n    ////////////////////////////////////////////////////////////\\n\\n    function addNewVault() public onlyOwner returns (uint256) {\\n        Vault memory newVault;\\n        vaults.push(newVault);\\n        uint256 vaultId = vaults.length.sub(1);\\n        emit NewVaultAdded(vaultId);\\n        return vaultId;\\n    }\\n\\n    function setIsExtension(address addr, bool _isExtension) public onlyOwner {\\n        isExtension[addr] = _isExtension;\\n        emit IsExtensionSet(addr, _isExtension);\\n    }\\n\\n    function setRandNonce(uint256 _randNonce) public onlyOwner {\\n        randNonce = _randNonce;\\n        emit RandNonceSet(_randNonce);\\n    }\\n}\\n\"},\"XToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./ERC20Burnable.sol\\\";\\n\\ncontract XToken is Context, Ownable, ERC20Burnable {\\n    constructor(string memory name, string memory symbol, address _owner)\\n        public\\n        ERC20(name, symbol)\\n    {\\n        initOwnable();\\n        transferOwnership(_owner);\\n        _mint(msg.sender, 0);\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyOwner {\\n        _mint(to, amount);\\n    }\\n\\n    function changeName(string memory name) public onlyOwner {\\n        _changeName(name);\\n    }\\n\\n    function changeSymbol(string memory symbol) public onlyOwner {\\n        _changeSymbol(symbol);\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"changeSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "XToken", "CompilerVersion": "v0.6.8+commit.0bbfe453", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000af93fcce0548d3124a5fc3045adaf1dde4e8bf7e000000000000000000000000000000000000000000000000000000000000000a50756e6b2d426173696300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a50554e4b2d424153494300000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ae8763d5b7dccef1e5c85eb0e4132d1e9ebdbfbe0551c813cef8d5cdbac6bf59"}