{"SourceCode": "pragma solidity ^0.4.18;\r\n\r\n// If you wanna escape this contract REALLY FAST\r\n// 1. open MEW/METAMASK\r\n// 2. Put this as data: 0xb1e35242\r\n// 3. send 150000+ gas\r\n// That calls the getMeOutOfHere() method\r\n// Remember, cashout fee is 10% :^)\r\n\r\n// PROOF OF STEEL HANDS Version, 10% Fee on Purchase and Sell\r\ncontract PonziToken {\r\n\tuint256 constant PRECISION = 0x10000000000000000;  // 2^64\r\n\t// CRR = 50%\r\n\tint constant CRRN = 1;\r\n\tint constant CRRD = 2;\r\n\t// The price coefficient. Chosen such that at 1 token total supply\r\n\t// the reserve is 0.5ether and price 1 ether/token.\r\n\t// stop being a memelord no this does not mean only 50% of people can cash out\r\n\tint constant LOGC = -0x296ABF784A358468C;\r\n\t\r\n\tstring constant public name = \"POWHShadow\";\r\n\tstring constant public symbol = \"PWHS\";\r\n\tuint8 constant public decimals = 18;\r\n\tuint256 public totalSupply;\r\n\t// amount of shares for each address (scaled number)\r\n\tmapping(address => uint256) public balanceOfOld;\r\n\t// allowance map, see erc20\r\n\tmapping(address => mapping(address => uint256)) public allowance;\r\n\t// amount payed out for each address (scaled number)\r\n\tmapping(address => int256) payouts;\r\n\t// sum of all payouts (scaled number)\r\n\tint256 totalPayouts;\r\n\t// amount earned for each share (scaled number)\r\n\tuint256 earningsPerShare;\r\n\t\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\t//address owner;\r\n\r\n\tfunction PonziToken() public {\r\n\t\t//owner = msg.sender;\r\n\t}\r\n\t\r\n\t// These are functions solely created to appease the frontend\r\n\tfunction balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balanceOfOld[_owner];\r\n    }\r\n\r\n\tfunction withdraw(uint tokenCount) // the parameter is ignored, yes\r\n      public\r\n      returns (bool)\r\n    {\r\n\t\tvar balance = dividends(msg.sender);\r\n\t\tpayouts[msg.sender] += (int256) (balance * PRECISION);\r\n\t\ttotalPayouts += (int256) (balance * PRECISION);\r\n\t\tmsg.sender.transfer(balance);\r\n\t\treturn true;\r\n    }\r\n\t\r\n\tfunction sellMyTokensDaddy() public {\r\n\t\tvar balance = balanceOf(msg.sender);\r\n\t\ttransferTokens(msg.sender, address(this),  balance); // this triggers the internal sell function\r\n\t}\r\n\r\n    function getMeOutOfHere() public {\r\n\t\tsellMyTokensDaddy();\r\n        withdraw(1); // parameter is ignored\r\n\t}\r\n\t\r\n\tfunction fund()\r\n      public\r\n      payable \r\n      returns (bool)\r\n    {\r\n      if (msg.value > 0.000001 ether)\r\n\t\t\tbuy();\r\n\t\telse\r\n\t\t\treturn false;\r\n\t  \r\n      return true;\r\n    }\r\n\r\n\tfunction buyPrice() public constant returns (uint) {\r\n\t\treturn getTokensForEther(1 finney);\r\n\t}\r\n\t\r\n\tfunction sellPrice() public constant returns (uint) {\r\n\t\treturn getEtherForTokens(1 finney);\r\n\t}\r\n\r\n\t// End of useless functions\r\n\r\n\t// Invariants\r\n\t// totalPayout/Supply correct:\r\n\t//   totalPayouts = \\sum_{addr:address} payouts(addr)\r\n\t//   totalSupply  = \\sum_{addr:address} balanceOfOld(addr)\r\n\t// dividends not negative:\r\n\t//   \\forall addr:address. payouts[addr] <= earningsPerShare * balanceOfOld[addr]\r\n\t// supply/reserve correlation:\r\n\t//   totalSupply ~= exp(LOGC + CRRN/CRRD*log(reserve())\r\n\t//   i.e. totalSupply = C * reserve()**CRR\r\n\t// reserve equals balance minus payouts\r\n\t//   reserve() = this.balance - \\sum_{addr:address} dividends(addr)\r\n\r\n\tfunction transferTokens(address _from, address _to, uint256 _value) internal {\r\n\t\tif (balanceOfOld[_from] < _value)\r\n\t\t\trevert();\r\n\t\tif (_to == address(this)) {\r\n\t\t\tsell(_value);\r\n\t\t} else {\r\n\t\t    int256 payoutDiff = (int256) (earningsPerShare * _value);\r\n\t\t    balanceOfOld[_from] -= _value;\r\n\t\t    balanceOfOld[_to] += _value;\r\n\t\t    payouts[_from] -= payoutDiff;\r\n\t\t    payouts[_to] += payoutDiff;\r\n\t\t}\r\n\t\tTransfer(_from, _to, _value);\r\n\t}\r\n\t\r\n\tfunction transfer(address _to, uint256 _value) public {\r\n\t    transferTokens(msg.sender, _to,  _value);\r\n\t}\r\n\t\r\n    function transferFrom(address _from, address _to, uint256 _value) public {\r\n        var _allowance = allowance[_from][msg.sender];\r\n        if (_allowance < _value)\r\n            revert();\r\n        allowance[_from][msg.sender] = _allowance - _value;\r\n        transferTokens(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public {\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        if ((_value != 0) && (allowance[msg.sender][_spender] != 0)) revert();\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n    }\r\n\r\n\tfunction dividends(address _owner) public constant returns (uint256 amount) {\r\n\t\treturn (uint256) ((int256)(earningsPerShare * balanceOfOld[_owner]) - payouts[_owner]) / PRECISION;\r\n\t}\r\n\r\n\tfunction withdrawOld(address to) public {\r\n\t\tvar balance = dividends(msg.sender);\r\n\t\tpayouts[msg.sender] += (int256) (balance * PRECISION);\r\n\t\ttotalPayouts += (int256) (balance * PRECISION);\r\n\t\tto.transfer(balance);\r\n\t}\r\n\r\n\tfunction balance() internal constant returns (uint256 amount) {\r\n\t\treturn this.balance - msg.value;\r\n\t}\r\n\tfunction reserve() public constant returns (uint256 amount) {\r\n\t\treturn balance()\r\n\t\t\t- ((uint256) ((int256) (earningsPerShare * totalSupply) - totalPayouts) / PRECISION) - 1;\r\n\t}\r\n\r\n\tfunction buy() internal {\r\n\t\tif (msg.value < 0.000001 ether || msg.value > 1000000 ether)\r\n\t\t\trevert();\r\n\t\tvar sender = msg.sender;\r\n\t\t// 10 % of the amount is used to pay holders.\r\n\t\tvar fee = (uint)(msg.value / 10);\r\n\t\t\r\n\t\t// compute number of bought tokens\r\n\t\tvar numEther = msg.value - fee;\r\n\t\tvar numTokens = getTokensForEther(numEther);\r\n\r\n\t\tvar buyerfee = fee * PRECISION;\r\n\t\tif (totalSupply > 0) {\r\n\t\t\t// compute how the fee distributed to previous holders and buyer.\r\n\t\t\t// The buyer already gets a part of the fee as if he would buy each token separately.\r\n\t\t\tvar holderreward =\r\n\t\t\t    (PRECISION - (reserve() + numEther) * numTokens * PRECISION / (totalSupply + numTokens) / numEther)\r\n\t\t\t    * (uint)(CRRD) / (uint)(CRRD-CRRN);\r\n\t\t\tvar holderfee = fee * holderreward;\r\n\t\t\tbuyerfee -= holderfee;\r\n\t\t\r\n\t\t\t// Fee is distributed to all existing tokens before buying\r\n\t\t\tvar feePerShare = holderfee / totalSupply;\r\n\t\t\tearningsPerShare += feePerShare;\r\n\t\t}\r\n\t\t// add numTokens to total supply\r\n\t\ttotalSupply += numTokens;\r\n\t\t// add numTokens to balance\r\n\t\tbalanceOfOld[sender] += numTokens;\r\n\t\t// fix payouts so that sender doesn't get old earnings for the new tokens.\r\n\t\t// also add its buyerfee\r\n\t\tvar payoutDiff = (int256) ((earningsPerShare * numTokens) - buyerfee);\r\n\t\tpayouts[sender] += payoutDiff;\r\n\t\ttotalPayouts += payoutDiff;\r\n\t}\r\n\t\r\n\tfunction sell(uint256 amount) internal {\r\n\t\tvar fees = (uint)(getEtherForTokens(amount)/10);\r\n\t\tvar numEthers = getEtherForTokens(amount) - fees;\r\n\t\t// remove tokens\r\n\t\ttotalSupply -= amount;\r\n\t\tbalanceOfOld[msg.sender] -= amount;\r\n\t\t\r\n\t\t// fix payouts and put the ethers in payout\r\n\t\tvar payoutDiff = (int256) (earningsPerShare * amount + (numEthers * PRECISION));\r\n\t\tpayouts[msg.sender] -= payoutDiff;\r\n\t\ttotalPayouts -= payoutDiff;\r\n\r\n\t}\r\n\tfunction getTokensForEther(uint256 ethervalue) public constant returns (uint256 tokens) {\r\n\t\treturn fixedExp(fixedLog(reserve() + ethervalue)*CRRN/CRRD + LOGC) - totalSupply;\r\n\t}\r\n\r\n\tfunction getEtherForTokens(uint256 tokens) public constant returns (uint256 ethervalue) {\r\n\t\tif (tokens == totalSupply)\r\n\t\t\treturn reserve();\r\n\t\treturn reserve() - fixedExp((fixedLog(totalSupply - tokens) - LOGC) * CRRD/CRRN);\r\n\t}\r\n\r\n\tint256 constant one       = 0x10000000000000000;\r\n\tuint256 constant sqrt2    = 0x16a09e667f3bcc908;\r\n\tuint256 constant sqrtdot5 = 0x0b504f333f9de6484;\r\n\tint256 constant ln2       = 0x0b17217f7d1cf79ac;\r\n\tint256 constant ln2_64dot5= 0x2cb53f09f05cc627c8;\r\n\tint256 constant c1        = 0x1ffffffffff9dac9b;\r\n\tint256 constant c3        = 0x0aaaaaaac16877908;\r\n\tint256 constant c5        = 0x0666664e5e9fa0c99;\r\n\tint256 constant c7        = 0x049254026a7630acf;\r\n\tint256 constant c9        = 0x038bd75ed37753d68;\r\n\tint256 constant c11       = 0x03284a0c14610924f;\r\n\r\n\tfunction fixedLog(uint256 a) internal pure returns (int256 log) {\r\n\t\tint32 scale = 0;\r\n\t\twhile (a > sqrt2) {\r\n\t\t\ta /= 2;\r\n\t\t\tscale++;\r\n\t\t}\r\n\t\twhile (a <= sqrtdot5) {\r\n\t\t\ta *= 2;\r\n\t\t\tscale--;\r\n\t\t}\r\n\t\tint256 s = (((int256)(a) - one) * one) / ((int256)(a) + one);\r\n\t\t// The polynomial R = c1*x + c3*x^3 + ... + c11 * x^11\r\n\t\t// approximates the function log(1+x)-log(1-x)\r\n\t\t// Hence R(s) = log((1+s)/(1-s)) = log(a)\r\n\t\tvar z = (s*s) / one;\r\n\t\treturn scale * ln2 +\r\n\t\t\t(s*(c1 + (z*(c3 + (z*(c5 + (z*(c7 + (z*(c9 + (z*c11/one))\r\n\t\t\t\t/one))/one))/one))/one))/one);\r\n\t}\r\n\r\n\tint256 constant c2 =  0x02aaaaaaaaa015db0;\r\n\tint256 constant c4 = -0x000b60b60808399d1;\r\n\tint256 constant c6 =  0x0000455956bccdd06;\r\n\tint256 constant c8 = -0x000001b893ad04b3a;\r\n\tfunction fixedExp(int256 a) internal pure returns (uint256 exp) {\r\n\t\tint256 scale = (a + (ln2_64dot5)) / ln2 - 64;\r\n\t\ta -= scale*ln2;\r\n\t\t// The polynomial R = 2 + c2*x^2 + c4*x^4 + ...\r\n\t\t// approximates the function x*(exp(x)+1)/(exp(x)-1)\r\n\t\t// Hence exp(x) = (R(x)+x)/(R(x)-x)\r\n\t\tint256 z = (a*a) / one;\r\n\t\tint256 R = ((int256)(2) * one) +\r\n\t\t\t(z*(c2 + (z*(c4 + (z*(c6 + (z*c8/one))/one))/one))/one);\r\n\t\texp = (uint256) (((R + a) * one) / (R - a));\r\n\t\tif (scale >= 0)\r\n\t\t\texp <<= scale;\r\n\t\telse\r\n\t\t\texp >>= -scale;\r\n\t\treturn exp;\r\n\t}\r\n\r\n\t/*function destroy() external {\r\n\t    selfdestruct(owner);\r\n\t}*/\r\n\r\n\tfunction () payable public {\r\n\t\tif (msg.value > 0)\r\n\t\t\tbuy();\r\n\t\telse\r\n\t\t\twithdrawOld(msg.sender);\r\n\t}\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOfOld\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawOld\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethervalue\",\"type\":\"uint256\"}],\"name\":\"getTokensForEther\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"dividends\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellMyTokensDaddy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMeOutOfHere\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"getEtherForTokens\",\"outputs\":[{\"name\":\"ethervalue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "PonziToken", "CompilerVersion": "v0.4.18+commit.9cf6e910", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://05e743977a50068b9c9578f15b3acf4aa09c53b93c1862db27f8e186dc9ac604"}