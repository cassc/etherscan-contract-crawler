{"SourceCode": "{\"AFiOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.0;\\n\\nimport \\\"./IUniswapV3Factory.sol\\\";\\nimport \\\"./OracleLibrary.sol\\\";\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\ncontract AFiOracle is Ownable {\\n  address public pool;\\n  uint24 public _fee = 10000;\\n  uint32 public secondsAgo = 900;\\n\\n  address _factory = 0x1F98431c8aD98523631AE4a59f267346ea31F984;\\n  address usdcAddress = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n\\n  /**\\n   * @notice To get the number of USDC tokens for aFi vault.\\n   * @param tokenIn Address of underlying token from set.\\n   * @param amountIn Amount of underlying token\\n   * @param tokenOut Address of the underlying token for aFi contract(USDC).\\n   */\\n  function estimateAmountOut(\\n    address tokenIn,\\n    uint128 amountIn,\\n    address tokenOut\\n  ) external view returns (uint amountOut) {\\n    address _pool = IUniswapV3Factory(_factory).getPool(tokenOut, tokenIn, _fee);\\n    require(_pool != address(0), \\\"pool doesn\\u0027t exist\\\");\\n\\n    uint32[] memory secondsAgos = new uint32[](2);\\n    secondsAgos[0] = secondsAgo;\\n    secondsAgos[1] = 0;\\n\\n    // int56 since tick * time = int24 * uint32\\n    // 56 = 24 + 32\\n    (int56[] memory tickCumulatives, ) = IUniswapV3Pool(_pool).observe(secondsAgos);\\n\\n    int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\\n\\n    // int56 / uint32 = int24\\n    int24 tick = int24(tickCumulativesDelta / secondsAgo);\\n    // Always round to negative infinity\\n    /*\\n      int doesn\\u0027t round down when it is negative\\n\\n      int56 a = -3\\n      -3 / 10 = -3.3333... so round down to -4\\n      but we get\\n      a / 10 = -3\\n\\n      so if tickCumulativeDelta \\u003c 0 and division has remainder, then round\\n      down\\n      */\\n    if (tickCumulativesDelta \\u003c 0 \\u0026\\u0026 (tickCumulativesDelta % secondsAgo != 0)) {\\n      tick--;\\n    }\\n    amountOut = OracleLibrary.getQuoteAtTick(tick, amountIn, tokenIn, tokenOut);\\n  }\\n\\n  function estimateAmountOutMin(\\n    address tokenIn,\\n    uint128 amountIn,\\n    address tokenOut,\\n    address poolToConsider\\n  ) external view returns (uint amountOut) {\\n    require(poolToConsider != address(0), \\\"pool doesn\\u0027t exist\\\");\\n    uint32[] memory secondsAgos = new uint32[](2);\\n    secondsAgos[0] = secondsAgo;\\n    secondsAgos[1] = 0;\\n\\n    // int56 since tick * time = int24 * uint32\\n    // 56 = 24 + 32\\n    (int56[] memory tickCumulatives, ) = IUniswapV3Pool(poolToConsider).observe(secondsAgos);\\n\\n    int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\\n\\n    // int56 / uint32 = int24\\n    int24 tick = int24(tickCumulativesDelta / secondsAgo);\\n    // Always round to negative infinity\\n    /*\\n      int doesn\\u0027t round down when it is negative\\n\\n      int56 a = -3\\n      -3 / 10 = -3.3333... so round down to -4\\n      but we get\\n      a / 10 = -3\\n\\n      so if tickCumulativeDelta \\u003c 0 and division has remainder, then round\\n      down\\n      */\\n    if (tickCumulativesDelta \\u003c 0 \\u0026\\u0026 (tickCumulativesDelta % secondsAgo != 0)) {\\n      tick--;\\n    }\\n\\n    amountOut = OracleLibrary.getQuoteAtTick(tick, amountIn, tokenIn, tokenOut);\\n  }\\n\\n  /**\\n   * @notice Checks if there is a Uniswap pool for the underlying token.\\n   * @param token Address of the token to check.\\n   * @return hasPool Boolean indicating if the token has a pool.\\n   */\\n  function checkUnderlyingPool(address token) external view returns (bool hasPool) {\\n    address _pool = IUniswapV3Factory(_factory).getPool(token, usdcAddress, _fee);\\n    hasPool = (_pool != address(0));\\n  }\\n\\n  function increaseObservation(address _pool, uint16 observationCardinalityNext) external {\\n    IUniswapV3Pool(_pool).increaseObservationCardinalityNext(observationCardinalityNext);\\n  }   \\n\\n  function updateSecAgo(uint32 sec) external onlyOwner{\\n    secondsAgo = sec;\\n  } \\n\\n  function updateGlobalFees(uint24 fees) external onlyOwner{\\n    _fee = fees;\\n  } \\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity =0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n  /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n  /// @param a The multiplicand\\n  /// @param b The multiplier\\n  /// @param denominator The divisor\\n  /// @return result The 256-bit result\\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n  function mulDiv(\\n    uint256 a,\\n    uint256 b,\\n    uint256 denominator\\n  ) internal pure returns (uint256 result) {\\n    // 512-bit multiply [prod1 prod0] = a * b\\n    // Compute the product mod 2**256 and mod 2**256 - 1\\n    // then use the Chinese Remainder Theorem to reconstruct\\n    // the 512 bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2**256 + prod0\\n    uint256 prod0; // Least significant 256 bits of the product\\n    uint256 prod1; // Most significant 256 bits of the product\\n    assembly {\\n      let mm := mulmod(a, b, not(0))\\n      prod0 := mul(a, b)\\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    // Handle non-overflow cases, 256 by 256 division\\n    if (prod1 == 0) {\\n      require(denominator \\u003e 0);\\n      assembly {\\n        result := div(prod0, denominator)\\n      }\\n      return result;\\n    }\\n\\n    // Make sure the result is less than 2**256.\\n    // Also prevents denominator == 0\\n    require(denominator \\u003e prod1);\\n\\n    ///////////////////////////////////////////////\\n    // 512 by 256 division.\\n    ///////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0]\\n    // Compute remainder using mulmod\\n    uint256 remainder;\\n    assembly {\\n      remainder := mulmod(a, b, denominator)\\n    }\\n    // Subtract 256 bit number from 512 bit number\\n    assembly {\\n      prod1 := sub(prod1, gt(remainder, prod0))\\n      prod0 := sub(prod0, remainder)\\n    }\\n\\n    // Factor powers of two out of denominator\\n    // Compute largest power of two divisor of denominator.\\n    // Always \\u003e= 1.\\n    uint256 twos = denominator \\u0026 (~denominator + 1);\\n    // Divide denominator by power of two\\n    assembly {\\n      denominator := div(denominator, twos)\\n    }\\n\\n    // Divide [prod1 prod0] by the factors of two\\n    assembly {\\n      prod0 := div(prod0, twos)\\n    }\\n    // Shift in bits from prod1 into prod0. For this we need\\n    // to flip `twos` such that it is 2**256 / twos.\\n    // If twos is zero, then it becomes one\\n    assembly {\\n      twos := add(div(sub(0, twos), twos), 1)\\n    }\\n    prod0 |= prod1 * twos;\\n\\n    // Invert denominator mod 2**256\\n    // Now that denominator is an odd number, it has an inverse\\n    // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n    // Compute the inverse by starting with a seed that is correct\\n    // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n    uint256 inv = (3 * denominator) ^ 2;\\n    // Now use Newton-Raphson iteration to improve the precision.\\n    // Thanks to Hensel\\u0027s lifting lemma, this also works in modular\\n    // arithmetic, doubling the correct bits in each step.\\n    inv *= 2 - denominator * inv; // inverse mod 2**8\\n    inv *= 2 - denominator * inv; // inverse mod 2**16\\n    inv *= 2 - denominator * inv; // inverse mod 2**32\\n    inv *= 2 - denominator * inv; // inverse mod 2**64\\n    inv *= 2 - denominator * inv; // inverse mod 2**128\\n    inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n    // Because the division is now exact we can divide by multiplying\\n    // with the modular inverse of denominator. This will give us the\\n    // correct result modulo 2**256. Since the precoditions guarantee\\n    // that the outcome is less than 2**256, this is the final result.\\n    // We don\\u0027t need to compute the high bits of the result and prod1\\n    // is no longer required.\\n    result = prod0 * inv;\\n    return result;\\n  }\\n}\\n\"},\"IUniswapV3Factory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n  /// @notice Emitted when the owner of the factory is changed\\n  /// @param oldOwner The owner before the owner was changed\\n  /// @param newOwner The owner after the owner was changed\\n  event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n  /// @notice Emitted when a pool is created\\n  /// @param token0 The first token of the pool by address sort order\\n  /// @param token1 The second token of the pool by address sort order\\n  /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n  /// @param tickSpacing The minimum number of ticks between initialized ticks\\n  /// @param pool The address of the created pool\\n  event PoolCreated(\\n    address indexed token0,\\n    address indexed token1,\\n    uint24 indexed fee,\\n    int24 tickSpacing,\\n    address pool\\n  );\\n\\n  /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n  /// @param fee The enabled fee, denominated in hundredths of a bip\\n  /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n  event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n  /// @notice Returns the current owner of the factory\\n  /// @dev Can be changed by the current owner via setOwner\\n  /// @return The address of the factory owner\\n  function owner() external view returns (address);\\n\\n  /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n  /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n  /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n  /// @return The tick spacing\\n  function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n  /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n  /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n  /// @param tokenA The contract address of either token0 or token1\\n  /// @param tokenB The contract address of the other token\\n  /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n  /// @return pool The pool address\\n  function getPool(\\n    address tokenA,\\n    address tokenB,\\n    uint24 fee\\n  ) external view returns (address pool);\\n\\n  /// @notice Creates a pool for the given two tokens and fee\\n  /// @param tokenA One of the two tokens in the desired pool\\n  /// @param tokenB The other of the two tokens in the desired pool\\n  /// @param fee The desired fee for the pool\\n  /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n  /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n  /// are invalid.\\n  /// @return pool The address of the newly created pool\\n  function createPool(\\n    address tokenA,\\n    address tokenB,\\n    uint24 fee\\n  ) external returns (address pool);\\n\\n  /// @notice Updates the owner of the factory\\n  /// @dev Must be called by the current owner\\n  /// @param _owner The new owner of the factory\\n  function setOwner(address _owner) external;\\n\\n  /// @notice Enables a fee amount with the given tickSpacing\\n  /// @dev Fee amounts may never be removed once enabled\\n  /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n  /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n  function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\\ninterface IUniswapV3Pool {\\n  function observe(\\n    uint32[] calldata secondsAgos\\n  ) external\\n    view\\n    returns (\\n      int56[] memory tickCumulatives,\\n      uint160[] memory secondsPerLiquidityCumulativeX128s\\n    );\\n\\n  function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n  function fee() external returns(uint24);\\n}\\n\"},\"OracleLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity =0.8.0;\\n\\nimport \\\"./TickMath.sol\\\";\\nimport \\\"./FullMath.sol\\\";\\n\\nlibrary OracleLibrary {\\n  /// @notice Given a tick and a token amount, calculates the amount of token received in exchange\\n  /// @param tick Tick value used to calculate the quote\\n  /// @param baseAmount Amount of token to be converted\\n  /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\n  /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\n  /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\\n  function getQuoteAtTick(\\n    int24 tick,\\n    uint128 baseAmount,\\n    address baseToken,\\n    address quoteToken\\n  ) internal pure returns (uint256 quoteAmount) {\\n    uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\\n\\n    // Calculate quoteAmount with better precision if it doesn\\u0027t overflow when multiplied by itself\\n    if (sqrtRatioX96 \\u003c= type(uint128).max) {\\n      uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\\n      quoteAmount = baseToken \\u003c quoteToken\\n        ? FullMath.mulDiv(ratioX192, baseAmount, 1 \\u003c\\u003c 192)\\n        : FullMath.mulDiv(1 \\u003c\\u003c 192, baseAmount, ratioX192);\\n    } else {\\n      uint256 ratioX128 = FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 \\u003c\\u003c 64);\\n      quoteAmount = baseToken \\u003c quoteToken\\n        ? FullMath.mulDiv(ratioX128, baseAmount, 1 \\u003c\\u003c 128)\\n        : FullMath.mulDiv(1 \\u003c\\u003c 128, baseAmount, ratioX128);\\n    }\\n  }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity =0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n  /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n  int24 internal constant MIN_TICK = -887272;\\n  /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n  int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n  uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n  uint160 internal constant MAX_SQRT_RATIO =\\n    1461446703485210103287273052203988822378723970342;\\n\\n  /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n  /// @dev Throws if |tick| \\u003e max tick\\n  /// @param tick The input tick for the above formula\\n  /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n  /// at the given tick\\n  function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n    int24 absTick = tick \\u003c 0 ? (-(tick)) : ((tick));\\n    require(absTick \\u003c= MAX_TICK, \\\"T\\\");\\n\\n    uint256 ratio = absTick \\u0026 0x1 != 0\\n      ? 0xfffcb933bd6fad37aa2d162d1a594001\\n      : 0x100000000000000000000000000000000;\\n    if (absTick \\u0026 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) \\u003e\\u003e 128;\\n    if (absTick \\u0026 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) \\u003e\\u003e 128;\\n    if (absTick \\u0026 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) \\u003e\\u003e 128;\\n    if (absTick \\u0026 0x10 != 0)\\n      ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) \\u003e\\u003e 128;\\n    if (absTick \\u0026 0x20 != 0)\\n      ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) \\u003e\\u003e 128;\\n    if (absTick \\u0026 0x40 != 0)\\n      ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) \\u003e\\u003e 128;\\n    if (absTick \\u0026 0x80 != 0)\\n      ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) \\u003e\\u003e 128;\\n    if (absTick \\u0026 0x100 != 0)\\n      ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) \\u003e\\u003e 128;\\n    if (absTick \\u0026 0x200 != 0)\\n      ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) \\u003e\\u003e 128;\\n    if (absTick \\u0026 0x400 != 0)\\n      ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) \\u003e\\u003e 128;\\n    if (absTick \\u0026 0x800 != 0)\\n      ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) \\u003e\\u003e 128;\\n    if (absTick \\u0026 0x1000 != 0)\\n      ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) \\u003e\\u003e 128;\\n    if (absTick \\u0026 0x2000 != 0)\\n      ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) \\u003e\\u003e 128;\\n    if (absTick \\u0026 0x4000 != 0)\\n      ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) \\u003e\\u003e 128;\\n    if (absTick \\u0026 0x8000 != 0)\\n      ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) \\u003e\\u003e 128;\\n    if (absTick \\u0026 0x10000 != 0)\\n      ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) \\u003e\\u003e 128;\\n    if (absTick \\u0026 0x20000 != 0)\\n      ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) \\u003e\\u003e 128;\\n    if (absTick \\u0026 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) \\u003e\\u003e 128;\\n    if (absTick \\u0026 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) \\u003e\\u003e 128;\\n\\n    if (tick \\u003e 0) ratio = type(uint256).max / ratio;\\n\\n    // this divides by 1\\u003c\\u003c32 rounding up to go from a Q128.128 to a Q128.96.\\n    // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n    // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n    sqrtPriceX96 = uint160((ratio \\u003e\\u003e 32) + (ratio % (1 \\u003c\\u003c 32) == 0 ? 0 : 1));\\n  }\\n\\n  /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) \\u003c= ratio\\n  /// @dev Throws in case sqrtPriceX96 \\u003c MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n  /// ever return.\\n  /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n  /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n  function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n    // second inequality must be \\u003c because the price can never reach the price at the max tick\\n    require(sqrtPriceX96 \\u003e= MIN_SQRT_RATIO \\u0026\\u0026 sqrtPriceX96 \\u003c MAX_SQRT_RATIO, \\\"R\\\");\\n    uint256 ratio = uint256(sqrtPriceX96) \\u003c\\u003c 32;\\n\\n    uint256 r = ratio;\\n    uint256 msb = 0;\\n\\n    assembly {\\n      let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := shl(5, gt(r, 0xFFFFFFFF))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := shl(4, gt(r, 0xFFFF))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := shl(3, gt(r, 0xFF))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := shl(2, gt(r, 0xF))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := shl(1, gt(r, 0x3))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := gt(r, 0x1)\\n      msb := or(msb, f)\\n    }\\n\\n    if (msb \\u003e= 128) r = ratio \\u003e\\u003e (msb - 127);\\n    else r = ratio \\u003c\\u003c (127 - msb);\\n\\n    int256 log_2 = (int256(msb) - 128) \\u003c\\u003c 64;\\n\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(63, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(62, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(61, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(60, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(59, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(58, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(57, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(56, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(55, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(54, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(53, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(52, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(51, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(50, f))\\n    }\\n\\n    int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n    int24 tickLow = int24(\\n      (log_sqrt10001 - 3402992956809132418596140100660247210) \\u003e\\u003e 128\\n    );\\n    int24 tickHi = int24(\\n      (log_sqrt10001 + 291339464771989622907027621153398088495) \\u003e\\u003e 128\\n    );\\n\\n    tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) \\u003c= sqrtPriceX96\\n      ? tickHi\\n      : tickLow;\\n  }\\n}\\n\"}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkUnderlyingPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasPool\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amountIn\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"estimateAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amountIn\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolToConsider\",\"type\":\"address\"}],\"name\":\"estimateAmountOutMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsAgo\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fees\",\"type\":\"uint24\"}],\"name\":\"updateGlobalFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"sec\",\"type\":\"uint32\"}],\"name\":\"updateSecAgo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AFiOracle", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7ddaaa6fb751122dd1b06d5db83e21b75895adc8528215097c6311836eeb474e"}