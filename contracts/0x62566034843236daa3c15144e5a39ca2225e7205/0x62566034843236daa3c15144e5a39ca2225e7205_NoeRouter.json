{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(\r\n        uint256 amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IWETH is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n\r\nstruct UserInfo {\r\n    uint256 amount; // How many tokens the user has provided.\r\n    uint256 stakingTime; // The time at which the user staked tokens.\r\n    uint256 rewardClaimed;\r\n}\r\n\r\nstruct PoolInfo {\r\n    address tokenAddress;\r\n    address rewardTokenAddress;\r\n    uint256 maxPoolSize;\r\n    uint256 currentPoolSize;\r\n    uint256 maxContribution;\r\n    uint256 minContribution;\r\n    uint256 rewardNum;\r\n    uint256 rewardDen;\r\n    uint256 emergencyFees; // it is the fees in percentage, final fees is emergencyFees/1000\r\n    uint256 lockDays;\r\n    bool poolType; // true for public staking, false for whitelist staking\r\n    bool poolActive;\r\n}\r\n\r\ninterface StakingContract {\r\n    function userInfo(\r\n        uint _pid,\r\n        address _user\r\n    ) external view returns (UserInfo memory);\r\n\r\n    function poolLength() external view returns (uint);\r\n\r\n    function poolInfo(uint _pid) external view returns (PoolInfo memory);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not the contract owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Invalid owner address\");\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract NoeRouter is Ownable {\r\n    uint256 public feePercentage; // Fee percentage in basis points (1 basis point = 0.01%)\r\n    address public feeReceiver;\r\n    address public stakingAddress;\r\n    uint256 public feeWaiveAmount; // Staked tokens required to waive of fees\r\n    address public stakedToken; // Token to be staked to waive off fees\r\n    IUniswapV2Router02 public uniswapRouter;\r\n    IWETH public WETH;\r\n\r\n    constructor() {\r\n        address currentRouter;\r\n\r\n        if (block.chainid == 56) {\r\n            currentRouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // BSC Router\r\n        } else if (block.chainid == 97) {\r\n            currentRouter = 0xD99D1c33F9fC3444f8101754aBC46c52416550D1; // BSC Testnet\r\n        } else if (block.chainid == 43114) {\r\n            currentRouter = 0x60aE616a2155Ee3d9A68541Ba4544862310933d4; //Avax Mainnet\r\n        } else if (block.chainid == 137) {\r\n            currentRouter = 0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff; //Polygon Ropsten\r\n        } else if (block.chainid == 250) {\r\n            currentRouter = 0xF491e7B69E4244ad4002BC14e878a34207E38c29; //SpookySwap FTM\r\n        } else if (block.chainid == 3) {\r\n            currentRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; //Ropsten\r\n        } else if (block.chainid == 1 || block.chainid == 4) {\r\n            currentRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; //Mainnet\r\n        } else {\r\n            revert();\r\n        }\r\n\r\n        uniswapRouter = IUniswapV2Router02(currentRouter);\r\n        WETH = IWETH(uniswapRouter.WETH());\r\n        feeReceiver = 0xb34F424Ed9402e9AEDf7cCB1bD5d9c032a6f9796;\r\n        feePercentage = 100;\r\n        feeWaiveAmount = 500000 * 1e18;\r\n        stakedToken = 0xBbE626Be0abD64e8efd72A934F08ff9E81C909c8;\r\n        stakingAddress = 0x93F14F74eda31874D25191A1bB41a21DC7987833;\r\n    }\r\n\r\n    // ------------------ only owner functions ------------------\r\n\r\n    function setFeeReceiver(address _newFeeReceiver) external onlyOwner {\r\n        feeReceiver = _newFeeReceiver;\r\n    }\r\n\r\n    function setFeePercentage(uint256 _newFeePercentage) external onlyOwner {\r\n        feePercentage = _newFeePercentage;\r\n    }\r\n\r\n    function setStakingAddress(address _newStakingAddress) external onlyOwner {\r\n        stakingAddress = _newStakingAddress;\r\n    }\r\n\r\n    function setFeeWaiveAmount(uint256 _newFeeWaiveAmount) external onlyOwner {\r\n        feeWaiveAmount = _newFeeWaiveAmount;\r\n    }\r\n\r\n    function setStakedToken(address _newStakedToken) external onlyOwner {\r\n        stakedToken = _newStakedToken;\r\n    }\r\n\r\n    function withdrawEth() external onlyOwner returns (bool) {\r\n        uint256 balance = address(this).balance;\r\n        (bool success, ) = payable(msg.sender).call{value: balance}(\"\");\r\n        return success;\r\n    }\r\n\r\n    function withdrawERC20(\r\n        address _tokenAddress\r\n    ) external onlyOwner returns (bool) {\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        uint256 balance = token.balanceOf(address(this));\r\n        bool success = token.transfer(msg.sender, balance);\r\n        return success;\r\n    }\r\n\r\n    // ------------------ public functions ------------------\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        address[] memory path,\r\n        uint256 deadline,\r\n        uint256 slippage\r\n    ) external {\r\n        IERC20(path[0]).transferFrom(msg.sender, address(this), amountIn);\r\n        bool waiveFee = isWaiveApplicable(msg.sender, path);\r\n        uint256 feeAmount = waiveFee ? 0 : (amountIn * feePercentage) / 10000;\r\n        uint256 amountInAfterFee = amountIn - feeAmount;\r\n\r\n        IERC20(path[0]).approve(address(uniswapRouter), amountIn);\r\n        uniswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amountInAfterFee,\r\n            calcAmountOutMin(amountInAfterFee, slippage, path),\r\n            path,\r\n            msg.sender,\r\n            deadline\r\n        );\r\n\r\n        // no need to transfer fees if fee is waived\r\n        if (waiveFee) return;\r\n        address tokenPath = path[0];\r\n        path = new address[](2);\r\n        path[0] = tokenPath;\r\n        path[1] = uniswapRouter.WETH();\r\n\r\n        try\r\n            uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                feeAmount,\r\n                0,\r\n                path,\r\n                feeReceiver,\r\n                block.timestamp\r\n            )\r\n        {} catch {\r\n            IERC20(path[0]).transfer(feeReceiver, feeAmount);\r\n        }\r\n    }\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        address[] memory path,\r\n        uint256 deadline,\r\n        uint256 slippage\r\n    ) external payable {\r\n        bool waiveFee = isWaiveApplicable(msg.sender, path);\r\n        uint256 feeAmount = waiveFee ? 0 : (msg.value * feePercentage) / 10000;\r\n        uint256 amountInAfterFee = msg.value - feeAmount;\r\n\r\n        uniswapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: amountInAfterFee\r\n        }(\r\n            calcAmountOutMin(amountInAfterFee, slippage, path),\r\n            path,\r\n            msg.sender,\r\n            deadline\r\n        );\r\n\r\n        (bool success, ) = payable(feeReceiver).call{value: feeAmount}(\"\");\r\n        require(success, \"Fee transfer failed\");\r\n    }\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        address[] memory path,\r\n        uint256 deadline,\r\n        uint256 slippage\r\n    ) external {\r\n        IERC20(path[0]).transferFrom(msg.sender, address(this), amountIn);\r\n\r\n        uint256 balanceBeforeSwap = address(this).balance;\r\n        IERC20(path[0]).approve(address(uniswapRouter), amountIn);\r\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountIn,\r\n            calcAmountOutMin(amountIn, slippage, path),\r\n            path,\r\n            address(this),\r\n            deadline\r\n        );\r\n\r\n        bool waiveFee = isWaiveApplicable(msg.sender, path);\r\n        uint256 ethRecieved = address(this).balance - balanceBeforeSwap;\r\n        uint256 feeAmount = waiveFee\r\n            ? 0\r\n            : (ethRecieved * feePercentage) / 10000;\r\n        (bool success1, ) = payable(msg.sender).call{\r\n            value: (ethRecieved - feeAmount)\r\n        }(\"\");\r\n        require(success1, \"Eth transfer failed\");\r\n        (bool success2, ) = payable(feeReceiver).call{value: feeAmount}(\"\");\r\n        require(success2, \"Fee transfer failed\");\r\n    }\r\n\r\n    function swapEthToWeth() public payable {\r\n        uint256 feeAmount = (msg.value * feePercentage) / 10000;\r\n        uint256 amountInAfterFee = msg.value - feeAmount;\r\n\r\n        WETH.deposit{value: amountInAfterFee}();\r\n        WETH.transfer(msg.sender, amountInAfterFee);\r\n    }\r\n\r\n    function swapWethToEth(uint256 amountIn) public payable {\r\n        WETH.transferFrom(msg.sender, address(this), amountIn);\r\n        uint256 feeAmount = (amountIn * feePercentage) / 10000;\r\n        uint256 amountInAfterFee = amountIn - feeAmount;\r\n\r\n        WETH.withdraw(amountIn);\r\n        (bool success, ) = payable(msg.sender).call{value: amountInAfterFee}(\r\n            \"\"\r\n        );\r\n        require(success, \"Eth transfer failed\");\r\n    }\r\n\r\n    // calculate amountOutMin with slippage\r\n    function calcAmountOutMin(\r\n        uint256 _amountIn,\r\n        uint256 _slippage, // slippage in basis points (1 basis point = 0.1%)\r\n        address[] memory path\r\n    ) internal view returns (uint256) {\r\n        uint256 amountsOut = uniswapRouter.getAmountsOut(_amountIn, path)[\r\n            path.length - 1\r\n        ];\r\n        return (amountsOut - ((amountsOut * _slippage) / 1000));\r\n    }\r\n\r\n    // check if user has staked tokens more than fee waive amount\r\n    function isWaiveApplicable(\r\n        address _user,\r\n        address[] memory tokens\r\n    ) public view returns (bool) {\r\n        // staking contract is not available instead of bsc mainnet\r\n        if (block.chainid != 56) {\r\n            return false;\r\n        }\r\n\r\n        bool stakedTokenFound = false;\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            if (tokens[i] == stakedToken) {\r\n                stakedTokenFound = true;\r\n                break; // Exit the loop once stakedToken is found\r\n            }\r\n        }\r\n\r\n        if (!stakedTokenFound) {\r\n            return false;\r\n        }\r\n\r\n        StakingContract stakingContract = StakingContract(stakingAddress);\r\n        for (uint256 i = 0; i < stakingContract.poolLength(); i++) {\r\n            UserInfo memory userInfo = stakingContract.userInfo(i, _user);\r\n            PoolInfo memory poolInfo = stakingContract.poolInfo(i);\r\n\r\n            if (\r\n                userInfo.amount >= feeWaiveAmount &&\r\n                poolInfo.tokenAddress == stakedToken\r\n            ) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWaiveAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"isWaiveApplicable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeeWaiveAmount\",\"type\":\"uint256\"}],\"name\":\"setFeeWaiveAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStakedToken\",\"type\":\"address\"}],\"name\":\"setStakedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStakingAddress\",\"type\":\"address\"}],\"name\":\"setStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEthToWeth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETHSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"swapWethToEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NoeRouter", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a5ddffa024473a7ab3bb980fe2715c3ccd037241194027d7d35d6672e5b67c7f"}