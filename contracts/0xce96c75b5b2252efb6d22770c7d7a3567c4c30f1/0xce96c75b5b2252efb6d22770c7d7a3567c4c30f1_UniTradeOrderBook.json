{"SourceCode": "// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/GSN/Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// Dependency file: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n// Dependency file: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\n// import '/Users/train/Documents/Work/Decent/unitrade/unitrade/node_modules/@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol';\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n// Dependency file: @uniswap/lib/contracts/libraries/TransferHelper.sol\r\n\r\n// pragma solidity >=0.6.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/UniTradeIncinerator.sol\r\n\r\n// pragma solidity ^0.6.6;\r\n\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\r\n// import \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\r\n\r\ncontract UniTradeIncinerator {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant UINT256_MAX = ~uint256(0);\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable unitrade;\r\n    uint256 lastIncinerated;\r\n\r\n    event UniTradeToBurn(uint256 etherIn);\r\n    event UniTradeBurned(uint256 etherIn, uint256 tokensBurned);\r\n\r\n    constructor(IUniswapV2Router02 _uniswapV2Router, address _unitrade) public {\r\n        uniswapV2Router = _uniswapV2Router;\r\n        unitrade = _unitrade;\r\n        lastIncinerated = block.timestamp;\r\n    }\r\n\r\n    function burn() external payable returns (bool) {\r\n        require(msg.value > 0, \"Nothing to burn\");\r\n\r\n        emit UniTradeToBurn(msg.value);\r\n\r\n        if (block.timestamp < lastIncinerated + 1 days) {\r\n            return true;\r\n        }\r\n\r\n        lastIncinerated = block.timestamp;\r\n\r\n        address[] memory _tokenPair = new address[](2);\r\n        _tokenPair[0] = uniswapV2Router.WETH();\r\n        _tokenPair[1] = unitrade;\r\n\r\n        uint256[] memory _swapResult = uniswapV2Router.swapExactETHForTokens{\r\n            value: address(this).balance\r\n        }(\r\n            0, // take any\r\n            _tokenPair,\r\n            address(this),\r\n            UINT256_MAX\r\n        );\r\n\r\n        emit UniTradeBurned(_swapResult[0], _swapResult[1]);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/IUniTradeStaker.sol\r\n\r\n// pragma solidity ^0.6.6;\r\n\r\ninterface IUniTradeStaker\r\n{\r\n    function deposit() external payable;\r\n}\r\n\r\n\r\n// Root file: contracts/UniTradeOrderBook.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n// import \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n// import \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\r\n// import \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\r\n// import \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\r\n// import \"contracts/UniTradeIncinerator.sol\";\r\n// import \"contracts/IUniTradeStaker.sol\";\r\n\r\ncontract UniTradeOrderBook is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant UINT256_MAX = ~uint256(0);\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    IUniswapV2Factory public immutable uniswapV2Factory;\r\n    UniTradeIncinerator public immutable incinerator;\r\n    IUniTradeStaker public staker;\r\n\r\n    enum OrderType {TokensForTokens, EthForTokens, TokensForEth}\r\n    enum OrderState {Placed, Cancelled, Executed}\r\n\r\n    struct Order {\r\n        OrderType orderType;\r\n        address payable maker;\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint256 amountInOffered;\r\n        uint256 amountOutExpected;\r\n        uint256 executorFee;\r\n        uint256 totalEthDeposited;\r\n        uint256 activeOrderIndex;\r\n        OrderState orderState;\r\n    }\r\n\r\n    uint256 private orderNumber;\r\n    uint256[] private activeOrders;\r\n    mapping(uint256 => Order) private orders;\r\n    mapping(address => uint256[]) private ordersForAddress;\r\n\r\n    event OrderPlaced(\r\n        uint256 indexed orderId,\r\n        OrderType orderType,\r\n        address payable indexed maker,\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountInOffered,\r\n        uint256 amountOutExpected,\r\n        uint256 executorFee,\r\n        uint256 totalEthDeposited\r\n    );\r\n    event OrderCancelled(uint256 indexed orderId);\r\n    event OrderExecuted(\r\n        uint256 indexed orderId,\r\n        address indexed executor,\r\n        uint256[] amounts,\r\n        uint256 unitradeFee\r\n    );\r\n    event StakerUpdated(address newStaker);\r\n\r\n    modifier exists(uint256 orderId) {\r\n        require(orders[orderId].maker != address(0), \"Order not found\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        IUniswapV2Router02 _uniswapV2Router,\r\n        UniTradeIncinerator _incinerator,\r\n        IUniTradeStaker _staker\r\n    ) public {\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Factory = IUniswapV2Factory(_uniswapV2Router.factory());\r\n        incinerator = _incinerator;\r\n        staker = _staker;\r\n    }\r\n\r\n    function placeOrder(\r\n        OrderType orderType,\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountInOffered,\r\n        uint256 amountOutExpected,\r\n        uint256 executorFee\r\n    ) external payable nonReentrant returns (uint256) {\r\n        require(amountInOffered > 0, \"Invalid offered amount\");\r\n        require(amountOutExpected > 0, \"Invalid expected amount\");\r\n        require(executorFee > 0, \"Invalid executor fee\");\r\n\r\n        address _wethAddress = uniswapV2Router.WETH();\r\n\r\n        if (orderType != OrderType.EthForTokens) {\r\n            require(\r\n                msg.value == executorFee,\r\n                \"Transaction value must match executor fee\"\r\n            );\r\n            if (orderType == OrderType.TokensForEth) {\r\n                require(tokenOut == _wethAddress, \"Token out must be WETH\");\r\n            } else {\r\n                getPair(tokenIn, _wethAddress);\r\n            }\r\n            // transfer tokenIn funds in necessary for order execution\r\n            TransferHelper.safeTransferFrom(\r\n                tokenIn,\r\n                msg.sender,\r\n                address(this),\r\n                amountInOffered\r\n            );\r\n        } else {\r\n            require(tokenIn == _wethAddress, \"Token in must be WETH\");\r\n            require(\r\n                msg.value == amountInOffered.add(executorFee),\r\n                \"Transaction value must match offer and fee\"\r\n            );\r\n        }\r\n\r\n        // get canonical uniswap pair address\r\n        address _pairAddress = getPair(tokenIn, tokenOut);\r\n\r\n        (uint256 _orderId, Order memory _order) = registerOrder(\r\n            orderType,\r\n            msg.sender,\r\n            tokenIn,\r\n            tokenOut,\r\n            _pairAddress,\r\n            amountInOffered,\r\n            amountOutExpected,\r\n            executorFee,\r\n            msg.value\r\n        );\r\n\r\n        emit OrderPlaced(\r\n            _orderId,\r\n            _order.orderType,\r\n            _order.maker,\r\n            _order.tokenIn,\r\n            _order.tokenOut,\r\n            _order.amountInOffered,\r\n            _order.amountOutExpected,\r\n            _order.executorFee,\r\n            _order.totalEthDeposited\r\n        );\r\n\r\n        return _orderId;\r\n    }\r\n\r\n    function updateOrder(\r\n        uint256 orderId,\r\n        uint256 amountInOffered,\r\n        uint256 amountOutExpected,\r\n        uint256 executorFee\r\n    ) external payable exists(orderId) nonReentrant returns (bool) {\r\n        Order memory _updatingOrder = orders[orderId];\r\n        require(msg.sender == _updatingOrder.maker, \"Permission denied\");\r\n        require(\r\n            _updatingOrder.orderState == OrderState.Placed,\r\n            \"Cannot update order\"\r\n        );\r\n        require(amountInOffered > 0, \"Invalid offered amount\");\r\n        require(amountOutExpected > 0, \"Invalid expected amount\");\r\n        require(executorFee > 0, \"Invalid executor fee\");\r\n\r\n        if (_updatingOrder.orderType == OrderType.EthForTokens) {\r\n            uint256 newTotal = amountInOffered.add(executorFee);\r\n            if (newTotal > _updatingOrder.totalEthDeposited) {\r\n                require(\r\n                    msg.value == newTotal.sub(_updatingOrder.totalEthDeposited),\r\n                    \"Additional deposit must match\"\r\n                );\r\n            } else if (newTotal < _updatingOrder.totalEthDeposited) {\r\n                TransferHelper.safeTransferETH(\r\n                    _updatingOrder.maker,\r\n                    _updatingOrder.totalEthDeposited.sub(newTotal)\r\n                );\r\n            }\r\n            _updatingOrder.totalEthDeposited = newTotal;\r\n        } else {\r\n            if (executorFee > _updatingOrder.executorFee) {\r\n                require(\r\n                    msg.value == executorFee.sub(_updatingOrder.executorFee),\r\n                    \"Additional fee must match\"\r\n                );\r\n            } else if (executorFee < _updatingOrder.executorFee) {\r\n                TransferHelper.safeTransferETH(\r\n                    _updatingOrder.maker,\r\n                    _updatingOrder.executorFee.sub(executorFee)\r\n                );\r\n            }\r\n            _updatingOrder.totalEthDeposited = executorFee;\r\n            if (amountInOffered > _updatingOrder.amountInOffered) {\r\n                TransferHelper.safeTransferFrom(\r\n                    _updatingOrder.tokenIn,\r\n                    msg.sender,\r\n                    address(this),\r\n                    amountInOffered.sub(_updatingOrder.amountInOffered)\r\n                );\r\n            } else if (amountInOffered < _updatingOrder.amountInOffered) {\r\n                TransferHelper.safeTransfer(\r\n                    _updatingOrder.tokenIn,\r\n                    _updatingOrder.maker,\r\n                    _updatingOrder.amountInOffered.sub(amountInOffered)\r\n                );\r\n            }\r\n        }\r\n\r\n        // update order record\r\n        _updatingOrder.amountInOffered = amountInOffered;\r\n        _updatingOrder.amountOutExpected = amountOutExpected;\r\n        _updatingOrder.executorFee = executorFee;\r\n        orders[orderId] = _updatingOrder;\r\n\r\n        return true;\r\n    }\r\n\r\n    function cancelOrder(uint256 orderId)\r\n        external\r\n        exists(orderId)\r\n        nonReentrant\r\n        returns (bool)\r\n    {\r\n        Order memory _cancellingOrder = orders[orderId];\r\n        require(msg.sender == _cancellingOrder.maker, \"Permission denied\");\r\n        require(\r\n            _cancellingOrder.orderState == OrderState.Placed,\r\n            \"Cannot cancel order\"\r\n        );\r\n\r\n        proceedOrder(orderId, OrderState.Cancelled);\r\n\r\n        // Revert token allocation, funds, and fees\r\n        if (_cancellingOrder.orderType != OrderType.EthForTokens) {\r\n            TransferHelper.safeTransfer(\r\n                _cancellingOrder.tokenIn,\r\n                _cancellingOrder.maker,\r\n                _cancellingOrder.amountInOffered\r\n            );\r\n        }\r\n        TransferHelper.safeTransferETH(\r\n            _cancellingOrder.maker,\r\n            _cancellingOrder.totalEthDeposited\r\n        );\r\n\r\n        emit OrderCancelled(orderId);\r\n        return true;\r\n    }\r\n\r\n    function executeOrder(uint256 orderId)\r\n        external\r\n        exists(orderId)\r\n        nonReentrant\r\n        returns (uint256[] memory)\r\n    {\r\n        Order memory _executingOrder = orders[orderId];\r\n        require(\r\n            _executingOrder.orderState == OrderState.Placed,\r\n            \"Cannot execute order\"\r\n        );\r\n\r\n        proceedOrder(orderId, OrderState.Executed);\r\n\r\n        address[] memory _addressPair = createPair(\r\n            _executingOrder.tokenIn,\r\n            _executingOrder.tokenOut\r\n        );\r\n        uint256[] memory _swapResult;\r\n        uint256 unitradeFee = 0;\r\n\r\n        if (_executingOrder.orderType == OrderType.TokensForTokens) {\r\n            TransferHelper.safeApprove(\r\n                _executingOrder.tokenIn,\r\n                address(uniswapV2Router),\r\n                _executingOrder.amountInOffered\r\n            );\r\n            uint256 _tokenFee = _executingOrder.amountInOffered.div(100);\r\n            _swapResult = uniswapV2Router.swapExactTokensForTokens(\r\n                _executingOrder.amountInOffered.sub(_tokenFee),\r\n                _executingOrder.amountOutExpected,\r\n                _addressPair,\r\n                _executingOrder.maker,\r\n                UINT256_MAX\r\n            );\r\n            if (_tokenFee > 0) {\r\n                // Convert 1% of tokens to ETH as fee\r\n                address[] memory _wethPair = createPair(\r\n                    _executingOrder.tokenIn,\r\n                    uniswapV2Router.WETH()\r\n                );\r\n                uint256[] memory _ethSwapResult = uniswapV2Router\r\n                    .swapExactTokensForETH(\r\n                    _tokenFee,\r\n                    0, //take any\r\n                    _wethPair,\r\n                    address(this),\r\n                    UINT256_MAX\r\n                );\r\n                unitradeFee = _ethSwapResult[1];\r\n            }\r\n        } else if (_executingOrder.orderType == OrderType.TokensForEth) {\r\n            TransferHelper.safeApprove(\r\n                _executingOrder.tokenIn,\r\n                address(uniswapV2Router),\r\n                _executingOrder.amountInOffered\r\n            );\r\n            _swapResult = uniswapV2Router.swapExactTokensForETH(\r\n                _executingOrder.amountInOffered,\r\n                _executingOrder.amountOutExpected,\r\n                _addressPair,\r\n                address(this),\r\n                UINT256_MAX\r\n            );\r\n            unitradeFee = _swapResult[1].div(100);\r\n            // Transfer to maker after post swap fee split\r\n            TransferHelper.safeTransferETH(\r\n                _executingOrder.maker,\r\n                _swapResult[1].sub(unitradeFee)\r\n            );\r\n        } else if (_executingOrder.orderType == OrderType.EthForTokens) {\r\n            // Subtract fee from initial swap\r\n            uint256 amountEthOffered = _executingOrder.totalEthDeposited.sub(\r\n                _executingOrder.executorFee\r\n            );\r\n            unitradeFee = amountEthOffered.div(100);\r\n            _swapResult = uniswapV2Router.swapExactETHForTokens{\r\n                value: amountEthOffered.sub(unitradeFee)\r\n            }(\r\n                _executingOrder.amountOutExpected,\r\n                _addressPair,\r\n                _executingOrder.maker,\r\n                UINT256_MAX\r\n            );\r\n        }\r\n\r\n        // Transfer fee to incinerator/staker\r\n        if (unitradeFee > 0) {\r\n            uint256 burnAmount = unitradeFee.mul(6).div(10);\r\n            if (burnAmount > 0) {\r\n                incinerator.burn{value: burnAmount}(); //no require\r\n            }\r\n            staker.deposit{value: unitradeFee.sub(burnAmount)}(); //no require\r\n        }\r\n\r\n        // transfer fee to executor\r\n        TransferHelper.safeTransferETH(msg.sender, _executingOrder.executorFee);\r\n\r\n        emit OrderExecuted(orderId, msg.sender, _swapResult, unitradeFee);\r\n\r\n        return _swapResult;\r\n    }\r\n\r\n    function registerOrder(\r\n        OrderType orderType,\r\n        address payable maker,\r\n        address tokenIn,\r\n        address tokenOut,\r\n        address pairAddress,\r\n        uint256 amountInOffered,\r\n        uint256 amountOutExpected,\r\n        uint256 executorFee,\r\n        uint256 totalEthDeposited\r\n    ) internal returns (uint256 orderId, Order memory) {\r\n        uint256 _orderId = orderNumber;\r\n        orderNumber++;\r\n\r\n        // create order entries\r\n        Order memory _order = Order({\r\n            orderType: orderType,\r\n            maker: maker,\r\n            tokenIn: tokenIn,\r\n            tokenOut: tokenOut,\r\n            amountInOffered: amountInOffered,\r\n            amountOutExpected: amountOutExpected,\r\n            executorFee: executorFee,\r\n            totalEthDeposited: totalEthDeposited,\r\n            activeOrderIndex: activeOrders.length,\r\n            orderState: OrderState.Placed\r\n        });\r\n\r\n        activeOrders.push(_orderId);\r\n        orders[_orderId] = _order;\r\n        ordersForAddress[maker].push(_orderId);\r\n        ordersForAddress[pairAddress].push(_orderId);\r\n\r\n        return (_orderId, _order);\r\n    }\r\n\r\n    function proceedOrder(uint256 orderId, OrderState nextState)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        Order memory _proceedingOrder = orders[orderId];\r\n        require(\r\n            _proceedingOrder.orderState == OrderState.Placed,\r\n            \"Cannot proceed order\"\r\n        );\r\n\r\n        if (activeOrders.length > 1) {\r\n            uint256 _availableIndex = _proceedingOrder.activeOrderIndex;\r\n            uint256 _lastOrderId = activeOrders[activeOrders.length - 1];\r\n            Order memory _lastOrder = orders[_lastOrderId];\r\n            _lastOrder.activeOrderIndex = _availableIndex;\r\n            orders[_lastOrderId] = _lastOrder;\r\n            activeOrders[_availableIndex] = _lastOrderId;\r\n        }\r\n\r\n        activeOrders.pop();\r\n        _proceedingOrder.orderState = nextState;\r\n        orders[orderId] = _proceedingOrder;\r\n\r\n        return true;\r\n    }\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        address _pairAddress = uniswapV2Factory.getPair(tokenA, tokenB);\r\n        require(_pairAddress != address(0), \"Unavailable pair address\");\r\n        return _pairAddress;\r\n    }\r\n\r\n    function getOrder(uint256 orderId)\r\n        external\r\n        view\r\n        exists(orderId)\r\n        returns (\r\n            OrderType orderType,\r\n            address payable maker,\r\n            address tokenIn,\r\n            address tokenOut,\r\n            uint256 amountInOffered,\r\n            uint256 amountOutExpected,\r\n            uint256 executorFee,\r\n            uint256 totalEthDeposited,\r\n            OrderState orderState\r\n        )\r\n    {\r\n        Order memory _order = orders[orderId];\r\n        return (\r\n            _order.orderType,\r\n            _order.maker,\r\n            _order.tokenIn,\r\n            _order.tokenOut,\r\n            _order.amountInOffered,\r\n            _order.amountOutExpected,\r\n            _order.executorFee,\r\n            _order.totalEthDeposited,\r\n            _order.orderState\r\n        );\r\n    }\r\n\r\n    function updateStaker(IUniTradeStaker newStaker) external onlyOwner {\r\n        staker = newStaker;\r\n        emit StakerUpdated(address(newStaker));\r\n    }\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        internal\r\n        pure\r\n        returns (address[] memory)\r\n    {\r\n        address[] memory _addressPair = new address[](2);\r\n        _addressPair[0] = tokenA;\r\n        _addressPair[1] = tokenB;\r\n        return _addressPair;\r\n    }\r\n\r\n    function getActiveOrdersLength() external view returns (uint256) {\r\n        return activeOrders.length;\r\n    }\r\n\r\n    function getActiveOrderId(uint256 index) external view returns (uint256) {\r\n        return activeOrders[index];\r\n    }\r\n\r\n    function getOrdersForAddressLength(address _address)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return ordersForAddress[_address].length;\r\n    }\r\n\r\n    function getOrderIdForAddress(address _address, uint256 index)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return ordersForAddress[_address][index];\r\n    }\r\n\r\n    receive() external payable {} // to receive ETH from Uniswap\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"contract UniTradeIncinerator\",\"name\":\"_incinerator\",\"type\":\"address\"},{\"internalType\":\"contract IUniTradeStaker\",\"name\":\"_staker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitradeFee\",\"type\":\"uint256\"}],\"name\":\"OrderExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum UniTradeOrderBook.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInOffered\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutExpected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalEthDeposited\",\"type\":\"uint256\"}],\"name\":\"OrderPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStaker\",\"type\":\"address\"}],\"name\":\"StakerUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"executeOrder\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getActiveOrderId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveOrdersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"getOrder\",\"outputs\":[{\"internalType\":\"enum UniTradeOrderBook.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInOffered\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutExpected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEthDeposited\",\"type\":\"uint256\"},{\"internalType\":\"enum UniTradeOrderBook.OrderState\",\"name\":\"orderState\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getOrderIdForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getOrdersForAddressLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incinerator\",\"outputs\":[{\"internalType\":\"contract UniTradeIncinerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum UniTradeOrderBook.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInOffered\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutExpected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executorFee\",\"type\":\"uint256\"}],\"name\":\"placeOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staker\",\"outputs\":[{\"internalType\":\"contract IUniTradeStaker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInOffered\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutExpected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executorFee\",\"type\":\"uint256\"}],\"name\":\"updateOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniTradeStaker\",\"name\":\"newStaker\",\"type\":\"address\"}],\"name\":\"updateStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UniTradeOrderBook", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000c54fa7403b020e78828886becd99b6caaa1433cb0000000000000000000000005b32cdda19ea68f8e3a8511455ef39a9d178c5ca", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f8f6418fab76e7061ab8833c6788618e2468fa2569c2cd89662f97fbcf5103ce"}