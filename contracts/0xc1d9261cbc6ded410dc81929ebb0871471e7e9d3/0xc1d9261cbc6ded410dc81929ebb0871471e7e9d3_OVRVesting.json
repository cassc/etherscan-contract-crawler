{"SourceCode": "pragma solidity 0.4.24;\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n// File: contracts/OVRVesting.sol\r\n\r\n/**\r\n * @title Vesting trustee contract for OVRToken.\r\n */\r\ncontract OVRVesting is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    uint256 private constant vstart = 1608037200; //15 dec 2020\r\n    uint256 public constant vcliff = 1608037200; //15 dec 2020\r\n    uint256 public constant vend = 1671109200; // 15 dec 2022\r\n    uint256 public constant vinstallmentLength = 3600; // 60 min\r\n    \r\n    // OVRToken contract.\r\n    ERC20 public constant token = ERC20(0x21BfBDa47A0B4B5b1248c767Ee49F7caA9B23697);\r\n\r\n    // Vesting grant for a specific holder.\r\n    struct Grant {\r\n        uint256 value;\r\n        uint256 start;\r\n        uint256 cliff;\r\n        uint256 end;\r\n        uint256 installmentLength; // In seconds.\r\n        uint256 transferred;\r\n        bool revocable;\r\n    }\r\n\r\n    // Holder to grant information mapping.\r\n    mapping (address => Grant) public grants;\r\n\r\n    // Total tokens available for vesting.\r\n    uint256 public totalVesting;\r\n\r\n    event NewGrant(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event TokensUnlocked(address indexed _to, uint256 _value);\r\n\r\n    event GrantRevoked(address indexed _holder, uint256 _refund);\r\n\r\n\r\n    /**\r\n     * @dev Unlock vested tokens and transfer them to their holder.\r\n     */\r\n    function unlockVestedTokens() external {\r\n        Grant storage grant_ = grants[msg.sender];\r\n\r\n        // Require that the grant is not empty.\r\n        require(grant_.value != 0);\r\n        \r\n        // Get the total amount of vested tokens, according to grant.\r\n        uint256 vested = calculateVestedTokens(grant_, block.timestamp);\r\n        \r\n        if (vested == 0) {\r\n            return;\r\n        }\r\n        \r\n        // Make sure the holder doesn't transfer more than what he already has.\r\n        \r\n        uint256 transferable = vested.sub(grant_.transferred);\r\n        \r\n        if (transferable == 0) {\r\n            return;\r\n        }\r\n        \r\n        // Update transferred and total vesting amount, then transfer remaining vested funds to holder.\r\n        grant_.transferred = grant_.transferred.add(transferable);\r\n        totalVesting = totalVesting.sub(transferable);\r\n        \r\n        token.safeTransfer(msg.sender, transferable);\r\n\r\n        emit TokensUnlocked(msg.sender, transferable);\r\n    }\r\n\r\n    /**\r\n     * @dev Grant tokens to a specified address. \r\n     * @param _to address The holder address.\r\n     * @param _value uint256 The amount of tokens to be granted.\r\n     * @param _revocable bool Whether the grant is revocable or not.\r\n     */\r\n    function granting(address _to, uint256 _value, bool _revocable)\r\n    external onlyOwner \r\n    {    \r\n        require(_to != address(0));\r\n        \r\n        // Don't allow holder to be this contract.\r\n        require(_to != address(this));\r\n        \r\n        require(_value > 0);\r\n        \r\n        // Require that every holder can be granted tokens only once.\r\n        require(grants[_to].value == 0);\r\n        \r\n        // Assign a new grant.\r\n        grants[_to] = Grant({\r\n            value: _value,\r\n            start: vstart,\r\n            cliff: vcliff,\r\n            end: vend,\r\n            installmentLength: vinstallmentLength,\r\n            transferred: 0,\r\n            revocable: _revocable\r\n        });\r\n        \r\n        // Since tokens have been granted, increase the total amount of vesting.\r\n        totalVesting = totalVesting.add(_value);\r\n        \r\n        emit NewGrant(msg.sender, _to, _value);\r\n    }\r\n    \r\n    /**\r\n     * @dev Calculate the total amount of vested tokens of a holder at a given time.\r\n     * @param _holder address The address of the holder.\r\n     * @param _time uint256 The specific time to calculate against.\r\n     * @return a uint256 Representing a holder's total amount of vested tokens.\r\n     */\r\n    function vestedTokens(address _holder, uint256 _time) external constant returns (uint256) {\r\n        Grant memory grant_ = grants[_holder];\r\n        if (grant_.value == 0) {\r\n            return 0;\r\n        }\r\n        return calculateVestedTokens(grant_, _time);\r\n    }\r\n\r\n    /** \r\n     * @dev Revoke the grant of tokens of a specifed address.\r\n     * @param _holder The address which will have its tokens revoked.\r\n     */\r\n    function revoke(address _holder) public onlyOwner {\r\n        Grant memory grant_ = grants[_holder];\r\n\r\n        // Grant must be revocable.\r\n        require(grant_.revocable);\r\n\r\n        // Calculate amount of remaining tokens that are still available (i.e. not yet vested) to be returned to owner.\r\n        uint256 vested = calculateVestedTokens(grant_, block.timestamp);\r\n        \r\n        uint256 notTransferredInstallment = vested.sub(grant_.transferred);\r\n        \r\n        uint256 refund = grant_.value.sub(vested);\r\n        \r\n        //Update of transferred not necessary due to deletion of the grant in the following step.\r\n        \r\n        // Remove grant information.\r\n        delete grants[_holder];\r\n        \r\n        // Update total vesting amount and transfer previously calculated tokens to owner.\r\n        totalVesting = totalVesting.sub(refund).sub(notTransferredInstallment);\r\n        \r\n        // Transfer vested amount that was not yet transferred to _holder.\r\n        token.safeTransfer(_holder, notTransferredInstallment);\r\n        \r\n        emit TokensUnlocked(_holder, notTransferredInstallment);\r\n        \r\n        token.safeTransfer(msg.sender, refund);\r\n        \r\n        emit TokensUnlocked(msg.sender, refund);\r\n        \r\n        emit GrantRevoked(_holder, refund);\r\n    }\r\n\r\n     /** \r\n     * @dev Revoke all the grants of tokens.\r\n     * @param _vault The address which will receive the tokens.\r\n     */\r\n     \r\n    function revokeAll(address _vault) external onlyOwner {\r\n        uint256 transferable=token.balanceOf(address(this));\r\n        token.safeTransfer(_vault, transferable);\r\n    }\r\n    \r\n    /**\r\n     * @dev Calculate amount of vested tokens at a specifc time.\r\n     * @param _grant Grant The vesting grant.\r\n     * @param _time uint256 The time to be checked\r\n     * @return a uint256 Representing the amount of vested tokens of a specific grant.\r\n     */\r\n    function calculateVestedTokens(Grant _grant, uint256 _time) private pure returns (uint256) {\r\n        // If we're before the cliff, then nothing is vested.\r\n        if (_time < _grant.cliff) {\r\n            return 0;\r\n        }\r\n       \r\n        // If we're after the end of the vesting period - everything is vested;\r\n        if (_time >= _grant.end) {\r\n            return _grant.value;\r\n        }\r\n       \r\n        // Calculate amount of installments past until now.\r\n        // NOTE result gets floored because of integer division.\r\n        uint256 installmentsPast = _time.sub(_grant.start).div(_grant.installmentLength);\r\n       \r\n        // Calculate amount of days in entire vesting period.\r\n        uint256 vestingDays = _grant.end.sub(_grant.start);\r\n       \r\n        // Calculate and return installments that have passed according to vesting days that have passed.\r\n        return _grant.value.mul(installmentsPast.mul(_grant.installmentLength)).div(vestingDays);\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"vestedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vinstallmentLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_revocable\",\"type\":\"bool\"}],\"name\":\"granting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vcliff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalVesting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockVestedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"grants\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"installmentLength\",\"type\":\"uint256\"},{\"name\":\"transferred\",\"type\":\"uint256\"},{\"name\":\"revocable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"revokeAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"NewGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TokensUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_refund\",\"type\":\"uint256\"}],\"name\":\"GrantRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "OVRVesting", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://8e92b65ccb3864276be6d60db84f7d659a4588326c7c58a11527d3845d945126"}