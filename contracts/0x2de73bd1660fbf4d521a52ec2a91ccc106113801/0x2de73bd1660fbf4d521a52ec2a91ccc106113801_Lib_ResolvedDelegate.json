{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Lib_ResolvedDelegateProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >0.7.5;\\n\\n/**\\n * @title Lib_ResolvedDelegateProxy\\n */\\ncontract Lib_ResolvedDelegateProxy {\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    mapping(string => address) public addressManager;\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _proxyTarget Address of the target contract.\\n     */\\n    constructor(\\n        address _proxyTarget\\n    ) {\\n        addressManager[\\\"proxyTarget\\\"] = _proxyTarget;\\n        addressManager[\\\"proxyOwner\\\"] = msg.sender;\\n    }\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    modifier proxyCallIfNotOwner() {\\n        if (msg.sender == addressManager[\\\"proxyOwner\\\"]) {\\n            _;\\n        } else {\\n            // This WILL halt the call frame on completion.\\n            _doProxyCall();\\n        }\\n    }\\n\\n    /*********************\\n     * Fallback Function *\\n     *********************/\\n\\n    fallback()\\n    external\\n    payable\\n    {\\n        // Proxy call by default.\\n        _doProxyCall();\\n    }\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Update target\\n     *\\n     * @param _proxyTarget address of proxy target contract\\n     */\\n    function setTargetContract(\\n        address _proxyTarget\\n    )\\n    proxyCallIfNotOwner\\n    external\\n    {\\n        addressManager[\\\"proxyTarget\\\"] = _proxyTarget;\\n    }\\n\\n    /**\\n     * Transfer owner\\n     */\\n    function transferProxyOwnership(\\n        address _newOwner\\n    )\\n    proxyCallIfNotOwner\\n    external\\n    {\\n        require(\\n            _newOwner != address(0),\\n            \\\"New owner cannot be the zero address.\\\"\\n        );\\n        addressManager[\\\"proxyOwner\\\"] = _newOwner;\\n    }\\n\\n    /**\\n     * Performs the proxy call via a delegatecall.\\n     */\\n    function _doProxyCall()\\n    internal\\n    {\\n\\n        require(\\n            addressManager[\\\"proxyTarget\\\"] != address(0),\\n            \\\"Target address must be initialized.\\\"\\n        );\\n\\n        (bool success, bytes memory returndata) = addressManager[\\\"proxyTarget\\\"].delegatecall(msg.data);\\n\\n        if (success == true) {\\n            assembly {\\n                return(add(returndata, 0x20), mload(returndata))\\n            }\\n        } else {\\n            assembly {\\n                revert(add(returndata, 0x20), mload(returndata))\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyTarget\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"addressManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyTarget\",\"type\":\"address\"}],\"name\":\"setTargetContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferProxyOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Lib_ResolvedDelegateProxy", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "0000000000000000000000003f7da9c51138e0475aa26e80677d27a568cfd6b9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0x3f7da9c51138e0475aa26e80677d27a568cfd6b9", "SwarmSource": ""}