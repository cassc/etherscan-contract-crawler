{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PDProtocolReadable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { ProtocolStorage } from \\\"contracts/storages/ProtocolStorage.sol\\\";\\nimport { IPDProtocolReadable } from \\\"contracts/interface/IPDProtocolReadable.sol\\\";\\nimport { D4AProtocolReadable } from \\\"contracts/D4AProtocolReadable.sol\\\";\\n\\nimport { InheritTreeStorage } from \\\"contracts/storages/InheritTreeStorage.sol\\\";\\n\\ncontract PDProtocolReadable is IPDProtocolReadable, D4AProtocolReadable {\\n    // protocol related functions\\n    function getNFTTokenCanvas(bytes32 daoId, uint256 tokenId) public view returns (bytes32) {\\n        return ProtocolStorage.layout().nftHashToCanvasId[keccak256(abi.encodePacked(daoId, tokenId))];\\n    }\\n\\n    function getLastestDaoIndex(uint8 daoTag) public view returns (uint256) {\\n        return ProtocolStorage.layout().lastestDaoIndexes[daoTag];\\n    }\\n\\n    function getDaoId(uint8 daoTag, uint256 daoIndex) public view returns (bytes32) {\\n        return ProtocolStorage.layout().daoIndexToIds[daoTag][daoIndex];\\n    }\\n\\n    function getDaoAncestor(bytes32 daoId) public view returns (bytes32) {\\n        return InheritTreeStorage.layout().inheritTreeInfos[daoId].ancestor;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storages/ProtocolStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nlibrary ProtocolStorage {\\n    struct Layout {\\n        mapping(bytes32 => bytes32) nftHashToCanvasId;\\n        mapping(bytes32 => bool) uriExists;\\n        uint256[256] lastestDaoIndexes;\\n        uint256 d4aDaoIndexBitMap;\\n        uint256 basicDaoIndexBitMap;\\n        mapping(uint256 daoIndex => bytes32 daoId)[256] daoIndexToIds;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"D4Av2.contracts.storage.ProtocolStorage\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IPDProtocolReadable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { ID4AProtocolReadable } from \\\"./ID4AProtocolReadable.sol\\\";\\n\\ninterface IPDProtocolReadable is ID4AProtocolReadable {\\n    // protocol related functions\\n    function getNFTTokenCanvas(bytes32 daoId, uint256 tokenId) external view returns (bytes32);\\n\\n    function getLastestDaoIndex(uint8 daoTag) external view returns (uint256);\\n\\n    function getDaoId(uint8 daoTag, uint256 daoIndex) external view returns (bytes32);\\n\\n    function getDaoAncestor(bytes32 daoId) external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/D4AProtocolReadable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { BASIS_POINT, BASIC_DAO_RESERVE_NFT_NUMBER } from \\\"contracts/interface/D4AConstants.sol\\\";\\nimport { DaoTag } from \\\"contracts/interface/D4AEnums.sol\\\";\\nimport { DaoStorage } from \\\"contracts/storages/DaoStorage.sol\\\";\\nimport { BasicDaoStorage } from \\\"contracts/storages/BasicDaoStorage.sol\\\";\\nimport { CanvasStorage } from \\\"contracts/storages/CanvasStorage.sol\\\";\\nimport { PriceStorage } from \\\"contracts/storages/PriceStorage.sol\\\";\\nimport { RewardStorage } from \\\"./storages/RewardStorage.sol\\\";\\nimport { SettingsStorage } from \\\"./storages/SettingsStorage.sol\\\";\\nimport { ID4AProtocolReadable } from \\\"contracts/interface/ID4AProtocolReadable.sol\\\";\\nimport { IPriceTemplate } from \\\"contracts/interface/IPriceTemplate.sol\\\";\\nimport { IRewardTemplate } from \\\"contracts/interface/IRewardTemplate.sol\\\";\\n\\ncontract D4AProtocolReadable is ID4AProtocolReadable {\\n    // legacy functions\\n    function getProjectCanvasAt(bytes32 daoId, uint256 index) public view returns (bytes32) {\\n        return DaoStorage.layout().daoInfos[daoId].canvases[index];\\n    }\\n\\n    function getProjectInfo(bytes32 daoId)\\n        public\\n        view\\n        returns (\\n            uint256 startRound,\\n            uint256 mintableRound,\\n            uint256 nftMaxSupply,\\n            address daoFeePool,\\n            uint96 royaltyFeeRatioInBps,\\n            uint256 daoIndex,\\n            string memory daoUri,\\n            uint256 tokenMaxSupply\\n        )\\n    {\\n        DaoStorage.DaoInfo storage pi = DaoStorage.layout().daoInfos[daoId];\\n        startRound = pi.startRound;\\n        mintableRound = pi.mintableRound;\\n        nftMaxSupply = pi.nftMaxSupply;\\n        daoFeePool = pi.daoFeePool;\\n        royaltyFeeRatioInBps = pi.royaltyFeeRatioInBps;\\n        daoIndex = pi.daoIndex;\\n        daoUri = pi.daoUri;\\n        tokenMaxSupply = pi.tokenMaxSupply;\\n    }\\n\\n    function getProjectFloorPrice(bytes32 daoId) public view returns (uint256) {\\n        return PriceStorage.layout().daoFloorPrices[daoId];\\n    }\\n\\n    function getProjectTokens(bytes32 daoId) public view returns (address token, address nft) {\\n        DaoStorage.DaoInfo storage daoInfo = DaoStorage.layout().daoInfos[daoId];\\n        token = daoInfo.token;\\n        nft = daoInfo.nft;\\n    }\\n\\n    function getCanvasNFTCount(bytes32 canvasId) public view returns (uint256) {\\n        return CanvasStorage.layout().canvasInfos[canvasId].tokenIds.length;\\n    }\\n\\n    function getTokenIDAt(bytes32 canvasId, uint256 index) public view returns (uint256) {\\n        return CanvasStorage.layout().canvasInfos[canvasId].tokenIds[index];\\n    }\\n\\n    function getCanvasProject(bytes32 canvasId) public view returns (bytes32) {\\n        return CanvasStorage.layout().canvasInfos[canvasId].daoId;\\n    }\\n\\n    function getCanvasURI(bytes32 canvasId) public view returns (string memory) {\\n        return CanvasStorage.layout().canvasInfos[canvasId].canvasUri;\\n    }\\n\\n    function getProjectCanvasCount(bytes32 daoId) public view returns (uint256) {\\n        return DaoStorage.layout().daoInfos[daoId].canvases.length;\\n    }\\n\\n    // new functions\\n    // DAO related functions\\n    function getDaoStartRound(bytes32 daoId) external view returns (uint256 startRound) {\\n        return DaoStorage.layout().daoInfos[daoId].startRound;\\n    }\\n\\n    function getDaoMintableRound(bytes32 daoId) external view returns (uint256 mintableRound) {\\n        return DaoStorage.layout().daoInfos[daoId].mintableRound;\\n    }\\n\\n    function getDaoIndex(bytes32 daoId) external view returns (uint256 index) {\\n        return DaoStorage.layout().daoInfos[daoId].daoIndex;\\n    }\\n\\n    function getDaoUri(bytes32 daoId) external view returns (string memory daoUri) {\\n        return DaoStorage.layout().daoInfos[daoId].daoUri;\\n    }\\n\\n    function getDaoFeePool(bytes32 daoId) external view returns (address daoFeePool) {\\n        return DaoStorage.layout().daoInfos[daoId].daoFeePool;\\n    }\\n\\n    function getDaoToken(bytes32 daoId) external view returns (address token) {\\n        return DaoStorage.layout().daoInfos[daoId].token;\\n    }\\n\\n    function getDaoTokenMaxSupply(bytes32 daoId) external view returns (uint256 tokenMaxSupply) {\\n        return DaoStorage.layout().daoInfos[daoId].tokenMaxSupply;\\n    }\\n\\n    function getDaoNft(bytes32 daoId) external view returns (address nft) {\\n        return DaoStorage.layout().daoInfos[daoId].nft;\\n    }\\n\\n    function getDaoNftMaxSupply(bytes32 daoId) external view returns (uint256 nftMaxSupply) {\\n        return DaoStorage.layout().daoInfos[daoId].nftMaxSupply;\\n    }\\n\\n    function getDaoNftTotalSupply(bytes32 daoId) external view returns (uint256 nftTotalSupply) {\\n        return DaoStorage.layout().daoInfos[daoId].nftTotalSupply;\\n    }\\n\\n    function getDaoNftRoyaltyFeeRatioInBps(bytes32 daoId) external view returns (uint96 royaltyFeeRatioInBps) {\\n        return DaoStorage.layout().daoInfos[daoId].royaltyFeeRatioInBps;\\n    }\\n\\n    function getDaoExist(bytes32 daoId) external view returns (bool exist) {\\n        return DaoStorage.layout().daoInfos[daoId].daoExist;\\n    }\\n\\n    function getDaoCanvases(bytes32 daoId) external view returns (bytes32[] memory canvases) {\\n        return DaoStorage.layout().daoInfos[daoId].canvases;\\n    }\\n\\n    function getDaoPriceTemplate(bytes32 daoId) external view returns (address priceTemplate) {\\n        return SettingsStorage.layout().priceTemplates[uint8(DaoStorage.layout().daoInfos[daoId].priceTemplateType)];\\n    }\\n\\n    function getDaoPriceFactor(bytes32 daoId) external view returns (uint256 priceFactor) {\\n        return DaoStorage.layout().daoInfos[daoId].nftPriceFactor;\\n    }\\n\\n    function getDaoRewardTemplate(bytes32 daoId) external view override returns (address rewardTemplate) {\\n        return SettingsStorage.layout().rewardTemplates[uint8(DaoStorage.layout().daoInfos[daoId].rewardTemplateType)];\\n    }\\n\\n    function getDaoMintCap(bytes32 daoId) public view returns (uint32) {\\n        return DaoStorage.layout().daoInfos[daoId].daoMintInfo.daoMintCap;\\n    }\\n\\n    function getDaoNftHolderMintCap(bytes32 daoId) public view returns (uint32) {\\n        return DaoStorage.layout().daoInfos[daoId].daoMintInfo.NFTHolderMintCap;\\n    }\\n\\n    function getUserMintInfo(bytes32 daoId, address account) public view returns (uint32 minted, uint32 userMintCap) {\\n        minted = DaoStorage.layout().daoInfos[daoId].daoMintInfo.userMintInfos[account].minted;\\n        userMintCap = DaoStorage.layout().daoInfos[daoId].daoMintInfo.userMintInfos[account].mintCap;\\n    }\\n\\n    function getDaoFeePoolETHRatio(bytes32 daoId) public view returns (uint256) {\\n        DaoStorage.DaoInfo storage daoInfo = DaoStorage.layout().daoInfos[daoId];\\n        if (daoInfo.daoFeePoolETHRatioInBps == 0) {\\n            return SettingsStorage.layout().daoFeePoolMintFeeRatioInBps;\\n        }\\n        return daoInfo.daoFeePoolETHRatioInBps;\\n    }\\n\\n    function getDaoFeePoolETHRatioFlatPrice(bytes32 daoId) public view returns (uint256) {\\n        DaoStorage.DaoInfo storage daoInfo = DaoStorage.layout().daoInfos[daoId];\\n        if (daoInfo.daoFeePoolETHRatioInBpsFlatPrice == 0) {\\n            return SettingsStorage.layout().daoFeePoolMintFeeRatioInBpsFlatPrice;\\n        }\\n        return daoInfo.daoFeePoolETHRatioInBpsFlatPrice;\\n    }\\n\\n    function getDaoTag(bytes32 daoId) public view returns (string memory) {\\n        DaoTag tag = DaoStorage.layout().daoInfos[daoId].daoTag;\\n        if (tag == DaoTag.D4A_DAO) return \\\"D4A DAO\\\";\\n        else if (tag == DaoTag.BASIC_DAO) return \\\"BASIC DAO\\\";\\n        else return \\\"\\\";\\n    }\\n\\n    // canvas related functions\\n    function getCanvasDaoId(bytes32 canvasId) external view returns (bytes32 daoId) {\\n        return CanvasStorage.layout().canvasInfos[canvasId].daoId;\\n    }\\n\\n    function getCanvasTokenIds(bytes32 canvasId) external view returns (uint256[] memory tokenIds) {\\n        return CanvasStorage.layout().canvasInfos[canvasId].tokenIds;\\n    }\\n\\n    function getCanvasIndex(bytes32 canvasId) public view returns (uint256) {\\n        return CanvasStorage.layout().canvasInfos[canvasId].index;\\n    }\\n\\n    function getCanvasUri(bytes32 canvasId) external view returns (string memory canvasUri) {\\n        return CanvasStorage.layout().canvasInfos[canvasId].canvasUri;\\n    }\\n\\n    function getCanvasRebateRatioInBps(bytes32 canvasId) public view returns (uint256) {\\n        return CanvasStorage.layout().canvasInfos[canvasId].canvasRebateRatioInBps;\\n    }\\n\\n    function getCanvasExist(bytes32 canvasId) external view returns (bool exist) {\\n        return CanvasStorage.layout().canvasInfos[canvasId].canvasExist;\\n    }\\n\\n    // prices related functions\\n    function getCanvasLastPrice(bytes32 canvasId) public view returns (uint256 round, uint256 price) {\\n        PriceStorage.MintInfo storage mintInfo = PriceStorage.layout().canvasLastMintInfos[canvasId];\\n        return (mintInfo.round, mintInfo.price);\\n    }\\n\\n    function getCanvasNextPrice(bytes32 canvasId) public view returns (uint256) {\\n        bytes32 daoId = CanvasStorage.layout().canvasInfos[canvasId].daoId;\\n        uint256 daoFloorPrice = PriceStorage.layout().daoFloorPrices[daoId];\\n        PriceStorage.MintInfo memory maxPrice = PriceStorage.layout().daoMaxPrices[daoId];\\n        PriceStorage.MintInfo memory mintInfo = PriceStorage.layout().canvasLastMintInfos[canvasId];\\n        DaoStorage.DaoInfo storage pi = DaoStorage.layout().daoInfos[daoId];\\n        SettingsStorage.Layout storage settingsStorage = SettingsStorage.layout();\\n        return IPriceTemplate(\\n            settingsStorage.priceTemplates[uint8(DaoStorage.layout().daoInfos[daoId].priceTemplateType)]\\n        ).getCanvasNextPrice(\\n            pi.startRound, settingsStorage.drb.currentRound(), pi.nftPriceFactor, daoFloorPrice, maxPrice, mintInfo\\n        );\\n    }\\n\\n    function getDaoMaxPriceInfo(bytes32 daoId) external view returns (uint256 round, uint256 price) {\\n        PriceStorage.MintInfo memory maxPrice = PriceStorage.layout().daoMaxPrices[daoId];\\n        return (maxPrice.round, maxPrice.price);\\n    }\\n\\n    function getDaoFloorPrice(bytes32 daoId) external view returns (uint256 floorPrice) {\\n        return PriceStorage.layout().daoFloorPrices[daoId];\\n    }\\n\\n    // reward related functions\\n    function getDaoRewardStartRound(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointIndex\\n    )\\n        external\\n        view\\n        returns (uint256 startRound)\\n    {\\n        return RewardStorage.layout().rewardInfos[daoId].rewardCheckpoints[rewardCheckpointIndex].startRound;\\n    }\\n\\n    function getDaoRewardTotalRound(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointIndex\\n    )\\n        external\\n        view\\n        returns (uint256 totalRound)\\n    {\\n        return RewardStorage.layout().rewardInfos[daoId].rewardCheckpoints[rewardCheckpointIndex].totalRound;\\n    }\\n\\n    function getDaoTotalReward(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointIndex\\n    )\\n        external\\n        view\\n        returns (uint256 totalReward)\\n    {\\n        return RewardStorage.layout().rewardInfos[daoId].rewardCheckpoints[rewardCheckpointIndex].totalReward;\\n    }\\n\\n    function getDaoRewardDecayFactor(bytes32 daoId) external view returns (uint256 rewardDecayFactor) {\\n        return RewardStorage.layout().rewardInfos[daoId].rewardDecayFactor;\\n    }\\n\\n    function getDaoRewardIsProgressiveJackpot(bytes32 daoId) external view returns (bool isProgressiveJackpot) {\\n        return RewardStorage.layout().rewardInfos[daoId].isProgressiveJackpot;\\n    }\\n\\n    function getDaoRewardLastActiveRound(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointIndex\\n    )\\n        external\\n        view\\n        returns (uint256 lastActiveRound)\\n    {\\n        return RewardStorage.layout().rewardInfos[daoId].rewardCheckpoints[rewardCheckpointIndex].lastActiveRound;\\n    }\\n\\n    function getDaoRewardActiveRounds(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointIndex\\n    )\\n        external\\n        view\\n        returns (uint256[] memory activeRounds)\\n    {\\n        return RewardStorage.layout().rewardInfos[daoId].rewardCheckpoints[rewardCheckpointIndex].activeRounds;\\n    }\\n\\n    function getDaoCreatorClaimableRound(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointIndex\\n    )\\n        external\\n        view\\n        returns (uint256 claimableRound)\\n    {\\n        RewardStorage.RewardCheckpoint storage rewardCheckpoint =\\n            RewardStorage.layout().rewardInfos[daoId].rewardCheckpoints[rewardCheckpointIndex];\\n        return rewardCheckpoint.activeRounds[rewardCheckpoint.daoCreatorClaimableRoundIndex];\\n    }\\n\\n    function getCanvasCreatorClaimableRound(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointsIndex,\\n        bytes32 canvasId\\n    )\\n        external\\n        view\\n        returns (uint256 claimableRound)\\n    {\\n        RewardStorage.RewardCheckpoint storage rewardCheckpoint =\\n            RewardStorage.layout().rewardInfos[daoId].rewardCheckpoints[rewardCheckpointsIndex];\\n        return rewardCheckpoint.activeRounds[rewardCheckpoint.canvasCreatorClaimableRoundIndexes[canvasId]];\\n    }\\n\\n    function getNftMinterClaimableRound(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointsIndex,\\n        address nftMinter\\n    )\\n        external\\n        view\\n        returns (uint256 claimableRound)\\n    {\\n        RewardStorage.RewardCheckpoint storage rewardCheckpoint =\\n            RewardStorage.layout().rewardInfos[daoId].rewardCheckpoints[rewardCheckpointsIndex];\\n        return rewardCheckpoint.activeRounds[rewardCheckpoint.nftMinterClaimableRoundIndexes[nftMinter]];\\n    }\\n\\n    function getTotalWeight(bytes32 daoId, uint256 round) external view returns (uint256 totalWeight) {\\n        return RewardStorage.layout().rewardInfos[daoId].totalWeights[round];\\n    }\\n\\n    function getProtocolWeight(bytes32 daoId, uint256 round) external view returns (uint256 protocolWeight) {\\n        return RewardStorage.layout().rewardInfos[daoId].protocolWeights[round];\\n    }\\n\\n    function getDaoCreatorWeight(bytes32 daoId, uint256 round) external view returns (uint256 creatorWeight) {\\n        return RewardStorage.layout().rewardInfos[daoId].daoCreatorWeights[round];\\n    }\\n\\n    function getCanvasCreatorWeight(\\n        bytes32 daoId,\\n        uint256 round,\\n        bytes32 canvasId\\n    )\\n        external\\n        view\\n        returns (uint256 creatorWeight)\\n    {\\n        return RewardStorage.layout().rewardInfos[daoId].canvasCreatorWeights[round][canvasId];\\n    }\\n\\n    function getNftMinterWeight(\\n        bytes32 daoId,\\n        uint256 round,\\n        address nftMinter\\n    )\\n        external\\n        view\\n        returns (uint256 minterWeight)\\n    {\\n        return RewardStorage.layout().rewardInfos[daoId].nftMinterWeights[round][nftMinter];\\n    }\\n\\n    function getDaoCreatorERC20Ratio(bytes32 daoId) public view returns (uint256) {\\n        SettingsStorage.Layout storage settingsStorage = SettingsStorage.layout();\\n        uint256 daoCreatorERC20RatioInBps = RewardStorage.layout().rewardInfos[daoId].daoCreatorERC20RatioInBps;\\n        if (daoCreatorERC20RatioInBps == 0) {\\n            return settingsStorage.daoCreatorERC20RatioInBps;\\n        }\\n        return (daoCreatorERC20RatioInBps * (BASIS_POINT - settingsStorage.protocolERC20RatioInBps)) / BASIS_POINT;\\n    }\\n\\n    function getCanvasCreatorERC20Ratio(bytes32 daoId) public view returns (uint256) {\\n        SettingsStorage.Layout storage settingsStorage = SettingsStorage.layout();\\n        uint256 canvasCreatorERC20RatioInBps = RewardStorage.layout().rewardInfos[daoId].canvasCreatorERC20RatioInBps;\\n        if (canvasCreatorERC20RatioInBps == 0) {\\n            return settingsStorage.canvasCreatorERC20RatioInBps;\\n        }\\n        return (canvasCreatorERC20RatioInBps * (BASIS_POINT - settingsStorage.protocolERC20RatioInBps)) / BASIS_POINT;\\n    }\\n\\n    function getNftMinterERC20Ratio(bytes32 daoId) public view returns (uint256) {\\n        return BASIS_POINT - SettingsStorage.layout().protocolERC20RatioInBps - getDaoCreatorERC20Ratio(daoId)\\n            - getCanvasCreatorERC20Ratio(daoId);\\n    }\\n\\n    function getRoundReward(bytes32 daoId, uint256 round) public view returns (uint256) {\\n        return _castGetRoundRewardToView(_getRoundReward)(daoId, round);\\n    }\\n\\n    function getRewardTillRound(bytes32 daoId, uint256 round) public view returns (uint256) {\\n        RewardStorage.RewardInfo storage rewardInfo = RewardStorage.layout().rewardInfos[daoId];\\n        RewardStorage.RewardCheckpoint[] storage rewardCheckpoints = rewardInfo.rewardCheckpoints;\\n\\n        uint256 totalRoundReward;\\n        for (uint256 i; i < rewardCheckpoints.length; i++) {\\n            uint256[] memory activeRounds = rewardCheckpoints[i].activeRounds;\\n            for (uint256 j; j < activeRounds.length && activeRounds[j] <= round; j++) {\\n                totalRoundReward += getRoundReward(daoId, activeRounds[j]);\\n            }\\n        }\\n\\n        return totalRoundReward;\\n    }\\n\\n    function getDaoDailyMintCap(bytes32 daoId) public view returns (uint256) {\\n        BasicDaoStorage.Layout storage basicDaoStorage = BasicDaoStorage.layout();\\n        return basicDaoStorage.basicDaoInfos[daoId].dailyMintCap;\\n    }\\n\\n    function getDaoUnifiedPriceModeOff(bytes32 daoId) public view returns (bool) {\\n        BasicDaoStorage.Layout storage basicDaoStorage = BasicDaoStorage.layout();\\n        return basicDaoStorage.basicDaoInfos[daoId].unifiedPriceModeOff;\\n    }\\n\\n    //9999 = 0, 0 = 0.01,\\n    function getDaoUnifiedPrice(bytes32 daoId) public view returns (uint256) {\\n        BasicDaoStorage.BasicDaoInfo storage basicDaoInfo = BasicDaoStorage.layout().basicDaoInfos[daoId];\\n        if (basicDaoInfo.unifiedPrice == 9999 ether) {\\n            return 0;\\n        } else {\\n            return basicDaoInfo.unifiedPrice == 0\\n                ? BasicDaoStorage.layout().basicDaoNftFlatPrice\\n                : basicDaoInfo.unifiedPrice;\\n        }\\n    }\\n\\n    function getDaoReserveNftNumber(bytes32 daoId) public view returns (uint256) {\\n        BasicDaoStorage.BasicDaoInfo storage basicDaoInfo = BasicDaoStorage.layout().basicDaoInfos[daoId];\\n        return basicDaoInfo.reserveNftNumber == 0 ? BASIC_DAO_RESERVE_NFT_NUMBER : basicDaoInfo.reserveNftNumber;\\n    }\\n\\n    function _getRoundReward(bytes32 daoId, uint256 round) internal returns (uint256) {\\n        address rewardTemplate =\\n            SettingsStorage.layout().rewardTemplates[uint8(DaoStorage.layout().daoInfos[daoId].rewardTemplateType)];\\n\\n        (bool succ, bytes memory data) =\\n            rewardTemplate.delegatecall(abi.encodeWithSelector(IRewardTemplate.getRoundReward.selector, daoId, round));\\n        if (!succ) {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    function _castGetRoundRewardToView(function(bytes32, uint256) internal returns (uint256) fnIn)\\n        internal\\n        pure\\n        returns (function(bytes32, uint256) internal view returns (uint256) fnOut)\\n    {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storages/InheritTreeStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nlibrary InheritTreeStorage {\\n    struct InheritTreeInfo {\\n        bytes32[] parents;\\n        bytes32[] children;\\n        bytes32[] familyDaos;\\n        bytes32 ancestor;\\n        bool isAncestorDao;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 daoId => InheritTreeInfo inheritTreeInfo) inheritTreeInfos;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"D4Av2.contracts.storage.InheritTreeStorage\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ID4AProtocolReadable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface ID4AProtocolReadable {\\n    // legacy functions\\n    function getProjectCanvasAt(bytes32 daoId, uint256 index) external view returns (bytes32);\\n\\n    function getProjectInfo(bytes32 daoId)\\n        external\\n        view\\n        returns (\\n            uint256 startRound,\\n            uint256 mintableRound,\\n            uint256 maxNftAmount,\\n            address daoFeePool,\\n            uint96 royaltyFeeRatioInBps,\\n            uint256 index,\\n            string memory daoUri,\\n            uint256 erc20TotalSupply\\n        );\\n\\n    function getProjectFloorPrice(bytes32 daoId) external view returns (uint256);\\n\\n    function getProjectTokens(bytes32 daoId) external view returns (address token, address nft);\\n\\n    function getCanvasNFTCount(bytes32 canvasId) external view returns (uint256);\\n\\n    function getTokenIDAt(bytes32 canvasId, uint256 index) external view returns (uint256);\\n\\n    function getCanvasProject(bytes32 canvasId) external view returns (bytes32);\\n\\n    function getCanvasURI(bytes32 canvasId) external view returns (string memory);\\n\\n    function getProjectCanvasCount(bytes32 daoId) external view returns (uint256);\\n\\n    // new functions\\n    // DAO related functions\\n    function getDaoStartRound(bytes32 daoId) external view returns (uint256 startRound);\\n\\n    function getDaoMintableRound(bytes32 daoId) external view returns (uint256 mintableRound);\\n\\n    function getDaoIndex(bytes32 daoId) external view returns (uint256 index);\\n\\n    function getDaoUri(bytes32 daoId) external view returns (string memory daoUri);\\n\\n    function getDaoFeePool(bytes32 daoId) external view returns (address daoFeePool);\\n\\n    function getDaoToken(bytes32 daoId) external view returns (address token);\\n\\n    function getDaoTokenMaxSupply(bytes32 daoId) external view returns (uint256 tokenMaxSupply);\\n\\n    function getDaoNft(bytes32 daoId) external view returns (address nft);\\n\\n    function getDaoNftMaxSupply(bytes32 daoId) external view returns (uint256 nftMaxSupply);\\n\\n    function getDaoNftTotalSupply(bytes32 daoId) external view returns (uint256 nftTotalSupply);\\n\\n    function getDaoNftRoyaltyFeeRatioInBps(bytes32 daoId) external view returns (uint96 royaltyFeeRatioInBps);\\n\\n    function getDaoExist(bytes32 daoId) external view returns (bool);\\n\\n    function getDaoCanvases(bytes32 daoId) external view returns (bytes32[] memory canvases);\\n\\n    function getDaoPriceTemplate(bytes32 daoId) external view returns (address priceTemplate);\\n\\n    function getDaoPriceFactor(bytes32 daoId) external view returns (uint256 priceFactor);\\n\\n    function getDaoRewardTemplate(bytes32 daoId) external view returns (address rewardTemplate);\\n\\n    function getDaoMintCap(bytes32 daoId) external view returns (uint32);\\n\\n    function getDaoNftHolderMintCap(bytes32 daoId) external view returns (uint32);\\n\\n    function getUserMintInfo(\\n        bytes32 daoId,\\n        address account\\n    )\\n        external\\n        view\\n        returns (uint32 minted, uint32 userMintCap);\\n\\n    function getDaoFeePoolETHRatio(bytes32 daoId) external view returns (uint256);\\n\\n    function getDaoFeePoolETHRatioFlatPrice(bytes32 daoId) external view returns (uint256);\\n\\n    function getDaoTag(bytes32 daoId) external view returns (string memory);\\n\\n    // canvas related functions\\n    function getCanvasDaoId(bytes32 canvasId) external view returns (bytes32 daoId);\\n\\n    function getCanvasTokenIds(bytes32 canvasId) external view returns (uint256[] memory tokenIds);\\n\\n    function getCanvasIndex(bytes32 canvasId) external view returns (uint256);\\n\\n    function getCanvasUri(bytes32 canvasId) external view returns (string memory canvasUri);\\n\\n    function getCanvasRebateRatioInBps(bytes32 canvasId) external view returns (uint256 rebateRatioInBps);\\n\\n    function getCanvasExist(bytes32 canvasId) external view returns (bool);\\n\\n    // prices related functions\\n    function getCanvasLastPrice(bytes32 canvasId) external view returns (uint256 round, uint256 price);\\n\\n    function getCanvasNextPrice(bytes32 canvasId) external view returns (uint256 price);\\n\\n    function getDaoMaxPriceInfo(bytes32 daoId) external view returns (uint256 round, uint256 price);\\n\\n    function getDaoFloorPrice(bytes32 daoId) external view returns (uint256 floorPrice);\\n\\n    function getDaoDailyMintCap(bytes32 daoId) external view returns (uint256);\\n\\n    function getDaoUnifiedPriceModeOff(bytes32 daoId) external view returns (bool);\\n\\n    function getDaoUnifiedPrice(bytes32 daoId) external view returns (uint256);\\n\\n    function getDaoReserveNftNumber(bytes32 daoId) external view returns (uint256);\\n\\n    // reward related functions\\n    function getDaoRewardStartRound(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointIndex\\n    )\\n        external\\n        view\\n        returns (uint256 startRound);\\n\\n    function getDaoRewardTotalRound(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointIndex\\n    )\\n        external\\n        view\\n        returns (uint256 totalRound);\\n\\n    function getDaoTotalReward(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointIndex\\n    )\\n        external\\n        view\\n        returns (uint256 totalReward);\\n\\n    function getDaoRewardDecayFactor(bytes32 daoId) external view returns (uint256 rewardDecayFactor);\\n\\n    function getDaoRewardIsProgressiveJackpot(bytes32 daoId) external view returns (bool isProgressiveJackpot);\\n\\n    function getDaoRewardLastActiveRound(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointIndex\\n    )\\n        external\\n        view\\n        returns (uint256 lastActiveRound);\\n\\n    function getDaoRewardActiveRounds(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointIndex\\n    )\\n        external\\n        view\\n        returns (uint256[] memory activeRounds);\\n\\n    function getDaoCreatorClaimableRound(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointsIndex\\n    )\\n        external\\n        view\\n        returns (uint256 claimableRound);\\n\\n    function getCanvasCreatorClaimableRound(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointsIndex,\\n        bytes32 canvasId\\n    )\\n        external\\n        view\\n        returns (uint256 claimableRound);\\n\\n    function getNftMinterClaimableRound(\\n        bytes32 daoId,\\n        uint256 rewardCheckpointsIndex,\\n        address nftMinter\\n    )\\n        external\\n        view\\n        returns (uint256 claimableRound);\\n\\n    function getTotalWeight(bytes32 daoId, uint256 round) external view returns (uint256 totalWeight);\\n\\n    function getProtocolWeight(bytes32 daoId, uint256 round) external view returns (uint256 protocolWeight);\\n\\n    function getDaoCreatorWeight(bytes32 daoId, uint256 round) external view returns (uint256 creatorWeight);\\n\\n    function getCanvasCreatorWeight(\\n        bytes32 daoId,\\n        uint256 round,\\n        bytes32 canvasId\\n    )\\n        external\\n        view\\n        returns (uint256 creatorWeight);\\n\\n    function getNftMinterWeight(\\n        bytes32 daoId,\\n        uint256 round,\\n        address nftMinter\\n    )\\n        external\\n        view\\n        returns (uint256 minterWeight);\\n\\n    function getDaoCreatorERC20Ratio(bytes32 daoId) external view returns (uint256 ratioInBps);\\n\\n    function getCanvasCreatorERC20Ratio(bytes32 daoId) external view returns (uint256 ratioInBps);\\n\\n    function getNftMinterERC20Ratio(bytes32 daoId) external view returns (uint256 ratioInBps);\\n\\n    function getRoundReward(bytes32 daoId, uint256 round) external view returns (uint256);\\n\\n    function getRewardTillRound(bytes32 daoId, uint256 round) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/D4AConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nuint256 constant BASIS_POINT = 10_000;\\n\\nbytes32 constant DEFAULT_ADMIN_ROLE = 0;\\nbytes32 constant PROTOCOL_ROLE = keccak256(\\\"PROTOCOL_ROLE\\\");\\nbytes32 constant OPERATION_ROLE = keccak256(\\\"OPERATION_ROLE\\\");\\nbytes32 constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\nbytes32 constant SIGNER_ROLE = keccak256(\\\"SIGNER_ROLE\\\");\\n\\nuint256 constant BASIC_DAO_RESERVE_NFT_NUMBER = 1000;\\n\"\r\n    },\r\n    \"contracts/interface/D4AEnums.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nenum PriceTemplateType {\\n    EXPONENTIAL_PRICE_VARIATION,\\n    LINEAR_PRICE_VARIATION\\n}\\n\\nenum RewardTemplateType {\\n    LINEAR_REWARD_ISSUANCE,\\n    EXPONENTIAL_REWARD_ISSUANCE\\n}\\n\\nenum TemplateChoice {\\n    PRICE,\\n    REWARD\\n}\\n\\nenum DaoTag {\\n    D4A_DAO,\\n    BASIC_DAO\\n}\\n\\nenum DeployMethod {\\n    REMOVE,\\n    REPLACE,\\n    ADD,\\n    REMOVE_AND_ADD\\n}\\n\"\r\n    },\r\n    \"contracts/storages/DaoStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { PriceTemplateType, RewardTemplateType, DaoTag } from \\\"../interface/D4AEnums.sol\\\";\\nimport { DaoMintInfo, NftMinterCapInfo, NftMinterCap } from \\\"contracts/interface/D4AStructs.sol\\\";\\n\\nlibrary DaoStorage {\\n    struct DaoInfo {\\n        // metadata\\n        uint256 startRound;\\n        uint256 mintableRound;\\n        uint256 daoIndex;\\n        string daoUri;\\n        address daoFeePool;\\n        // token related info\\n        address token;\\n        uint256 tokenMaxSupply;\\n        // nft related info\\n        address nft;\\n        uint256 nftMaxSupply;\\n        uint256 nftTotalSupply;\\n        uint96 royaltyFeeRatioInBps;\\n        // miscellanous\\n        bool daoExist;\\n        PriceTemplateType priceTemplateType;\\n        RewardTemplateType rewardTemplateType;\\n        DaoTag daoTag;\\n        DaoMintInfo daoMintInfo;\\n        bytes32[] canvases;\\n        uint256 nftPriceFactor;\\n        uint256 daoFeePoolETHRatioInBps;\\n        uint256 daoFeePoolETHRatioInBpsFlatPrice;\\n        NftMinterCap nftMinterCap;\\n        NftMinterCapInfo[] nftMinterCapInfo;\\n        mapping(uint256 => uint256) dailyMint;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 daoId => DaoInfo) daoInfos;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"D4Av2.contracts.storage.DaoStorage\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/storages/BasicDaoStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nlibrary BasicDaoStorage {\\n    struct BasicDaoInfo {\\n        bool unlocked;\\n        bytes32 canvasIdOfSpecialNft;\\n        uint256 tokenId;\\n        uint256 dailyMintCap;\\n        uint256 reserveNftNumber;\\n        bool unifiedPriceModeOff;\\n        uint256 unifiedPrice;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 daoId => BasicDaoInfo basicDaoInfo) basicDaoInfos;\\n        string specialTokenUriPrefix;\\n        uint256 basicDaoNftFlatPrice;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"D4Av2.contracts.storage.BasicDaoStorage\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storages/CanvasStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nlibrary CanvasStorage {\\n    struct CanvasInfo {\\n        bytes32 daoId;\\n        uint256[] tokenIds;\\n        uint256 index;\\n        string canvasUri;\\n        bool canvasExist;\\n        uint256 canvasRebateRatioInBps;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 canvasId => CanvasInfo) canvasInfos;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"D4Av2.contracts.storage.CanvasStorage\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storages/PriceStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nlibrary PriceStorage {\\n    struct MintInfo {\\n        uint256 round;\\n        uint256 price;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 canvasId => MintInfo mintInfo) canvasLastMintInfos;\\n        mapping(bytes32 daoId => MintInfo) daoMaxPrices;\\n        mapping(bytes32 daoId => uint256 floorPrice) daoFloorPrices;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"D4Av2.contracts.storage.PriceStorage\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storages/RewardStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nlibrary RewardStorage {\\n    struct RewardCheckpoint {\\n        uint256 startRound;\\n        uint256 totalRound;\\n        uint256 totalReward;\\n        uint256 lastActiveRound; // deprecated\\n        uint256[] activeRounds;\\n        // claimable round index\\n        uint256 daoCreatorClaimableRoundIndex;\\n        mapping(bytes32 canvasId => uint256 claimableRoundIndex) canvasCreatorClaimableRoundIndexes;\\n        mapping(address nftMinter => uint256 claimableRoundIndex) nftMinterClaimableRoundIndexes;\\n    }\\n\\n    struct RewardInfo {\\n        RewardCheckpoint[] rewardCheckpoints;\\n        uint256 rewardIssuePendingRound;\\n        uint256 rewardDecayFactor;\\n        bool isProgressiveJackpot;\\n        // weights\\n        mapping(uint256 round => uint256 totalWeight) totalWeights; // also total ETH in DAO fee pool at given round\\n        mapping(uint256 round => uint256 weight) protocolWeights;\\n        mapping(uint256 round => uint256 weight) daoCreatorWeights;\\n        mapping(uint256 round => mapping(bytes32 canvasId => uint256 weight)) canvasCreatorWeights;\\n        mapping(uint256 round => mapping(address nftMinter => uint256 weight)) nftMinterWeights;\\n        uint256 daoCreatorERC20RatioInBps;\\n        uint256 canvasCreatorERC20RatioInBps;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 daoId => RewardInfo rewardInfo) rewardInfos;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"D4Av2.contracts.storage.RewardStorage\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storages/SettingsStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.10;\\n\\nimport { ID4ADrb } from \\\"../interface/ID4ADrb.sol\\\";\\nimport { ID4AFeePoolFactory } from \\\"../interface/ID4AFeePoolFactory.sol\\\";\\nimport { ID4AERC20Factory } from \\\"../interface/ID4AERC20Factory.sol\\\";\\nimport { ID4AERC721Factory } from \\\"../interface/ID4AERC721Factory.sol\\\";\\nimport { ID4AOwnerProxy } from \\\"../interface/ID4AOwnerProxy.sol\\\";\\nimport { IPermissionControl } from \\\"../interface/IPermissionControl.sol\\\";\\n\\nlibrary SettingsStorage {\\n    struct Layout {\\n        // fee related\\n        uint256 createDaoFeeAmount;\\n        uint256 createCanvasFeeAmount;\\n        uint256 protocolMintFeeRatioInBps;\\n        uint256 daoFeePoolMintFeeRatioInBps;\\n        uint256 daoFeePoolMintFeeRatioInBpsFlatPrice;\\n        uint256 protocolRoyaltyFeeRatioInBps;\\n        uint256 minRoyaltyFeeRatioInBps;\\n        uint256 maxRoyaltyFeeRatioInBps;\\n        uint256 protocolERC20RatioInBps;\\n        uint256 daoCreatorERC20RatioInBps;\\n        uint256 canvasCreatorERC20RatioInBps;\\n        // contract address\\n        address protocolFeePool;\\n        ID4ADrb drb;\\n        ID4AERC20Factory erc20Factory;\\n        ID4AERC721Factory erc721Factory;\\n        ID4AFeePoolFactory feePoolFactory;\\n        ID4AOwnerProxy ownerProxy;\\n        IPermissionControl permissionControl;\\n        address createProjectProxy;\\n        // params\\n        uint256 tokenMaxSupply;\\n        uint256 maxMintableRound; //366\\n        uint256[] mintableRounds;\\n        uint256[] daoFloorPrices;\\n        uint256[] nftMaxSupplies;\\n        address assetOwner;\\n        bool isProtocolPaused;\\n        mapping(bytes32 => bool) pauseStatuses;\\n        uint256 reservedDaoAmount;\\n        address[256] priceTemplates;\\n        address[256] rewardTemplates;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"D4Av2.contracts.storage.Settings\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IPriceTemplate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { PriceStorage } from \\\"contracts/storages/PriceStorage.sol\\\";\\n\\ninterface IPriceTemplate {\\n    function getCanvasNextPrice(\\n        uint256 startRound,\\n        uint256 currentRound,\\n        uint256 priceFactor,\\n        uint256 daoFloorPrice,\\n        PriceStorage.MintInfo memory maxPrice,\\n        PriceStorage.MintInfo memory mintInfo\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function updateCanvasPrice(\\n        bytes32 daoId,\\n        bytes32 canvasId,\\n        uint256 currentRound,\\n        uint256 price,\\n        uint256 priceMultiplierInBps\\n    )\\n        external\\n        payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IRewardTemplate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { UpdateRewardParam } from \\\"contracts/interface/D4AStructs.sol\\\";\\n\\ninterface IRewardTemplate {\\n    function updateReward(UpdateRewardParam memory param) external payable;\\n\\n    function claimDaoCreatorReward(\\n        bytes32 daoId,\\n        address protocolFeePool,\\n        address daoCreator,\\n        uint256 currentRound,\\n        address token\\n    )\\n        external\\n        returns (uint256 protocolClaimableReward, uint256 daoCreatorClaimableReward);\\n\\n    function claimCanvasCreatorReward(\\n        bytes32 daoId,\\n        bytes32 canvasId,\\n        address canvasCreator,\\n        uint256 currentRound,\\n        address token\\n    )\\n        external\\n        returns (uint256 claimableReward);\\n\\n    function issueLastRoundReward(bytes32 daoId, address token) external;\\n\\n    function claimNftMinterReward(\\n        bytes32 daoId,\\n        address nftMinter,\\n        uint256 currentRound,\\n        address token\\n    )\\n        external\\n        returns (uint256 claimableReward);\\n\\n    function setRewardCheckpoint(bytes32 daoId, int256 mintableRoundDelta, uint256 totalRewardDelta) external payable;\\n\\n    function getRoundReward(bytes32 daoId, uint256 round) external view returns (uint256 rewardAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/D4AStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport { PriceTemplateType, RewardTemplateType } from \\\"./D4AEnums.sol\\\";\\n\\nstruct DaoMetadataParam {\\n    uint256 startDrb;\\n    uint256 mintableRounds;\\n    uint256 floorPriceRank;\\n    uint256 maxNftRank;\\n    uint96 royaltyFee;\\n    string projectUri;\\n    uint256 projectIndex;\\n}\\n\\nstruct DaoMintInfo {\\n    uint32 daoMintCap; // Dao\u7684\u94f8\u9020\u4e0a\u9650\\n    uint32 NFTHolderMintCap; // NftHolder\u7684\u94f8\u9020\u4e0a\u9650\\n    mapping(address minter => UserMintInfo) userMintInfos; // \u7ed9\u5b9aminter\u7684\u5730\u5740\uff0c\u83b7\u53d6\u5df2\u7ecfmint\u7684\u4e2a\u6570\u4ee5\u53camintCap\\n}\\n\\nstruct NftMinterCapInfo {\\n    address nftAddress;\\n    uint256 nftMintCap;\\n}\\n\\nstruct NftMinterCap {\\n    mapping(address nftAddress => bool) nftExistInMapping;\\n    mapping(address nftAddress => uint256) nftHolderMintCap;\\n}\\n\\nstruct UserMintInfo {\\n    uint32 minted;\\n    uint32 mintCap;\\n}\\n\\nstruct DaoMintCapParam {\\n    uint32 daoMintCap;\\n    UserMintCapParam[] userMintCapParams;\\n}\\n\\nstruct UserMintCapParam {\\n    address minter;\\n    uint32 mintCap;\\n}\\n\\nstruct DaoETHAndERC20SplitRatioParam {\\n    uint256 daoCreatorERC20Ratio;\\n    uint256 canvasCreatorERC20Ratio;\\n    uint256 nftMinterERC20Ratio;\\n    uint256 daoFeePoolETHRatio;\\n    uint256 daoFeePoolETHRatioFlatPrice;\\n}\\n\\nstruct TemplateParam {\\n    PriceTemplateType priceTemplateType;\\n    uint256 priceFactor;\\n    RewardTemplateType rewardTemplateType;\\n    uint256 rewardDecayFactor;\\n    bool isProgressiveJackpot;\\n}\\n\\nstruct UpdateRewardParam {\\n    bytes32 daoId;\\n    bytes32 canvasId;\\n    address token;\\n    uint256 startRound;\\n    uint256 currentRound;\\n    uint256 totalRound;\\n    uint256 daoFeeAmount;\\n    uint256 protocolERC20RatioInBps;\\n    uint256 daoCreatorERC20RatioInBps;\\n    uint256 canvasCreatorERC20RatioInBps;\\n    uint256 nftMinterERC20RatioInBps;\\n    uint256 canvasRebateRatioInBps;\\n    address daoFeePool;\\n    bool zeroPrice;\\n}\\n\\nstruct MintNftInfo {\\n    string tokenUri;\\n    uint256 flatPrice;\\n}\\n\\nstruct Blacklist {\\n    address[] minterAccounts;\\n    address[] canvasCreatorAccounts;\\n}\\n\\nstruct Whitelist {\\n    bytes32 minterMerkleRoot;\\n    address[] minterNFTHolderPasses;\\n    bytes32 canvasCreatorMerkleRoot;\\n    address[] canvasCreatorNFTHolderPasses;\\n}\\n\\nstruct BasicDaoParam {\\n    uint256 initTokenSupplyRatio;\\n    bytes32 canvasId;\\n    string canvasUri;\\n    string daoName;\\n}\\n\\nstruct ContinuousDaoParam {\\n    uint256 reserveNftNumber;\\n    bool unifiedPriceModeOff;\\n    uint256 unifiedPrice;\\n    bool needMintableWork;\\n    uint256 dailyMintCap;\\n}\\n// \u4fee\u6539Dao\u4e2d\u53c2\u6570\u7684\u7ed3\u6784\u4f53\uff0c\u88ab\u7528\u4e8esetDaoParams\u65b9\u6cd5\\n\\nstruct SetDaoParam {\\n    bytes32 daoId;\\n    uint256 nftMaxSupplyRank;\\n    uint256 mintableRoundRank;\\n    uint256 daoFloorPriceRank;\\n    PriceTemplateType priceTemplateType;\\n    uint256 nftPriceFactor;\\n    uint256 daoCreatorERC20Ratio;\\n    uint256 canvasCreatorERC20Ratio;\\n    uint256 nftMinterERC20Ratio;\\n    uint256 daoFeePoolETHRatio;\\n    uint256 daoFeePoolETHRatioFlatPrice;\\n    uint256 dailyMintCap;\\n    uint256 addedDaoToken;\\n    uint256 unifiedPrice;\\n}\\n\\nstruct SetMintCapAndPermissionParam {\\n    bytes32 daoId;\\n    uint32 daoMintCap;\\n    UserMintCapParam[] userMintCapParams;\\n    NftMinterCapInfo[] nftMinterCapInfo;\\n    Whitelist whitelist;\\n    Blacklist blacklist;\\n    Blacklist unblacklist;\\n}\\n\\nstruct SetRatioParam {\\n    bytes32 daoId;\\n    uint256 daoCreatorERC20Ratio;\\n    uint256 canvasCreatorERC20Ratio;\\n    uint256 nftMinterERC20Ratio;\\n    uint256 daoFeePoolETHRatio;\\n    uint256 daoFeePoolETHRatioFlatPrice;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ID4ADrb.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface ID4ADrb {\\n    event CheckpointSet(uint256 startDrb, uint256 startBlock, uint256 blocksPerDrbE18);\\n\\n    function getCheckpointsLength() external view returns (uint256);\\n\\n    function getStartBlock(uint256 drb) external view returns (uint256);\\n\\n    function getDrb(uint256 blockNumber) external view returns (uint256);\\n\\n    function currentRound() external view returns (uint256);\\n\\n    function setNewCheckpoint(uint256 startDrb, uint256 startBlock, uint256 blocksPerDrbE18) external;\\n\\n    function modifyLastCheckpoint(uint256 startDrb, uint256 startBlock, uint256 blocksPerDrbE18) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ID4AFeePoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\ninterface ID4AFeePoolFactory {\\n    function createD4AFeePool(string memory _name) external returns (address pool);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ID4AERC20Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\ninterface ID4AERC20Factory {\\n    function createD4AERC20(string memory _name, string memory _symbol, address _minter) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ID4AERC721Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\ninterface ID4AERC721Factory {\\n    function createD4AERC721(\\n        string memory name,\\n        string memory symbol,\\n        uint256 startTokenId\\n    )\\n        external\\n        returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ID4AOwnerProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\ninterface ID4AOwnerProxy {\\n    function ownerOf(bytes32 hash) external view returns (address);\\n    function initOwnerOf(bytes32 hash, address addr) external returns (bool);\\n    function transferOwnership(bytes32 hash, address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IPermissionControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\nimport { Whitelist, Blacklist } from \\\"contracts/interface/D4AStructs.sol\\\";\\nimport { ID4AOwnerProxy } from \\\"contracts/interface/ID4AOwnerProxy.sol\\\";\\n\\ninterface IPermissionControl {\\n    event MinterBlacklisted(bytes32 indexed daoId, address indexed account);\\n\\n    event CanvasCreatorBlacklisted(bytes32 indexed daoId, address indexed account);\\n\\n    event MinterUnBlacklisted(bytes32 indexed daoId, address indexed account);\\n\\n    event CanvasCreatorUnBlacklisted(bytes32 indexed daoId, address indexed account);\\n\\n    event WhitelistModified(bytes32 indexed daoId, Whitelist whitelist);\\n\\n    function getWhitelist(bytes32 daoId) external view returns (Whitelist calldata whitelist);\\n\\n    function addPermissionWithSignature(\\n        bytes32 daoId,\\n        Whitelist calldata whitelist,\\n        Blacklist calldata blacklist,\\n        bytes calldata signature\\n    )\\n        external;\\n\\n    function addPermission(bytes32 daoId, Whitelist calldata whitelist, Blacklist calldata blacklist) external;\\n\\n    function modifyPermission(\\n        bytes32 daoId,\\n        Whitelist calldata whitelist,\\n        Blacklist calldata blacklist,\\n        Blacklist calldata unblacklist\\n    )\\n        external;\\n\\n    function isMinterBlacklisted(bytes32 daoId, address _account) external view returns (bool);\\n\\n    function isCanvasCreatorBlacklisted(bytes32 daoId, address _account) external view returns (bool);\\n\\n    function inMinterWhitelist(\\n        bytes32 daoId,\\n        address _account,\\n        bytes32[] calldata _proof\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    function inMinterNFTHolderPasses(Whitelist memory whitelist, address account) external view returns (bool);\\n\\n    function inCanvasCreatorWhitelist(\\n        bytes32 daoId,\\n        address _account,\\n        bytes32[] calldata _proof\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    function inCanvasCreatorNFTHolderPasses(Whitelist memory whitelist, address account) external view returns (bool);\\n\\n    function setOwnerProxy(ID4AOwnerProxy _ownerProxy) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solady/=lib/solady/src/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@solidstate/=node_modules/@solidstate/\",\r\n      \"@uniswap/=node_modules/@uniswap/\",\r\n      \"@chainlink/=node_modules/@chainlink/\",\r\n      \"@eth-optimism/=node_modules/@eth-optimism/\",\r\n      \"chainlink/=lib/chainlink/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\",\r\n      \"appendCBOR\": false\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"rewardCheckpointsIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"canvasId\",\"type\":\"bytes32\"}],\"name\":\"getCanvasCreatorClaimableRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimableRound\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getCanvasCreatorERC20Ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"canvasId\",\"type\":\"bytes32\"}],\"name\":\"getCanvasCreatorWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"creatorWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"canvasId\",\"type\":\"bytes32\"}],\"name\":\"getCanvasDaoId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"canvasId\",\"type\":\"bytes32\"}],\"name\":\"getCanvasExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"canvasId\",\"type\":\"bytes32\"}],\"name\":\"getCanvasIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"canvasId\",\"type\":\"bytes32\"}],\"name\":\"getCanvasLastPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"canvasId\",\"type\":\"bytes32\"}],\"name\":\"getCanvasNFTCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"canvasId\",\"type\":\"bytes32\"}],\"name\":\"getCanvasNextPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"canvasId\",\"type\":\"bytes32\"}],\"name\":\"getCanvasProject\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"canvasId\",\"type\":\"bytes32\"}],\"name\":\"getCanvasRebateRatioInBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"canvasId\",\"type\":\"bytes32\"}],\"name\":\"getCanvasTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"canvasId\",\"type\":\"bytes32\"}],\"name\":\"getCanvasURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"canvasId\",\"type\":\"bytes32\"}],\"name\":\"getCanvasUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"canvasUri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoAncestor\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoCanvases\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"canvases\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"rewardCheckpointIndex\",\"type\":\"uint256\"}],\"name\":\"getDaoCreatorClaimableRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimableRound\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoCreatorERC20Ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getDaoCreatorWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"creatorWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoDailyMintCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoFeePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"daoFeePool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoFeePoolETHRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoFeePoolETHRatioFlatPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoFloorPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"floorPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"daoTag\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"daoIndex\",\"type\":\"uint256\"}],\"name\":\"getDaoId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoMaxPriceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoMintCap\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoMintableRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintableRound\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoNft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoNftHolderMintCap\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoNftMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftMaxSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoNftRoyaltyFeeRatioInBps\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"royaltyFeeRatioInBps\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoNftTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoPriceFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoPriceTemplate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"priceTemplate\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoReserveNftNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"rewardCheckpointIndex\",\"type\":\"uint256\"}],\"name\":\"getDaoRewardActiveRounds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"activeRounds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoRewardDecayFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardDecayFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoRewardIsProgressiveJackpot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isProgressiveJackpot\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"rewardCheckpointIndex\",\"type\":\"uint256\"}],\"name\":\"getDaoRewardLastActiveRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastActiveRound\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"rewardCheckpointIndex\",\"type\":\"uint256\"}],\"name\":\"getDaoRewardStartRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startRound\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoRewardTemplate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rewardTemplate\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"rewardCheckpointIndex\",\"type\":\"uint256\"}],\"name\":\"getDaoRewardTotalRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalRound\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoStartRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startRound\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoTag\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoTokenMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenMaxSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"rewardCheckpointIndex\",\"type\":\"uint256\"}],\"name\":\"getDaoTotalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoUnifiedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoUnifiedPriceModeOff\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getDaoUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"daoUri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"daoTag\",\"type\":\"uint8\"}],\"name\":\"getLastestDaoIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNFTTokenCanvas\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"rewardCheckpointsIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftMinter\",\"type\":\"address\"}],\"name\":\"getNftMinterClaimableRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimableRound\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getNftMinterERC20Ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftMinter\",\"type\":\"address\"}],\"name\":\"getNftMinterWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minterWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getProjectCanvasAt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getProjectCanvasCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getProjectFloorPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getProjectInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintableRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftMaxSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"daoFeePool\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFeeRatioInBps\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"daoIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"daoUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenMaxSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"}],\"name\":\"getProjectTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getProtocolWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getRewardTillRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getRoundReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"canvasId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTokenIDAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getTotalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"daoId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserMintInfo\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"minted\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"userMintCap\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PDProtocolReadable", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}