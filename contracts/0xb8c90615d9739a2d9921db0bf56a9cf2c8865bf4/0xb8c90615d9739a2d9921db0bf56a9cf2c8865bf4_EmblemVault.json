{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/Clonable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\\npragma solidity ^0.8.4;\\n\\ninterface IClonable {\\n    function initialize() external;\\n    function version() external returns(uint256);  \\n}\\nabstract contract Clonable {\\n\\n    function initialize() public virtual;\\n\\n    function version() public pure virtual returns (uint256) {\\n        return 1;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/EmblemVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\\npragma solidity ^0.8.13;\\npragma experimental ABIEncoderV2;\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\nimport \\\"./HasRegistration.sol\\\";\\nimport \\\"./IHandlerCallback.sol\\\";\\nimport \\\"./IsBypassable.sol\\\";\\nimport \\\"./Clonable.sol\\\";\\nimport \\\"./Stream.sol\\\";\\nimport \\\"./ERC2981Royalties.sol\\\";\\nimport \\\"./EventableERC721.sol\\\";\\nimport \\\"operator-filter-registry/src/upgradeable/OperatorFiltererUpgradeable.sol\\\";\\n\\nlibrary AddressUtils {\\n\\n  \\n  function isContract(\\n    address _addr\\n  )\\n    internal\\n    view\\n    returns (bool addressCheck)\\n  {\\n    \\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    assembly { codehash := extcodehash(_addr) } // solhint-disable-line\\n    addressCheck = (codehash != 0x0 && codehash != accountHash);\\n  }\\n\\n}\\n\\ncontract NFToken is ERC165, HasRegistration, EventableERC721, OperatorFiltererUpgradeable {\\n  using SafeMath for uint256;\\n  using AddressUtils for address;\\n\\n  /**\\n   * List of revert message codes. Implementing dApp should handle showing the correct message.\\n   * Based on 0xcert framework error codes.\\n   */\\n  string constant ZERO_ADDRESS = \\\"003001\\\";\\n  string constant NOT_VALID_NFT = \\\"003002\\\";\\n  string constant NOT_OWNER_OR_OPERATOR = \\\"003003\\\";\\n  string constant NOT_OWNER_APPROVED_OR_OPERATOR = \\\"003004\\\";\\n  string constant NOT_ABLE_TO_RECEIVE_NFT = \\\"003005\\\";\\n  string constant NFT_ALREADY_EXISTS = \\\"003006\\\";\\n  string constant NOT_OWNER = \\\"003007\\\";\\n  string constant IS_OWNER = \\\"003008\\\";\\n\\n  /**\\n   * @dev Magic value of a smart contract that can recieve NFT.\\n   * Equal to: bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\")).\\n   */\\n  bytes4 internal constant MAGIC_ON_ERC721_RECEIVED = 0x150b7a02;\\n\\n  /**\\n   * @dev A mapping from NFT ID to the address that owns it.\\n   */\\n  mapping (uint256 => address) internal idToOwner;\\n\\n  /**\\n   * @dev Mapping from NFT ID to approved address.\\n   */\\n  mapping (uint256 => address) internal idToApproval;\\n\\n   /**\\n   * @dev Mapping from owner address to count of his tokens.\\n   */\\n  mapping (address => uint256) private ownerToNFTokenCount;\\n\\n  /**\\n   * @dev Mapping from owner address to mapping of operator addresses.\\n   */\\n  mapping (address => mapping (address => bool)) internal ownerToOperators;\\n\\n  /**\\n   * @dev Guarantees that the msg.sender is an owner or operator of the given NFT.\\n   * @param _tokenId ID of the NFT to validate.\\n   */\\n  modifier canOperate(\\n    uint256 _tokenId\\n  )\\n  {\\n    address tokenOwner = idToOwner[_tokenId];\\n    require(tokenOwner == _msgSender() || ownerToOperators[tokenOwner][_msgSender()], NOT_OWNER_OR_OPERATOR);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Guarantees that the msg.sender is allowed to transfer NFT.\\n   * @param _tokenId ID of the NFT to transfer.\\n   */\\n  modifier canTransfer(uint256 _tokenId) {\\n    bool _canBypass = canBypass();\\n    bool hasOldBalance;\\n    \\n    address tokenOwner = idToOwner[_tokenId];\\n    require(\\n      tokenOwner == _msgSender()\\n      || idToApproval[_tokenId] == _msgSender()\\n      || ownerToOperators[tokenOwner][_msgSender()]\\n      || _canBypass,\\n      NOT_OWNER_APPROVED_OR_OPERATOR\\n    );\\n    _;\\n  }\\n\\n\\n  modifier validNFToken(    uint256 _tokenId  )  {\\n    require(idToOwner[_tokenId] != address(0), NOT_VALID_NFT);\\n    _;\\n  }\\n\\n  function makeEvents(address[] calldata _from, address[] calldata _to, uint256[] calldata tokenIds) public onlyOwner override {\\n    EventableERC721.makeEvents(_from, _to, tokenIds);\\n  }\\n\\n  function safeTransferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _tokenId,\\n    bytes calldata _data\\n  )\\n    external\\n    override\\n  {\\n    _safeTransferFrom(_from, _to, _tokenId, _data);\\n  }\\n  function safeTransferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _tokenId\\n  )\\n    external\\n    override\\n  {\\n    _safeTransferFrom(_from, _to, _tokenId, \\\"\\\");\\n  }\\n\\n  function transferFrom(address _from, address _to, uint256 _tokenId) external override onlyAllowedOperatorApproval(_from) canTransfer(_tokenId) validNFToken(_tokenId) {\\n    address tokenOwner = idToOwner[_tokenId];\\n    require(tokenOwner == _from, NOT_OWNER);\\n    _transfer(_to, _tokenId);\\n  }\\n\\n  function approve(\\n    address _approved,\\n    uint256 _tokenId\\n  )\\n    external\\n    override\\n    onlyAllowedOperatorApproval(_approved)\\n    canOperate(_tokenId)\\n    validNFToken(_tokenId)\\n  {\\n    address tokenOwner = idToOwner[_tokenId];\\n    require(_approved != tokenOwner, IS_OWNER);\\n\\n    idToApproval[_tokenId] = _approved;\\n    emit Approval(tokenOwner, _approved, _tokenId);\\n  }\\n\\n  function setApprovalForAll(\\n    address _operator,\\n    bool _approved\\n  ) onlyAllowedOperatorApproval(_operator)\\n    external\\n    override\\n  {\\n    ownerToOperators[_msgSender()][_operator] = _approved;\\n    emit ApprovalForAll(_msgSender(), _operator, _approved);\\n  }\\n\\n  function balanceOf(\\n    address _owner\\n  )\\n    external\\n    override\\n    view\\n    returns (uint256)\\n  {\\n    require(_owner != address(0), ZERO_ADDRESS);\\n    return _getOwnerNFTCount(_owner);\\n  }\\n\\n\\n  function ownerOf(\\n    uint256 _tokenId\\n  )\\n    external\\n    override\\n    view\\n    returns (address _owner)\\n  {\\n    _owner = idToOwner[_tokenId];\\n    require(_owner != address(0), NOT_VALID_NFT);\\n  }\\n\\n  function getApproved(\\n    uint256 _tokenId\\n  )\\n    external\\n    override\\n    view\\n    validNFToken(_tokenId)\\n    returns (address)\\n  {\\n    return idToApproval[_tokenId];\\n  }\\n\\n  function isApprovedForAll(\\n    address _owner,\\n    address _operator\\n  )\\n    external\\n    override\\n    view\\n    returns (bool)\\n  {\\n    return ownerToOperators[_owner][_operator];\\n  }\\n\\n  /**\\n   * @dev Actually preforms the transfer.\\n   * @notice Does NO checks.\\n   * @param _to Address of a new owner.\\n   * @param _tokenId The NFT that is being transferred.\\n   */\\n  function _transfer(\\n    address _to,\\n    uint256 _tokenId\\n  )\\n    internal\\n  {\\n    address from = idToOwner[_tokenId];\\n    _clearApproval(_tokenId);\\n    _removeNFToken(from, _tokenId);\\n    _addNFToken(_to, _tokenId);\\n    if (registeredOfType[3].length > 0 && registeredOfType[3][0] != address(0)) {\\n      IHandlerCallback(registeredOfType[3][0]).executeCallbacks(from, _to, _tokenId, IHandlerCallback.CallbackType.TRANSFER);\\n    }\\n\\n    emit Transfer(from, _to, _tokenId);\\n  }\\n\\n  function _mint(\\n    address _to,\\n    uint256 _tokenId\\n  )\\n    internal\\n    virtual\\n  {\\n    require(_to != address(0), ZERO_ADDRESS);\\n    require(idToOwner[_tokenId] == address(0), NFT_ALREADY_EXISTS);\\n\\n    _addNFToken(_to, _tokenId);\\n    emit Transfer(address(0), _to, _tokenId);\\n  }\\n\\n  function _burn(\\n    uint256 _tokenId\\n  )\\n    internal\\n    virtual\\n    validNFToken(_tokenId)\\n  {\\n    address tokenOwner = idToOwner[_tokenId];\\n    _clearApproval(_tokenId);\\n    _removeNFToken(tokenOwner, _tokenId);\\n    emit Transfer(tokenOwner, address(0), _tokenId);\\n  }\\n\\n\\n  function _removeNFToken(\\n    address _from,\\n    uint256 _tokenId\\n  )\\n    internal\\n    virtual\\n  {\\n    require(idToOwner[_tokenId] == _from, NOT_OWNER);\\n    ownerToNFTokenCount[_from] = ownerToNFTokenCount[_from] - 1;\\n    delete idToOwner[_tokenId];\\n  }\\n\\n  function _addNFToken(address _to,uint256 _tokenId) internal virtual  {\\n    require(idToOwner[_tokenId] == address(0), NFT_ALREADY_EXISTS);\\n\\n    idToOwner[_tokenId] = _to;\\n    ownerToNFTokenCount[_to] = ownerToNFTokenCount[_to].add(1);\\n  }\\n\\n  /**\\n   *\u00a0@dev Helper function that gets NFT count of owner. This is needed for overriding in enumerable\\n   * extension to remove double storage (gas optimization) of owner nft count.\\n   * @param _owner Address for whom to query the count.\\n   * @return Number of _owner NFTs.\\n   */\\n  function _getOwnerNFTCount(\\n    address _owner\\n  )\\n    internal\\n    virtual\\n    view\\n    returns (uint256)\\n  {\\n    return ownerToNFTokenCount[_owner];\\n  }\\n\\n  function _safeTransferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _tokenId,\\n    bytes memory _data\\n  )\\n    private\\n    onlyAllowedOperatorApproval(_from)\\n    canTransfer(_tokenId)\\n    validNFToken(_tokenId)\\n  {\\n    address tokenOwner = idToOwner[_tokenId];\\n    require(tokenOwner == _from, NOT_OWNER);\\n    require(_to != address(0), ZERO_ADDRESS);\\n\\n    _transfer(_to, _tokenId);\\n\\n    if (_to.isContract())\\n    {\\n      bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(_msgSender(), _from, _tokenId, _data);\\n      require(retval == MAGIC_ON_ERC721_RECEIVED, NOT_ABLE_TO_RECEIVE_NFT);\\n    }\\n  }\\n\\n  /**\\n   * @dev Clears the current approval of a given NFT ID.\\n   * @param _tokenId ID of the NFT to be transferred.\\n   */\\n  function _clearApproval(\\n    uint256 _tokenId\\n  )\\n    private\\n  {\\n    if (idToApproval[_tokenId] != address(0))\\n    {\\n      delete idToApproval[_tokenId];\\n    }\\n  }\\n\\n}\\n\\n\\nabstract contract NFTokenEnumerableMetadata is NFToken, ERC721Metadata, ERC721Enumerable {\\n\\n  string internal nftName;\\n  string internal nftSymbol;\\n  string internal nftContractMetadataUri;\\n\\n  mapping (uint256 => string) internal idToUri;\\n  mapping (uint256 => string) internal idToPayload;\\n  bool initialized;\\n\\n  function name() external override view returns (string memory _name) {\\n    _name = nftName;\\n  }\\n\\n  /**\\n   * @dev Returns an abbreviated name for NFTokens.\\n   * @return _symbol Representing symbol.\\n   */\\n  function symbol()\\n    external\\n    override\\n    view\\n    returns (string memory _symbol)\\n  {\\n    _symbol = nftSymbol;\\n  }\\n\\n  /**\\n   * @dev A distinct URI (RFC 3986) for a given NFT.\\n   * @param _tokenId Id for which we want uri.\\n   * @return URI of _tokenId.\\n   */\\n  function tokenURI(\\n    uint256 _tokenId\\n  )\\n    external\\n    override\\n    view\\n    validNFToken(_tokenId)\\n    returns (string memory)\\n  {\\n    return idToUri[_tokenId];\\n  }\\n  \\n    /**\\n   * @dev A distinct URI (RFC 3986) for a given NFT.\\n   * @param _tokenId Id for which we want uri.\\n   * @return URI of _tokenId.\\n   */\\n  function tokenPayload(\\n    uint256 _tokenId\\n  )\\n    external\\n    view\\n    validNFToken(_tokenId)\\n    returns (string memory)\\n  {\\n    return idToPayload[_tokenId];\\n  }\\n\\n  /**\\n   * @dev Set a distinct URI (RFC 3986) for a given NFT ID.\\n   * @notice This is an internal function which should be called from user-implemented external\\n   * function. Its purpose is to show and properly initialize data structures when using this\\n   * implementation.\\n   * @param _tokenId Id for which we want URI.\\n   * @param _uri String representing RFC 3986 URI.\\n   */\\n  function _setTokenUri(\\n    uint256 _tokenId,\\n    string memory _uri\\n  )\\n    internal\\n    validNFToken(_tokenId)\\n  {\\n    idToUri[_tokenId] = _uri;\\n  }\\n  \\nfunction _setTokenPayload(\\n    uint256 _tokenId,\\n    string memory _payload\\n  )\\n    internal\\n    validNFToken(_tokenId)\\n  {\\n    idToPayload[_tokenId] = _payload;\\n  }\\n  \\n  /**\\n   * List of revert message codes. Implementing dApp should handle showing the correct message.\\n   * Based on 0xcert framework error codes.\\n   */\\n  string constant INVALID_INDEX = \\\"005007\\\";\\n\\n  /**\\n   * @dev Array of all NFT IDs.\\n   */\\n  uint256[] internal tokens;\\n\\n  /**\\n   * @dev Mapping from token ID to its index in global tokens array.\\n   */\\n  mapping(uint256 => uint256) internal idToIndex;\\n\\n  /**\\n   * @dev Mapping from owner to list of owned NFT IDs.\\n   */\\n  mapping(address => uint256[]) internal ownerToIds;\\n\\n  /**\\n   * @dev Mapping from NFT ID to its index in the owner tokens list.\\n   */\\n  mapping(uint256 => uint256) internal idToOwnerIndex;\\n  \\n  /**\\n   * @dev Returns the count of all existing NFTokens.\\n   * @return Total supply of NFTs.\\n   */\\n  function totalSupply()\\n    external\\n    override\\n    view\\n    returns (uint256)\\n  {\\n    return tokens.length;\\n  }\\n\\n  /**\\n   * @dev Returns NFT ID by its index.\\n   * @param _index A counter less than `totalSupply()`.\\n   * @return Token id.\\n   */\\n  function tokenByIndex(\\n    uint256 _index\\n  )\\n    external\\n    override\\n    view\\n    returns (uint256)\\n  {\\n    require(_index < tokens.length, INVALID_INDEX);\\n    return tokens[_index];\\n  }\\n\\n  /**\\n   * @dev returns the n-th NFT ID from a list of owner's tokens.\\n   * @param _owner Token owner's address.\\n   * @param _index Index number representing n-th token in owner's list of tokens.\\n   * @return Token id.\\n   */\\n  function tokenOfOwnerByIndex(\\n    address _owner,\\n    uint256 _index\\n  )\\n    external\\n    override\\n    view\\n    returns (uint256)\\n  {\\n    require(_index < ownerToIds[_owner].length, INVALID_INDEX);\\n    return ownerToIds[_owner][_index];\\n  }\\n\\n  /**\\n   * @dev Mints a new NFT.\\n   * @notice This is an internal function which should be called from user-implemented external\\n   * mint function. Its purpose is to show and properly initialize data structures when using this\\n   * implementation.\\n   * @param _to The address that will own the minted NFT.\\n   * @param _tokenId of the NFT to be minted by the msg.sender.\\n   */\\n  function _mint(\\n    address _to,\\n    uint256 _tokenId\\n  )\\n    internal\\n    override\\n    virtual\\n  {\\n    super._mint(_to, _tokenId);\\n    tokens.push(_tokenId);\\n    idToIndex[_tokenId] = tokens.length - 1;\\n  }\\n\\n  /**\\n   * @dev Burns a NFT.\\n   * @notice This is an internal function which should be called from user-implemented external\\n   * burn function. Its purpose is to show and properly initialize data structures when using this\\n   * implementation. Also, note that this burn implementation allows the minter to re-mint a burned\\n   * NFT.\\n   * @param _tokenId ID of the NFT to be burned.\\n   */\\n  function _burn(\\n    uint256 _tokenId\\n  )\\n    internal\\n    override\\n    virtual\\n  {\\n    super._burn(_tokenId);\\n    \\n    if (bytes(idToUri[_tokenId]).length != 0)\\n    {\\n      delete idToUri[_tokenId];\\n    }\\n    \\n    if (bytes(idToPayload[_tokenId]).length != 0)\\n    {\\n      delete idToPayload[_tokenId];\\n    }\\n    \\n    uint256 tokenIndex = idToIndex[_tokenId];\\n    uint256 lastTokenIndex = tokens.length - 1;\\n    uint256 lastToken = tokens[lastTokenIndex];\\n\\n    tokens[tokenIndex] = lastToken;\\n\\n    tokens.pop();\\n    // This wastes gas if you are burning the last token but saves a little gas if you are not.\\n    idToIndex[lastToken] = tokenIndex;\\n    idToIndex[_tokenId] = 0;\\n  }\\n\\n  /**\\n   * @dev Removes a NFT from an address.\\n   * @notice Use and override this function with caution. Wrong usage can have serious consequences.\\n   * @param _from Address from wich we want to remove the NFT.\\n   * @param _tokenId Which NFT we want to remove.\\n   */\\n  function _removeNFToken(\\n    address _from,\\n    uint256 _tokenId\\n  )\\n    internal\\n    override\\n    virtual\\n  {\\n    require(idToOwner[_tokenId] == _from, NOT_OWNER);\\n    delete idToOwner[_tokenId];\\n\\n    uint256 tokenToRemoveIndex = idToOwnerIndex[_tokenId];\\n    uint256 lastTokenIndex = ownerToIds[_from].length - 1;\\n\\n    if (lastTokenIndex != tokenToRemoveIndex)\\n    {\\n      uint256 lastToken = ownerToIds[_from][lastTokenIndex];\\n      ownerToIds[_from][tokenToRemoveIndex] = lastToken;\\n      idToOwnerIndex[lastToken] = tokenToRemoveIndex;\\n    }\\n\\n    ownerToIds[_from].pop();\\n  }\\n\\n  /**\\n   * @dev Assignes a new NFT to an address.\\n   * @notice Use and override this function with caution. Wrong usage can have serious consequences.\\n   * @param _to Address to wich we want to add the NFT.\\n   * @param _tokenId Which NFT we want to add.\\n   */\\n  function _addNFToken(\\n    address _to,\\n    uint256 _tokenId\\n  )\\n    internal\\n    override\\n    virtual\\n  {\\n    require(idToOwner[_tokenId] == address(0), NFT_ALREADY_EXISTS);\\n    idToOwner[_tokenId] = _to;\\n\\n    ownerToIds[_to].push(_tokenId);\\n    idToOwnerIndex[_tokenId] = ownerToIds[_to].length - 1;\\n  }\\n\\n  /**\\n   * @dev Helper function that gets NFT count of owner. This is needed for overriding in enumerable\\n   * extension to remove double storage(gas optimization) of owner nft count.\\n   * @param _owner Address for whom to query the count.\\n   * @return Number of _owner NFTs.\\n   */\\n  function _getOwnerNFTCount(address _owner) internal override virtual view returns (uint256) {\\n    return ownerToIds[_owner].length; // UpgradableERC721.balanceOfHook(_owner, ownerToIds);\\n  }\\n\\n}\\n\\n/**\\n * @dev This is an example contract implementation of NFToken with metadata extension.\\n */\\ncontract EmblemVault is NFTokenEnumerableMetadata, Clonable, ERC2981Royalties {\\n  address payable public streamAddress;\\n  function initialize() public override initializer {\\n    __Ownable_init();\\n    nftName = \\\"Emblem Vault V2\\\";\\n    nftSymbol = \\\"Emblem.pro\\\";\\n    _registerInterface(0x5b5e139f); // ERC721Metadata\\n    _registerInterface(0x780e9d63); // ERC721Enumerable\\n    _registerInterface(0x80ac58cd); // ERC721\\n    _registerInterface(0x2a55205a); // ERC2981\\n    initializeERC165();\\n    streamAddress = payable(address(new Stream()));\\n    Stream(streamAddress).initialize();\\n    OwnableUpgradeable(streamAddress).transferOwnership(_msgSender());\\n    isClaimable = true;\\n    // __OperatorFilterer_init(0x9dC5EE2D52d014f8b81D662FA8f4CA525F27cD6b, true);\\n  }\\n\\n  // function upgrade() public initializer {\\n  //   __OperatorFilterer_init(0x9dC5EE2D52d014f8b81D662FA8f4CA525F27cD6b, true);\\n  // }\\n\\n  function updateStreamAddress(address _streamAddress) public onlyOwner {\\n    streamAddress = payable(_streamAddress);\\n  }\\n  \\n  function changeName(string calldata _name, string calldata _symbol) public onlyOwner {\\n      nftName = _name;\\n      nftSymbol = _symbol;\\n  }\\n\\n  /**\\n   * @dev Mints a new NFT.\\n   * @param _to The address that will own the minted NFT.\\n   * @param _tokenId of the NFT to be minted by the msg.sender.\\n   * @param _uri String representing RFC 3986 URI.\\n   */\\n  function mint( address _to, uint256 _tokenId, string calldata _uri, string calldata _payload) public onlyOwner {\\n    super._mint(_to, _tokenId);\\n    super._setTokenUri(_tokenId, _uri);\\n    super._setTokenPayload(_tokenId, _payload);\\n    if (registeredOfType[3].length > 0 && registeredOfType[3][0] == _msgSender()) {\\n      IHandlerCallback(_msgSender()).executeCallbacks(address(0), _to, _tokenId, IHandlerCallback.CallbackType.MINT);  \\n    }\\n  }\\n  \\n  function burn(uint256 _tokenId) external canTransfer(_tokenId) {\\n    super._burn(_tokenId);\\n    if (registeredOfType[3].length > 0 && registeredOfType[3][0] != address(0)) {\\n      IHandlerCallback(registeredOfType[3][0]).executeCallbacks(_msgSender(), address(0), _tokenId, IHandlerCallback.CallbackType.BURN);\\n    }\\n  }\\n  \\n  function contractURI() public view returns (string memory) {\\n    return nftContractMetadataUri;\\n  }\\n  \\n  event UpdatedContractURI(string _from, string _to);\\n  function updateContractURI(string memory uri) public onlyOwner {\\n    emit UpdatedContractURI(nftContractMetadataUri, uri);\\n    nftContractMetadataUri = uri;\\n  }\\n  \\n  function getOwnerNFTCount(address _owner) public view returns (uint256) {\\n      return NFTokenEnumerableMetadata._getOwnerNFTCount(_owner);\\n  }\\n  \\n  function updateTokenUri(\\n    uint256 _tokenId,\\n    string memory _uri\\n  )\\n    public\\n    validNFToken(_tokenId)\\n    onlyOwner\\n  {\\n    idToUri[_tokenId] = _uri;\\n  }\\n  \\n  \\n\\n}\"\r\n    },\r\n    \"contracts/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\\npragma solidity ^0.8.4;\\n\\ncontract ERC165 {\\n\\n    mapping(bytes4 => bool) private supportedInterfaces;\\n\\n    function initializeERC165() internal {\\n        require(supportedInterfaces[0x01ffc9a7] == false, \\\"Already Registered\\\");\\n        _registerInterface(0x01ffc9a7);\\n    }\\n    \\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\\n        return supportedInterfaces[interfaceId];\\n    }\\n    \\n    function _registerInterface(bytes4 interfaceId) internal {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\\n// interface IERC1155Receiver {\\n//     function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns(bytes4);\\n//     function onERC1155BatchReceived(address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external returns(bytes4);\\n// }\\n\\n// interface IERC1155MetadataURI  {\\n//     function uri(uint256 id) external view returns (string memory);\\n// }\"\r\n    },\r\n    \"contracts/ERC2981Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport './IERC2981Royalties.sol';\\n\\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\\nabstract contract ERC2981Base is IERC2981Royalties {\\n    struct RoyaltyInfo {\\n        address recipient;\\n        uint24 amount;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/ERC2981Royalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport './ERC2981Base.sol';\\nimport './OwnableUpgradeable.sol';\\n\\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\\n/// @dev This implementation has the same royalties for each and every tokens\\nabstract contract ERC2981Royalties is ERC2981Base {\\n    RoyaltyInfo private _contractRoyalties;\\n    mapping(uint256 => RoyaltyInfo) private _individualRoyalties;\\n\\n    \\n    /// @dev Sets token royalties\\n    /// @param tokenId the token id fir which we register the royalties\\n    /// @param recipient recipient of the royalties\\n    /// @param value percentage (using 2 decimals - 10000 = 100, 0 = 0)\\n    function setTokenRoyalty(uint256 tokenId, address recipient, uint256 value) public override {\\n        require(msg.sender == OwnableUpgradeable(address(this)).owner(), \\\"Not Owner\\\");\\n        require(value <= 10000, 'ERC2981Royalties: Too high');\\n        if (tokenId == 0) {\\n            _contractRoyalties = RoyaltyInfo(recipient, uint24(value));\\n        } else {\\n            _individualRoyalties[tokenId] = RoyaltyInfo(recipient, uint24(value));\\n        }\\n    }\\n\\n    function royaltyInfo(uint256 tokenId, uint256 value) public view override returns (address receiver, uint256 royaltyAmount) {\\n        RoyaltyInfo memory royalties = _individualRoyalties[tokenId].recipient != address(0)? _individualRoyalties[tokenId]: _contractRoyalties;\\n        \\n        receiver = royalties.recipient;\\n        royaltyAmount = (value * royalties.amount) / 10000;\\n    }\\n}\"\r\n    },\r\n    \"contracts/EventableERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\\npragma solidity ^0.8.4;\\n\\ninterface ERC721Enumerable {\\n\\n  /**\\n   * @dev Returns a count of valid NFTs tracked by this contract, where each one of them has an\\n   * assigned and queryable owner not equal to the zero address.\\n   * @return Total supply of NFTs.\\n   */\\n  function totalSupply()\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Returns the token identifier for the `_index`th NFT. Sort order is not specified.\\n   * @param _index A counter less than `totalSupply()`.\\n   * @return Token id.\\n   */\\n  function tokenByIndex(\\n    uint256 _index\\n  )\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Returns the token identifier for the `_index`th NFT assigned to `_owner`. Sort order is\\n   * not specified. It throws if `_index` >= `balanceOf(_owner)` or if `_owner` is the zero address,\\n   * representing invalid NFTs.\\n   * @param _owner An address where we are interested in NFTs owned by them.\\n   * @param _index A counter less than `balanceOf(_owner)`.\\n   * @return Token id.\\n   */\\n  function tokenOfOwnerByIndex(\\n    address _owner,\\n    uint256 _index\\n  )\\n    external\\n    view\\n    returns (uint256);\\n\\n}\\n\\n\\n/**\\n * @dev Optional metadata extension for ERC-721 non-fungible token standard.\\n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\\n */\\ninterface ERC721Metadata {\\n\\n  /**\\n   * @dev Returns a descriptive name for a collection of NFTs in this contract.\\n   * @return _name Representing name.\\n   */\\n  function name()\\n    external\\n    view\\n    returns (string memory _name);\\n\\n  /**\\n   * @dev Returns a abbreviated name for a collection of NFTs in this contract.\\n   * @return _symbol Representing symbol.\\n   */\\n  function symbol()\\n    external\\n    view\\n    returns (string memory _symbol);\\n\\n  /**\\n   * @dev Returns a distinct Uniform Resource Identifier (URI) for a given asset. It Throws if\\n   * `_tokenId` is not a valid NFT. URIs are defined in RFC3986. The URI may point to a JSON file\\n   * that conforms to the \\\"ERC721 Metadata JSON Schema\\\".\\n   * @return URI of _tokenId.\\n   */\\n  function tokenURI(uint256 _tokenId)\\n    external\\n    view\\n    returns (string memory);\\n\\n}\\n\\n/**\\n * @dev ERC-721 interface for accepting safe transfers.\\n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\\n */\\ninterface ERC721TokenReceiver {\\n  \\n  function onERC721Received(\\n    address _operator,\\n    address _from,\\n    uint256 _tokenId,\\n    bytes calldata _data\\n  )\\n    external\\n    returns(bytes4);\\n\\n}\\n\\ninterface IEventableERC721 {\\n    function makeEvents(address[] calldata _from, address[] calldata _to, uint256[] calldata tokenIds) external;\\n}\\n\\n/**\\n * @dev ERC-721 non-fungible token standard.\\n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\\n */\\ninterface IERC721 {\\n \\n  event Transfer(\\n    address indexed _from,\\n    address indexed _to,\\n    uint256 indexed _tokenId\\n  );\\n\\n  event Approval(\\n    address indexed _owner,\\n    address indexed _approved,\\n    uint256 indexed _tokenId\\n  );\\n\\n  event ApprovalForAll(\\n    address indexed _owner,\\n    address indexed _operator,\\n    bool _approved\\n  );\\n\\n  function safeTransferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _tokenId,\\n    bytes calldata _data\\n  )\\n    external;\\n\\n  function safeTransferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _tokenId\\n  )\\n    external;\\n\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _tokenId\\n  )\\n    external;\\n\\n  function approve(\\n    address _approved,\\n    uint256 _tokenId\\n  )\\n    external;\\n\\n  function setApprovalForAll(\\n    address _operator,\\n    bool _approved\\n  )\\n    external;\\n\\n  function balanceOf(\\n    address _owner\\n  )\\n    external\\n    view\\n    returns (uint256);\\n\\n  function ownerOf(\\n    uint256 _tokenId\\n  )\\n    external\\n    view\\n    returns (address);\\n\\n  function getApproved(\\n    uint256 _tokenId\\n  )\\n    external\\n    view\\n    returns (address);\\n\\n  function isApprovedForAll(\\n    address _owner,\\n    address _operator\\n  )\\n    external\\n    view\\n    returns (bool);\\n}\\n\\nabstract contract EventableERC721 is IEventableERC721, IERC721 {\\n    function makeEvents(address[] calldata _from, address[] calldata _to, uint256[] calldata tokenIds) public virtual override {\\n        _handleEventFromLoops(_from, _to, tokenIds);\\n    }    \\n    function _handleEventFromLoops(address[] calldata _from, address[] calldata _to, uint256[] calldata amounts) internal {\\n        for (uint i=0; i < _from.length; i++) {\\n            if (amounts.length == _from.length && amounts.length == _to.length) {\\n                _handleEventEmits(_from[i], _to[i], makeSingleArray(amounts, i));\\n            } else if (amounts.length == _from.length && amounts.length != _to.length) {\\n                _handleEventToLoops(_from[i], _to, makeSingleArray(amounts, i));\\n            } else {\\n                _handleEventToLoops(_from[i], _to, amounts);\\n            }\\n        }\\n    }\\n    function _handleEventToLoops(address _from, address[] calldata _to, uint256[] memory amounts) internal {\\n        for (uint i=0; i < _to.length; i++) {\\n            if (amounts.length == _to.length) {\\n                _handleEventEmits(_from, _to[i], makeSingleArray(amounts, i));\\n            } else {\\n                _handleEventEmits(_from, _to[i], amounts);\\n            }\\n        }\\n    }\\n    function _handleEventEmits(address _from, address _to, uint256[] memory amounts) internal {\\n        for (uint i=0; i < amounts.length; i++) {\\n            emit Transfer(_from, _to, amounts[i]);\\n        }\\n    }\\n    function makeSingleArray(uint256[] memory amount, uint index) internal pure returns (uint256[] memory) {\\n        uint256[] memory arr = new uint256[](1);\\n        arr[0] = amount[index];\\n        return arr;\\n    }\\n}\"\r\n    },\r\n    \"contracts/HasRegistration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\\npragma solidity ^0.8.4;\\nimport \\\"./IsBypassable.sol\\\";\\n\\ncontract HasRegistration is IsBypassable {\\n\\n    mapping(address => uint256) public registeredContracts; // 0 EMPTY, 1 ERC1155, 2 ERC721, 3 HANDLER, 4 ERC20, 5 BALANCE, 6 CLAIM, 7 UNKNOWN, 8 FACTORY, 9 STAKING, 10 BYPASS\\n    mapping(uint256 => address[]) internal registeredOfType;\\n\\n    modifier isRegisteredContract(address _contract) {\\n        require(registeredContracts[_contract] > 0, \\\"Contract is not registered\\\");\\n        _;\\n    }\\n\\n    modifier isRegisteredContractOrOwner(address _contract) {\\n        require(registeredContracts[_contract] > 0 || owner() == _msgSender(), \\\"Contract is not registered nor Owner\\\");\\n        _;\\n    }\\n\\n    function registerContract(address _contract, uint _type) public isRegisteredContractOrOwner(_msgSender()) {\\n        registeredContracts[_contract] = _type;\\n        registeredOfType[_type].push(_contract);\\n    }\\n\\n    function unregisterContract(address _contract, uint256 index) public onlyOwner isRegisteredContract(_contract) {\\n        address[] storage arr = registeredOfType[registeredContracts[_contract]];\\n        arr[index] = arr[arr.length - 1];\\n        arr.pop();\\n        delete registeredContracts[_contract];\\n    }\\n\\n    function isRegistered(address _contract, uint256 _type) public view returns (bool) {\\n        return registeredContracts[_contract] == _type;\\n    }\\n\\n    function getAllRegisteredContractsOfType(uint256 _type) public view returns (address[] memory) {\\n        return registeredOfType[_type];\\n    }\\n}\"\r\n    },\r\n    \"contracts/IERC2981Royalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\ninterface IERC2981Royalties {\\n   function setTokenRoyalty(uint256 tokenId, address recipient, uint256 value) external;\\n   function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address receiver, uint256 royaltyAmount);\\n}\"\r\n    },\r\n    \"contracts/IHandlerCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\\npragma solidity ^0.8.4;\\n\\ninterface IHandlerCallback {\\n    enum CallbackType {\\n        MINT, TRANSFER, CLAIM, BURN, FALLBACK\\n    }\\n\\n    struct Callback {\\n        address vault;\\n        address registrant;\\n        address target;\\n        bytes4 targetFunction;\\n        bool canRevert;\\n    }\\n    function executeCallbacksInternal(address _from, address _to, uint256 tokenId, CallbackType _type) external;\\n    function executeCallbacks(address _from, address _to, uint256 tokenId, CallbackType _type) external;\\n    function executeStoredCallbacksInternal(address _nftAddress, address _from, address _to, uint256 tokenId, IHandlerCallback.CallbackType _type) external;\\n    \\n}\"\r\n    },\r\n    \"contracts/IsBypassable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IsClaimable.sol\\\";\\n// import \\\"operator-filter-registry/src/upgradeable/OperatorFiltererUpgradeable.sol\\\";\\n\\nabstract contract IsBypassable is IsClaimable {\\n\\n    bool byPassable;\\n    mapping(address => mapping(bytes4 => bool)) byPassableFunction;\\n    mapping(address => mapping(uint256 => bool)) byPassableIds;\\n\\n    modifier onlyOwner virtual override {\\n        bool _canBypass = byPassable && byPassableFunction[_msgSender()][msg.sig];\\n        require(owner() == _msgSender() || _canBypass, \\\"Not owner or able to bypass\\\");        \\n            _;\\n    }\\n\\n    modifier onlyOwnerOrBypassWithId(uint256 id) {\\n        require (owner() == _msgSender() || (id != 0 && byPassableIds[_msgSender()][id] ), \\\"Invalid id\\\");\\n            _;\\n    }\\n\\n    function canBypass() internal view returns(bool) {\\n        return (byPassable && byPassableFunction[_msgSender()][msg.sig]);\\n    }\\n\\n    function canBypassForTokenId(uint256 id) internal view returns(bool) {\\n        return (byPassable && canBypass() && byPassableIds[_msgSender()][id]);\\n    }\\n\\n    function toggleBypassability() public onlyOwner {\\n      byPassable = !byPassable;\\n    }\\n\\n    function addBypassRule(address who, bytes4 functionSig, uint256 id) public onlyOwner {\\n        byPassableFunction[who][functionSig] = true;\\n        if (id != 0) {\\n            byPassableIds[who][id] = true;\\n        }        \\n    }\\n\\n    function removeBypassRule(address who, bytes4 functionSig, uint256 id) public onlyOwner {\\n        byPassableFunction[who][functionSig] = false;\\n        if (id !=0) {\\n            byPassableIds[who][id] = true;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/IsClaimable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\\npragma solidity ^0.8.4;\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nabstract contract IsClaimable is OwnableUpgradeable {\\n\\n    bool public isClaimable;\\n\\n    function toggleClaimable() public onlyOwner {\\n        isClaimable = !isClaimable;\\n    }\\n   \\n}\"\r\n    },\r\n    \"contracts/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n\\n        return c;\\n    }\\n}\"\r\n    },\r\n    \"contracts/Stream.sol\": {\r\n      \"content\": \"/////////////////////////////////////////////////////////////////////////////////////\\n//\\n//  SPDX-License-Identifier: MIT\\n//\\n//  \u2588\u2588\u2588\u2001   \u2588\u2588\u2588\u2001 \u2588\u2588\u2588\u2588\u2588\u2588\u2001 \u2588\u2588\u2588\u2001   \u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2001   \u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2001 \u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2001 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//  \u2588\u2588\u2588\u2588\u2001 \u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2001  \u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2001\u2001\u2001\u2001\u2001\u2588\u2588\u2001 \u2588\u2588\u2001\u2001\u2588\u2588\u2001\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2001\u2001\u2001\\n//  \u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2001\u2588\u2588\u2001   \u2588\u2588\u2001\u2588\u2588\u2001\u2588\u2588\u2001 \u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2001   \u2001\u2588\u2588\u2588\u2588\u2001\u2001 \u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2001\u2588\u2588\u2588\u2588\u2588\u2001 \\n//  \u2588\u2588\u2001\u2001\u2588\u2588\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2001   \u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2001\u2001    \u2001\u2588\u2588\u2001\u2001  \u2588\u2588\u2001\u2001\u2001\u2001\u2001 \u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2001\u2001\u2001 \u2588\u2588\u2001\u2001\u2001\u2001 \\n//  \u2588\u2588\u2001 \u2001\u2001\u2001 \u2588\u2588\u2001\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2001\u2588\u2588\u2001 \u2001\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001   \u2588\u2588\u2001   \u2588\u2588\u2001     \u2588\u2588\u2001\u2588\u2588\u2001     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \\n//  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2001 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001 \u2588\u2588\u2588\u2588\u2588\u2001 \u2588\u2588\u2588\u2001   \u2588\u2588\u2588\u2001\\n//  \u2588\u2588\u2001\u2001\u2001\u2001\u2001\u2001\u2001\u2001\u2001\u2588\u2588\u2001\u2001\u2001\u2001\u2588\u2588\u2001\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2001\u2001\u2001\u2001\u2588\u2588\u2001\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2001 \u2588\u2588\u2588\u2588\u2001\\n//  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001   \u2588\u2588\u2001   \u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2001\u2588\u2588\u2588\u2588\u2588\u2001  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2001\\n//  \u2001\u2001\u2001\u2001\u2001\u2588\u2588\u2001   \u2588\u2588\u2001   \u2588\u2588\u2001\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2001\u2001  \u2588\u2588\u2001\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2588\u2588\u2001\u2001\u2588\u2588\u2001\\n//  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001   \u2588\u2588\u2001   \u2588\u2588\u2001  \u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2001  \u2588\u2588\u2001\u2588\u2588\u2001 \u2001\u2001\u2001 \u2588\u2588\u2001\\n//\\n//  https://moneypipe.xyz\\n//\\n/////////////////////////////////////////////////////////////////////////////////////\\npragma solidity ^0.8.4;\\n// import \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"./OwnableUpgradeable.sol\\\";\\ncontract Stream is OwnableUpgradeable {\\n  Member[] private _members;\\n  struct Member {\\n    address account;\\n    uint32 value;\\n    uint32 total;\\n  }\\n  function initialize() initializer public {\\n    __Ownable_init();\\n    // for(uint i=0; i<m.length; i++) {\\n    //   _members.push(m[i]);\\n    // }\\n  }\\n\\n  function addMembers(Member[] calldata m) public onlyOwner {\\n    for(uint i=0; i<m.length; i++) {\\n      _members.push(m[i]);\\n    }\\n  }\\n   function addMember(Member calldata m) public onlyOwner {\\n      _members.push(m);\\n  } \\n  function removeMember(uint256 index) public onlyOwner {\\n    _members[index] = _members[_members.length - 1];\\n    _members.pop();\\n  } \\n  receive () external payable {\\n    require(_members.length > 0, \\\"1\\\");\\n    for(uint i=0; i<_members.length; i++) {\\n      Member memory member = _members[i];\\n      _transfer(member.account, msg.value * member.value / member.total);\\n    }\\n  }\\n  function members() external view returns (Member[] memory) {\\n    return _members;\\n  }\\n  // adopted from https://github.com/lexDAO/Kali/blob/main/contracts/libraries/SafeTransferLib.sol\\n  error TransferFailed();\\n  function _transfer(address to, uint256 amount) internal {\\n    bool callStatus;\\n    assembly {\\n      callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n    }\\n    if (!callStatus) revert TransferFailed();\\n  }\\n}\\n\"\r\n    },\r\n    \"operator-filter-registry/src/IOperatorFilterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IOperatorFilterRegistry {\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n    function register(address registrant) external;\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n    function unregister(address addr) external;\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n    function subscriptionOf(address addr) external returns (address registrant);\\n    function subscribers(address registrant) external returns (address[] memory);\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n    function filteredOperators(address addr) external returns (address[] memory);\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n    function isRegistered(address addr) external returns (bool);\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"operator-filter-registry/src/upgradeable/OperatorFiltererUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {IOperatorFilterRegistry} from \\\"../IOperatorFilterRegistry.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract OperatorFiltererUpgradeable is Initializable {\\n    error OperatorNotAllowed(address operator);\\n\\n    IOperatorFilterRegistry constant operatorFilterRegistry =\\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\\n\\n    function __OperatorFilterer_init(address subscriptionOrRegistrantToCopy, bool subscribe)\\n        internal\\n        onlyInitializing\\n    {\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            if (!operatorFilterRegistry.isRegistered(address(this))) {\\n                if (subscribe) {\\n                    operatorFilterRegistry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    if (subscriptionOrRegistrantToCopy != address(0)) {\\n                        operatorFilterRegistry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                    } else {\\n                        operatorFilterRegistry.register(address(this));\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            // Allow spending tokens from addresses with balance\\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n            // from an EOA.\\n            if (from == msg.sender) {\\n                _;\\n                return;\\n            }\\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), msg.sender)) {\\n                revert OperatorNotAllowed(msg.sender);\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), operator)) {\\n                revert OperatorNotAllowed(operator);\\n            }\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_from\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_to\",\"type\":\"string\"}],\"name\":\"UpdatedContractURI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"addBypassRule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"getAllRegisteredContractsOfType\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnerNFTCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"makeEvents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_payload\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"registerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"removeBypassRule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleBypassability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleClaimable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenPayload\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"unregisterContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"updateContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_streamAddress\",\"type\":\"address\"}],\"name\":\"updateStreamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"updateTokenUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "EmblemVault", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}