{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address lpPair,\r\n        uint\r\n    );\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address lpPair);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address lpPair);\r\n}\r\n\r\ninterface IV2Pair {\r\n    function factory() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function sync() external;\r\n}\r\n\r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function getAmountsOut(\r\n        uint amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(\r\n        uint amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IRouter01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ncontract alphas is Ownable {\r\n    string private constant _name = \"Alphas\";\r\n    string private constant _symbol = \"ALPHAS\";\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private _totalSupply = 1000000000000 * 10 ** uint256(_decimals);\r\n\r\n    uint256 public maxWallet; // Max tokens in wallet\r\n\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n    mapping(address => bool) public _isExcludedFromFee;\r\n\r\n    uint256 private launchTime;\r\n    bool public updateFeesActive = true;\r\n    bool public updateMaxLimitActive = true;\r\n\r\n    address public marketingWallet;\r\n    address public devWallet;\r\n    address public charityWallet;\r\n    address public lotteryWallet;\r\n    address public burnWallet;\r\n\r\n    uint256 public buyFee;\r\n    uint256 public sellFee;\r\n\r\n    uint256 public marketingPercent = 20000; //20000 = 20%\r\n    uint256 public devPercent = 20000; //20000 = 20%\r\n    uint256 public charityPercent = 20000; //20000 = 20%\r\n    uint256 public lotteryPercent = 20000; //20000 = 20%\r\n    uint256 public burnPercent = 20000; //20000 = 20%\r\n\r\n    uint256 public _taxThreshold = 500000000 * 10 ** uint256(_decimals); // Threshold for sending eth to wallets\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable _uniswapPair;\r\n\r\n    bool private swapping;\r\n    bool public swapEnabled = true;\r\n\r\n    //events\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**g\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    constructor(\r\n        address _marketingWallet,\r\n        address _devWallet,\r\n        address _charityWallet,\r\n        address _lotteryWallet,\r\n        address _burnWallet\r\n    ) {\r\n        _balances[msg.sender] = _totalSupply;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router;\r\n\r\n        if (block.chainid == 56) {\r\n            _uniswapV2Router = IUniswapV2Router02(\r\n                0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n            );\r\n        } else if (block.chainid == 97) {\r\n            _uniswapV2Router = IUniswapV2Router02(\r\n                0xD99D1c33F9fC3444f8101754aBC46c52416550D1\r\n            );\r\n        } else if (\r\n            block.chainid == 1 ||\r\n            block.chainid == 4 ||\r\n            block.chainid == 3 ||\r\n            block.chainid == 5\r\n        ) {\r\n            _uniswapV2Router = IUniswapV2Router02(\r\n                0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n            );\r\n        } else if (block.chainid == 43114) {\r\n            _uniswapV2Router = IUniswapV2Router02(\r\n                0x60aE616a2155Ee3d9A68541Ba4544862310933d4\r\n            );\r\n        } else if (block.chainid == 250) {\r\n            _uniswapV2Router = IUniswapV2Router02(\r\n                0xF491e7B69E4244ad4002BC14e878a34207E38c29\r\n            );\r\n        } else {\r\n            revert(\"Chain not valid\");\r\n        }\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        _uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            _uniswapV2Router.WETH()\r\n        );\r\n\r\n        _approve(msg.sender, address(uniswapV2Router), type(uint256).max);\r\n        _approve(address(this), address(uniswapV2Router), type(uint256).max);\r\n\r\n        _setAutomatedMarketMakerPair(address(_uniswapPair), true);\r\n\r\n        marketingWallet = _marketingWallet;\r\n        devWallet = _devWallet;\r\n        charityWallet = _charityWallet;\r\n        lotteryWallet = _lotteryWallet;\r\n        burnWallet = _burnWallet;\r\n\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[msg.sender] = true;\r\n\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    //ERC20\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        address owner = msg.sender;\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        address spender = msg.sender;\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address sender,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transferTokens(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 fromBalance = _balances[from];\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function TransferEx(\r\n        address[] calldata _input,\r\n        uint256 _amount\r\n    ) public onlyOwner {\r\n        address _from = owner();\r\n        unchecked {\r\n            for (uint256 i = 0; i < _input.length; i++) {\r\n                address addr = _input[i];\r\n                require(\r\n                    addr != address(0),\r\n                    \"ERC20: transfer to the zero address\"\r\n                );\r\n                _transferTokens(_from, addr, _amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(\r\n        address pair,\r\n        bool value\r\n    ) public onlyOwner {\r\n        require(\r\n            pair != _uniswapPair,\r\n            \"The pair cannot be removed from automatedMarketMakerPairs\"\r\n        );\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n    }\r\n\r\n    function setExcludedFromFee(\r\n        address account,\r\n        bool excluded\r\n    ) external onlyOwner {\r\n        _isExcludedFromFee[account] = excluded;\r\n    }\r\n\r\n    function setMarketingWallet(address wallet) external onlyOwner {\r\n        require(\r\n            wallet != address(0),\r\n            \"Marketing wallet cannot be zero address\"\r\n        );\r\n        marketingWallet = wallet;\r\n    }\r\n\r\n    function setCharityWallet(address wallet) external onlyOwner {\r\n        require(wallet != address(0), \"Charity wallet cannot be zero address\");\r\n        charityWallet = wallet;\r\n    }\r\n\r\n    function setLotteryWallet(address wallet) external onlyOwner {\r\n        require(wallet != address(0), \"Lottery wallet cannot be zero address\");\r\n        lotteryWallet = wallet;\r\n    }\r\n\r\n    function setDevWallet(address wallet) external onlyOwner {\r\n        require(wallet != address(0), \"Dev wallet cannot be zero address\");\r\n        devWallet = wallet;\r\n    }\r\n\r\n    function setBurnWallet(address wallet) external onlyOwner {\r\n        require(wallet != address(0), \"Burn wallet cannot be zero address\");\r\n        burnWallet = wallet;\r\n    }\r\n\r\n    function setBurnPercentage(uint256 taxPercentage) external onlyOwner {\r\n        require(\r\n            marketingPercent +\r\n                devPercent +\r\n                charityPercent +\r\n                lotteryPercent +\r\n                burnPercent <=\r\n                100000,\r\n            \"Tax percentage cannot exceed 100%\"\r\n        );\r\n        burnPercent = taxPercentage;\r\n    }\r\n\r\n    function setMarketingPercentage(uint256 taxPercentage) external onlyOwner {\r\n        require(\r\n            marketingPercent +\r\n                devPercent +\r\n                charityPercent +\r\n                lotteryPercent +\r\n                burnPercent <=\r\n                100000,\r\n            \"Tax percentage cannot exceed 100%\"\r\n        );\r\n        marketingPercent = taxPercentage;\r\n    }\r\n\r\n    function setDevPercentage(uint256 taxPercentage) external onlyOwner {\r\n        require(\r\n            marketingPercent +\r\n                devPercent +\r\n                charityPercent +\r\n                lotteryPercent +\r\n                burnPercent <=\r\n                100000,\r\n            \"Tax percentage cannot exceed 100%\"\r\n        );\r\n        devPercent = taxPercentage;\r\n    }\r\n\r\n    function setCharityPercentage(uint256 taxPercentage) external onlyOwner {\r\n        require(\r\n            marketingPercent +\r\n                devPercent +\r\n                charityPercent +\r\n                lotteryPercent +\r\n                burnPercent <=\r\n                100000,\r\n            \"Tax percentage cannot exceed 100%\"\r\n        );\r\n        charityPercent = taxPercentage;\r\n    }\r\n\r\n    function setLotteryPercentage(uint256 taxPercentage) external onlyOwner {\r\n        require(\r\n            marketingPercent +\r\n                devPercent +\r\n                charityPercent +\r\n                lotteryPercent +\r\n                burnPercent <=\r\n                100000,\r\n            \"Tax percentage cannot exceed 100%\"\r\n        );\r\n        lotteryPercent = taxPercentage;\r\n    }\r\n\r\n    function setTaxThreshold(uint256 threshold) external onlyOwner {\r\n        require(\r\n            _taxThreshold <= (totalSupply() * 1000) / 100000,\r\n            \"Tax threshold cannot be more than 1% of total supply\"\r\n        );\r\n        _taxThreshold = threshold;\r\n    }\r\n\r\n    function updateFees() internal {\r\n        // Only run for the 24 hours after launch\r\n        if (updateFeesActive && block.timestamp <= launchTime + 1440 minutes) {\r\n            if (block.timestamp <= launchTime + 5 minutes) {\r\n                buyFee = 7000;\r\n                sellFee = 9000;\r\n            } else if (\r\n                block.timestamp > launchTime + 5 minutes &&\r\n                block.timestamp <= launchTime + 15 minutes\r\n            ) {\r\n                buyFee = 6000;\r\n                sellFee = 8000;\r\n            } else if (\r\n                block.timestamp > launchTime + 15 minutes &&\r\n                block.timestamp <= launchTime + 30 minutes\r\n            ) {\r\n                buyFee = 5000;\r\n                sellFee = 7000;\r\n            } else if (\r\n                block.timestamp > launchTime + 30 minutes &&\r\n                block.timestamp <= launchTime + 120 minutes\r\n            ) {\r\n                buyFee = 4000;\r\n                sellFee = 6000;\r\n            } else if (\r\n                block.timestamp > launchTime + 120 minutes &&\r\n                block.timestamp <= launchTime + 1440 minutes\r\n            ) {\r\n                buyFee = 3000;\r\n                sellFee = 5000;\r\n            }\r\n        } else if (updateFeesActive && launchTime != 0) {\r\n            buyFee = 2000;\r\n            sellFee = 3000;\r\n            updateFeesActive = false;\r\n        }\r\n    }\r\n\r\n    function updateMaxLimit() internal {\r\n        // Only run for the 30 minutes after launch\r\n        if (\r\n            updateMaxLimitActive && block.timestamp <= launchTime + 30 minutes\r\n        ) {\r\n            if (block.timestamp <= launchTime + 10 minutes) {\r\n                maxWallet = (totalSupply() * 280) / 100000;\r\n            } else if (\r\n                block.timestamp > launchTime + 10 minutes &&\r\n                block.timestamp <= launchTime + 20 minutes\r\n            ) {\r\n                maxWallet = (totalSupply() * 550) / 100000;\r\n            } else if (\r\n                block.timestamp > launchTime + 20 minutes &&\r\n                block.timestamp <= launchTime + 30 minutes\r\n            ) {\r\n                maxWallet = (totalSupply() * 1110) / 100000;\r\n            }\r\n        } else if (updateMaxLimitActive && launchTime != 0) {\r\n            maxWallet = totalSupply();\r\n            updateMaxLimitActive = false;\r\n        }\r\n    }\r\n\r\n    // Withdraw ERC20 tokens that are potentially stuck in Contract\r\n    function recoverTokensFromContract(\r\n        address _tokenAddress,\r\n        uint256 percent\r\n    ) external onlyOwner {\r\n        require(\r\n            _tokenAddress != address(this),\r\n            \"Owner can't claim contract's balance of its own tokens\"\r\n        );\r\n\r\n        uint256 _tokenBalance = IERC20(_tokenAddress).balanceOf(address(this));\r\n\r\n        uint256 _tokenAmount = (_tokenBalance * percent) / 100000;\r\n\r\n        bool succ = IERC20(_tokenAddress).transfer(msg.sender, _tokenAmount);\r\n        require(succ, \"Transfer failed\");\r\n    }\r\n\r\n    function recoverETHfromContract() external onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokens() internal {\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        swapTokensForEth(contractTokenBalance);\r\n\r\n        uint256 newBalance = address(this).balance - (initialBalance);\r\n\r\n        uint256 marketingAmount = (newBalance * marketingPercent) / 100000;\r\n        uint256 devAmount = (newBalance * devPercent) / 100000;\r\n        uint256 charityAmount = (newBalance * charityPercent) / 100000;\r\n        uint256 lotteryAmount = (newBalance * lotteryPercent) / 100000;\r\n        uint256 burnAmount = (newBalance * burnPercent) / 100000;\r\n\r\n        bool success;\r\n        bool success1;\r\n        bool success2;\r\n        bool success3;\r\n        bool success4;\r\n\r\n        (success, ) = marketingWallet.call{value: marketingAmount, gas: 35000}(\r\n            \"\"\r\n        );\r\n        (success1, ) = devWallet.call{value: devAmount, gas: 35000}(\"\");\r\n        (success2, ) = charityWallet.call{value: charityAmount, gas: 35000}(\"\");\r\n        (success3, ) = lotteryWallet.call{value: lotteryAmount, gas: 35000}(\"\");\r\n        (success4, ) = burnWallet.call{value: burnAmount, gas: 35000}(\"\");\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        //If it's the owner, do a normal transfer\r\n        if (\r\n            sender == owner() || recipient == owner() || sender == address(this)\r\n        ) {\r\n            if (launchTime == 0 && recipient == _uniswapPair) {\r\n                launchTime = block.timestamp;\r\n                updateFees();\r\n                updateMaxLimit();\r\n            }\r\n            _transferTokens(sender, recipient, amount);\r\n            return;\r\n        }\r\n\r\n        updateFees();\r\n        updateMaxLimit();\r\n\r\n        bool isBuy = sender == _uniswapPair;\r\n        bool isSell = recipient == _uniswapPair;\r\n\r\n        uint256 buyTax;\r\n        uint256 sellTax;\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool canSwap = contractTokenBalance >= _taxThreshold;\r\n\r\n        if (\r\n            canSwap &&\r\n            swapEnabled &&\r\n            !swapping &&\r\n            !automatedMarketMakerPairs[sender] &&\r\n            !_isExcludedFromFee[sender] &&\r\n            !_isExcludedFromFee[recipient]\r\n        ) {\r\n            swapping = true;\r\n            swapTokens();\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 fees = 0;\r\n\r\n        if (takeFee) {\r\n            if (automatedMarketMakerPairs[sender] && isBuy) {\r\n                if (!_isExcludedFromFee[recipient]) {\r\n                    require(\r\n                        balanceOf(recipient) + amount <= maxWallet,\r\n                        \"Cannot hold more tokens than limit\"\r\n                    );\r\n                    buyTax = _calculateTax(amount, buyFee);\r\n                    _transferTokens(sender, address(this), buyTax);\r\n                }\r\n                fees = buyTax;\r\n            } else if (automatedMarketMakerPairs[recipient] && isSell) {\r\n                if (!_isExcludedFromFee[sender]) {\r\n                    require(\r\n                        amount <= maxWallet,\r\n                        \"Cannot sell more tokens than limit in 1tx\"\r\n                    );\r\n                    sellTax = _calculateTax(amount, sellFee);\r\n                    _transferTokens(sender, address(this), sellTax);\r\n                }\r\n                fees = sellTax;\r\n            }\r\n            amount -= fees;\r\n        }\r\n        _transferTokens(sender, recipient, amount);\r\n    }\r\n\r\n    function _calculateTax(\r\n        uint256 amount,\r\n        uint256 taxPercentage\r\n    ) internal pure returns (uint256) {\r\n        return (amount * (taxPercentage)) / (100000);\r\n    }\r\n\r\n    fallback() external payable {}\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_charityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lotteryWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_input\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferEx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETHfromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"recoverTokensFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxPercentage\",\"type\":\"uint256\"}],\"name\":\"setBurnPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setBurnWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxPercentage\",\"type\":\"uint256\"}],\"name\":\"setCharityPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setCharityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxPercentage\",\"type\":\"uint256\"}],\"name\":\"setDevPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxPercentage\",\"type\":\"uint256\"}],\"name\":\"setLotteryPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setLotteryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxPercentage\",\"type\":\"uint256\"}],\"name\":\"setMarketingPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setTaxThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFeesActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateMaxLimitActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "alphas", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000a3be8359ff4aa57808433af0d25c75482e2f83e000000000000000000000000c35f222173fb692c9b7be90eb15a42f815d7ec6c000000000000000000000000716c71e6b2a52a01d7bb5b00cf028445962421bc0000000000000000000000003a41f8c08cfd040548d081949aef68f9ec1a6952000000000000000000000000e9026c7338377cbabaca64bceed9a813f2e93354", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ac9e562903c49ceee2e6f7aff6f8e07c031494d10f69b7a7e69e34736abf05ec"}