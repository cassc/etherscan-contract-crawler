{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOxODexFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity ^0.8.5;\\n\\ninterface IOxODexFactory {\\n    function createPool(address token) external returns (address vault);\\n    function allPoolsLength() external view returns (uint);\\n    function getPool(address token) external view returns (address);\\n    function allPools(uint256) external view returns (address);\\n\\n    function token() external view returns (address);\\n    function managerAddress() external view returns (address);\\n    function treasurerAddress() external view returns (address);\\n    function relayerAddress() external view returns (address payable);\\n    function fee() external view returns (uint256);\\n    function tokenFee() external view returns (uint256);\\n    function relayerFee() external view returns (uint256);\\n    function maxRelayerGasCharge(address) external view returns (uint256);\\n    function paused() external view returns (bool);\\n\\n    function setManager(address _manager) external;\\n    function setTreasurerAddress(address _treasurerAddress) external;\\n    function setToken(address _token) external;\\n    function setTokenFeeDiscountPercent(uint256 _value) external;\\n    function setTokenFee(uint256 _fee) external;\\n    function setFee(uint256 _fee) external;\\n    function setRelayerFee(uint256 _fee) external;\\n \\n    function getTokenFeeDiscountLimit() external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IOxODexPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity ^0.8.5;\\n\\ninterface IOxODexTokenPool {\\n    function initialize(address _token, address _factory) external;\\n    function withdraw(\\n        address payable recipient, uint256 amountToken, uint256 ringIndex,\\n        uint256 c0, uint256[2] memory keyImage, uint256[] memory s\\n    ) external;\\n    function deposit(uint _amount, uint256[4] memory publicKey) external;\\n    function getBalance() external view returns (uint256);\\n    function getCurrentRingIndex(uint256 amountToken) external view\\n        returns (uint256);\\n    function getRingMaxParticipants() external pure\\n        returns (uint256);\\n    function getParticipant(uint packedData) external view returns (uint256);\\n    function getWParticipant(uint packedData) external view returns (uint256);\\n    function getRingPackedData(uint packedData) external view returns (uint256, uint256, uint256);\\n    function getPublicKeys(uint256 amountToken, uint256 index) external view\\n        returns (bytes32[2][5] memory);\\n    function getPoolBalance() external view returns (uint256);\\n    function swapTokenForToken(\\n        address tokenOut, \\n        address router,\\n        bytes memory params, \\n        uint256[4] memory publicKey, \\n        uint256 amountToken, \\n        uint256 ringIndex,\\n        uint256 c0, \\n        uint256[2] memory keyImage, \\n        uint256[] memory s\\n    ) external;\\n    function getFeeForAmount(uint256 amount) external view returns(uint256);\\n    function getRelayerFeeForAmount(uint256 amount) external view returns(uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWETH9.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.5;\\n\\ninterface IWETH9 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address) external view returns (uint);\\n\\n    function allowance(address, address) external view returns (uint);\\n\\n    receive() external payable;\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint wad) external;\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function approve(address guy, uint wad) external returns (bool);\\n\\n    function transfer(address dst, uint wad) external returns (bool);\\n\\n    function transferFrom(address src, address dst, uint wad)\\n    external\\n    returns (bool);\\n}\"\r\n    },\r\n    \"contracts/lib/AltBn128.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity ^0.8.5;\\n\\n// https://github.com/ethereum/py_ecc/blob/master/py_ecc/bn128/bn128_curve.py\\n\\n\\nlibrary AltBn128 {    \\n    // https://github.com/ethereum/py_ecc/blob/master/py_ecc/bn128/bn128_curve.py\\n    uint256 constant public G1x = uint256(0x01);\\n    uint256 constant public G1y = uint256(0x02);\\n\\n    // Number of elements in the field (often called `q`)\\n    // n = n(u) = 36u^4 + 36u^3 + 18u^2 + 6u + 1\\n    uint256 constant public N = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001;\\n\\n    // p = p(u) = 36u^4 + 36u^3 + 24u^2 + 6u + 1\\n    // Field Order\\n    uint256 constant public P = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;\\n\\n    // (p+1) / 4\\n    uint256 constant public A = 0xc19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52;\\n    \\n\\n    /* ECC Functions */\\n    function ecAdd(uint256[2] memory p0, uint256[2] memory p1) public view\\n        returns (uint256[2] memory retP)\\n    {\\n        uint256[4] memory i = [p0[0], p0[1], p1[0], p1[1]];\\n        \\n        assembly {\\n            // call ecadd precompile\\n            // inputs are: x1, y1, x2, y2\\n            if iszero(staticcall(not(0), 0x06, i, 0x80, retP, 0x40)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n\\n    function ecMul(uint256[2] memory p, uint256 s) public view\\n        returns (uint256[2] memory retP)\\n    {\\n        // With a public key (x, y), this computes p = scalar * (x, y).\\n        uint256[3] memory i = [p[0], p[1], s];\\n        \\n        assembly {\\n            // call ecmul precompile\\n            // inputs are: x, y, scalar\\n            if iszero(staticcall(not(0), 0x07, i, 0x60, retP, 0x40)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n\\n    function ecMulG(uint256 s) public view\\n        returns (uint256[2] memory retP)\\n    {\\n        return ecMul([G1x, G1y], s);\\n    }\\n\\n    function powmod(uint256 base, uint256 e, uint256 m) public view\\n        returns (uint256 o)\\n    {\\n        // returns pow(base, e) % m\\n        assembly {\\n            // define pointer\\n            let p := mload(0x40)\\n\\n            // Store data assembly-favouring ways\\n            mstore(p, 0x20)             // Length of Base\\n            mstore(add(p, 0x20), 0x20)  // Length of Exponent\\n            mstore(add(p, 0x40), 0x20)  // Length of Modulus\\n            mstore(add(p, 0x60), base)  // Base\\n            mstore(add(p, 0x80), e)     // Exponent\\n            mstore(add(p, 0xa0), m)     // Modulus\\n\\n            // call modexp precompile! -- old school gas handling\\n            let success := staticcall(sub(gas(), 2000), 0x05, p, 0xc0, p, 0x20)\\n\\n            // gas fiddling\\n            switch success case 0 {\\n                revert(0, 0)\\n            }\\n\\n            // data\\n            o := mload(p)\\n        }\\n    }\\n\\n    // Keep everything contained within this lib\\n    function addmodn(uint256 x, uint256 n) public pure\\n        returns (uint256)\\n    {\\n        return addmod(x, n, N);\\n    }\\n\\n    function modn(uint256 x) public pure\\n        returns (uint256)\\n    {\\n        return x % N;\\n    }\\n\\n    function modp(uint256 x) public pure\\n        returns (uint256)\\n    {\\n        return x % P;\\n    }\\n\\n    /*\\n       Checks if the points x, y exists on alt_bn_128 curve\\n    */\\n    function onCurve(uint256 x, uint256 y) public pure\\n        returns(bool)\\n    {\\n        uint256 beta = mulmod(x, x, P);\\n        beta = mulmod(beta, x, P);\\n        beta = addmod(beta, 3, P);\\n\\n        return onCurveBeta(beta, y);\\n    }\\n\\n    function onCurveBeta(uint256 beta, uint256 y) public pure\\n        returns(bool)\\n    {\\n        return beta == mulmod(y, y, P);\\n    }\\n\\n    /*\\n    * Calculates point y value given x\\n    */\\n    function evalCurve(uint256 x) public view\\n        returns (uint256, uint256)\\n    {\\n        uint256 beta = mulmod(x, x, P);\\n        beta = mulmod(beta, x, P);\\n        beta = addmod(beta, 3, P);\\n\\n        uint256 y = powmod(beta, A, P);\\n\\n        // require(beta == mulmod(y, y, P), \\\"Invalid x for evalCurve\\\");\\n        return (beta, y);\\n    }\\n}\"\r\n    },\r\n    \"contracts/lib/LSAG.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity ^0.8.5;\\n\\nimport \\\"./AltBn128.sol\\\";\\n\\n/*\\nLinkable Spontaneous Anonymous Groups\\nhttps://eprint.iacr.org/2004/027.pdf\\n*/\\n\\nlibrary LSAG {\\n    // abi.encodePacked is the \\\"concat\\\" or \\\"serialization\\\"\\n    // of all supplied arguments into one long bytes value\\n    // i.e. abi.encodePacked :: [a] -> bytes\\n\\n    /**\\n    * Converts an integer to an elliptic curve point\\n    */\\n    function intToPoint(uint256 _x) public view\\n        returns (uint256[2] memory)\\n    {\\n        uint256 x = _x;\\n        uint256 y;\\n        uint256 beta;\\n\\n        while (true) {\\n            (beta, y) = AltBn128.evalCurve(x);\\n\\n            if (AltBn128.onCurveBeta(beta, y)) {\\n                return [x, y];\\n            }\\n\\n            x = AltBn128.addmodn(x, 1);\\n        }\\n    }\\n\\n    /**\\n    * Returns an integer representation of the hash\\n    * of the input\\n    */\\n    function H1(bytes memory b) public pure\\n        returns (uint256)\\n    {\\n        return AltBn128.modn(uint256(keccak256(b)));\\n    }\\n\\n    /**\\n    * Returns elliptic curve point of the integer representation\\n    * of the hash of the input\\n    */\\n    function H2(bytes memory b) public view\\n        returns (uint256[2] memory)\\n    {\\n        return intToPoint(H1(b));\\n    }\\n\\n    /**\\n    * Helper function to calculate Z1\\n    * Avoids stack too deep problem\\n    */\\n    function ringCalcZ1(\\n        uint256[2] memory pubKey,\\n        uint256 c,\\n        uint256 s\\n    ) public view\\n        returns (uint256[2] memory)\\n    {\\n        return AltBn128.ecAdd(\\n            AltBn128.ecMulG(s),\\n            AltBn128.ecMul(pubKey, c)\\n        );\\n    }\\n\\n    /**\\n    * Helper function to calculate Z2\\n    * Avoids stack too deep problem\\n    */\\n    function ringCalcZ2(\\n        uint256[2] memory keyImage,\\n        uint256[2] memory h,\\n        uint256 s,\\n        uint256 c\\n    ) public view\\n        returns (uint256[2] memory)\\n    {\\n        return AltBn128.ecAdd(\\n            AltBn128.ecMul(h, s),\\n            AltBn128.ecMul(keyImage, c)\\n        );\\n    }\\n\\n\\n    /**\\n    * Verifies the ring signature\\n    * Section 4.2 of the paper https://eprint.iacr.org/2004/027.pdf\\n    */\\n    function verify(\\n        bytes memory message,\\n        uint256 c0,\\n        uint256[2] memory keyImage,\\n        uint256[] memory s,\\n        uint256[2][] memory publicKeys\\n    ) public view\\n        returns (bool)\\n    {\\n        require(publicKeys.length >= 2, \\\"Signature size too small\\\");\\n        require(publicKeys.length == s.length, \\\"Signature sizes do not match!\\\");\\n\\n        uint256 c = c0;\\n        uint256 i = 0;\\n\\n        // Step 1\\n        // Extract out public key bytes\\n        bytes memory hBytes = \\\"\\\";\\n\\n        for (i = 0; i < publicKeys.length; i++) {\\n            hBytes = abi.encodePacked(\\n                hBytes,\\n                publicKeys[i]\\n            );\\n        }\\n\\n        uint256[2] memory h = H2(hBytes);\\n\\n        // Step 2\\n        uint256[2] memory z_1;\\n        uint256[2] memory z_2;\\n\\n\\n        for (i = 0; i < publicKeys.length; i++) {\\n            z_1 = ringCalcZ1(publicKeys[i], c, s[i]);\\n            z_2 = ringCalcZ2(keyImage, h, s[i], c);\\n\\n            if (i != publicKeys.length - 1) {\\n                c = H1(\\n                    abi.encodePacked(\\n                        hBytes,\\n                        keyImage,\\n                        message,\\n                        z_1,\\n                        z_2\\n                    )\\n                );\\n            }\\n        }\\n\\n        return c0 == H1(\\n            abi.encodePacked(\\n                hBytes,\\n                keyImage,\\n                message,\\n                z_1,\\n                z_2\\n            )\\n        );\\n    }\\n}\"\r\n    },\r\n    \"contracts/OxODexPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity ^0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"./lib/AltBn128.sol\\\";\\nimport \\\"./lib/LSAG.sol\\\";\\nimport \\\"./interfaces/IOxODexFactory.sol\\\";\\nimport \\\"./interfaces/IOxODexPool.sol\\\";\\nimport \\\"./interfaces/IWETH9.sol\\\";\\n\\nlibrary Types {\\n\\n    enum WithdrawalType {\\n        Direct,\\n        Swap\\n    }\\n}\\n\\ninterface IUniswapV2Router {\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n}\\n\\ncontract OxODexPool is Initializable {\\n\\n    // =============================================================\\n    //                           ERRORS\\n    // =============================================================\\n    \\n    error AlreadyInitialized();\\n    error NotInitialized();\\n\\n    // =============================================================\\n    //                           EVENTS\\n    // =============================================================\\n    \\n    event Deposit(address, uint256 tokenAmount, uint256 ringIndex);\\n    event Withdraw(address, uint256 tokenAmount, uint256 ringIndex);\\n    event Swap(address indexed tokenOut, uint256 tokenAmountIn, uint256 tokenAmountOut);\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    /// @notice Maximum number of participants in a ring It can be changed to a higher value, \\n    /// but it will increase the gas cost.\\n    uint256 constant MAX_RING_PARTICIPANT = 2;\\n\\n\\n    /// The participant value would use 16 bits\\n    uint256 constant _BITWIDTH_PARTICIPANTS = 16;\\n\\n    /// The Block value would use 16 bits\\n    uint256 constant _BITWIDTH_BLOCK_NUM = 32;\\n\\n    /// Bitmask for `numberOfParticipants`\\n    uint256 constant _BITMASK_PARTICIPANTS = (1 << _BITWIDTH_PARTICIPANTS) -1;\\n\\n    /// Bitmask for `blockNumber`\\n    uint256 constant _BITMASK_BLOCK_NUM = (1 << _BITWIDTH_BLOCK_NUM) -1;\\n\\n\\n    // =============================================================\\n    //                           STORAGE\\n    // =============================================================\\n\\n    struct Ring {\\n        /// The total amount deposited in the ring\\n        uint256 amountDeposited;\\n\\n        /// Bits Layout:\\n        /// - [0..32]    `initiatedBlockNumber` \\n        /// - [32..48]   `numberOfParticipants`\\n        /// - [48..64]   `numberOfWithdrawnParticipants`\\n        uint256 packedRingData; \\n\\n        /// The public keys of the participants\\n        mapping (uint256 => uint256[2]) publicKeys;\\n\\n        /// The key images from successfully withdrawn participants\\n        /// NOTE: This is used to prevent double spending\\n        mapping (uint256 => uint256[2]) keyImages;\\n        bytes32 ringHash;\\n    }\\n\\n    struct WithdrawalData {\\n        /// The amount to withdraw`\\n        uint256 amount;\\n\\n        /// The index of the ring\\n        uint256 ringIndex;\\n\\n        /// Signed message parameters\\n        uint256 c0;\\n        uint256[2] keyImage;\\n        uint256[] s;\\n        address token;\\n        Types.WithdrawalType wType;\\n    }\\n\\n    address payable public wethAddress;\\n    address public factory;\\n    address public token;\\n\\n    uint256 private _lastWithdrawal;\\n\\n    /// tokenAmount => ringIndex\\n    mapping(uint256 => uint256) public ringsNumber;\\n\\n    /// tokenAmount => ringIndex => Ring\\n    mapping (uint256 => mapping(uint256 => Ring)) public rings;\\n\\n    address private constant UNISWAP_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    function initialize(address _factory) public initializer {\\n        require(_factory != address(0), \\\"ZERO_ADDRESS\\\");\\n        factory = _factory;\\n    }\\n\\n    modifier onlyManager(){\\n        require(msg.sender == IOxODexFactory(factory).managerAddress(), \\\"NOT_MANAGER\\\");\\n        _;\\n    }\\n\\n    function changeFactory(address _factory) public onlyManager(){\\n        require(_factory != address(0), \\\"ZERO_ADDRESS\\\");\\n        factory = _factory;\\n    }\\n\\n    modifier whenNotPaused(){\\n        IOxODexFactory _factory = IOxODexFactory(factory);\\n        if(msg.sender != _factory.managerAddress()){\\n            require(!_factory.paused(), \\\"PAUSED\\\");\\n        }\\n        _;\\n    }\\n\\n\\n    /// @notice Deposit value into the pool\\n    /// @param _publicKey The public key of the participant\\n    function deposit(uint _amount, uint256[4] memory _publicKey) external payable whenNotPaused {\\n        require(_amount > 0, \\\"AMOUNT_MUST_BE_GREATER_THAN_ZERO\\\");\\n        require(msg.value >= _amount, \\\"INSUFFICIENT_ETHER_SENT\\\");\\n\\n        IOxODexFactory factoryContract = IOxODexFactory(factory);\\n\\n        if(IERC20(factoryContract.token()).balanceOf(msg.sender) < factoryContract.getTokenFeeDiscountLimit()) {\\n            uint256 fee = getFeeForAmount(_amount);\\n            require(msg.value >= _amount+fee, \\\"FUNDS_NOT_ENOUGH_FOR_FEE\\\");\\n\\n            /// Transfer the fee to the treasurer\\n            (bool sent,) = factoryContract.treasurerAddress().call{value: fee}(\\\"\\\");\\n            require(sent, \\\"FAILED_TO_SEND_ETHER_FOR_FEE\\\");\\n        }else{\\n            uint256 fee = getDiscountFeeForAmount(_amount);\\n\\n            if(fee > 0) {\\n                /// Transfer the fee to the treasurer\\n                (bool sent,) = factoryContract.treasurerAddress().call{value: fee}(\\\"\\\");\\n                require(sent, \\\"FAILED_TO_SEND_ETHER_FOR_FEE\\\");\\n            }\\n        }\\n        \\n        if (!AltBn128.onCurve(uint256(_publicKey[0]), uint256(_publicKey[1]))) {\\n            revert(\\\"PK_NOT_ON_CURVE\\\");\\n        }\\n\\n        /// Gets the current ring for the amounts\\n        uint256 ringIndex = ringsNumber[_amount];\\n        Ring storage ring = rings[_amount][ringIndex];\\n\\n        (uint wParticipants,\\n        uint participants, uint blockNum) = getRingPackedData(ring.packedRingData);\\n\\n        /// Making sure no duplicate public keys are added\\n        for (uint256 i = 0; i < participants;) {\\n            if (ring.publicKeys[i][0] == _publicKey[0] &&\\n                ring.publicKeys[i][1] == _publicKey[1]) {\\n                revert(\\\"PK_ALREADY_IN_RING\\\");\\n            }\\n\\n            if (ring.publicKeys[i][0] == _publicKey[2] &&\\n                ring.publicKeys[i][1] == _publicKey[3]) {\\n                revert(\\\"PK_ALREADY_IN_RING\\\");\\n            }\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        if (participants == 0) {\\n            blockNum = block.number - 1;\\n        }\\n\\n        ring.publicKeys[participants] = [_publicKey[0], _publicKey[1]];\\n        ring.publicKeys[participants + 1] = [_publicKey[2], _publicKey[3]];\\n        ring.amountDeposited += _amount;\\n        unchecked {\\n            participants += 2;\\n        }\\n\\n        uint packedData = (wParticipants << _BITWIDTH_PARTICIPANTS) | participants;\\n        packedData = (packedData << _BITWIDTH_BLOCK_NUM) | blockNum;\\n        ring.packedRingData = packedData;\\n\\n        /// If the ring is full, start a new ring\\n        if (participants >= MAX_RING_PARTICIPANT) {\\n            ring.ringHash = hashRing(_amount, ringIndex);\\n            \\n            /// Add new Ring pool\\n            ringsNumber[_amount] += 1;\\n        }\\n\\n        emit Deposit(msg.sender, _amount, ringIndex);\\n    }\\n\\n    modifier chargeForGas(uint256 relayerGasCharge) {\\n        address _factory = factory;\\n        require(relayerGasCharge <= IOxODexFactory(_factory).maxRelayerGasCharge(address(0)) , \\\"RELAYER_FEE_TOO_HIGH\\\");\\n        _;\\n        if(relayerGasCharge > 0) {\\n            address payable relayerAddress = IOxODexFactory(_factory).relayerAddress();\\n            (bool sent, ) = relayerAddress.call{value: relayerGasCharge}(\\\"\\\");\\n            require(sent, \\\"FAILED_TO_SEND_ETHER_FOR_RELAYER_GAS_CHARGE\\\");\\n        }\\n    }\\n\\n    /// @notice Withdraw `amount` of `token` from the vault\\n    /// @param recipient The address to send the withdrawn tokens to\\n    /// @param withdrawalData The data for the withdrawal\\n    /// @param relayerGasCharge The gas fee to pay the relayer\\n    function withdraw(\\n        address payable recipient, \\n        WithdrawalData memory withdrawalData,\\n        uint256 relayerGasCharge\\n    ) public whenNotPaused chargeForGas(relayerGasCharge)\\n    {\\n        Ring storage ring = rings[withdrawalData.amount][withdrawalData.ringIndex];\\n\\n        if(withdrawalData.amount > ring.amountDeposited) {\\n            revert(\\\"AMOUNT_EXCEEDS_DEPOSITED\\\");\\n        }\\n\\n        if(withdrawalData.amount < relayerGasCharge) {\\n            revert(\\\"RELAYER_GAS_CHARGE_TOO_HIGH\\\");\\n        }\\n\\n        (uint wParticipants,\\n        uint participants,) = getRingPackedData(ring.packedRingData);\\n\\n        if (recipient == address(0)) {\\n            revert(\\\"ZERO_ADDRESS\\\");\\n        }\\n        \\n        if (wParticipants >= MAX_RING_PARTICIPANT) {\\n            revert(\\\"ALL_FUNDS_WITHDRAWN\\\");\\n        }\\n\\n        if (ring.ringHash == bytes32(0x00)) {\\n            revert(\\\"RING_NOT_CLOSED\\\");\\n        }\\n\\n        uint256[2][] memory publicKeys = new uint256[2][](MAX_RING_PARTICIPANT);\\n\\n        for (uint256 i = 0; i < MAX_RING_PARTICIPANT;) {\\n            publicKeys[i] = ring.publicKeys[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    \\n        /// Attempts to verify ring signature\\n        bool signatureVerified = LSAG.verify(\\n            abi.encodePacked(ring.ringHash, recipient, withdrawalData.token), // Convert to bytes\\n            withdrawalData.c0,\\n            withdrawalData.keyImage,\\n            withdrawalData.s,\\n            publicKeys\\n        );\\n\\n        if (!signatureVerified) {\\n            revert(\\\"INVALID_SIGNATURE\\\");\\n        }\\n\\n        /// Confirm key image is not already used (no double spends)\\n        for (uint i = 0; i < wParticipants;) {\\n            if (ring.keyImages[i][0] == withdrawalData.keyImage[0] &&\\n                ring.keyImages[i][1] == withdrawalData.keyImage[1]) {\\n                revert(\\\"USED_SIGNATURE\\\");\\n            }\\n\\n            unchecked {\\n                i++;\\n            }\\n        }    \\n\\n        ring.keyImages[wParticipants] = withdrawalData.keyImage;\\n        unchecked {\\n            wParticipants = MAX_RING_PARTICIPANT;\\n        }\\n\\n        uint packedData = (wParticipants << _BITWIDTH_PARTICIPANTS) | participants;\\n        ring.packedRingData = (packedData << _BITWIDTH_BLOCK_NUM) | 0; // blockNum set to zero;  \\n\\n        // Transfer tokens to recipient\\n        // If recipient is the contract, don't transfer. Used in swap\\n        if(withdrawalData.wType == Types.WithdrawalType.Direct){\\n            // Transfer tokens to recipient\\n            _sendFundsWithRelayerFee(withdrawalData.amount - relayerGasCharge, recipient);\\n        }else{\\n            _lastWithdrawal = withdrawalData.amount - relayerGasCharge;\\n        }\\n\\n        emit Withdraw(recipient, withdrawalData.amount, withdrawalData.ringIndex);\\n    }\\n\\n    /// @notice Calculate the fee for a given amount\\n    /// @param amount The amount to calculate the fee for\\n    function getFeeForAmount(uint256 amount) public view returns(uint256){\\n        return (amount * IOxODexFactory(factory).fee()) / 10_000;\\n    }\\n\\n    /// @notice Calculate and send the relayer fee for a given amount\\n    /// @param _amount The amount to calculate the fee for\\n    function _sendFundsWithRelayerFee(uint256 _amount, address payable _recipient) private returns(uint256 relayerFee){\\n        relayerFee = 0;\\n\\n        if(IOxODexFactory(factory).relayerAddress() == msg.sender){\\n            relayerFee = getRelayerFeeForAmount(_amount);\\n            address payable relayerAddress = IOxODexFactory(factory).relayerAddress();\\n            (bool sent,) = relayerAddress.call{value: relayerFee}(\\\"\\\");\\n            require(sent, \\\"FAILED_TO_SEND_RELAYER_FEE\\\");\\n        }\\n\\n        (bool success, bytes memory data) = _recipient.call{value: _amount - relayerFee}(\\\"\\\");\\n        require(success, \\\"FAILED_TO_SEND_FUNDS\\\");\\n    }\\n\\n    /// @notice Calculate the relayer fee for a given amount\\n    /// @param _amount The amount to calculate the fee for\\n    function getRelayerFeeForAmount(uint256 _amount) public view returns(uint256 relayerFee){\\n        relayerFee = (_amount * IOxODexFactory(factory).relayerFee()) / 10_000;\\n    }\\n    \\n    /// @notice Get the fee for Discount holders\\n    /// @param amount The amount to calculate the fee for\\n    function getDiscountFeeForAmount(uint256 amount) public view returns(uint256){\\n        return (amount * IOxODexFactory(factory).tokenFee()) / 10_000;\\n    }\\n\\n    /// @notice Withdraw `amount` of `token` from the vault\\n    /// @param recipient The address to send the withdrawn tokens to\\n    /// @param relayerGasCharge The gas fee to send to the relayer\\n    /// @param withdrawalData The data for the withdrawal\\n    function swapOnWithdrawal(\\n        address payable recipient,\\n        uint256 relayerGasCharge, \\n        uint256 amountOut,\\n        uint256 deadline,\\n        WithdrawalData memory withdrawalData\\n    ) external {\\n        require(recipient != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(withdrawalData.token != address(0), \\\"ZERO_ADDRESS\\\");\\n        \\n        withdrawalData.wType = Types.WithdrawalType.Swap;\\n        withdraw(\\n            recipient, \\n            withdrawalData,\\n            relayerGasCharge\\n        );\\n\\n        uint amountIn = _lastWithdrawal;\\n        uint relayerFee = getRelayerFeeForAmount(amountIn);\\n\\n        address payable relayerAddress = IOxODexFactory(factory).relayerAddress();\\n        (bool sent, ) = relayerAddress.call{value: relayerFee}(\\\"\\\");\\n        require(sent, \\\"FAILED_TO_SEND_RELAYER_FEE\\\");\\n\\n        amountIn -= relayerFee;\\n\\n        IUniswapV2Router router = IUniswapV2Router(UNISWAP_V2_ROUTER);\\n        address[] memory path = new address[](2);\\n        path[0] = WETH;\\n        path[1] = withdrawalData.token;\\n\\n        router.swapExactETHForTokens{value: amountIn}(\\n            amountOut, \\n            path, \\n            recipient, \\n            deadline\\n        );\\n        _lastWithdrawal = 0;\\n        emit Swap(withdrawalData.token, withdrawalData.amount, amountIn);\\n    }\\n\\n    function withdrawETH(uint256 _amount, address payable _to) external onlyManager(){\\n        require(_to != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(_amount > 0, \\\"AMOUNT_MUST_BE_GREATER_THAN_ZERO\\\");\\n        require(address(this).balance >= _amount, \\\"NOT_ENOUGH_ETH\\\");\\n\\n        (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function withdrawToken(uint256 _amount, address _to, address _token) external onlyManager(){\\n        require(_to != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(_amount > 0, \\\"AMOUNT_MUST_BE_GREATER_THAN_ZERO\\\");\\n        require(_amount <= IERC20(_token).balanceOf(address(this)), \\\"NOT_ENOUGH_TOKEN\\\");\\n\\n        bool success = IERC20(_token).transfer(msg.sender, _amount);\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    /// @notice Generates a hash of the ring\\n    /// @param _amountToken The amount of `token` in the ring\\n    /// @param _ringIndex The index of the ring\\n    function hashRing(uint256 _amountToken, uint256 _ringIndex) internal view\\n        returns (bytes32)\\n    {\\n        uint256[2][MAX_RING_PARTICIPANT] memory publicKeys;\\n        uint256 receivedToken = _amountToken;\\n\\n        Ring storage ring = rings[receivedToken][_ringIndex];\\n\\n        for (uint8 i = 0; i < MAX_RING_PARTICIPANT;) {\\n            publicKeys[i] = ring.publicKeys[i];\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        (uint participants,, uint blockNum) = getRingPackedData(ring.packedRingData);\\n\\n        bytes memory b = abi.encodePacked(\\n            blockhash(block.number - 1),\\n            blockNum,\\n            ring.amountDeposited,\\n            participants,\\n            publicKeys\\n        );\\n\\n        return keccak256(b);\\n    }\\n\\n    /// @notice Gets the hash of the ring\\n    /// @param _amountToken The amount of `token` in the ring\\n    /// @param _ringIndex The index of the ring\\n    function getRingHash(uint256 _amountToken, uint256 _ringIndex) public view\\n        returns (bytes32)\\n    {\\n        uint256 receivedToken = _amountToken;\\n        return rings[receivedToken][_ringIndex].ringHash;\\n    }\\n\\n    /// @notice Gets the total amount of `token` in the ring\\n    function getPoolBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    // =============================================================\\n    //                           UTILITIES\\n    // =============================================================\\n\\n\\n    /// @notice Gets the public keys of the ring\\n    /// @param amountToken The amount of `token` in the ring\\n    /// @param ringIndex The index of the ring\\n    function getPublicKeys(uint256 amountToken, uint256 ringIndex) public view\\n        returns (bytes32[2][MAX_RING_PARTICIPANT] memory)\\n    {\\n        bytes32[2][MAX_RING_PARTICIPANT] memory publicKeys;\\n\\n        for (uint i = 0; i < MAX_RING_PARTICIPANT; i++) {\\n            publicKeys[i][0] = bytes32(rings[amountToken][ringIndex].publicKeys[i][0]);\\n            publicKeys[i][1] = bytes32(rings[amountToken][ringIndex].publicKeys[i][1]);\\n        }\\n\\n        return publicKeys;\\n    }\\n\\n    /// @notice Gets the unpacked, packed ring data\\n    /// @param packedData The packed ring data\\n    function getRingPackedData(uint packedData) public pure returns (uint256, uint256, uint256){\\n        uint256 p = packedData >> _BITWIDTH_BLOCK_NUM;\\n        \\n        return (\\n            p >> _BITWIDTH_PARTICIPANTS,\\n            p & _BITMASK_PARTICIPANTS,\\n            packedData & _BITMASK_BLOCK_NUM\\n        );\\n    }\\n\\n    /// @notice Gets the number of participants that have withdrawn from the ring\\n    /// @param packedData The packed ring data\\n    function getWParticipant(uint256 packedData) public pure returns (uint256){\\n        return (packedData >> _BITWIDTH_BLOCK_NUM) >> _BITWIDTH_PARTICIPANTS;\\n    }\\n\\n    /// @notice Gets the number of participants in the ring\\n    /// @param packedData The packed ring data\\n    function getParticipant(uint256 packedData) public pure returns (uint256){\\n        uint256 p = packedData >> _BITWIDTH_BLOCK_NUM;\\n        \\n        return p & _BITMASK_PARTICIPANTS;\\n    }\\n\\n    /// @notice Gets the maximum number of participants in any ring\\n    function getRingMaxParticipants() external pure\\n        returns (uint256)\\n    {\\n        return MAX_RING_PARTICIPANT;\\n    }\\n\\n    /// @notice Gets the lates ring index for `amountToken`\\n    /// @param amountToken The amount of `token` in the ring\\n    function getCurrentRingIndex(uint256 amountToken) external view\\n        returns (uint256)\\n    {\\n        return ringsNumber[amountToken];\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/lib/AltBn128.sol\": {\r\n        \"AltBn128\": \"0x55914a1625801d4ab7bf3ca804c40971dcd52219\"\r\n      },\r\n      \"contracts/lib/LSAG.sol\": {\r\n        \"LSAG\": \"0x37661153fc7a3e83884e0954d7ff7a8a48287834\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitialized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ringIndex\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ringIndex\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"changeFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"_publicKey\",\"type\":\"uint256[4]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"getCurrentRingIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDiscountFeeForAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getFeeForAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packedData\",\"type\":\"uint256\"}],\"name\":\"getParticipant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ringIndex\",\"type\":\"uint256\"}],\"name\":\"getPublicKeys\",\"outputs\":[{\"internalType\":\"bytes32[2][2]\",\"name\":\"\",\"type\":\"bytes32[2][2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getRelayerFeeForAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ringIndex\",\"type\":\"uint256\"}],\"name\":\"getRingHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRingMaxParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packedData\",\"type\":\"uint256\"}],\"name\":\"getRingPackedData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packedData\",\"type\":\"uint256\"}],\"name\":\"getWParticipant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"packedRingData\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"ringHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ringsNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"relayerGasCharge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ringIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"c0\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyImage\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[]\",\"name\":\"s\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum Types.WithdrawalType\",\"name\":\"wType\",\"type\":\"uint8\"}],\"internalType\":\"struct OxODexPool.WithdrawalData\",\"name\":\"withdrawalData\",\"type\":\"tuple\"}],\"name\":\"swapOnWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ringIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"c0\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"keyImage\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[]\",\"name\":\"s\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum Types.WithdrawalType\",\"name\":\"wType\",\"type\":\"uint8\"}],\"internalType\":\"struct OxODexPool.WithdrawalData\",\"name\":\"withdrawalData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"relayerGasCharge\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OxODexPool", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}