{"SourceCode": "pragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n* @title Tellor Getters\r\n* @dev Oracle contract with all tellor getter functions. The logic for the functions on this contract \r\n* is saved on the TellorGettersLibrary, TellorTransfer, TellorGettersLibrary, and TellorStake\r\n*/\r\ninterface ITellorGetters {\r\n    function getNewValueCountbyRequestId(uint _requestId) external view returns(uint);\r\n    function getTimestampbyRequestIDandIndex(uint _requestID, uint _index) external view returns(uint);\r\n    function retrieveData(uint _requestId, uint _timestamp) external view returns (uint);\r\n}\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract TellorProvider{\r\n\r\n    ITellorGetters public tellor;\r\n    IMedianOracle public medianOracle;\r\n\r\n    \r\n    struct TellorTimes{\r\n        uint128 time0;\r\n        uint128 time1;\r\n    }\r\n    TellorTimes public tellorReport;\r\n    uint256 constant TellorID = 41;\r\n\r\n\r\n    constructor(address _tellor, address _medianOracle) public {\r\n        tellor = ITellorGetters(_tellor);\r\n        medianOracle = IMedianOracle(_medianOracle);\r\n    }\r\n\r\n    function pushTellor() external {\r\n        (bool retrieved, uint256 value, uint256 _time) = getTellorData(); \r\n        //Saving _time in a storage value to quickly verify disputes later\r\n        if(tellorReport.time0 >= tellorReport.time1) {\r\n            tellorReport.time1 = uint128(_time);\r\n        } else {\r\n            tellorReport.time0 = uint128(_time);\r\n        }\r\n        medianOracle.pushReport(value);\r\n    }\r\n\r\n    function verifyTellorReports() external {\r\n        //most recent tellor report is in dispute, so let's purge it\r\n        if(tellor.retrieveData(TellorID, tellorReport.time0) == 0 || tellor.retrieveData(TellorID,tellorReport.time1) == 0){\r\n            medianOracle.purgeReports();\r\n        }\r\n    }\r\n\r\n    function getTellorData() internal view returns(bool, uint256, uint256){\r\n        uint256 _count = tellor.getNewValueCountbyRequestId(TellorID);\r\n        if(_count > 0) {\r\n            uint256 _time = tellor.getTimestampbyRequestIDandIndex(TellorID, _count - 1);\r\n            uint256 _value = tellor.retrieveData(TellorID, _time);\r\n            return(true, _value, _time);\r\n        }\r\n        return (false, 0, 0);\r\n    }\r\n\r\n}\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IMedianOracle{\r\n\r\n    //  // The number of seconds after which the report is deemed expired.\r\n    // uint256 public reportExpirationTimeSec;\r\n\r\n    // // The number of seconds since reporting that has to pass before a report\r\n    // // is usable.\r\n    // uint256 public reportDelaySec;\r\n    function reportDelaySec() external returns(uint256);\r\n    function reportExpirationTimeSec() external returns(uint256);\r\n    function pushReport(uint256 payload) external;\r\n    function purgeReports() external;\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"tellorReport\",\"outputs\":[{\"name\":\"time0\",\"type\":\"uint128\"},{\"name\":\"time1\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tellor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pushTellor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"medianOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"verifyTellorReports\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tellor\",\"type\":\"address\"},{\"name\":\"_medianOracle\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]", "ContractName": "TellorProvider", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000088df592f8eb5d7bd38bfef7deb0fbc02cf3778a00000000000000000000000002a18bfb505b49aed12f19f271cc1183f98ff4f71", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://f5e1b8b62f8dd36e433c9caac2e66f5c73dcdbded1305640d3e1f85230c93d13"}