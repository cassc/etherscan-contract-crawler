{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\n//DES Token Linear Vesting contract 2021.08\r\n//Author: Henry Onyebuchi\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function totalSupply() external view returns (uint);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n contract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n    }\r\n}\r\n\r\ncontract ResearchXPartnerships is Ownable {\r\n\r\n    IERC20 private _DES;\r\n    address public beneficiary;\r\n    uint private _init;\r\n    uint private _start;\r\n    uint private _release;\r\n    uint private _onTGERate;\r\n\r\n    struct Beneficiary {\r\n        bool whitelisted;\r\n        uint total1;\r\n        uint taken1;  \r\n        uint total2;\r\n        uint taken2; \r\n    }\r\n\r\n    mapping(address => Beneficiary) private _beneficiaries;\r\n\r\n    event Withdrawal(\r\n        address indexed beneficiary, \r\n        uint amount\r\n    );\r\n\r\n    constructor(\r\n        address desAddress,\r\n        address _beneficiary,\r\n        uint _total,\r\n        uint onTGERate) Ownable() {\r\n        \r\n        _DES = IERC20(desAddress);\r\n        _onTGERate = onTGERate;\r\n        beneficiary = _beneficiary;\r\n        _whitelist(_total);\r\n    }\r\n\r\n    function initialize(\r\n        uint _startInSeconds,\r\n        uint _releaseInSeconds)\r\n        external onlyOwner() {\r\n\r\n        require(\r\n            _start == 0,\r\n            \"already initialized\"\r\n        );\r\n        \r\n        _start = block.timestamp + _startInSeconds;\r\n        _release = block.timestamp +  _releaseInSeconds;\r\n        _init = block.timestamp;\r\n    }\r\n\r\n    function _whitelist( \r\n        uint _total) \r\n        internal {   \r\n            \r\n        Beneficiary storage ben = \r\n        _beneficiaries[beneficiary];           \r\n\r\n        uint total1 = (_total * _onTGERate) / 100;\r\n        uint total2 = _total - total1;\r\n        \r\n        ben.total1 = total1;\r\n        ben.total2 = total2;\r\n    }\r\n\r\n    function getReleaseTime()\r\n        external view returns(\r\n        uint initialRelease, \r\n        uint finalRelease) {\r\n            \r\n        uint start = _start;\r\n        uint release = _release;\r\n        \r\n        block.timestamp > start \r\n        ? initialRelease = 0\r\n        : initialRelease = start - block.timestamp;\r\n        \r\n        block.timestamp > release \r\n        ? finalRelease = 0\r\n        : finalRelease = release - block.timestamp;\r\n    }\r\n\r\n    function getBalance() \r\n        external view returns(uint balance) {\r\n        \r\n        Beneficiary memory ben = \r\n        _beneficiaries[beneficiary];\r\n\r\n        return (\r\n            (ben.total1 + ben.total2) \r\n            - (ben.taken1 + ben.taken2)\r\n        );\r\n    }\r\n     \r\n    function getAvailable() \r\n        external view returns(uint token_released) {\r\n        \r\n        uint release1 = _released1();\r\n        uint release2 = _released2();\r\n        \r\n        return (release1 + release2);\r\n    } \r\n\r\n    function getStruct() \r\n        external view returns(Beneficiary memory userStruct) {\r\n\r\n        return _beneficiaries[beneficiary];\r\n    }\r\n\r\n    function claim(\r\n        ) external returns(bool success) {\r\n        \r\n        require(\r\n            _start != 0,\r\n            \"not yet initialized\"\r\n        );\r\n        \r\n        uint release1 = _released1();\r\n        uint release2= _released2();\r\n        \r\n        require(\r\n            release1 > 0 || release2 > 0, \r\n            \"You do not have any balance available\"\r\n        );\r\n        \r\n        if (release1 > 0) _claim1(release1);\r\n        if (release2 > 0) _claim2(release2); \r\n        \r\n        return true; \r\n    }\r\n\r\n    function _claim1(\r\n        uint released) \r\n        internal {\r\n        \r\n        _beneficiaries[beneficiary].taken1 += released;\r\n        require(\r\n            _DES.transfer(beneficiary, released), \r\n            \"Error in sending token\"\r\n        );\r\n        \r\n        uint release = _start;\r\n\r\n        if (release <= block.timestamp) {\r\n            _beneficiaries[beneficiary].total1 = 0;\r\n            _beneficiaries[beneficiary].taken1 = 0;\r\n        }\r\n        emit Withdrawal(beneficiary, released);\r\n    }\r\n\r\n    function _claim2(\r\n        uint released)\r\n        internal {\r\n        \r\n        _beneficiaries[beneficiary].taken2 += released;\r\n        require(\r\n            _DES.transfer(beneficiary, released), \r\n            \"Error in sending token\"\r\n        );\r\n        \r\n        uint release = _release;\r\n\r\n        if (release <= block.timestamp) {\r\n            _beneficiaries[beneficiary].total2 = 0;\r\n            _beneficiaries[beneficiary].taken2 = 0;\r\n        }\r\n        emit Withdrawal(beneficiary, released);\r\n    }\r\n\r\n    function _released1(\r\n        ) internal view returns(uint) {\r\n\r\n        uint start = _init;\r\n        uint release = _start;\r\n        uint total = _beneficiaries[beneficiary].total1;\r\n        uint taken = _beneficiaries[beneficiary].taken1;\r\n        uint releasedPct;\r\n        \r\n        if (block.timestamp <=  start) return 0;\r\n        if (block.timestamp >= release) releasedPct = 100;\r\n        else releasedPct = \r\n            ((block.timestamp - start) * 100000) \r\n            / ((release - start) * 1000);\r\n        \r\n        uint released = (total * releasedPct) / 100;\r\n        return released - taken;\r\n    }\r\n\r\n    function _released2(\r\n        ) internal view returns(uint) {\r\n\r\n        uint start = _start;\r\n        uint release = _release;\r\n        uint total = _beneficiaries[beneficiary].total2;\r\n        uint taken = _beneficiaries[beneficiary].taken2;\r\n        uint releasedPct;\r\n        \r\n        if (block.timestamp <=  start) return 0;\r\n        if (block.timestamp >= release) releasedPct = 100;\r\n        else releasedPct = \r\n            ((block.timestamp - start) * 100000) \r\n            / ((release - start) * 1000);\r\n        \r\n        uint released = (total * releasedPct) / 100;\r\n        return released - taken;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"desAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onTGERate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token_released\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialRelease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalRelease\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStruct\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"total1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taken1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taken2\",\"type\":\"uint256\"}],\"internalType\":\"struct ResearchXPartnerships.Beneficiary\",\"name\":\"userStruct\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_releaseInSeconds\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ResearchXPartnerships", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000634239cfa331df0291653139d1a6083b9cf705e3000000000000000000000000759268e8b0f63b3dd3192facb23fe887ef12c7ee0000000000000000000000000000000000000000000422ca8b0a00a4250000000000000000000000000000000000000000000000000000000000000000000014", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://92898fc5e17a09d8260065f9430a20200a7208ef8b474d788c7ac30823ca3ce3"}