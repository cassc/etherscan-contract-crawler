{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ethsplitter.sol\": {\r\n      \"content\": \"pragma solidity 0.8.20;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract EthSplitter is Ownable {\\r\\n    \\r\\n    address public revShareAddress = address(0x7635bfDc1484f29A7e2b33F456a7F61200Fa305a);\\r\\n    address public teamAddress_1 = address(0x57817BEF1B1D513D097A1d5249422C352cBaE649);\\r\\n    address public teamAddress_2 = address(0x9ED55BA3B453d4d56404F3b221897F7ceD11Df71);\\r\\n    address public teamAddress_3 = address(0x86eB8AF55a017c4935A7c08034B53389d4b09DFA);\\r\\n\\r\\n    \\r\\n    struct DistributionPercentages {\\r\\n        uint24 revSharePerc;\\r\\n        uint24 team1Perc;\\r\\n        uint24 team2Perc;\\r\\n        uint24 team3Perc;\\r\\n    }\\r\\n\\r\\n    DistributionPercentages public distributionPercs;\\r\\n\\r\\n    constructor(){\\r\\n        distributionPercs.revSharePerc = 50;\\r\\n        distributionPercs.team1Perc = 20;\\r\\n        distributionPercs.team2Perc = 10;\\r\\n        distributionPercs.team3Perc = 20;\\r\\n        require(distributionPercs.revSharePerc + distributionPercs.team1Perc + distributionPercs.team2Perc + distributionPercs.team3Perc == 100, \\\"Must equal 100%\\\");\\r\\n    }\\r\\n    \\r\\n\\r\\n    receive() external payable {\\r\\n        distributeETH();\\r\\n    }\\r\\n    \\r\\n    function updateRevShareAddress(address _address) external onlyOwner {\\r\\n        require(_address != address(0), \\\"cannot set to 0 address\\\");\\r\\n        revShareAddress = _address;\\r\\n    }\\r\\n\\r\\n    function updateTeam1Address(address _address) external onlyOwner {\\r\\n        require(_address != address(0), \\\"cannot set to 0 address\\\");\\r\\n        teamAddress_1 = _address;\\r\\n    }\\r\\n\\r\\n    function updateTeam2Address(address _address) external onlyOwner {\\r\\n        require(_address != address(0), \\\"cannot set to 0 address\\\");\\r\\n        teamAddress_2 = _address;\\r\\n    }\\r\\n\\r\\n    function updateTeam3Address(address _address) external onlyOwner {\\r\\n        require(_address != address(0), \\\"cannot set to 0 address\\\");\\r\\n        teamAddress_3 = _address;\\r\\n    }\\r\\n\\r\\n    function updateDistribution(uint24 _revShare, uint24 _team1, uint24 _team2, uint24 _team3) external onlyOwner {\\r\\n        DistributionPercentages memory distributionPercsMem;\\r\\n        distributionPercsMem.revSharePerc = _revShare;\\r\\n        distributionPercsMem.team1Perc = _team1;\\r\\n        distributionPercsMem.team2Perc = _team2;\\r\\n        distributionPercsMem.team3Perc = _team3;\\r\\n        distributionPercs = distributionPercsMem;\\r\\n        require(distributionPercs.revSharePerc + distributionPercs.team1Perc + distributionPercs.team2Perc + distributionPercs.team3Perc == 100, \\\"Must equal 100%\\\");\\r\\n    }\\r\\n    \\r\\n    function distributeETH() internal {\\r\\n        DistributionPercentages memory distributionPercsMem = distributionPercs;\\r\\n        uint256 balance = address(this).balance;\\r\\n        uint256 revShareAmount = balance * distributionPercsMem.revSharePerc / 100;\\r\\n        uint256 team1Amount = balance * distributionPercsMem.team1Perc / 100;\\r\\n        uint256 team2Amount = balance * distributionPercsMem.team2Perc / 100;\\r\\n        uint256 team3Amount = balance * distributionPercsMem.team3Perc / 100;\\r\\n        \\r\\n        bool success;\\r\\n\\r\\n        if(revShareAmount > 0){\\r\\n            (success,) = payable(revShareAddress).call{value: revShareAmount}(\\\"\\\");\\r\\n        }\\r\\n\\r\\n        if(team1Amount > 0){\\r\\n            (success,) = payable(teamAddress_1).call{value: team1Amount}(\\\"\\\");\\r\\n        }\\r\\n\\r\\n        if(team2Amount > 0){\\r\\n            (success,) = payable(teamAddress_2).call{value: team2Amount}(\\\"\\\");\\r\\n        }\\r\\n\\r\\n        if(team3Amount > 0){\\r\\n            (success,) = payable(teamAddress_3).call{value: team3Amount}(\\\"\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawStuckETH() external onlyOwner {\\r\\n        bool success;\\r\\n        (success,) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n    }\\r\\n    \\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"distributionPercs\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"revSharePerc\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"team1Perc\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"team2Perc\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"team3Perc\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revShareAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress_1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress_2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress_3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_revShare\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_team1\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_team2\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_team3\",\"type\":\"uint24\"}],\"name\":\"updateDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateRevShareAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateTeam1Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateTeam2Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateTeam3Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EthSplitter", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}