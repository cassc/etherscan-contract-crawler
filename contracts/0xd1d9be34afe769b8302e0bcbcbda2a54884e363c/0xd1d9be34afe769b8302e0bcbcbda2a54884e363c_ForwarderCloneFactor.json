{"SourceCode": "// File: @uniswap/lib/contracts/libraries/TransferHelper.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeApprove: approve failed'\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeTransfer: transfer failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::transferFrom: transferFrom failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\r\n    }\r\n}\r\n\r\n// File: ManualForwarder/ERC20Interface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * Contract that exposes the needed erc20 token functions\r\n */\r\n\r\nabstract contract ERC20Interface {\r\n  // Send _value amount of tokens to address _to\r\n  function transfer(address _to, uint256 _value)\r\n    public\r\n    virtual\r\n    returns (bool success);\r\n\r\n  // Get the account balance of another account with address _owner\r\n  function balanceOf(address _owner)\r\n    public\r\n    virtual\r\n    view\r\n    returns (uint256 balance);\r\n}\r\n\r\n// File: ManualForwarder/Forwarder.sol\r\n\r\n\r\n\r\n pragma solidity ^0.8.19;\r\n\r\n\r\n\r\n contract Forwarder {\r\n    address private parentAddress;\r\n    address private owner;\r\n\r\n    event ForwarderDeposited(address from, uint256 value, bytes data);\r\n\r\n    function initialize(address _owner, address initAddress) public onlyUninitialized {\r\n        require(initAddress != address(0), \"Invalid parent address\");\r\n        require(_owner != address(0), \"Invalid owner address\");\r\n        owner = _owner;\r\n        parentAddress = initAddress;\r\n    }\r\n\r\n    modifier onlyUninitialized {\r\n        require(parentAddress == address(0x0), \"Already initialized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only Owner\");\r\n        _;\r\n    }\r\n\r\n    function getParentAddress() public view onlyOwner returns (address) {\r\n        return parentAddress;\r\n    }\r\n\r\n    function getOwner() public view onlyOwner returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    fallback() external payable {\r\n        flush();\r\n    }\r\n\r\n    receive() external payable {\r\n        flush();\r\n    }\r\n\r\n    function setParentAddress(address newAddress) public onlyOwner {\r\n        require(newAddress != address(0), \"Invalid parent address\");\r\n        parentAddress = newAddress;\r\n    }\r\n\r\n    function flush() private {\r\n        uint256 value = payable(address(this)).balance;\r\n\r\n        if (value == 0) {\r\n            return;\r\n        }\r\n\r\n        (bool success, ) = parentAddress.call{ value: value }(\"\");\r\n        require(success, \"Flush failed\");\r\n        emit ForwarderDeposited(msg.sender, value, msg.data);\r\n    }\r\n\r\n    function getERC20Balance(\r\n        address tokenContractAddress\r\n    ) public view returns (uint256) {\r\n        ERC20Interface instance = ERC20Interface(tokenContractAddress);\r\n        address forwarderAddress = address(this);\r\n        uint256 forwarderBalance = instance.balanceOf(forwarderAddress);\r\n        if (forwarderBalance == 0) {\r\n            return 0;\r\n        }\r\n        return forwarderBalance;\r\n    }\r\n\r\n    function flushTokens(address tokenContractAddress) external onlyOwner {\r\n        ERC20Interface instance = ERC20Interface(tokenContractAddress);\r\n        address forwarderAddress = address(this);\r\n        uint256 forwarderBalance = instance.balanceOf(forwarderAddress);\r\n        if (forwarderBalance == 0) {\r\n            return;\r\n        }\r\n\r\n        TransferHelper.safeTransfer(\r\n            tokenContractAddress,\r\n            parentAddress,\r\n            forwarderBalance\r\n        );\r\n    }\r\n}\r\n// File: @openzeppelin/contracts/proxy/Clones.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\r\n * deploying minimal proxy contracts, also known as \"clones\".\r\n *\r\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\r\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\r\n *\r\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\r\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\r\n * deterministic method.\r\n *\r\n * _Available since v3.4._\r\n */\r\nlibrary Clones {\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create opcode, which should never revert.\r\n     */\r\n    function clone(address implementation) internal returns (address instance) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\r\n            // of the `implementation` address with the bytecode before the address.\r\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\r\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\r\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\r\n            instance := create(0, 0x09, 0x37)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\r\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\r\n     * the clones cannot be deployed twice at the same address.\r\n     */\r\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\r\n            // of the `implementation` address with the bytecode before the address.\r\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\r\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\r\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\r\n            instance := create2(0, 0x09, 0x37, salt)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create2 failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(\r\n        address implementation,\r\n        bytes32 salt,\r\n        address deployer\r\n    ) internal pure returns (address predicted) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(add(ptr, 0x38), deployer)\r\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\r\n            mstore(add(ptr, 0x14), implementation)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\r\n            mstore(add(ptr, 0x58), salt)\r\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\r\n            predicted := keccak256(add(ptr, 0x43), 0x55)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(address implementation, bytes32 salt)\r\n        internal\r\n        view\r\n        returns (address predicted)\r\n    {\r\n        return predictDeterministicAddress(implementation, salt, address(this));\r\n    }\r\n}\r\n\r\n// File: ManualForwarder/ForwarderCloneFactory.sol\r\n\r\n\r\n\r\n pragma solidity ^0.8.19;\r\n\r\n\r\n\r\n contract ForwarderCloneFactory {\r\n    address immutable public forwarderImplementation;\r\n    event ForwardersDeployed(address[] addresses);\r\n\r\n    constructor() {\r\n        forwarderImplementation = address(new Forwarder());\r\n    }\r\n\r\n    function createForwarders(address parent, uint8 numForwarders) external {\r\n        address[] memory forwarders = new address[](numForwarders);\r\n        for (uint8 i = 0; i < numForwarders; i++) {\r\n            address clone = Clones.clone(forwarderImplementation);\r\n            Forwarder(payable(clone)).initialize(msg.sender, parent);\r\n            forwarders[i] = clone;\r\n        }\r\n        emit ForwardersDeployed(forwarders);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"ForwardersDeployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"numForwarders\",\"type\":\"uint8\"}],\"name\":\"createForwarders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ForwarderCloneFactory", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a4c6ce68727c95d3f4e5b601f91f0b1b4bf56162eb218cb6ed2a8ed28ba74782"}