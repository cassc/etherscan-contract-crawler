{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/ERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (token/ERC20/extensions/ERC4626.sol)\\n\\n// ####################################################\\n// ################## IMPORTANT #######################\\n// ####################################################\\n// NOTE fija Finance: ETH native compatibility -- Forked OZ contract and updated deposit method to become payable.\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IERC4626.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\\n *\\n * This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for\\n * underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\\n * the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this\\n * contract and not the \\\"assets\\\" token which is an independent contract.\\n *\\n * CAUTION: When the vault is empty or nearly empty, deposits are at high risk of being stolen through frontrunning with\\n * a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\\n * similarly be affected by slippage. Users can protect against this attack as well unexpected slippage in general by\\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\\n *\\n * _Available since v4.7._\\n */\\nabstract contract ERC4626 is ERC20, IERC4626 {\\n    using Math for uint256;\\n\\n    IERC20 private immutable _asset;\\n    uint8 private immutable _decimals;\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\\n     */\\n    constructor(IERC20 asset_) {\\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\\n        _decimals = success ? assetDecimals : super.decimals();\\n        _asset = asset_;\\n    }\\n\\n    /**\\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\\n     */\\n    function _tryGetAssetDecimals(\\n        IERC20 asset_\\n    ) private view returns (bool, uint8) {\\n        (bool success, bytes memory encodedDecimals) = address(asset_)\\n            .staticcall(\\n                abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n            );\\n        if (success && encodedDecimals.length >= 32) {\\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\\n            if (returnedDecimals <= type(uint8).max) {\\n                return (true, uint8(returnedDecimals));\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Decimals are read from the underlying asset in the constructor and cached. If this fails (e.g., the asset\\n     * has not been created yet), the cached value is set to a default obtained by `super.decimals()` (which depends on\\n     * inheritance but is most likely 18). Override this function in order to set a guaranteed hardcoded value.\\n     * See {IERC20Metadata-decimals}.\\n     */\\n    function decimals()\\n        public\\n        view\\n        virtual\\n        override(IERC20Metadata, ERC20)\\n        returns (uint8)\\n    {\\n        return _decimals;\\n    }\\n\\n    /** @dev See {IERC4626-asset}. */\\n    function asset() public view virtual override returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /** @dev See {IERC4626-totalAssets}. */\\n    function totalAssets() public view virtual override returns (uint256) {\\n        return _asset.balanceOf(address(this));\\n    }\\n\\n    /** @dev See {IERC4626-convertToShares}. */\\n    function convertToShares(\\n        uint256 assets\\n    ) public view virtual override returns (uint256 shares) {\\n        return _convertToShares(assets, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-convertToAssets}. */\\n    function convertToAssets(\\n        uint256 shares\\n    ) public view virtual override returns (uint256 assets) {\\n        return _convertToAssets(shares, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxDeposit}. */\\n    function maxDeposit(\\n        address\\n    ) public view virtual override returns (uint256) {\\n        return _isVaultCollateralized() ? type(uint256).max : 0;\\n    }\\n\\n    /** @dev See {IERC4626-maxMint}. */\\n    function maxMint(address) public view virtual override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxWithdraw}. */\\n    function maxWithdraw(\\n        address owner\\n    ) public view virtual override returns (uint256) {\\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxRedeem}. */\\n    function maxRedeem(\\n        address owner\\n    ) public view virtual override returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /** @dev See {IERC4626-previewDeposit}. */\\n    function previewDeposit(\\n        uint256 assets\\n    ) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-previewMint}. */\\n    function previewMint(\\n        uint256 shares\\n    ) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4626-previewWithdraw}. */\\n    function previewWithdraw(\\n        uint256 assets\\n    ) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4626-previewRedeem}. */\\n    function previewRedeem(\\n        uint256 shares\\n    ) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-deposit}. */\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) public payable virtual override returns (uint256) {\\n        require(\\n            assets <= maxDeposit(receiver),\\n            \\\"ERC4626: deposit more than max\\\"\\n        );\\n\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-mint}.\\n     *\\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\\n     * In this case, the shares will be minted without requiring any assets to be deposited.\\n     */\\n    function mint(\\n        uint256 shares,\\n        address receiver\\n    ) public virtual override returns (uint256) {\\n        require(shares <= maxMint(receiver), \\\"ERC4626: mint more than max\\\");\\n\\n        uint256 assets = previewMint(shares);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /** @dev See {IERC4626-withdraw}. */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual override returns (uint256) {\\n        require(\\n            assets <= maxWithdraw(owner),\\n            \\\"ERC4626: withdraw more than max\\\"\\n        );\\n\\n        uint256 shares = previewWithdraw(assets);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-redeem}. */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual override returns (uint256) {\\n        require(shares <= maxRedeem(owner), \\\"ERC4626: redeem more than max\\\");\\n        uint256 assets = previewRedeem(shares);\\n\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     *\\n     * Will revert if assets > 0, totalSupply > 0 and totalAssets = 0. That corresponds to a case where any asset\\n     * would represent an infinite amount of shares.\\n     */\\n    function _convertToShares(\\n        uint256 assets,\\n        Math.Rounding rounding\\n    ) internal view virtual returns (uint256 shares) {\\n        uint256 supply = totalSupply();\\n        return\\n            (assets == 0 || supply == 0)\\n                ? _initialConvertToShares(assets, rounding)\\n                : assets.mulDiv(supply, totalAssets(), rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) to apply when the vault is empty.\\n     *\\n     * NOTE: Make sure to keep this function consistent with {_initialConvertToAssets} when overriding it.\\n     */\\n    function _initialConvertToShares(\\n        uint256 assets,\\n        Math.Rounding /*rounding*/\\n    ) internal view virtual returns (uint256 shares) {\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(\\n        uint256 shares,\\n        Math.Rounding rounding\\n    ) internal view virtual returns (uint256 assets) {\\n        uint256 supply = totalSupply();\\n        return\\n            (supply == 0)\\n                ? _initialConvertToAssets(shares, rounding)\\n                : shares.mulDiv(totalAssets(), supply, rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) to apply when the vault is empty.\\n     *\\n     * NOTE: Make sure to keep this function consistent with {_initialConvertToShares} when overriding it.\\n     */\\n    function _initialConvertToAssets(\\n        uint256 shares,\\n        Math.Rounding /*rounding*/\\n    ) internal view virtual returns (uint256 assets) {\\n        return shares;\\n    }\\n\\n    /**\\n     * @dev Deposit/mint common workflow.\\n     */\\n    function _deposit(\\n        address caller,\\n        address receiver,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        // If _asset is ERC777, `transferFrom` can trigger a reenterancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transferred and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw/redeem common workflow.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n        // shares are burned and after the assets are transferred, which is a valid state.\\n        _burn(owner, shares);\\n\\n        SafeERC20.safeTransfer(_asset, receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Checks if vault is \\\"healthy\\\" in the sense of having assets backing the circulating shares.\\n     */\\n    function _isVaultCollateralized() private view returns (bool) {\\n        return totalAssets() > 0 || totalSupply() == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n// FijaVault errors\\nerror VaultNoAssetMatching();\\nerror VaultNotWhitelisted();\\nerror VaultNoUpdateCandidate();\\nerror VaultUpdateStrategyTimeError();\\nerror VaultStrategyUndefined();\\n\\n// FijaACL errors\\nerror ACLOwnerZero();\\nerror ACLGovZero();\\nerror ACLResellZero();\\nerror ACLNotOwner();\\nerror ACLNotGov();\\nerror ACLNotGovOwner();\\nerror ACLNotReseller();\\nerror ACLNotWhitelist();\\nerror ACLTransferUserNotWhitelist();\\nerror ACLDepositReceiverNotWhitelist();\\nerror ACLRedeemWithdrawReceiverOwnerNotWhitelist();\\nerror ACLWhitelistAddressZero();\\n\\n// Strategy errors\\nerror FijaUnauthorizedFlash();\\nerror FijaInvalidAssetFlash();\\n\\n// Transfer errors\\nerror TransferDisbalance();\\nerror TransferFailed();\\n\\n// emergency mode restriction\\nerror FijaInEmergencyMode();\\n\\nerror FijaInsufficientAmountToWithdraw();\\nerror FijaZeroInput();\\n\"\r\n    },\r\n    \"contracts/base/FijaACL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/IFijaACL.sol\\\";\\nimport \\\"./errors.sol\\\";\\n\\n///\\n/// @title Access control contract\\n/// @author Fija\\n/// @notice Provides access rights management to child contracts\\n/// @dev some of the methods have default access modifiers and\\n/// some do not have restrictions. Please verify and override to have expected behaviour\\n/// *********** IMPORTANT **************\\n/// whitelist functions in the contract are not protected\\n/// it is responsibility of child contracts to define access rights\\n///\\nabstract contract FijaACL is IFijaACL {\\n    address private _owner;\\n    address private _governance;\\n    address private _reseller;\\n    mapping(address => bool) private _whitelist;\\n\\n    constructor(address governance_, address reseller_) {\\n        _transferOwnership(msg.sender);\\n        _transferGovernance(governance_);\\n        _transferReseller(reseller_);\\n    }\\n\\n    ///\\n    /// @dev Throws if called by any account that's not whitelisted.\\n    ///\\n    modifier onlyWhitelisted() {\\n        _checkWhitelist();\\n        _;\\n    }\\n\\n    ///\\n    /// @dev Throws if called by any account other than the owner.\\n    ///\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    ///\\n    /// @dev Throws if called by any account other than the Governance.\\n    ///\\n    modifier onlyGovernance() {\\n        _checkGovernance();\\n        _;\\n    }\\n\\n    ///\\n    /// @dev Throws if called by any account other than the Reseller.\\n    ///\\n    modifier onlyReseller() {\\n        _checkReseller();\\n        _;\\n    }\\n\\n    ///\\n    /// @dev Throws if called by any account other than the Governance or Owner.\\n    ///\\n    modifier onlyOwnerOrGovernance() {\\n        _checkOwnerOrGovernance();\\n        _;\\n    }\\n\\n    ///\\n    /// @dev Throws if receiver and owner are not in the whitelist\\n    ///\\n    modifier onlyReceiverOwnerWhitelisted(address receiver, address owner_) {\\n        _checkReceiverOwnerWhitelisted(receiver, owner_);\\n        _;\\n    }\\n\\n    ///\\n    /// @dev Throws if receiver is not in the whitelist\\n    ///\\n    modifier onlyReceiverWhitelisted(address receiver) {\\n        _checkReceiverWhitelisted(receiver);\\n        _;\\n    }\\n\\n    ///\\n    /// NOTE: emits IFijaACL.WhitelistedAddressAdded\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function addAddressToWhitelist(\\n        address addr\\n    ) public virtual override returns (bool) {\\n        if (isWhitelisted(addr)) {\\n            return false;\\n        }\\n        _addAddressToWhitelist(addr);\\n\\n        return true;\\n    }\\n\\n    ///\\n    /// NOTE: emits IFijaACL.WhitelistedAddressRemoved\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function removeAddressFromWhitelist(\\n        address addr\\n    ) public virtual override returns (bool) {\\n        if (!isWhitelisted(addr)) {\\n            return false;\\n        }\\n        _removeAddressFromWhitelist(addr);\\n\\n        return true;\\n    }\\n\\n    ///\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function owner() public view virtual override returns (address) {\\n        return _owner;\\n    }\\n\\n    ///\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function governance() public view virtual override returns (address) {\\n        return _governance;\\n    }\\n\\n    ///\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function reseller() public view virtual override returns (address) {\\n        return _reseller;\\n    }\\n\\n    ///\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function isWhitelisted(\\n        address addr\\n    ) public view virtual override returns (bool) {\\n        return _whitelist[addr];\\n    }\\n\\n    ///\\n    /// NOTE: only owner access, emits IFijaACL.OwnershipTransferred\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function transferOwnership(\\n        address newOwner\\n    ) external virtual override onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    ///\\n    /// NOTE: only owner or governance access, emits IFijaACL.GovernanceTransferred\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function transferGovernance(\\n        address newGovernance\\n    ) external virtual override onlyOwnerOrGovernance {\\n        if (newGovernance == address(0)) {\\n            revert ACLGovZero();\\n        }\\n        _transferGovernance(newGovernance);\\n    }\\n\\n    ///\\n    /// NOTE: only governance access, emits IFijaACL.ResellerTransferred\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function transferReseller(\\n        address newReseller\\n    ) external virtual override onlyGovernance {\\n        if (newReseller == address(0)) {\\n            revert ACLResellZero();\\n        }\\n        _transferReseller(newReseller);\\n    }\\n\\n    ///\\n    /// NOTE: only governance access, emits IFijaACL.GovernanceTransferred\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function renounceGovernance() external virtual override onlyGovernance {\\n        _transferGovernance(address(0));\\n    }\\n\\n    ///\\n    /// NOTE: only reseller access, emits IFijaACL.ResellerTransferred\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function renounceReseller() external virtual override onlyReseller {\\n        _transferReseller(address(0));\\n    }\\n\\n    ///\\n    /// NOTE: owner cannot be zero address\\n    /// @dev Helper method for transferOwnership.\\n    /// Changes ownership access to new owner address.\\n    /// @param newOwner address of new owner\\n    ///\\n    function _transferOwnership(address newOwner) internal virtual {\\n        if (newOwner == address(0)) {\\n            revert ACLOwnerZero();\\n        }\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    ///\\n    /// @dev Helper method for transferGovernance.\\n    /// Changes governance access to new governance address.\\n    /// @param newGovernance address of new governance\\n    ///\\n    function _transferGovernance(address newGovernance) internal virtual {\\n        address oldGovernance = _governance;\\n        _governance = newGovernance;\\n        emit GovernanceTransferred(oldGovernance, newGovernance);\\n    }\\n\\n    ///\\n    /// @dev Helper method for transferReseller.\\n    /// Changes reseller access to new reseller address.\\n    /// @param newReseller address of new reseller\\n    ///\\n    function _transferReseller(address newReseller) internal virtual {\\n        address oldReseller = _reseller;\\n        _reseller = newReseller;\\n        emit ResellerTransferred(oldReseller, newReseller);\\n    }\\n\\n    ///\\n    /// @dev Helper method for onlyOwner modifier\\n    ///\\n    function _checkOwner() internal view virtual {\\n        if (owner() != msg.sender) {\\n            revert ACLNotOwner();\\n        }\\n    }\\n\\n    ///\\n    /// @dev Helper method for onlyGovernance modifier\\n    ///\\n    function _checkGovernance() internal view virtual {\\n        if (governance() != msg.sender) {\\n            revert ACLNotGov();\\n        }\\n    }\\n\\n    ///\\n    /// @dev Helper method for onlyOwnerOrGovernance modifier\\n    ///\\n    function _checkOwnerOrGovernance() internal view virtual {\\n        if (governance() != msg.sender && owner() != msg.sender) {\\n            revert ACLNotGovOwner();\\n        }\\n    }\\n\\n    ///\\n    /// @dev Helper method for onlyReseller modifier\\n    ///\\n    function _checkReseller() internal view virtual {\\n        if (reseller() != msg.sender) {\\n            revert ACLNotReseller();\\n        }\\n    }\\n\\n    ///\\n    /// @dev Helper method for onlyWhitelisted modifier\\n    ///\\n    function _checkWhitelist() internal view virtual {\\n        if (!isWhitelisted(msg.sender)) {\\n            revert ACLNotWhitelist();\\n        }\\n    }\\n\\n    ///\\n    /// @dev Helper method for onlyReceiverOwnerWhitelisted modifier\\n    ///\\n    function _checkReceiverOwnerWhitelisted(\\n        address receiver,\\n        address owner_\\n    ) internal view virtual {\\n        if (!isWhitelisted(receiver) || !isWhitelisted(owner_)) {\\n            revert ACLRedeemWithdrawReceiverOwnerNotWhitelist();\\n        }\\n    }\\n\\n    ///\\n    /// @dev Helper method for onlyReceiverWhitelisted modifier\\n    ///\\n    function _checkReceiverWhitelisted(address receiver) internal view virtual {\\n        if (!isWhitelisted(receiver)) {\\n            revert ACLDepositReceiverNotWhitelist();\\n        }\\n    }\\n\\n    ///\\n    /// @dev Helper method for adding address to contract whitelist.\\n    /// @param addr address to be added to the whitelist\\n    ///\\n    function _addAddressToWhitelist(address addr) internal {\\n        if (addr == address(0)) {\\n            revert ACLWhitelistAddressZero();\\n        }\\n        _whitelist[addr] = true;\\n        emit WhitelistedAddressAdded(addr);\\n    }\\n\\n    ///\\n    /// @dev Helper method for removing address from contract whitelist.\\n    /// @param addr address to be removed from the whitelist\\n    ///\\n    function _removeAddressFromWhitelist(address addr) internal {\\n        _whitelist[addr] = false;\\n        emit WhitelistedAddressRemoved(addr);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/FijaERC4626Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./ERC4626.sol\\\";\\nimport \\\"./FijaACL.sol\\\";\\nimport \\\"../interfaces/IFijaERC4626Base.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n///\\n/// @title Fija ERC4626 Base contract\\n/// @author Fija\\n/// @notice Used as template for implementing ERC4626\\n/// @dev This is mainly used for adding access rights to specific methods.\\n/// NOTE: All mint related methods are disabled from ERC4626\\n///\\nabstract contract FijaERC4626Base is IFijaERC4626Base, FijaACL, ERC4626 {\\n    using Math for uint256;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    ///\\n    /// @dev maximum amount to deposit/redeem/withdraw in assets in single call\\n    /// NOTE: if user wants to deposits/withdrawls/redeem with amounts above this limit\\n    /// transaction will be rejected\\n    ///\\n    uint256 internal immutable MAX_TICKET_SIZE;\\n\\n    ///\\n    /// @dev maximum value of vault in assets\\n    /// NOTE: all deposits above this value will be rejected\\n    ///\\n    uint256 internal immutable MAX_VAULT_VALUE;\\n\\n    constructor(\\n        IERC20 asset_,\\n        address governance_,\\n        address reseller_,\\n        string memory tokenName_,\\n        string memory tokenSymbol_,\\n        uint256 maxTicketSize_,\\n        uint256 maxVaultValue_\\n    )\\n        ERC4626(asset_)\\n        ERC20(tokenName_, tokenSymbol_)\\n        FijaACL(governance_, reseller_)\\n    {\\n        MAX_TICKET_SIZE = maxTicketSize_;\\n        MAX_VAULT_VALUE = maxVaultValue_;\\n    }\\n\\n    ///\\n    /// @dev Throws if zero input amount (on deposit, withdraw, redeem)\\n    ///\\n    modifier nonZeroAmount(uint256 amount) {\\n        if (amount == 0) {\\n            revert FijaZeroInput();\\n        }\\n        _;\\n    }\\n\\n    ///\\n    /// @inheritdoc IERC4626\\n    ///\\n    function totalAssets()\\n        public\\n        view\\n        virtual\\n        override(IERC4626, ERC4626)\\n        returns (uint256)\\n    {\\n        if (asset() == ETH) {\\n            return address(this).balance;\\n        } else {\\n            return IERC20(asset()).balanceOf(address(this));\\n        }\\n    }\\n\\n    ///\\n    /// @inheritdoc IFijaERC4626Base\\n    ///\\n    function convertToTokens(\\n        uint256 assets\\n    ) public view virtual returns (uint256) {\\n        return convertToShares(assets);\\n    }\\n\\n    ///\\n    /// NOTE: caller and \\\"to\\\" must be whitelisted\\n    /// @inheritdoc IERC20\\n    ///\\n    function transfer(\\n        address to,\\n        uint256 amount\\n    ) public virtual override(ERC20, IERC20) onlyWhitelisted returns (bool) {\\n        if (!isWhitelisted(to)) {\\n            revert ACLTransferUserNotWhitelist();\\n        }\\n        super.transfer(to, amount);\\n\\n        return true;\\n    }\\n\\n    ///\\n    /// NOTE: caller and \\\"to\\\" must be whitelisted\\n    /// @inheritdoc IERC20\\n    ///\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override(ERC20, IERC20) onlyWhitelisted returns (bool) {\\n        if (!isWhitelisted(from) || !isWhitelisted(to)) {\\n            revert ACLTransferUserNotWhitelist();\\n        }\\n        super.transferFrom(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    ///\\n    /// NOTE: only whitelisted access\\n    /// @inheritdoc IERC20\\n    ///\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public virtual override(ERC20, IERC20) onlyWhitelisted returns (bool) {\\n        return super.approve(spender, amount);\\n    }\\n\\n    ///\\n    /// NOTE: only whitelisted access\\n    /// @inheritdoc ERC20\\n    ///\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) public virtual override onlyWhitelisted returns (bool) {\\n        return super.increaseAllowance(spender, addedValue);\\n    }\\n\\n    ///\\n    /// NOTE: only whitelisted access\\n    /// @inheritdoc ERC20\\n    ///\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) public virtual override onlyWhitelisted returns (bool) {\\n        return super.decreaseAllowance(spender, subtractedValue);\\n    }\\n\\n    ///\\n    /// NOTE: DISABLED\\n    /// @return 0\\n    /// @inheritdoc IERC4626\\n    ///\\n    function mint(\\n        uint256,\\n        address\\n    ) public virtual override(ERC4626, IERC4626) returns (uint256) {\\n        return 0;\\n    }\\n\\n    ///\\n    /// NOTE: DISABLED\\n    /// @return 0\\n    /// @inheritdoc IERC4626\\n    ///\\n    function previewMint(\\n        uint256\\n    ) public view virtual override(ERC4626, IERC4626) returns (uint256) {\\n        return 0;\\n    }\\n\\n    ///\\n    /// NOTE: DISABLED\\n    /// @return 0\\n    /// @inheritdoc IERC4626\\n    ///\\n    function maxMint(\\n        address\\n    ) public view virtual override(ERC4626, IERC4626) returns (uint256) {\\n        return 0;\\n    }\\n\\n    ///\\n    /// @dev calculates maximum amount user is allowed to deposit in assets,\\n    /// this depends of current value of vault and user deposit amount.\\n    /// It is controlled by MAX_TICKET_SIZE and MAX_VAULT_VALUE\\n    /// @return maximum amount user can deposit to the vault in assets\\n    ///\\n    function maxDeposit(\\n        address receiver\\n    ) public view virtual override(ERC4626, IERC4626) returns (uint256) {\\n        return _maxDeposit(receiver, totalAssets());\\n    }\\n\\n    ///\\n    /// @dev calculates maximum amount user is allowed to withdraw in assets,\\n    /// this on user withdrawal amount request.\\n    /// It is controlled by MAX_TICKET_SIZE\\n    /// @return maximum amount user can withdraw from the vault in assets\\n    ///\\n    function maxWithdraw(\\n        address owner\\n    ) public view virtual override(ERC4626, IERC4626) returns (uint256) {\\n        uint256 assets = _convertToAssets(balanceOf(owner), Math.Rounding.Down);\\n\\n        return assets > MAX_TICKET_SIZE ? MAX_TICKET_SIZE : assets;\\n    }\\n\\n    ///\\n    /// @dev calculates maximum amount user is allowed to redeem in tokens from the vault\\n    /// It is controlled by MAX_TICKET_SIZE\\n    /// @return maximum amount user can redeem from the vault in tokens\\n    ///\\n    function maxRedeem(\\n        address owner\\n    ) public view virtual override(ERC4626, IERC4626) returns (uint256) {\\n        uint256 tokens = balanceOf(owner);\\n        uint256 assets = _convertToAssets(tokens, Math.Rounding.Down);\\n\\n        return\\n            assets > MAX_TICKET_SIZE\\n                ? convertToTokens(MAX_TICKET_SIZE)\\n                : tokens;\\n    }\\n\\n    ///\\n    /// @dev calculates amount of tokens receiver will get based on asset deposit.\\n    /// @param assets amount of assets caller wants to deposit\\n    /// @param receiver address of the owner of deposit once deposit completes, this address will receive tokens.\\n    /// @return amount of tokens receiver will receive\\n    /// NOTE: this is protected generic template method for deposits and child contracts\\n    /// should provide necessary overriding.\\n    /// Ensure to call super.deposit from child contract to enforce access rights.\\n    /// Caller and receiver must be whitelisted\\n    /// Emits IERC4626.Deposit\\n    ///\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    )\\n        public\\n        payable\\n        virtual\\n        override(ERC4626, IERC4626)\\n        onlyWhitelisted\\n        nonZeroAmount(assets)\\n        onlyReceiverWhitelisted(receiver)\\n        returns (uint256)\\n    {\\n        if (asset() == ETH) {\\n            if (assets != msg.value) {\\n                revert TransferDisbalance();\\n            }\\n            uint256 totalAssetBeforeDeposit = totalAssets() - msg.value;\\n            require(\\n                assets <= _maxDeposit(receiver, totalAssetBeforeDeposit),\\n                \\\"ERC4626: deposit more than max\\\"\\n            );\\n\\n            uint256 supply = totalSupply();\\n            uint256 tokens = (assets == 0 || supply == 0)\\n                ? _initialConvertToShares(assets, Math.Rounding.Down)\\n                : assets.mulDiv(\\n                    supply,\\n                    totalAssetBeforeDeposit,\\n                    Math.Rounding.Down\\n                );\\n\\n            _mint(receiver, tokens);\\n\\n            emit Deposit(msg.sender, receiver, assets, tokens);\\n\\n            return tokens;\\n        } else {\\n            return super.deposit(assets, receiver);\\n        }\\n    }\\n\\n    ///\\n    /// @dev Burns exact number of tokens from owner and sends assets to receiver.\\n    /// @param tokens amount of tokens caller wants to redeem\\n    /// @param receiver address of the asset receiver\\n    /// @param owner address of the owner of tokens\\n    /// @return amount of assets receiver will receive based on exact burnt tokens\\n    /// NOTE: this is protected generic template method for redeeming and child contracts\\n    /// should provide necessary overriding.\\n    /// Ensure to call super.redeem from child contract to enforce access rights.\\n    /// Caller, receiver and owner must be whitelisted\\n    /// Emits IERC4626.Withdraw\\n    ///\\n    function redeem(\\n        uint256 tokens,\\n        address receiver,\\n        address owner\\n    )\\n        public\\n        virtual\\n        override(ERC4626, IERC4626)\\n        onlyWhitelisted\\n        nonZeroAmount(tokens)\\n        onlyReceiverOwnerWhitelisted(receiver, owner)\\n        returns (uint256)\\n    {\\n        if (asset() == ETH) {\\n            require(\\n                tokens <= maxRedeem(owner),\\n                \\\"ERC4626: redeem more than max\\\"\\n            );\\n            uint256 assets = previewRedeem(tokens);\\n\\n            _burn(owner, tokens);\\n\\n            (bool success, ) = payable(receiver).call{value: assets}(\\\"\\\");\\n            if (!success) {\\n                revert TransferFailed();\\n            }\\n            emit Withdraw(msg.sender, receiver, owner, assets, tokens);\\n\\n            return assets;\\n        } else {\\n            return super.redeem(tokens, receiver, owner);\\n        }\\n    }\\n\\n    ///\\n    /// @dev Burns tokens from owner and sends exact number of assets to receiver\\n    /// @param assets amount of assets caller wants to withdraw\\n    /// @param receiver address of the asset receiver\\n    /// @param owner address of the owner of tokens\\n    /// @return amount of tokens burnt based on exact assets requested\\n    /// NOTE: this is protected generic template method for withdrawing and child contracts\\n    /// should provide necessary overriding.\\n    /// Ensure to call super.withdraw from child contract to enforce access rights.\\n    /// Caller, receiver and owner must be whitelisted\\n    /// Emits IERC4626.Withdraw\\n    ///\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    )\\n        public\\n        virtual\\n        override(ERC4626, IERC4626)\\n        onlyWhitelisted\\n        nonZeroAmount(assets)\\n        onlyReceiverOwnerWhitelisted(receiver, owner)\\n        returns (uint256)\\n    {\\n        if (asset() == ETH) {\\n            require(\\n                assets <= maxWithdraw(owner),\\n                \\\"ERC4626: withdraw more than max\\\"\\n            );\\n\\n            uint256 tokens = previewWithdraw(assets);\\n\\n            _burn(owner, tokens);\\n            (bool success, ) = payable(receiver).call{value: assets}(\\\"\\\");\\n            if (!success) {\\n                revert TransferFailed();\\n            }\\n            emit Withdraw(msg.sender, receiver, owner, assets, tokens);\\n\\n            return tokens;\\n        } else {\\n            return super.withdraw(assets, receiver, owner);\\n        }\\n    }\\n\\n    ///\\n    /// @dev helper method - calculates maximum amount user is allowed to deposit in assets,\\n    /// this depends of current value of vault and user deposit amount.\\n    /// It is controlled by MAX_TICKET_SIZE and MAX_VAULT_VALUE\\n    /// @param totalAsset total assets in deposit currency\\n    /// @return maximum amount user can deposit to the vault in assets\\n    ///\\n    function _maxDeposit(\\n        address,\\n        uint256 totalAsset\\n    ) internal view returns (uint256) {\\n        if (MAX_VAULT_VALUE >= totalAsset) {\\n            uint256 maxValueDiff = MAX_VAULT_VALUE - totalAsset;\\n            if (maxValueDiff <= MAX_TICKET_SIZE) {\\n                return maxValueDiff;\\n            } else {\\n                return MAX_TICKET_SIZE;\\n            }\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/FijaVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"./FijaERC4626Base.sol\\\";\\nimport \\\"../interfaces/IFijaStrategy.sol\\\";\\nimport \\\"../interfaces/IFijaVault.sol\\\";\\nimport \\\"./errors.sol\\\";\\n\\n///\\n/// @title FijaVault\\n/// @author Fija\\n/// @notice Enables users to deposit assets and receive vault tokens in return.\\n/// User can withdraw back assets by burning their vault tokens,\\n/// potentially increased for vault interest.\\n/// @dev In order for Vault to function properly, following needs to be completed:\\n/// - \\\"Deployer\\\" deployed Strategy which vault will use and it's address is known\\n/// - \\\"Deployer\\\" invoked Strategy.addAddressToWhitelist and added this Vault to Strategy's whitelist\\n///\\ncontract FijaVault is IFijaVault, FijaERC4626Base {\\n    IFijaStrategy private _strategy;\\n    StrategyCandidate private _strategyCandidate;\\n\\n    uint256 private _approvalDelay;\\n\\n    constructor(\\n        IFijaStrategy strategy_,\\n        IERC20 asset_,\\n        string memory tokenName_,\\n        string memory tokenSymbol_,\\n        address governance_,\\n        address reseller_,\\n        uint256 approvalDelay_,\\n        uint256 maxTicketSize_,\\n        uint256 maxVaultValue_\\n    )\\n        FijaERC4626Base(\\n            asset_,\\n            governance_,\\n            reseller_,\\n            tokenName_,\\n            tokenSymbol_,\\n            maxTicketSize_,\\n            maxVaultValue_\\n        )\\n    {\\n        if (address(strategy_) == address(0)) {\\n            revert VaultStrategyUndefined();\\n        }\\n        if (strategy_.asset() != asset()) {\\n            revert VaultNoAssetMatching();\\n        }\\n\\n        _strategy = strategy_;\\n        _approvalDelay = approvalDelay_;\\n    }\\n\\n    ///\\n    /// @inheritdoc IFijaVault\\n    ///\\n    function strategy() public view virtual override returns (address) {\\n        return address(_strategy);\\n    }\\n\\n    ///\\n    /// @inheritdoc IFijaVault\\n    ///\\n    function proposedStrategy()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (StrategyCandidate memory)\\n    {\\n        return _strategyCandidate;\\n    }\\n\\n    ///\\n    /// @inheritdoc IFijaVault\\n    ///\\n    function approvalDelay() public view virtual override returns (uint256) {\\n        return _approvalDelay;\\n    }\\n\\n    ///\\n    /// NOTE: vault needs to be added to proposed strategy whitelist prior to calling this function\\n    /// Emits IFijaVault.NewStrategyCandidateEvent\\n    /// @inheritdoc IFijaVault\\n    ///\\n    function proposeStrategy(\\n        IFijaStrategy strategyCandidate\\n    ) public virtual override onlyGovernance {\\n        if (!strategyCandidate.isWhitelisted(address(this))) {\\n            revert VaultNotWhitelisted();\\n        }\\n\\n        _strategyCandidate = StrategyCandidate({\\n            implementation: address(strategyCandidate),\\n            proposedTime: uint64(block.timestamp)\\n        });\\n\\n        emit NewStrategyCandidateEvent(\\n            address(strategyCandidate),\\n            block.timestamp\\n        );\\n    }\\n\\n    ///\\n    /// NOTE: this can only be called when proposedTime + approvalDelay has passed.\\n    /// For safety it sets StrategyCandidate.implementation to 0 address and proposedTime to over 130 years from now\\n    /// Emits IFijaVault.UpdateStrategyEvent\\n    /// @inheritdoc IFijaVault\\n    ///\\n    function updateStrategy() public virtual override onlyGovernance {\\n        if (_strategyCandidate.implementation == address(0)) {\\n            revert VaultNoUpdateCandidate();\\n        }\\n        if (\\n            _strategyCandidate.proposedTime + _approvalDelay >= block.timestamp\\n        ) {\\n            revert VaultUpdateStrategyTimeError();\\n        }\\n\\n        emit UpdateStrategyEvent(\\n            _strategyCandidate.implementation,\\n            block.timestamp\\n        );\\n\\n        // get assets back from strategy in batches\\n        uint256 remainingTokens = _strategy.balanceOf(address(this));\\n        while (remainingTokens > 0) {\\n            uint256 maxRedeem = _strategy.maxRedeem(address(this));\\n            uint256 redeemAmount = remainingTokens > maxRedeem\\n                ? maxRedeem\\n                : remainingTokens;\\n            _strategy.redeem(redeemAmount, address(this), address(this));\\n            remainingTokens -= redeemAmount;\\n        }\\n\\n        // get all assets in the vault (assets received from strategy + outstanding assets if any)\\n        uint256 totalAssetsInVault = 0;\\n        if (asset() != ETH) {\\n            totalAssetsInVault = IERC20(asset()).balanceOf(address(this));\\n        } else {\\n            totalAssetsInVault = address(this).balance;\\n        }\\n\\n        // assign new strategy\\n        _strategy = IFijaStrategy(_strategyCandidate.implementation);\\n\\n        // vault is giving new Strategy approval for asset transfer\\n        if (asset() != ETH) {\\n            SafeERC20.forceApprove(\\n                IERC20(asset()),\\n                address(_strategy),\\n                totalAssetsInVault\\n            );\\n        }\\n\\n        // deposit assets received from old strategy to new strategy and receive strategy tokens from new strategy,\\n        // in batches\\n        while (totalAssetsInVault > 0) {\\n            uint256 maxDeposit = _strategy.maxDeposit(address(this));\\n            uint256 depositAmount = totalAssetsInVault > maxDeposit\\n                ? maxDeposit\\n                : totalAssetsInVault;\\n\\n            uint256 ethValue = 0;\\n            if (asset() == ETH) {\\n                ethValue = depositAmount;\\n            }\\n            _strategy.deposit{value: ethValue}(depositAmount, address(this));\\n            totalAssetsInVault -= depositAmount;\\n        }\\n\\n        // resets strategy candidate after strategy update has been completed\\n        _strategyCandidate.implementation = address(0);\\n        _strategyCandidate.proposedTime = type(uint64).max; //set proposed time to the far future\\n    }\\n\\n    ///\\n    /// @dev gets amount of assets under vault management\\n    /// @return amount in assets\\n    ///\\n    function totalAssets()\\n        public\\n        view\\n        virtual\\n        override(FijaERC4626Base, IERC4626)\\n        returns (uint256)\\n    {\\n        if (asset() == ETH) {\\n            return\\n                _strategy.convertToAssets(_strategy.balanceOf(address(this))) +\\n                address(this).balance;\\n        } else {\\n            return\\n                _strategy.convertToAssets(_strategy.balanceOf(address(this))) +\\n                IERC20(asset()).balanceOf(address(this));\\n        }\\n    }\\n\\n    ///\\n    /// @dev calculates amount of vault tokens receiver will get from the Vault based on asset deposit.\\n    /// @param assets amount of assets caller wants to deposit\\n    /// @param receiver address of the owner of deposit once deposit completes, this address will receive vault tokens.\\n    /// @return amount of vault tokens receiver will receive\\n    /// NOTE: Main entry method for receiving deposits, which will be then distrubuted through strategy contract.\\n    /// Access rights for the method are defined by FijaERC4626Base contract.\\n    /// Caller and receiver must be whitelisted\\n    /// Emits IERC4626.Deposit\\n    ///\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    )\\n        public\\n        payable\\n        virtual\\n        override(FijaERC4626Base, IERC4626)\\n        returns (uint256)\\n    {\\n        uint256 tokens = super.deposit(assets, receiver);\\n        uint256 allAssets;\\n        if (asset() == ETH) {\\n            allAssets = address(this).balance;\\n            _strategy.deposit{value: allAssets}(allAssets, address(this));\\n        } else {\\n            allAssets = IERC20(asset()).balanceOf(address(this));\\n            // Vault is giving Strategy approval for asset transfer\\n            SafeERC20.forceApprove(\\n                IERC20(asset()),\\n                address(_strategy),\\n                allAssets\\n            );\\n            _strategy.deposit(allAssets, address(this));\\n        }\\n\\n        return tokens;\\n    }\\n\\n    ///\\n    /// @dev Burns exact number of vault tokens from owner and sends assets to receiver.\\n    /// @param tokens amount of vault tokens caller wants to redeem\\n    /// @param receiver address of the asset receiver\\n    /// @param owner address of the owner of vault tokens\\n    /// @return amount of assets receiver will receive based on exact burnt vault tokens\\n    /// NOTE: Unwinds investments from strategy and returns assets.\\n    /// Access rights for the method are defined by FijaERC4626Base contract.\\n    /// Caller, receiver and owner must be whitelisted\\n    /// Emits IERC4626.Withdraw\\n    ///\\n    function redeem(\\n        uint256 tokens,\\n        address receiver,\\n        address owner\\n    ) public virtual override(FijaERC4626Base, IERC4626) returns (uint256) {\\n        uint256 assets = previewRedeem(tokens);\\n\\n        uint256 currentBalance;\\n        if (asset() == ETH) {\\n            currentBalance = address(this).balance;\\n        } else {\\n            currentBalance = IERC20(asset()).balanceOf(address(this));\\n        }\\n\\n        if (assets > currentBalance) {\\n            uint256 strategyTokens = _strategy.previewWithdraw(\\n                assets - currentBalance\\n            );\\n            _strategy.redeem(strategyTokens, address(this), address(this));\\n        }\\n        return super.redeem(tokens, receiver, owner);\\n    }\\n\\n    ///\\n    /// @dev Burns tokens from owner and sends exact number of assets to receiver\\n    /// @param assets amount of assets caller wants to withdraw\\n    /// @param receiver address of the asset receiver\\n    /// @param owner address of the owner of vault tokens\\n    /// @return amount of vault tokens burnt based on exact assets requested\\n    /// NOTE: Unwinds investments from strategy and returns assets.\\n    /// Access rights for the method are defined by FijaERC4626Base contract.\\n    /// Caller, receiver and owner must be whitelisted\\n    /// Emits IERC4626.Withdraw\\n    ///\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual override(FijaERC4626Base, IERC4626) returns (uint256) {\\n        uint256 currentBalance;\\n        if (asset() == ETH) {\\n            currentBalance = address(this).balance;\\n        } else {\\n            currentBalance = IERC20(asset()).balanceOf(address(this));\\n        }\\n\\n        if (assets > currentBalance) {\\n            _strategy.withdraw(\\n                assets - currentBalance,\\n                address(this),\\n                address(this)\\n            );\\n        }\\n        return super.withdraw(assets, receiver, owner);\\n    }\\n\\n    ///\\n    /// NOTE: only reseller access\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function addAddressToWhitelist(\\n        address addr\\n    ) public virtual override onlyReseller returns (bool) {\\n        return super.addAddressToWhitelist(addr);\\n    }\\n\\n    ///\\n    /// NOTE: only reseller access\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function removeAddressFromWhitelist(\\n        address addr\\n    ) public virtual override onlyReseller returns (bool) {\\n        return super.removeAddressFromWhitelist(addr);\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (interfaces/IERC4626.sol)\\n\\n// ####################################################\\n// ################## IMPORTANT #######################\\n// ####################################################\\n// NOTE fija Finance: ETH native compatibility -- Forked OZ contract and updated deposit method to become payable.\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(\\n        address indexed sender,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \u201cmanaged\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(\\n        uint256 assets\\n    ) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(\\n        uint256 shares\\n    ) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(\\n        address receiver\\n    ) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(\\n        uint256 assets\\n    ) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) external payable returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(\\n        address receiver\\n    ) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function mint(\\n        uint256 shares,\\n        address receiver\\n    ) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(\\n        address owner\\n    ) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(\\n        uint256 assets\\n    ) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(\\n        uint256 shares\\n    ) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFijaACL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n///\\n/// @title Access control interface\\n/// @author Fija\\n/// @notice Defines methods and events for access control manipulation in contracts\\n///\\ninterface IFijaACL {\\n    ///\\n    /// @dev emits when address is added to whitelist\\n    /// @param addr address added to the whitelist\\n    ///\\n    event WhitelistedAddressAdded(address addr);\\n\\n    ///\\n    /// @dev emits when address is removed from whitelist\\n    /// @param addr address removed from the whitelist\\n    ///\\n    event WhitelistedAddressRemoved(address addr);\\n\\n    ///\\n    /// @dev emits when owner is changed\\n    /// @param previousOwner address of previous owner\\n    /// @param newOwner address of new owner\\n    ///\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    ///\\n    /// @dev emits when governance is changed\\n    /// @param previousGovernance address of previous governance\\n    /// @param newGovernance address of new governance\\n    ///\\n    event GovernanceTransferred(\\n        address indexed previousGovernance,\\n        address indexed newGovernance\\n    );\\n\\n    ///\\n    /// @dev emits when reseller is changed\\n    /// @param previousReseller address of previous reseller\\n    /// @param newReseller address of new reseller\\n    ///\\n    event ResellerTransferred(\\n        address indexed previousReseller,\\n        address indexed newReseller\\n    );\\n\\n    ///\\n    /// @dev adds address to whitelist\\n    /// @param addr address to be added to whitelist\\n    /// @return true if address was added, false if it already in whitelist\\n    ///\\n    function addAddressToWhitelist(address addr) external returns (bool);\\n\\n    ///\\n    /// @dev removes address from whitelist\\n    /// @param addr address to be removed from whitelist\\n    /// @return true if address was removed, false if it not in the whitelist\\n    ///\\n    function removeAddressFromWhitelist(address addr) external returns (bool);\\n\\n    ///\\n    /// @dev contract owner\\n    /// @return address of the current owner\\n    ///\\n    function owner() external view returns (address);\\n\\n    ///\\n    /// @dev contract governance\\n    /// @return address of the current governance\\n    ///\\n    function governance() external view returns (address);\\n\\n    ///\\n    /// @dev contract reseller\\n    /// @return address of the current reseller\\n    ///\\n    function reseller() external view returns (address);\\n\\n    ///\\n    /// @dev checks if address is in whitelist\\n    /// @param addr address to check if it is in whitelist\\n    /// @return true if address is in contract whitelist, false if it is not.\\n    ///\\n    function isWhitelisted(address addr) external view returns (bool);\\n\\n    ///\\n    /// @dev changes ownership to new owner address\\n    /// @param newOwner address of new owner\\n    ///\\n    function transferOwnership(address newOwner) external;\\n\\n    ///\\n    /// @dev changes governance to new governance address.\\n    /// @param newGovernance address of new governance\\n    ///\\n    function transferGovernance(address newGovernance) external;\\n\\n    ///\\n    /// @dev changes reseller to new reseller address.\\n    /// @param newReseller address of new reseller\\n    ///\\n    function transferReseller(address newReseller) external;\\n\\n    ///\\n    /// @dev Leaves the contract without governance.\\n    /// It will not be possible to call `onlyGovernance` functions anymore.\\n    /// Renouncing governance will leave the contract without governance,\\n    /// thereby removing any functionality that is only available to the governance.\\n    ///\\n    function renounceGovernance() external;\\n\\n    ///\\n    /// @dev Leaves the contract without reseller.\\n    /// It will not be possible to call `onlyReseller` functions anymore.\\n    /// Renouncing reseller will leave the contract without reseller,\\n    /// thereby removing any functionality that is only available to the reseller.\\n    ///\\n    function renounceReseller() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFijaERC4626Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./IERC4626.sol\\\";\\nimport \\\"./IFijaACL.sol\\\";\\n\\n///\\n/// @title Base interface\\n/// @author Fija\\n/// @notice Interface base layer for vault and strategy interfaces\\n///\\ninterface IFijaERC4626Base is IFijaACL, IERC4626 {\\n    ///\\n    /// @dev Returns the amount of tokens that the Vault would exchange for the amount of assets provided, in an ideal\\n    /// scenario where all the conditions are met.\\n    ///\\n    /// - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n    /// - MUST NOT show any variations depending on the caller.\\n    /// - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n    /// - MUST NOT revert.\\n    ///\\n    /// NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n    /// \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n    /// from.\\n    /// @param assets amount to be converted to tokens amount\\n    ///\\n    function convertToTokens(\\n        uint256 assets\\n    ) external view returns (uint256 tokens);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFijaStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./IFijaERC4626Base.sol\\\";\\n\\ninterface IFijaStrategy is IFijaERC4626Base {\\n    ///\\n    /// @dev emits when rebalance executes\\n    /// @param timestamp current timestamp when rebalance is executed\\n    /// @param data metadata associated with event\\n    ///\\n    event Rebalance(uint256 indexed timestamp, string data);\\n\\n    ///\\n    /// @dev emits when harvest executes\\n    /// @param timestamp current timestamp when harvest is executed\\n    /// @param harvestResult amount of harvested funds\\n    /// @param profitShare amount of profits\\n    /// @param profitToken address of profit token\\n    /// @param data metadata associated with event\\n    ///\\n    event Harvest(\\n        uint256 indexed timestamp,\\n        uint256 harvestResult,\\n        uint256 profitShare,\\n        address profitToken,\\n        string data\\n    );\\n\\n    ///\\n    /// @dev emits when emergency mode is toggled\\n    /// @param timestamp current timestamp when emergency mode is toggled\\n    /// @param turnOn flag for turning on/off emergency mode\\n    ///\\n    event EmergencyMode(uint256 indexed timestamp, bool turnOn);\\n\\n    ///\\n    /// @dev check if there is a need to rebalance strategy funds\\n    /// @return bool indicating need for rebalance\\n    ///\\n    function needRebalance() external view returns (bool);\\n\\n    ///\\n    /// @dev executes strategy rebalancing\\n    ///\\n    function rebalance() external;\\n\\n    ///\\n    /// @dev check if there is a need to harvest strategy funds\\n    /// @return bool indicating need for harvesting\\n    ///\\n    function needHarvest() external view returns (bool);\\n\\n    ///\\n    /// @dev executes strategy harvesting\\n    ///\\n    function harvest() external;\\n\\n    ///\\n    /// @dev gets emergency mode status of strategy\\n    /// @return flag indicting emergency mode status\\n    ///\\n    function emergencyMode() external view returns (bool);\\n\\n    ///\\n    /// @dev sets emergency mode on/off\\n    /// @param turnOn toggle flag\\n    ///\\n    function setEmergencyMode(bool turnOn) external;\\n\\n    ///\\n    /// @dev check if there is a need for setting strategy in emergency mode\\n    /// @return bool indicating need for emergency mode\\n    ///\\n    function needEmergencyMode() external view returns (bool);\\n\\n    ///\\n    /// @dev gets various strategy status parameters\\n    /// @return status parameters as string\\n    ///\\n    function status() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFijaVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./IFijaERC4626Base.sol\\\";\\nimport \\\"./IFijaStrategy.sol\\\";\\n\\n/// @title Vault interface\\n/// @author Fija\\n/// @notice Defines interface methods and events used by the FijaVault\\n///\\ninterface IFijaVault is IFijaERC4626Base {\\n    ///\\n    /// @param strategyCandidate address of strategy candidate\\n    /// @param timestamp proposed time in seconds from when strategy candidate could be\\n    /// eligble to be promoted to vault strategy. Also depens on IFijaVault.approvalDelay\\n    ///\\n    struct StrategyCandidate {\\n        address implementation;\\n        uint64 proposedTime;\\n    }\\n\\n    ///\\n    /// @dev emits when new strategy is proposed\\n    /// @param strategyCandidate address representing StrategyCandidate\\n    /// @param timestamp time in seconds event is triggered\\n    ///\\n    event NewStrategyCandidateEvent(\\n        address strategyCandidate,\\n        uint256 timestamp\\n    );\\n\\n    ///\\n    /// @dev emits when strategy canidate has become new vault strategy\\n    /// @param newStrategy address representing new strategy (IStrategy)\\n    /// @param timestamp time in seconds when event is triggered\\n    ///\\n    event UpdateStrategyEvent(address newStrategy, uint256 timestamp);\\n\\n    ///\\n    /// @dev gets strategy in use\\n    /// @return strategy address\\n    ///\\n    function strategy() external view returns (address);\\n\\n    ///\\n    /// @dev gets strategy candidate, which has potential to be elected as vault strategy\\n    /// @return StrategyCandidate object, see IFijaVault.StrategyCandidate\\n    ///\\n    function proposedStrategy()\\n        external\\n        view\\n        returns (StrategyCandidate memory);\\n\\n    ///\\n    /// @dev gets time which need to pass in order for strategy candidate to\\n    /// become eligble to become new vault strategy.\\n    /// @return time in seconds\\n    ///\\n    function approvalDelay() external view returns (uint256);\\n\\n    ///\\n    /// @dev sets new strategy candidate for the vault\\n    /// @param strategyCandidate object representing new strategy candidate for vault\\n    ///\\n    function proposeStrategy(IFijaStrategy strategyCandidate) external;\\n\\n    ///\\n    /// @dev updates strategy in use, based on strategy proposal candidate\\n    ///\\n    function updateStrategy() external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IFijaStrategy\",\"name\":\"strategy_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"asset_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenName_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reseller_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"approvalDelay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTicketSize_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxVaultValue_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ACLDepositReceiverNotWhitelist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLGovZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLNotGov\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLNotGovOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLNotReseller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLNotWhitelist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLOwnerZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLRedeemWithdrawReceiverOwnerNotWhitelist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLResellZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLTransferUserNotWhitelist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLWhitelistAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FijaZeroInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferDisbalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNoAssetMatching\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNoUpdateCandidate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultStrategyUndefined\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultUpdateStrategyTimeError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernance\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategyCandidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewStrategyCandidateEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousReseller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newReseller\",\"type\":\"address\"}],\"name\":\"ResellerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStrategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateStrategyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvalDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFijaStrategy\",\"name\":\"strategyCandidate\",\"type\":\"address\"}],\"name\":\"proposeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedStrategy\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"proposedTime\",\"type\":\"uint64\"}],\"internalType\":\"struct IFijaVault.StrategyCandidate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceReseller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reseller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReseller\",\"type\":\"address\"}],\"name\":\"transferReseller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FijaVault", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000049a991e33b80d6c5f727242c778dbfeb606b62590000000000000000000000001a7e4e63778b4f12a199c062f3efdd288afcbce800000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000feca16ad50edce788ba81213bb0a97b9f3c38016000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d2f00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000001966696a61206167455552204375727665436f6e7665782046410000000000000000000000000000000000000000000000000000000000000000000000000000096661674555525f43430000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}