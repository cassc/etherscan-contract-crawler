{"SourceCode": "# @version 0.3.7\r\n\"\"\"\r\n@title yETH stake zap\r\n@author 0xkorin, Yearn Finance\r\n@license GNU AGPLv3\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\nfrom vyper.interfaces import ERC4626\r\n\r\ninterface Pool:\r\n    def num_assets() -> uint256: view\r\n    def assets(_i: uint256) -> address: view\r\n    def add_liquidity(_amounts: DynArray[uint256, 32], _min_lp_amount: uint256, _receiver: address) -> uint256: nonpayable\r\n\r\ntoken: public(immutable(address))\r\npool: public(immutable(address))\r\nstaking: public(immutable(address))\r\n\r\nmanagement: public(address)\r\npending_management: public(address)\r\n\r\nevent PendingManagement:\r\n    management: indexed(address)\r\n\r\nevent SetManagement:\r\n    management: indexed(address)\r\n\r\n@external\r\ndef __init__(_token: address, _pool: address, _staking: address):\r\n    \"\"\"\r\n    @notice Constructor\r\n    @param _token Token contract address\r\n    @param _pool Pool contract address\r\n    @param _staking Staking contract address\r\n    \"\"\"\r\n    token = _token\r\n    pool = _pool\r\n    staking = _staking\r\n    self.management = msg.sender\r\n\r\n    assert ERC20(token).approve(staking, max_value(uint256), default_return_value=True)\r\n\r\n@external\r\ndef approve(_i: uint256):\r\n    \"\"\"\r\n    @notice Approve transfer of a pool asset to the pool\r\n    @param _i Index of the pool asset to approve\r\n    \"\"\"\r\n    asset: address = Pool(pool).assets(_i)\r\n    assert ERC20(asset).approve(pool, max_value(uint256), default_return_value=True)\r\n\r\n@external\r\ndef add_liquidity(\r\n    _amounts: DynArray[uint256, 32], \r\n    _min_lp_amount: uint256, \r\n    _receiver: address = msg.sender\r\n) -> (uint256, uint256):\r\n    \"\"\"\r\n    @notice Deposit assets into the pool and stake\r\n    @param _amounts Array of amount for each asset to take from caller\r\n    @param _min_lp_amount Minimum amount of LP tokens to mint\r\n    @param _receiver Account to receive the LP tokens\r\n    @return Tuple with the amount of LP tokens minted and the amount of staking shares minted\r\n    \"\"\"\r\n    num_assets: uint256 = Pool(pool).num_assets()\r\n    for i in range(32):\r\n        if i == num_assets:\r\n            break\r\n        amount: uint256 = _amounts[i]\r\n        if amount == 0:\r\n            continue\r\n        asset: address = Pool(pool).assets(i)\r\n        assert ERC20(asset).transferFrom(msg.sender, self, amount, default_return_value=True)\r\n\r\n    lp_amount: uint256 = Pool(pool).add_liquidity(_amounts, _min_lp_amount, self)\r\n    shares: uint256 = ERC4626(staking).deposit(lp_amount, _receiver)\r\n    return lp_amount, shares\r\n\r\n@external\r\ndef rescue(_token: address, _receiver: address):\r\n    \"\"\"\r\n    @notice Rescue tokens from this contract\r\n    @param _token The token to be rescued\r\n    @param _receiver Receiver of rescued tokens\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    amount: uint256 = ERC20(_token).balanceOf(self)\r\n    assert ERC20(_token).transfer(_receiver, amount, default_return_value=True)\r\n\r\n@external\r\ndef set_management(_management: address):\r\n    \"\"\"\r\n    @notice \r\n        Set the pending management address.\r\n        Needs to be accepted by that account separately to transfer management over\r\n    @param _management New pending management address\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    self.pending_management = _management\r\n    log PendingManagement(_management)\r\n\r\n@external\r\ndef accept_management():\r\n    \"\"\"\r\n    @notice \r\n        Accept management role.\r\n        Can only be called by account previously marked as pending management by current management\r\n    \"\"\"\r\n    assert msg.sender == self.pending_management\r\n    self.pending_management = empty(address)\r\n    self.management = msg.sender\r\n    log SetManagement(msg.sender)", "ABI": "[{\"name\":\"PendingManagement\",\"inputs\":[{\"name\":\"management\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetManagement\",\"inputs\":[{\"name\":\"management\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_pool\",\"type\":\"address\"},{\"name\":\"_staking\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"_i\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_liquidity\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_min_lp_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_liquidity\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_min_lp_amount\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"rescue\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_management\",\"inputs\":[{\"name\":\"_management\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_management\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pool\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"staking\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"management\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pending_management\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]}]", "ContractName": "yETH stake zap", "CompilerVersion": "vyper:0.3.7", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "0000000000000000000000001bed97cbc3c24a4fb5c069c6e311a967386131f70000000000000000000000002cced4ffa804adbe1269cdfc22d7904471abde63000000000000000000000000583019ff0f430721ada9cfb4fac8f06ca104d0b4", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}