{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.10;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface ICrvUsdController {\r\n    function create_loan(uint256 _collateralAmount, uint256 _debtAmount, uint256 _nBands) external payable;\r\n    function create_loan_extended(uint256 _collateralAmount, uint256 _debtAmount, uint256 _nBands, address _callbacker, uint256[] memory _callbackArgs) external payable;\r\n\r\n    /// @dev all functions below: if _collateralAmount is 0 will just return\r\n    function add_collateral(uint256 _collateralAmount) external payable;\r\n    function add_collateral(uint256 _collateralAmount, address _for) external payable;\r\n\r\n    function remove_collateral(uint256 _collateralAmount) external;\r\n    /// @param _useEth relevant only for ETH collateral pools (currently not deployed)\r\n    function remove_collateral(uint256 _collateralAmount, bool _useEth) external;\r\n\r\n    /// @dev all functions below: if _debtAmount is 0 will just return\r\n    function borrow_more(uint256 _collateralAmount, uint256 _debtAmount) external payable;\r\n\r\n    /// @dev if _debtAmount > debt will do full repay\r\n    function repay(uint256 _debtAmount) external payable;\r\n    function repay(uint256 _debtAmount, address _for) external payable;\r\n    /// @param _maxActiveBand Don't allow active band to be higher than this (to prevent front-running the repay)\r\n    function repay(uint256 _debtAmount, address _for, int256 _maxActiveBand) external payable;\r\n    function repay(uint256 _debtAmount, address _for, int256 _maxActiveBand, bool _useEth) external payable;\r\n    function repay_extended(address _callbacker, uint256[] memory _callbackArgs) external;\r\n\r\n    function liquidate(address user, uint256 min_x) external;\r\n    function liquidate(address user, uint256 min_x, bool _useEth) external;\r\n    function liquidate_extended(address user, uint256 min_x, uint256 frac, bool use_eth, address callbacker, uint256[] memory _callbackArgs) external;\r\n\r\n\r\n    /// GETTERS\r\n    function amm() external view returns (address);\r\n    function monetary_policy() external view returns (address);\r\n    function collateral_token() external view returns (address);\r\n    function debt(address) external view returns (uint256);\r\n    function total_debt() external view returns (uint256);\r\n    function health_calculator(address, int256, int256, bool, uint256) external view returns (int256);\r\n    function health_calculator(address, int256, int256, bool) external view returns (int256);\r\n    function health(address) external view returns (int256);\r\n    function health(address, bool) external view returns (int256);\r\n    function max_borrowable(uint256 collateralAmount, uint256 nBands) external view returns (uint256);\r\n    function min_collateral(uint256 debtAmount, uint256 nBands) external view returns (uint256);\r\n    function calculate_debt_n1(uint256, uint256, uint256) external view returns (int256);\r\n    function minted() external view returns (uint256);\r\n    function redeemed() external view returns (uint256);\r\n    function amm_price() external view returns (uint256);\r\n    function user_state(address) external view returns (uint256[4] memory);\r\n    function user_prices(address) external view returns (uint256[2] memory);\r\n    function loan_exists(address) external view returns (bool);\r\n    function liquidation_discount() external view returns (uint256);\r\n}\r\n\r\ninterface ICrvUsdControllerFactory {\r\n    function get_controller(address) external view returns (address); \r\n    function debt_ceiling(address) external view returns (uint256);\r\n}\r\n\r\ninterface ILLAMMA {\r\n    function active_band_with_skip() external view returns (int256);\r\n    function get_sum_xy(address) external view returns (uint256[2] memory);\r\n    function get_xy(address) external view returns (uint256[][2] memory);\r\n    function get_p() external view returns (uint256);\r\n    function read_user_tick_numbers(address) external view returns (int256[2] memory);\r\n    function p_oracle_up(int256) external view returns (uint256);\r\n    function p_oracle_down(int256) external view returns (uint256);\r\n    function p_current_up(int256) external view returns (uint256);\r\n    function p_current_down(int256) external view returns (uint256);\r\n    function bands_x(int256) external view returns (uint256);\r\n    function bands_y(int256) external view returns (uint256);\r\n    function get_base_price() external view returns (uint256);\r\n    function price_oracle() external view returns (uint256);\r\n    function active_band() external view returns (int256);\r\n    function A() external view returns (uint256);\r\n    function min_band() external view returns (int256);\r\n    function max_band() external view returns (int256);\r\n    function rate() external view returns (uint256);\r\n    function exchange(uint256 i, uint256 j, uint256 in_amount, uint256 min_amount) external returns (uint256[2] memory);\r\n    function coins(uint256 i) external view returns (address);\r\n    function user_state(address _user) external view returns (uint256[4] memory);\r\n}\r\n\r\ninterface IAGG {\r\n    function rate() external view returns (uint256);\r\n    function rate0() external view returns (uint256);\r\n    function target_debt_fraction() external view returns (uint256);\r\n    function sigma() external view returns (int256);\r\n    function peg_keepers(uint256) external view returns (address); \r\n}\r\n\r\ninterface IPegKeeper {\r\n    function debt() external view returns (uint256);\r\n}\r\n\r\ninterface ICurveUsdSwapper {\r\n    function encodeSwapParams(uint256[5][5] memory swapParams,  uint32 gasUsed, uint24 dfsFeeDivider) external pure returns (uint256 encoded);\r\n    function setAdditionalRoutes(address[8] memory _additionalRoutes, address[5] memory _swapZapPools) external;\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint256 digits);\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CurveUsdView {\r\n  struct Band {\r\n    int256 id;\r\n    uint256 lowPrice;\r\n    uint256 highPrice;\r\n    uint256 collAmount;\r\n    uint256 debtAmount;\r\n  }\r\n\r\n  struct CreateLoanData {\r\n    int256 health;\r\n    uint256 minColl;\r\n    uint256 maxBorrow;\r\n    Band[] bands;\r\n  }\r\n\r\n  struct GlobalData {\r\n    address collateral;\r\n    uint256 decimals;\r\n    int256 activeBand;\r\n    uint256 A;\r\n    uint256 totalDebt;\r\n    uint256 ammPrice;\r\n    uint256 basePrice;\r\n    uint256 oraclePrice;\r\n    uint256 minted;\r\n    uint256 redeemed;\r\n    uint256 monetaryPolicyRate;\r\n    uint256 ammRate;\r\n    int256 minBand;\r\n    int256 maxBand;\r\n  }\r\n\r\n  struct UserData {\r\n    bool loanExists;\r\n    uint256 collateralPrice;\r\n    uint256 marketCollateralAmount;\r\n    uint256 curveUsdCollateralAmount;\r\n    uint256 debtAmount;\r\n    uint256 N;\r\n    uint256 priceLow;\r\n    uint256 priceHigh;\r\n    uint256 liquidationDiscount;\r\n    int256 health;\r\n    int256[2] bandRange;\r\n    uint256[][2] usersBands;\r\n  }\r\n\r\n  address public constant WBTC_MARKET = 0x4e59541306910aD6dC1daC0AC9dFB29bD9F15c67;\r\n  address public constant WBTC_HEALTH_ZAP = 0xCF61Ee62b136e3553fB545bd8fEc11fb7f830d6A;\r\n\r\n  function userData(address market, address user) external view returns (UserData memory) {\r\n      ICrvUsdController ctrl = ICrvUsdController(market);\r\n      ILLAMMA amm = ILLAMMA(ctrl.amm());\r\n\r\n      if (!ctrl.loan_exists(user)) {\r\n        int256[2] memory bandRange = [int256(0), int256(0)];\r\n        uint256[][2] memory usersBands;\r\n\r\n        return UserData({\r\n          loanExists: false,\r\n          collateralPrice: 0,\r\n          marketCollateralAmount: 0,\r\n          curveUsdCollateralAmount: 0,\r\n          debtAmount: 0,\r\n          N: 0,\r\n          priceLow: 0,\r\n          priceHigh: 0,\r\n          liquidationDiscount: 0,\r\n          health: 0,\r\n          bandRange: bandRange,\r\n          usersBands: usersBands\r\n        });\r\n      }\r\n\r\n      uint256[4] memory amounts = ctrl.user_state(user);\r\n      uint256[2] memory prices = ctrl.user_prices(user);\r\n\r\n      return UserData({\r\n        loanExists: ctrl.loan_exists(user),\r\n        collateralPrice: amm.price_oracle(),\r\n        marketCollateralAmount: amounts[0],\r\n        curveUsdCollateralAmount: amounts[1],\r\n        debtAmount: amounts[2],\r\n        N: amounts[3],\r\n        priceLow: prices[1],\r\n        priceHigh: prices[0],\r\n        liquidationDiscount: ctrl.liquidation_discount(),\r\n        health: ctrl.health(user, true),\r\n        bandRange: amm.read_user_tick_numbers(user),\r\n        usersBands: amm.get_xy(user)\r\n      });\r\n  }\r\n\r\n  function globalData(address market) external view returns (GlobalData memory) {\r\n      ICrvUsdController ctrl = ICrvUsdController(market);\r\n      IAGG agg = IAGG(ctrl.monetary_policy());\r\n      ILLAMMA amm = ILLAMMA(ctrl.amm());\r\n      address collTokenAddr = ctrl.collateral_token();\r\n\r\n      return GlobalData({\r\n        collateral: collTokenAddr,\r\n        decimals: IERC20(collTokenAddr).decimals(),\r\n        activeBand: amm.active_band(),\r\n        A: amm.A(),\r\n        totalDebt: ctrl.total_debt(),\r\n        ammPrice: ctrl.amm_price(),\r\n        basePrice: amm.get_base_price(),\r\n        oraclePrice: amm.price_oracle(),\r\n        minted: ctrl.minted(),\r\n        redeemed: ctrl.redeemed(),\r\n        monetaryPolicyRate: agg.rate(),\r\n        ammRate: amm.rate(),\r\n        minBand: amm.min_band(),\r\n        maxBand: amm.max_band()\r\n    });\r\n  }\r\n\r\n  function getBandData(address market, int256 n) external view returns (Band memory) {\r\n      ICrvUsdController ctrl = ICrvUsdController(market);\r\n      ILLAMMA lama = ILLAMMA(ctrl.amm());\r\n\r\n      return Band(n, lama.p_oracle_down(n), lama.p_oracle_up(n), lama.bands_y(n), lama.bands_x(n));\r\n  }\r\n  \r\n  function getBandsData(address market, int256 from, int256 to) public view returns (Band[] memory) {\r\n      ICrvUsdController ctrl = ICrvUsdController(market);\r\n      ILLAMMA lama = ILLAMMA(ctrl.amm());\r\n      Band[] memory bands = new Band[](uint256(to-from+1));\r\n      for (int256 i = from; i <= to; i++) {\r\n          bands[uint256(i-from)] = Band(i, lama.p_oracle_down(i), lama.p_oracle_up(i), lama.bands_y(i), lama.bands_x(i));\r\n      }\r\n\r\n      return bands;\r\n  }\r\n\r\n  function createLoanData(address market, uint256 collateral, uint256 debt, uint256 N) external view returns (CreateLoanData memory) {\r\n    ICrvUsdController ctrl = ICrvUsdController(market);\r\n\r\n    uint256 collForHealthCalc = collateral;\r\n\r\n    int health = healthCalculator(market, address(0x00), int256(collForHealthCalc), int256(debt), true, N);\r\n\r\n    int256 n1 = ctrl.calculate_debt_n1(collateral, debt, N);\r\n    int256 n2 = n1 + int256(N) - 1;\r\n\r\n    Band[] memory bands = getBandsData(market, n1, n2);\r\n\r\n    return CreateLoanData({\r\n      health: health,\r\n      minColl: ctrl.min_collateral(debt, N),\r\n      maxBorrow: ctrl.max_borrowable(collateral, N),\r\n      bands: bands\r\n    });\r\n  }\r\n\r\n  function maxBorrow(address market, uint256 collateral, uint256 N) external view returns (uint256) {\r\n    ICrvUsdController ctrl = ICrvUsdController(market);\r\n    return ctrl.max_borrowable(collateral, N);\r\n  }\r\n\r\n  function minCollateral(address market, uint256 debt, uint256 N) external view returns (uint256) {\r\n    ICrvUsdController ctrl = ICrvUsdController(market);\r\n    return ctrl.min_collateral(debt, N);\r\n  }\r\n\r\n  function getBandsDataForPosition(address market, uint256 collateral, uint256 debt, uint256 N) external view returns (Band[] memory bands) {\r\n    ICrvUsdController ctrl = ICrvUsdController(market);\r\n\r\n    int256 n1 = ctrl.calculate_debt_n1(collateral, debt, N);\r\n    int256 n2 = n1 + int256(N) - 1;\r\n\r\n    bands = getBandsData(market, n1, n2);\r\n  }\r\n\r\n  function healthCalculator(address market, address user, int256 collChange, int256 debtChange, bool isFull, uint256 numBands) public view returns (int256 health) {\r\n    ICrvUsdController ctrl = ICrvUsdController(market);\r\n\r\n    // handle special health_calc if WBTC is collateral\r\n    if (market == WBTC_MARKET) {\r\n      ICrvUsdController healthZap = ICrvUsdController(WBTC_HEALTH_ZAP);\r\n      health = healthZap.health_calculator(user, int256(collChange), int256(debtChange), isFull, numBands);\r\n    } else {\r\n      health =  ctrl.health_calculator(user, collChange, debtChange, isFull, numBands);\r\n    }\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"WBTC_HEALTH_ZAP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBTC_MARKET\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"N\",\"type\":\"uint256\"}],\"name\":\"createLoanData\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"minColl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBorrow\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"id\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lowPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CurveUsdView.Band[]\",\"name\":\"bands\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CurveUsdView.CreateLoanData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"n\",\"type\":\"int256\"}],\"name\":\"getBandData\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"id\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lowPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CurveUsdView.Band\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"from\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"to\",\"type\":\"int256\"}],\"name\":\"getBandsData\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"id\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lowPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CurveUsdView.Band[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"N\",\"type\":\"uint256\"}],\"name\":\"getBandsDataForPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"id\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lowPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CurveUsdView.Band[]\",\"name\":\"bands\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"globalData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"activeBand\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ammPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oraclePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monetaryPolicyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ammRate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"minBand\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"maxBand\",\"type\":\"int256\"}],\"internalType\":\"struct CurveUsdView.GlobalData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"collChange\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"debtChange\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"isFull\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numBands\",\"type\":\"uint256\"}],\"name\":\"healthCalculator\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"N\",\"type\":\"uint256\"}],\"name\":\"maxBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"N\",\"type\":\"uint256\"}],\"name\":\"minCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"loanExists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketCollateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"curveUsdCollateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"N\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceHigh\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationDiscount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"health\",\"type\":\"int256\"},{\"internalType\":\"int256[2]\",\"name\":\"bandRange\",\"type\":\"int256[2]\"},{\"internalType\":\"uint256[][2]\",\"name\":\"usersBands\",\"type\":\"uint256[][2]\"}],\"internalType\":\"struct CurveUsdView.UserData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CurveUsdView", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://64e471f03027b02bb9e548fdb5329260f3988954ab0b1eacacbee92ed67046e4"}