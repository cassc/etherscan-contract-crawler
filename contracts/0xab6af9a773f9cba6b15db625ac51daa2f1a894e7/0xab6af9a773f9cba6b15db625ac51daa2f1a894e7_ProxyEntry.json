{"SourceCode": "// SPDX-License-Identifier: BSD-3-Clause\r\n// File: contracts/interfaces/IOwner.sol\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n* @title BiFi-Bifrost-Extension IOwner Interface\r\n* @notice Interface for Owner Contract\r\n* @author BiFi-Bifrost-Extension(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n*/\r\n\r\ninterface IOwner {\r\n    function transferOwnership(address _owner) external;\r\n    function acceptOwnership() external;\r\n    function setOwner(address _owner) external;\r\n    function setAdmin(address _admin, uint256 auth) external;\r\n}\r\n\r\n// File: contracts/interfaces/IProxyEntry.sol\r\npragma solidity 0.8.4;\r\n\r\n\r\n/**\r\n* @title BiFi-Bifrost-Extension IProxyEntry Interface\r\n* @notice Interface for Proxy Contract\r\n* @author BiFi-Bifrost-Extension(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n*/\r\n\r\ninterface IProxyEntry is IOwner {\r\n    function setProxyLogic(address logicAddr) external returns(bool);\r\n    fallback() external payable;\r\n    receive() external payable;\r\n}\r\n\r\n// File: contracts/libs/Owner.sol\r\npragma solidity 0.8.4;\r\n\r\n\r\nabstract contract Owner is IOwner {\r\n    address payable public owner;\r\n    address payable public pendingOwner;\r\n    mapping(address => uint256) public admins;\r\n\r\n    modifier onlyOwner() {\r\n        require(payable( msg.sender ) == owner, \"only Owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        address payable sender = payable( msg.sender );\r\n        require(sender == owner || admins[sender] != 0, \"only Admin\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        admins[owner = payable( msg.sender )] = 1;\r\n    }\r\n\r\n    function transferOwnership(address _nextOwner) override external onlyOwner {\r\n        pendingOwner = payable( _nextOwner );\r\n    }\r\n\r\n    function acceptOwnership() override external {\r\n        address payable sender = payable( msg.sender );\r\n        require(sender == pendingOwner, \"pendingOwner\");\r\n        owner = sender;\r\n    }\r\n\r\n    function setOwner(address _nextOwner) override external onlyOwner {\r\n        owner = payable( _nextOwner );\r\n    }\r\n\r\n    function setAdmin(address _admin, uint256 auth) override external onlyOwner {\r\n        admins[_admin] = auth;\r\n    }\r\n}\r\n\r\n// File: contracts/libs/proxy/ProxyStorage.sol\r\npragma solidity 0.8.4;\r\n\r\n\r\n/**\r\n* @title BiFi-Bifrost-Extension ProxyStorage Contract\r\n* @notice Contract for proxy storage layout sharing\r\n* @author BiFi-Bifrost-Extension(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n*/\r\n\r\nabstract contract ProxyStorage is Owner {\r\n    address public _implement;\r\n}\r\n\r\n// File: contracts/libs/proxy/ProxyEntry.sol\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\n/**\r\n* @title BiFi-Bifrost-Extension ProxyEntry Contract\r\n* @notice Contract for upgradable proxy pattern with access control\r\n* @author BiFi-Bifrost-Extension(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n*/\r\n\r\ncontract ProxyEntry is ProxyStorage, IProxyEntry {\r\n    constructor (address logicAddr) {\r\n        _setProxyLogic(logicAddr);\r\n    }\r\n\r\n    function setProxyLogic(address logicAddr) onlyOwner override external returns(bool) {\r\n        _setProxyLogic(logicAddr);\r\n    }\r\n    function _setProxyLogic(address logicAddr) internal {\r\n        _implement = logicAddr;\r\n    }\r\n\r\n    fallback() override external payable {\r\n        address addr = _implement;\r\n        assembly {\r\n            calldatacopy(0, 0, calldatasize())\r\n            let result := delegatecall(gas(), addr, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            switch result\r\n            case 0 { revert(0, returndatasize()) }\r\n            default { return(0, returndatasize()) }\r\n        }\r\n    }\r\n\r\n    receive() override external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"logicAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_implement\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"auth\",\"type\":\"uint256\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"logicAddr\",\"type\":\"address\"}],\"name\":\"setProxyLogic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ProxyEntry", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "000000000000000000000000e2599d06a49b24037887809c7de826ed319b0a58", "EVMVersion": "Default", "Library": "", "LicenseType": "BSD-3-Clause", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://079297640f903c4882d93abdde3dfe8ccd73a42a7a967066501f5640c2f85a45"}