{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n  \r\n}\r\n\r\ncontract Token {\r\n\r\n    /// @return total amount of tokens\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    /// @param owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address owner) public view returns (uint256);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param to The address of the recipient\r\n    /// @param value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param from The address of the sender\r\n    /// @param to The address of the recipient\r\n    /// @param value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param spender The address of the account able to transfer the tokens\r\n    /// @param value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    /// @param owner The address of the account owning tokens\r\n    /// @param spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n}\r\n\r\ncontract StandardToken is Token {\r\n    using SafeMath for uint256;\r\n    \r\n    mapping (address => uint256) balances;\r\n    \r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    \r\n    uint256 public totalSupply;\r\n    \r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        require(value <= balances[msg.sender]);\r\n        require(to != address(0));\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param from address The address which you want to send tokens from\r\n    * @param to address The address which you want to transfer to\r\n    * @param value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        require(value <= balances[from]);\r\n        require(value <= allowed[from][msg.sender]);\r\n        require(to != address(0));\r\n        \r\n        balances[from] = balances[from].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n    \r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return balances[owner];\r\n    }\r\n    \r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param owner address The address which owns the funds.\r\n    * @param spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(address owner, address spender) public view returns (uint256 remaining) {\r\n      return allowed[owner][spender];\r\n    }\r\n    \r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * @param spender The address which will spend the funds.\r\n    * @param value The amount of tokens to be spent.\r\n    */\r\n    function approve(address spender, uint256 value) public returns (bool success) {\r\n        require(spender != address(0));\r\n        \r\n        allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    \r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        \r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n    \r\n}\r\n\r\ncontract NNBToken is StandardToken, Ownable {\r\n    string public constant name = \"NNB Token\";    //fancy name: eg Simon Bucks\r\n    string public constant symbol = \"NNB\";           //An identifier: eg SBX\r\n    uint8 public constant decimals = 18;            //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\r\n    string public constant version = \"H1.0\";        //human 0.1 standard. Just an arbitrary versioning scheme.\r\n    \r\n    mapping (address => uint256) lockedBalance;\r\n    mapping (address => uint256) releasedBalance;\r\n    mapping (address => TimeLock[]) public allocations;\r\n    \r\n    struct TimeLock {\r\n        uint time;\r\n        uint256 balance;\r\n    }\r\n    \r\n    uint256 public constant BASE_SUPPLY = 10 ** uint256(decimals);\r\n    uint256 public constant INITIAL_SUPPLY = 6 * (10 ** 9) * BASE_SUPPLY;    //initial total supply for six billion\r\n    \r\n    uint256 public constant noLockedOperatorSupply = INITIAL_SUPPLY / 100 * 2;  // no locked operator 2%\r\n    \r\n    uint256 public constant lockedOperatorSupply = INITIAL_SUPPLY / 100 * 18;  // locked operator 18%\r\n    uint256 public constant lockedInvestorSupply = INITIAL_SUPPLY / 100 * 10;  // locked investor 10%\r\n    uint256 public constant lockedTeamSupply = INITIAL_SUPPLY / 100 * 10;  // locked team 10%\r\n\r\n    uint256 public constant lockedPrivatorForBaseSupply = INITIAL_SUPPLY / 100 * 11;  // locked privator base 11%\r\n    uint256 public constant lockedPrivatorForEcologyPartOneSupply = INITIAL_SUPPLY / 100 * 8;  // locked privator ecology part one for 8%\r\n    uint256 public constant lockedPrivatorForEcologyPartTwoSupply = INITIAL_SUPPLY / 100 * 4;  // locked privator ecology part one for 4%\r\n    \r\n    uint256 public constant lockedPrivatorForFaithSupply = INITIAL_SUPPLY / 1000 * 11;  // locked privator faith 1.1%\r\n    uint256 public constant lockedPrivatorForDevelopSupply = INITIAL_SUPPLY / 1000 * 19;  // locked privator develop 1.9%\r\n    \r\n    uint256 public constant lockedLabSupply = INITIAL_SUPPLY / 100 * 10;  // locked lab 10%\r\n    \r\n    uint public constant operatorUnlockTimes = 24;  // operator unlock times\r\n    uint public constant investorUnlockTimes = 3;   // investor unlock times\r\n    uint public constant teamUnlockTimes = 24;      // team unlock times\r\n    uint public constant privatorForBaseUnlockTimes = 6;   // privator base unlock times\r\n    uint public constant privatorForEcologyUnlockTimes = 9;  // privator ecology unlock times\r\n    uint public constant privatorForFaithUnlockTimes = 6;   // privator faith unlock times\r\n    uint public constant privatorForDevelopUnlockTimes = 3;  // privator develop unlock times\r\n    uint public constant labUnlockTimes = 12;       // lab unlock times\r\n    \r\n    event Lock(address indexed locker, uint256 value, uint releaseTime);\r\n    event UnLock(address indexed unlocker, uint256 value);\r\n    \r\n    constructor(address operator, address investor, address team, address privatorBase,\r\n                address privatorEcology, address privatorFaith, address privatorDevelop, address lab) public {\r\n        totalSupply = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n        \r\n        initialLockedValues(operator, investor, team, privatorBase, privatorEcology, privatorFaith, privatorDevelop, lab);\r\n    }\r\n    \r\n    /**\r\n     * init the locked total value, and the first release time\r\n     */ \r\n    function initialLockedValues(address operator, address investor, address team, address privatorBase,\r\n                                 address privatorEcology, address privatorFaith, address privatorDevelop, address lab) internal onlyOwner returns (bool success) {\r\n        \r\n        // init operator address value and locked value. every month can unlock operator value for 1/24 since next month\r\n        uint unlockTime = now + 30 days;\r\n        lockedValuesAndTime(operator, lockedOperatorSupply, operatorUnlockTimes, unlockTime);\r\n        \r\n        //init investor address value and locked value. unlocked investor value, at six month for 30%, nine month for 30%, twelve month for the others ,40%\r\n        require(0x0 != investor);\r\n        lockedBalance[investor] = lockedInvestorSupply;\r\n        releasedBalance[investor] = 0;\r\n        \r\n        unlockTime = now;\r\n        allocations[investor].push(TimeLock(unlockTime + 180 days, lockedInvestorSupply.div(10).mul(3)));\r\n        allocations[investor].push(TimeLock(unlockTime + 270 days, lockedInvestorSupply.div(10).mul(3)));\r\n        allocations[investor].push(TimeLock(unlockTime + 360 days, lockedInvestorSupply.div(10).mul(4)));\r\n        \r\n        //init team address value and locked value. every month can unlock team value for 1/24 since next 6 months\r\n        unlockTime = now + 180 days;\r\n        lockedValuesAndTime(team, lockedTeamSupply, teamUnlockTimes, unlockTime);\r\n        \r\n        //init privator base address value and locked value\r\n        unlockTime = now;\r\n        lockedValuesAndTime(privatorBase, lockedPrivatorForBaseSupply, privatorForBaseUnlockTimes, unlockTime);\r\n        \r\n        //init privator ecology address value and locked value\r\n        //this values will divide into two parts, part one for 8% of all inital supply, part two for 4% of all inital supply\r\n        //the part one will unlock for 9 times, part two will unlock for 6 times\r\n        //so, from 1 to 6 unlock times, the unlock values = part one / 9 + part two / 6,  from 7 to 9, the unlock values = part one / 9\r\n        require(0x0 != privatorEcology);\r\n        releasedBalance[privatorEcology] = 0;\r\n        lockedBalance[privatorEcology] = lockedPrivatorForEcologyPartOneSupply.add(lockedPrivatorForEcologyPartTwoSupply);\r\n\r\n        unlockTime = now;\r\n        for (uint i = 0; i < privatorForEcologyUnlockTimes; i++) {\r\n            if (i > 0) {\r\n                unlockTime = unlockTime + 30 days;\r\n            }\r\n            \r\n            uint256 lockedValue = lockedPrivatorForEcologyPartOneSupply.div(privatorForEcologyUnlockTimes);\r\n            if (i == privatorForEcologyUnlockTimes - 1) {  // the last unlock time\r\n                lockedValue = lockedPrivatorForEcologyPartOneSupply.div(privatorForEcologyUnlockTimes).add(lockedPrivatorForEcologyPartOneSupply.mod(privatorForEcologyUnlockTimes));\r\n            }\r\n            if (i < 6) {\r\n                uint256 partTwoValue = lockedPrivatorForEcologyPartTwoSupply.div(6);\r\n                if (i == 5) {  //the last unlock time\r\n                    partTwoValue = lockedPrivatorForEcologyPartTwoSupply.div(6).add(lockedPrivatorForEcologyPartTwoSupply.mod(6));\r\n                }\r\n                lockedValue = lockedValue.add(partTwoValue);\r\n            }\r\n            \r\n            allocations[privatorEcology].push(TimeLock(unlockTime, lockedValue));\r\n        }\r\n        \r\n        //init privator faith address value and locked value\r\n        unlockTime = now;\r\n        lockedValuesAndTime(privatorFaith, lockedPrivatorForFaithSupply, privatorForFaithUnlockTimes, unlockTime);\r\n        \r\n        //init privator develop address value and locked value\r\n        unlockTime = now;\r\n        lockedValuesAndTime(privatorDevelop, lockedPrivatorForDevelopSupply, privatorForDevelopUnlockTimes, unlockTime);\r\n        \r\n        //init lab address value and locked value. every month can unlock lab value for 1/12 since next year\r\n        unlockTime = now + 365 days;\r\n        lockedValuesAndTime(lab, lockedLabSupply, labUnlockTimes, unlockTime);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * lock the address value, set the unlock time\r\n     */ \r\n    function lockedValuesAndTime(address target, uint256 lockedSupply, uint lockedTimes, uint unlockTime) internal onlyOwner returns (bool success) {\r\n        require(0x0 != target);\r\n        releasedBalance[target] = 0;\r\n        lockedBalance[target] = lockedSupply;\r\n        \r\n        for (uint i = 0; i < lockedTimes; i++) {\r\n            if (i > 0) {\r\n                unlockTime = unlockTime + 30 days;\r\n            }\r\n            uint256 lockedValue = lockedSupply.div(lockedTimes);\r\n            if (i == lockedTimes - 1) {  //the last unlock time\r\n                lockedValue = lockedSupply.div(lockedTimes).add(lockedSupply.mod(lockedTimes));\r\n            }\r\n            allocations[target].push(TimeLock(unlockTime, lockedValue));\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * unlock the address values\r\n     */ \r\n    function unlock(address target) public onlyOwner returns(bool success) {\r\n        require(0x0 != target);\r\n        \r\n        uint256 value = 0;\r\n        for(uint i = 0; i < allocations[target].length; i++) {\r\n            if(now >= allocations[target][i].time) {\r\n                value = value.add(allocations[target][i].balance);\r\n                allocations[target][i].balance = 0;\r\n            }\r\n        }\r\n        lockedBalance[target] = lockedBalance[target].sub(value);\r\n        releasedBalance[target] = releasedBalance[target].add(value);\r\n        \r\n        transfer(target, value);\r\n        emit UnLock(target, value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * operator address has 2% for no locked.\r\n     */ \r\n    function initialOperatorValue(address operator) public onlyOwner {\r\n        transfer(operator, noLockedOperatorSupply);\r\n    }\r\n    \r\n    /**\r\n     * this function can get the locked value\r\n     */\r\n    function lockedOf(address owner) public constant returns (uint256 balance) {\r\n        return lockedBalance[owner];\r\n    }\r\n    \r\n    /**\r\n     * get the next unlock time\r\n     */ \r\n    function unlockTimeOf(address owner) public constant returns (uint time) {\r\n        for(uint i = 0; i < allocations[owner].length; i++) {\r\n            if(allocations[owner][i].time >= now) {\r\n                return allocations[owner][i].time;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * get the next unlock value\r\n     */ \r\n    function unlockValueOf(address owner) public constant returns (uint256 balance) {\r\n        for(uint i = 0; i < allocations[owner].length; i++) {\r\n            if(allocations[owner][i].time >= now) {\r\n                return allocations[owner][i].balance;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * this function can get the released value\r\n     */\r\n    function releasedOf(address owner) public constant returns (uint256 balance) {\r\n        return releasedBalance[owner];\r\n    }\r\n    \r\n    /**\r\n     * this function can be used when you want to send same number of tokens to all the recipients\r\n     */\r\n    function batchTransferForSingleValue(address[] dests, uint256 value) public onlyOwner {\r\n        uint256 i = 0;\r\n        uint256 sendValue = value * BASE_SUPPLY;\r\n        while (i < dests.length) {\r\n            transfer(dests[i], sendValue);\r\n            i++;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * this function can be used when you want to send every recipeint with different number of tokens\r\n     */\r\n    function batchTransferForDifferentValues(address[] dests, uint256[] values) public onlyOwner {\r\n        if(dests.length != values.length) return;\r\n        uint256 i = 0;\r\n        while (i < dests.length) {\r\n            uint256 sendValue = values[i] * BASE_SUPPLY;\r\n            transfer(dests[i], sendValue);\r\n            i++;\r\n        }\r\n    }\r\n    \r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allocations\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"labUnlockTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferForDifferentValues\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedInvestorSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"initialOperatorValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privatorForEcologyUnlockTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedPrivatorForFaithSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"unlockTimeOf\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privatorForBaseUnlockTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"unlockValueOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"noLockedOperatorSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operatorUnlockTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedTeamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedPrivatorForEcologyPartOneSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedOperatorSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"batchTransferForSingleValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"lockedOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedPrivatorForEcologyPartTwoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorUnlockTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedLabSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedPrivatorForDevelopSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedPrivatorForBaseSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamUnlockTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privatorForFaithUnlockTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"releasedOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privatorForDevelopUnlockTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"team\",\"type\":\"address\"},{\"name\":\"privatorBase\",\"type\":\"address\"},{\"name\":\"privatorEcology\",\"type\":\"address\"},{\"name\":\"privatorFaith\",\"type\":\"address\"},{\"name\":\"privatorDevelop\",\"type\":\"address\"},{\"name\":\"lab\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"locker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unlocker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UnLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "NNBToken", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009ba93e739c73267b24ce302d19868d38b392abe700000000000000000000000003ba5f9915e00bef45c67a2651a3b962bda84a5c000000000000000000000000a9e9dea841cf8adb9e7785f02c4317246740cf230000000000000000000000007aa3091eec0f54a403c74c8ca6011e200b20049700000000000000000000000002253927c5bec2386d63e0f2da8ca71ec052a845000000000000000000000000eae638e0ded5039edef09e1368e863a89f13588600000000000000000000000011d396cdccdc84ebce8eb05da25038cf29306d7d000000000000000000000000efee7eb66ae2f4ce5f054827319a4a77e3324858", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://1ceaf954813b4a1e8987c50fc3ccf33d3f22a6fe47162a476986c0e4e08450f8"}