{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/XPERPTimeLock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n//____  ____________________________________________\\n//\\\\   \\\\/  /\\\\______   \\\\_   _____/\\\\______   \\\\______   \\\\\\n// \\\\     /  |     ___/|    __)_  |       _/|     ___/\\n// /     \\\\  |    |    |        \\\\ |    |   \\\\|    |\\n///___/\\\\  \\\\ |____|   /_______  / |____|_  /|____|\\n//      \\\\_/                  \\\\/         \\\\/\\n// xperp team timelock contract\\n// https://xperp.tech\\n\\ninterface IERC20 {\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\\n/// @notice This contract is used to lock the team tokens until fixed unchangeable time\\ncontract XPERPTimeLock {\\n    uint256 private constant ENTERED = 1;\\n    uint256 private constant NOT_ENTERED = 0;\\n\\n    /// @notice xperp token contract\\n    IERC20 public xperpToken;\\n    /// @notice team address\\n    address public teamAddress;\\n    /// @notice unlock time, it is set to 12th November 2023 00:00:00 UTC\\n    uint256 public unlockTime;\\n    uint256 private reentrancyStatus;\\n\\n    constructor(IERC20 _token, address _teamAddress) {\\n        xperpToken = _token;\\n        teamAddress = _teamAddress;\\n        // Set unlock time to 12th November 2023 00:00:00 UTC\\n        unlockTime = 1699747200;\\n    }\\n\\n    /// @notice Deposit the xperp tokens to the contract, approve the xperp contract to spend the tokens on behalf of teamAddress before calling this function\\n    function deposit(uint256 _amount) external {\\n        require(msg.sender == teamAddress, \\\"Only the team can deposit tokens\\\");\\n        require(block.timestamp < unlockTime, \\\"Tokens are unlocked\\\");\\n        require(xperpToken.transferFrom(msg.sender, address(this), _amount), \\\"Transfer failed\\\");\\n    }\\n\\n    /// @notice Withdraw the xperp tokens from the contract\\n    function withdraw() external {\\n        if (reentrancyStatus == ENTERED)\\n            revert(\\\"ReentrancyGuard: reentrant call\\\");\\n        reentrancyStatus = ENTERED;\\n        require(msg.sender == teamAddress, \\\"Only the team can withdraw tokens\\\");\\n        require(block.timestamp >= unlockTime, \\\"Tokens are locked\\\");\\n        uint256 balance = xperpToken.balanceOf(address(this));\\n        require(xperpToken.transfer(teamAddress, balance), \\\"Transfer failed\\\");\\n        reentrancyStatus = NOT_ENTERED;\\n    }\\n\\n    /// @notice Recover the eth sent by mistake to the contract\\n    function recoverEth() external {\\n        require(msg.sender == teamAddress, \\\"Only the team can recover eth\\\");\\n        payable(teamAddress).transfer(address(this).balance);\\n    }\\n\\n    /// @notice Recover the erc20 tokens sent by mistake to the contract, xperp can't be recovered using this function\\n    function recoverERC20ExceptForXperp(address _tokenAddress, uint256 _amount) external {\\n        require(msg.sender == teamAddress, \\\"Only the team can recover tokens sent by mistake\\\");\\n        require(_tokenAddress != address(xperpToken), \\\"Cannot recover the token which is locked\\\");\\n        IERC20(_tokenAddress).transfer(teamAddress, _amount);\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@prb/test/=lib/prb-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@uniswap/v2-core/=lib/v2-core/\",\r\n      \"@uniswap/v2-periphery/=lib/v2-periphery/\",\r\n      \"ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 300\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\",\r\n      \"appendCBOR\": false\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20ExceptForXperp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xperpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "XPERPTimeLock", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "300", "ConstructorArguments": "00000000000000000000000064323d606cfcb1b50998636a182334ad9763798700000000000000000000000011ed88f6ee21f5808eb4b37d8292c57dc3cc5e19", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}