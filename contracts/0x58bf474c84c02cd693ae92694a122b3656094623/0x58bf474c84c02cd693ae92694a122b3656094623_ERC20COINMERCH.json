{"SourceCode": "//  \u2584\u2584\u2584\u2584\u2584\u2584\u2584 \u2584\u2584\u2584\u2584\u2584\u2584\u2584 \u2584\u2584\u2584 \u2584\u2584    \u2584 \u2584\u2584   \u2584\u2584 \u2584\u2584\u2584\u2584\u2584\u2584\u2584 \u2584\u2584\u2584\u2584\u2584\u2584   \u2584\u2584\u2584\u2584\u2584\u2584\u2584 \u2584\u2584   \u2584\u2584 \r\n// \u2588       \u2588       \u2588   \u2588  \u2588  \u2588 \u2588  \u2588\u2584\u2588  \u2588       \u2588   \u2584  \u2588 \u2588       \u2588  \u2588 \u2588  \u2588\r\n// \u2588       \u2588   \u2584   \u2588   \u2588   \u2588\u2584\u2588 \u2588       \u2588    \u2584\u2584\u2584\u2588  \u2588 \u2588 \u2588 \u2588       \u2588  \u2588\u2584\u2588  \u2588\r\n// \u2588     \u2584\u2584\u2588  \u2588 \u2588  \u2588   \u2588       \u2588       \u2588   \u2588\u2584\u2584\u2584\u2588   \u2588\u2584\u2584\u2588\u2584\u2588     \u2584\u2584\u2588       \u2588\r\n// \u2588    \u2588  \u2588  \u2588\u2584\u2588  \u2588   \u2588  \u2584    \u2588       \u2588    \u2584\u2584\u2584\u2588    \u2584\u2584  \u2588    \u2588  \u2588   \u2584   \u2588\r\n// \u2588    \u2588\u2584\u2584\u2588       \u2588   \u2588 \u2588 \u2588   \u2588 \u2588\u2588\u2584\u2588\u2588 \u2588   \u2588\u2584\u2584\u2584\u2588   \u2588  \u2588 \u2588    \u2588\u2584\u2584\u2588  \u2588 \u2588  \u2588\r\n// \u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2584\u2584\u2584\u2588\u2584\u2588  \u2588\u2584\u2584\u2588\u2584\u2588   \u2588\u2584\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2584\u2584\u2584\u2588  \u2588\u2584\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2584\u2584\u2588 \u2588\u2584\u2584\u2588\r\n// Telegram: @CoinMerch / https://t.me/CoinMerch\r\n// One Stop Merch Shop - coinmerch.io\r\n// Twitter/X: https://twitter.com/CoinMerchShop\r\n// Deployed by buymymerch.eth\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity 0.8.18;\r\n\r\ninterface IERC20 {\r\n\t\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\t\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\tevent TransferDetails(address indexed from, address indexed to, uint256 total_Amount, uint256 reflected_amount, uint256 total_TransferAmount, uint256 reflected_TransferAmount);\r\n}\r\n\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\tconstructor () {\r\n\t\t_owner = _msgSender();\r\n\t\temit OwnershipTransferred(address(0), _owner);\r\n\t}\r\n\t\r\n\tfunction owner() public view virtual returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\t\r\n\tmodifier onlyOwner() {\r\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\taddress newOwner = address(0);\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n\tfunction factory() external pure returns (address);\r\n\tfunction WETH() external pure returns (address);\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external;\r\n}\r\n\r\n\r\ncontract ERC20COINMERCH is Context, IERC20, Ownable {\r\n\tmapping (address => uint256) public _balance_reflected;\r\n\tmapping (address => uint256) public _balance_total;\r\n\tmapping (address => mapping (address => uint256)) private _allowances;\r\n\t\r\n\tmapping (address => bool) public _isExcluded;\r\n\t\r\n\tbool public tradingOpen = false;\r\n\t\r\n\tuint256 private constant MAX = ~uint256(0);\r\n\taddress constant deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\tuint256 public constant decimals = 18;\r\n\tuint256 public constant totalSupply = 10**9 * 10**decimals;\r\n\tuint256 private _supply_reflected = (MAX - (MAX % totalSupply));\r\n\r\n\tstring public constant name = \"CoinMerch\";\r\n\tstring public constant symbol = \"MERCH\";\r\n\t\r\n\tuint256 public _fee_reflection = 5;\r\n\tuint256 private _fee_reflection_old = _fee_reflection;\r\n\tuint256 public _contractReflectionStored = 0;\r\n\t\r\n\tuint256 public _fee_marketing = 5;\r\n\tuint256 private _fee_marketing_old = _fee_marketing;\r\n\taddress payable public _wallet_marketing;\r\n\r\n\tuint256 public constant _fee_denominator = 100;\r\n\r\n\tIUniswapV2Router public immutable uniswapV2Router;\r\n\taddress public immutable uniswapV2Pair;\r\n\r\n\tbool inSwapAndLiquify;\r\n\tbool public swapAndLiquifyEnabled = false;\r\n\tuint256 public swapThreshold = totalSupply / 500;\r\n\r\n\tmapping (address => bool) public isFeeExempt;\r\n\taddress[] public _excluded;\r\n\r\n\tuint256 public buyMultiplier = 0;\r\n\tuint256 public sellMultiplier = 0;\r\n\tuint256 public transferMultiplier = 0;\r\n\r\n\tevent MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n\tevent SwapAndLiquify(\r\n\t\tuint256 tokensSwapped,\r\n\t\tuint256 ethReceived,\r\n\t\tuint256 tokensIntoLiqudity\r\n\t);\r\n\t\r\n\tmodifier lockTheSwap {\r\n\t\tinSwapAndLiquify = true;\r\n\t\t_;\r\n\t\tinSwapAndLiquify = false;\r\n\t}\r\n\t\r\n\tconstructor () {\r\n\t\t_balance_reflected[owner()] = _supply_reflected;\r\n\r\n\t\t_wallet_marketing = payable(0xe91A54fEA158aF11B516066Ea561acBB3461e034);\r\n\t\t\r\n\t\tIUniswapV2Router _uniswapV2Router = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\t\tuniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n\t\tuniswapV2Router = _uniswapV2Router;\r\n\r\n\t\tisFeeExempt[msg.sender] = true;\r\n\t\tisFeeExempt[_wallet_marketing] = true;\r\n\t\tisFeeExempt[address(this)] = true;\r\n\t\tisFeeExempt[deadAddress] = true;\r\n\t\t\r\n\t\temit Transfer(address(0), owner(), totalSupply);\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n\t\tif (_isExcluded[account]) return _balance_total[account];\r\n\t\treturn tokenFromReflection(_balance_reflected[account]);\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) public view override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\trequire (_allowances[sender][_msgSender()] >= amount,\"ERC20: transfer amount exceeds allowance\");\r\n\t\t_approve(sender, _msgSender(), (_allowances[sender][_msgSender()]-amount));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, (_allowances[_msgSender()][spender] + addedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\t\trequire (_allowances[_msgSender()][spender] >= subtractedValue,\"ERC20: decreased allowance below zero\");\r\n\t\t_approve(_msgSender(), spender, (_allowances[_msgSender()][spender] - subtractedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction changeWallets(address _newMarketing) external onlyOwner {\r\n\t\t_wallet_marketing = payable(_newMarketing);\r\n\t}\r\n\r\n\tfunction tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n\t\trequire(rAmount <= _supply_reflected, \"Amount must be less than total reflections\");\r\n\t\tuint256 currentRate =  _getRate();\r\n\t\treturn (rAmount / currentRate);\r\n\t}\r\n\r\n\tfunction excludeFromReward(address account) external onlyOwner {\r\n\t\trequire(!_isExcluded[account], \"Account is already excluded\");\r\n\t\tif(_balance_reflected[account] > 0) {\r\n\t\t\t_balance_total[account] = tokenFromReflection(_balance_reflected[account]);\r\n\t\t}\r\n\t\t_isExcluded[account] = true;\r\n\t\t_excluded.push(account);\r\n\t}\r\n\r\n\tfunction includeInReward(address account) external onlyOwner {\r\n\t\trequire(_isExcluded[account], \"Account is already included\");\r\n\t\tfor (uint256 i = 0; i < _excluded.length; i++) {\r\n\t\t\tif (_excluded[i] == account) {\r\n\t\t\t\t_excluded[i] = _excluded[_excluded.length - 1];\r\n\t\t\t\t_balance_total[account] = 0;\r\n\t\t\t\t_isExcluded[account] = false;\r\n\t\t\t\t_excluded.pop();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction goLive() external onlyOwner {\r\n\t\trequire(!tradingOpen,\"Cannot be executed after going live\");\r\n\t\ttradingOpen = true;\r\n\t\tswapAndLiquifyEnabled = true;\r\n\t\tbuyMultiplier = 50;\r\n\t\tsellMultiplier = 200;\r\n\t\ttransferMultiplier = 0;\r\n\t}\r\n\r\n\tfunction setSwapSettings(bool _status, uint256 _threshold) external onlyOwner {\r\n\t\trequire(_threshold > 0,\"swap threshold cannot be 0\");\r\n\t\tswapAndLiquifyEnabled = _status;\r\n\t\tswapThreshold = _threshold;\r\n\t}\r\n\r\n\tfunction manage_excludeFromFee(address[] calldata addresses, bool status) external onlyOwner {\r\n\t\tfor (uint256 i; i < addresses.length; ++i) {\r\n\t\t\tisFeeExempt[addresses[i]] = status;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction clearStuckBalance(uint256 amountPercentage) external onlyOwner {\r\n\t\tuint256 amountToClear = amountPercentage * address(this).balance / 100;\r\n\t\tpayable(msg.sender).transfer(amountToClear);\r\n\t}\r\n\r\n\tfunction clearStuckToken(address tokenAddress, uint256 tokens) external onlyOwner returns (bool success) {\r\n\t\tif(tokens == 0){\r\n\t\t\ttokens = IERC20(tokenAddress).balanceOf(address(this));\r\n\t\t}\r\n\t\treturn IERC20(tokenAddress).transfer(msg.sender, tokens);\r\n\t}\r\n\r\n\tfunction _getRate() private view returns(uint256) {\r\n\t\t(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n\t\treturn rSupply / tSupply;\r\n\t}\r\n\r\n\tfunction _getCurrentSupply() private view returns(uint256, uint256) {\r\n\t\tuint256 rSupply = _supply_reflected;\r\n\t\tuint256 tSupply = totalSupply;\r\n\t\tfor (uint256 i = 0; i < _excluded.length; i++) {\r\n\t\t\tif (_balance_reflected[_excluded[i]] > rSupply || _balance_total[_excluded[i]] > tSupply) return (_supply_reflected, totalSupply);\r\n\t\t\trSupply = rSupply - _balance_reflected[_excluded[i]];\r\n\t\t\ttSupply = tSupply - _balance_total[_excluded[i]];\r\n\t\t}\r\n\t\tif (rSupply < (_supply_reflected/totalSupply)) return (_supply_reflected, totalSupply);\r\n\t\treturn (rSupply, tSupply);\r\n\t}\r\n\r\n\r\n\tfunction _getValues(uint256 tAmount, address recipient, address sender) private view returns (\r\n\t\tuint256 rAmount, uint256 rTransferAmount, uint256 rReflection,\r\n\t\tuint256 tTransferAmount, uint256 tMarketing, uint256 tReflection) {\r\n\r\n\t\tuint256 multiplier = transferMultiplier;\r\n\r\n\t\tif(recipient == uniswapV2Pair) {\r\n\t\t\tmultiplier = sellMultiplier;\r\n\t\t} else if(sender == uniswapV2Pair) {\r\n\t\t\tmultiplier = buyMultiplier;\r\n\t\t}\r\n\r\n\t\ttMarketing = ( tAmount * _fee_marketing ) * multiplier / (_fee_denominator * 100);\r\n\t\ttReflection = ( tAmount * _fee_reflection ) * multiplier  / (_fee_denominator * 100);\r\n\r\n\t\ttTransferAmount = tAmount - ( tMarketing + tReflection);\r\n\t\trReflection = tReflection * _getRate();\r\n\t\trAmount = tAmount * _getRate();\r\n\t\trTransferAmount = tTransferAmount * _getRate();\r\n\t}\r\n\r\n\tfunction _takeMarketingFee(uint256 feeAmount, address receiverWallet) private {\r\n\t\tuint256 reflectedReeAmount = feeAmount * _getRate();\r\n\t\t_balance_reflected[receiverWallet] = _balance_reflected[receiverWallet] + reflectedReeAmount;\r\n\r\n\t\tif(_isExcluded[receiverWallet]){\r\n\t\t\t_balance_total[receiverWallet] = _balance_total[receiverWallet] + feeAmount;\r\n\t\t}\r\n\t\tif(feeAmount > 0){\r\n\t\t\temit Transfer(msg.sender, receiverWallet, feeAmount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _setAllFees(uint256 marketingFee, uint256 reflectionFees) private {\r\n\t\t_fee_marketing = marketingFee;\r\n\t\t_fee_reflection = reflectionFees;\r\n\t}\r\n\r\n\tfunction setMultipliers(uint256 _buy, uint256 _sell, uint256 _trans) external onlyOwner {\r\n\r\n\t\trequire(_buy <= 100, \"Max buy multiplier allowed is 1x\");\r\n\t\trequire(_sell <= 100, \"Max sell multiplier allowed is 1x\");\r\n\t\trequire(_trans <= 100, \"Max transfer multiplier allowed is 1x\");\r\n\r\n\t\tsellMultiplier = _sell;\r\n\t\tbuyMultiplier = _buy;\r\n\t\ttransferMultiplier = _trans;\r\n\t}\r\n\r\n\tfunction set_All_Fees(uint256 Reflection_Fees, uint256 Marketing_Fee) external onlyOwner {\r\n\t\tuint256 total_fees =  Marketing_Fee + Reflection_Fees;\r\n\t\trequire(total_fees <= 20, \"Max fee allowed is 20%\");\r\n\t\t_setAllFees( Marketing_Fee, Reflection_Fees);\r\n\t}\r\n\r\n\tfunction removeAllFee() private {\r\n\t\t_fee_marketing_old = _fee_marketing;\r\n\t\t_fee_reflection_old = _fee_reflection;\r\n\r\n\t\t_setAllFees(0,0);\r\n\t}\r\n\t\r\n\tfunction restoreAllFee() private {\r\n\t\t_setAllFees(_fee_marketing_old, _fee_reflection_old);\r\n\t}\r\n\r\n\tfunction swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = uniswapV2Router.WETH();\r\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\t\tuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\ttokenAmount,\r\n\t\t\t0,\r\n\t\t\tpath,\r\n\t\t\t_wallet_marketing,\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tfunction _approve(address owner, address spender, uint256 amount) private {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction _transfer(address from, address to, uint256 amount) private {\r\n\r\n\t\tif(!isFeeExempt[from] && !isFeeExempt[to]){\r\n\t\t\trequire(tradingOpen,\"Trading not open yet\");\r\n\t\t}\r\n\r\n\t\tif(!inSwapAndLiquify && from != uniswapV2Pair && swapAndLiquifyEnabled && balanceOf(address(this)) > swapThreshold){\r\n\t\t\tswapTokensForEth(swapThreshold);\r\n\t\t}\r\n\t\t\r\n\t\tbool takeFee = true;\r\n\t\tif(isFeeExempt[from] || isFeeExempt[to]){\r\n\t\t    takeFee = false;\r\n\t\t    removeAllFee();\r\n\t\t}\r\n\t\t\r\n\t\t(uint256 rAmount, uint256 rTransferAmount, uint256 rReflection, uint256 tTransferAmount, uint256 tMarketing, uint256 tReflection) = _getValues(amount, to, from);\r\n\r\n\t\t_transferStandard(from, to, amount, rAmount, tTransferAmount, rTransferAmount);\r\n\r\n\t\t_supply_reflected = _supply_reflected - rReflection;\r\n\t\t_contractReflectionStored = _contractReflectionStored + tReflection;\r\n\r\n\t\tif(!takeFee){\r\n\t\t    restoreAllFee();\r\n\t\t} else{\r\n\t\t    _takeMarketingFee(tMarketing,address(this));\r\n\t\t}\t\r\n\t}\r\n\r\n\tfunction _transferStandard(address from, address to, uint256 tAmount, uint256 rAmount, uint256 tTransferAmount, uint256 rTransferAmount) private {\r\n\t\t_balance_reflected[from]    = _balance_reflected[from]  - rAmount;\r\n\r\n\t\tif (_isExcluded[from]){\r\n\t\t    _balance_total[from]    = _balance_total[from]      - tAmount;\r\n\t\t}\r\n\r\n\t\tif (_isExcluded[to]){\r\n\t\t    _balance_total[to]      = _balance_total[to]        + tTransferAmount;\r\n\t\t}\r\n\t\t_balance_reflected[to]      = _balance_reflected[to]    + rTransferAmount;\r\n\r\n\t\tif(tTransferAmount > 0){\r\n\t\t\temit Transfer(from, to, tTransferAmount);\t\r\n\t\t}\r\n\t}\r\n\r\n\treceive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total_Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reflected_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total_TransferAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reflected_TransferAmount\",\"type\":\"uint256\"}],\"name\":\"TransferDetails\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balance_reflected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balance_total\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_contractReflectionStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_excluded\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee_denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee_marketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee_reflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wallet_marketing\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMarketing\",\"type\":\"address\"}],\"name\":\"changeWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"clearStuckToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goLive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"manage_excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trans\",\"type\":\"uint256\"}],\"name\":\"setMultipliers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Reflection_Fees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Marketing_Fee\",\"type\":\"uint256\"}],\"name\":\"set_All_Fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ERC20COINMERCH", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://37b46371258b8f721c13b34e79b1366140537f30a70572e00123ca7323dab842"}