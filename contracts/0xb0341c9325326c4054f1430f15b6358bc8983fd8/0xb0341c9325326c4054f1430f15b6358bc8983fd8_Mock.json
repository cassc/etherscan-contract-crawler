{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.17;\r\n\r\ncontract Mock {\r\n\r\n    address public router;\r\n    address public approve;\r\n    address public owner;\r\n\r\n    constructor(address dexRouter, address tokenApprove) {\r\n        router = dexRouter;\r\n        approve = tokenApprove;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function mockfunc(address from, address to, uint amountIn, bytes memory data1, bytes memory data2) public payable returns (uint256) {\r\n        if (data1.length > 0) {\r\n            (bool res1, bytes memory returnAmount1) = payable(router).call{value : msg.value}(data1);\r\n            require(res1, string(returnAmount1));\r\n            require(uint256(bytes32(returnAmount1)) > amountIn, \"returnAmount1 less than amountIn\");\r\n            safeApprove(IERC20(from), approve, amountIn);\r\n            (bool res2, bytes memory returnAmount2) = payable(router).call(data2);\r\n            require(res2, string(returnAmount2));\r\n            uint256 returnAmount = uint256(bytes32(returnAmount2));\r\n            safeTransfer(IERC20(to), msg.sender, returnAmount);\r\n            return returnAmount;\r\n        } else {\r\n            (bool res2, bytes memory returnAmount2) = payable(router).call{value : msg.value}(data2);\r\n            require(res2, string(returnAmount2));\r\n            uint256 returnAmount = uint256(bytes32(returnAmount2));\r\n            safeTransfer(IERC20(to), msg.sender, returnAmount);\r\n            return returnAmount;\r\n        }\r\n    }\r\n\r\n    function setRouter(address newRouter) public {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        router = newRouter;\r\n    }\r\n\r\n    function setApprove(address newApprove) public {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        approve = newApprove;\r\n    }\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        if (!_makeCall(token, token.transfer.selector, to, value)) {\r\n            revert SafeTransferFailed();\r\n        }\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        forceApprove(token, spender, value);\r\n    }\r\n\r\n    function _makeCall(IERC20 token, bytes4 selector, address to, uint256 amount) private returns (bool success) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {// solhint-disable-line no-inline-assembly\r\n            let data := mload(0x40)\r\n\r\n            mstore(data, selector)\r\n            mstore(add(data, 0x04), to)\r\n            mstore(add(data, 0x24), amount)\r\n            success := call(gas(), token, 0, data, 0x44, 0x0, 0x20)\r\n            if success {\r\n                switch returndatasize()\r\n                case 0 {success := gt(extcodesize(token), 0)}\r\n                default {success := and(gt(returndatasize(), 31), eq(mload(0), 1))}\r\n            }\r\n        }\r\n    }\r\n\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        if (!_makeCall(token, token.approve.selector, spender, value)) {\r\n            if (!_makeCall(token, token.approve.selector, spender, 0) ||\r\n            !_makeCall(token, token.approve.selector, spender, value))\r\n            {\r\n                revert ForceApproveFailed();\r\n            }\r\n        }\r\n    }\r\n\r\n    error SafeTransferFailed();\r\n    error ForceApproveFailed();\r\n\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dexRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenApprove\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ForceApproveFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data2\",\"type\":\"bytes\"}],\"name\":\"mockfunc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newApprove\",\"type\":\"address\"}],\"name\":\"setApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Mock", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000003b3ae790df4f312e745d270119c6052904fb679000000000000000000000000040aa958dd87fc8305b97f2ba922cddca374bcd7f", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d79c6e20841c4f8ebfeffcd9f907c39cd38cfd623155eb019d2ed8f6e7d190a5"}