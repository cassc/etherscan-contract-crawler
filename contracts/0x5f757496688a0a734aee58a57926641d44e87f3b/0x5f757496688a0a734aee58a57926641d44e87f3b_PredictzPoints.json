{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2021-02-12\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2021-02-12\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2021-02-11\r\n*/\r\n\r\npragma solidity 0.6.12;\r\n\r\n// SPDX-License-Identifier: No License\r\n\r\n    /**\r\n    * @title SafeMath\r\n    * @dev Math operations with safety checks that throw on error\r\n    */\r\n    \r\n    library SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    }\r\n\r\n    /**\r\n    * @dev Library for managing\r\n    * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n    * types.\r\n    *\r\n    * Sets have the following properties:\r\n    *\r\n    * - Elements are added, removed, and checked for existence in constant time\r\n    * (O(1)).\r\n    * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n    *\r\n    * ```\r\n    * contract Example {\r\n    *     // Add the library methods\r\n    *     using EnumerableSet for EnumerableSet.AddressSet;\r\n    *\r\n    *     // Declare a set state variable\r\n    *     EnumerableSet.AddressSet private mySet;\r\n    * }\r\n    * ```\r\n    *\r\n    * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n    * (`UintSet`) are supported.\r\n    */\r\n    \r\n    library EnumerableSet {\r\n        \r\n\r\n        struct Set {\r\n        \r\n            bytes32[] _values;\r\n    \r\n            mapping (bytes32 => uint256) _indexes;\r\n        }\r\n    \r\n        function _add(Set storage set, bytes32 value) private returns (bool) {\r\n            if (!_contains(set, value)) {\r\n                set._values.push(value);\r\n                \r\n                set._indexes[value] = set._values.length;\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /**\r\n        * @dev Removes a value from a set. O(1).\r\n        *\r\n        * Returns true if the value was removed from the set, that is if it was\r\n        * present.\r\n        */\r\n        function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n            // We read and store the value's index to prevent multiple reads from the same storage slot\r\n            uint256 valueIndex = set._indexes[value];\r\n\r\n            if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n                \r\n\r\n                uint256 toDeleteIndex = valueIndex - 1;\r\n                uint256 lastIndex = set._values.length - 1;\r\n\r\n            \r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n                set._values.pop();\r\n\r\n                delete set._indexes[value];\r\n\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        \r\n        function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n            return set._indexes[value] != 0;\r\n        }\r\n\r\n        \r\n        function _length(Set storage set) private view returns (uint256) {\r\n            return set._values.length;\r\n        }\r\n\r\n    \r\n        function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n            require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n            return set._values[index];\r\n        }\r\n\r\n        \r\n\r\n        struct AddressSet {\r\n            Set _inner;\r\n        }\r\n    \r\n        function add(AddressSet storage set, address value) internal returns (bool) {\r\n            return _add(set._inner, bytes32(uint256(value)));\r\n        }\r\n\r\n    \r\n        function remove(AddressSet storage set, address value) internal returns (bool) {\r\n            return _remove(set._inner, bytes32(uint256(value)));\r\n        }\r\n\r\n        \r\n        function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n            return _contains(set._inner, bytes32(uint256(value)));\r\n        }\r\n\r\n    \r\n        function length(AddressSet storage set) internal view returns (uint256) {\r\n            return _length(set._inner);\r\n        }\r\n    \r\n        function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n            return address(uint256(_at(set._inner, index)));\r\n        }\r\n\r\n\r\n    \r\n        struct UintSet {\r\n            Set _inner;\r\n        }\r\n\r\n        \r\n        function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n            return _add(set._inner, bytes32(value));\r\n        }\r\n\r\n    \r\n        function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n            return _remove(set._inner, bytes32(value));\r\n        }\r\n\r\n        \r\n        function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n            return _contains(set._inner, bytes32(value));\r\n        }\r\n\r\n        \r\n        function length(UintSet storage set) internal view returns (uint256) {\r\n            return _length(set._inner);\r\n        }\r\n\r\n    \r\n        function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n            return uint256(_at(set._inner, index));\r\n        }\r\n    }\r\n    \r\n    contract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    \r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n    }\r\n\r\n\r\n    interface Token {\r\n        function transferFrom(address, address, uint) external returns (bool);\r\n        function transfer(address, uint) external returns (bool);\r\n        function balanceOf(address) external view returns (uint256);\r\n    }\r\n\r\n    contract PredictzPoints is Ownable {\r\n        using SafeMath for uint;\r\n        using EnumerableSet for EnumerableSet.AddressSet;\r\n        \r\n\r\n        // PRDZ token contract address\r\n        address public constant tokenAddress = 0x4e085036A1b732cBe4FfB1C12ddfDd87E7C3664d;\r\n        \r\n\r\n        mapping(address => uint) public unclaimed;\r\n        \r\n        mapping(address => uint) public claimed;\r\n        \r\n        event RewardAdded(address indexed user,uint amount ,uint time);\r\n            \r\n        event RewardClaimed(address indexed user, uint amount ,uint time );\r\n    \r\n\r\n        \r\n        function addCashback(address _user , uint _amount ) public  onlyOwner returns (bool)   {\r\n\r\n                    unclaimed[_user] =  unclaimed[_user].add(_amount) ;\r\n                   \r\n                    emit RewardAdded(_user,_amount,now);\r\n                               \r\n                    return true ;\r\n\r\n        }\r\n\r\n\r\n        function addCashbackBulk(address[] memory _users, uint[] memory _amount) public onlyOwner {\r\n      \r\n            for(uint i = 0; i < _users.length; i++) {\r\n                address _user = _users[i];\r\n                uint _reward = _amount[i];\r\n                unclaimed[_user] =  unclaimed[_user].add(_reward) ;\r\n                emit RewardAdded(_user,_reward,now);\r\n            }\r\n         \r\n        }\r\n        \r\n        \r\n        function claim() public returns (uint)  {\r\n            \r\n            require(unclaimed[msg.sender] > 0, \"Cannot claim 0 or less\");\r\n\r\n            uint amount = unclaimed[msg.sender] ;\r\n           \r\n            Token(tokenAddress).transfer(msg.sender, amount);\r\n           \r\n          \r\n            emit RewardClaimed(msg.sender,unclaimed[msg.sender],now);\r\n            \r\n            claimed[msg.sender] = claimed[msg.sender].add(unclaimed[msg.sender]) ;\r\n            \r\n            unclaimed[msg.sender] =  0 ;\r\n\r\n        }\r\n          \r\n\r\n        function getUnclaimedCashback(address _user) view public returns ( uint  ) {\r\n                        return unclaimed[_user];\r\n        }\r\n        \r\n        function getClaimedCashback(address _user) view public returns ( uint  ) {\r\n                        return claimed[_user];\r\n        }\r\n          \r\n \r\n        function addContractBalance(uint amount) public onlyOwner{\r\n            require(Token(tokenAddress).transferFrom(msg.sender, address(this), amount), \"Cannot add balance!\");\r\n            \r\n        }\r\n        \r\n        function withdrawBalance() public onlyOwner {\r\n           msg.sender.transfer(address(this).balance);\r\n            \r\n        } \r\n        \r\n        function withdrawToken() public onlyOwner {\r\n            require(Token(tokenAddress).transfer(msg.sender, Token(tokenAddress).balanceOf(address(this))), \"Cannot withdraw balance!\");\r\n            \r\n        } \r\n \r\n    \r\n\r\n    }", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addCashback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"addCashbackBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addContractBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getClaimedCashback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUnclaimedCashback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unclaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PredictzPoints", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://89de1eb2d9af755395f0d6f95e9e7b495d03c20f4321c996ab0f471d61a07df0"}