{"SourceCode": "# @version 0.3.7\r\n\"\"\"\r\n@title StableSwap\r\n@author Curve.Fi\r\n@license Copyright (c) Curve.Fi, 2020-2021 - all rights reserved\r\n@notice 2 coin pool implementation with no lending\r\n@dev ERC20 support for return True/revert, return True/False, return None\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\ninterface Factory:\r\n    def convert_fees() -> bool: nonpayable\r\n    def get_fee_receiver(_pool: address) -> address: view\r\n    def admin() -> address: view\r\n\r\ninterface ERC1271:\r\n    def isValidSignature(_hash: bytes32, _signature: Bytes[65]) -> bytes32: view\r\n\r\n\r\nevent Transfer:\r\n    sender: indexed(address)\r\n    receiver: indexed(address)\r\n    value: uint256\r\n\r\nevent Approval:\r\n    owner: indexed(address)\r\n    spender: indexed(address)\r\n    value: uint256\r\n\r\nevent TokenExchange:\r\n    buyer: indexed(address)\r\n    sold_id: int128\r\n    tokens_sold: uint256\r\n    bought_id: int128\r\n    tokens_bought: uint256\r\n\r\nevent AddLiquidity:\r\n    provider: indexed(address)\r\n    token_amounts: uint256[N_COINS]\r\n    fees: uint256[N_COINS]\r\n    invariant: uint256\r\n    token_supply: uint256\r\n\r\nevent RemoveLiquidity:\r\n    provider: indexed(address)\r\n    token_amounts: uint256[N_COINS]\r\n    fees: uint256[N_COINS]\r\n    token_supply: uint256\r\n\r\nevent RemoveLiquidityOne:\r\n    provider: indexed(address)\r\n    token_amount: uint256\r\n    coin_amount: uint256\r\n    token_supply: uint256\r\n\r\nevent RemoveLiquidityImbalance:\r\n    provider: indexed(address)\r\n    token_amounts: uint256[N_COINS]\r\n    fees: uint256[N_COINS]\r\n    invariant: uint256\r\n    token_supply: uint256\r\n\r\nevent RampA:\r\n    old_A: uint256\r\n    new_A: uint256\r\n    initial_time: uint256\r\n    future_time: uint256\r\n\r\nevent StopRampA:\r\n    A: uint256\r\n    t: uint256\r\n\r\nevent CommitNewFee:\r\n    new_fee: uint256\r\n\r\nevent ApplyNewFee:\r\n    fee: uint256\r\n\r\n\r\nN_COINS: constant(uint256) = 2\r\nN_COINS_128: constant(int128) = 2\r\nPRECISION: constant(uint256) = 10 ** 18\r\nADMIN_ACTIONS_DEADLINE_DT: constant(uint256) = 86400 * 3\r\n\r\nFEE_DENOMINATOR: constant(uint256) = 10 ** 10\r\nADMIN_FEE: constant(uint256) = 5000000000\r\n\r\nA_PRECISION: constant(uint256) = 100\r\nMAX_FEE: constant(uint256) = 5 * 10 ** 9\r\nMAX_A: constant(uint256) = 10 ** 6\r\nMAX_A_CHANGE: constant(uint256) = 10\r\nMIN_RAMP_TIME: constant(uint256) = 86400\r\n\r\nEIP712_TYPEHASH: constant(bytes32) = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")\r\nPERMIT_TYPEHASH: constant(bytes32) = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\")\r\n\r\n# keccak256(\"isValidSignature(bytes32,bytes)\")[:4] << 224\r\nERC1271_MAGIC_VAL: constant(bytes32) = 0x1626ba7e00000000000000000000000000000000000000000000000000000000\r\nVERSION: constant(String[8]) = \"v6.0.0\"\r\n\r\n\r\nfactory: address\r\n\r\ncoins: public(address[N_COINS])\r\nbalances: public(uint256[N_COINS])\r\nfee: public(uint256)  # fee * 1e10\r\nfuture_fee: public(uint256)\r\nadmin_action_deadline: public(uint256)\r\n\r\ninitial_A: public(uint256)\r\nfuture_A: public(uint256)\r\ninitial_A_time: public(uint256)\r\nfuture_A_time: public(uint256)\r\n\r\nrate_multipliers: uint256[N_COINS]\r\n\r\nname: public(String[64])\r\nsymbol: public(String[32])\r\n\r\nbalanceOf: public(HashMap[address, uint256])\r\nallowance: public(HashMap[address, HashMap[address, uint256]])\r\ntotalSupply: public(uint256)\r\n\r\nDOMAIN_SEPARATOR: public(bytes32)\r\nnonces: public(HashMap[address, uint256])\r\n\r\nlast_prices_packed: uint256  #  [last_price, ma_price]\r\nma_exp_time: public(uint256)\r\nma_last_time: public(uint256)\r\n\r\n\r\n@external\r\ndef __init__():\r\n    # we do this to prevent the implementation contract from being used as a pool\r\n    self.factory = 0x0000000000000000000000000000000000000001\r\n    assert N_COINS == 2\r\n\r\n\r\n@external\r\ndef initialize(\r\n    _name: String[32],\r\n    _symbol: String[10],\r\n    _coins: address[4],\r\n    _rate_multipliers: uint256[4],\r\n    _A: uint256,\r\n    _fee: uint256,\r\n):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _name Name of the new pool\r\n    @param _symbol Token symbol\r\n    @param _coins List of all ERC20 conract addresses of coins\r\n    @param _rate_multipliers List of number of decimals in coins\r\n    @param _A Amplification coefficient multiplied by n ** (n - 1)\r\n    @param _fee Fee to charge for exchanges\r\n    \"\"\"\r\n    # check if factory was already set to prevent initializing contract twice\r\n    assert self.factory == empty(address)\r\n\r\n    for i in range(N_COINS):\r\n        coin: address = _coins[i]\r\n        if coin == empty(address):\r\n            break\r\n        self.coins[i] = coin\r\n        self.rate_multipliers[i] = _rate_multipliers[i]\r\n\r\n    A: uint256 = _A * A_PRECISION\r\n    self.initial_A = A\r\n    self.future_A = A\r\n    self.fee = _fee\r\n    self.factory = msg.sender\r\n\r\n    self.ma_exp_time = 866  # = 600 / ln(2)\r\n    self.last_prices_packed = self.pack_prices(10**18, 10**18)\r\n    self.ma_last_time = block.timestamp\r\n\r\n    name: String[64] = concat(\"Curve.fi Factory Plain Pool: \", _name)\r\n    self.name = name\r\n    self.symbol = concat(_symbol, \"-f\")\r\n\r\n    self.DOMAIN_SEPARATOR = keccak256(\r\n        _abi_encode(EIP712_TYPEHASH, keccak256(name), keccak256(VERSION), chain.id, self)\r\n    )\r\n\r\n    # fire a transfer event so block explorers identify the contract as an ERC20\r\n    log Transfer(empty(address), self, 0)\r\n\r\n\r\n### ERC20 Functionality ###\r\n\r\n@view\r\n@external\r\ndef decimals() -> uint8:\r\n    \"\"\"\r\n    @notice Get the number of decimals for this token\r\n    @dev Implemented as a view method to reduce gas costs\r\n    @return uint8 decimal places\r\n    \"\"\"\r\n    return 18\r\n\r\n\r\n@internal\r\ndef _transfer(_from: address, _to: address, _value: uint256):\r\n    # # NOTE: vyper does not allow underflows\r\n    # #       so the following subtraction would revert on insufficient balance\r\n    self.balanceOf[_from] -= _value\r\n    self.balanceOf[_to] += _value\r\n\r\n    log Transfer(_from, _to, _value)\r\n\r\n\r\n@external\r\ndef transfer(_to : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n    @dev Transfer token for a specified address\r\n    @param _to The address to transfer to.\r\n    @param _value The amount to be transferred.\r\n    \"\"\"\r\n    self._transfer(msg.sender, _to, _value)\r\n    return True\r\n\r\n\r\n@external\r\ndef transferFrom(_from : address, _to : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n     @dev Transfer tokens from one address to another.\r\n     @param _from address The address which you want to send tokens from\r\n     @param _to address The address which you want to transfer to\r\n     @param _value uint256 the amount of tokens to be transferred\r\n    \"\"\"\r\n    self._transfer(_from, _to, _value)\r\n\r\n    _allowance: uint256 = self.allowance[_from][msg.sender]\r\n    if _allowance != max_value(uint256):\r\n        self.allowance[_from][msg.sender] = _allowance - _value\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef approve(_spender : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n    @notice Approve the passed address to transfer the specified amount of\r\n            tokens on behalf of msg.sender\r\n    @dev Beware that changing an allowance via this method brings the risk that\r\n         someone may use both the old and new allowance by unfortunate transaction\r\n         ordering: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    @param _spender The address which will transfer the funds\r\n    @param _value The amount of tokens that may be transferred\r\n    @return bool success\r\n    \"\"\"\r\n    self.allowance[msg.sender][_spender] = _value\r\n\r\n    log Approval(msg.sender, _spender, _value)\r\n    return True\r\n\r\n\r\n@external\r\ndef permit(\r\n    _owner: address,\r\n    _spender: address,\r\n    _value: uint256,\r\n    _deadline: uint256,\r\n    _v: uint8,\r\n    _r: bytes32,\r\n    _s: bytes32\r\n) -> bool:\r\n    \"\"\"\r\n    @notice Approves spender by owner's signature to expend owner's tokens.\r\n        See https://eips.ethereum.org/EIPS/eip-2612.\r\n    @dev Inspired by https://github.com/yearn/yearn-vaults/blob/main/contracts/Vault.vy#L753-L793\r\n    @dev Supports smart contract wallets which implement ERC1271\r\n        https://eips.ethereum.org/EIPS/eip-1271\r\n    @param _owner The address which is a source of funds and has signed the Permit.\r\n    @param _spender The address which is allowed to spend the funds.\r\n    @param _value The amount of tokens to be spent.\r\n    @param _deadline The timestamp after which the Permit is no longer valid.\r\n    @param _v The bytes[64] of the valid secp256k1 signature of permit by owner\r\n    @param _r The bytes[0:32] of the valid secp256k1 signature of permit by owner\r\n    @param _s The bytes[32:64] of the valid secp256k1 signature of permit by owner\r\n    @return True, if transaction completes successfully\r\n    \"\"\"\r\n    assert _owner != empty(address)\r\n    assert block.timestamp <= _deadline\r\n\r\n    nonce: uint256 = self.nonces[_owner]\r\n    digest: bytes32 = keccak256(\r\n        concat(\r\n            b\"\\x19\\x01\",\r\n            self.DOMAIN_SEPARATOR,\r\n            keccak256(_abi_encode(PERMIT_TYPEHASH, _owner, _spender, _value, nonce, _deadline))\r\n        )\r\n    )\r\n\r\n    if _owner.is_contract:\r\n        sig: Bytes[65] = concat(_abi_encode(_r, _s), slice(convert(_v, bytes32), 31, 1))\r\n        # reentrancy not a concern since this is a staticcall\r\n        assert ERC1271(_owner).isValidSignature(digest, sig) == ERC1271_MAGIC_VAL\r\n    else:\r\n        assert ecrecover(digest, convert(_v, uint256), convert(_r, uint256), convert(_s, uint256)) == _owner\r\n\r\n    self.allowance[_owner][_spender] = _value\r\n    self.nonces[_owner] = nonce + 1\r\n\r\n    log Approval(_owner, _spender, _value)\r\n    return True\r\n\r\n\r\n### StableSwap Functionality ###\r\n\r\n@pure\r\n@internal\r\ndef pack_prices(p1: uint256, p2: uint256) -> uint256:\r\n    assert p1 < 2**128\r\n    assert p2 < 2**128\r\n    return p1 | shift(p2, 128)\r\n\r\n\r\n@view\r\n@external\r\ndef last_price() -> uint256:\r\n    return self.last_prices_packed & (2**128 - 1)\r\n\r\n\r\n@view\r\n@external\r\ndef ema_price() -> uint256:\r\n    return shift(self.last_prices_packed, -128)\r\n\r\n\r\n@view\r\n@external\r\ndef get_balances() -> uint256[N_COINS]:\r\n    return self.balances\r\n\r\n\r\n@view\r\n@internal\r\ndef _A() -> uint256:\r\n    \"\"\"\r\n    Handle ramping A up or down\r\n    \"\"\"\r\n    t1: uint256 = self.future_A_time\r\n    A1: uint256 = self.future_A\r\n\r\n    if block.timestamp < t1:\r\n        A0: uint256 = self.initial_A\r\n        t0: uint256 = self.initial_A_time\r\n        # Expressions in uint256 cannot have negative numbers, thus \"if\"\r\n        if A1 > A0:\r\n            return A0 + (A1 - A0) * (block.timestamp - t0) / (t1 - t0)\r\n        else:\r\n            return A0 - (A0 - A1) * (block.timestamp - t0) / (t1 - t0)\r\n\r\n    else:  # when t1 == 0 or block.timestamp >= t1\r\n        return A1\r\n\r\n\r\n@view\r\n@external\r\ndef admin_fee() -> uint256:\r\n    return ADMIN_FEE\r\n\r\n\r\n@view\r\n@external\r\ndef A() -> uint256:\r\n    return self._A() / A_PRECISION\r\n\r\n\r\n@view\r\n@external\r\ndef A_precise() -> uint256:\r\n    return self._A()\r\n\r\n\r\n@pure\r\n@internal\r\ndef _xp_mem(_rates: uint256[N_COINS], _balances: uint256[N_COINS]) -> uint256[N_COINS]:\r\n    result: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    for i in range(N_COINS):\r\n        result[i] = _rates[i] * _balances[i] / PRECISION\r\n    return result\r\n\r\n\r\n@pure\r\n@internal\r\ndef get_D(_xp: uint256[N_COINS], _amp: uint256) -> uint256:\r\n    \"\"\"\r\n    D invariant calculation in non-overflowing integer operations\r\n    iteratively\r\n\r\n    A * sum(x_i) * n**n + D = A * D * n**n + D**(n+1) / (n**n * prod(x_i))\r\n\r\n    Converging solution:\r\n    D[j+1] = (A * n**n * sum(x_i) - D[j]**(n+1) / (n**n prod(x_i))) / (A * n**n - 1)\r\n    \"\"\"\r\n    S: uint256 = 0\r\n    for x in _xp:\r\n        S += x\r\n    if S == 0:\r\n        return 0\r\n\r\n    D: uint256 = S\r\n    Ann: uint256 = _amp * N_COINS\r\n    for i in range(255):\r\n        D_P: uint256 = D * D / _xp[0] * D / _xp[1] / N_COINS**N_COINS\r\n        Dprev: uint256 = D\r\n        D = (Ann * S / A_PRECISION + D_P * N_COINS) * D / ((Ann - A_PRECISION) * D / A_PRECISION + (N_COINS + 1) * D_P)\r\n        # Equality with the precision of 1\r\n        if D > Dprev:\r\n            if D - Dprev <= 1:\r\n                return D\r\n        else:\r\n            if Dprev - D <= 1:\r\n                return D\r\n    # convergence typically occurs in 4 rounds or less, this should be unreachable!\r\n    # if it does happen the pool is borked and LPs can withdraw via `remove_liquidity`\r\n    raise\r\n\r\n\r\n@view\r\n@internal\r\ndef get_D_mem(_rates: uint256[N_COINS], _balances: uint256[N_COINS], _amp: uint256) -> uint256:\r\n    xp: uint256[N_COINS] = self._xp_mem(_rates, _balances)\r\n    return self.get_D(xp, _amp)\r\n\r\n\r\n@internal\r\n@view\r\ndef _get_p(xp: uint256[N_COINS], amp: uint256, D: uint256) -> uint256:\r\n    # dx_0 / dx_1 only, however can have any number of coins in pool\r\n    ANN: uint256 = amp * N_COINS\r\n    Dr: uint256 = D / (N_COINS**N_COINS)\r\n    for i in range(N_COINS):\r\n        Dr = Dr * D / xp[i]\r\n    return 10**18 * (ANN * xp[0] / A_PRECISION + Dr * xp[0] / xp[1]) / (ANN * xp[0] / A_PRECISION + Dr)\r\n\r\n\r\n@external\r\n@view\r\ndef get_p() -> uint256:\r\n    amp: uint256 = self._A()\r\n    xp: uint256[N_COINS] = self._xp_mem(self.rate_multipliers, self.balances)\r\n    D: uint256 = self.get_D(xp, amp)\r\n    return self._get_p(xp, amp, D)\r\n\r\n\r\n@internal\r\n@view\r\ndef exp(power: int256) -> uint256:\r\n    if power <= -42139678854452767551:\r\n        return 0\r\n\r\n    if power >= 135305999368893231589:\r\n        raise \"exp overflow\"\r\n\r\n    x: int256 = unsafe_div(unsafe_mul(power, 2**96), 10**18)\r\n\r\n    k: int256 = unsafe_div(\r\n        unsafe_add(\r\n            unsafe_div(unsafe_mul(x, 2**96), 54916777467707473351141471128),\r\n            2**95),\r\n        2**96)\r\n    x = unsafe_sub(x, unsafe_mul(k, 54916777467707473351141471128))\r\n\r\n    y: int256 = unsafe_add(x, 1346386616545796478920950773328)\r\n    y = unsafe_add(unsafe_div(unsafe_mul(y, x), 2**96), 57155421227552351082224309758442)\r\n    p: int256 = unsafe_sub(unsafe_add(y, x), 94201549194550492254356042504812)\r\n    p = unsafe_add(unsafe_div(unsafe_mul(p, y), 2**96), 28719021644029726153956944680412240)\r\n    p = unsafe_add(unsafe_mul(p, x), (4385272521454847904659076985693276 * 2**96))\r\n\r\n    q: int256 = x - 2855989394907223263936484059900\r\n    q = unsafe_add(unsafe_div(unsafe_mul(q, x), 2**96), 50020603652535783019961831881945)\r\n    q = unsafe_sub(unsafe_div(unsafe_mul(q, x), 2**96), 533845033583426703283633433725380)\r\n    q = unsafe_add(unsafe_div(unsafe_mul(q, x), 2**96), 3604857256930695427073651918091429)\r\n    q = unsafe_sub(unsafe_div(unsafe_mul(q, x), 2**96), 14423608567350463180887372962807573)\r\n    q = unsafe_add(unsafe_div(unsafe_mul(q, x), 2**96), 26449188498355588339934803723976023)\r\n\r\n    return shift(\r\n        unsafe_mul(convert(unsafe_div(p, q), uint256), 3822833074963236453042738258902158003155416615667),\r\n        unsafe_sub(k, 195))\r\n\r\n\r\n@internal\r\n@view\r\ndef _ma_price() -> uint256:\r\n    ma_last_time: uint256 = self.ma_last_time\r\n\r\n    pp: uint256 = self.last_prices_packed\r\n    last_price: uint256 = pp & (2**128 - 1)\r\n    last_ema_price: uint256 = shift(pp, -128)\r\n\r\n    if ma_last_time < block.timestamp:\r\n        alpha: uint256 = self.exp(- convert((block.timestamp - ma_last_time) * 10**18 / self.ma_exp_time, int256))\r\n        return (last_price * (10**18 - alpha) + last_ema_price * alpha) / 10**18\r\n\r\n    else:\r\n        return last_ema_price\r\n\r\n\r\n@external\r\n@view\r\n@nonreentrant('lock')\r\ndef price_oracle() -> uint256:\r\n    return self._ma_price()\r\n\r\n\r\n@internal\r\ndef save_p_from_price(last_price: uint256):\r\n    \"\"\"\r\n    Saves current price and its EMA\r\n    \"\"\"\r\n    if last_price != 0:\r\n        self.last_prices_packed = self.pack_prices(last_price, self._ma_price())\r\n        if self.ma_last_time < block.timestamp:\r\n            self.ma_last_time = block.timestamp\r\n\r\n\r\n@internal\r\ndef save_p(xp: uint256[N_COINS], amp: uint256, D: uint256):\r\n    \"\"\"\r\n    Saves current price and its EMA\r\n    \"\"\"\r\n    self.save_p_from_price(self._get_p(xp, amp, D))\r\n\r\n\r\n@view\r\n@external\r\n@nonreentrant('lock')\r\ndef get_virtual_price() -> uint256:\r\n    \"\"\"\r\n    @notice The current virtual price of the pool LP token\r\n    @dev Useful for calculating profits\r\n    @return LP token virtual price normalized to 1e18\r\n    \"\"\"\r\n    amp: uint256 = self._A()\r\n    xp: uint256[N_COINS] = self._xp_mem(self.rate_multipliers, self.balances)\r\n    D: uint256 = self.get_D(xp, amp)\r\n    # D is in the units similar to DAI (e.g. converted to precision 1e18)\r\n    # When balanced, D = n * x_u - total virtual value of the portfolio\r\n    return D * PRECISION / self.totalSupply\r\n\r\n\r\n@view\r\n@external\r\ndef calc_token_amount(_amounts: uint256[N_COINS], _is_deposit: bool) -> uint256:\r\n    \"\"\"\r\n    @notice Calculate addition or reduction in token supply from a deposit or withdrawal\r\n    @dev This calculation accounts for slippage, but not fees.\r\n         Needed to prevent front-running, not for precise calculations!\r\n    @param _amounts Amount of each coin being deposited\r\n    @param _is_deposit set True for deposits, False for withdrawals\r\n    @return Expected amount of LP tokens received\r\n    \"\"\"\r\n    amp: uint256 = self._A()\r\n    balances: uint256[N_COINS] = self.balances\r\n\r\n    D0: uint256 = self.get_D_mem(self.rate_multipliers, balances, amp)\r\n    for i in range(N_COINS):\r\n        amount: uint256 = _amounts[i]\r\n        if _is_deposit:\r\n            balances[i] += amount\r\n        else:\r\n            balances[i] -= amount\r\n    D1: uint256 = self.get_D_mem(self.rate_multipliers, balances, amp)\r\n    diff: uint256 = 0\r\n    if _is_deposit:\r\n        diff = D1 - D0\r\n    else:\r\n        diff = D0 - D1\r\n    return diff * self.totalSupply / D0\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef add_liquidity(\r\n    _amounts: uint256[N_COINS],\r\n    _min_mint_amount: uint256,\r\n    _receiver: address = msg.sender\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Deposit coins into the pool\r\n    @param _amounts List of amounts of coins to deposit\r\n    @param _min_mint_amount Minimum amount of LP tokens to mint from the deposit\r\n    @param _receiver Address that owns the minted LP tokens\r\n    @return Amount of LP tokens received by depositing\r\n    \"\"\"\r\n    amp: uint256 = self._A()\r\n    old_balances: uint256[N_COINS] = self.balances\r\n    rates: uint256[N_COINS] = self.rate_multipliers\r\n\r\n    # Initial invariant\r\n    D0: uint256 = self.get_D_mem(rates, old_balances, amp)\r\n\r\n    total_supply: uint256 = self.totalSupply\r\n    new_balances: uint256[N_COINS] = old_balances\r\n    for i in range(N_COINS):\r\n        amount: uint256 = _amounts[i]\r\n        if amount > 0:\r\n            assert ERC20(self.coins[i]).transferFrom(msg.sender, self, amount, default_return_value=True)  # dev: failed transfer\r\n            new_balances[i] += amount\r\n        else:\r\n            assert total_supply != 0  # dev: initial deposit requires all coins\r\n\r\n    # Invariant after change\r\n    D1: uint256 = self.get_D_mem(rates, new_balances, amp)\r\n    assert D1 > D0\r\n\r\n    # We need to recalculate the invariant accounting for fees\r\n    # to calculate fair user's share\r\n    fees: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    mint_amount: uint256 = 0\r\n\r\n    if total_supply > 0:\r\n        # Only account for fees if we are not the first to deposit\r\n        base_fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n        for i in range(N_COINS):\r\n            ideal_balance: uint256 = D1 * old_balances[i] / D0\r\n            difference: uint256 = 0\r\n            new_balance: uint256 = new_balances[i]\r\n            if ideal_balance > new_balance:\r\n                difference = ideal_balance - new_balance\r\n            else:\r\n                difference = new_balance - ideal_balance\r\n            fees[i] = base_fee * difference / FEE_DENOMINATOR\r\n            self.balances[i] = new_balance - (fees[i] * ADMIN_FEE / FEE_DENOMINATOR)\r\n            new_balances[i] -= fees[i]\r\n        xp: uint256[N_COINS] = self._xp_mem(rates, new_balances)\r\n        D2: uint256 = self.get_D(xp, amp)\r\n        mint_amount = total_supply * (D2 - D0) / D0\r\n        self.save_p(xp, amp, D2)\r\n\r\n    else:\r\n        self.balances = new_balances\r\n        mint_amount = D1  # Take the dust if there was any\r\n\r\n    assert mint_amount >= _min_mint_amount, \"Slippage screwed you\"\r\n\r\n    # Mint pool tokens\r\n    total_supply += mint_amount\r\n    self.balanceOf[_receiver] += mint_amount\r\n    self.totalSupply = total_supply\r\n    log Transfer(empty(address), _receiver, mint_amount)\r\n\r\n    log AddLiquidity(msg.sender, _amounts, fees, D1, total_supply)\r\n\r\n    return mint_amount\r\n\r\n\r\n@view\r\n@internal\r\ndef get_y(i: int128, j: int128, x: uint256, xp: uint256[N_COINS], _amp: uint256, _D: uint256) -> uint256:\r\n    \"\"\"\r\n    Calculate x[j] if one makes x[i] = x\r\n\r\n    Done by solving quadratic equation iteratively.\r\n    x_1**2 + x_1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\r\n    x_1**2 + b*x_1 = c\r\n\r\n    x_1 = (x_1**2 + c) / (2*x_1 + b)\r\n    \"\"\"\r\n    # x in the input is converted to the same price/precision\r\n\r\n    assert i != j       # dev: same coin\r\n    assert j >= 0       # dev: j below zero\r\n    assert j < N_COINS_128  # dev: j above N_COINS\r\n\r\n    # should be unreachable, but good for safety\r\n    assert i >= 0\r\n    assert i < N_COINS_128\r\n\r\n    amp: uint256 = _amp\r\n    D: uint256 = _D\r\n    if _D == 0:\r\n        amp = self._A()\r\n        D = self.get_D(xp, amp)\r\n    S_: uint256 = 0\r\n    _x: uint256 = 0\r\n    y_prev: uint256 = 0\r\n    c: uint256 = D\r\n    Ann: uint256 = amp * N_COINS\r\n\r\n    for _i in range(N_COINS_128):\r\n        if _i == i:\r\n            _x = x\r\n        elif _i != j:\r\n            _x = xp[_i]\r\n        else:\r\n            continue\r\n        S_ += _x\r\n        c = c * D / (_x * N_COINS)\r\n\r\n    c = c * D * A_PRECISION / (Ann * N_COINS)\r\n    b: uint256 = S_ + D * A_PRECISION / Ann  # - D\r\n    y: uint256 = D\r\n\r\n    for _i in range(255):\r\n        y_prev = y\r\n        y = (y*y + c) / (2 * y + b - D)\r\n        # Equality with the precision of 1\r\n        if y > y_prev:\r\n            if y - y_prev <= 1:\r\n                return y\r\n        else:\r\n            if y_prev - y <= 1:\r\n                return y\r\n    raise\r\n\r\n\r\n@view\r\n@external\r\ndef get_dy(i: int128, j: int128, dx: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Calculate the current output dy given input dx\r\n    @dev Index values can be found via the `coins` public getter method\r\n    @param i Index value for the coin to send\r\n    @param j Index valie of the coin to recieve\r\n    @param dx Amount of `i` being exchanged\r\n    @return Amount of `j` predicted\r\n    \"\"\"\r\n    rates: uint256[N_COINS] = self.rate_multipliers\r\n    xp: uint256[N_COINS] = self._xp_mem(rates, self.balances)\r\n\r\n    x: uint256 = xp[i] + (dx * rates[i] / PRECISION)\r\n    y: uint256 = self.get_y(i, j, x, xp, 0, 0)\r\n    dy: uint256 = xp[j] - y - 1\r\n    fee: uint256 = self.fee * dy / FEE_DENOMINATOR\r\n    return (dy - fee) * PRECISION / rates[j]\r\n\r\n\r\n# get_dx XXX\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef exchange(\r\n    i: int128,\r\n    j: int128,\r\n    _dx: uint256,\r\n    _min_dy: uint256,\r\n    _receiver: address = msg.sender,\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Perform an exchange between two coins\r\n    @dev Index values can be found via the `coins` public getter method\r\n    @param i Index value for the coin to send\r\n    @param j Index valie of the coin to recieve\r\n    @param _dx Amount of `i` being exchanged\r\n    @param _min_dy Minimum amount of `j` to receive\r\n    @return Actual amount of `j` received\r\n    \"\"\"\r\n    rates: uint256[N_COINS] = self.rate_multipliers\r\n    old_balances: uint256[N_COINS] = self.balances\r\n    xp: uint256[N_COINS] = self._xp_mem(rates, old_balances)\r\n\r\n    x: uint256 = xp[i] + _dx * rates[i] / PRECISION\r\n\r\n    amp: uint256 = self._A()\r\n    D: uint256 = self.get_D(xp, amp)\r\n    y: uint256 = self.get_y(i, j, x, xp, amp, D)\r\n\r\n    dy: uint256 = xp[j] - y - 1  # -1 just in case there were some rounding errors\r\n    dy_fee: uint256 = dy * self.fee / FEE_DENOMINATOR\r\n\r\n    # Convert all to real units\r\n    dy = (dy - dy_fee) * PRECISION / rates[j]\r\n    assert dy >= _min_dy, \"Exchange resulted in fewer coins than expected\"\r\n\r\n    # xp is not used anymore, so we reuse it for price calc\r\n    xp[i] = x\r\n    xp[j] = y\r\n    # D is not changed because we did not apply a fee\r\n    self.save_p(xp, amp, D)\r\n\r\n    dy_admin_fee: uint256 = dy_fee * ADMIN_FEE / FEE_DENOMINATOR\r\n    dy_admin_fee = dy_admin_fee * PRECISION / rates[j]\r\n\r\n    # Change balances exactly in same way as we change actual ERC20 coin amounts\r\n    self.balances[i] = old_balances[i] + _dx\r\n    # When rounding errors happen, we undercharge admin fee in favor of LP\r\n    self.balances[j] = old_balances[j] - dy - dy_admin_fee\r\n\r\n    assert ERC20(self.coins[i]).transferFrom(msg.sender, self, _dx, default_return_value=True)  # dev: failed transfer\r\n    assert ERC20(self.coins[j]).transfer(_receiver, dy, default_return_value=True)  # dev: failed transfer\r\n\r\n    log TokenExchange(msg.sender, i, _dx, j, dy)\r\n\r\n    return dy\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef remove_liquidity(\r\n    _burn_amount: uint256,\r\n    _min_amounts: uint256[N_COINS],\r\n    _receiver: address = msg.sender\r\n) -> uint256[N_COINS]:\r\n    \"\"\"\r\n    @notice Withdraw coins from the pool\r\n    @dev Withdrawal amounts are based on current deposit ratios\r\n    @param _burn_amount Quantity of LP tokens to burn in the withdrawal\r\n    @param _min_amounts Minimum amounts of underlying coins to receive\r\n    @param _receiver Address that receives the withdrawn coins\r\n    @return List of amounts of coins that were withdrawn\r\n    \"\"\"\r\n    total_supply: uint256 = self.totalSupply\r\n    amounts: uint256[N_COINS] = empty(uint256[N_COINS])\r\n\r\n    for i in range(N_COINS):\r\n        old_balance: uint256 = self.balances[i]\r\n        value: uint256 = old_balance * _burn_amount / total_supply\r\n        assert value >= _min_amounts[i], \"Withdrawal resulted in fewer coins than expected\"\r\n        self.balances[i] = old_balance - value\r\n        amounts[i] = value\r\n        assert ERC20(self.coins[i]).transfer(_receiver, value, default_return_value=True)  # dev: failed transfer\r\n\r\n    total_supply -= _burn_amount\r\n    self.balanceOf[msg.sender] -= _burn_amount\r\n    self.totalSupply = total_supply\r\n    log Transfer(msg.sender, empty(address), _burn_amount)\r\n\r\n    log RemoveLiquidity(msg.sender, amounts, empty(uint256[N_COINS]), total_supply)\r\n\r\n    return amounts\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef remove_liquidity_imbalance(\r\n    _amounts: uint256[N_COINS],\r\n    _max_burn_amount: uint256,\r\n    _receiver: address = msg.sender\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Withdraw coins from the pool in an imbalanced amount\r\n    @param _amounts List of amounts of underlying coins to withdraw\r\n    @param _max_burn_amount Maximum amount of LP token to burn in the withdrawal\r\n    @param _receiver Address that receives the withdrawn coins\r\n    @return Actual amount of the LP token burned in the withdrawal\r\n    \"\"\"\r\n    amp: uint256 = self._A()\r\n    rates: uint256[N_COINS] = self.rate_multipliers\r\n    old_balances: uint256[N_COINS] = self.balances\r\n    D0: uint256 = self.get_D_mem(rates, old_balances, amp)\r\n\r\n    new_balances: uint256[N_COINS] = old_balances\r\n    for i in range(N_COINS):\r\n        amount: uint256 = _amounts[i]\r\n        if amount != 0:\r\n            new_balances[i] -= amount\r\n            assert ERC20(self.coins[i]).transfer(_receiver, amount, default_return_value=True)  # dev: failed transfer\r\n\r\n    D1: uint256 = self.get_D_mem(rates, new_balances, amp)\r\n\r\n    fees: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    base_fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n    for i in range(N_COINS):\r\n        ideal_balance: uint256 = D1 * old_balances[i] / D0\r\n        difference: uint256 = 0\r\n        new_balance: uint256 = new_balances[i]\r\n        if ideal_balance > new_balance:\r\n            difference = ideal_balance - new_balance\r\n        else:\r\n            difference = new_balance - ideal_balance\r\n        fees[i] = base_fee * difference / FEE_DENOMINATOR\r\n        self.balances[i] = new_balance - (fees[i] * ADMIN_FEE / FEE_DENOMINATOR)\r\n        new_balances[i] -= fees[i]\r\n    new_balances = self._xp_mem(rates, new_balances)\r\n    D2: uint256 = self.get_D(new_balances, amp)\r\n\r\n    self.save_p(new_balances, amp, D2)\r\n\r\n    total_supply: uint256 = self.totalSupply\r\n    burn_amount: uint256 = ((D0 - D2) * total_supply / D0) + 1\r\n    assert burn_amount > 1  # dev: zero tokens burned\r\n    assert burn_amount <= _max_burn_amount, \"Slippage screwed you\"\r\n\r\n    total_supply -= burn_amount\r\n    self.totalSupply = total_supply\r\n    self.balanceOf[msg.sender] -= burn_amount\r\n    log Transfer(msg.sender, empty(address), burn_amount)\r\n    log RemoveLiquidityImbalance(msg.sender, _amounts, fees, D1, total_supply)\r\n\r\n    return burn_amount\r\n\r\n\r\n@pure\r\n@internal\r\ndef get_y_D(A: uint256, i: int128, xp: uint256[N_COINS], D: uint256) -> uint256:\r\n    \"\"\"\r\n    Calculate x[i] if one reduces D from being calculated for xp to D\r\n\r\n    Done by solving quadratic equation iteratively.\r\n    x_1**2 + x_1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\r\n    x_1**2 + b*x_1 = c\r\n\r\n    x_1 = (x_1**2 + c) / (2*x_1 + b)\r\n    \"\"\"\r\n    # x in the input is converted to the same price/precision\r\n\r\n    assert i >= 0  # dev: i below zero\r\n    assert i < N_COINS_128  # dev: i above N_COINS\r\n\r\n    S_: uint256 = 0\r\n    _x: uint256 = 0\r\n    y_prev: uint256 = 0\r\n    c: uint256 = D\r\n    Ann: uint256 = A * N_COINS\r\n\r\n    for _i in range(N_COINS_128):\r\n        if _i != i:\r\n            _x = xp[_i]\r\n        else:\r\n            continue\r\n        S_ += _x\r\n        c = c * D / (_x * N_COINS)\r\n\r\n    c = c * D * A_PRECISION / (Ann * N_COINS)\r\n    b: uint256 = S_ + D * A_PRECISION / Ann\r\n    y: uint256 = D\r\n\r\n    for _i in range(255):\r\n        y_prev = y\r\n        y = (y*y + c) / (2 * y + b - D)\r\n        # Equality with the precision of 1\r\n        if y > y_prev:\r\n            if y - y_prev <= 1:\r\n                return y\r\n        else:\r\n            if y_prev - y <= 1:\r\n                return y\r\n    raise\r\n\r\n\r\n@view\r\n@internal\r\ndef _calc_withdraw_one_coin(_burn_amount: uint256, i: int128) -> uint256[3]:\r\n    # First, need to calculate\r\n    # * Get current D\r\n    # * Solve Eqn against y_i for D - _token_amount\r\n    amp: uint256 = self._A()\r\n    rates: uint256[N_COINS] = self.rate_multipliers\r\n    xp: uint256[N_COINS] = self._xp_mem(rates, self.balances)\r\n    D0: uint256 = self.get_D(xp, amp)\r\n\r\n    total_supply: uint256 = self.totalSupply\r\n    D1: uint256 = D0 - _burn_amount * D0 / total_supply\r\n    new_y: uint256 = self.get_y_D(amp, i, xp, D1)\r\n\r\n    base_fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n    xp_reduced: uint256[N_COINS] = empty(uint256[N_COINS])\r\n\r\n    for j in range(N_COINS_128):\r\n        dx_expected: uint256 = 0\r\n        xp_j: uint256 = xp[j]\r\n        if j == i:\r\n            dx_expected = xp_j * D1 / D0 - new_y\r\n        else:\r\n            dx_expected = xp_j - xp_j * D1 / D0\r\n        xp_reduced[j] = xp_j - base_fee * dx_expected / FEE_DENOMINATOR\r\n\r\n    dy: uint256 = xp_reduced[i] - self.get_y_D(amp, i, xp_reduced, D1)\r\n    dy_0: uint256 = (xp[i] - new_y) * PRECISION / rates[i]  # w/o fees\r\n    dy = (dy - 1) * PRECISION / rates[i]  # Withdraw less to account for rounding errors\r\n\r\n    xp[i] = new_y\r\n    last_p: uint256 = 0\r\n    if new_y > 0:\r\n        last_p = self._get_p(xp, amp, D1)\r\n\r\n    return [dy, dy_0 - dy, last_p]\r\n\r\n\r\n@view\r\n@external\r\ndef calc_withdraw_one_coin(_burn_amount: uint256, i: int128) -> uint256:\r\n    \"\"\"\r\n    @notice Calculate the amount received when withdrawing a single coin\r\n    @param _burn_amount Amount of LP tokens to burn in the withdrawal\r\n    @param i Index value of the coin to withdraw\r\n    @return Amount of coin received\r\n    \"\"\"\r\n    return self._calc_withdraw_one_coin(_burn_amount, i)[0]\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef remove_liquidity_one_coin(\r\n    _burn_amount: uint256,\r\n    i: int128,\r\n    _min_received: uint256,\r\n    _receiver: address = msg.sender,\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Withdraw a single coin from the pool\r\n    @param _burn_amount Amount of LP tokens to burn in the withdrawal\r\n    @param i Index value of the coin to withdraw\r\n    @param _min_received Minimum amount of coin to receive\r\n    @param _receiver Address that receives the withdrawn coins\r\n    @return Amount of coin received\r\n    \"\"\"\r\n    dy: uint256[3] = self._calc_withdraw_one_coin(_burn_amount, i)\r\n    assert dy[0] >= _min_received, \"Not enough coins removed\"\r\n\r\n    self.balances[i] -= (dy[0] + dy[1] * ADMIN_FEE / FEE_DENOMINATOR)\r\n    total_supply: uint256 = self.totalSupply - _burn_amount\r\n    self.totalSupply = total_supply\r\n    self.balanceOf[msg.sender] -= _burn_amount\r\n    log Transfer(msg.sender, empty(address), _burn_amount)\r\n\r\n    assert ERC20(self.coins[i]).transfer(_receiver, dy[0], default_return_value=True)  # dev: failed transfer\r\n    log RemoveLiquidityOne(msg.sender, _burn_amount, dy[0], total_supply)\r\n\r\n    self.save_p_from_price(dy[2])\r\n\r\n    return dy[0]\r\n\r\n\r\n@external\r\ndef ramp_A(_future_A: uint256, _future_time: uint256):\r\n    assert msg.sender == Factory(self.factory).admin()  # dev: only owner\r\n    assert block.timestamp >= self.initial_A_time + MIN_RAMP_TIME\r\n    assert _future_time >= block.timestamp + MIN_RAMP_TIME  # dev: insufficient time\r\n\r\n    _initial_A: uint256 = self._A()\r\n    _future_A_p: uint256 = _future_A * A_PRECISION\r\n\r\n    assert _future_A > 0 and _future_A < MAX_A\r\n    if _future_A_p < _initial_A:\r\n        assert _future_A_p * MAX_A_CHANGE >= _initial_A\r\n    else:\r\n        assert _future_A_p <= _initial_A * MAX_A_CHANGE\r\n\r\n    self.initial_A = _initial_A\r\n    self.future_A = _future_A_p\r\n    self.initial_A_time = block.timestamp\r\n    self.future_A_time = _future_time\r\n\r\n    log RampA(_initial_A, _future_A_p, block.timestamp, _future_time)\r\n\r\n\r\n@external\r\ndef stop_ramp_A():\r\n    assert msg.sender == Factory(self.factory).admin()  # dev: only owner\r\n\r\n    current_A: uint256 = self._A()\r\n    self.initial_A = current_A\r\n    self.future_A = current_A\r\n    self.initial_A_time = block.timestamp\r\n    self.future_A_time = block.timestamp\r\n    # now (block.timestamp < t1) is always False, so we return saved A\r\n\r\n    log StopRampA(current_A, block.timestamp)\r\n\r\n\r\n@external\r\ndef set_ma_exp_time(_ma_exp_time: uint256):\r\n    assert msg.sender == Factory(self.factory).admin()  # dev: only owner\r\n    assert _ma_exp_time != 0\r\n\r\n    self.ma_exp_time = _ma_exp_time\r\n\r\n\r\n@view\r\n@external\r\ndef admin_balances(i: uint256) -> uint256:\r\n    return ERC20(self.coins[i]).balanceOf(self) - self.balances[i]\r\n\r\n\r\n@external\r\ndef commit_new_fee(_new_fee: uint256):\r\n    assert msg.sender == Factory(self.factory).admin()\r\n    assert _new_fee <= MAX_FEE\r\n    assert self.admin_action_deadline == 0\r\n\r\n    self.future_fee = _new_fee\r\n    self.admin_action_deadline = block.timestamp + ADMIN_ACTIONS_DEADLINE_DT\r\n    log CommitNewFee(_new_fee)\r\n\r\n\r\n@external\r\ndef apply_new_fee():\r\n    assert msg.sender == Factory(self.factory).admin()\r\n    deadline: uint256 = self.admin_action_deadline\r\n    assert deadline != 0 and block.timestamp >= deadline\r\n    \r\n    fee: uint256 = self.future_fee\r\n    self.fee = fee\r\n    self.admin_action_deadline = 0\r\n    log ApplyNewFee(fee)\r\n\r\n\r\n@external\r\ndef withdraw_admin_fees():\r\n    receiver: address = Factory(self.factory).get_fee_receiver(self)\r\n\r\n    for i in range(N_COINS):\r\n        coin: address = self.coins[i]\r\n        fees: uint256 = ERC20(coin).balanceOf(self) - self.balances[i]\r\n        assert ERC20(coin).transfer(receiver, fees, default_return_value=True)\r\n\r\n\r\n@pure\r\n@external\r\ndef version() -> String[8]:\r\n    \"\"\"\r\n    @notice Get the version of this token contract\r\n    \"\"\"\r\n    return VERSION", "ABI": "[{\"name\":\"Transfer\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"spender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"TokenExchange\",\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\",\"indexed\":true},{\"name\":\"sold_id\",\"type\":\"int128\",\"indexed\":false},{\"name\":\"tokens_sold\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"bought_id\",\"type\":\"int128\",\"indexed\":false},{\"name\":\"tokens_bought\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"AddLiquidity\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"token_amounts\",\"type\":\"uint256[2]\",\"indexed\":false},{\"name\":\"fees\",\"type\":\"uint256[2]\",\"indexed\":false},{\"name\":\"invariant\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"token_supply\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RemoveLiquidity\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"token_amounts\",\"type\":\"uint256[2]\",\"indexed\":false},{\"name\":\"fees\",\"type\":\"uint256[2]\",\"indexed\":false},{\"name\":\"token_supply\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RemoveLiquidityOne\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"token_amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"coin_amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"token_supply\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RemoveLiquidityImbalance\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"token_amounts\",\"type\":\"uint256[2]\",\"indexed\":false},{\"name\":\"fees\",\"type\":\"uint256[2]\",\"indexed\":false},{\"name\":\"invariant\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"token_supply\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RampA\",\"inputs\":[{\"name\":\"old_A\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"new_A\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"initial_time\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"future_time\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"StopRampA\",\"inputs\":[{\"name\":\"A\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"t\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"CommitNewFee\",\"inputs\":[{\"name\":\"new_fee\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ApplyNewFee\",\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_coins\",\"type\":\"address[4]\"},{\"name\":\"_rate_multipliers\",\"type\":\"uint256[4]\"},{\"name\":\"_A\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"permit\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_deadline\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"last_price\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ema_price\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_balances\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2]\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin_fee\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"A\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"A_precise\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_p\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"price_oracle\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_virtual_price\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calc_token_amount\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"name\":\"_is_deposit\",\"type\":\"bool\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_liquidity\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"name\":\"_min_mint_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_liquidity\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"name\":\"_min_mint_amount\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_dy\",\"inputs\":[{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"j\",\"type\":\"int128\"},{\"name\":\"dx\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"exchange\",\"inputs\":[{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"j\",\"type\":\"int128\"},{\"name\":\"_dx\",\"type\":\"uint256\"},{\"name\":\"_min_dy\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"exchange\",\"inputs\":[{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"j\",\"type\":\"int128\"},{\"name\":\"_dx\",\"type\":\"uint256\"},{\"name\":\"_min_dy\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity\",\"inputs\":[{\"name\":\"_burn_amount\",\"type\":\"uint256\"},{\"name\":\"_min_amounts\",\"type\":\"uint256[2]\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2]\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity\",\"inputs\":[{\"name\":\"_burn_amount\",\"type\":\"uint256\"},{\"name\":\"_min_amounts\",\"type\":\"uint256[2]\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2]\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_imbalance\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"name\":\"_max_burn_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_imbalance\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"name\":\"_max_burn_amount\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calc_withdraw_one_coin\",\"inputs\":[{\"name\":\"_burn_amount\",\"type\":\"uint256\"},{\"name\":\"i\",\"type\":\"int128\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_one_coin\",\"inputs\":[{\"name\":\"_burn_amount\",\"type\":\"uint256\"},{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"_min_received\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_one_coin\",\"inputs\":[{\"name\":\"_burn_amount\",\"type\":\"uint256\"},{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"_min_received\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"ramp_A\",\"inputs\":[{\"name\":\"_future_A\",\"type\":\"uint256\"},{\"name\":\"_future_time\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"stop_ramp_A\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_ma_exp_time\",\"inputs\":[{\"name\":\"_ma_exp_time\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin_balances\",\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"commit_new_fee\",\"inputs\":[{\"name\":\"_new_fee\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"apply_new_fee\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw_admin_fees\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"version\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"coins\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balances\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"fee\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_fee\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin_action_deadline\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"initial_A\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_A\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"initial_A_time\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_A_time\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"DOMAIN_SEPARATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"nonces\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ma_exp_time\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ma_last_time\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.3.7", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}