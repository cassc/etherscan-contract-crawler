{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TokenVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n\\r\\nimport \\\"./MultiSig.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./BokkyPooBahsDateTimeLibrary.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\r\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\r\\n */\\r\\ncontract Ownable {\\r\\n    address private _owner;\\r\\n    address private _pendingOwner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n     * account.\\r\\n     */\\r\\n    constructor() {\\r\\n        _owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == _owner, \\\"onlyOwner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the address of the current owner.\\r\\n    */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the address of the pending owner.\\r\\n    */\\r\\n    function pendingOwner() external view returns (address) {\\r\\n        return _pendingOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current owner to set the pendingOwner address.\\r\\n     * @param newOwner The address to transfer ownership to.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) external onlyOwner {\\r\\n        _pendingOwner = newOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the pendingOwner address to finalize the transfer.\\r\\n     */\\r\\n    function claimOwnership() external {\\r\\n        require(msg.sender == _pendingOwner, \\\"onlyPendingOwner\\\");\\r\\n        emit OwnershipTransferred(_owner, _pendingOwner);\\r\\n        _owner = _pendingOwner;\\r\\n        _pendingOwner = address(0);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract TokenVestingFactory is Ownable, MultiSig {\\r\\n\\r\\n\\r\\n    event TokenVestingCreated(address tokenVesting);\\r\\n\\r\\n    // enum VestingType { SeedInvestors, StrategicInvestors, Advisors, Team, All }\\r\\n\\r\\n    struct BeneficiaryIndex {\\r\\n        address tokenVesting;\\r\\n        uint256 vestingType;\\r\\n        bool isExist;\\r\\n        // uint256 index;\\r\\n    }\\r\\n\\r\\n    mapping(address => BeneficiaryIndex) private _beneficiaryIndex;\\r\\n    address[] private _beneficiaries;\\r\\n    address private _tokenAddr;\\r\\n    uint256 private _decimal;\\r\\n\\r\\n    constructor (address tokenAddr, uint256 decimal, address[] memory owners, uint256 threshold) {\\r\\n        require(tokenAddr != address(0), \\\"TokenVestingFactory: token address must not be zero\\\");\\r\\n\\r\\n        _tokenAddr = tokenAddr;\\r\\n        _decimal = decimal;\\r\\n        setupMultiSig(owners, threshold);\\r\\n    }\\r\\n\\r\\n    function create(address beneficiary, uint256 start, uint256 cliff, uint256 initialShare, uint256 periodicShare, bool revocable, uint256 vestingType) onlyOwner external {\\r\\n        require(!_beneficiaryIndex[beneficiary].isExist, \\\"TokenVestingFactory: benficiery exists\\\");\\r\\n        require(vestingType != 0, \\\"TokenVestingFactory: vestingType 0 is reserved\\\");\\r\\n\\r\\n        address tokenVesting = address(new TokenVesting(_tokenAddr, beneficiary, start, cliff, initialShare, periodicShare, _decimal, revocable));\\r\\n\\r\\n        _beneficiaries.push(beneficiary);\\r\\n        _beneficiaryIndex[beneficiary].tokenVesting = tokenVesting;\\r\\n        _beneficiaryIndex[beneficiary].vestingType = vestingType;\\r\\n        _beneficiaryIndex[beneficiary].isExist = true;\\r\\n\\r\\n        emit TokenVestingCreated(tokenVesting);\\r\\n    }\\r\\n\\r\\n    function initialize(address tokenVesting, address from, uint256 amount) external onlyOwner {\\r\\n        TokenVesting(tokenVesting).initialize(from, amount);\\r\\n    }\\r\\n\\r\\n    function update(address tokenVesting, uint256 start, uint256 cliff, uint256 initialShare, uint256 periodicShare, bool revocable) external onlyOwner {\\r\\n        TokenVesting(tokenVesting).update(start, cliff, initialShare, periodicShare, revocable);\\r\\n    }\\r\\n\\r\\n\\r\\n    function getBeneficiaries(uint256 vestingType) external view returns (address[] memory) {\\r\\n        uint256 j = 0;\\r\\n        address[] memory beneficiaries = new address[](_beneficiaries.length);\\r\\n\\r\\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\\r\\n            address beneficiary = _beneficiaries[i];\\r\\n            if (_beneficiaryIndex[beneficiary].vestingType == vestingType || vestingType == 0) {\\r\\n                beneficiaries[j] = beneficiary;\\r\\n                j++;\\r\\n            }\\r\\n        }\\r\\n        return beneficiaries;\\r\\n    }\\r\\n\\r\\n    function getVestingType(address beneficiary) external view returns (uint256) {\\r\\n        require(_beneficiaryIndex[beneficiary].isExist, \\\"TokenVestingFactory: benficiery does not exist\\\");\\r\\n        return _beneficiaryIndex[beneficiary].vestingType;\\r\\n    }\\r\\n\\r\\n    function getTokenVesting(address beneficiary) external view returns (address) {\\r\\n        require(_beneficiaryIndex[beneficiary].isExist, \\\"TokenVestingFactory: benficiery does not exist\\\");\\r\\n        return _beneficiaryIndex[beneficiary].tokenVesting;\\r\\n    }\\r\\n\\r\\n    function getTokenAddress() external view returns (address) {\\r\\n        return _tokenAddr;\\r\\n    }\\r\\n\\r\\n    function getDecimal() external view returns (uint256) {\\r\\n        return _decimal;\\r\\n    }\\r\\n\\r\\n    function revoke(address tokenVesting) external onlyMultiSig{\\r\\n        TokenVesting(tokenVesting).revoke(owner());\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title TokenVesting\\r\\n * @dev A token holder contract that can release its token balance gradually like a\\r\\n * typical vesting scheme, with a cliff. Optionally revocable by the\\r\\n * owner.\\r\\n */\\r\\ncontract TokenVesting is Ownable {    \\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    event TokenVestingUpdated(uint256 start, uint256 cliff, uint256 initialShare, uint256 periodicShare, bool revocable);\\r\\n    event TokensReleased(address beneficiary, uint256 amount);\\r\\n    event TokenVestingRevoked(address refundAddress, uint256 amount);\\r\\n    event TokenVestingInitialized(address from, uint256 amount);\\r\\n\\r\\n    enum Status {NotInitialized, Initialized, Revoked}\\r\\n\\r\\n    // beneficiary of tokens after they are released\\r\\n    address private _beneficiary;\\r\\n\\r\\n    uint256 private _cliff;\\r\\n    uint256 private _start;\\r\\n    address private _tokenAddr;\\r\\n    uint256 private _initialShare;\\r\\n    uint256 private _periodicShare;\\r\\n    uint256 private _decimal;\\r\\n    uint256 private _released;\\r\\n\\r\\n    bool private _revocable;\\r\\n    Status private _status;\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\\r\\n     * beneficiary, gradually in a linear fashion. By then all\\r\\n     * of the balance will have vested.\\r\\n     * @param beneficiary address of the beneficiary to whom vested tokens are transferred\\r\\n     * @param cliff duration in seconds of the cliff in which tokens will begin to vest\\r\\n     * @param start the time (as Unix time) at which point vesting starts\\r\\n     * @param revocable whether the vesting is revocable or not\\r\\n     */\\r\\n    constructor(\\r\\n        address tokenAddr,\\r\\n        address beneficiary,\\r\\n        uint256 start,\\r\\n        uint256 cliff,\\r\\n        uint256 initialShare,\\r\\n        uint256 periodicShare,\\r\\n        uint256 decimal,\\r\\n        bool revocable\\r\\n    )\\r\\n\\r\\n    {\\r\\n        require(beneficiary != address(0), \\\"TokenVesting: beneficiary address must not be zero\\\");\\r\\n\\r\\n        _tokenAddr = tokenAddr;\\r\\n        _beneficiary = beneficiary;\\r\\n        _revocable = revocable;\\r\\n        _cliff = start + cliff;\\r\\n        _start = start;\\r\\n        _initialShare = initialShare;\\r\\n        _periodicShare = periodicShare;\\r\\n        _decimal = decimal;\\r\\n        _status = Status.NotInitialized;\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @return TokenVesting details.\\r\\n    */\\r\\n    function getDetails() external view returns (address, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256) {\\r\\n        uint256 _total = IERC20(_tokenAddr).balanceOf(address(this)) + _released;\\r\\n        uint256 _vested = _vestedAmount();\\r\\n        uint256 _releasable = _vestedAmount() - _released;\\r\\n        return (_beneficiary, _initialShare, _periodicShare, _start, _cliff, _total, _vested, _released, _releasable, _revocable, uint256(_status));\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @return the initial share of the beneficiary.\\r\\n     */\\r\\n    function getInitialShare() external view returns (uint256) {\\r\\n        return _initialShare;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @return the periodic share of the beneficiary.\\r\\n     */\\r\\n    function getPeriodicShare() external view returns (uint256) {\\r\\n        return _periodicShare;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @return the beneficiary of the tokens.\\r\\n     */\\r\\n    function getBeneficiary() external view returns (address) {\\r\\n        return _beneficiary;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the start time of the token vesting.\\r\\n     */\\r\\n    function getStart() external view returns (uint256) {\\r\\n        return _start;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the cliff time of the token vesting.\\r\\n     */\\r\\n    function getCliff() external view returns (uint256) {\\r\\n        return _cliff;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the total amount of the token.\\r\\n     */\\r\\n    function getTotal() external view returns (uint256) {\\r\\n        return IERC20(_tokenAddr).balanceOf(address(this)) + _released;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the amount of the vested token.\\r\\n     */\\r\\n    function getVested() external view returns (uint256) {\\r\\n        return _vestedAmount();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the amount of the token released.\\r\\n     */\\r\\n    function getReleased() external view returns (uint256) {\\r\\n        return _released;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the amount that has already vested but hasn't been released yet.\\r\\n     */\\r\\n    function getReleasable() public view returns (uint256) {\\r\\n        return _vestedAmount() - _released;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return true if the vesting is revocable.\\r\\n     */\\r\\n    function isRevocable() external view returns (bool) {\\r\\n        return _revocable;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return true if the token is revoked.\\r\\n     */\\r\\n    function isRevoked() external view returns (bool) {\\r\\n        if (_status == Status.Revoked) {\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @return status.\\r\\n    */\\r\\n    function getStatus() external view returns (uint256) {\\r\\n        return uint256(_status);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice change status to initialized.\\r\\n     */\\r\\n    function initialize(address from, uint256 amount) public onlyOwner {\\r\\n\\r\\n        require(_status == Status.NotInitialized, \\\"TokenVesting: status must be NotInitialized\\\");\\r\\n\\r\\n        _status = Status.Initialized;\\r\\n\\r\\n        emit TokenVestingInitialized(address(from), amount);\\r\\n\\r\\n        IERC20(_tokenAddr).safeTransferFrom(from, address(this), amount);\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice update token vesting contract.\\r\\n    */\\r\\n    function update(\\r\\n        uint256 start,\\r\\n        uint256 cliff,\\r\\n        uint256 initialShare,\\r\\n        uint256 periodicShare,\\r\\n        bool revocable\\r\\n\\r\\n    ) external onlyOwner {\\r\\n\\r\\n        require(_status == Status.NotInitialized, \\\"TokenVesting: status must be NotInitialized\\\");\\r\\n\\r\\n        _start = start;\\r\\n        _cliff = start + cliff;\\r\\n        _initialShare = initialShare;\\r\\n        _periodicShare = periodicShare;\\r\\n        _revocable = revocable;\\r\\n\\r\\n        emit TokenVestingUpdated(_start, _cliff, _initialShare, _periodicShare, _revocable);\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers vested tokens to beneficiary.\\r\\n     */\\r\\n    function release() external {\\r\\n        require(_status != Status.NotInitialized, \\\"TokenVesting: status is NotInitialized\\\");\\r\\n        uint256 unreleased = getReleasable();\\r\\n\\r\\n        require(unreleased > 0, \\\"TokenVesting: releasable amount is zero\\\");\\r\\n\\r\\n        _released = _released + unreleased;\\r\\n\\r\\n        emit TokensReleased(address(_beneficiary), unreleased);\\r\\n\\r\\n        IERC20(_tokenAddr).safeTransfer(_beneficiary, unreleased);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows the owner to revoke the vesting. Tokens already vested\\r\\n     * remain in the contract, the rest are returned to the owner.\\r\\n     */\\r\\n    function revoke(address refundAddress) external onlyOwner {\\r\\n        require(_revocable, \\\"TokenVesting: contract is not revocable\\\");\\r\\n        require(_status != Status.Revoked, \\\"TokenVesting: status is Revoked\\\");\\r\\n\\r\\n        uint256 balance = IERC20(_tokenAddr).balanceOf(address(this));\\r\\n\\r\\n        uint256 unreleased = getReleasable();\\r\\n        uint256 refund = balance - unreleased;\\r\\n\\r\\n        _status = Status.Revoked;\\r\\n\\r\\n        emit TokenVestingRevoked(address(refundAddress), refund);\\r\\n        \\r\\n        IERC20(_tokenAddr).safeTransfer(refundAddress, refund);\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Calculates the amount that has already vested.\\r\\n     */\\r\\n    function _vestedAmount() private view returns (uint256) {\\r\\n        uint256 currentBalance = IERC20(_tokenAddr).balanceOf(address(this));\\r\\n        uint256 totalBalance = currentBalance + _released;\\r\\n        uint256 initialRelease = (totalBalance * _initialShare) / ((10 ** _decimal) * 100) ;\\r\\n\\r\\n        if (block.timestamp < _start)\\r\\n            return 0;\\r\\n\\r\\n        if (_status == Status.Revoked)\\r\\n            return totalBalance;\\r\\n\\r\\n        if (block.timestamp < _cliff)\\r\\n            return initialRelease;\\r\\n\\r\\n        uint256 monthlyRelease = (totalBalance * _periodicShare) / ((10 ** _decimal) * 100);\\r\\n        uint256 _months = BokkyPooBahsDateTimeLibrary.diffMonths(_cliff, block.timestamp);\\r\\n\\r\\n        if (initialRelease + (monthlyRelease * (_months + 1)) >= totalBalance) {\\r\\n            return totalBalance;\\r\\n        } else {\\r\\n            return initialRelease + (monthlyRelease * (_months + 1));\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/MultiSig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n\\r\\ncontract MultiSig {\\r\\n\\r\\n    event setupEvent(address[] signers, uint256 threshold);\\r\\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\\r\\n    event ExecutionFailure(bytes32 txHash);\\r\\n    event ExecutionSuccess(bytes32 txHash);\\r\\n    event signerAddEvent(address signer);\\r\\n    event signerRemoveEvent(address signer);\\r\\n    event signerChangedEvent(address oldSigner, address newSigner);\\r\\n    event thresholdEvent(uint256 threshold);\\r\\n    event eventAlreadySigned(address indexed signed);\\r\\n\\r\\n\\r\\n    address[] private _signers;\\r\\n\\r\\n    // Mapping to keep track of all hashes (message or transaction) that have been approved by ANY signers\\r\\n    mapping(address => mapping(bytes32 => uint256)) public approvedHashes;\\r\\n\\r\\n    uint256 internal _threshold;\\r\\n    uint256 public _nonce;\\r\\n    bytes32 public _currentHash;\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the this contract address.\\r\\n     */\\r\\n    modifier onlyMultiSig() {\\r\\n        require(msg.sender == address(this), \\\"Only Multisig contract can run this method\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor () {\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev setup the multisig contract.\\r\\n     * @param signers List of signers.\\r\\n     * @param threshold The minimum required sign for executing a transaction.\\r\\n     */    \\r\\n    function setupMultiSig(\\r\\n        address[] memory signers,\\r\\n        uint256 threshold\\r\\n    ) internal {\\r\\n        require(_threshold == 0, \\\"MS11\\\");\\r\\n        require(threshold <= signers.length, \\\"MS01\\\");\\r\\n        require(threshold > 1, \\\"MS02\\\");\\r\\n\\r\\n        address signer;\\r\\n        for (uint256 i = 0; i < signers.length; i++) {\\r\\n            signer = signers[i];\\r\\n            require(!existSigner(signer), \\\"MS03\\\");\\r\\n            require(signer != address(0), \\\"MS04\\\");\\r\\n            require(signer != address(this), \\\"MS05\\\");\\r\\n\\r\\n            _signers.push(signer);\\r\\n        }\\r\\n\\r\\n        _threshold = threshold;\\r\\n        emit setupEvent(_signers, _threshold);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows to execute a Safe transaction confirmed by required number of signers.\\r\\n     * @param data Data payload of transaction.\\r\\n     */\\r\\n    function execTransaction(\\r\\n        bytes calldata data\\r\\n    ) external returns (bool success) {\\r\\n        bytes32 txHash;\\r\\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\\r\\n        {\\r\\n            bytes memory txHashData =\\r\\n            encodeTransactionData(\\r\\n            // Transaction info\\r\\n                data,\\r\\n                _nonce\\r\\n            );\\r\\n            // Increase nonce and execute transaction.\\r\\n            _nonce++;\\r\\n            _currentHash = 0x0;\\r\\n            txHash = keccak256(txHashData);\\r\\n            checkSignatures(txHash);\\r\\n        }\\r\\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\\r\\n        {            \\r\\n            success = execute(data);\\r\\n            if (success) emit ExecutionSuccess(txHash);\\r\\n            else emit ExecutionFailure(txHash);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev Get the current value of nonce\\r\\n     */\\r\\n    function getNonce() external view returns (uint256){\\r\\n        return _nonce;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Execute a transaction\\r\\n     * @param data the encoded data of the transaction\\r\\n     */\\r\\n    function execute(\\r\\n        bytes memory data\\r\\n    ) internal returns (bool success) {\\r\\n        address to = address (this);\\r\\n        // We require some gas to emit the events (at least 2500) after the execution\\r\\n        uint256 gasToCall = gasleft() - 2500;\\r\\n        assembly {\\r\\n            success := call(gasToCall, to, 0, add(data, 0x20), mload(data), 0, 0)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\\r\\n     * @param dataHash Hash of the data\\r\\n     */\\r\\n    function checkSignatures(bytes32 dataHash) public view {\\r\\n        uint256 threshold = _threshold;\\r\\n        // Check that a threshold is set\\r\\n        require(threshold > 1, \\\"MS02\\\");\\r\\n        address[] memory alreadySigned = getSignersOfHash(dataHash);\\r\\n\\r\\n        require(alreadySigned.length >= threshold, \\\"MS06\\\");\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev Return the list of signers for a given hash\\r\\n     * @param hash Hash of the data\\r\\n     */\\r\\n    function getSignersOfHash(\\r\\n        bytes32 hash\\r\\n    ) public view returns (address[] memory) {\\r\\n        uint256 j = 0;\\r\\n        address[] memory doneSignersTemp = new address[](_signers.length);\\r\\n\\r\\n        uint256 i;\\r\\n        address currentSigner;\\r\\n        for (i = 0; i < _signers.length; i++) {\\r\\n            currentSigner = _signers[i];\\r\\n            if (approvedHashes[currentSigner][hash] == 1) {\\r\\n                doneSignersTemp[j] = currentSigner;\\r\\n                j++;\\r\\n            }\\r\\n        }\\r\\n        address[] memory doneSigners = new address[](j);\\r\\n        for (i=0; i < j; i++){\\r\\n            doneSigners[i] = doneSignersTemp[i];\\r\\n        }\\r\\n        return doneSigners;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Marks a hash as approved. This can be used to validate a hash that is used by a signature.\\r\\n     * @param data Data payload.\\r\\n     */\\r\\n    function approveHash(\\r\\n        bytes calldata data\\r\\n    ) external {\\r\\n        require(existSigner(msg.sender), \\\"MS07\\\");\\r\\n\\r\\n        bytes32 hashToApprove = getTransactionHash(data, _nonce);\\r\\n        bytes32 hashToCancel = getCancelTransactionHash(_nonce);\\r\\n        \\r\\n        if(_currentHash == 0x0) {\\r\\n            require(hashToApprove != hashToCancel, \\\"MS12\\\");\\r\\n            _currentHash = hashToApprove;\\r\\n        }\\r\\n        else {\\r\\n            require(_currentHash == hashToApprove || hashToApprove == hashToCancel, \\\"MS13\\\");\\r\\n        }\\r\\n        \\r\\n        approvedHashes[msg.sender][hashToApprove] = 1;\\r\\n        emit ApproveHash(hashToApprove, msg.sender);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the bytes that are hashed to be signed by owners.\\r\\n     * @param data Data payload.\\r\\n     * @param nonce Transaction nonce.\\r\\n     */    \\r\\n    function encodeTransactionData(\\r\\n        bytes calldata data,\\r\\n        uint256 nonce\\r\\n    ) public pure returns (bytes memory) {\\r\\n        bytes32 safeTxHash =\\r\\n        keccak256(\\r\\n            abi.encode(\\r\\n                keccak256(data),\\r\\n                nonce\\r\\n            )\\r\\n        );\\r\\n        return abi.encodePacked(safeTxHash);\\r\\n    }\\r\\n\\r\\n    function encodeCancelTransactionData(\\r\\n        uint256 nonce\\r\\n    ) public pure returns (bytes memory) {\\r\\n        bytes32 safeTxHash =\\r\\n        keccak256(\\r\\n            abi.encode(\\r\\n                keccak256(\\\"\\\"),\\r\\n                nonce\\r\\n            )\\r\\n        );\\r\\n        return abi.encodePacked(safeTxHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns hash to be signed by owners.\\r\\n     * @param data Data payload.\\r\\n     */\\r\\n    function getTransactionHash(\\r\\n        bytes calldata data,\\r\\n        uint256 nonce\\r\\n    ) public pure returns (bytes32) {\\r\\n        return keccak256(encodeTransactionData(data, nonce));\\r\\n    }\\r\\n\\r\\n    function getCancelTransactionHash(\\r\\n        uint256 nonce\\r\\n    ) public pure returns (bytes32) {\\r\\n        return keccak256(encodeCancelTransactionData(nonce));\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev Check if a given address is a signer or not.\\r\\n     * @param signer signer address.     \\r\\n     */\\r\\n    function existSigner(\\r\\n        address signer\\r\\n    ) public view returns (bool) {\\r\\n        for (uint256 i = 0; i < _signers.length; i++) {\\r\\n            address signerI = _signers[i];\\r\\n            if (signerI == signer) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev Get the list of all signers.     \\r\\n     */\\r\\n    function getSigners() external view returns (address[] memory ) {\\r\\n        address[] memory ret = new address[](_signers.length) ;\\r\\n        for (uint256 i = 0; i < _signers.length; i++) {\\r\\n            ret[i] = _signers[i];\\r\\n        }\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev Set a new threshold for signing.\\r\\n     * @param threshold the minimum required signatures for executing a transaction.     \\r\\n     */\\r\\n    function setThreshold(\\r\\n        uint256 threshold\\r\\n    ) public onlyMultiSig{\\r\\n        require(threshold <= _signers.length, \\\"MS01\\\");\\r\\n        require(threshold > 1, \\\"MS02\\\");\\r\\n        _threshold = threshold;\\r\\n        emit thresholdEvent(threshold);\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev Get threshold value.\\r\\n     */\\r\\n    function getThreshold() external view returns(uint256) {\\r\\n        return _threshold;\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev Add a new signer and new threshold.\\r\\n     * @param signer new signer address.   \\r\\n     * @param threshold new threshold  \\r\\n     */\\r\\n    function addSigner(\\r\\n        address signer,\\r\\n        uint256 threshold\\r\\n    ) external onlyMultiSig{\\r\\n        require(!existSigner(signer), \\\"MS03\\\");\\r\\n        require(signer != address(0), \\\"MS04\\\");\\r\\n        require(signer != address(this), \\\"MS05\\\");\\r\\n        _signers.push(signer);\\r\\n        emit signerAddEvent(signer);\\r\\n        setThreshold(threshold);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an old signer\\r\\n     * @param signer an old signer.     \\r\\n     * @param threshold new threshold\\r\\n     */\\r\\n    function removeSigner(\\r\\n        address signer,\\r\\n        uint256 threshold\\r\\n    ) external onlyMultiSig{\\r\\n        require(existSigner(signer), \\\"MS07\\\");\\r\\n        require(_signers.length - 1 > 1, \\\"MS09\\\");\\r\\n        require(_signers.length - 1 >= threshold, \\\"MS10\\\");\\r\\n        require(signer != address(0), \\\"MS04\\\");\\r\\n \\r\\n        for (uint256 i = 0; i < _signers.length - 1; i++) {\\r\\n            if (_signers[i] == signer) {\\r\\n                _signers[i] = _signers[_signers.length - 1];\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        _signers.pop();\\r\\n        emit signerRemoveEvent(signer);\\r\\n        setThreshold(threshold);\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev Replace an old signer with a new one\\r\\n     * @param oldSigner old signer.     \\r\\n     * @param newSigner new signer\\r\\n     */\\r\\n    function changeSigner(\\r\\n        address oldSigner,\\r\\n        address newSigner\\r\\n    ) external onlyMultiSig{\\r\\n        require(existSigner(oldSigner), \\\"MS07\\\");\\r\\n        require(!existSigner(newSigner), \\\"MS03\\\");\\r\\n        require(newSigner != address(0), \\\"MS04\\\");\\r\\n        require(newSigner != address(this), \\\"MS05\\\");\\r\\n        \\r\\n        for (uint256 i = 0; i < _signers.length; i++) {\\r\\n            if (_signers[i] == oldSigner) {\\r\\n                _signers[i] = newSigner;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit signerChangedEvent(oldSigner, newSigner);\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BokkyPooBahsDateTimeLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// BokkyPooBah's DateTime Library v1.01\\r\\n//\\r\\n// A gas-efficient Solidity date and time library\\r\\n//\\r\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\r\\n//\\r\\n// Tested date range 1970/01/01 to 2345/12/31\\r\\n//\\r\\n// Conventions:\\r\\n// Unit      | Range         | Notes\\r\\n// :-------- |:-------------:|:-----\\r\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\r\\n// year      | 1970 ... 2345 |\\r\\n// month     | 1 ... 12      |\\r\\n// day       | 1 ... 31      |\\r\\n// hour      | 0 ... 23      |\\r\\n// minute    | 0 ... 59      |\\r\\n// second    | 0 ... 59      |\\r\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\r\\n//\\r\\n//\\r\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\r\\n// ----------------------------------------------------------------------------\\r\\n\\r\\nlibrary BokkyPooBahsDateTimeLibrary {\\r\\n\\r\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\r\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\r\\n    uint constant SECONDS_PER_MINUTE = 60;\\r\\n    int constant OFFSET19700101 = 2440588;\\r\\n\\r\\n    uint constant DOW_MON = 1;\\r\\n    uint constant DOW_TUE = 2;\\r\\n    uint constant DOW_WED = 3;\\r\\n    uint constant DOW_THU = 4;\\r\\n    uint constant DOW_FRI = 5;\\r\\n    uint constant DOW_SAT = 6;\\r\\n    uint constant DOW_SUN = 7;\\r\\n\\r\\n    // ------------------------------------------------------------------------\\r\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\r\\n    // the date conversion algorithm from\\r\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\r\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\r\\n    //\\r\\n    // days = day\\r\\n    //      - 32075\\r\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\r\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\r\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\r\\n    //      - offset\\r\\n    // ------------------------------------------------------------------------\\r\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\r\\n        require(year >= 1970, \\\"BP01\\\");\\r\\n        int _year = int(year);\\r\\n        int _month = int(month);\\r\\n        int _day = int(day);\\r\\n\\r\\n        int __days = _day\\r\\n          - 32075\\r\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\r\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\r\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\r\\n          - OFFSET19700101;\\r\\n\\r\\n        _days = uint(__days);\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------\\r\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\r\\n    // the date conversion algorithm from\\r\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\r\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\r\\n    //\\r\\n    // int L = days + 68569 + offset\\r\\n    // int N = 4 * L / 146097\\r\\n    // L = L - (146097 * N + 3) / 4\\r\\n    // year = 4000 * (L + 1) / 1461001\\r\\n    // L = L - 1461 * year / 4 + 31\\r\\n    // month = 80 * L / 2447\\r\\n    // dd = L - 2447 * month / 80\\r\\n    // L = month / 11\\r\\n    // month = month + 2 - 12 * L\\r\\n    // year = 100 * (N - 49) + year + L\\r\\n    // ------------------------------------------------------------------------\\r\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\r\\n        int __days = int(_days);\\r\\n\\r\\n        int L = __days + 68569 + OFFSET19700101;\\r\\n        int N = 4 * L / 146097;\\r\\n        L = L - (146097 * N + 3) / 4;\\r\\n        int _year = 4000 * (L + 1) / 1461001;\\r\\n        L = L - 1461 * _year / 4 + 31;\\r\\n        int _month = 80 * L / 2447;\\r\\n        int _day = L - 2447 * _month / 80;\\r\\n        L = _month / 11;\\r\\n        _month = _month + 2 - 12 * L;\\r\\n        _year = 100 * (N - 49) + _year + L;\\r\\n\\r\\n        year = uint(_year);\\r\\n        month = uint(_month);\\r\\n        day = uint(_day);\\r\\n    }\\r\\n\\r\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\r\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\r\\n    }\\r\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\r\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\r\\n    }\\r\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\r\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\r\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        uint secs = timestamp % SECONDS_PER_DAY;\\r\\n        hour = secs / SECONDS_PER_HOUR;\\r\\n        secs = secs % SECONDS_PER_HOUR;\\r\\n        minute = secs / SECONDS_PER_MINUTE;\\r\\n        second = secs % SECONDS_PER_MINUTE;\\r\\n    }\\r\\n\\r\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\r\\n        if (year >= 1970 && month > 0 && month <= 12) {\\r\\n            uint daysInMonth = _getDaysInMonth(year, month);\\r\\n            if (day > 0 && day <= daysInMonth) {\\r\\n                valid = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\r\\n        if (isValidDate(year, month, day)) {\\r\\n            if (hour < 24 && minute < 60 && second < 60) {\\r\\n                valid = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\r\\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        leapYear = _isLeapYear(year);\\r\\n    }\\r\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\r\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\r\\n    }\\r\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\r\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\r\\n    }\\r\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\r\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\r\\n    }\\r\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\r\\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        daysInMonth = _getDaysInMonth(year, month);\\r\\n    }\\r\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\r\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\r\\n            daysInMonth = 31;\\r\\n        } else if (month != 2) {\\r\\n            daysInMonth = 30;\\r\\n        } else {\\r\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\r\\n        }\\r\\n    }\\r\\n    // 1 = Monday, 7 = Sunday\\r\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\r\\n        uint _days = timestamp / SECONDS_PER_DAY;\\r\\n        dayOfWeek = (_days + 3) % 7 + 1;\\r\\n    }\\r\\n\\r\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\r\\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\r\\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\r\\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\r\\n        uint secs = timestamp % SECONDS_PER_DAY;\\r\\n        hour = secs / SECONDS_PER_HOUR;\\r\\n    }\\r\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\r\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\r\\n        minute = secs / SECONDS_PER_MINUTE;\\r\\n    }\\r\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\r\\n        second = timestamp % SECONDS_PER_MINUTE;\\r\\n    }\\r\\n\\r\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\r\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        year += _years;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day > daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\r\\n        require(newTimestamp >= timestamp, \\\"BP02\\\");\\r\\n    }\\r\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\r\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        month += _months;\\r\\n        year += (month - 1) / 12;\\r\\n        month = (month - 1) % 12 + 1;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day > daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\r\\n        require(newTimestamp >= timestamp, \\\"BP02\\\");\\r\\n    }\\r\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\r\\n        require(newTimestamp >= timestamp, \\\"BP02\\\");\\r\\n    }\\r\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\r\\n        require(newTimestamp >= timestamp, \\\"BP02\\\");\\r\\n    }\\r\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\r\\n        require(newTimestamp >= timestamp, \\\"BP02\\\");\\r\\n    }\\r\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp + _seconds;\\r\\n        require(newTimestamp >= timestamp, \\\"BP02\\\");\\r\\n    }\\r\\n\\r\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\r\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        year -= _years;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day > daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\r\\n        require(newTimestamp <= timestamp, \\\"BP03\\\");\\r\\n    }\\r\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\r\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\r\\n        year = yearMonth / 12;\\r\\n        month = yearMonth % 12 + 1;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day > daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\r\\n        require(newTimestamp <= timestamp, \\\"BP03\\\");\\r\\n    }\\r\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\r\\n        require(newTimestamp <= timestamp, \\\"BP03\\\");\\r\\n    }\\r\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\r\\n        require(newTimestamp <= timestamp, 'BP03');\\r\\n    }\\r\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\r\\n        require(newTimestamp <= timestamp, 'BP03');\\r\\n    }\\r\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp - _seconds;\\r\\n        require(newTimestamp <= timestamp, 'BP03');\\r\\n    }\\r\\n\\r\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\r\\n        require(fromTimestamp <= toTimestamp, 'BP03');\\r\\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\r\\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\r\\n        _years = toYear - fromYear;\\r\\n    }\\r\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\r\\n        require(fromTimestamp <= toTimestamp, 'BP03');\\r\\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\r\\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\r\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\r\\n    }\\r\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\r\\n        require(fromTimestamp <= toTimestamp, 'BP03');\\r\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\r\\n    }\\r\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\r\\n        require(fromTimestamp <= toTimestamp, 'BP03');\\r\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\r\\n    }\\r\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\r\\n        require(fromTimestamp <= toTimestamp, 'BP03');\\r\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\r\\n    }\\r\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\r\\n        require(fromTimestamp <= toTimestamp, 'BP03');\\r\\n        _seconds = toTimestamp - fromTimestamp;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodicShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimal\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenVestingInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenVestingRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodicShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"name\":\"TokenVestingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCliff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitialShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPeriodicShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReleasable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRevocable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRevoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodicShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenVesting", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000065a8fba02f641a13bb7b01d5e1129b0521004f52000000000000000000000000bdc2882c4e637ca2157183e958c0b55bbc4685c000000000000000000000000000000000000000000000000000000000615c33b40000000000000000000000000000000000000000000000000000000000506b80000000000000000000000000000000000000000000000000d02ab486cedc000000000000000000000000000000000000000000000000000029a2241af62c000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}