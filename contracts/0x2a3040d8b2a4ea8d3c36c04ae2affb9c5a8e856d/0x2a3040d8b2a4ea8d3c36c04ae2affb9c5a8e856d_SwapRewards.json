{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SwapRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.6.0 <=0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/ISwapContract.sol\\\";\\n\\ncontract SwapRewards is Ownable {\\n    using SafeMath for uint256;\\n\\n    IERC20 public immutable rewardToken; //swingby\\n    ISwapContract public swapContract;\\n    uint256 public rebateRate = 30; // BPS base\\n    uint256 public thresholdRatio = 55; // diff is over 10%\\n    uint256 public pricePerBTC;\\n\\n    event Paid(address to, uint256 amount, uint256 rebate);\\n\\n    constructor(\\n        address _owner,\\n        address _swingby,\\n        uint256 _pricePerBTC\\n    ) {\\n        require(_owner != address(0), \\\"owner address is not be 0x0\\\");\\n        require(_swingby != address(0), \\\"swingby address must not be 0x0\\\");\\n\\n        transferOwnership(_owner);\\n        rewardToken = IERC20(_swingby);\\n        pricePerBTC = _pricePerBTC;\\n    }\\n\\n    // expected DAO executes this\\n    function setSWINGBYPrice(uint256 _pricePerBTC) external {\\n        require(msg.sender == owner(), \\\"!owner\\\");\\n        pricePerBTC = _pricePerBTC;\\n    }\\n\\n    function setSwap(\\n        address _swap,\\n        uint256 _newRebateRate,\\n        uint256 _thresholdRatio\\n    ) external {\\n        require(msg.sender == owner(), \\\"!owner\\\");\\n        require(\\n            _newRebateRate >= 0 && _newRebateRate <= 100,\\n            \\\"_newRebateRate is not valid\\\"\\n        );\\n        require(\\n            _thresholdRatio >= 20 && _thresholdRatio <= 100,\\n            \\\"_thresholdRatio is not valid\\\"\\n        );\\n        swapContract = ISwapContract(_swap);\\n        rebateRate = _newRebateRate;\\n        thresholdRatio = _thresholdRatio;\\n    }\\n\\n    // pullRewards transfers the funds to the user\\n    function pullRewards(\\n        address _dest,\\n        address _receiver,\\n        uint256 _swapped\\n    ) external returns (bool) {\\n        require(\\n            msg.sender == address(swapContract),\\n            \\\"caller is not swap contact\\\"\\n        );\\n        address tokenB = swapContract.BTCT_ADDR();\\n        (uint256 balA, uint256 balB) = swapContract.getFloatReserve(\\n            address(0),\\n            tokenB\\n        );\\n        uint256 threshold = balA.add(balB).mul(thresholdRatio).div(100);\\n        if (\\n            (_dest == tokenB && balB >= threshold) ||\\n            (_dest == address(0) && balA >= threshold)\\n        ) {\\n            uint256 amount = _swapped.mul(rebateRate).mul(pricePerBTC).mul(1e6);\\n            rewardToken.transfer(_receiver, amount); // decimals == 18 for payout\\n            emit Paid(_receiver, _swapped, amount);\\n        }\\n        return true;\\n    }\\n\\n    // pullRewardsMulti transfers the funds to the user\\n    function pullRewardsMulti(\\n        address _dest,\\n        address[] memory _receiver,\\n        uint256[] memory _swapped\\n    ) external returns (bool) {\\n        require(\\n            msg.sender == address(swapContract),\\n            \\\"caller is not swap contact\\\"\\n        );\\n        require(_receiver.length == _swapped.length, \\\"array size is not match\\\");\\n        address tokenB = swapContract.BTCT_ADDR();\\n        (uint256 balA, uint256 balB) = swapContract.getFloatReserve(\\n            address(0),\\n            tokenB\\n        );\\n        uint256 threshold = balA.add(balB).mul(thresholdRatio).div(100);\\n        if (\\n            (_dest == tokenB && balB >= threshold) ||\\n            (_dest == address(0) && balA >= threshold)\\n        ) {\\n            for (uint256 i = 0; i < _receiver.length; i++) {\\n                uint256 amount = _swapped[i]\\n                    .mul(rebateRate)\\n                    .mul(pricePerBTC)\\n                    .mul(1e6);\\n                rewardToken.transfer(_receiver[i], amount); // decimals == 18 for payout\\n                emit Paid(_receiver[i], _swapped[i], amount);\\n            }\\n        }\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISwapContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.6.0 <=0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/Utils.sol\\\";\\n\\ninterface ISwapContract {\\n    \\n    function BTCT_ADDR() external returns (address);\\n\\n    function singleTransferERC20(\\n        address _destToken,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _totalSwapped,\\n        uint256 _rewardsAmount,\\n        bytes32[] memory _redeemedFloatTxIds\\n    ) external returns (bool);\\n\\n    function multiTransferERC20TightlyPacked(\\n        address _destToken,\\n        bytes32[] memory _addressesAndAmounts,\\n        uint256 _totalSwapped,\\n        uint256 _rewardsAmount,\\n        bytes32[] memory _redeemedFloatTxIds\\n    ) external returns (bool);\\n\\n    function collectSwapFeesForBTC(\\n        uint256 _incomingAmount,\\n        uint256 _minerFee,\\n        uint256 _rewardsAmount,\\n        address[] memory _spenders,\\n        uint256[] memory _swapAmounts,\\n        bool    _isUpdatelimitBTCForSPFlow2\\n    ) external returns (bool);\\n\\n    function recordIncomingFloat(\\n        address _token,\\n        bytes32 _addressesAndAmountOfFloat,\\n        bytes32 _txid\\n    ) external returns (bool);\\n\\n    function recordOutcomingFloat(\\n        address _token,\\n        bytes32 _addressesAndAmountOfLPtoken,\\n        uint256 _minerFee,\\n        bytes32 _txid\\n    ) external returns (bool);\\n\\n    function recordSkyPoolsTX(\\n        address _to,\\n        uint256 _totalSwapped,\\n        uint256 _rewardsAmount,\\n        bytes32[] memory _usedTxIds\\n    ) external returns (bool);\\n\\n    function spFlow1SimpleSwap(Utils.SimpleData calldata _data) external;\\n\\n    function spFlow1Uniswap(\\n        bool _fork,\\n        address _factory,\\n        bytes32 _initCode,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address[] calldata _path\\n    ) external returns (uint256 receivedAmount);\\n\\n    function spFlow2Uniswap(\\n        string memory _destinationAddressForBTC,\\n        bool _fork,\\n        address _factory,\\n        bytes32 _initCode,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address[] calldata _path\\n    ) external returns (uint256 receivedAmount);\\n\\n    function spFlow2SimpleSwap(\\n        string memory _destinationAddressForBTC,\\n        Utils.SimpleData calldata _data\\n    ) external returns (uint256 receivedAmount);\\n\\n    function spCleanUpOldTXs() external;\\n\\n    function spDeposit(address _token, uint256 _amount) external payable;\\n\\n    function redeemEther(uint256 _amount) external;\\n\\n    function redeemERC20Token(address _token, uint256 _amount) external;\\n\\n    function recordUTXOSweepMinerFee(uint256 _minerFee, bytes32 _txid)\\n        external\\n        returns (bool);\\n\\n    function churn(\\n        address _newOwner,\\n        address[] memory _nodes,\\n        bool[] memory _isRemoved,\\n        uint8 _churnedInCount,\\n        uint8 _tssThreshold\\n    ) external returns (bool);\\n\\n    function isTxUsed(bytes32 _txid) external view returns (bool);\\n\\n    function getCurrentPriceLP() external view returns (uint256);\\n\\n    function getFloatReserve(address _tokenA, address _tokenB)\\n        external\\n        returns (uint256 reserveA, uint256 reserveB);\\n\\n    function getActiveNodes() external view returns (address[] memory);\\n\\n    function isNodeStake(address _user) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/lib/Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\r\\n\\r\\npragma solidity >=0.6.0 <=0.8.9;\\r\\n\\r\\nlibrary Utils {\\r\\n    /**\\r\\n   * @param fromToken Address of the source token\\r\\n   * @param fromAmount Amount of source tokens to be swapped\\r\\n   * @param toAmount Minimum destination token amount expected out of this swap\\r\\n   * @param expectedAmount Expected amount of destination tokens without slippage\\r\\n   * @param beneficiary Beneficiary address\\r\\n   * 0 then 100% will be transferred to beneficiary. Pass 10000 for 100%\\r\\n   * @param path Route to be taken for this swap to take place\\r\\n\\r\\n   */\\r\\n    struct SellData {\\r\\n        address fromToken;\\r\\n        uint256 fromAmount;\\r\\n        uint256 toAmount;\\r\\n        uint256 expectedAmount;\\r\\n        address payable beneficiary;\\r\\n        Utils.Path[] path;\\r\\n        address payable partner;\\r\\n        uint256 feePercent;\\r\\n        bytes permit;\\r\\n        uint256 deadline;\\r\\n        bytes16 uuid;\\r\\n    }\\r\\n\\r\\n    struct MegaSwapSellData {\\r\\n        address fromToken;\\r\\n        uint256 fromAmount;\\r\\n        uint256 toAmount;\\r\\n        uint256 expectedAmount;\\r\\n        address payable beneficiary;\\r\\n        Utils.MegaSwapPath[] path;\\r\\n        address payable partner;\\r\\n        uint256 feePercent;\\r\\n        bytes permit;\\r\\n        uint256 deadline;\\r\\n        bytes16 uuid;\\r\\n    }\\r\\n\\r\\n    struct SimpleData {\\r\\n        address fromToken;\\r\\n        address toToken;\\r\\n        uint256 fromAmount;\\r\\n        uint256 toAmount;\\r\\n        uint256 expectedAmount;\\r\\n        address[] callees;\\r\\n        bytes exchangeData;\\r\\n        uint256[] startIndexes;\\r\\n        uint256[] values;\\r\\n        address payable beneficiary;\\r\\n        address payable partner;\\r\\n        uint256 feePercent;\\r\\n        bytes permit;\\r\\n        uint256 deadline;\\r\\n        bytes16 uuid;\\r\\n    }\\r\\n\\r\\n    struct Adapter {\\r\\n        address payable adapter;\\r\\n        uint256 percent;\\r\\n        uint256 networkFee;\\r\\n        Route[] route;\\r\\n    }\\r\\n\\r\\n    struct Route {\\r\\n        uint256 index;//Adapter at which index needs to be used\\r\\n        address targetExchange;\\r\\n        uint percent;\\r\\n        bytes payload;\\r\\n        uint256 networkFee;//Network fee is associated with 0xv3 trades\\r\\n    }\\r\\n\\r\\n    struct MegaSwapPath {\\r\\n        uint256 fromAmountPercent;\\r\\n        Path[] path;\\r\\n    }\\r\\n\\r\\n    struct Path {\\r\\n        address to;\\r\\n        uint256 totalNetworkFee;//Network fee is associated with 0xv3 trades\\r\\n        Adapter[] adapters;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swingby\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerBTC\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebate\",\"type\":\"uint256\"}],\"name\":\"Paid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerBTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dest\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapped\",\"type\":\"uint256\"}],\"name\":\"pullRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dest\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_receiver\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_swapped\",\"type\":\"uint256[]\"}],\"name\":\"pullRewardsMulti\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebateRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pricePerBTC\",\"type\":\"uint256\"}],\"name\":\"setSWINGBYPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newRebateRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_thresholdRatio\",\"type\":\"uint256\"}],\"name\":\"setSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapContract\",\"outputs\":[{\"internalType\":\"contract ISwapContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thresholdRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SwapRewards", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000063d9f6a25ddd2c586f4441065ce7c8412fbbb91e0000000000000000000000008287c7b963b405b7b8d467db9d79eec40625b13a0000000000000000000000000000000000000000000000000000000000057878", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}