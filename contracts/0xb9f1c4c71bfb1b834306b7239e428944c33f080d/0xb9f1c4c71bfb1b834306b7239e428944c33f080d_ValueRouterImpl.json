{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.18;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nlibrary LibBytes {\r\n    function addressToBytes32(address addr) external pure returns (bytes32) {\r\n        return bytes32(uint256(uint160(addr)));\r\n    }\r\n\r\n    function bytes32ToAddress(bytes32 _buf) public pure returns (address) {\r\n        return address(uint160(uint256(_buf)));\r\n    }\r\n\r\n    function slice(\r\n        bytes memory _bytes,\r\n        uint256 _start,\r\n        uint256 _length\r\n    ) internal pure returns (bytes memory) {\r\n        require(_length + 31 >= _length, \"slice_overflow\");\r\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\r\n\r\n        bytes memory tempBytes;\r\n\r\n        assembly {\r\n            switch iszero(_length)\r\n            case 0 {\r\n                tempBytes := mload(0x40)\r\n\r\n                let lengthmod := and(_length, 31)\r\n\r\n                let mc := add(\r\n                    add(tempBytes, lengthmod),\r\n                    mul(0x20, iszero(lengthmod))\r\n                )\r\n                let end := add(mc, _length)\r\n\r\n                for {\r\n                    let cc := add(\r\n                        add(\r\n                            add(_bytes, lengthmod),\r\n                            mul(0x20, iszero(lengthmod))\r\n                        ),\r\n                        _start\r\n                    )\r\n                } lt(mc, end) {\r\n                    mc := add(mc, 0x20)\r\n                    cc := add(cc, 0x20)\r\n                } {\r\n                    mstore(mc, mload(cc))\r\n                }\r\n\r\n                mstore(tempBytes, _length)\r\n\r\n                mstore(0x40, and(add(mc, 31), not(31)))\r\n            }\r\n            default {\r\n                tempBytes := mload(0x40)\r\n                mstore(tempBytes, 0)\r\n\r\n                mstore(0x40, add(tempBytes, 0x20))\r\n            }\r\n        }\r\n\r\n        return tempBytes;\r\n    }\r\n}\r\n\r\nlibrary CCTPMessage {\r\n    using LibBytes for *;\r\n    uint8 public constant MESSAGE_BODY_INDEX = 116;\r\n\r\n    function body(bytes memory message) public pure returns (bytes memory) {\r\n        return\r\n            message.slice(\r\n                MESSAGE_BODY_INDEX,\r\n                message.length - MESSAGE_BODY_INDEX\r\n            );\r\n    }\r\n\r\n    /*function testGetCCTPMessageBody() public pure {\r\n        bytes\r\n            memory message = hex\"0000000000000003000000000000000000000071000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0000000000000000000000000000000000000000000000000000000000000000233333\";\r\n        bytes memory messageBody = body(message);\r\n        require(keccak256(messageBody) == keccak256(hex\"233333\"));\r\n    }*/\r\n}\r\n\r\nstruct SwapMessage {\r\n    uint32 version;\r\n    bytes32 bridgeNonceHash;\r\n    uint256 sellAmount;\r\n    bytes32 buyToken;\r\n    uint256 guaranteedBuyAmount;\r\n    bytes32 recipient;\r\n}\r\n\r\nlibrary SwapMessageCodec {\r\n    using LibBytes for *;\r\n\r\n    uint8 public constant VERSION_END_INDEX = 4;\r\n    uint8 public constant BRIDGENONCEHASH_END_INDEX = 36;\r\n    uint8 public constant SELLAMOUNT_END_INDEX = 68;\r\n    uint8 public constant BUYTOKEN_END_INDEX = 100;\r\n    uint8 public constant BUYAMOUNT_END_INDEX = 132;\r\n    uint8 public constant RECIPIENT_END_INDEX = 164;\r\n\r\n    function encode(SwapMessage memory swapMessage)\r\n        public\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            abi.encodePacked(\r\n                swapMessage.version,\r\n                swapMessage.bridgeNonceHash,\r\n                swapMessage.sellAmount,\r\n                swapMessage.buyToken,\r\n                swapMessage.guaranteedBuyAmount,\r\n                swapMessage.recipient\r\n            );\r\n    }\r\n\r\n    function decode(bytes memory message)\r\n        public\r\n        pure\r\n        returns (SwapMessage memory)\r\n    {\r\n        uint32 version;\r\n        bytes32 bridgeNonceHash;\r\n        uint256 sellAmount;\r\n        bytes32 buyToken;\r\n        uint256 guaranteedBuyAmount;\r\n        bytes32 recipient;\r\n        assembly {\r\n            version := mload(add(message, VERSION_END_INDEX))\r\n            bridgeNonceHash := mload(add(message, BRIDGENONCEHASH_END_INDEX))\r\n            sellAmount := mload(add(message, SELLAMOUNT_END_INDEX))\r\n            buyToken := mload(add(message, BUYTOKEN_END_INDEX))\r\n            guaranteedBuyAmount := mload(add(message, BUYAMOUNT_END_INDEX))\r\n            recipient := mload(add(message, RECIPIENT_END_INDEX))\r\n        }\r\n        return\r\n            SwapMessage(\r\n                version,\r\n                bridgeNonceHash,\r\n                sellAmount,\r\n                buyToken,\r\n                guaranteedBuyAmount,\r\n                recipient\r\n            );\r\n    }\r\n}\r\n\r\ninterface ITokenMessenger {\r\n    function depositForBurnWithCaller(\r\n        uint256 _amount,\r\n        uint32 _destinationDomain,\r\n        bytes32 _mintRecipient,\r\n        address _burnToken,\r\n        bytes32 destinationCaller\r\n    ) external returns (uint64 _nonce);\r\n}\r\n\r\ninterface IMessageTransmitter {\r\n    function sendMessageWithCaller(\r\n        uint32 destinationDomain,\r\n        bytes32 recipient,\r\n        bytes32 destinationCaller,\r\n        bytes calldata messageBody\r\n    ) external returns (uint64);\r\n\r\n    function receiveMessage(bytes calldata message, bytes calldata attestation)\r\n        external\r\n        returns (bool success);\r\n\r\n    function replaceMessage(\r\n        bytes calldata originalMessage,\r\n        bytes calldata originalAttestation,\r\n        bytes calldata newMessageBody,\r\n        bytes32 newDestinationCaller\r\n    ) external;\r\n\r\n    function usedNonces(bytes32) external view returns (uint256);\r\n\r\n    function localDomain() external view returns (uint32);\r\n}\r\n\r\nabstract contract AdminControl {\r\n    address public admin;\r\n    address public pendingAdmin;\r\n\r\n    event ChangeAdmin(address indexed _old, address indexed _new);\r\n    event ApplyAdmin(address indexed _old, address indexed _new);\r\n\r\n    function initAdmin(address _admin) internal {\r\n        require(_admin != address(0), \"AdminControl: address(0)\");\r\n        admin = _admin;\r\n        emit ChangeAdmin(address(0), _admin);\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"AdminControl: not admin\");\r\n        _;\r\n    }\r\n\r\n    function changeAdmin(address _admin) external onlyAdmin {\r\n        require(_admin != address(0), \"AdminControl: address(0)\");\r\n        pendingAdmin = _admin;\r\n        emit ChangeAdmin(admin, _admin);\r\n    }\r\n\r\n    function applyAdmin() external {\r\n        require(msg.sender == pendingAdmin, \"AdminControl: Forbidden\");\r\n        emit ApplyAdmin(admin, pendingAdmin);\r\n        admin = pendingAdmin;\r\n        pendingAdmin = address(0);\r\n    }\r\n}\r\n\r\nstruct MessageWithAttestation {\r\n    bytes message;\r\n    bytes attestation;\r\n}\r\n\r\nstruct SellArgs {\r\n    address sellToken;\r\n    uint256 sellAmount;\r\n    uint256 guaranteedBuyAmount;\r\n    uint256 sellcallgas;\r\n    bytes sellcalldata;\r\n}\r\n\r\nstruct BuyArgs {\r\n    bytes32 buyToken;\r\n    uint256 guaranteedBuyAmount;\r\n}\r\n\r\ninterface IValueRouter {\r\n    event TakeFee(address to, uint256 amount);\r\n\r\n    event SwapAndBridge(\r\n        address sellToken,\r\n        address buyToken,\r\n        uint256 bridgeUSDCAmount,\r\n        uint32 destDomain,\r\n        address recipient,\r\n        uint64 bridgeNonce,\r\n        uint64 swapMessageNonce,\r\n        bytes32 bridgeHash\r\n    );\r\n\r\n    event ReplaceSwapMessage(\r\n        address buyToken,\r\n        uint32 destDomain,\r\n        address recipient,\r\n        uint64 swapMessageNonce\r\n    );\r\n\r\n    event LocalSwap(\r\n        address msgsender,\r\n        address sellToken,\r\n        uint256 sellAmount,\r\n        address buyToken,\r\n        uint256 boughtAmount\r\n    );\r\n\r\n    event BridgeArrive(bytes32 bridgeNonceHash, uint256 amount);\r\n\r\n    event DestSwapFailed(bytes32 bridgeNonceHash);\r\n\r\n    event DestSwapSuccess(bytes32 bridgeNonceHash);\r\n\r\n    function version() external view returns (uint16);\r\n\r\n    function fee(uint32 domain) external view returns (uint256);\r\n\r\n    function swap(\r\n        bytes calldata swapcalldata,\r\n        uint256 callgas,\r\n        address sellToken,\r\n        uint256 sellAmount,\r\n        address buyToken,\r\n        uint256 guaranteedBuyAmount,\r\n        address recipient\r\n    ) external payable;\r\n\r\n    function swapAndBridge(\r\n        SellArgs calldata sellArgs,\r\n        BuyArgs calldata buyArgs,\r\n        uint32 destDomain,\r\n        bytes32 recipient\r\n    ) external payable returns (uint64, uint64);\r\n\r\n    function relay(\r\n        MessageWithAttestation calldata bridgeMessage,\r\n        MessageWithAttestation calldata swapMessage,\r\n        bytes calldata swapdata,\r\n        uint256 callgas\r\n    ) external;\r\n}\r\n\r\ncontract ValueRouterImpl is AdminControl, IValueRouter {\r\n    using LibBytes for *;\r\n    using SwapMessageCodec for *;\r\n    using CCTPMessage for *;\r\n\r\n    mapping(uint32 => uint256) public fee;\r\n\r\n    function setFee(uint32 domain, uint256 price) public onlyAdmin {\r\n        fee[domain] = price;\r\n    }\r\n\r\n    bool initialized;\r\n    address public usdc;\r\n    IMessageTransmitter public messageTransmitter;\r\n    ITokenMessenger public tokenMessenger;\r\n    address public zeroEx;\r\n    uint16 public version;\r\n\r\n    mapping(uint32 => bytes32) public remoteRouter;\r\n    mapping(bytes32 => address) swapHashSender;\r\n\r\n    function initialize(\r\n        address _usdc,\r\n        address _messageTransmtter,\r\n        address _tokenMessenger,\r\n        address _zeroEx,\r\n        address _admin\r\n    ) public {\r\n        require(initialized == false);\r\n        initAdmin(_admin);\r\n        usdc = _usdc;\r\n        messageTransmitter = IMessageTransmitter(_messageTransmtter);\r\n        tokenMessenger = ITokenMessenger(_tokenMessenger);\r\n        zeroEx = _zeroEx;\r\n        initialized = true;\r\n        version = 1;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setRemoteRouter(uint32 remoteDomain, address router)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        remoteRouter[remoteDomain] = router.addressToBytes32();\r\n    }\r\n\r\n    function getFee(uint256 usdcBridgeAmount) public view returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    function takeFee(address to, uint256 amount) public onlyAdmin {\r\n        (bool succ, ) = to.call{value: amount}(\"\");\r\n        require(succ);\r\n        emit TakeFee(to, amount);\r\n    }\r\n\r\n    function safeZeroExSwap(\r\n        bytes memory swapcalldata,\r\n        uint256 callgas,\r\n        address sellToken,\r\n        uint256 sellAmount,\r\n        address buyToken,\r\n        uint256 guaranteedBuyAmount,\r\n        address recipient,\r\n        uint256 value\r\n    ) public payable returns (uint256 boughtAmount) {\r\n        require(msg.sender == address(this));\r\n        _safeZeroExSwap(\r\n            swapcalldata,\r\n            callgas,\r\n            sellToken,\r\n            sellAmount,\r\n            buyToken,\r\n            guaranteedBuyAmount,\r\n            recipient,\r\n            value\r\n        );\r\n    }\r\n\r\n    /// @param recipient set recipient to address(0) to save token in the router contract.\r\n    function _safeZeroExSwap(\r\n        bytes memory swapcalldata,\r\n        uint256 callgas,\r\n        address sellToken,\r\n        uint256 sellAmount,\r\n        address buyToken,\r\n        uint256 guaranteedBuyAmount,\r\n        address recipient,\r\n        uint256 value\r\n    ) internal returns (uint256 boughtAmount) {\r\n        // before swap\r\n        // approve\r\n        if (sellToken != 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            require(\r\n                IERC20(sellToken).approve(zeroEx, sellAmount),\r\n                \"erc20 approve failed\"\r\n            );\r\n        }\r\n        // check balance 0\r\n        uint256 buyToken_bal_0;\r\n        if (buyToken == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            buyToken_bal_0 = address(this).balance;\r\n        } else {\r\n            buyToken_bal_0 = IERC20(buyToken).balanceOf(address(this));\r\n        }\r\n\r\n        _zeroExSwap(swapcalldata, callgas, value);\r\n\r\n        // after swap\r\n        // cancel approval\r\n        if (sellToken != 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            // cancel approval\r\n            require(\r\n                IERC20(sellToken).approve(zeroEx, 0),\r\n                \"erc20 cancel approval failed\"\r\n            );\r\n        }\r\n        // check balance 1\r\n        uint256 buyToken_bal_1;\r\n        if (buyToken == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            buyToken_bal_1 = address(this).balance;\r\n        } else {\r\n            buyToken_bal_1 = IERC20(buyToken).balanceOf(address(this));\r\n        }\r\n        boughtAmount = buyToken_bal_1 - buyToken_bal_0;\r\n        require(boughtAmount >= guaranteedBuyAmount, \"swap output not enough\");\r\n        // send token to recipient\r\n        if (recipient == address(0)) {\r\n            return boughtAmount;\r\n        }\r\n        if (buyToken == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            (bool succ, ) = recipient.call{value: boughtAmount}(\"\");\r\n            require(succ, \"send eth failed\");\r\n        } else {\r\n            bool succ = IERC20(buyToken).transfer(recipient, boughtAmount);\r\n            require(succ, \"erc20 transfer failed\");\r\n        }\r\n\r\n        return boughtAmount;\r\n    }\r\n\r\n    function _zeroExSwap(\r\n        bytes memory swapcalldata,\r\n        uint256 callgas,\r\n        uint256 value\r\n    ) internal {\r\n        (bool succ, ) = zeroEx.call{value: value, gas: callgas}(swapcalldata);\r\n        require(succ, \"call swap failed\");\r\n    }\r\n\r\n    function swap(\r\n        bytes calldata swapcalldata,\r\n        uint256 callgas,\r\n        address sellToken,\r\n        uint256 sellAmount,\r\n        address buyToken,\r\n        uint256 guaranteedBuyAmount,\r\n        address recipient\r\n    ) public payable {\r\n        if (sellToken == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            require(msg.value >= sellAmount, \"tx value is not enough\");\r\n        } else {\r\n            bool succ = IERC20(sellToken).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                sellAmount\r\n            );\r\n            require(succ, \"erc20 transfer failed\");\r\n        }\r\n        uint256 boughtAmount = _safeZeroExSwap(\r\n            swapcalldata,\r\n            callgas,\r\n            sellToken,\r\n            sellAmount,\r\n            buyToken,\r\n            guaranteedBuyAmount,\r\n            recipient,\r\n            msg.value\r\n        );\r\n        emit LocalSwap(\r\n            msg.sender,\r\n            sellToken,\r\n            sellAmount,\r\n            buyToken,\r\n            boughtAmount\r\n        );\r\n    }\r\n\r\n    /// User entrance\r\n    /// @param sellArgs : sell-token arguments\r\n    /// @param buyArgs : buy-token arguments\r\n    /// @param destDomain : destination domain\r\n    /// @param recipient : token receiver on dest domain\r\n    function swapAndBridge(\r\n        SellArgs calldata sellArgs,\r\n        BuyArgs calldata buyArgs,\r\n        uint32 destDomain,\r\n        bytes32 recipient\r\n    ) public payable returns (uint64, uint64) {\r\n        require(msg.value >= fee[destDomain]);\r\n        if (recipient == bytes32(0)) {\r\n            recipient = msg.sender.addressToBytes32();\r\n        }\r\n\r\n        // swap sellToken to usdc\r\n        if (sellArgs.sellToken == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            require(\r\n                msg.value >= sellArgs.sellAmount + fee[destDomain],\r\n                \"tx value is not enough\"\r\n            );\r\n        } else {\r\n            bool succ = IERC20(sellArgs.sellToken).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                sellArgs.sellAmount\r\n            );\r\n            require(succ, \"erc20 transfer failed\");\r\n        }\r\n        uint256 bridgeUSDCAmount;\r\n        if (sellArgs.sellToken == usdc) {\r\n            bridgeUSDCAmount = sellArgs.sellAmount;\r\n        } else {\r\n            bridgeUSDCAmount = _safeZeroExSwap(\r\n                sellArgs.sellcalldata,\r\n                sellArgs.sellcallgas,\r\n                sellArgs.sellToken,\r\n                sellArgs.sellAmount,\r\n                usdc,\r\n                sellArgs.guaranteedBuyAmount,\r\n                address(0),\r\n                msg.value - fee[destDomain]\r\n            );\r\n        }\r\n\r\n        // bridge usdc\r\n        require(\r\n            IERC20(usdc).approve(address(tokenMessenger), bridgeUSDCAmount),\r\n            \"erc20 approve failed\"\r\n        );\r\n\r\n        bytes32 destRouter = remoteRouter[destDomain];\r\n\r\n        uint64 bridgeNonce = tokenMessenger.depositForBurnWithCaller(\r\n            bridgeUSDCAmount,\r\n            destDomain,\r\n            destRouter,\r\n            usdc,\r\n            destRouter\r\n        );\r\n\r\n        bytes32 bridgeNonceHash = keccak256(\r\n            abi.encodePacked(messageTransmitter.localDomain(), bridgeNonce)\r\n        );\r\n\r\n        // send swap message\r\n        SwapMessage memory swapMessage = SwapMessage(\r\n            version,\r\n            bridgeNonceHash,\r\n            bridgeUSDCAmount,\r\n            buyArgs.buyToken,\r\n            buyArgs.guaranteedBuyAmount,\r\n            recipient\r\n        );\r\n        bytes memory messageBody = swapMessage.encode();\r\n        uint64 swapMessageNonce = messageTransmitter.sendMessageWithCaller(\r\n            destDomain,\r\n            destRouter, // remote router will receive this message\r\n            destRouter, // message will only submited through the remote router (handleBridgeAndSwap)\r\n            messageBody\r\n        );\r\n        emit SwapAndBridge(\r\n            sellArgs.sellToken,\r\n            buyArgs.buyToken.bytes32ToAddress(),\r\n            bridgeUSDCAmount,\r\n            destDomain,\r\n            recipient.bytes32ToAddress(),\r\n            bridgeNonce,\r\n            swapMessageNonce,\r\n            bridgeNonceHash\r\n        );\r\n        swapHashSender[\r\n            keccak256(abi.encode(destDomain, swapMessageNonce))\r\n        ] = msg.sender;\r\n        return (bridgeNonce, swapMessageNonce);\r\n    }\r\n\r\n    function replaceSwapMessage(\r\n        uint64 bridgeMessageNonce,\r\n        uint64 swapMessageNonce,\r\n        MessageWithAttestation calldata originalMessage,\r\n        uint32 destDomain,\r\n        BuyArgs calldata buyArgs,\r\n        address recipient\r\n    ) public {\r\n        require(\r\n            swapHashSender[\r\n                keccak256(abi.encode(destDomain, swapMessageNonce))\r\n            ] == msg.sender\r\n        );\r\n\r\n        bytes32 bridgeNonceHash = keccak256(\r\n            abi.encodePacked(\r\n                messageTransmitter.localDomain(),\r\n                bridgeMessageNonce\r\n            )\r\n        );\r\n\r\n        SwapMessage memory swapMessage = SwapMessage(\r\n            version,\r\n            bridgeNonceHash,\r\n            0,\r\n            buyArgs.buyToken,\r\n            buyArgs.guaranteedBuyAmount,\r\n            recipient.addressToBytes32()\r\n        );\r\n\r\n        messageTransmitter.replaceMessage(\r\n            originalMessage.message,\r\n            originalMessage.attestation,\r\n            swapMessage.encode(),\r\n            remoteRouter[destDomain]\r\n        );\r\n        emit ReplaceSwapMessage(\r\n            buyArgs.buyToken.bytes32ToAddress(),\r\n            destDomain,\r\n            recipient,\r\n            swapMessageNonce\r\n        );\r\n    }\r\n\r\n    /// Relayer entrance\r\n    function relay(\r\n        MessageWithAttestation calldata bridgeMessage,\r\n        MessageWithAttestation calldata swapMessage,\r\n        bytes calldata swapdata,\r\n        uint256 callgas\r\n    ) public {\r\n        // 1. decode swap message, get binding bridge message nonce.\r\n        SwapMessage memory swapArgs = swapMessage.message.body().decode();\r\n\r\n        // 2. check bridge message nonce is unused.\r\n        require(\r\n            messageTransmitter.usedNonces(swapArgs.bridgeNonceHash) == 0,\r\n            \"bridge message nonce is already used\"\r\n        );\r\n\r\n        // 3. verifys bridge message attestation and mint usdc to this contract.\r\n        // reverts when atestation is invalid.\r\n        uint256 usdc_bal_0 = IERC20(usdc).balanceOf(address(this));\r\n        messageTransmitter.receiveMessage(\r\n            bridgeMessage.message,\r\n            bridgeMessage.attestation\r\n        );\r\n        uint256 usdc_bal_1 = IERC20(usdc).balanceOf(address(this));\r\n        require(usdc_bal_1 >= usdc_bal_0, \"usdc bridge error\");\r\n\r\n        // 4. check bridge message nonce is used.\r\n        require(\r\n            messageTransmitter.usedNonces(swapArgs.bridgeNonceHash) == 1,\r\n            \"bridge message nonce is incorrect\"\r\n        );\r\n\r\n        // 5. verifys swap message attestation.\r\n        // reverts when atestation is invalid.\r\n        messageTransmitter.receiveMessage(\r\n            swapMessage.message,\r\n            swapMessage.attestation\r\n        );\r\n\r\n        address recipient = swapArgs.recipient.bytes32ToAddress();\r\n\r\n        emit BridgeArrive(swapArgs.bridgeNonceHash, usdc_bal_1 - usdc_bal_0);\r\n\r\n        uint256 bridgeUSDCAmount;\r\n        if (swapArgs.sellAmount == 0) {\r\n            bridgeUSDCAmount = usdc_bal_1 - usdc_bal_0;\r\n        } else {\r\n            bridgeUSDCAmount = swapArgs.sellAmount;\r\n            require(\r\n                bridgeUSDCAmount <= (usdc_bal_1 - usdc_bal_0),\r\n                \"router did not receive enough usdc\"\r\n            );\r\n        }\r\n\r\n        uint256 swapAmount = bridgeUSDCAmount - getFee(bridgeUSDCAmount);\r\n\r\n        require(swapArgs.version == version, \"wrong swap message version\");\r\n\r\n        if (\r\n            swapArgs.buyToken == bytes32(0) ||\r\n            swapArgs.buyToken == usdc.addressToBytes32()\r\n        ) {\r\n            // receive usdc\r\n            bool succ = IERC20(usdc).transfer(recipient, bridgeUSDCAmount);\r\n            require(succ, \"erc20 transfer failed\");\r\n        } else {\r\n            try\r\n                this.safeZeroExSwap(\r\n                    swapdata,\r\n                    callgas,\r\n                    usdc,\r\n                    swapAmount,\r\n                    swapArgs.buyToken.bytes32ToAddress(),\r\n                    swapArgs.guaranteedBuyAmount,\r\n                    recipient,\r\n                    0\r\n                )\r\n            {} catch {\r\n                IERC20(usdc).transfer(recipient, swapAmount);\r\n                emit DestSwapFailed(swapArgs.bridgeNonceHash);\r\n                return;\r\n            }\r\n            // TODO get usdc_bal_2\r\n            // rem = usdc_bal_1 - usdc_bal_2\r\n            // transfer rem to recipient\r\n            emit DestSwapSuccess(swapArgs.bridgeNonceHash);\r\n        }\r\n    }\r\n\r\n    /// @dev Does not handle message.\r\n    /// Returns a boolean to make message transmitter accept or refuse a message.\r\n    function handleReceiveMessage(\r\n        uint32 sourceDomain,\r\n        bytes32 sender,\r\n        bytes calldata messageBody\r\n    ) external returns (bool) {\r\n        require(\r\n            msg.sender == address(messageTransmitter),\r\n            \"caller not allowed\"\r\n        );\r\n        if (remoteRouter[sourceDomain] == sender) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function usedNonces(bytes32 nonce) external view returns (uint256) {\r\n        return messageTransmitter.usedNonces(nonce);\r\n    }\r\n\r\n    function localDomain() external view returns (uint32) {\r\n        return messageTransmitter.localDomain();\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"ApplyAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bridgeNonceHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeArrive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"ChangeAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bridgeNonceHash\",\"type\":\"bytes32\"}],\"name\":\"DestSwapFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bridgeNonceHash\",\"type\":\"bytes32\"}],\"name\":\"DestSwapSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msgsender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtAmount\",\"type\":\"uint256\"}],\"name\":\"LocalSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destDomain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"swapMessageNonce\",\"type\":\"uint64\"}],\"name\":\"ReplaceSwapMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgeUSDCAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destDomain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"bridgeNonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"swapMessageNonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bridgeHash\",\"type\":\"bytes32\"}],\"name\":\"SwapAndBridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TakeFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcBridgeAmount\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"sourceDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"messageBody\",\"type\":\"bytes\"}],\"name\":\"handleReceiveMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_messageTransmtter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenMessenger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zeroEx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageTransmitter\",\"outputs\":[{\"internalType\":\"contract IMessageTransmitter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"attestation\",\"type\":\"bytes\"}],\"internalType\":\"struct MessageWithAttestation\",\"name\":\"bridgeMessage\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"attestation\",\"type\":\"bytes\"}],\"internalType\":\"struct MessageWithAttestation\",\"name\":\"swapMessage\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"swapdata\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callgas\",\"type\":\"uint256\"}],\"name\":\"relay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"remoteRouter\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"bridgeMessageNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"swapMessageNonce\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"attestation\",\"type\":\"bytes\"}],\"internalType\":\"struct MessageWithAttestation\",\"name\":\"originalMessage\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"destDomain\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"buyToken\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"guaranteedBuyAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct BuyArgs\",\"name\":\"buyArgs\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"replaceSwapMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"swapcalldata\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callgas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"guaranteedBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"safeZeroExSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"boughtAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"remoteDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"setRemoteRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"swapcalldata\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callgas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"guaranteedBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guaranteedBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellcallgas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sellcalldata\",\"type\":\"bytes\"}],\"internalType\":\"struct SellArgs\",\"name\":\"sellArgs\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"buyToken\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"guaranteedBuyAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct BuyArgs\",\"name\":\"buyArgs\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"destDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"}],\"name\":\"swapAndBridge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMessenger\",\"outputs\":[{\"internalType\":\"contract ITokenMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"usedNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroEx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ValueRouterImpl", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "CCTPMessage:cf0dde1394ca7c64f8fb3b9caff731f836e8b400;LibBytes:4f6fe051a3f2aa559427dbc127b889464115cd28;SwapMessageCodec:48476e64b29e6ef1379df1e477cb15c408c31d5e", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://91b91fdb2aaefe8aa41b86f3de31fd87caade9befe42d8acac19cf9fdbaa1e9a"}