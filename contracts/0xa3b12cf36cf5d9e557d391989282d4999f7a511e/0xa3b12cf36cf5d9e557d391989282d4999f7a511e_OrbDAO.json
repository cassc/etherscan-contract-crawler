{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DAO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ncontract OrbDAO {\\n\\n    address public admin;\\n    uint256 public proposalCount;\\n    mapping(uint256 => Proposal) public proposals;\\n    mapping(address => uint256) public votes;\\n\\n    struct Proposal {\\n        uint256 id;\\n        string description;\\n        uint256 forVotes;\\n        uint256 againstVotes;\\n        bool executed;\\n    }\\n\\n    event NewProposal(uint256 proposalId, string description);\\n    event Vote(uint256 proposalId, bool inSupport, address voter);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Only admin can call this function\\\");\\n        _;\\n    }\\n\\n    modifier validProposal(uint256 proposalId) {\\n        require(proposalId > 0 && proposalId <= proposalCount, \\\"Invalid proposal ID\\\");\\n        _;\\n    }\\n\\n    function init() external {\\n        require(admin == address(0),\\\"Already Set\\\");\\n        admin = msg.sender;\\n    }\\n\\n    function createProposal(string memory description) external onlyAdmin {\\n        proposalCount++;\\n        proposals[proposalCount] = Proposal(proposalCount, description, 0, 0, false);\\n        emit NewProposal(proposalCount, description);\\n    }\\n\\n    function vote(uint256 proposalId, bool inSupport) external validProposal(proposalId) {\\n        Proposal storage proposal = proposals[proposalId];\\n        require(!proposal.executed, \\\"Proposal has already been executed\\\");\\n\\n        if (votes[msg.sender] == 0) {\\n            if (inSupport) {\\n                proposal.forVotes++;\\n            } else {\\n                proposal.againstVotes++;\\n            }\\n            votes[msg.sender] = proposalId;\\n            emit Vote(proposalId, inSupport, msg.sender);\\n        }\\n    }\\n\\n    function executeProposal(uint256 proposalId) external onlyAdmin validProposal(proposalId) {\\n        Proposal storage proposal = proposals[proposalId];\\n        require(!proposal.executed, \\\"Proposal has already been executed\\\");\\n\\n        uint256 totalVotes = proposal.forVotes + proposal.againstVotes;\\n        require(totalVotes > 0, \\\"No votes cast for the proposal\\\");\\n\\n        if (proposal.forVotes > proposal.againstVotes) {\\n            // Execute the proposal\\n            proposal.executed = true;\\n            // Add your execution logic here\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"NewProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"inSupport\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inSupport\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OrbDAO", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}