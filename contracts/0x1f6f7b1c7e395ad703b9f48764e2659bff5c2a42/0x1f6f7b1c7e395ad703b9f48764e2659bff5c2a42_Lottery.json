{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-10-17\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// Lottery Contract: 18 October 2023\r\n// Version: 2.1\r\n\r\n// Website: https://kekw.gg/\r\n// telegram: https://t.me/kekw_gg\r\n// X: https://x.com/kekw_gg\r\n\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract Lottery {\r\n    IERC20 public token;\r\n    address public manager;\r\n    address public previousWinner;\r\n    address[] public players;\r\n    address public burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 MAX_INT =\r\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\r\n\r\n    uint256 public winner = 90;\r\n    uint256 public burn = 5;\r\n    uint256 public fee = 100 - winner - burn;\r\n\r\n    uint256 public ticketPrice = 100000000 * 10**18;\r\n\r\n    constructor(address _token) {\r\n        manager = msg.sender;\r\n        token = IERC20(_token);\r\n    }\r\n\r\n    function updateTicketPrice(uint256 newTicketPrice) public restricted {\r\n        require(\r\n            newTicketPrice > 0,\r\n            \"Minimum ticket price should be greater than zero.\"\r\n        );\r\n        require(\r\n            players.length == 0,\r\n            \"Reset Lottery before updating ticket price.\"\r\n        );\r\n        ticketPrice = newTicketPrice * 10**18;\r\n    }\r\n\r\n    function enter(uint256 _amount, uint256 _mintAmount) public {\r\n        uint256 amount_sent = _amount * 10**18;\r\n        uint256 total_price = ticketPrice * _mintAmount;\r\n        require(\r\n            amount_sent == total_price,\r\n            \"Mint Amount and Amount Sent should match.\"\r\n        );\r\n        token.transferFrom(msg.sender, address(this), amount_sent);\r\n        for (uint256 i = 0; i < _mintAmount; i++) {\r\n            players.push(msg.sender);\r\n        }\r\n    }\r\n\r\n    function getSmartContractBalance() external view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function random() private view returns (uint256) {\r\n        return uint256(keccak256(abi.encode(block.timestamp, players)));\r\n    }\r\n\r\n    function getTicketCount(address playerAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < players.length; i++) {\r\n            if (players[i] == playerAddress) {\r\n                count += 1;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    function pickWinner() public restricted {\r\n        token.approve(address(this), MAX_INT);\r\n\r\n        uint256 winnerAmount = (token.balanceOf(address(this)) * winner) / 100;\r\n        uint256 feesAmount = (token.balanceOf(address(this)) * fee) / 100;\r\n        uint256 burnAmount = (token.balanceOf(address(this)) * burn) / 100;\r\n\r\n        uint256 index = random() % players.length;\r\n\r\n        token.transferFrom(address(this), players[index], winnerAmount);\r\n        token.transferFrom(address(this), manager, feesAmount);\r\n        token.transferFrom(address(this), burnAddress, burnAmount);\r\n\r\n        previousWinner = players[index];\r\n        players = new address[](0);\r\n    }\r\n\r\n    modifier restricted() {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSmartContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"getTicketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTicketPrice\",\"type\":\"uint256\"}],\"name\":\"updateTicketPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Lottery", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000df596ad12f927e41ec317af7dd666ca3574845f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8a321a461d5c01a2978ec9e24173d6380d34ec75b790127773e8c31e9f8e0236"}