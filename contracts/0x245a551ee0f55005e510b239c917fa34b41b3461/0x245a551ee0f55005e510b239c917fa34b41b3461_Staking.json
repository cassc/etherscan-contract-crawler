{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\nCopyright (c) 2016-2020 zOS Global Limited\\n\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\\"Software\\\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"},\"CTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface CTokenInterface {\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint);\\n\\n    function transfer(address dst, uint amount) external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function borrowBalanceStored(address account) external view returns (uint);\\n    function exchangeRateCurrent() external returns (uint);\\n    function exchangeRateStored() external view returns (uint);\\n    function getCash() external view returns (uint);\\n    function accrueInterest() external returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\n}\"},\"EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\nCopyright (c) 2016-2020 zOS Global Limited\\n\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\\"Software\\\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\nCopyright (c) 2016-2020 zOS Global Limited\\n\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\\"Software\\\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\nCopyright (c) 2016-2020 zOS Global Limited\\n\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\\"Software\\\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\nCopyright (c) 2016-2020 zOS Global Limited\\n\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\\"Software\\\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./CTokenInterface.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\n\\n\\ncontract Staking is ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint128 constant private BASE_MULTIPLIER = uint128(1 * 10 ** 18);\\n\\n    // timestamp for the epoch 1\\n    // everything before that is considered epoch 0 which won\\u0027t have a reward but allows for the initial stake\\n    uint256 public epoch1Start;\\n\\n    // duration of each epoch\\n    uint256 public epochDuration;\\n\\n    // holds the current balance of the user for each token\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private balances;\\n    mapping(address =\\u003e uint256) public stableCoinBalances;\\n    \\n    address constant public usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address constant public usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address constant public dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address constant public wbtcSwappLP = 0x5548F847Fd9a1D3487d5fbB2E8d73972803c4Cce;\\n    \\n    address constant public cUsdc = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;\\n    address constant public cUsdt = 0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9;\\n    address constant public cDai = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\\n    \\n    // address to pay interest from \u0421ompound\\n    address payable constant TEAM_ADDRESS = 0xde121Cc755c1D1786Dd46FfF7e373e9372FD79D8;\\n\\n    struct Pool {\\n        uint256 size;\\n        bool set;\\n    }\\n\\n    // for each token, we store the total pool size\\n    mapping(address =\\u003e mapping(uint256 =\\u003e Pool)) private poolSize;\\n\\n    // a checkpoint of the valid balance of a user for an epoch\\n    struct Checkpoint {\\n        uint128 epochId;\\n        uint128 multiplier;\\n        uint256 startBalance;\\n        uint256 newDeposits;\\n    }\\n\\n    // balanceCheckpoints[user][token][]\\n    mapping(address =\\u003e mapping(address =\\u003e Checkpoint[])) private balanceCheckpoints;\\n\\n    mapping(address =\\u003e uint128) private lastWithdrawEpochId;\\n\\n\\n    //referrals\\n    uint256 public firstReferrerRewardPercentage;\\n    uint256 public secondReferrerRewardPercentage;\\n\\n    struct Referrer {\\n        // uint256 totalReward;\\n        uint256 referralsCount;\\n        mapping(uint256 =\\u003e address) referrals;\\n    }\\n\\n    // staker to referrer\\n    mapping(address =\\u003e address) public referrals;\\n    // referrer data\\n    mapping(address =\\u003e Referrer) public referrers;\\n\\n    event Deposit(address indexed user, address indexed tokenAddress, uint256 amount);\\n    event Withdraw(address indexed user, address indexed tokenAddress, uint256 amount);\\n    event ManualEpochInit(address indexed caller, uint128 indexed epochId, address[] tokens);\\n    event EmergencyWithdraw(address indexed user, address indexed tokenAddress, uint256 amount);\\n    event RegisteredReferer(address referral, address referrer);\\n    \\n    event GetInterest(address indexed token, uint256 amount);\\n    event CheckInterest(uint256 cBalance, uint256 uBalance, uint256 interest);\\n\\n    address public _owner;\\n\\n    constructor () {\\n        epoch1Start = 1624230000;\\n        epochDuration = 2419200; // 28 days\\n\\n        _owner = msg.sender;\\n\\n        firstReferrerRewardPercentage = 1000;\\n        secondReferrerRewardPercentage = 500;\\n    }\\n\\n    function checkStableCoin(address token) public pure returns (bool) {\\n        if (token == usdc ||\\n            token == usdt ||\\n            token == dai\\n        ) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /*\\n     * Stores `amount` of `tokenAddress` tokens for the `user` into the vault\\n     */\\n    function deposit(address tokenAddress, uint256 amount, address referrer) public nonReentrant {\\n        require(amount \\u003e 0, \\\"Staking: Amount must be \\u003e 0\\\");\\n        bool isStableCoin = checkStableCoin(tokenAddress);\\n\\n        require(IERC20(tokenAddress).allowance(msg.sender, address(this)) \\u003e= amount, \\\"Staking: Token allowance too small\\\");\\n        \\n        if (isStableCoin) {\\n            stableCoinBalances[tokenAddress] = stableCoinBalances[tokenAddress].add(amount);\\n            if (tokenAddress == usdt) {\\n                EIP20NonStandardInterface token = EIP20NonStandardInterface(tokenAddress);\\n                token.transferFrom(msg.sender, address(this), amount);\\n            } else {\\n                IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);\\n            }\\n            _transferToCompound(tokenAddress, amount);\\n        } else {\\n            IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);\\n        }\\n\\n        if (referrer != address(0)) {\\n            processReferrals(referrer);\\n        }\\n\\n        balances[msg.sender][tokenAddress] = balances[msg.sender][tokenAddress].add(amount);\\n\\n        // epoch logic\\n        uint128 currentEpoch = getCurrentEpoch();\\n        uint128 currentMultiplier = currentEpochMultiplier();\\n\\n        if (!epochIsInitialized(tokenAddress, currentEpoch)) {\\n            address[] memory tokens = new address[](1);\\n            tokens[0] = tokenAddress;\\n            manualEpochInit(tokens, currentEpoch);\\n        }\\n\\n        // update the next epoch pool size\\n        Pool storage pNextEpoch = poolSize[tokenAddress][currentEpoch + 1];\\n        if (isStableCoin) {\\n            pNextEpoch.size = stableCoinBalances[tokenAddress];\\n        } else {\\n            pNextEpoch.size = IERC20(tokenAddress).balanceOf(address(this));\\n        }\\n        pNextEpoch.set = true;\\n\\n        Checkpoint[] storage checkpoints = balanceCheckpoints[msg.sender][tokenAddress];\\n\\n        uint256 balanceBefore = getEpochUserBalance(msg.sender, tokenAddress, currentEpoch);\\n\\n        // if there\\u0027s no checkpoint yet, it means the user didn\\u0027t have any activity\\n        // we want to store checkpoints both for the current epoch and next epoch because\\n        // if a user does a withdraw, the current epoch can also be modified and\\n        // we don\\u0027t want to insert another checkpoint in the middle of the array as that could be expensive\\n        if (checkpoints.length == 0) {\\n            checkpoints.push(Checkpoint(currentEpoch, currentMultiplier, 0, amount));\\n\\n            // next epoch =\\u003e multiplier is 1, epoch deposits is 0\\n            checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, amount, 0));\\n        } else {\\n            uint256 last = checkpoints.length - 1;\\n\\n            // the last action happened in an older epoch (e.g. a deposit in epoch 3, current epoch is \\u003e=5)\\n            if (checkpoints[last].epochId \\u003c currentEpoch) {\\n                uint128 multiplier = computeNewMultiplier(\\n                    getCheckpointBalance(checkpoints[last]),\\n                    BASE_MULTIPLIER,\\n                    amount,\\n                    currentMultiplier\\n                );\\n                checkpoints.push(Checkpoint(currentEpoch, multiplier, getCheckpointBalance(checkpoints[last]), amount));\\n                checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, balances[msg.sender][tokenAddress], 0));\\n            }\\n            // the last action happened in the previous epoch\\n            else if (checkpoints[last].epochId == currentEpoch) {\\n                checkpoints[last].multiplier = computeNewMultiplier(\\n                    getCheckpointBalance(checkpoints[last]),\\n                    checkpoints[last].multiplier,\\n                    amount,\\n                    currentMultiplier\\n                );\\n                checkpoints[last].newDeposits = checkpoints[last].newDeposits.add(amount);\\n\\n                checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, balances[msg.sender][tokenAddress], 0));\\n            }\\n            // the last action happened in the current epoch\\n            else {\\n                if (last \\u003e= 1 \\u0026\\u0026 checkpoints[last - 1].epochId == currentEpoch) {\\n                    checkpoints[last - 1].multiplier = computeNewMultiplier(\\n                        getCheckpointBalance(checkpoints[last - 1]),\\n                        checkpoints[last - 1].multiplier,\\n                        amount,\\n                        currentMultiplier\\n                    );\\n                    checkpoints[last - 1].newDeposits = checkpoints[last - 1].newDeposits.add(amount);\\n                }\\n\\n                checkpoints[last].startBalance = balances[msg.sender][tokenAddress];\\n            }\\n        }\\n\\n        uint256 balanceAfter = getEpochUserBalance(msg.sender, tokenAddress, currentEpoch);\\n\\n        poolSize[tokenAddress][currentEpoch].size = poolSize[tokenAddress][currentEpoch].size.add(balanceAfter.sub(balanceBefore));\\n\\n        emit Deposit(msg.sender, tokenAddress, amount);\\n    }\\n\\n    // must be in bases point ( 1,5% = 150 bp)\\n    function updateReferrersPercentage(uint256 first, uint256 second) external {\\n        require(msg.sender == _owner, \\\"Only owner can perfrom this action\\\");\\n        firstReferrerRewardPercentage = first;\\n        secondReferrerRewardPercentage = second;\\n    }\\n\\n    function processReferrals(address referrer) internal {\\n        //Return if sender has referrer alredy or referrer is contract or self ref\\n        if (hasReferrer(msg.sender) || !notContract(referrer) || referrer == msg.sender) {\\n            return;\\n        }\\n\\n        //check cross refs \\n        if (referrals[referrer] == msg.sender || referrals[referrals[referrer]] == msg.sender) {\\n            return;\\n        }\\n        \\n        //check if already has stake, do not add referrer if has\\n        if (balanceOf(msg.sender, usdc) \\u003e 0 || balanceOf(msg.sender, usdt) \\u003e 0 || balanceOf(msg.sender, dai) \\u003e 0 || balanceOf(msg.sender, wbtcSwappLP) \\u003e 0) {\\n            return;\\n        }\\n\\n        referrals[msg.sender] = referrer;\\n\\n        Referrer storage refData = referrers[referrer];\\n\\n        refData.referralsCount = refData.referralsCount.add(1);\\n        refData.referrals[refData.referralsCount] = msg.sender;\\n        emit RegisteredReferer(msg.sender, referrer);\\n    }\\n\\n    function hasReferrer(address addr) public view returns(bool) {\\n        return referrals[addr] != address(0);\\n    }\\n\\n    function getReferralById(address referrer, uint256 id) public view returns (address) {\\n        return referrers[referrer].referrals[id];\\n    }\\n    \\n    function _transferToCompound(address tokenAddress, uint256 amount) internal {\\n        address cToken = _getCompoundToken(tokenAddress);\\n        IERC20(tokenAddress).safeApprove(cToken, amount);\\n        CTokenInterface(cToken).mint(amount);\\n    }\\n    \\n    function _redeemFromCompound(address tokenAddress, uint256 amount) internal {\\n        address cToken = _getCompoundToken(tokenAddress);\\n        CTokenInterface(cToken).redeemUnderlying(amount);\\n    }\\n    \\n    function _getCompoundToken(address tokenAddress) internal pure returns (address cToken) {\\n        if (tokenAddress == usdc) {\\n            return cUsdc;\\n        }\\n        if (tokenAddress == usdt) {\\n            return cUsdt;\\n        }\\n        if (tokenAddress == dai) {\\n            return cDai;\\n        }\\n    }\\n    \\n    function checkInterestFromCompound(address tokenAddress) external returns (uint256 interest){\\n        bool isStableCoin = checkStableCoin(tokenAddress);\\n        require(isStableCoin, \\\"Wrong token address\\\");\\n        \\n        address cToken = _getCompoundToken(tokenAddress);\\n        uint256 cTBalance = CTokenInterface(cToken).balanceOf(address(this));\\n        if (cTBalance == 0) {\\n            emit CheckInterest(cTBalance, 0, 0);\\n            return 0;\\n        }\\n        \\n        uint256 cBalance = CTokenInterface(cToken).balanceOfUnderlying(address(this));\\n        uint256 balance = stableCoinBalances[tokenAddress];\\n        if (balance \\u003e= cBalance) {\\n            emit CheckInterest(cBalance, balance, 0);\\n            return 0;\\n        }\\n        \\n        uint256 _interest = cBalance.sub(balance);\\n        emit CheckInterest(cBalance, balance, _interest);\\n        return _interest;\\n    }\\n    \\n    //Get 80% of interest from Compound\\n    function getInterestFromCompound(address tokenAddress) external nonReentrant{\\n        bool isStableCoin = checkStableCoin(tokenAddress);\\n        require(isStableCoin, \\\"Wrong token address\\\");\\n        \\n        address cToken = _getCompoundToken(tokenAddress);\\n        uint256 cTBalance = CTokenInterface(cToken).balanceOf(address(this));\\n        require(cTBalance \\u003e 0, \\\"There is no interest to withdraw\\\");\\n\\n        uint256 cBalance = CTokenInterface(cToken).balanceOfUnderlying(address(this));\\n        uint256 balance = stableCoinBalances[tokenAddress];\\n        require(cBalance \\u003e balance, \\\"There is no interest to withdraw\\\");\\n\\n        uint256 interest = cBalance.sub(balance).mul(4).div(5);\\n\\n        if (interest \\u003e 0) {\\n            CTokenInterface(cToken).redeemUnderlying(interest);\\n            if (tokenAddress == usdt) {\\n                EIP20NonStandardInterface(tokenAddress).transfer(TEAM_ADDRESS, interest);\\n            } else {\\n                IERC20(tokenAddress).transfer(TEAM_ADDRESS, interest);\\n            }\\n            emit GetInterest(tokenAddress, interest);\\n        }\\n    }\\n    \\n     //Get 100% of interest from Compound, recommended only after all users withdrawn their tokens\\n    function getInterest(address tokenAddress) external nonReentrant{\\n        bool isStableCoin = checkStableCoin(tokenAddress);\\n        require(isStableCoin, \\\"Wrong token address\\\");\\n        \\n        address cToken = _getCompoundToken(tokenAddress);\\n        uint256 cBalance = CTokenInterface(cToken).balanceOf(address(this));\\n        require(cBalance \\u003e 0, \\\"No funds to withdraw\\\");\\n        uint256 balance = stableCoinBalances[tokenAddress];\\n        CTokenInterface(cToken).redeem(cBalance);\\n        \\n        uint256 tokenBalance = IERC20(tokenAddress).balanceOf(address(this));\\n        \\n        uint256 interest = tokenBalance.sub(balance);\\n        if (interest \\u003e 0) {\\n            if (tokenAddress == usdt) {\\n                EIP20NonStandardInterface(tokenAddress).transfer(TEAM_ADDRESS, interest);\\n            } else {\\n                IERC20(tokenAddress).transfer(TEAM_ADDRESS, interest);\\n            }\\n            emit GetInterest(tokenAddress, interest);\\n        }\\n        \\n        if (balance \\u003e 0) {\\n            IERC20(tokenAddress).safeApprove(cToken, balance);\\n            CTokenInterface(cToken).mint(balance);\\n        }\\n    }\\n    \\n    /*\\n     * Removes the deposit of the user and sends the amount of `tokenAddress` back to the `user`\\n     */\\n    function withdraw(address tokenAddress, uint256 amount) public nonReentrant {\\n        require(balances[msg.sender][tokenAddress] \\u003e= amount, \\\"Staking: balance too small\\\");\\n\\n        bool isStableCoin = checkStableCoin(tokenAddress);\\n\\n        balances[msg.sender][tokenAddress] = balances[msg.sender][tokenAddress].sub(amount);\\n\\n        if (isStableCoin) {\\n            stableCoinBalances[tokenAddress] = stableCoinBalances[tokenAddress].sub(amount);\\n            _redeemFromCompound(tokenAddress, amount);\\n            if (tokenAddress == usdt) {\\n                EIP20NonStandardInterface(tokenAddress).transfer(msg.sender, amount);\\n            } else {\\n                IERC20(tokenAddress).transfer(msg.sender, amount);\\n            }\\n        } else {\\n            IERC20(tokenAddress).transfer(msg.sender, amount);\\n        }\\n\\n        // epoch logic\\n        uint128 currentEpoch = getCurrentEpoch();\\n\\n        lastWithdrawEpochId[tokenAddress] = currentEpoch;\\n\\n        if (!epochIsInitialized(tokenAddress, currentEpoch)) {\\n            address[] memory tokens = new address[](1);\\n            tokens[0] = tokenAddress;\\n            manualEpochInit(tokens, currentEpoch);\\n        }\\n\\n        // update the pool size of the next epoch to its current balance\\n        Pool storage pNextEpoch = poolSize[tokenAddress][currentEpoch + 1];\\n        if (isStableCoin) {\\n            pNextEpoch.size = stableCoinBalances[tokenAddress];\\n        } else {\\n            pNextEpoch.size = IERC20(tokenAddress).balanceOf(address(this));\\n        }\\n        pNextEpoch.set = true;\\n\\n        Checkpoint[] storage checkpoints = balanceCheckpoints[msg.sender][tokenAddress];\\n        uint256 last = checkpoints.length - 1;\\n\\n        // note: it\\u0027s impossible to have a withdraw and no checkpoints because the balance would be 0 and revert\\n\\n        // there was a deposit in an older epoch (more than 1 behind [eg: previous 0, now 5]) but no other action since then\\n        if (checkpoints[last].epochId \\u003c currentEpoch) {\\n            checkpoints.push(Checkpoint(currentEpoch, BASE_MULTIPLIER, balances[msg.sender][tokenAddress], 0));\\n\\n            poolSize[tokenAddress][currentEpoch].size = poolSize[tokenAddress][currentEpoch].size.sub(amount);\\n        }\\n        // there was a deposit in the `epochId - 1` epoch =\\u003e we have a checkpoint for the current epoch\\n        else if (checkpoints[last].epochId == currentEpoch) {\\n            checkpoints[last].startBalance = balances[msg.sender][tokenAddress];\\n            checkpoints[last].newDeposits = 0;\\n            checkpoints[last].multiplier = BASE_MULTIPLIER;\\n\\n            poolSize[tokenAddress][currentEpoch].size = poolSize[tokenAddress][currentEpoch].size.sub(amount);\\n        }\\n        // there was a deposit in the current epoch\\n        else {\\n            Checkpoint storage currentEpochCheckpoint = checkpoints[last - 1];\\n\\n            uint256 balanceBefore = getCheckpointEffectiveBalance(currentEpochCheckpoint);\\n\\n            // in case of withdraw, we have 2 branches:\\n            // 1. the user withdraws less than he added in the current epoch\\n            // 2. the user withdraws more than he added in the current epoch (including 0)\\n            if (amount \\u003c currentEpochCheckpoint.newDeposits) {\\n                uint128 avgDepositMultiplier = uint128(\\n                    balanceBefore.sub(currentEpochCheckpoint.startBalance).mul(BASE_MULTIPLIER).div(currentEpochCheckpoint.newDeposits)\\n                );\\n\\n                currentEpochCheckpoint.newDeposits = currentEpochCheckpoint.newDeposits.sub(amount);\\n\\n                currentEpochCheckpoint.multiplier = computeNewMultiplier(\\n                    currentEpochCheckpoint.startBalance,\\n                    BASE_MULTIPLIER,\\n                    currentEpochCheckpoint.newDeposits,\\n                    avgDepositMultiplier\\n                );\\n            } else {\\n                currentEpochCheckpoint.startBalance = currentEpochCheckpoint.startBalance.sub(\\n                    amount.sub(currentEpochCheckpoint.newDeposits)\\n                );\\n                currentEpochCheckpoint.newDeposits = 0;\\n                currentEpochCheckpoint.multiplier = BASE_MULTIPLIER;\\n            }\\n\\n            uint256 balanceAfter = getCheckpointEffectiveBalance(currentEpochCheckpoint);\\n\\n            poolSize[tokenAddress][currentEpoch].size = poolSize[tokenAddress][currentEpoch].size.sub(balanceBefore.sub(balanceAfter));\\n\\n            checkpoints[last].startBalance = balances[msg.sender][tokenAddress];\\n        }\\n\\n        emit Withdraw(msg.sender, tokenAddress, amount);\\n    }\\n\\n    /*\\n     * manualEpochInit can be used by anyone to initialize an epoch based on the previous one\\n     * This is only applicable if there was no action (deposit/withdraw) in the current epoch.\\n     * Any deposit and withdraw will automatically initialize the current and next epoch.\\n     */\\n    function manualEpochInit(address[] memory tokens, uint128 epochId) public {\\n        require(epochId \\u003c= getCurrentEpoch(), \\\"can\\u0027t init a future epoch\\\");\\n\\n        for (uint i = 0; i \\u003c tokens.length; i++) {\\n            Pool storage p = poolSize[tokens[i]][epochId];\\n\\n            if (epochId == 0) {\\n                p.size = uint256(0);\\n                p.set = true;\\n            } else {\\n                require(!epochIsInitialized(tokens[i], epochId), \\\"Staking: epoch already initialized\\\");\\n                require(epochIsInitialized(tokens[i], epochId - 1), \\\"Staking: previous epoch not initialized\\\");\\n\\n                p.size = poolSize[tokens[i]][epochId - 1].size;\\n                p.set = true;\\n            }\\n        }\\n\\n        emit ManualEpochInit(msg.sender, epochId, tokens);\\n    }\\n\\n    function emergencyWithdraw(address tokenAddress) public {\\n        bool isStableCoin = checkStableCoin(tokenAddress);\\n        require(!isStableCoin, \\\"Cant withdraw stable coins\\\");\\n        require((getCurrentEpoch() - lastWithdrawEpochId[tokenAddress]) \\u003e= 10, \\\"At least 10 epochs must pass without success\\\");\\n\\n        uint256 totalUserBalance = balances[msg.sender][tokenAddress];\\n        require(totalUserBalance \\u003e 0, \\\"Amount must be \\u003e 0\\\");\\n\\n        balances[msg.sender][tokenAddress] = 0;\\n\\n        IERC20 token = IERC20(tokenAddress);\\n        token.transfer(msg.sender, totalUserBalance);\\n\\n        emit EmergencyWithdraw(msg.sender, tokenAddress, totalUserBalance);\\n    }\\n\\n    /*\\n     * Returns the valid balance of a user that was taken into consideration in the total pool size for the epoch\\n     * A deposit will only change the next epoch balance.\\n     * A withdraw will decrease the current epoch (and subsequent) balance.\\n     */\\n    function getEpochUserBalance(address user, address token, uint128 epochId) public view returns (uint256) {\\n        Checkpoint[] storage checkpoints = balanceCheckpoints[user][token];\\n\\n        // if there are no checkpoints, it means the user never deposited any tokens, so the balance is 0\\n        if (checkpoints.length == 0 || epochId \\u003c checkpoints[0].epochId) {\\n            return 0;\\n        }\\n\\n        uint min = 0;\\n        uint max = checkpoints.length - 1;\\n\\n        // shortcut for blocks newer than the latest checkpoint == current balance\\n        if (epochId \\u003e= checkpoints[max].epochId) {\\n            return getCheckpointEffectiveBalance(checkpoints[max]);\\n        }\\n\\n        // binary search of the value in the array\\n        while (max \\u003e min) {\\n            uint mid = (max + min + 1) / 2;\\n            if (checkpoints[mid].epochId \\u003c= epochId) {\\n                min = mid;\\n            } else {\\n                max = mid - 1;\\n            }\\n        }\\n\\n        return getCheckpointEffectiveBalance(checkpoints[min]);\\n    }\\n\\n    /*\\n     * Returns the amount of `token` that the `user` has currently staked\\n     */\\n    function balanceOf(address user, address token) public view returns (uint256) {\\n        return balances[user][token];\\n    }\\n\\n    /*\\n     * Returns the id of the current epoch derived from block.timestamp\\n     */\\n    function getCurrentEpoch() public view returns (uint128) {\\n        if (block.timestamp \\u003c epoch1Start) {\\n            return 0;\\n        }\\n\\n        return uint128((block.timestamp - epoch1Start) / epochDuration + 1);\\n    }\\n\\n    /*\\n     * Returns the total amount of `tokenAddress` that was locked from beginning to end of epoch identified by `epochId`\\n     */\\n    function getEpochPoolSize(address tokenAddress, uint128 epochId) public view returns (uint256) {\\n        // Premises:\\n        // 1. it\\u0027s impossible to have gaps of uninitialized epochs\\n        // - any deposit or withdraw initialize the current epoch which requires the previous one to be initialized\\n        if (epochIsInitialized(tokenAddress, epochId)) {\\n            return poolSize[tokenAddress][epochId].size;\\n        }\\n\\n        // epochId not initialized and epoch 0 not initialized =\\u003e there was never any action on this pool\\n        if (!epochIsInitialized(tokenAddress, 0)) {\\n            return 0;\\n        }\\n\\n        // epoch 0 is initialized =\\u003e there was an action at some point but none that initialized the epochId\\n        // which means the current pool size is equal to the current balance of token held by the staking contract\\n        IERC20 token = IERC20(tokenAddress);\\n\\n        if (checkStableCoin(tokenAddress)) {\\n            return stableCoinBalances[tokenAddress];\\n        }\\n\\n        return token.balanceOf(address(this));\\n    }\\n\\n    /*\\n     * Returns the percentage of time left in the current epoch\\n     */\\n    function currentEpochMultiplier() public view returns (uint128) {\\n        uint128 currentEpoch = getCurrentEpoch();\\n        uint256 currentEpochEnd = epoch1Start + currentEpoch * epochDuration;\\n        uint256 timeLeft = currentEpochEnd - block.timestamp;\\n        uint128 multiplier = uint128(timeLeft * BASE_MULTIPLIER / epochDuration);\\n\\n        return multiplier;\\n    }\\n\\n    function computeNewMultiplier(uint256 prevBalance, uint128 prevMultiplier, uint256 amount, uint128 currentMultiplier) public pure returns (uint128) {\\n        uint256 prevAmount = prevBalance.mul(prevMultiplier).div(BASE_MULTIPLIER);\\n        uint256 addAmount = amount.mul(currentMultiplier).div(BASE_MULTIPLIER);\\n        uint128 newMultiplier = uint128(prevAmount.add(addAmount).mul(BASE_MULTIPLIER).div(prevBalance.add(amount)));\\n\\n        return newMultiplier;\\n    }\\n\\n    /*\\n     * Checks if an epoch is initialized, meaning we have a pool size set for it\\n     */\\n    function epochIsInitialized(address token, uint128 epochId) public view returns (bool) {\\n        return poolSize[token][epochId].set;\\n    }\\n\\n    function getCheckpointBalance(Checkpoint memory c) internal pure returns (uint256) {\\n        return c.startBalance.add(c.newDeposits);\\n    }\\n\\n    function getCheckpointEffectiveBalance(Checkpoint memory c) internal pure returns (uint256) {\\n        return getCheckpointBalance(c).mul(c.multiplier).div(BASE_MULTIPLIER);\\n    }\\n\\n    function notContract(address _addr) internal view returns (bool) {\\n        uint32 size;\\n        assembly { size := extcodesize(_addr) }\\n        return (size == 0);\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"name\":\"CheckInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GetInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"ManualEpochInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"RegisteredReferer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cDai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUsdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUsdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"checkInterestFromCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkStableCoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prevBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"prevMultiplier\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"currentMultiplier\",\"type\":\"uint128\"}],\"name\":\"computeNewMultiplier\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpochMultiplier\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch1Start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"epochIsInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstReferrerRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"getEpochPoolSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"getEpochUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getInterestFromCompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getReferralById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"hasReferrer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"manualEpochInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"referralsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondReferrerRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableCoinBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"first\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"second\",\"type\":\"uint256\"}],\"name\":\"updateReferrersPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtcSwappLP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6bc143d611ac79aad67b2b88271948959fa52a762cc636e911fe877ff7663582"}