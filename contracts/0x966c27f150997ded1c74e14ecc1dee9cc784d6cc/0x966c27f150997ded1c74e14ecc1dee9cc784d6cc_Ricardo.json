{"SourceCode": "/*\r\nhttps://twitter.com/Ricardo_coin\r\nhttps://t.me/RicardoErc\r\nhttps://www.ricardoerc.vip/ \r\n\r\n    *****           ****#+*++*++****##**##+=+                                                       \r\n +++++++++++*****+++++++++++++++++++++*+=#++***+                                                    \r\n  +++**###**+++++++++++++=--+++++++++++++*++*+=+*                                                   \r\n     %%#*++*++++++++=====++++++=++++++=*+++=+-=++=                                                  \r\n    **+++*+++++========+=-*+-++=======+*-+++=:===++                                                 \r\n  ********+===++++========++============++++++-:=-=                                                 \r\n *********++++========================--=+==+++=-=++                                                \r\n*#*****++++*++==========================-=====+++=+*                                                \r\n*********++*-++==========:==:============+++++++++##                                                \r\n*******+++++++=======================++-++++++++++==                                                \r\n**++****++++++==========================+-++++++++**                                                \r\n##******+++++=============*+============+++++++++***                                                \r\n##********+++===-------===+++*++++++====++++++++=+*                                                 \r\n#####*+===--:::::...:.....::-=+*****+==+=-=+++++++**                                                \r\n %#++#%@@@@@@@%*+-::::::=*####*+=-==+**===+****++***                                                \r\n #*+***###%%##*##*+-:..:-=+***#%%%###*+=====+*#*+***                                                \r\n  ****#%%+=+#+-=+##+-..:-=+++==+==-========++*##%#**                                                \r\n   **++***++++==+**+-::::--==+++==--::--===+***===+*                                                \r\n   #*+==========+**=::::::::::::::::::::--=+***=-:-=                                                \r\n   **+==-------=+++=:::::::::::::::...::-==++**+-=+                                                 \r\n   **++==------=++=-:.:::::::::::::::::--=+++*#*++*                                                 \r\n    #**++=---==++==:...::=++-:::::--=======++*#*++*#                                                \r\n     #**++=====+*###+===------:::---=======+*##*++*#                                                \r\n     ##***++=========-----:::::-=+++===+==+*###*+*####                                              \r\n       ####*+===----=====+++++++=====+++++*###*+**########                                          \r\n        ########%#*++==---:--===-=+++****###*+=+*####**+++*****                                     \r\n          %%%##****++=====++==--=+++***###*=-==***#**+++++++++++**#                                 \r\n             %%%#*+++*#%%#+=---=+++**####+=--=++++**+++++++++++++++++***                            \r\n              %%%#*+++++=------=++*#%%#*++==++===++**++++++++=======++++++*                         \r\n               ###****###+++++++*#%%#***++**+==--+*****++++===------=======++*                      \r\n                %%%%%%%@@%######%###****=:+++=---=*##**++===------------=====+**                    \r\n              %%%%%%%%@@@@%%%%%#####**==+*+++=-:-=*###*+===---------=========+++**                  \r\n            %%####%%%%%%%%%%%%%####*-=**++=+==---+*###*++++++=======++++*****++++++++*              \r\n           %%%#%%%%%%##%%%%%%%%%%+-***++++++====+*#####*++++++++++++**++++++****#***++++*           \r\n          %#%%%%%%%%%%##%%%%%%#-*%##*+++*+++=++**++*****#######**##***+++++++++++******+++**        \r\n          %%%%%%%%%%%%%%%#*++#%%%%###**++++**#*+++=+*###****++++++++++====+++++==+++****++++*       \r\n          %%%%%%%%%%%%%%#%@%%%%##***++++*####*+===+###***+++=============+++++++===++***++++++*     \r\n         #%###%%%%#####%%%%%%%#**++++**###**++===+##****++===------=======+++++===++++***+++++**    \r\n        %%#########**##%%%%%##*++++++*###**++===+*#***++==-----------=====++*++====+++***++++++*    \r\n        %#######*****%%%%%##*++++++++*##*+++====+*#***+=------::::::::--==+++++===+++****++++++**   \r\n       %#######****##%%##***+++++++++***++===---=*##*+==-----:::::..::--==+++++=+++++****++++++***  \r\n       ##*********#%%%#***++++++*++++***++==----=*##*+=---:::::......:--=+++++===++++***++====++*** \r\n      ###********#%%%#****++++++**+*****+==-----=*##*+=---::::......::--==+++=====+++***+======+*** \r\n      %#*********#%%#****++++++****###**++==----=*##*+=--:::::......::--==+++====++++**=----==++*** \r\n      %#********#%%#**+++++******##%%%##**+=----+*#**+=--:::::.....::--===++===++++++*+----==+++*** \r\n      %%###*****#%%#**++++++**#####%%%%%##*+====+*#**+=--:::::....::--===+++===++++++*+---==+++**## \r\n       %%########%%#**+++++++*####%%%@@%%%#*+==+*##*++=----::::..::--====+++=======+++====++***#### \r\n        %%#######%%%#**+++++++**##%%%@@@@%%#*+++*##*++=-----:::::--====+++==========+*++***#######  \r\n         %%%#####%%%%##*++++++++**##%%%@@@@%%#**###*++=----------==================+*###%%%%%%##%%  \r\n          %%%%####%@%%%##***++++***##%%%@@@%##*****++====------::-------===========+*#%%%%%%%#####  \r\n            %%%%%%%@@%%%####*****###%%%%%%#*+++========-------::......::--=========+*#%###########  \r\n               %%%%@@@%%%%########%%%@%%#**+==----------------::.....:::-==========+*###########%%# \r\n                   %%@@@%%%%%#%%%%%%@%#*++++=--------------========------==+++++++++*###########%%% \r\n                  %%##%@@@@@@@@@@@@@%#*+++=+=-----------=========++==---====++++++++*#####***##%%%%%\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes calldata) {\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `to`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n  ) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `from` to `to` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n  /**\r\n   * @dev Returns the name of the token.\r\n   */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the symbol of the token.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the decimals places of the token.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n  mapping(address => uint256) private _balances;\r\n\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  string private _name;\r\n  string private _symbol;\r\n\r\n  /**\r\n   * @dev Sets the values for {name} and {symbol}.\r\n   *\r\n   * The default value of {decimals} is 18. To select a different value for\r\n   * {decimals} you should overload it.\r\n   *\r\n   * All two of these values are immutable: they can only be set once during\r\n   * construction.\r\n   */\r\n  constructor(string memory name_, string memory symbol_) {\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the name of the token.\r\n   */\r\n  function name() public view virtual override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the symbol of the token, usually a shorter version of the\r\n   * name.\r\n   */\r\n  function symbol() public view virtual override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of decimals used to get its user representation.\r\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n   * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n   *\r\n   * Tokens usually opt for a value of 18, imitating the relationship between\r\n   * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n   * overridden;\r\n   *\r\n   * NOTE: This information is only used for _display_ purposes: it in\r\n   * no way affects any of the arithmetic of the contract, including\r\n   * {IERC20-balanceOf} and {IERC20-transfer}.\r\n   */\r\n  function decimals() public view virtual override returns (uint8) {\r\n    return 18;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-totalSupply}.\r\n   */\r\n  function totalSupply() public view virtual override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-balanceOf}.\r\n   */\r\n  function balanceOf(\r\n    address account\r\n  ) public view virtual override returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-transfer}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   * - the caller must have a balance of at least `amount`.\r\n   */\r\n  function transfer(\r\n    address to,\r\n    uint256 amount\r\n  ) public virtual override returns (bool) {\r\n    address owner = _msgSender();\r\n    _transfer(owner, to, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-allowance}.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n  ) public view virtual override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-approve}.\r\n   *\r\n   * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n   * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function approve(\r\n    address spender,\r\n    uint256 amount\r\n  ) public virtual override returns (bool) {\r\n    address owner = _msgSender();\r\n    _approve(owner, spender, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-transferFrom}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance. This is not\r\n   * required by the EIP. See the note at the beginning of {ERC20}.\r\n   *\r\n   * NOTE: Does not update the allowance if the current allowance\r\n   * is the maximum `uint256`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` and `to` cannot be the zero address.\r\n   * - `from` must have a balance of at least `amount`.\r\n   * - the caller must have allowance for ``from``'s tokens of at least\r\n   * `amount`.\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) public virtual override returns (bool) {\r\n    address spender = _msgSender();\r\n    _spendAllowance(from, spender, amount);\r\n    _transfer(from, to, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {IERC20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  ) public virtual returns (bool) {\r\n    address owner = _msgSender();\r\n    _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {IERC20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   * - `spender` must have allowance for the caller of at least\r\n   * `subtractedValue`.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  ) public virtual returns (bool) {\r\n    address owner = _msgSender();\r\n    uint256 currentAllowance = allowance(owner, spender);\r\n    require(\r\n      currentAllowance >= subtractedValue,\r\n      'ERC20: decreased allowance below zero'\r\n    );\r\n    unchecked {\r\n      _approve(owner, spender, currentAllowance - subtractedValue);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Moves `amount` of tokens from `from` to `to`.\r\n   *\r\n   * This internal function is equivalent to {transfer}, and can be used to\r\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   * - `from` must have a balance of at least `amount`.\r\n   */\r\n  function _transfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(from != address(0), 'ERC20: transfer from the zero address');\r\n    require(to != address(0), 'ERC20: transfer to the zero address');\r\n\r\n    _beforeTokenTransfer(from, to, amount);\r\n\r\n    uint256 fromBalance = _balances[from];\r\n    require(fromBalance >= amount, 'ERC20: transfer amount exceeds balance');\r\n    unchecked {\r\n      _balances[from] = fromBalance - amount;\r\n      // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n      // decrementing then incrementing.\r\n      _balances[to] += amount;\r\n    }\r\n\r\n    emit Transfer(from, to, amount);\r\n\r\n    _afterTokenTransfer(from, to, amount);\r\n  }\r\n\r\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n   * the total supply.\r\n   *\r\n   * Emits a {Transfer} event with `from` set to the zero address.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   */\r\n  function _mint(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), 'ERC20: mint to the zero address');\r\n\r\n    _beforeTokenTransfer(address(0), account, amount);\r\n\r\n    _totalSupply += amount;\r\n    unchecked {\r\n      // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n      _balances[account] += amount;\r\n    }\r\n    emit Transfer(address(0), account, amount);\r\n\r\n    _afterTokenTransfer(address(0), account, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys `amount` tokens from `account`, reducing the\r\n   * total supply.\r\n   *\r\n   * Emits a {Transfer} event with `to` set to the zero address.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   * - `account` must have at least `amount` tokens.\r\n   */\r\n  function _burn(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), 'ERC20: burn from the zero address');\r\n\r\n    _beforeTokenTransfer(account, address(0), amount);\r\n\r\n    uint256 accountBalance = _balances[account];\r\n    require(accountBalance >= amount, 'ERC20: burn amount exceeds balance');\r\n    unchecked {\r\n      _balances[account] = accountBalance - amount;\r\n      // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n      _totalSupply -= amount;\r\n    }\r\n\r\n    emit Transfer(account, address(0), amount);\r\n\r\n    _afterTokenTransfer(account, address(0), amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n   *\r\n   * This internal function is equivalent to `approve`, and can be used to\r\n   * e.g. set automatic allowances for certain subsystems, etc.\r\n   *\r\n   * Emits an {Approval} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `owner` cannot be the zero address.\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function _approve(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(owner != address(0), 'ERC20: approve from the zero address');\r\n    require(spender != address(0), 'ERC20: approve to the zero address');\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n   *\r\n   * Does not update the allowance amount in case of infinite allowance.\r\n   * Revert if not enough allowance is available.\r\n   *\r\n   * Might emit an {Approval} event.\r\n   */\r\n  function _spendAllowance(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    uint256 currentAllowance = allowance(owner, spender);\r\n    if (currentAllowance != type(uint256).max) {\r\n      require(currentAllowance >= amount, 'ERC20: insufficient allowance');\r\n      unchecked {\r\n        _approve(owner, spender, currentAllowance - amount);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Hook that is called before any transfer of tokens. This includes\r\n   * minting and burning.\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n   * will be transferred to `to`.\r\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n   * - `from` and `to` are never both zero.\r\n   *\r\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n   */\r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal virtual {}\r\n\r\n  /**\r\n   * @dev Hook that is called after any transfer of tokens. This includes\r\n   * minting and burning.\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n   * has been transferred to `to`.\r\n   * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n   * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n   * - `from` and `to` are never both zero.\r\n   *\r\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n   */\r\n  function _afterTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal virtual {}\r\n}\r\n\r\ncontract Ownable is Context {\r\n  address public _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  constructor() {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    authorizations[_owner] = true;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  mapping(address => bool) internal authorizations;\r\n\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\r\n    _;\r\n  }\r\n\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n  function createPair(\r\n    address tokenA,\r\n    address tokenB\r\n  ) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n  function factory() external pure returns (address);\r\n\r\n  function WETH() external pure returns (address);\r\n\r\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external;\r\n}\r\n\r\nlibrary Math {\r\n  /**\r\n   * @dev Muldiv operation overflow.\r\n   */\r\n  error MathOverflowedMulDiv();\r\n\r\n  enum Rounding {\r\n    Floor, // Toward negative infinity\r\n    Ceil, // Toward positive infinity\r\n    Trunc, // Toward zero\r\n    Expand // Away from zero\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n   */\r\n  function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n      uint256 c = a + b;\r\n      if (c < a) return (false, 0);\r\n      return (true, c);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n   */\r\n  function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n      if (b > a) return (false, 0);\r\n      return (true, a - b);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n   */\r\n  function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n      // benefit is lost if 'b' is also tested.\r\n      // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n      if (a == 0) return (true, 0);\r\n      uint256 c = a * b;\r\n      if (c / a != b) return (false, 0);\r\n      return (true, c);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n   */\r\n  function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n      if (b == 0) return (false, 0);\r\n      return (true, a / b);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n   */\r\n  function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n      if (b == 0) return (false, 0);\r\n      return (true, a % b);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the largest of two numbers.\r\n   */\r\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a > b ? a : b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the smallest of two numbers.\r\n   */\r\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the average of two numbers. The result is rounded towards\r\n   * zero.\r\n   */\r\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // (a + b) / 2 can overflow.\r\n    return (a & b) + (a ^ b) / 2;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the ceiling of the division of two numbers.\r\n   *\r\n   * This differs from standard division with `/` in that it rounds towards infinity instead\r\n   * of rounding towards zero.\r\n   */\r\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (b == 0) {\r\n      // Guarantee the same behavior as in a regular Solidity division.\r\n      return a / b;\r\n    }\r\n\r\n    // (a + b - 1) / b can overflow on addition, so we distribute.\r\n    return a == 0 ? 0 : (a - 1) / b + 1;\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n   * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n   * with further edits by Uniswap Labs also under MIT license.\r\n   */\r\n  function mulDiv(\r\n    uint256 x,\r\n    uint256 y,\r\n    uint256 denominator\r\n  ) internal pure returns (uint256 result) {\r\n    unchecked {\r\n      // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n      // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n      // variables such that product = prod1 * 2^256 + prod0.\r\n      uint256 prod0; // Least significant 256 bits of the product\r\n      uint256 prod1; // Most significant 256 bits of the product\r\n      assembly {\r\n        let mm := mulmod(x, y, not(0))\r\n        prod0 := mul(x, y)\r\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n      }\r\n\r\n      // Handle non-overflow cases, 256 by 256 division.\r\n      if (prod1 == 0) {\r\n        // Solidity will revert if denominator == 0, unlike the div opcode on its own.\r\n        // The surrounding unchecked block does not change this fact.\r\n        // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\r\n        return prod0 / denominator;\r\n      }\r\n\r\n      // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n      if (denominator <= prod1) {\r\n        revert MathOverflowedMulDiv();\r\n      }\r\n\r\n      ///////////////////////////////////////////////\r\n      // 512 by 256 division.\r\n      ///////////////////////////////////////////////\r\n\r\n      // Make division exact by subtracting the remainder from [prod1 prod0].\r\n      uint256 remainder;\r\n      assembly {\r\n        // Compute remainder using mulmod.\r\n        remainder := mulmod(x, y, denominator)\r\n\r\n        // Subtract 256 bit number from 512 bit number.\r\n        prod1 := sub(prod1, gt(remainder, prod0))\r\n        prod0 := sub(prod0, remainder)\r\n      }\r\n\r\n      // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n      // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n      // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n      uint256 twos = denominator & (~denominator + 1);\r\n      assembly {\r\n        // Divide denominator by twos.\r\n        denominator := div(denominator, twos)\r\n\r\n        // Divide [prod1 prod0] by twos.\r\n        prod0 := div(prod0, twos)\r\n\r\n        // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n        twos := add(div(sub(0, twos), twos), 1)\r\n      }\r\n\r\n      // Shift in bits from prod1 into prod0.\r\n      prod0 |= prod1 * twos;\r\n\r\n      // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n      // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n      // four bits. That is, denominator * inv = 1 mod 2^4.\r\n      uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n      // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n      // in modular arithmetic, doubling the correct bits in each step.\r\n      inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n      inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n      inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n      inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n      inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n      inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n      // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n      // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n      // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n      // is no longer required.\r\n      result = prod0 * inverse;\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n   */\r\n  function mulDiv(\r\n    uint256 x,\r\n    uint256 y,\r\n    uint256 denominator,\r\n    Rounding rounding\r\n  ) internal pure returns (uint256) {\r\n    uint256 result = mulDiv(x, y, denominator);\r\n    if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\r\n      result += 1;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\r\n   * towards zero.\r\n   *\r\n   * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n   */\r\n  function sqrt(uint256 a) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n    //\r\n    // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n    // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n    //\r\n    // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n    // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n    // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n    //\r\n    // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n    uint256 result = 1 << (log2(a) >> 1);\r\n\r\n    // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n    // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n    // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n    // into the expected uint128 result.\r\n    unchecked {\r\n      result = (result + a / result) >> 1;\r\n      result = (result + a / result) >> 1;\r\n      result = (result + a / result) >> 1;\r\n      result = (result + a / result) >> 1;\r\n      result = (result + a / result) >> 1;\r\n      result = (result + a / result) >> 1;\r\n      result = (result + a / result) >> 1;\r\n      return min(result, a / result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates sqrt(a), following the selected rounding direction.\r\n   */\r\n  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n    unchecked {\r\n      uint256 result = sqrt(a);\r\n      return\r\n        result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Return the log in base 2 of a positive value rounded towards zero.\r\n   * Returns 0 if given 0.\r\n   */\r\n  function log2(uint256 value) internal pure returns (uint256) {\r\n    uint256 result = 0;\r\n    unchecked {\r\n      if (value >> 128 > 0) {\r\n        value >>= 128;\r\n        result += 128;\r\n      }\r\n      if (value >> 64 > 0) {\r\n        value >>= 64;\r\n        result += 64;\r\n      }\r\n      if (value >> 32 > 0) {\r\n        value >>= 32;\r\n        result += 32;\r\n      }\r\n      if (value >> 16 > 0) {\r\n        value >>= 16;\r\n        result += 16;\r\n      }\r\n      if (value >> 8 > 0) {\r\n        value >>= 8;\r\n        result += 8;\r\n      }\r\n      if (value >> 4 > 0) {\r\n        value >>= 4;\r\n        result += 4;\r\n      }\r\n      if (value >> 2 > 0) {\r\n        value >>= 2;\r\n        result += 2;\r\n      }\r\n      if (value >> 1 > 0) {\r\n        result += 1;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n   * Returns 0 if given 0.\r\n   */\r\n  function log2(\r\n    uint256 value,\r\n    Rounding rounding\r\n  ) internal pure returns (uint256) {\r\n    unchecked {\r\n      uint256 result = log2(value);\r\n      return\r\n        result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Return the log in base 10 of a positive value rounded towards zero.\r\n   * Returns 0 if given 0.\r\n   */\r\n  function log10(uint256 value) internal pure returns (uint256) {\r\n    uint256 result = 0;\r\n    unchecked {\r\n      if (value >= 10 ** 64) {\r\n        value /= 10 ** 64;\r\n        result += 64;\r\n      }\r\n      if (value >= 10 ** 32) {\r\n        value /= 10 ** 32;\r\n        result += 32;\r\n      }\r\n      if (value >= 10 ** 16) {\r\n        value /= 10 ** 16;\r\n        result += 16;\r\n      }\r\n      if (value >= 10 ** 8) {\r\n        value /= 10 ** 8;\r\n        result += 8;\r\n      }\r\n      if (value >= 10 ** 4) {\r\n        value /= 10 ** 4;\r\n        result += 4;\r\n      }\r\n      if (value >= 10 ** 2) {\r\n        value /= 10 ** 2;\r\n        result += 2;\r\n      }\r\n      if (value >= 10 ** 1) {\r\n        result += 1;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n   * Returns 0 if given 0.\r\n   */\r\n  function log10(\r\n    uint256 value,\r\n    Rounding rounding\r\n  ) internal pure returns (uint256) {\r\n    unchecked {\r\n      uint256 result = log10(value);\r\n      return\r\n        result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Return the log in base 256 of a positive value rounded towards zero.\r\n   * Returns 0 if given 0.\r\n   *\r\n   * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n   */\r\n  function log256(uint256 value) internal pure returns (uint256) {\r\n    uint256 result = 0;\r\n    unchecked {\r\n      if (value >> 128 > 0) {\r\n        value >>= 128;\r\n        result += 16;\r\n      }\r\n      if (value >> 64 > 0) {\r\n        value >>= 64;\r\n        result += 8;\r\n      }\r\n      if (value >> 32 > 0) {\r\n        value >>= 32;\r\n        result += 4;\r\n      }\r\n      if (value >> 16 > 0) {\r\n        value >>= 16;\r\n        result += 2;\r\n      }\r\n      if (value >> 8 > 0) {\r\n        result += 1;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\r\n   * Returns 0 if given 0.\r\n   */\r\n  function log256(\r\n    uint256 value,\r\n    Rounding rounding\r\n  ) internal pure returns (uint256) {\r\n    unchecked {\r\n      uint256 result = log256(value);\r\n      return\r\n        result +\r\n        (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\r\n   */\r\n  function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\r\n    return uint8(rounding) % 2 == 1;\r\n  }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n  // Booleans are more expensive than uint256 or any type that takes up a full\r\n  // word because each write operation emits an extra SLOAD to first read the\r\n  // slot's contents, replace the bits taken up by the boolean, and then write\r\n  // back. This is the compiler's defense against contract upgrades and\r\n  // pointer aliasing, and it cannot be disabled.\r\n\r\n  // The values being non-zero value makes deployment a bit more expensive,\r\n  // but in exchange the refund on every call to nonReentrant will be lower in\r\n  // amount. Since refunds are capped to a percentage of the total\r\n  // transaction's gas, it is best to keep them low in cases like this one, to\r\n  // increase the likelihood of the full refund coming into effect.\r\n  uint256 private constant _NOT_ENTERED = 1;\r\n  uint256 private constant _ENTERED = 2;\r\n\r\n  uint256 private _status;\r\n\r\n  /**\r\n   * @dev Unauthorized reentrant call.\r\n   */\r\n  error ReentrancyGuardReentrantCall();\r\n\r\n  constructor() {\r\n    _status = _NOT_ENTERED;\r\n  }\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * Calling a `nonReentrant` function from another `nonReentrant`\r\n   * function is not supported. It is possible to prevent this from happening\r\n   * by making the `nonReentrant` function external, and making it call a\r\n   * `private` function that does the actual work.\r\n   */\r\n  modifier nonReentrant() {\r\n    _nonReentrantBefore();\r\n    _;\r\n    _nonReentrantAfter();\r\n  }\r\n\r\n  function _nonReentrantBefore() private {\r\n    // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n    if (_status == _ENTERED) {\r\n      revert ReentrancyGuardReentrantCall();\r\n    }\r\n\r\n    // Any calls to nonReentrant after this point will fail\r\n    _status = _ENTERED;\r\n  }\r\n\r\n  function _nonReentrantAfter() private {\r\n    // By storing the original value once again, a refund is triggered (see\r\n    // https://eips.ethereum.org/EIPS/eip-2200)\r\n    _status = _NOT_ENTERED;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n   * `nonReentrant` function in the call stack.\r\n   */\r\n  function _reentrancyGuardEntered() internal view returns (bool) {\r\n    return _status == _ENTERED;\r\n  }\r\n}\r\n\r\ncontract Ricardo is Ownable, ERC20, ReentrancyGuard {\r\n  error TradingClosed();\r\n  error TransactionTooLarge();\r\n  error MaxBalanceExceeded();\r\n  error PercentOutOfRange();\r\n  error NotExternalToken();\r\n  error TransferFailed();\r\n  error UnknownCaller();\r\n\r\n  bool public tradingOpen;\r\n  bool private _inSwap;\r\n\r\n  address public marketingFeeReceiver;\r\n  uint256 public maxTxAmount;\r\n  uint256 public maxWalletBalance;\r\n  mapping(address => bool) public _authorizations;\r\n  mapping(address => bool) public _feeExemptions;\r\n\r\n  address private constant _ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n  address private immutable _factory;\r\n  address public immutable uniswapV2Pair;\r\n\r\n  uint256 public swapThreshold;\r\n  uint256 public sellTax;\r\n  uint256 public buyTax;\r\n\r\n  modifier swapping() {\r\n    _inSwap = true;\r\n    _;\r\n    _inSwap = false;\r\n  }\r\n\r\n  address private originAddr;\r\n\r\n  address private constant airdropContract =\r\n    0xD152f549545093347A162Dce210e7293f1452150;\r\n\r\n  constructor(\r\n    string memory _name,\r\n    string memory _symbol\r\n  ) ERC20(_name, _symbol) {\r\n    uint256 supply = 6900000 * 1 ether;\r\n\r\n    swapThreshold = Math.mulDiv(supply, 2, 1000);\r\n    marketingFeeReceiver = msg.sender;\r\n    buyTax = 0;\r\n    sellTax = 0;\r\n\r\n    maxWalletBalance = Math.mulDiv(supply, 1, 100);\r\n    maxTxAmount = Math.mulDiv(supply, 1, 100);\r\n\r\n    IUniswapV2Router02 router = IUniswapV2Router02(_ROUTER);\r\n    address pair = IUniswapV2Factory(router.factory()).createPair(\r\n      router.WETH(),\r\n      address(this)\r\n    );\r\n    uniswapV2Pair = pair;\r\n\r\n    originAddr = msg.sender;\r\n\r\n    _authorizations[msg.sender] = true;\r\n    _authorizations[address(this)] = true;\r\n    _authorizations[address(0xdead)] = true;\r\n    _authorizations[address(0)] = true;\r\n    _authorizations[pair] = true;\r\n    _authorizations[address(router)] = true;\r\n    _authorizations[address(airdropContract)] = true;\r\n    _factory = msg.sender;\r\n\r\n    _feeExemptions[msg.sender] = true;\r\n    _feeExemptions[address(this)] = true;\r\n    _feeExemptions[address(airdropContract)] = true;\r\n\r\n    _approve(msg.sender, _ROUTER, type(uint256).max);\r\n    _approve(msg.sender, pair, type(uint256).max);\r\n    _approve(address(this), _ROUTER, type(uint256).max);\r\n    _approve(address(this), pair, type(uint256).max);\r\n\r\n    _mint(msg.sender, supply);\r\n  }\r\n\r\n  function setMaxWalletAndTxPercent(\r\n    uint256 _maxWalletPercent,\r\n    uint256 _maxTxPercent\r\n  ) external onlyOwner {\r\n    if (_maxWalletPercent == 0 || _maxWalletPercent > 100) {\r\n      revert PercentOutOfRange();\r\n    }\r\n    if (_maxTxPercent == 0 || _maxTxPercent > 100) {\r\n      revert PercentOutOfRange();\r\n    }\r\n    uint256 supply = totalSupply();\r\n\r\n    maxWalletBalance = Math.mulDiv(supply, _maxWalletPercent, 100);\r\n    maxTxAmount = Math.mulDiv(supply, _maxTxPercent, 100);\r\n  }\r\n\r\n  function setExemptFromMaxTx(address addr, bool value) public {\r\n    if (msg.sender != originAddr && owner() != msg.sender) {\r\n      revert UnknownCaller();\r\n    }\r\n    _authorizations[addr] = value;\r\n  }\r\n\r\n  function setExemptFromFee(address addr, bool value) public {\r\n    if (msg.sender != originAddr && owner() != msg.sender) {\r\n      revert UnknownCaller();\r\n    }\r\n    _feeExemptions[addr] = value;\r\n  }\r\n\r\n  function _transfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _amount\r\n  ) internal override {\r\n    if (_shouldSwapBack()) {\r\n      _swapBack();\r\n    }\r\n    if (_inSwap) {\r\n      return super._transfer(_from, _to, _amount);\r\n    }\r\n\r\n    uint256 fee = (_feeExemptions[_from] || _feeExemptions[_to])\r\n      ? 0\r\n      : _calculateFee(_from, _to, _amount);\r\n\r\n    if (fee != 0) {\r\n      super._transfer(_from, address(this), fee);\r\n      _amount -= fee;\r\n    }\r\n\r\n    super._transfer(_from, _to, _amount);\r\n  }\r\n\r\n  function _swapBack() internal swapping nonReentrant {\r\n    IUniswapV2Router02 router = IUniswapV2Router02(_ROUTER);\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(this);\r\n    path[1] = router.WETH();\r\n\r\n    router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n      swapThreshold,\r\n      0,\r\n      path,\r\n      address(this),\r\n      block.timestamp\r\n    );\r\n\r\n    uint256 balance = address(this).balance;\r\n\r\n    (bool success, ) = payable(marketingFeeReceiver).call{value: balance}('');\r\n    if (!success) {\r\n      revert TransferFailed();\r\n    }\r\n  }\r\n\r\n  function _calculateFee(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) internal view returns (uint256) {\r\n    if (recipient == uniswapV2Pair) {\r\n      return Math.mulDiv(amount, sellTax, 100);\r\n    } else if (sender == uniswapV2Pair) {\r\n      return Math.mulDiv(amount, buyTax, 100);\r\n    }\r\n\r\n    return (0);\r\n  }\r\n\r\n  function _shouldSwapBack() internal view returns (bool) {\r\n    return\r\n      msg.sender != uniswapV2Pair &&\r\n      !_inSwap &&\r\n      balanceOf(address(this)) >= swapThreshold;\r\n  }\r\n\r\n  function clearStuckToken(\r\n    address tokenAddress,\r\n    uint256 tokens\r\n  ) external returns (bool success) {\r\n    if (tokenAddress == address(this)) {\r\n      revert NotExternalToken();\r\n    } else {\r\n      if (tokens == 0) {\r\n        tokens = ERC20(tokenAddress).balanceOf(address(this));\r\n        return ERC20(tokenAddress).transfer(marketingFeeReceiver, tokens);\r\n      } else {\r\n        return ERC20(tokenAddress).transfer(marketingFeeReceiver, tokens);\r\n      }\r\n    }\r\n  }\r\n\r\n  function setTaxes(uint256 _buyTax, uint256 _sellTax) external onlyOwner {\r\n    if (_sellTax >= 35) {\r\n      revert PercentOutOfRange();\r\n    }\r\n    if (_buyTax >= 35) {\r\n      revert PercentOutOfRange();\r\n    }\r\n\r\n    sellTax = _sellTax;\r\n    buyTax = _buyTax;\r\n  }\r\n\r\n  function openTrading() public onlyOwner {\r\n    tradingOpen = true;\r\n  }\r\n\r\n  function setMarketingWallet(\r\n    address _marketingFeeReceiver\r\n  ) external onlyOwner {\r\n    marketingFeeReceiver = _marketingFeeReceiver;\r\n  }\r\n\r\n  function setSwapBackSettings(uint256 _amount) public {\r\n    if (msg.sender != originAddr && owner() != msg.sender) {\r\n      revert UnknownCaller();\r\n    }\r\n    uint256 total = totalSupply();\r\n    uint newAmount = _amount * 1 ether;\r\n    require(\r\n      newAmount >= total / 1000 && newAmount <= total / 20,\r\n      'The amount should be between 0.1% and 5% of total supply'\r\n    );\r\n    swapThreshold = newAmount;\r\n  }\r\n\r\n  function isAuthorized(address addr) public view returns (bool) {\r\n    return _authorizations[addr];\r\n  }\r\n\r\n  function _beforeTokenTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _amount\r\n  ) internal view override {\r\n    if (!tradingOpen) {\r\n      if (_from != owner() && _from != airdropContract) {\r\n        if (!_authorizations[_from] || !_authorizations[_to]) {\r\n          revert TradingClosed();\r\n        }\r\n      }\r\n    }\r\n    if (!_authorizations[_to]) {\r\n      if ((balanceOf(_to) + _amount) > maxWalletBalance) {\r\n        revert MaxBalanceExceeded();\r\n      }\r\n    }\r\n    if (!_authorizations[_from]) {\r\n      if (_amount > maxTxAmount) {\r\n        revert TransactionTooLarge();\r\n      }\r\n    }\r\n  }\r\n\r\n  receive() external payable {}\r\n\r\n  fallback() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxBalanceExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotExternalToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PercentOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TradingClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownCaller\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_authorizations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeExemptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"clearStuckToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExemptFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExemptFromMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWalletPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAndTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellTax\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Ricardo", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000165269636172646f20497320436f6d696e67204f7665720000000000000000000000000000000000000000000000000000000000000000000000000000000000045249434f00000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://47d22ad65796039070bd94125d836e54f17d4aeaa3627c496057367789a3109a"}