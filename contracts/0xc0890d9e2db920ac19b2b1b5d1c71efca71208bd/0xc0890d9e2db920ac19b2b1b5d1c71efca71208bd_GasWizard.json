{"SourceCode": "// SPDX-License-Identifier: none\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// File: buytokenETH.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.22;\r\n\r\n\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint);\r\n  function description() external view returns (string memory); \r\n  function version() external view returns (uint);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint roundId,\r\n      uint answer,\r\n      uint startedAt,\r\n      uint updatedAt,\r\n      uint answeredInRound\r\n    );\r\n  function latestRoundData() \r\n    external \r\n    view \r\n    returns ( \r\n      uint roundId, \r\n      uint answer, \r\n      uint startedAt, \r\n      uint updatedAt,  \r\n      uint answeredInRound   \r\n    );\r\n\r\n}\r\ncontract PriceConsumerV3 {     \r\n \r\n    AggregatorV3Interface internal priceFeed;\r\n    AggregatorV3Interface internal btcPriceFeed;\r\n    AggregatorV3Interface internal ethPriceFeed;\r\n\r\n constructor() {\r\n        priceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419); \r\n        btcPriceFeed = AggregatorV3Interface(0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c); \r\n\r\n    }\r\n\r\n    function getThePrice() public view returns (uint) {\r\n        (\r\n            uint roundID, \r\n            uint price,  \r\n            uint startedAt,\r\n            uint timeStamp,\r\n            uint answeredInRound\r\n        ) = priceFeed.latestRoundData();\r\n        return price;\r\n    }\r\n\r\n     function getThePriceBtc() public view returns (uint) {\r\n        (\r\n            uint roundID, \r\n            uint price,\r\n            uint startedAt,\r\n            uint timeStamp,\r\n            uint answeredInRound\r\n        ) = btcPriceFeed.latestRoundData();\r\n        return price;\r\n    }\r\n\r\n     function getThePriceEth() public view returns (uint) {\r\n        (\r\n            uint roundID, \r\n            uint price,\r\n            uint startedAt,\r\n            uint timeStamp,\r\n            uint answeredInRound\r\n        ) = ethPriceFeed.latestRoundData();\r\n        return price;\r\n    }\r\n}\r\n\r\n\r\ninterface BEP20 {\r\n    function totalSupply() external view returns (uint theTotalSupply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}  \r\n\r\ncontract GasWizard is ReentrancyGuard {  \r\n  \r\n   PriceConsumerV3 priceConsumerV3 = new PriceConsumerV3(); \r\n   uint public priceOfBNB = priceConsumerV3.getThePrice();\r\n   uint public priceOfWbtc = priceConsumerV3.getThePriceBtc(); \r\n                  \r\n                  \r\n  struct Tariff {\r\n    uint time;  \r\n    uint percent;\r\n  }\r\n  \r\n  struct Deposit { \r\n    uint tariff;\r\n    uint amount;\r\n    uint tokenAmount;\r\n    uint at;\r\n  }\r\n  \r\n  struct Investor {\r\n    bool registered;\r\n    Deposit[] deposits;\r\n    uint invested;\r\n    \r\n  } \r\n\r\n   struct TokenPurchase {\r\n        address buyer; \r\n        uint amount;\r\n        uint timestamp;\r\n        uint amountType ;  // 0 = bnb , 1 =token \r\n\r\n    }  \r\n\r\n    TokenPurchase[] public allTokenPurchases;\r\n \r\n    \r\n\r\n  // mainnet\r\n   address public wbtc = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;  // WBTC MainNet           \r\n   address public usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;  //USDT Mainnet\r\n   address public usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;  // USDC MainNet \r\n\r\n  uint public tokenPrice;\r\n  uint public tokenPriceDecimal;\r\n\r\n\r\n\r\n  event OwnershipTransferred(address);\r\n  \r\n  address public owner = msg.sender;\r\n  address public owner1 = 0xe65E456C12881c00AA30CeAA2360100E5AcF9BF1 ;\r\n  \r\n  \r\n  uint public totalInvested;\r\n   address  payable  public   contractAddr = payable(0x379ffe4cf004c2fb0Aca349Fa0d8876eFc89E52c);\r\n  \r\n  mapping (address => Investor) public investors;\r\n  mapping(address => TokenPurchase[]) public tokenPurchases;\r\n  event DepositAt(address user, uint tariff, uint amount);\r\n  event Withdraw(address user, uint amount);\r\n  \r\n  constructor() {\r\n    tokenPrice = 1;\r\n    tokenPriceDecimal = 2;\r\n\r\n\r\n  }\r\n\r\nfunction buyTokenWithETH(address payable _to) external payable { \r\n    uint tariff = 0;\r\n    require(msg.value >= 0);\r\n    priceOfBNB = priceConsumerV3.getThePrice();\r\n    uint tokenVal = (msg.value * priceOfBNB * 10**tokenPriceDecimal) / (tokenPrice * 100000000);\r\n    \r\n    if (isContract(_to)) {\r\n        (bool success, ) = _to.call{value: msg.value}(\"\");\r\n        require(success, \"Transfer to contract failed\");\r\n    } else {\r\n        _to.transfer(msg.value);\r\n    }\r\n    \r\n    investors[msg.sender].invested += tokenVal;\r\n    investors[msg.sender].deposits.push(Deposit(tariff, msg.value, tokenVal, block.timestamp));\r\n    allTokenPurchases.push(TokenPurchase(msg.sender, msg.value, block.timestamp, 0));   \r\n    emit DepositAt(msg.sender, tariff, tokenVal);\r\n}\r\n\r\n\r\n\r\nfunction isContract(address addr) internal view returns (bool) {\r\n    uint size;\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n}\r\n\r\n\r\n  function buyWithToken(uint amount,uint investToken) external {\r\n        require(investToken==1 || investToken==2 || investToken==3  , \"invalid Token\");\r\n\r\n        address duductToken = usdt;\r\n        uint currencyPrice = 1; \r\n        uint currencyPriceDecimal = 0;\r\n\r\n        if(investToken==1){\r\n            duductToken = wbtc;\r\n            priceOfWbtc = priceConsumerV3.getThePriceBtc();\r\n            currencyPrice = priceOfWbtc;\r\n            currencyPriceDecimal = 8;\r\n        }\r\n\r\n        else if(investToken==2){\r\n            duductToken = usdt;\r\n        }\r\n        else {\r\n            duductToken = usdc;\r\n        }\r\n        BEP20 receiveToken = BEP20(duductToken);  \r\n           \r\n        \r\n        \r\n        uint tokenVal = (amount* currencyPrice* (10**tokenPriceDecimal)) / (tokenPrice * (10**currencyPriceDecimal)) ; \r\n        \r\n        require(receiveToken.balanceOf(msg.sender) >= amount, \"Insufficient user balance\");\r\n      \r\n       receiveToken.transferFrom(msg.sender, contractAddr, amount);\r\n       \r\n        investors[msg.sender].invested += tokenVal;\r\n        investors[msg.sender].deposits.push(Deposit(investToken,amount,tokenVal,block.timestamp));\r\n        allTokenPurchases.push(TokenPurchase(msg.sender, amount, block.timestamp, investToken));   \r\n         emit DepositAt(msg.sender, investToken, tokenVal);\r\n  \r\n  } \r\n\r\n\r\n\r\n    // Set buy price  \r\n  function setBuyPrice(uint _price, uint _decimal) public {\r\n    require(msg.sender == owner || msg.sender == owner1, \"Only owner or owner1\");\r\n    tokenPrice = _price;\r\n    tokenPriceDecimal = _decimal;\r\n}\r\n \r\n\r\n\r\n  function updateOwner1(address _newOwner1) public {\r\n      require(msg.sender == owner, \"Only owner can update owner1\");\r\n      owner1 = _newOwner1;\r\n}\r\n\r\n\r\nfunction updatecontractadd(address payable _newaddr) public {\r\n   require(msg.sender == owner, \"only owner can update contractadd\");\r\n   contractAddr = _newaddr; \r\n}\r\n\r\n\r\n\r\n          // Owner BNB Withdraw    \r\n    // Only owner can withdraw BNB \r\n      function withdrawBNB(address payable to, uint amount) public nonReentrant  returns(bool) {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(to != address(0), \"Cannot send to zero address\");\r\n        to.transfer(amount);\r\n        return true;\r\n    }\r\n\r\n      function usd_price() public view returns (uint) {\r\n      return priceOfBNB;\r\n  }\r\n\r\n   function tokenInBNB(uint amount) public view returns (uint) {\r\n        uint tokenVal = (amount * priceOfBNB* 10**tokenPriceDecimal) /(tokenPrice*100000000*1000000000000000000) ;\r\n        return (tokenVal);    \r\n    }\r\n  \r\n\r\n    function tokenInBUSD(uint amount) public view returns (uint) {\r\n        uint tokenVal = (amount * 10**tokenPriceDecimal ) /(tokenPrice*1000000000000000000) ;\r\n        return (tokenVal);\r\n    }\r\n\r\n     function tokenInWbtc(uint amount) public view returns (uint) {\r\n        uint tokenVal = (amount * priceOfWbtc* 10**tokenPriceDecimal) /(tokenPrice*100000000*1000000000000000000) ;\r\n        return (tokenVal);\r\n    }\r\n\r\n    // Owner Token Withdraw    \r\n    // Only owner can withdraw token \r\n\r\n    function withdrawToken(address tokenAddress, address to, uint amount) public nonReentrant  returns(bool) {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(to != address(0), \"Cannot send to zero address\");\r\n        BEP20 _token = BEP20(tokenAddress);\r\n        _token.transfer(to, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    // Ownership Transfer\r\n    // Only owner can call this function\r\n    function transferOwnership(address to) public returns(bool) {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(to != address(0), \"Cannot transfer ownership to zero address\");\r\n        owner = to;\r\n        emit OwnershipTransferred(to);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n        // View details\r\n    function userDeposits(address indexAddress) public view returns (uint[] memory tariffs,uint[] memory amounts,uint[] memory getTokens, uint[] memory times) {\r\n        uint len = investors[indexAddress].deposits.length;\r\n        tariffs = new uint[](len);\r\n        amounts = new uint[](len);\r\n        getTokens = new uint[](len);\r\n        times = new uint[](len);\r\n        \r\n        for(uint i = 0; i <len; i++){\r\n            tariffs[i] = investors[indexAddress].deposits[i].tariff;\r\n            amounts[i] = investors[indexAddress].deposits[i].amount;\r\n            getTokens[i] = investors[indexAddress].deposits[i].tokenAmount;\r\n            times[i] = investors[indexAddress].deposits[i].at;\r\n            \r\n        }\r\n        return (tariffs, amounts, getTokens, times);\r\n    }\r\n\r\n    function allPrice() public view returns (uint ,uint ,uint,uint,uint,uint,uint) {\r\n       \r\n        return (priceOfBNB, tokenPrice, tokenPriceDecimal,priceOfWbtc,8 ,0,0);\r\n    }   \r\n\r\n    function getAllTokenPurchases() public view returns (TokenPurchase[] memory) {\r\n           return allTokenPurchases;\r\n}\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tariff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositAt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allTokenPurchases\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountType\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"buyTokenWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investToken\",\"type\":\"uint256\"}],\"name\":\"buyWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokenPurchases\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountType\",\"type\":\"uint256\"}],\"internalType\":\"struct GasWizard.TokenPurchase[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"invested\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOfBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOfWbtc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimal\",\"type\":\"uint256\"}],\"name\":\"setBuyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenInBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenInBUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenInWbtc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPurchases\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountType\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner1\",\"type\":\"address\"}],\"name\":\"updateOwner1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newaddr\",\"type\":\"address\"}],\"name\":\"updatecontractadd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usd_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"indexAddress\",\"type\":\"address\"}],\"name\":\"userDeposits\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tariffs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"getTokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"times\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBNB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GasWizard", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0c350acb868bb760c741696ab140fd0302ea7fd9cd49b242d7bc3b7bd80e39fd"}