{"SourceCode": "# pragma version 0.3.10\r\n# pragma evm-version shanghai\r\n\"\"\"\r\n@title CurveStableSwapNGViews\r\n@author Curve.Fi\r\n@license Copyright (c) Curve.Fi, 2020-2023 - all rights reserved\r\n@notice Auxiliary contract for Stableswap-NG containing utility methods for\r\n        integrators\r\n\"\"\"\r\n\r\ninterface StableSwapNG:\r\n    def N_COINS() -> uint256: view\r\n    def BASE_POOL() -> address: view\r\n    def BASE_N_COINS() -> uint256: view\r\n    def stored_rates() -> DynArray[uint256, MAX_COINS]: view\r\n    def balances(i: uint256) -> uint256: view\r\n    def get_balances() -> DynArray[uint256, MAX_COINS]: view\r\n    def fee() -> uint256: view\r\n    def get_dy(i: int128, j: int128, dx: uint256) -> uint256: view\r\n    def A() -> uint256: view\r\n    def calc_withdraw_one_coin(_token_amount: uint256, i: int128) -> uint256: view\r\n    def totalSupply() -> uint256: view\r\n    def calc_token_amount(amounts: DynArray[uint256, MAX_COINS], deposit: bool) -> uint256: view\r\n    def offpeg_fee_multiplier() -> uint256: view\r\n\r\ninterface StableSwap2:\r\n    def calc_token_amount(amounts: uint256[2], deposit: bool) -> uint256: view\r\n\r\ninterface StableSwap3:\r\n    def calc_token_amount(amounts: uint256[3], deposit: bool) -> uint256: view\r\n\r\n\r\nA_PRECISION: constant(uint256) = 100\r\nMAX_COINS: constant(uint256) = 8\r\nPRECISION: constant(uint256) = 10 ** 18\r\nFEE_DENOMINATOR: constant(uint256) = 10 ** 10\r\n\r\n\r\n# ------------------------------ Public Getters ------------------------------\r\n\r\n\r\n@view\r\n@external\r\ndef get_dx(i: int128, j: int128, dy: uint256, pool: address) -> uint256:\r\n    \"\"\"\r\n    @notice Calculate the current input dx given output dy\r\n    @dev Index values can be found via the `coins` public getter method\r\n    @param i Index value for the coin to send\r\n    @param j Index valie of the coin to recieve\r\n    @param dy Amount of `j` being received after exchange\r\n    @return Amount of `i` predicted\r\n    \"\"\"\r\n    N_COINS: uint256 = StableSwapNG(pool).N_COINS()\r\n    return self._get_dx(i, j, dy, pool, False, N_COINS)\r\n\r\n\r\n@view\r\n@external\r\ndef get_dy(i: int128, j: int128, dx: uint256, pool: address) -> uint256:\r\n    \"\"\"\r\n    @notice Calculate the current output dy given input dx\r\n    @dev Index values can be found via the `coins` public getter method\r\n    @param i Index value for the coin to send\r\n    @param j Index valie of the coin to recieve\r\n    @param dx Amount of `i` being exchanged\r\n    @return Amount of `j` predicted\r\n    \"\"\"\r\n    N_COINS: uint256 = StableSwapNG(pool).N_COINS()\r\n\r\n    rates: DynArray[uint256, MAX_COINS] = empty(DynArray[uint256, MAX_COINS])\r\n    balances: DynArray[uint256, MAX_COINS] = empty(DynArray[uint256, MAX_COINS])\r\n    xp: DynArray[uint256, MAX_COINS] = empty(DynArray[uint256, MAX_COINS])\r\n    rates, balances, xp = self._get_rates_balances_xp(pool, N_COINS)\r\n\r\n    amp: uint256 = StableSwapNG(pool).A() * A_PRECISION\r\n    D: uint256 = self.get_D(xp, amp, N_COINS)\r\n\r\n    x: uint256 = xp[i] + (dx * rates[i] / PRECISION)\r\n    y: uint256 = self.get_y(i, j, x, xp, amp, D, N_COINS)\r\n    dy: uint256 = xp[j] - y - 1\r\n\r\n    base_fee: uint256 = StableSwapNG(pool).fee()\r\n    fee_multiplier: uint256 = StableSwapNG(pool).offpeg_fee_multiplier()\r\n    fee: uint256 = self._dynamic_fee((xp[i] + x) / 2, (xp[j] + y) / 2, base_fee, fee_multiplier) * dy / FEE_DENOMINATOR\r\n\r\n    return (dy - fee) * PRECISION / rates[j]\r\n\r\n\r\n@view\r\n@external\r\ndef get_dx_underlying(\r\n    i: int128,\r\n    j: int128,\r\n    dy: uint256,\r\n    pool: address,\r\n) -> uint256:\r\n\r\n    BASE_POOL: address = StableSwapNG(pool).BASE_POOL()\r\n    BASE_N_COINS: uint256 = StableSwapNG(pool).BASE_N_COINS()\r\n    N_COINS: uint256 = StableSwapNG(pool).N_COINS()\r\n    base_pool_has_static_fee: bool = self._has_static_fee(BASE_POOL)\r\n\r\n    # CASE 1: Swap does not involve Metapool at all. In this case, we kindly as the user\r\n    # to use the right pool for their swaps.\r\n    if min(i, j) > 0:\r\n        raise \"Not a Metapool Swap. Use Base pool.\"\r\n\r\n    # CASE 2:\r\n    #    1. meta token_0 of (unknown amount) > base pool lp_token\r\n    #    2. base pool lp_token > calc_withdraw_one_coin gives dy amount of (j-1)th base coin\r\n    # So, need to do the following calculations:\r\n    #    1. calc_token_amounts on base pool for depositing liquidity on (j-1)th token > lp_tokens.\r\n    #    2. get_dx on metapool for i = 0, and j = 1 (base lp token) with amt calculated in (1).\r\n    if i == 0:\r\n        # Calculate LP tokens that are burnt to receive dy amount of base_j tokens.\r\n        lp_amount_burnt: uint256 = self._base_calc_token_amount(\r\n            dy, j - 1, BASE_N_COINS, BASE_POOL, False\r\n        )\r\n        return self._get_dx(0, 1, lp_amount_burnt, pool, False, N_COINS)\r\n\r\n    # CASE 3: Swap in token i-1 from base pool and swap out dy amount of token 0 (j) from metapool.\r\n    #    1. deposit i-1 token from base pool > receive base pool lp_token\r\n    #    2. swap base pool lp token > 0th token of the metapool\r\n    # So, need to do the following calculations:\r\n    #    1. get_dx on metapool with i = 0, j = 1 > gives how many base lp tokens are required for receiving\r\n    #       dy amounts of i-1 tokens from the metapool\r\n    #    2. We have number of lp tokens: how many i-1 base pool coins are needed to mint that many tokens?\r\n    #       We don't have a method where user inputs lp tokens and it gives number of coins of (i-1)th token\r\n    #       is needed to mint that many base_lp_tokens. Instead, we will use calc_withdraw_one_coin. That's\r\n    #       close enough.\r\n    lp_amount_required: uint256 = self._get_dx(1, 0, dy, pool, False, N_COINS)\r\n    return StableSwapNG(BASE_POOL).calc_withdraw_one_coin(lp_amount_required, i-1)\r\n\r\n\r\n@view\r\n@external\r\ndef get_dy_underlying(\r\n    i: int128,\r\n    j: int128,\r\n    dx: uint256,\r\n    pool: address,\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Calculate the current output dy given input dx on underlying\r\n    @dev Index values can be found via the `coins` public getter method\r\n    @param i Index value for the coin to send\r\n    @param j Index valie of the coin to recieve\r\n    @param dx Amount of `i` being exchanged\r\n    @return Amount of `j` predicted\r\n    \"\"\"\r\n\r\n    N_COINS: uint256 = StableSwapNG(pool).N_COINS()\r\n    MAX_COIN: int128 = convert(N_COINS, int128) - 1\r\n    BASE_POOL: address = StableSwapNG(pool).BASE_POOL()\r\n\r\n    rates: DynArray[uint256, MAX_COINS] = empty(DynArray[uint256, MAX_COINS])\r\n    balances: DynArray[uint256, MAX_COINS] = empty(DynArray[uint256, MAX_COINS])\r\n    xp: DynArray[uint256, MAX_COINS] = empty(DynArray[uint256, MAX_COINS])\r\n    rates, balances, xp = self._get_rates_balances_xp(pool, N_COINS)\r\n\r\n    x: uint256 = 0\r\n    base_i: int128 = 0\r\n    base_j: int128 = 0\r\n    meta_i: int128 = 0\r\n    meta_j: int128 = 0\r\n\r\n    if i != 0:\r\n        base_i = i - MAX_COIN\r\n        meta_i = 1\r\n    if j != 0:\r\n        base_j = j - MAX_COIN\r\n        meta_j = 1\r\n\r\n    if i == 0:\r\n\r\n        x = xp[i] + dx * rates[0] / 10**18\r\n\r\n    else:\r\n\r\n        if j == 0:\r\n\r\n            # i is from BasePool\r\n            base_n_coins: uint256 = StableSwapNG(pool).BASE_N_COINS()\r\n            x = self._base_calc_token_amount(\r\n                dx, base_i, base_n_coins, BASE_POOL, True\r\n            ) * rates[1] / PRECISION\r\n\r\n            # Adding number of pool tokens\r\n            x += xp[1]\r\n\r\n        else:\r\n            # If both are from the base pool\r\n            return StableSwapNG(BASE_POOL).get_dy(base_i, base_j, dx)\r\n\r\n    # This pool is involved only when in-pool assets are used\r\n    amp: uint256 = StableSwapNG(pool).A() * A_PRECISION\r\n    D: uint256 = self.get_D(xp, amp, N_COINS)\r\n    y: uint256 = self.get_y(meta_i, meta_j, x, xp, amp, D, N_COINS)\r\n    dy: uint256 = xp[meta_j] - y - 1\r\n\r\n    # calculate output after subtracting dynamic fee\r\n    base_fee: uint256 = StableSwapNG(pool).fee()\r\n    fee_multiplier: uint256 = StableSwapNG(pool).offpeg_fee_multiplier()\r\n\r\n    dynamic_fee: uint256 = self._dynamic_fee((xp[meta_i] + x) / 2, (xp[meta_j] + y) / 2, base_fee, fee_multiplier)\r\n    dy = (dy - dynamic_fee * dy / FEE_DENOMINATOR)\r\n\r\n    # If output is going via the metapool\r\n    if j == 0:\r\n        dy = dy * 10**18 / rates[0]\r\n    else:\r\n        # j is from BasePool\r\n        # The fee is already accounted for\r\n        dy = StableSwapNG(BASE_POOL).calc_withdraw_one_coin(dy * PRECISION / rates[1], base_j)\r\n\r\n    return dy\r\n\r\n\r\n@view\r\n@external\r\ndef calc_token_amount(\r\n    _amounts: DynArray[uint256, MAX_COINS],\r\n    _is_deposit: bool,\r\n    pool: address\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Calculate addition or reduction in token supply from a deposit or withdrawal\r\n    @param _amounts Amount of each coin being deposited\r\n    @param _is_deposit set True for deposits, False for withdrawals\r\n    @return Expected amount of LP tokens received\r\n    \"\"\"\r\n    amp: uint256 = StableSwapNG(pool).A() * A_PRECISION\r\n    N_COINS: uint256 = StableSwapNG(pool).N_COINS()\r\n\r\n    rates: DynArray[uint256, MAX_COINS] = empty(DynArray[uint256, MAX_COINS])\r\n    old_balances: DynArray[uint256, MAX_COINS] = empty(DynArray[uint256, MAX_COINS])\r\n    xp: DynArray[uint256, MAX_COINS] = empty(DynArray[uint256, MAX_COINS])\r\n    rates, old_balances, xp = self._get_rates_balances_xp(pool, N_COINS)\r\n\r\n    # Initial invariant\r\n    D0: uint256 = self.get_D(xp, amp, N_COINS)\r\n\r\n    total_supply: uint256 = StableSwapNG(pool).totalSupply()\r\n    new_balances: DynArray[uint256, MAX_COINS] = old_balances\r\n    for i in range(MAX_COINS):\r\n        if i == N_COINS:\r\n            break\r\n\r\n        amount: uint256 = _amounts[i]\r\n        if _is_deposit:\r\n            new_balances[i] += amount\r\n        else:\r\n            new_balances[i] -= amount\r\n\r\n    # Invariant after change\r\n    for idx in range(MAX_COINS):\r\n        if idx == N_COINS:\r\n            break\r\n        xp[idx] = rates[idx] * new_balances[idx] / PRECISION\r\n    D1: uint256 = self.get_D(xp, amp, N_COINS)\r\n\r\n    # We need to recalculate the invariant accounting for fees\r\n    # to calculate fair user's share\r\n    D2: uint256 = D1\r\n    if total_supply > 0:\r\n\r\n        # Only account for fees if we are not the first to deposit\r\n        base_fee: uint256 = StableSwapNG(pool).fee() * N_COINS / (4 * (N_COINS - 1))\r\n        fee_multiplier: uint256 = StableSwapNG(pool).offpeg_fee_multiplier()\r\n        _dynamic_fee_i: uint256 = 0\r\n        xs: uint256 = 0\r\n        ys: uint256 = (D0 + D1) / N_COINS\r\n\r\n        for i in range(MAX_COINS):\r\n            if i == N_COINS:\r\n                break\r\n\r\n            ideal_balance: uint256 = D1 * old_balances[i] / D0\r\n            difference: uint256 = 0\r\n            new_balance: uint256 = new_balances[i]\r\n            if ideal_balance > new_balance:\r\n                difference = ideal_balance - new_balance\r\n            else:\r\n                difference = new_balance - ideal_balance\r\n\r\n            xs = old_balances[i] + new_balance\r\n            _dynamic_fee_i = self._dynamic_fee(xs, ys, base_fee, fee_multiplier)\r\n            new_balances[i] -= _dynamic_fee_i * difference / FEE_DENOMINATOR\r\n\r\n        for idx in range(MAX_COINS):\r\n            if idx == N_COINS:\r\n                break\r\n            xp[idx] = rates[idx] * new_balances[idx] / PRECISION\r\n\r\n        D2 = self.get_D(xp, amp, N_COINS)\r\n    else:\r\n        return D1  # Take the dust if there was any\r\n\r\n    diff: uint256 = 0\r\n    if _is_deposit:\r\n        diff = D2 - D0\r\n    else:\r\n        diff = D0 - D2\r\n    return diff * total_supply / D0\r\n\r\n\r\n@view\r\n@external\r\ndef calc_withdraw_one_coin(_burn_amount: uint256, i: int128, pool: address) -> uint256:\r\n    # First, need to calculate\r\n    # * Get current D\r\n    # * Solve Eqn against y_i for D - _token_amount\r\n\r\n    amp: uint256 = StableSwapNG(pool).A() * A_PRECISION\r\n    N_COINS: uint256 = StableSwapNG(pool).N_COINS()\r\n\r\n    rates: DynArray[uint256, MAX_COINS] = empty(DynArray[uint256, MAX_COINS])\r\n    balances: DynArray[uint256, MAX_COINS] = empty(DynArray[uint256, MAX_COINS])\r\n    xp: DynArray[uint256, MAX_COINS] = empty(DynArray[uint256, MAX_COINS])\r\n    rates, balances, xp = self._get_rates_balances_xp(pool, N_COINS)\r\n\r\n    D0: uint256 = self.get_D(xp, amp, N_COINS)\r\n\r\n    total_supply: uint256 = StableSwapNG(pool).totalSupply()\r\n    D1: uint256 = D0 - _burn_amount * D0 / total_supply\r\n    new_y: uint256 = self.get_y_D(amp, i, xp, D1, N_COINS)\r\n    ys: uint256 = (D0 + D1) / (2 * N_COINS)\r\n\r\n    base_fee: uint256 = StableSwapNG(pool).fee() * N_COINS / (4 * (N_COINS - 1))\r\n    fee_multiplier: uint256 = StableSwapNG(pool).offpeg_fee_multiplier()\r\n    xp_reduced: DynArray[uint256, MAX_COINS] = xp\r\n    xp_j: uint256 = 0\r\n    xavg: uint256 = 0\r\n    dynamic_fee: uint256 = 0\r\n\r\n    for j in range(MAX_COINS):\r\n\r\n        if j == N_COINS:\r\n            break\r\n\r\n        dx_expected: uint256 = 0\r\n        xp_j = xp[j]\r\n        if convert(j, int128) == i:\r\n            dx_expected = xp_j * D1 / D0 - new_y\r\n            xavg = (xp[j] + new_y) / 2\r\n        else:\r\n            dx_expected = xp_j - xp_j * D1 / D0\r\n            xavg = xp[j]\r\n\r\n        dynamic_fee = self._dynamic_fee(xavg, ys, base_fee, fee_multiplier)\r\n        xp_reduced[j] = xp_j - dynamic_fee * dx_expected / FEE_DENOMINATOR\r\n\r\n    dy: uint256 = xp_reduced[i] - self.get_y_D(amp, i, xp_reduced, D1, N_COINS)\r\n    dy = (dy - 1) * PRECISION / rates[i]  # Withdraw less to account for rounding errors\r\n\r\n    return dy\r\n\r\n\r\n@view\r\n@external\r\ndef dynamic_fee(i: int128, j: int128, pool:address) -> uint256:\r\n    \"\"\"\r\n    @notice Return the fee for swapping between `i` and `j`\r\n    @param i Index value for the coin to send\r\n    @param j Index value of the coin to recieve\r\n    @return Swap fee expressed as an integer with 1e10 precision\r\n    \"\"\"\r\n    N_COINS: uint256 = StableSwapNG(pool).N_COINS()\r\n    fee: uint256 = StableSwapNG(pool).fee()\r\n    fee_multiplier: uint256 = StableSwapNG(pool).offpeg_fee_multiplier()\r\n\r\n    rates: DynArray[uint256, MAX_COINS] = empty(DynArray[uint256, MAX_COINS])\r\n    balances: DynArray[uint256, MAX_COINS] = empty(DynArray[uint256, MAX_COINS])\r\n    xp: DynArray[uint256, MAX_COINS] = empty(DynArray[uint256, MAX_COINS])\r\n    rates, balances, xp = self._get_rates_balances_xp(pool, N_COINS)\r\n\r\n    return self._dynamic_fee(xp[i], xp[j], fee, fee_multiplier)\r\n\r\n\r\n# ----------------------------- Utility Methods ------------------------------\r\n\r\n\r\n@view\r\n@internal\r\ndef _has_static_fee(pool: address) -> bool:\r\n\r\n    success: bool = False\r\n    response: Bytes[32] = b\"\"\r\n    success, response = raw_call(\r\n        pool,\r\n        concat(\r\n            method_id(\"dynamic_fee(int128,int128)\"),\r\n            convert(1, bytes32),\r\n            convert(0, bytes32)\r\n        ),\r\n        max_outsize=32,\r\n        revert_on_failure=False,\r\n        is_static_call=True\r\n    )\r\n\r\n    return success\r\n\r\n\r\n@view\r\n@internal\r\ndef _get_dx(\r\n    i: int128,\r\n    j: int128,\r\n    dy: uint256,\r\n    pool: address,\r\n    static_fee: bool,\r\n    N_COINS: uint256\r\n) -> uint256:\r\n\r\n    rates: DynArray[uint256, MAX_COINS] = empty(DynArray[uint256, MAX_COINS])\r\n    balances: DynArray[uint256, MAX_COINS] = empty(DynArray[uint256, MAX_COINS])\r\n    xp: DynArray[uint256, MAX_COINS] = empty(DynArray[uint256, MAX_COINS])\r\n    rates, balances, xp = self._get_rates_balances_xp(pool, N_COINS)\r\n\r\n    amp: uint256 = StableSwapNG(pool).A() * A_PRECISION\r\n    D: uint256 = self.get_D(xp, amp, N_COINS)\r\n\r\n    base_fee: uint256 = StableSwapNG(pool).fee()\r\n    dy_with_fee: uint256 = dy * rates[j] / PRECISION + 1\r\n\r\n    fee: uint256 = base_fee\r\n    if not static_fee:\r\n        fee_multiplier: uint256 = StableSwapNG(pool).offpeg_fee_multiplier()\r\n        fee = self._dynamic_fee(xp[i], xp[j], base_fee, fee_multiplier)\r\n\r\n    y: uint256 = xp[j] - dy_with_fee * FEE_DENOMINATOR / (FEE_DENOMINATOR - fee)\r\n    x: uint256 = self.get_y(j, i, y, xp, amp, D, N_COINS)\r\n    return (x - xp[i]) * PRECISION / rates[i]\r\n\r\n\r\n@view\r\n@internal\r\ndef _dynamic_fee(xpi: uint256, xpj: uint256, _fee: uint256, _fee_multiplier: uint256) -> uint256:\r\n\r\n    if _fee_multiplier <= FEE_DENOMINATOR:\r\n        return _fee\r\n\r\n    xps2: uint256 = (xpi + xpj) ** 2\r\n    return (\r\n        (_fee_multiplier * _fee) /\r\n        ((_fee_multiplier - FEE_DENOMINATOR) * 4 * xpi * xpj / xps2 + FEE_DENOMINATOR)\r\n    )\r\n\r\n\r\n@internal\r\n@view\r\ndef _base_calc_token_amount(\r\n    dx: uint256,\r\n    base_i: int128,\r\n    base_n_coins: uint256,\r\n    base_pool: address,\r\n    is_deposit: bool\r\n) -> uint256:\r\n\r\n    if base_n_coins == 2:\r\n\r\n        base_inputs: uint256[2] = empty(uint256[2])\r\n        base_inputs[base_i] = dx\r\n        return StableSwap2(base_pool).calc_token_amount(base_inputs, is_deposit)\r\n\r\n    elif base_n_coins == 3:\r\n\r\n        base_inputs: uint256[3] = empty(uint256[3])\r\n        base_inputs[base_i] = dx\r\n        return StableSwap3(base_pool).calc_token_amount(base_inputs, is_deposit)\r\n\r\n    else:\r\n\r\n        raise \"base_n_coins > 3 not supported yet.\"\r\n\r\n\r\n@internal\r\n@pure\r\ndef newton_y(b: uint256, c: uint256, D: uint256, _y: uint256) -> uint256:\r\n\r\n    y_prev: uint256 = 0\r\n    y: uint256 = _y\r\n\r\n    for _i in range(255):\r\n        y_prev = y\r\n        y = (y*y + c) / (2 * y + b - D)\r\n        # Equality with the precision of 1\r\n        if y > y_prev:\r\n            if y - y_prev <= 1:\r\n                return y\r\n        else:\r\n            if y_prev - y <= 1:\r\n                return y\r\n    raise\r\n\r\n\r\n@view\r\n@internal\r\ndef get_y(\r\n    i: int128,\r\n    j: int128,\r\n    x: uint256,\r\n    xp: DynArray[uint256, MAX_COINS],\r\n    _amp: uint256,\r\n    _D: uint256,\r\n    N_COINS: uint256\r\n) -> uint256:\r\n    \"\"\"\r\n    Calculate x[j] if one makes x[i] = x\r\n\r\n    Done by solving quadratic equation iteratively.\r\n    x_1**2 + x_1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\r\n    x_1**2 + b*x_1 = c\r\n\r\n    x_1 = (x_1**2 + c) / (2*x_1 + b)\r\n    \"\"\"\r\n    # x in the input is converted to the same price/precision\r\n\r\n    assert i != j       # dev: same coin\r\n    assert j >= 0       # dev: j below zero\r\n    assert j < convert(N_COINS, int128)  # dev: j above N_COINS\r\n\r\n    # should be unreachable, but good for safety\r\n    assert i >= 0\r\n    assert i < convert(N_COINS, int128)\r\n\r\n    amp: uint256 = _amp\r\n    D: uint256 = _D\r\n    S_: uint256 = 0\r\n    _x: uint256 = 0\r\n    c: uint256 = D\r\n    Ann: uint256 = amp * N_COINS\r\n\r\n    for _i in range(MAX_COINS):\r\n\r\n        if _i == N_COINS:\r\n            break\r\n\r\n        if  convert(_i, int128) == i:\r\n            _x = x\r\n        elif convert(_i, int128) != j:\r\n            _x = xp[_i]\r\n        else:\r\n            continue\r\n        S_ += _x\r\n        c = c * D / (_x * N_COINS)\r\n\r\n    c = c * D * A_PRECISION / (Ann * N_COINS)\r\n    b: uint256 = S_ + D * A_PRECISION / Ann  # - D\r\n    y: uint256 = D\r\n\r\n    return self.newton_y(b, c, D, y)\r\n\r\n\r\n@pure\r\n@internal\r\ndef get_D(_xp: DynArray[uint256, MAX_COINS], _amp: uint256, N_COINS: uint256) -> uint256:\r\n    \"\"\"\r\n    D invariant calculation in non-overflowing integer operations\r\n    iteratively\r\n\r\n    A * sum(x_i) * n**n + D = A * D * n**n + D**(n+1) / (n**n * prod(x_i))\r\n\r\n    Converging solution:\r\n    D[j+1] = (A * n**n * sum(x_i) - D[j]**(n+1) / (n**n prod(x_i))) / (A * n**n - 1)\r\n    \"\"\"\r\n    S: uint256 = 0\r\n    for i in range(MAX_COINS):\r\n        if i == N_COINS:\r\n            break\r\n        S += _xp[i]\r\n\r\n    if S == 0:\r\n        return 0\r\n\r\n    D: uint256 = S\r\n    Ann: uint256 = _amp * N_COINS\r\n    D_P: uint256 = 0\r\n    Dprev: uint256 = 0\r\n\r\n    for i in range(255):\r\n\r\n        D_P = D\r\n        for x in _xp:\r\n            D_P = D_P * D / (x * N_COINS)\r\n        Dprev = D\r\n\r\n        D = (Ann * S / A_PRECISION + D_P * N_COINS) * D / ((Ann - A_PRECISION) * D / A_PRECISION + (N_COINS + 1) * D_P)\r\n        # Equality with the precision of 1\r\n        if D > Dprev:\r\n            if D - Dprev <= 1:\r\n                return D\r\n        else:\r\n            if Dprev - D <= 1:\r\n                return D\r\n    # convergence typically occurs in 4 rounds or less, this should be unreachable!\r\n    # if it does happen the pool is borked and LPs can withdraw via `remove_liquidity`\r\n    raise\r\n\r\n\r\n@pure\r\n@internal\r\ndef get_y_D(\r\n    A: uint256,\r\n    i: int128,\r\n    xp: DynArray[uint256, MAX_COINS],\r\n    D: uint256,\r\n    N_COINS: uint256\r\n) -> uint256:\r\n    \"\"\"\r\n    Calculate x[i] if one reduces D from being calculated for xp to D\r\n\r\n    Done by solving quadratic equation iteratively.\r\n    x_1**2 + x_1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\r\n    x_1**2 + b*x_1 = c\r\n\r\n    x_1 = (x_1**2 + c) / (2*x_1 + b)\r\n    \"\"\"\r\n    # x in the input is converted to the same price/precision\r\n\r\n    N_COINS_128: int128 = convert(N_COINS, int128)\r\n    assert i >= 0  # dev: i below zero\r\n    assert i < N_COINS_128  # dev: i above N_COINS\r\n\r\n    S_: uint256 = 0\r\n    _x: uint256 = 0\r\n    y_prev: uint256 = 0\r\n    c: uint256 = D\r\n    Ann: uint256 = A * N_COINS\r\n\r\n    for _i in range(MAX_COINS):\r\n\r\n        if _i == N_COINS:\r\n            break\r\n\r\n        if _i != convert(i, uint256):\r\n            _x = xp[_i]\r\n        else:\r\n            continue\r\n        S_ += _x\r\n        c = c * D / (_x * N_COINS)\r\n\r\n    c = c * D * A_PRECISION / (Ann * N_COINS)\r\n    b: uint256 = S_ + D * A_PRECISION / Ann\r\n    y: uint256 = D\r\n\r\n    return self.newton_y(b, c, D, y)\r\n\r\n\r\n@view\r\n@internal\r\ndef _get_rates_balances_xp(pool: address, N_COINS: uint256) -> (\r\n    DynArray[uint256, MAX_COINS],\r\n    DynArray[uint256, MAX_COINS],\r\n    DynArray[uint256, MAX_COINS],\r\n):\r\n\r\n    rates: DynArray[uint256, MAX_COINS] = StableSwapNG(pool).stored_rates()\r\n    balances: DynArray[uint256, MAX_COINS] = StableSwapNG(pool).get_balances()\r\n    xp: DynArray[uint256, MAX_COINS] = empty(DynArray[uint256, MAX_COINS])\r\n    for idx in range(MAX_COINS):\r\n        if idx == N_COINS:\r\n            break\r\n        xp.append(rates[idx] * balances[idx] / PRECISION)\r\n\r\n    return rates, balances, xp", "ABI": "[{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_dx\",\"inputs\":[{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"j\",\"type\":\"int128\"},{\"name\":\"dy\",\"type\":\"uint256\"},{\"name\":\"pool\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_dy\",\"inputs\":[{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"j\",\"type\":\"int128\"},{\"name\":\"dx\",\"type\":\"uint256\"},{\"name\":\"pool\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_dx_underlying\",\"inputs\":[{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"j\",\"type\":\"int128\"},{\"name\":\"dy\",\"type\":\"uint256\"},{\"name\":\"pool\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_dy_underlying\",\"inputs\":[{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"j\",\"type\":\"int128\"},{\"name\":\"dx\",\"type\":\"uint256\"},{\"name\":\"pool\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calc_token_amount\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_is_deposit\",\"type\":\"bool\"},{\"name\":\"pool\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calc_withdraw_one_coin\",\"inputs\":[{\"name\":\"_burn_amount\",\"type\":\"uint256\"},{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"pool\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"dynamic_fee\",\"inputs\":[{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"j\",\"type\":\"int128\"},{\"name\":\"pool\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]}]", "ContractName": "CurveStableSwapNGViews", "CompilerVersion": "vyper:0.3.10", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}