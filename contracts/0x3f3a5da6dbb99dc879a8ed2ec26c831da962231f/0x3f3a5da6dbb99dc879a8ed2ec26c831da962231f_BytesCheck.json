{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/libraries/BytesCheck.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nlibrary BytesCheck {\\n    /// @notice check if the first digit of the hexadecimal value starts with `0x0`\\n    function checkFirstDigit0x0(uint8 x) public pure returns (bool) {\\n        uint8 y = uint8(x & 0xF0);\\n        uint8 z = y >> 4;\\n        return (z == 0x0);\\n    }\\n\\n    /// @notice check if the first digit of the hexadecimal value starts with `0x1`\\n    function checkFirstDigit0x1(uint8 x) public pure returns (bool) {\\n        uint8 y = uint8(x & 0xF0);\\n        uint8 z = y >> 4;\\n        return (z == 0x1);\\n    }\\n\\n    /// @notice check if the first digit of the hexadecimal value starts with `0x2`\\n    function checkFirstDigit0x2(uint8 x) public pure returns (bool) {\\n        uint8 y = uint8(x & 0xF0);\\n        uint8 z = y >> 4;\\n        return (z == 0x2);\\n    }\\n\\n    /// @notice check if the first digit of the hexadecimal value starts with `0x3`\\n    function checkFirstDigit0x3(uint8 x) public pure returns (bool) {\\n        uint8 y = uint8(x & 0xF0);\\n        uint8 z = y >> 4;\\n        return (z == 0x3);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"@synthetix/=src/interfaces/synthetix/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"@openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {\r\n      \"src/Generate.sol\": {\r\n        \"Generate\": \"0x74e0ca6e1ecfb462a80f3b7ab6840013ee32c1c5\"\r\n      },\r\n      \"src/SpotTrade/SpotTrade.sol\": {\r\n        \"SpotTrade\": \"0x019dfb87e218a07091c83cec604cb2d48fbdf194\"\r\n      },\r\n      \"src/Trade.sol\": {\r\n        \"Trade\": \"0x16766913fae839da226a669c76f04b2b5e2380a0\"\r\n      },\r\n      \"src/libraries/BytesCheck.sol\": {\r\n        \"BytesCheck\": \"0x3f3a5da6dbb99dc879a8ed2ec26c831da962231f\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"x\",\"type\":\"uint8\"}],\"name\":\"checkFirstDigit0x0\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"x\",\"type\":\"uint8\"}],\"name\":\"checkFirstDigit0x1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"x\",\"type\":\"uint8\"}],\"name\":\"checkFirstDigit0x2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"x\",\"type\":\"uint8\"}],\"name\":\"checkFirstDigit0x3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "BytesCheck", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}