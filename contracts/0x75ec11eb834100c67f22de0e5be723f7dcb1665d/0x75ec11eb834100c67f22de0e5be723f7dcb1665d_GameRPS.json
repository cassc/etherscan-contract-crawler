{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// \r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// \r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20BackwardsCompatible {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n\r\n// \r\ninterface IGame {\r\n    function play(uint256 _rolls, uint256 _bet, uint256[50] memory _data, uint256 _stake) external;\r\n    function getMaxPayout(uint256 _bet, uint256[50] memory _data) external view returns (uint256);\r\n}\r\n\r\n// \r\nuint256 constant RESOLUTION = 10000;\r\n\r\nuint256 constant PAYOUT_AMPLIFIER = 10 ** 24;\r\n\r\nlibrary Types {\r\n    struct Bet {\r\n        uint256 globalBetId;\r\n        uint256 playerBetId;\r\n        uint256 gameId;\r\n        uint256 rolls;\r\n        uint256 betNum;\r\n        uint256 stake;\r\n        uint256 payout;\r\n        bool complete;\r\n        uint256 opened;\r\n        uint256 closed;\r\n        uint256[50] data;\r\n        address player;\r\n    }\r\n\r\n    struct Game {\r\n        uint256 id;\r\n        bool live;\r\n        uint256 edge;\r\n        uint256 date;\r\n        address impl;\r\n        string name;\r\n    }\r\n\r\n    struct HouseGame {\r\n        uint256 betCount;\r\n        uint256[] betIds;\r\n    }\r\n\r\n    struct PlayerGame {\r\n        uint256 betCount;\r\n        uint256 wagers;\r\n        uint256 profits;\r\n        uint256 wins;\r\n        uint256 losses;\r\n    }\r\n\r\n    struct Player {\r\n        uint256 betCount;\r\n        uint256[] betIds;\r\n\r\n        uint256 wagers;\r\n        uint256 profits;\r\n\r\n        uint256 wins;\r\n        uint256 losses;\r\n    }\r\n\r\n    struct Player2 {\r\n        Player info;\r\n        mapping (uint256 => PlayerGame) games;\r\n    }\r\n}\r\n\r\n/*\r\npragma solidity ^0.8.0;\r\n\r\nuint256 constant RESOLUTION = 10000;\r\nuint256 constant PAYOUT_AMPLIFIER = 10 ** 24;\r\n\r\ntype BETCOUNT is uint32;\r\ntype GAMECOUNT is uint16;\r\ntype DATAVALUE is uint128;\r\ntype ROLLCOUNT is uint16;\r\ntype BETNUM is uint32;\r\ntype TOKENAMOUNT is uint128;\r\ntype TIMESTAMP is uint32;\r\ntype EDGEAMOUNT is uint16;\r\n\r\nlibrary Types {\r\n\r\n    function add(BETCOUNT a, uint256 b) internal pure returns (BETCOUNT) {\r\n        return BETCOUNT.wrap(uint32(uint256(BETCOUNT.unwrap(a)) + b));\r\n    }\r\n\r\n    function toUint256(BETCOUNT a) internal pure returns (uint256) {\r\n        return uint256(BETCOUNT.unwrap(a));\r\n    }\r\n\r\n    function add(GAMECOUNT a, uint256 b) internal pure returns (GAMECOUNT) {\r\n        return GAMECOUNT.wrap(uint16(uint256(GAMECOUNT.unwrap(a)) + b));\r\n    }\r\n\r\n    struct Bet {\r\n        BETCOUNT globalBetId;\r\n        BETCOUNT playerBetId;\r\n        GAMECOUNT gameId;\r\n        ROLLCOUNT rolls;\r\n        BETNUM betNum;\r\n        TOKENAMOUNT stake;\r\n        TOKENAMOUNT payout;\r\n        bool complete;\r\n        TIMESTAMP opened;\r\n        TIMESTAMP closed;\r\n        DATAVALUE[50] data;\r\n        address player;\r\n    }\r\n\r\n    struct Game {\r\n        GAMECOUNT id;\r\n        bool live;\r\n        EDGEAMOUNT edge;\r\n        TIMESTAMP date;\r\n        address impl;\r\n        string name;\r\n    }\r\n\r\n    struct HouseGame {\r\n        BETCOUNT betCount;\r\n        BETCOUNT[] betIds;\r\n    }\r\n\r\n    struct PlayerGame {\r\n        BETCOUNT betCount;\r\n        TOKENAMOUNT wagers;\r\n        TOKENAMOUNT profits;\r\n        BETCOUNT wins;\r\n        BETCOUNT losses;\r\n    }\r\n\r\n    struct Player {\r\n        BETCOUNT betCount;\r\n        BETCOUNT[] betIds;\r\n\r\n        TOKENAMOUNT wagers;\r\n        TOKENAMOUNT profits;\r\n\r\n        BETCOUNT wins;\r\n        BETCOUNT losses;\r\n\r\n        mapping (GAMECOUNT => PlayerGame) games;\r\n    }\r\n}\r\n*/\r\n\r\n// \r\ninterface IConsole {\r\n    function getGame(uint256 _id) external view returns (Types.Game memory);\r\n    function getGameByImpl(address _impl) external view returns (Types.Game memory);\r\n}\r\n\r\n// \r\ninterface IHouse {\r\n    function openWager(address _account, uint256 _game, uint256 _rolls, uint256 _bet, uint256[50] calldata _data, uint256 _betSize, uint256 _maxPayout) external returns (uint256, uint256);\r\n    function closeWager(uint256 betId, address _account, uint256 _gameId, uint256 _payout) external returns (bool);\r\n    function getBet(uint256 _id) external view returns (Types.Bet memory);\r\n}\r\n\r\n// \r\ninterface IRNG {\r\n    function generateNextRandomVariable() external returns (uint256);\r\n    function generateModulo(uint256 lo, uint256 hi) external returns (uint256);\r\n    function shuffleRandomNumbers() external;\r\n    function generateMultiple(uint256 count) external returns (uint256[] memory);\r\n    function getModulo(uint256 val, uint256 lo, uint256 hi) external pure returns (uint256);\r\n}\r\n\r\n// \r\ninterface IUSDTVault {\r\n    function finalizeGame(address _player, uint256 _prize, uint256 _fee) external;\r\n}\r\n\r\n// \r\nabstract contract Game is IGame, Ownable {\r\n    error InvalidRolls(uint256 max, uint256 rolls);\r\n    error MinBet(uint256 minRate, uint256 stake);\r\n\r\n    IERC20BackwardsCompatible public usdtToken;\r\n    IUSDTVault public usdtVault;\r\n    IConsole public consoleInst;\r\n    IHouse public house;\r\n    IRNG public rng;\r\n    uint256 id;\r\n    uint256 public maxRoll;\r\n    uint256 public numbersPerRoll;\r\n    uint256 public minBetRate;\r\n    \r\n    event GameStart(uint256 indexed betId, uint256 _bet, uint256[50] _data);\r\n    event GameEnd(uint256 indexed betId, uint256[] _randomNumbers, uint256[] _rolls, uint256 _bet, uint256 _stake, uint256 wins, /*uint256 draws,*/ uint256 losses, uint256 _payout, address indexed _account, uint256 indexed _timestamp);\r\n    \r\n    constructor (address _usdt, address _vault, address _console, address _house, address _rng, uint256 _id, uint256 _numbersPerRoll) {\r\n        usdtToken = IERC20BackwardsCompatible(_usdt);\r\n        usdtVault = IUSDTVault(_vault);\r\n        consoleInst = IConsole(_console);\r\n        house = IHouse(_house);\r\n        rng = IRNG(_rng);\r\n        id = _id;\r\n        numbersPerRoll = _numbersPerRoll;\r\n        maxRoll = 1;\r\n        minBetRate = 0; //(10 ** 16); // 0.01 USDT\r\n    }\r\n\r\n    function getMaxPayout(uint256 _bet, uint256[50] memory _data) public virtual view returns (uint256);\r\n    function finalize(uint256 _betId, uint256[] memory _randomNumbers) internal virtual returns (uint256);\r\n\r\n    function updateMaxRoll(uint256 _newValue) external onlyOwner {\r\n        require(maxRoll != _newValue, \"Already Set\");\r\n        maxRoll = _newValue;\r\n    }\r\n\r\n    function updateMinBetRate(uint256 _newValue) external onlyOwner {\r\n        require(minBetRate != _newValue, \"Already Set\");\r\n        minBetRate = _newValue;\r\n    }\r\n\r\n    function play(uint256 _rolls, uint256 _bet, uint256[50] memory _data, uint256 _stake) external override {// gas: 871654 for roulette\r\n        uint256 betId;\r\n        uint256 betAmountWithFee;\r\n\r\n        if (maxRoll > 0 && _rolls > maxRoll) {\r\n            revert InvalidRolls(maxRoll, _rolls);\r\n        }\r\n\r\n        require(_stake > 0, \"Please bet some coins\");\r\n\r\n        if (_stake * (10 ** 18) / (10 ** ERC20(address(usdtToken)).decimals()) < minBetRate) {\r\n            revert MinBet(minBetRate, _stake);\r\n        }\r\n\r\n        (betId, betAmountWithFee) = house.openWager(msg.sender, id, _rolls, _bet, _data, _stake, getMaxPayout(_bet, _data)); // gas: 525635\r\n\r\n        uint256[] memory ra = rng.generateMultiple(_rolls * numbersPerRoll); // gas: 23646\r\n        uint256 payout = finalize(betId, ra); // gas: 59437\r\n\r\n        house.closeWager(betId, msg.sender, id, payout); // gas: 154535\r\n\r\n        usdtVault.finalizeGame(msg.sender, payout, betAmountWithFee - _rolls * _stake); // gas: 66308\r\n    }\r\n\r\n    function getId() external view returns (uint256) {\r\n        return id;\r\n    }\r\n\r\n    function getLive() external view returns (bool) {\r\n        Types.Game memory _game = consoleInst.getGame(id);\r\n        return _game.live;\r\n    }\r\n\r\n    function getEdge() public view returns (uint256) {\r\n        Types.Game memory _game = consoleInst.getGame(id);\r\n        return _game.edge;\r\n    }\r\n\r\n    function getName() external view returns (string memory) {\r\n        Types.Game memory _game = consoleInst.getGame(id);\r\n        return _game.name;\r\n    }\r\n\r\n    function getDate() external view returns (uint256) {\r\n        Types.Game memory _game = consoleInst.getGame(id);\r\n        return _game.date;\r\n    }\r\n\r\n    function setUSDTToken(address _newUSDT) external onlyOwner {\r\n        require(address(usdtToken) != _newUSDT, \"Already Set\");\r\n        usdtToken = IERC20BackwardsCompatible(_newUSDT);\r\n    }\r\n\r\n    function setUSDTVault(address _newVault) external onlyOwner {\r\n        require(address(usdtVault) != _newVault, \"Already Set\");\r\n        usdtVault = IUSDTVault(_newVault);\r\n    }\r\n\r\n    function setConsoleInst(address _newConsole) external onlyOwner {\r\n        require(address(consoleInst) != _newConsole, \"Already Set\");\r\n        consoleInst = IConsole(_newConsole);\r\n    }\r\n\r\n    function setHouse(address _newHouse) external onlyOwner {\r\n        require(address(house) != _newHouse, \"Already Set\");\r\n        house = IHouse(_newHouse);\r\n    }\r\n\r\n    function setRNG(address _newRNG) external onlyOwner {\r\n        require(address(rng) != _newRNG, \"Already Set\");\r\n        rng = IRNG(_newRNG);\r\n    }\r\n}\r\n\r\n// \r\ncontract GameRPS is Game {\r\n    enum OUTCOME {\r\n        ROCK,\r\n        SCISSORS,\r\n        PAPER\r\n    }\r\n\r\n    enum RESULT {\r\n        WIN,\r\n        DRAW,\r\n        LOSE\r\n    }\r\n\r\n\r\n    error InvalidBet(uint256 bet);\r\n\r\n    constructor (address _usdt, address _vault, address _console, address _house, address _rng, uint256 _id, uint256 _numbersPerRoll)\r\n        Game(_usdt, _vault, _console, _house, _rng, _id, _numbersPerRoll)\r\n    {}\r\n\r\n    function decide(OUTCOME p1Choice, OUTCOME p2Choice) internal pure returns (RESULT) {\r\n        if (uint8(p1Choice) == uint8(p2Choice)) return RESULT.DRAW;\r\n        if (uint8(p1Choice) + 1 == uint8(p2Choice) || uint8(p1Choice) == uint8(p2Choice) + 2) return RESULT.WIN;\r\n        else return RESULT.LOSE;\r\n    }\r\n    \r\n    function finalize(uint256 _betId, uint256[] memory _randomNumbers) internal virtual override returns (uint256) {\r\n        Types.Bet memory _bet = house.getBet(_betId);\r\n        uint256 _betNum = _bet.betNum;\r\n        uint256 _payout = 0;\r\n        uint256[] memory _rolls = new uint256[](_bet.rolls);\r\n\r\n        emit GameStart(_betId, _betNum, _bet.data);\r\n\r\n        uint256 payoutRatio = getMaxPayout(_betNum, _bet.data);\r\n        uint256 wins = 0;\r\n        uint256 draws = 0;\r\n        uint256 losses = 0;\r\n\r\n        for (uint256 _i = 0; _i < _bet.rolls; _i++) {\r\n            uint256 _roll = rng.getModulo(_randomNumbers[_i], 0, 2);\r\n            RESULT result = decide(OUTCOME(_betNum), OUTCOME(_roll));\r\n\r\n            if (result == RESULT.WIN) {\r\n                _payout += _bet.stake * payoutRatio / PAYOUT_AMPLIFIER;\r\n                wins ++;\r\n            } else if (result == RESULT.DRAW) {\r\n                _payout += _bet.stake;\r\n                draws ++;\r\n            } else if (result == RESULT.LOSE) {\r\n                losses ++;\r\n            }\r\n\r\n            _rolls[_i] = _roll;\r\n        }\r\n        \r\n        emit GameEnd(_betId, _randomNumbers, _rolls, _betNum, _bet.stake, wins, /*draws,*/ losses, _payout, _bet.player, block.timestamp);\r\n\r\n        return _payout;\r\n    }\r\n\r\n    function getMaxPayout(uint256, uint256[50] memory) public virtual override view returns (uint256) {\r\n        Types.Game memory ga = consoleInst.getGame(id);\r\n        return ((100 - ga.edge) * PAYOUT_AMPLIFIER) / 50;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_console\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_house\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rng\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numbersPerRoll\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"}],\"name\":\"InvalidBet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rolls\",\"type\":\"uint256\"}],\"name\":\"InvalidRolls\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"MinBet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_randomNumbers\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_rolls\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wins\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"losses\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_payout\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"GameEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[50]\",\"name\":\"_data\",\"type\":\"uint256[50]\"}],\"name\":\"GameStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"consoleInst\",\"outputs\":[{\"internalType\":\"contract IConsole\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEdge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[50]\",\"name\":\"\",\"type\":\"uint256[50]\"}],\"name\":\"getMaxPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"house\",\"outputs\":[{\"internalType\":\"contract IHouse\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRoll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBetRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numbersPerRoll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rolls\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bet\",\"type\":\"uint256\"},{\"internalType\":\"uint256[50]\",\"name\":\"_data\",\"type\":\"uint256[50]\"},{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"}],\"name\":\"play\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rng\",\"outputs\":[{\"internalType\":\"contract IRNG\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newConsole\",\"type\":\"address\"}],\"name\":\"setConsoleInst\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newHouse\",\"type\":\"address\"}],\"name\":\"setHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRNG\",\"type\":\"address\"}],\"name\":\"setRNG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newUSDT\",\"type\":\"address\"}],\"name\":\"setUSDTToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newVault\",\"type\":\"address\"}],\"name\":\"setUSDTVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxRoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinBetRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20BackwardsCompatible\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtVault\",\"outputs\":[{\"internalType\":\"contract IUSDTVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GameRPS", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000f23787b0ac145fe83ce27e3796bc9a7e623ed5bf0000000000000000000000002558d23e8d3c5c54bf96f190ccad584cab0b519600000000000000000000000096f49235ccdcd123621578f5fd705ba7fc507ae7000000000000000000000000229bb6996fe47c68abf17f03f793d69728449b6400000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a2cfcfeeb7b663198d27bbbee325db2853948396954fc6e87362153fd203d200"}