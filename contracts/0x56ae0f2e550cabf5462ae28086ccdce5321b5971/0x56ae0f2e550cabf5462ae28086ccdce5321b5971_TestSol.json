{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner() {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\ncontract TestSol is Context, IERC20, Ownable {\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private isBots;\r\n    address private ops;\r\n    address payable private MarketingWallet;\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 100000000 * 10**_decimals; \r\n    string private constant _name = \"Test Use\";\r\n    string private constant _symbol = \"TESTUS\";\r\n    uint256 private ThresholdTokens = 600000 * 10**_decimals; \r\n    uint256 public maxTxAmount = 600000 * 10**_decimals; \r\n    uint256 public maxWalletSize = 700000 * 10**_decimals;  // Set your desired maximum wallet size here.\r\n    uint256 public buyTaxes = 5;\r\n    uint256 public sellTaxes = 5;\r\n    address public constant deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n    address public constant Team = 0x6A71Ed3e41dCD716677e0D8EFEfF6aB02B2075a2;\r\n   \r\n    uint256 private  genesis_block;\r\n    uint256 private deadline = 7;\r\n    uint256 private launchtax = 99;\r\n   \r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool public tradeEnable = false;\r\n    bool public _SwapBackEnable = false;\r\n    bool private inSwap = false;\r\n   \r\n    // Events\r\n    event ExcludeFromFeeUpdated(address indexed account);\r\n    event includeFromFeeUpdated(address indexed account);\r\n    event FeesRecieverUpdated(address indexed _newWallet);\r\n    event SwapThreshouldUpdated(uint256 indexed tokenAmount);\r\n    event SwapBackSettingUpdated(bool indexed state);\r\n    event ERC20TokensRecovered(uint256 indexed _amount);\r\n    event TradingOpenUpdated();\r\n    event ETHBalanceRecovered();\r\n    \r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    constructor () {\r\n        \r\n    if (block.chainid == 56){\r\n        uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); // PCS BSC Mainnet Router\r\n    }\r\n    else if(block.chainid == 1 || block.chainid == 5){\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // Uniswap ETH Mainnet Router\r\n    }\r\n    else if(block.chainid == 42161){\r\n        uniswapV2Router = IUniswapV2Router02(0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506); // Sushi Arbitrum Mainnet Router\r\n    }\r\n    else if (block.chainid == 97){\r\n        uniswapV2Router = IUniswapV2Router02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1); // PCS BSC Testnet Router\r\n    }\r\n\r\n    else if (block.chainid == 11155111) {\r\n        // SePolia Testnet Router Address\r\n        uniswapV2Router = IUniswapV2Router02(0x86dcd3293C53Cf8EFd7303B57beb2a3F671dDE98);\r\n    }\r\n    \r\n    else {\r\n        revert(\"Wrong Chain Id\");\r\n    }\r\n    \r\n    \r\n    uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n    MarketingWallet = payable(0xC596CF190E4067AAd49983B7EAE5b1EF6539fF58);\r\n    ops = 0xBc5319c65Fd61C863D3E8c3258fFB0dE6654ce69; // Deployer Address\r\n\r\n    _balances[_msgSender()] = _tTotal;\r\n    _isExcludedFromFee[_msgSender()] = true;\r\n    _isExcludedFromFee[address(this)] = true;\r\n    _isExcludedFromFee[MarketingWallet] = true;\r\n    _isExcludedFromFee[ops] = true;\r\n    _isExcludedFromFee[deadWallet] = true;\r\n    _isExcludedFromFee[0x6A71Ed3e41dCD716677e0D8EFEfF6aB02B2075a2] = true; // Team\r\n\r\n    emit Transfer(address(0), _msgSender(), _tTotal);\r\n}\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n        return true;\r\n    }\r\n    function setMaxWalletSize(uint256 _maxWalletSize) external onlyOwner {\r\n        maxWalletSize = _maxWalletSize;\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(!isBots[from] && !isBots[to], \"You can't transfer tokens\");\r\n        uint256 TaxSwap = 0;\r\n\r\n        if (!_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n            require(tradeEnable, \"Trading not enabled\");       \r\n               TaxSwap = amount * buyTaxes / 100;\r\n        }\r\n        \r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            TaxSwap = 0;\r\n        } \r\n             \r\n          if (!_isExcludedFromFee[from] && !_isExcludedFromFee[to] && block.number <= genesis_block + deadline){\r\n              TaxSwap = amount * launchtax / 100;\r\n          }\r\n         \r\n          if (from == uniswapV2Pair && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n             require(amount <= maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n          } \r\n        \r\n          if (from != uniswapV2Pair && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n             require(amount <= maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n          }\r\n          if (to != uniswapV2Pair && from != address(this) && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]){\r\n            require(balanceOf(to) + amount <= maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n          }  \r\n          if (to != uniswapV2Pair && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]){\r\n              require(balanceOf(to) + amount <= maxTxAmount, \"Exceeds the maxWalletSize.\");\r\n          }\r\n        \r\n          if (to == uniswapV2Pair && from != address(this) && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n                    TaxSwap = amount * sellTaxes / 100;\r\n                \r\n                } \r\n       \r\n             uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && from != uniswapV2Pair && _SwapBackEnable && contractTokenBalance >= ThresholdTokens) {\r\n                swapTokensForEth(ThresholdTokens);\r\n               \r\n               uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        \r\n        _balances[from] = _balances[from] - amount; \r\n        _balances[to] = _balances[to] + (amount - (TaxSwap));\r\n        emit Transfer(from, to, amount - (TaxSwap));\r\n        \r\n         if(TaxSwap > 0){\r\n          _balances[address(this)] = _balances[address(this)] + (TaxSwap);\r\n          emit Transfer(from, address(this),TaxSwap);\r\n        }\r\n    }\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        require(tokenAmount > 0, \"amount must be greeter than 0\");\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function sendETHToFee(uint256 amount) private {\r\n       require(amount > 0, \"amount must be greeter than 0\");\r\n        MarketingWallet.transfer(amount);\r\n    }\r\n   function addExcludeFee(address account) external onlyOwner {\r\n      require(_isExcludedFromFee[account] != true,\"Account is already excluded\");\r\n       _isExcludedFromFee[account] = true;\r\n    emit ExcludeFromFeeUpdated(account);\r\n   }\r\n    function removeExcludeFee(address account) external onlyOwner {\r\n         require(_isExcludedFromFee[account] != false, \"Account is already included\");\r\n        _isExcludedFromFee[account] = false;\r\n     emit includeFromFeeUpdated(account);\r\n    }\r\n   function updateTaxes(uint256 newBuyFee, uint256 newSellFee) external onlyOwner {\r\n        require(newBuyFee <= 60 && newSellFee <= 80, \"ERC20: wrong tax value!\");\r\n        buyTaxes = newBuyFee;\r\n        sellTaxes = newSellFee;\r\n    }\r\n   function addBlacklist(address account) external onlyOwner {isBots[account] = true;}\r\n   function removeBlacklist(address account) external onlyOwner {isBots[account] = false;}\r\n   function removeMaxTxLimit() external onlyOwner {maxTxAmount = _tTotal;}\r\n   function updateSwapBackSetting(bool state) external onlyOwner {_SwapBackEnable = state;emit SwapBackSettingUpdated(state);}\r\n   function updateMaxTxLimit(uint256 amount) external onlyOwner {require(amount >= 100000, \"amount must be greater than or equal to 0.1% of the supply\");\r\n    maxTxAmount = amount * 10**_decimals;\r\n    }\r\n    function updateFeeReciever(address payable _newWallet) external onlyOwner {\r\n       require(_newWallet != address(this), \"CA will not be the Fee Reciever\");\r\n       require(_newWallet != address(0), \"0 addy will not be the fee Reciever\");\r\n       MarketingWallet = _newWallet;\r\n      _isExcludedFromFee[_newWallet] = true;\r\n    emit FeesRecieverUpdated(_newWallet);\r\n    }\r\n    function updateThreshouldToken(uint256 tokenAmount) external onlyOwner {\r\n        require(tokenAmount <= 1000000, \"amount must be less than or equal to 1% of the supply\");\r\n        require(tokenAmount >= 100000, \"amount must be greater than or equal to 0.1% of the supply\");\r\n        ThresholdTokens = tokenAmount * 10**_decimals;\r\n    emit SwapThreshouldUpdated(tokenAmount);\r\n    }\r\n    function go_live() external onlyOwner() {\r\n        require(!tradeEnable,\"trading is already open\");\r\n        _SwapBackEnable = true;\r\n         tradeEnable = true;\r\n       genesis_block = block.number;\r\n       emit TradingOpenUpdated();\r\n    }\r\n    function add() external onlyOwner() {\r\n        require(!tradeEnable,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n    }\r\n    receive() external payable {}\r\n    function recoverERC20FromContract(address _tokenAddy, uint256 _amount) external onlyOwner {\r\n        require(_tokenAddy != address(this), \"Owner can't claim contract's balance of its own tokens\");\r\n        require(_amount > 0, \"Amount should be greater than zero\");\r\n        require(_amount <= IERC20(_tokenAddy).balanceOf(address(this)), \"Insufficient Amount\");\r\n        IERC20(_tokenAddy).transfer(MarketingWallet, _amount);\r\n      emit ERC20TokensRecovered(_amount); \r\n    }\r\n    function recoverETHfromContract() external {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        require(contractETHBalance > 0, \"Amount should be greater than zero\");\r\n        require(contractETHBalance <= address(this).balance, \"Insufficient Amount\");\r\n        payable(address(MarketingWallet)).transfer(contractETHBalance);\r\n      emit ETHBalanceRecovered();\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ERC20TokensRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ETHBalanceRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludeFromFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"FeesRecieverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"SwapBackSettingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"SwapThreshouldUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingOpenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeFromFeeUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_SwapBackEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addExcludeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"go_live\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20FromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETHfromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeExcludeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeMaxTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWalletSize\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"updateFeeReciever\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateMaxTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"updateSwapBackSetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellFee\",\"type\":\"uint256\"}],\"name\":\"updateTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"updateThreshouldToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TestSol", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bf425631e1680427a3c8e0db01f172ce8a1836693f9f5c43e7e294aa16e031e7"}