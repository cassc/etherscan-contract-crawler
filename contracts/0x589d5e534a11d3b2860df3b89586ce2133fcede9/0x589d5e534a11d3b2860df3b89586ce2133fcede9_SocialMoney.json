{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/token/SocialMoney.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../openzeppelin/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @title Template contract for social money, to be used by TokenFactory\\n */\\n\\ncontract SocialMoney is ERC20 {\\n\\tusing SafeMath for uint256;\\n\\n\\t/**\\n     * @dev Constructor on SocialMoney\\n     * @param _name string Name parameter of Token\\n     * @param _symbol string Symbol parameter of Token\\n     * @param _decimals uint8 Decimals parameter of Token\\n     * @param _proportions uint256[3] Parameter that dictates how totalSupply will be divvied up,\\n                            _proportions[0] = Vesting Beneficiary Initial Supply\\n                            _proportions[1] = Roll Supply\\n                            _proportions[2] = Vesting Beneficiary Vesting Supply\\n\\t\\t\\t\\t\\t\\t\\t_proportions[3] = Referral\\n     * @param _vestingBeneficiary address Address of the Vesting Beneficiary\\n     * @param _platformWallet Address of Roll platform wallet\\n     * @param _tokenVestingInstance address Address of Token Vesting contract\\n\\t * @param _referral Roll 1.5\\n     */\\n\\tconstructor(\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\tuint8 _decimals,\\n\\t\\tuint256[4] memory _proportions,\\n\\t\\taddress _vestingBeneficiary,\\n\\t\\taddress _platformWallet,\\n\\t\\taddress _tokenVestingInstance,\\n\\t\\taddress _referral\\n\\t) ERC20(_name, _symbol) {\\n\\t\\t_setupDecimals(_decimals);\\n\\n\\t\\tuint256 totalProportions =\\n\\t\\t\\t_proportions[0].add(_proportions[1]).add(_proportions[2]).add(\\n\\t\\t\\t\\t_proportions[3]\\n\\t\\t\\t);\\n\\n\\t\\t_mint(_vestingBeneficiary, _proportions[0]);\\n\\t\\t_mint(_platformWallet, _proportions[1]);\\n\\t\\t_mint(_tokenVestingInstance, _proportions[2]);\\n\\t\\tif (_referral != address(0)) {\\n\\t\\t\\t_mint(_referral, _proportions[3]);\\n\\t\\t}\\n\\n\\t\\t//Sanity check that the totalSupply is exactly where we want it to be\\n\\t\\trequire(totalProportions == totalSupply(), \\\"Error on totalSupply\\\");\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/math/SafeMath.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n\\tusing SafeMath for uint256;\\n\\n\\tmapping(address => uint256) private _balances;\\n\\n\\tmapping(address => mapping(address => uint256)) private _allowances;\\n\\n\\tuint256 private _totalSupply;\\n\\n\\tstring private _name;\\n\\tstring private _symbol;\\n\\tuint8 private _decimals;\\n\\n\\t/**\\n\\t * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n\\t * a default value of 18.\\n\\t *\\n\\t * To select a different value for {decimals}, use {_setupDecimals}.\\n\\t *\\n\\t * All three of these values are immutable: they can only be set once during\\n\\t * construction.\\n\\t */\\n\\tconstructor(string memory name_, string memory symbol_) {\\n\\t\\t_name = name_;\\n\\t\\t_symbol = symbol_;\\n\\t\\t_decimals = 18;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the name of the token.\\n\\t */\\n\\tfunction name() public view virtual returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the symbol of the token, usually a shorter version of the\\n\\t * name.\\n\\t */\\n\\tfunction symbol() public view virtual returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the number of decimals used to get its user representation.\\n\\t * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n\\t * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n\\t *\\n\\t * Tokens usually opt for a value of 18, imitating the relationship between\\n\\t * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n\\t * called.\\n\\t *\\n\\t * NOTE: This information is only used for _display_ purposes: it in\\n\\t * no way affects any of the arithmetic of the contract, including\\n\\t * {IERC20-balanceOf} and {IERC20-transfer}.\\n\\t */\\n\\tfunction decimals() public view virtual returns (uint8) {\\n\\t\\treturn _decimals;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-totalSupply}.\\n\\t */\\n\\tfunction totalSupply() public view virtual override returns (uint256) {\\n\\t\\treturn _totalSupply;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-balanceOf}.\\n\\t */\\n\\tfunction balanceOf(address account)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _balances[account];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-transfer}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `recipient` cannot be the zero address.\\n\\t * - the caller must have a balance of at least `amount`.\\n\\t */\\n\\tfunction transfer(address recipient, uint256 amount)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\t_transfer(_msgSender(), recipient, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-allowance}.\\n\\t */\\n\\tfunction allowance(address owner, address spender)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _allowances[owner][spender];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-approve}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `spender` cannot be the zero address.\\n\\t */\\n\\tfunction approve(address spender, uint256 amount)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\t_approve(_msgSender(), spender, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-transferFrom}.\\n\\t *\\n\\t * Emits an {Approval} event indicating the updated allowance. This is not\\n\\t * required by the EIP. See the note at the beginning of {ERC20}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `sender` and `recipient` cannot be the zero address.\\n\\t * - `sender` must have a balance of at least `amount`.\\n\\t * - the caller must have allowance for ``sender``'s tokens of at least\\n\\t * `amount`.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) public virtual override returns (bool) {\\n\\t\\t_transfer(sender, recipient, amount);\\n\\t\\t_approve(\\n\\t\\t\\tsender,\\n\\t\\t\\t_msgSender(),\\n\\t\\t\\t_allowances[sender][_msgSender()].sub(\\n\\t\\t\\t\\tamount,\\n\\t\\t\\t\\t\\\"ERC20: transfer amount exceeds allowance\\\"\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Atomically increases the allowance granted to `spender` by the caller.\\n\\t *\\n\\t * This is an alternative to {approve} that can be used as a mitigation for\\n\\t * problems described in {IERC20-approve}.\\n\\t *\\n\\t * Emits an {Approval} event indicating the updated allowance.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `spender` cannot be the zero address.\\n\\t */\\n\\tfunction increaseAllowance(address spender, uint256 addedValue)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\t_approve(\\n\\t\\t\\t_msgSender(),\\n\\t\\t\\tspender,\\n\\t\\t\\t_allowances[_msgSender()][spender].add(addedValue)\\n\\t\\t);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n\\t *\\n\\t * This is an alternative to {approve} that can be used as a mitigation for\\n\\t * problems described in {IERC20-approve}.\\n\\t *\\n\\t * Emits an {Approval} event indicating the updated allowance.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `spender` cannot be the zero address.\\n\\t * - `spender` must have allowance for the caller of at least\\n\\t * `subtractedValue`.\\n\\t */\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\t_approve(\\n\\t\\t\\t_msgSender(),\\n\\t\\t\\tspender,\\n\\t\\t\\t_allowances[_msgSender()][spender].sub(\\n\\t\\t\\t\\tsubtractedValue,\\n\\t\\t\\t\\t\\\"ERC20: decreased allowance below zero\\\"\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Moves tokens `amount` from `sender` to `recipient`.\\n\\t *\\n\\t * This is internal function is equivalent to {transfer}, and can be used to\\n\\t * e.g. implement automatic token fees, slashing mechanisms, etc.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `sender` cannot be the zero address.\\n\\t * - `recipient` cannot be the zero address.\\n\\t * - `sender` must have a balance of at least `amount`.\\n\\t */\\n\\tfunction _transfer(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) internal virtual {\\n\\t\\trequire(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n\\t\\trequire(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(sender, recipient, amount);\\n\\n\\t\\t_balances[sender] = _balances[sender].sub(\\n\\t\\t\\tamount,\\n\\t\\t\\t\\\"ERC20: transfer amount exceeds balance\\\"\\n\\t\\t);\\n\\t\\t_balances[recipient] = _balances[recipient].add(amount);\\n\\t\\temit Transfer(sender, recipient, amount);\\n\\t}\\n\\n\\t/** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n\\t * the total supply.\\n\\t *\\n\\t * Emits a {Transfer} event with `from` set to the zero address.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `to` cannot be the zero address.\\n\\t */\\n\\tfunction _mint(address account, uint256 amount) internal virtual {\\n\\t\\trequire(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(address(0), account, amount);\\n\\n\\t\\t_totalSupply = _totalSupply.add(amount);\\n\\t\\t_balances[account] = _balances[account].add(amount);\\n\\t\\temit Transfer(address(0), account, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Destroys `amount` tokens from `account`, reducing the\\n\\t * total supply.\\n\\t *\\n\\t * Emits a {Transfer} event with `to` set to the zero address.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `account` cannot be the zero address.\\n\\t * - `account` must have at least `amount` tokens.\\n\\t */\\n\\tfunction _burn(address account, uint256 amount) internal virtual {\\n\\t\\trequire(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(account, address(0), amount);\\n\\n\\t\\t_balances[account] = _balances[account].sub(\\n\\t\\t\\tamount,\\n\\t\\t\\t\\\"ERC20: burn amount exceeds balance\\\"\\n\\t\\t);\\n\\t\\t_totalSupply = _totalSupply.sub(amount);\\n\\t\\temit Transfer(account, address(0), amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n\\t *\\n\\t * This internal function is equivalent to `approve`, and can be used to\\n\\t * e.g. set automatic allowances for certain subsystems, etc.\\n\\t *\\n\\t * Emits an {Approval} event.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `owner` cannot be the zero address.\\n\\t * - `spender` cannot be the zero address.\\n\\t */\\n\\tfunction _approve(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 amount\\n\\t) internal virtual {\\n\\t\\trequire(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n\\t\\trequire(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n\\t\\t_allowances[owner][spender] = amount;\\n\\t\\temit Approval(owner, spender, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets {decimals} to a value other than the default one of 18.\\n\\t *\\n\\t * WARNING: This function should only be called from the constructor. Most\\n\\t * applications that interact with token contracts will not expect\\n\\t * {decimals} to ever change, and may work incorrectly if it does.\\n\\t */\\n\\tfunction _setupDecimals(uint8 decimals_) internal virtual {\\n\\t\\t_decimals = decimals_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Hook that is called before any transfer of tokens. This includes\\n\\t * minting and burning.\\n\\t *\\n\\t * Calling conditions:\\n\\t *\\n\\t * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n\\t * will be to transferred to `to`.\\n\\t * - when `from` is zero, `amount` tokens will be minted for `to`.\\n\\t * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n\\t * - `from` and `to` are never both zero.\\n\\t *\\n\\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n\\t */\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n\\tfunction _msgSender() internal view virtual returns (address payable) {\\n\\t\\treturn msg.sender;\\n\\t}\\n\\n\\tfunction _msgData() internal view virtual returns (bytes memory) {\\n\\t\\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n\\t\\treturn msg.data;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n\\t/**\\n\\t * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction tryAdd(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool, uint256)\\n\\t{\\n\\t\\tuint256 c = a + b;\\n\\t\\tif (c < a) return (false, 0);\\n\\t\\treturn (true, c);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction trySub(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool, uint256)\\n\\t{\\n\\t\\tif (b > a) return (false, 0);\\n\\t\\treturn (true, a - b);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction tryMul(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool, uint256)\\n\\t{\\n\\t\\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n\\t\\t// benefit is lost if 'b' is also tested.\\n\\t\\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n\\t\\tif (a == 0) return (true, 0);\\n\\t\\tuint256 c = a * b;\\n\\t\\tif (c / a != b) return (false, 0);\\n\\t\\treturn (true, c);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction tryDiv(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool, uint256)\\n\\t{\\n\\t\\tif (b == 0) return (false, 0);\\n\\t\\treturn (true, a / b);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction tryMod(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool, uint256)\\n\\t{\\n\\t\\tif (b == 0) return (false, 0);\\n\\t\\treturn (true, a % b);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the addition of two unsigned integers, reverting on\\n\\t * overflow.\\n\\t *\\n\\t * Counterpart to Solidity's `+` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - Addition cannot overflow.\\n\\t */\\n\\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tuint256 c = a + b;\\n\\t\\trequire(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\t\\treturn c;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting on\\n\\t * overflow (when the result is negative).\\n\\t *\\n\\t * Counterpart to Solidity's `-` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - Subtraction cannot overflow.\\n\\t */\\n\\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\trequire(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n\\t\\treturn a - b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the multiplication of two unsigned integers, reverting on\\n\\t * overflow.\\n\\t *\\n\\t * Counterpart to Solidity's `*` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - Multiplication cannot overflow.\\n\\t */\\n\\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tif (a == 0) return 0;\\n\\t\\tuint256 c = a * b;\\n\\t\\trequire(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\t\\treturn c;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the integer division of two unsigned integers, reverting on\\n\\t * division by zero. The result is rounded towards zero.\\n\\t *\\n\\t * Counterpart to Solidity's `/` operator. Note: this function uses a\\n\\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n\\t * uses an invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\trequire(b > 0, \\\"SafeMath: division by zero\\\");\\n\\t\\treturn a / b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n\\t * reverting when dividing by zero.\\n\\t *\\n\\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\n\\t * invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\trequire(b > 0, \\\"SafeMath: modulo by zero\\\");\\n\\t\\treturn a % b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n\\t * overflow (when the result is negative).\\n\\t *\\n\\t * CAUTION: This function is deprecated because it requires allocating memory for the error\\n\\t * message unnecessarily. For custom revert reasons use {trySub}.\\n\\t *\\n\\t * Counterpart to Solidity's `-` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - Subtraction cannot overflow.\\n\\t */\\n\\tfunction sub(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\trequire(b <= a, errorMessage);\\n\\t\\treturn a - b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n\\t * division by zero. The result is rounded towards zero.\\n\\t *\\n\\t * CAUTION: This function is deprecated because it requires allocating memory for the error\\n\\t * message unnecessarily. For custom revert reasons use {tryDiv}.\\n\\t *\\n\\t * Counterpart to Solidity's `/` operator. Note: this function uses a\\n\\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n\\t * uses an invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction div(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\trequire(b > 0, errorMessage);\\n\\t\\treturn a / b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n\\t * reverting with custom message when dividing by zero.\\n\\t *\\n\\t * CAUTION: This function is deprecated because it requires allocating memory for the error\\n\\t * message unnecessarily. For custom revert reasons use {tryMod}.\\n\\t *\\n\\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\n\\t * invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction mod(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\trequire(b > 0, errorMessage);\\n\\t\\treturn a % b;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n\\t/**\\n\\t * @dev Returns the amount of tokens in existence.\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the amount of tokens owned by `account`.\\n\\t */\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n\\t *\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction transfer(address recipient, uint256 amount)\\n\\t\\texternal\\n\\t\\treturns (bool);\\n\\n\\t/**\\n\\t * @dev Returns the remaining number of tokens that `spender` will be\\n\\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n\\t * zero by default.\\n\\t *\\n\\t * This value changes when {approve} or {transferFrom} are called.\\n\\t */\\n\\tfunction allowance(address owner, address spender)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\t/**\\n\\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n\\t *\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\n\\t *\\n\\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n\\t * that someone may use both the old and the new allowance by unfortunate\\n\\t * transaction ordering. One possible solution to mitigate this race\\n\\t * condition is to first reduce the spender's allowance to 0 and set the\\n\\t * desired value afterwards:\\n\\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\t *\\n\\t * Emits an {Approval} event.\\n\\t */\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n\\t * allowance mechanism. `amount` is then deducted from the caller's\\n\\t * allowance.\\n\\t *\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n\\t * another (`to`).\\n\\t *\\n\\t * Note that `value` may be zero.\\n\\t */\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\t/**\\n\\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n\\t * a call to {approve}. `value` is the new allowance.\\n\\t */\\n\\tevent Approval(\\n\\t\\taddress indexed owner,\\n\\t\\taddress indexed spender,\\n\\t\\tuint256 value\\n\\t);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256[4]\",\"name\":\"_proportions\",\"type\":\"uint256[4]\"},{\"internalType\":\"address\",\"name\":\"_vestingBeneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platformWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenVestingInstance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SocialMoney", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000001a784379d99db420000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000069e10de76676d08000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000075261ee9d2d7817a135d54376f0761ce0be81c3600000000000000000000000086babeb53683382890890147b714040d3ffb0ee70000000000000000000000000e7f5c3c2a30823662045c3866681622bf4a5294000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044f4245590000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044f42455900000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}