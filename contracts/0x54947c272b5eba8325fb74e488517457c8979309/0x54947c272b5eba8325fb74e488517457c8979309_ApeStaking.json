{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/ApeStakingFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\nimport { Ownable } from \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\n\\ninterface IERC20 {\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n}\\n\\ninterface IERC721 {\\n  function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n  function ownerOf(uint256 tokenId) external view returns (address);\\n\\n  function setApprovalForAll(address operator, bool approved) external;\\n}\\n\\ninterface IOfficialApeStaking {\\n  struct SingleNft {\\n    uint32 tokenId;\\n    uint224 amount;\\n  }\\n\\n  function depositBAYC(SingleNft[] calldata _nfts) external;\\n\\n  function depositMAYC(SingleNft[] calldata _nfts) external;\\n\\n  function claimSelfBAYC(uint256[] calldata _nfts) external;\\n\\n  function claimSelfMAYC(uint256[] calldata _nfts) external;\\n\\n  function withdrawSelfBAYC(SingleNft[] calldata _nfts) external;\\n\\n  function withdrawSelfMAYC(SingleNft[] calldata _nfts) external;\\n}\\n\\ncontract ApeStaking is Ownable {\\n  address public constant BAYC = 0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D;\\n  address public constant MAYC = 0x60E4d786628Fea6478F785A6d7e704777c86a7c6;\\n  address public constant OfficialStaking = 0x5954aB967Bc958940b7EB73ee84797Dc8a2AFbb9;\\n  address public constant ApeCoin = 0x4d224452801ACEd8B2F0aebE155379bb5D594381;\\n  uint256 public constant BAYCApeAmount = 10094 * 1e18;\\n  uint256 public constant MAYCApeAmount = 2042 * 1e18;\\n  uint256 public constant funderShare = 70;\\n  address public funder;\\n  address public funderRewardReceiver;\\n  address public apeHolderRewardReceiver;\\n\\n  constructor(address _apeHolder, address _apeHolderRewardReceiver, address _funder, address _funderRewardReceiver) {\\n    apeHolderRewardReceiver = _apeHolderRewardReceiver;\\n    funder = _funder;\\n    funderRewardReceiver = _funderRewardReceiver;\\n\\n    IERC20(ApeCoin).approve(OfficialStaking, type(uint256).max);\\n    transferOwnership(_apeHolder);\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(msg.sender == owner() || msg.sender == funder, \\\"Not authorized\\\");\\n    _;\\n  }\\n\\n  function register(address project, uint256 tokenId) external onlyAdmin {\\n    IOfficialApeStaking.SingleNft[] memory nfts = new IOfficialApeStaking.SingleNft[](1);\\n    nfts[0].tokenId = uint32(tokenId);\\n    if (project == BAYC) {\\n      nfts[0].amount = uint224(BAYCApeAmount);\\n      IERC20(ApeCoin).transferFrom(funder, address(this), BAYCApeAmount);\\n      IERC721(BAYC).transferFrom(owner(), address(this), tokenId);\\n      IOfficialApeStaking(OfficialStaking).depositBAYC(nfts);\\n    } else if (project == MAYC) {\\n      nfts[0].amount = uint224(MAYCApeAmount);\\n      IERC20(ApeCoin).transferFrom(funder, address(this), MAYCApeAmount);\\n      IERC721(MAYC).transferFrom(owner(), address(this), tokenId);\\n      IOfficialApeStaking(OfficialStaking).depositMAYC(nfts);\\n    }\\n  }\\n\\n  function withdraw(address project, uint256 tokenId) external onlyAdmin {\\n    IOfficialApeStaking.SingleNft[] memory nfts = new IOfficialApeStaking.SingleNft[](1);\\n    nfts[0].tokenId = uint32(tokenId);\\n    if (project == BAYC) {\\n      nfts[0].amount = uint224(BAYCApeAmount);\\n      IOfficialApeStaking(OfficialStaking).withdrawSelfBAYC(nfts);\\n      IERC20(ApeCoin).transfer(funder, BAYCApeAmount);\\n    } else if (project == MAYC) {\\n      nfts[0].amount = uint224(MAYCApeAmount);\\n      IOfficialApeStaking(OfficialStaking).withdrawSelfMAYC(nfts);\\n      IERC20(ApeCoin).transfer(funder, MAYCApeAmount);\\n    }\\n    _distributeReward(IERC20(ApeCoin).balanceOf(address(this)));\\n    IERC721(project).transferFrom(address(this), owner(), tokenId);\\n  }\\n\\n  function claim(address project, uint256 tokenId) external {\\n    uint256[] memory tokenIds = new uint256[](1);\\n    tokenIds[0] = tokenId;\\n    if (project == BAYC) {\\n      IOfficialApeStaking(OfficialStaking).claimSelfBAYC(tokenIds);\\n    } else if (project == MAYC) {\\n      IOfficialApeStaking(OfficialStaking).claimSelfMAYC(tokenIds);\\n    }\\n    _distributeReward(IERC20(ApeCoin).balanceOf(address(this)));\\n  }\\n\\n  function _distributeReward(uint256 rewardAmount) internal {\\n    if (rewardAmount == 0) return;\\n    uint256 rewardToFunder = (rewardAmount * funderShare) / 100;\\n    uint256 rewardToApeHolder = rewardAmount - rewardToFunder;\\n    IERC20(ApeCoin).transfer(funderRewardReceiver, rewardToFunder);\\n    IERC20(ApeCoin).transfer(apeHolderRewardReceiver, rewardToApeHolder);\\n  }\\n}\\n\\ncontract ApeStakingFactory {\\n  mapping(address => address) public stakingsContracts;\\n  event Create(address indexed apeHolder, address funder, address stakingContract);\\n\\n  function create(\\n    address _apeHolder,\\n    address _apeHolderRewardReceiver,\\n    address _funder,\\n    address _funderRewardReceiver\\n  ) external returns (address) {\\n    require(stakingsContracts[_apeHolder] == address(0), \\\"Already created\\\");\\n    ApeStaking apeStaking = new ApeStaking(_apeHolder, _apeHolderRewardReceiver, _funder, _funderRewardReceiver);\\n    stakingsContracts[_apeHolder] = address(apeStaking);\\n    emit Create(_apeHolder, _funder, address(apeStaking));\\n    return address(apeStaking);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@prb/test/=lib/prb-test/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"prb-test/=lib/prb-test/src/\",\r\n      \"src/=src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_apeHolder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_apeHolderRewardReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_funderRewardReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ApeCoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BAYC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BAYCApeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAYC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAYCApeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OfficialStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apeHolderRewardReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"funder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"funderRewardReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"funderShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ApeStaking", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "0000000000000000000000001e3882aff34c1eaf5507e77026f215085bda1e190000000000000000000000001e3882aff34c1eaf5507e77026f215085bda1e19000000000000000000000000b99976ff83b67443ac741f42770159a07e93763e000000000000000000000000b99976ff83b67443ac741f42770159a07e93763e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}