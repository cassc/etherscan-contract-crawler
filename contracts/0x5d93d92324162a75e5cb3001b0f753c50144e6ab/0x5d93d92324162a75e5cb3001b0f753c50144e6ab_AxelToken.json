{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20TokenInterface\r\n * @dev Token contract interface for external use\r\n */\r\ncontract ERC20TokenInterface {\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n}\r\n/**\r\n* @title Admin parameters\r\n* @dev Define administration parameters for this contract\r\n*/\r\ncontract Admined { //This token contract is administered\r\n    address public admin; //Admin address is public\r\n\r\n    /**\r\n    * @dev Contract constructor, define initial administrator\r\n    */\r\n    constructor() internal {\r\n        admin = msg.sender; //Set initial admin to contract creator\r\n        emit AdminedEvent(admin);\r\n    }\r\n\r\n    modifier onlyAdmin() { //A modifier to define admin-only functions\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to set new admin address\r\n    * @param _newAdmin The address to transfer administration to\r\n    */\r\n    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\r\n        require(_newAdmin != address(0));\r\n        admin = _newAdmin;\r\n        emit TransferAdminship(admin);\r\n    }\r\n\r\n    //All admin actions have a log for public review\r\n    event TransferAdminship(address newAdminister);\r\n    event AdminedEvent(address administer);\r\n\r\n}\r\n\r\ncontract LockableToken is Admined {\r\n\r\n    event LockStatus(address _target, uint _timeStamp);\r\n\r\n    mapping (address => uint) internal locked; //public need to be reviewed\r\n    bool internal globalLock = true;\r\n\r\n    /**\r\n    * @notice _target - address you want to lock until _timeStamp - unix time\r\n    */\r\n    function setLocked(address _target, uint _timeStamp) public onlyAdmin returns (bool) {\r\n        locked[_target]=_timeStamp;\r\n        emit LockStatus(_target, _timeStamp);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice function allows admin to unlock tokens on _target address\r\n    */\r\n    function unLock(address _target) public onlyAdmin returns (bool) {\r\n        locked[_target] = 0;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Allow admin to unlock everything\r\n    */\r\n    function AllUnLock() public onlyAdmin returns (bool) {\r\n        globalLock = false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Allow admin to lock everything\r\n    */\r\n    function AllLock() public onlyAdmin returns (bool) {\r\n        globalLock = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Return state of globalLock\r\n    */\r\n    function isGlobalLock() public view returns (bool) {\r\n        return globalLock;\r\n    }\r\n\r\n    /**\r\n    * @notice Getter returns false if tokens are available and true if\r\n    *               unavailable\r\n    */\r\n    function isLocked(address _target) public view returns (bool) {\r\n        if(locked[_target] > now){\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is LockableToken {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  constructor() internal {\r\n    emit Unpause();\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n   function pause() onlyAdmin whenNotPaused public {\r\n     paused = true;\r\n     emit Pause();\r\n   }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyAdmin whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n/**\r\n * @title SafeMath by OpenZeppelin (partially)\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n* @title ERC20Token\r\n* @notice Token definition contract\r\n*/\r\ncontract ERC20Token is ERC20TokenInterface,  Admined, Pausable { //Standard definition of an ERC20Token\r\n    using SafeMath for uint256;\r\n    uint256 public totalSupply;\r\n    mapping (address => uint256) balances; //A mapping of all balances per address\r\n    mapping (address => mapping (address => uint256)) allowed; //A mapping of all allowances\r\n    mapping (address => bool) frozen; //A mapping of all frozen status\r\n\r\n    /**\r\n    * @dev Get the balance of an specified address.\r\n    * @param _owner The address to be query.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 value) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token to a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) whenNotPaused public returns (bool success) {\r\n        require(_to != address(0)); //If you dont want that people destroy token\r\n        require(frozen[msg.sender]==false);\r\n        if (globalLock == true) {\r\n            require(locked[msg.sender] <= now, 'Tokens locked as single');\r\n        }\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token from an address to another specified address using allowance\r\n    * @param _from The address where token comes.\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused public returns (bool success) {\r\n        require(_to != address(0)); //If you dont want that people destroy token\r\n        require(frozen[_from]==false);\r\n        if (globalLock == true) {\r\n            require(locked[msg.sender] <= now, 'Tokens locked as single');\r\n        }\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Assign allowance to an specified address to use the owner balance\r\n    * @param _spender The address to be allowed to spend.\r\n    * @param _value The amount to be allowed.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0)); //exploit mitigation\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the allowance of an specified address to use another address balance.\r\n    * @param _owner The address of the owner of the tokens.\r\n    * @param _spender The address of the allowed spender.\r\n    */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Frozen account.\r\n    * @param _target The address to being frozen.\r\n    * @param _flag The frozen status to set.\r\n    */\r\n    function setFrozen(address _target,bool _flag) onlyAdmin whenNotPaused public {\r\n        frozen[_target]=_flag;\r\n        emit FrozenStatus(_target,_flag);\r\n    }\r\n\r\n    /**\r\n    * @dev Log Events\r\n    */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event FrozenStatus(address _target,bool _flag);\r\n\r\n}\r\n/**\r\n* @title ERC20 Token minimal interface for external tokens handle\r\n*/\r\ncontract Token {\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n}\r\n\r\n/**\r\n* @title AXEL Token\r\n* @notice AXEL Token creation.\r\n* @dev ERC20 Token compliant\r\n*/\r\ncontract AxelToken is ERC20Token {\r\n\r\n    string public name = 'AXEL-AIRDROP';\r\n    uint8 public decimals = 18;\r\n    string public symbol = 'AXEL';\r\n    string public version = '1';\r\n\r\n    /**\r\n    * @notice token contructor.  250000000\r\n    */\r\n    constructor() public {\r\n        //totalSupply = 50000000000 * 10 ** uint256(decimals); //50.000.000.000 tokens initial supply;\r\n        totalSupply = 56601700 * 10 ** uint256(decimals); //50.000.000.000 tokens initial supply;\r\n        balances[msg.sender] = totalSupply;\r\n        emit Transfer(0, msg.sender, totalSupply);\r\n    }\r\n\r\n    /**\r\n    * @notice Function to claim any token stuck on contract\r\n    */\r\n    function externalTokensRecovery(Token _address) onlyAdmin public {\r\n        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\r\n        _address.transfer(msg.sender,remainder); //Transfer tokens to admin\r\n    }\r\n\r\n    /**\r\n      Allow transfers of tokens in groups of addresses\r\n    */\r\n    function sendBatches(address[] _addrs, uint256[] tokensValue) onlyAdmin public {\r\n      require(_addrs.length == tokensValue.length);\r\n      for(uint256 i = 0; i < _addrs.length; i++) {\r\n        require(transfer(_addrs[i], tokensValue[i]));\r\n        require(setLocked(_addrs[i], 1561766400)); // Locked for 06/29/2019\r\n      }\r\n    }\r\n\r\n    /**\r\n      Allow the admin to burn tokens\r\n    */\r\n    function burn(uint256 _value) onlyAdmin whenNotPaused public {\r\n      require(_value <= balances[msg.sender]);\r\n\r\n      balances[msg.sender] = balances[msg.sender].sub(_value);\r\n      totalSupply = totalSupply.sub(_value);\r\n\r\n      emit Burn(msg.sender, _value);\r\n      emit Transfer(msg.sender, address(0), _value);\r\n    }\r\n\r\n    /**\r\n    * @notice this contract will revert on direct non-function calls, also it's not payable\r\n    * @dev Function to handle callback calls to contract\r\n    */\r\n    function() public {\r\n        revert();\r\n    }\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"tokensValue\",\"type\":\"uint256[]\"}],\"name\":\"sendBatches\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"AllUnLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"externalTokensRecovery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_timeStamp\",\"type\":\"uint256\"}],\"name\":\"setLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"unLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isGlobalLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"AllLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setFrozen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"FrozenStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_timeStamp\",\"type\":\"uint256\"}],\"name\":\"LockStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAdminister\",\"type\":\"address\"}],\"name\":\"TransferAdminship\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"administer\",\"type\":\"address\"}],\"name\":\"AdminedEvent\",\"type\":\"event\"}]", "ContractName": "AxelToken", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://5a896d9775b3a8b2dbb0a0451b23b6a7f9c75162015eab4cd05a60b4b200de58"}