{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Flooftown.sol\": {\r\n      \"content\": \"/*\\n\\n    ___    _       ___     ___      ___   _____    ___  __      ___  _          __      _______     ___  \\n   | __|  | |     / _ \\\\   / _ \\\\    | __| |_   _|  / _ \\\\ \\\\ \\\\    / / \\\\| |         \\\\ \\\\    / /_   _|   | __| \\n   | _|   | |__  | (_) | | (_) |   | _|    | |   | (_) | \\\\ \\\\/\\\\/ /| .` |     _    \\\\ \\\\/\\\\/ /  | |     | _|  \\n  _|_|_   |____|  \\\\___/   \\\\___/   _|_|_   _|_|_   \\\\___/   \\\\_/\\\\_/ |_|\\\\_|   _(_)_   \\\\_/\\\\_/  _|_|_   _|_|_  \\n_| \\\"\\\"\\\" |_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_| \\\"\\\"\\\" |_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_| \\\"\\\"\\\" | \\n\\\"`-0-0-'\\\"`-0-0-'\\\"`-0-0-'\\\"`-0-0-'\\\"`-0-0-'\\\"`-0-0-'\\\"`-0-0-'\\\"`-0-0-'\\\"`-0-0-'\\\"`-0-0-'\\\"`-0-0-'\\\"`-0-0-'\\\"`-0-0-' \\n\\nChoo choo! Let's go FLOOFTOWN!\\n\\n*/\\n\\npragma solidity ^0.8.13;\\n\\ninterface IOperatorFilterRegistry {\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n    function register(address registrant) external;\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n    function subscriptionOf(address addr) external returns (address registrant);\\n    function subscribers(address registrant) external returns (address[] memory);\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n    function filteredOperators(address addr) external returns (address[] memory);\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n    function isRegistered(address addr) external returns (bool);\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\\n// File: OperatorFilterer.sol\\n\\n\\npragma solidity ^0.8.13;\\n\\n\\nabstract contract OperatorFilterer {\\n    error OperatorNotAllowed(address operator);\\n\\n    IOperatorFilterRegistry constant operatorFilterRegistry =\\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\\n\\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            if (subscribe) {\\n                operatorFilterRegistry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n            } else {\\n                if (subscriptionOrRegistrantToCopy != address(0)) {\\n                    operatorFilterRegistry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    operatorFilterRegistry.register(address(this));\\n                }\\n            }\\n        }\\n    }\\n\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            // Allow spending tokens from addresses with balance\\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n            // from an EOA.\\n            if (from == msg.sender) {\\n                _;\\n                return;\\n            }\\n            if (\\n                !(\\n                    operatorFilterRegistry.isOperatorAllowed(address(this), msg.sender)\\n                        && operatorFilterRegistry.isOperatorAllowed(address(this), from)\\n                )\\n            ) {\\n                revert OperatorNotAllowed(msg.sender);\\n            }\\n        }\\n        _;\\n    }\\n}\\n\\n// File: DefaultOperatorFilterer.sol\\n\\n\\npragma solidity ^0.8.13;\\n\\n\\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\\n    address constant DEFAULT_SUBSCRIPTION = address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\\n\\n    constructor() OperatorFilterer(DEFAULT_SUBSCRIPTION, true) {}\\n}\\n\\n\\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/MerkleProof.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Strings.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Address.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\n// File: @openzeppelin/contracts/utils/Context.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n// File: contracts/erc721a.sol\\n\\n\\n\\n// Creator: Chiru Labs\\n\\n\\n\\npragma solidity ^0.8.4;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\n\\nerror ApprovalQueryForNonexistentToken();\\n\\nerror ApproveToCaller();\\n\\nerror ApprovalToCurrentOwner();\\n\\nerror BalanceQueryForZeroAddress();\\n\\nerror MintToZeroAddress();\\n\\nerror MintZeroQuantity();\\n\\nerror OwnerQueryForNonexistentToken();\\n\\nerror TransferCallerNotOwnerNorApproved();\\n\\nerror TransferFromIncorrectOwner();\\n\\nerror TransferToNonERC721ReceiverImplementer();\\n\\nerror TransferToZeroAddress();\\n\\nerror URIQueryForNonexistentToken();\\n\\n\\n\\n/**\\n\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n\\n *\\n\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n\\n *\\n\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n\\n *\\n\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n\\n */\\n\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\\n\\n    using Address for address;\\n\\n    using Strings for uint256;\\n\\n\\n\\n    // Compiler will pack this into a single 256bit word.\\n\\n    struct TokenOwnership {\\n\\n        // The address of the owner.\\n\\n        address addr;\\n\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n\\n        uint64 startTimestamp;\\n\\n        // Whether the token has been burned.\\n\\n        bool burned;\\n\\n    }\\n\\n\\n\\n    // Compiler will pack this into a single 256bit word.\\n\\n    struct AddressData {\\n\\n        // Realistically, 2**64-1 is more than enough.\\n\\n        uint64 balance;\\n\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n\\n        uint64 numberMinted;\\n\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n\\n        uint64 numberBurned;\\n\\n        // For miscellaneous variable(s) pertaining to the address\\n\\n        // (e.g. number of whitelist mint slots used).\\n\\n        // If there are multiple variables, please pack them into a uint64.\\n\\n        uint64 aux;\\n\\n    }\\n\\n\\n\\n    // The tokenId of the next token to be minted.\\n\\n    uint256 internal _currentIndex;\\n\\n\\n\\n    // The number of tokens burned.\\n\\n    uint256 internal _burnCounter;\\n\\n\\n\\n    // Token name\\n\\n    string private _name;\\n\\n\\n\\n    // Token symbol\\n\\n    string private _symbol;\\n\\n\\n\\n    // Mapping from token ID to ownership details\\n\\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n\\n\\n    // Mapping owner address to address data\\n\\n    mapping(address => AddressData) private _addressData;\\n\\n\\n\\n    // Mapping from token ID to approved address\\n\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n\\n\\n    // Mapping from owner to operator approvals\\n\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n\\n\\n    constructor(string memory name_, string memory symbol_) {\\n\\n        _name = name_;\\n\\n        _symbol = symbol_;\\n\\n        _currentIndex = _startTokenId();\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * To change the starting tokenId, please override this function.\\n\\n     */\\n\\n    function _startTokenId() internal view virtual returns (uint256) {\\n\\n        return 1;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n\\n     */\\n\\n    function totalSupply() public view returns (uint256) {\\n\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n\\n        // more than _currentIndex - _startTokenId() times\\n\\n        unchecked {\\n\\n            return _currentIndex - _burnCounter - _startTokenId();\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Returns the total amount of tokens minted in the contract.\\n\\n     */\\n\\n    function _totalMinted() internal view returns (uint256) {\\n\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n\\n        // and it is initialized to _startTokenId()\\n\\n        unchecked {\\n\\n            return _currentIndex - _startTokenId();\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev See {IERC165-supportsInterface}.\\n\\n     */\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n\\n        return\\n\\n            interfaceId == type(IERC721).interfaceId ||\\n\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n\\n            super.supportsInterface(interfaceId);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev See {IERC721-balanceOf}.\\n\\n     */\\n\\n    function balanceOf(address owner) public view override returns (uint256) {\\n\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n\\n        return uint256(_addressData[owner].balance);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Returns the number of tokens minted by `owner`.\\n\\n     */\\n\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n\\n        return uint256(_addressData[owner].numberMinted);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n\\n     */\\n\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n\\n        return uint256(_addressData[owner].numberBurned);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n\\n     */\\n\\n    function _getAux(address owner) internal view returns (uint64) {\\n\\n        return _addressData[owner].aux;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n\\n     * If there are multiple variables, please pack them into a uint64.\\n\\n     */\\n\\n    function _setAux(address owner, uint64 aux) internal {\\n\\n        _addressData[owner].aux = aux;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n\\n     */\\n\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n\\n        uint256 curr = tokenId;\\n\\n\\n\\n        unchecked {\\n\\n            if (_startTokenId() <= curr && curr < _currentIndex) {\\n\\n                TokenOwnership memory ownership = _ownerships[curr];\\n\\n                if (!ownership.burned) {\\n\\n                    if (ownership.addr != address(0)) {\\n\\n                        return ownership;\\n\\n                    }\\n\\n                    // Invariant:\\n\\n                    // There will always be an ownership that has an address and is not burned\\n\\n                    // before an ownership that does not have an address and is not burned.\\n\\n                    // Hence, curr will not underflow.\\n\\n                    while (true) {\\n\\n                        curr--;\\n\\n                        ownership = _ownerships[curr];\\n\\n                        if (ownership.addr != address(0)) {\\n\\n                            return ownership;\\n\\n                        }\\n\\n                    }\\n\\n                }\\n\\n            }\\n\\n        }\\n\\n        revert OwnerQueryForNonexistentToken();\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev See {IERC721-ownerOf}.\\n\\n     */\\n\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n\\n        return _ownershipOf(tokenId).addr;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev See {IERC721Metadata-name}.\\n\\n     */\\n\\n    function name() public view virtual override returns (string memory) {\\n\\n        return _name;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev See {IERC721Metadata-symbol}.\\n\\n     */\\n\\n    function symbol() public view virtual override returns (string memory) {\\n\\n        return _symbol;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev See {IERC721Metadata-tokenURI}.\\n\\n     */\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n\\n\\n        string memory baseURI = _baseURI();\\n\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n\\n     * by default, can be overriden in child contracts.\\n\\n     */\\n\\n    function _baseURI() internal view virtual returns (string memory) {\\n\\n        return '';\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev See {IERC721-approve}.\\n\\n     */\\n\\n    function approve(address to, uint256 tokenId) public override {\\n\\n        address owner = ERC721A.ownerOf(tokenId);\\n\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n\\n            revert ApprovalCallerNotOwnerNorApproved();\\n\\n        }\\n\\n\\n\\n        _approve(to, tokenId, owner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev See {IERC721-getApproved}.\\n\\n     */\\n\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n\\n\\n        return _tokenApprovals[tokenId];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev See {IERC721-setApprovalForAll}.\\n\\n     */\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev See {IERC721-isApprovedForAll}.\\n\\n     */\\n\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n\\n        return _operatorApprovals[owner][operator];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev See {IERC721-transferFrom}.\\n\\n     */\\n\\n    function transferFrom(\\n\\n        address from,\\n\\n        address to,\\n\\n        uint256 tokenId\\n\\n    ) public virtual override {\\n\\n        _transfer(from, to, tokenId);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev See {IERC721-safeTransferFrom}.\\n\\n     */\\n\\n    function safeTransferFrom(\\n\\n        address from,\\n\\n        address to,\\n\\n        uint256 tokenId\\n\\n    ) public virtual override {\\n\\n        safeTransferFrom(from, to, tokenId, '');\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev See {IERC721-safeTransferFrom}.\\n\\n     */\\n\\n    function safeTransferFrom(\\n\\n        address from,\\n\\n        address to,\\n\\n        uint256 tokenId,\\n\\n        bytes memory _data\\n\\n    ) public virtual override {\\n\\n        _transfer(from, to, tokenId);\\n\\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n\\n            revert TransferToNonERC721ReceiverImplementer();\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Returns whether `tokenId` exists.\\n\\n     *\\n\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n\\n     *\\n\\n     * Tokens start existing when they are minted (`_mint`),\\n\\n     */\\n\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n\\n        return _startTokenId() <= tokenId && tokenId < _currentIndex &&\\n\\n            !_ownerships[tokenId].burned;\\n\\n    }\\n\\n\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n\\n        _safeMint(to, quantity, '');\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n\\n     *\\n\\n     * Requirements:\\n\\n     *\\n\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n\\n     * - `quantity` must be greater than 0.\\n\\n     *\\n\\n     * Emits a {Transfer} event.\\n\\n     */\\n\\n    function _safeMint(\\n\\n        address to,\\n\\n        uint256 quantity,\\n\\n        bytes memory _data\\n\\n    ) internal {\\n\\n        _mint(to, quantity, _data, true);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n\\n     *\\n\\n     * Requirements:\\n\\n     *\\n\\n     * - `to` cannot be the zero address.\\n\\n     * - `quantity` must be greater than 0.\\n\\n     *\\n\\n     * Emits a {Transfer} event.\\n\\n     */\\n\\n    function _mint(\\n\\n        address to,\\n\\n        uint256 quantity,\\n\\n        bytes memory _data,\\n\\n        bool safe\\n\\n    ) internal {\\n\\n        uint256 startTokenId = _currentIndex;\\n\\n        if (to == address(0)) revert MintToZeroAddress();\\n\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n\\n\\n        // Overflows are incredibly unrealistic.\\n\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n\\n        unchecked {\\n\\n            _addressData[to].balance += uint64(quantity);\\n\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n\\n\\n            _ownerships[startTokenId].addr = to;\\n\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n\\n\\n            uint256 updatedIndex = startTokenId;\\n\\n            uint256 end = updatedIndex + quantity;\\n\\n\\n\\n            if (safe && to.isContract()) {\\n\\n                do {\\n\\n                    emit Transfer(address(0), to, updatedIndex);\\n\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n\\n                        revert TransferToNonERC721ReceiverImplementer();\\n\\n                    }\\n\\n                } while (updatedIndex != end);\\n\\n                // Reentrancy protection\\n\\n                if (_currentIndex != startTokenId) revert();\\n\\n            } else {\\n\\n                do {\\n\\n                    emit Transfer(address(0), to, updatedIndex++);\\n\\n                } while (updatedIndex != end);\\n\\n            }\\n\\n            _currentIndex = updatedIndex;\\n\\n        }\\n\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n\\n     *\\n\\n     * Requirements:\\n\\n     *\\n\\n     * - `to` cannot be the zero address.\\n\\n     * - `tokenId` token must be owned by `from`.\\n\\n     *\\n\\n     * Emits a {Transfer} event.\\n\\n     */\\n\\n    function _transfer(\\n\\n        address from,\\n\\n        address to,\\n\\n        uint256 tokenId\\n\\n    ) private {\\n\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n\\n\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\n\\n            isApprovedForAll(from, _msgSender()) ||\\n\\n            getApproved(tokenId) == _msgSender());\\n\\n\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n\\n\\n        // Clear approvals from the previous owner\\n\\n        _approve(address(0), tokenId, from);\\n\\n\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n\\n        // ownership above and the recipient's balance can't realistically overflow.\\n\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n\\n        unchecked {\\n\\n            _addressData[from].balance -= 1;\\n\\n            _addressData[to].balance += 1;\\n\\n\\n\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n\\n            currSlot.addr = to;\\n\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n\\n            uint256 nextTokenId = tokenId + 1;\\n\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n\\n            if (nextSlot.addr == address(0)) {\\n\\n                // This will suffice for checking _exists(nextTokenId),\\n\\n                // as a burned slot cannot contain the zero address.\\n\\n                if (nextTokenId != _currentIndex) {\\n\\n                    nextSlot.addr = from;\\n\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n\\n                }\\n\\n            }\\n\\n        }\\n\\n\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev This is equivalent to _burn(tokenId, false)\\n\\n     */\\n\\n    function _burn(uint256 tokenId) internal virtual {\\n\\n        _burn(tokenId, false);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Destroys `tokenId`.\\n\\n     * The approval is cleared when the token is burned.\\n\\n     *\\n\\n     * Requirements:\\n\\n     *\\n\\n     * - `tokenId` must exist.\\n\\n     *\\n\\n     * Emits a {Transfer} event.\\n\\n     */\\n\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n\\n\\n        address from = prevOwnership.addr;\\n\\n\\n\\n        if (approvalCheck) {\\n\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\n\\n                isApprovedForAll(from, _msgSender()) ||\\n\\n                getApproved(tokenId) == _msgSender());\\n\\n\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n\\n        }\\n\\n\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n\\n\\n        // Clear approvals from the previous owner\\n\\n        _approve(address(0), tokenId, from);\\n\\n\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n\\n        // ownership above and the recipient's balance can't realistically overflow.\\n\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n\\n        unchecked {\\n\\n            AddressData storage addressData = _addressData[from];\\n\\n            addressData.balance -= 1;\\n\\n            addressData.numberBurned += 1;\\n\\n\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n\\n            currSlot.addr = from;\\n\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            currSlot.burned = true;\\n\\n\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n\\n            uint256 nextTokenId = tokenId + 1;\\n\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n\\n            if (nextSlot.addr == address(0)) {\\n\\n                // This will suffice for checking _exists(nextTokenId),\\n\\n                // as a burned slot cannot contain the zero address.\\n\\n                if (nextTokenId != _currentIndex) {\\n\\n                    nextSlot.addr = from;\\n\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n\\n                }\\n\\n            }\\n\\n        }\\n\\n\\n\\n        emit Transfer(from, address(0), tokenId);\\n\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n\\n        unchecked {\\n\\n            _burnCounter++;\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Approve `to` to operate on `tokenId`\\n\\n     *\\n\\n     * Emits a {Approval} event.\\n\\n     */\\n\\n    function _approve(\\n\\n        address to,\\n\\n        uint256 tokenId,\\n\\n        address owner\\n\\n    ) private {\\n\\n        _tokenApprovals[tokenId] = to;\\n\\n        emit Approval(owner, to, tokenId);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n\\n     *\\n\\n     * @param from address representing the previous owner of the given token ID\\n\\n     * @param to target address that will receive the tokens\\n\\n     * @param tokenId uint256 ID of the token to be transferred\\n\\n     * @param _data bytes optional data to send along with the call\\n\\n     * @return bool whether the call correctly returned the expected magic value\\n\\n     */\\n\\n    function _checkContractOnERC721Received(\\n\\n        address from,\\n\\n        address to,\\n\\n        uint256 tokenId,\\n\\n        bytes memory _data\\n\\n    ) private returns (bool) {\\n\\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n\\n            return retval == IERC721Receiver(to).onERC721Received.selector;\\n\\n        } catch (bytes memory reason) {\\n\\n            if (reason.length == 0) {\\n\\n                revert TransferToNonERC721ReceiverImplementer();\\n\\n            } else {\\n\\n                assembly {\\n\\n                    revert(add(32, reason), mload(reason))\\n\\n                }\\n\\n            }\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n\\n     * And also called before burning one token.\\n\\n     *\\n\\n     * startTokenId - the first token id to be transferred\\n\\n     * quantity - the amount to be transferred\\n\\n     *\\n\\n     * Calling conditions:\\n\\n     *\\n\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n\\n     * transferred to `to`.\\n\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n\\n     * - `from` and `to` are never both zero.\\n\\n     */\\n\\n    function _beforeTokenTransfers(\\n\\n        address from,\\n\\n        address to,\\n\\n        uint256 startTokenId,\\n\\n        uint256 quantity\\n\\n    ) internal virtual {}\\n\\n\\n\\n    /**\\n\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n\\n     * minting.\\n\\n     * And also called after one token has been burned.\\n\\n     *\\n\\n     * startTokenId - the first token id to be transferred\\n\\n     * quantity - the amount to be transferred\\n\\n     *\\n\\n     * Calling conditions:\\n\\n     *\\n\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n\\n     * transferred to `to`.\\n\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n\\n     * - `from` and `to` are never both zero.\\n\\n     */\\n\\n    function _afterTokenTransfers(\\n\\n        address from,\\n\\n        address to,\\n\\n        uint256 startTokenId,\\n\\n        uint256 quantity\\n\\n    ) internal virtual {}\\n\\n}\\n// File: @openzeppelin/contracts/access/Ownable.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n// File: contracts/contract.sol\\n\\n\\npragma solidity ^0.8.4;\\n\\n\\n\\ncontract FLOOFTOWN is Ownable, ERC721A, DefaultOperatorFilterer  {\\n\\n    using Strings for uint256;\\n\\n    string private baseTokenURI;\\n    bytes32 private merkleRoot;\\n\\n    uint256 public presaleCost = 0.008 ether;\\n    uint256 public publicSaleCost = 0.01 ether;\\n\\n    uint64 public maxSupply = 1000;\\n\\n    uint64 public publicMaxSupply = 1000;\\n    uint64 public publicTotalSupply = 0;\\n    uint64 public presaleMaxSupply = 1000;\\n    uint64 public presaleTotalSupply = 0;\\n\\n    uint64 public presaleLimit = 4;\\n    uint64 public publicLimit = 10;\\n\\n    bool public presaleActive = false;\\n    bool public publicSaleActive = false;\\n    mapping(address => uint256) public claimed;\\n\\n\\n    constructor() ERC721A(\\\"Flooftown\\\", \\\"FLOOF\\\"){}\\n\\n    modifier mintCompliance(uint256 _mintAmount) {\\n        require(_mintAmount > 0 , \\\"Invalid mint amount!\\\");\\n        require(totalMinted() + _mintAmount <= maxSupply, \\\"Max supply exceeded!\\\");\\n        _;\\n    }\\n\\n    function claim(uint256 _mintAmount, bytes32[] memory _merkleProof) public payable {\\n        require(_mintAmount > 0);\\n        require(presaleActive, \\\"PUBLICSALE_INACTIVE\\\");\\n        bytes32 leaf = keccak256(abi.encodePacked(_msgSender()));\\n        require(MerkleProof.verify(_merkleProof, merkleRoot, leaf), 'Invalid proof!');\\n        uint256 s = totalSupply();\\n        require(s + _mintAmount <= maxSupply, \\\"Cant go over supply\\\");\\n        require(claimed[msg.sender] + _mintAmount <= 2, \\\"CLAIM_MAXED\\\");\\n\\n        unchecked {\\n            claimed[msg.sender] += _mintAmount;\\n        }\\n\\n        _safeMint(msg.sender, _mintAmount);\\n        delete s;\\n    }\\n\\n    ///Mints NFTs for whitelist members during the presale\\n    function presaleMint(uint64 _mintAmount) public payable mintCompliance(_mintAmount) {\\n        require(presaleActive, \\\"Presale is not Active\\\");\\n\\n        require(msg.value >= presaleCost * _mintAmount, \\\"Insufficient funds!\\\");\\n        \\n        uint64 presaleMinted = getpresaleMinted(msg.sender);\\n        require(presaleMinted + _mintAmount <= presaleLimit, \\\"Mint limit exceeded.\\\" );\\n\\n        setpresaleMinted(msg.sender,presaleMinted + _mintAmount);\\n\\n        _safeMint(msg.sender, _mintAmount);\\n    }\\n\\n    ///Allows any address to mint when the public sale is open\\n    function publicMint(uint64 _mintAmount) public payable mintCompliance(_mintAmount) {\\n        require(publicSaleActive, \\\"Public is not Active\\\");\\n\\n        require(numberMinted(msg.sender) + _mintAmount <= publicLimit, \\\"Mint limit exceeded.\\\" );\\n        require(msg.value >= publicSaleCost * _mintAmount, \\\"Insufficient funds!\\\");\\n\\n        _safeMint(msg.sender, _mintAmount);\\n    }\\n\\n    ///Allows owner of the collection to airdrop a token to any address\\n    function ownerMint(uint256 _mintAmount, address _receiver) public mintCompliance(_mintAmount) onlyOwner {\\n        _safeMint(_receiver, _mintAmount);\\n    }\\n\\n    //@return token ids owned by an address in the collection\\n    function walletOfOwner(address _owner)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256 ownerTokenCount = balanceOf(_owner);\\n        uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);\\n        uint256 currentTokenId = 1;\\n        uint256 ownedTokenIndex = 0;\\n\\n        while (ownedTokenIndex < ownerTokenCount && currentTokenId <= maxSupply) {\\n            if(exists(currentTokenId) == true) {\\n                address currentTokenOwner = ownerOf(currentTokenId);\\n\\n                if (currentTokenOwner == _owner) {\\n                    ownedTokenIds[ownedTokenIndex] = currentTokenId;\\n                    ownedTokenIndex++;\\n                }\\n            }\\n            currentTokenId++;\\n        }\\n\\n        return ownedTokenIds;\\n    }\\n\\n    function transferFrom(address from, address to, uint256 tokenId) public override onlyAllowedOperator(from) {\\n        super.transferFrom(from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public override onlyAllowedOperator(from) {\\n        super.safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data)\\n        public\\n        override\\n        onlyAllowedOperator(from)\\n    {\\n        super.safeTransferFrom(from, to, tokenId, data);\\n    }\\n\\n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\\n        merkleRoot = _merkleRoot;\\n    }\\n\\n    //@return full url for passed in token id \\n    function tokenURI(uint256 _tokenId)\\n\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n\\n    {\\n\\n        require(\\n        _exists(_tokenId),\\n        \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        string memory currentBaseURI = _baseURI();\\n\\n        return bytes(currentBaseURI).length > 0\\n\\n            ? string(abi.encodePacked(currentBaseURI, _tokenId.toString()))\\n\\n            : \\\"\\\";\\n    }\\n\\n\\n\\n    //@return amount an address has minted during the presale\\n    function getpresaleMinted(address _owner) public view returns (uint64) {\\n        return _getAux(_owner);\\n    }\\n\\n    function setpresaleMinted(address _owner, uint64 _aux) internal {\\n        _setAux(_owner, _aux);\\n    }\\n\\n\\n    //@return amount an address has minted during all sales\\n    function numberMinted(address _owner) public view returns (uint256) {\\n        return _numberMinted(_owner);\\n    }\\n\\n    //@return all NFT's minted including burned tokens\\n    function totalMinted() public view returns (uint256) {\\n        return _totalMinted();\\n    }\\n\\n    function exists(uint256 _tokenId) public view returns (bool) {\\n        return _exists(_tokenId);\\n    }\\n\\n    //@return url for the nft metadata\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseTokenURI;\\n    }\\n\\n    function setBaseURI(string calldata _URI) external onlyOwner {\\n        baseTokenURI = _URI;\\n    }\\n    \\n    function setPresaleActive(bool _state) public onlyOwner {\\n        presaleActive = _state;\\n    }\\n\\n    function setPublicActive(bool _state) public onlyOwner {\\n        publicSaleActive = _state;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        (bool os, ) = payable(owner()).call{value: address(this).balance}(\\\"\\\");\\n        require(os);\\n    }\\n\\n    /// Fallbacks \\n    receive() external payable { }\\n    fallback() external payable { }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getpresaleMinted\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"numberMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"ownerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleLimit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleMaxSupply\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_mintAmount\",\"type\":\"uint64\"}],\"name\":\"presaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleTotalSupply\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicLimit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMaxSupply\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_mintAmount\",\"type\":\"uint64\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicTotalSupply\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_URI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setPresaleActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setPublicActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FLOOFTOWN", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}