{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Deployer.sol\": {\r\n      \"content\": \"/* solhint-disable private-vars-leading-underscore */\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"openzeppelin/token/ERC721/IERC721.sol\\\";\\nimport \\\"TokenGatedAccount/TBARegistry.sol\\\";\\nimport \\\"TokenGatedAccount/TokenGatedAccount.sol\\\";\\nimport \\\"./MiladyAvatar.sol\\\";\\nimport \\\"./LiquidAccessories.sol\\\";\\nimport \\\"./SoulboundAccessories.sol\\\";\\nimport \\\"./Rewards.sol\\\";\\n\\ncontract Deployer {\\n    MiladyAvatar public avatarContract;\\n    Rewards public rewardsContract;\\n    LiquidAccessories public liquidAccessoriesContract;\\n    SoulboundAccessories public soulboundAccessoriesContract;\\n\\n    event Deployed(\\n        address avatarContractAddress,\\n        address liquidAccessoriesContractAddress,\\n        address soulboundAccessoriesContractAddress,\\n        address rewardsContractAddress\\n    );\\n\\n    constructor(\\n        TBARegistry tbaRegistry,\\n        TokenGatedAccount tbaAccountImpl,\\n        IERC721 miladysContract,\\n        address miladyAuthorityAddress,\\n        address liquidAccessoriesOwner,\\n        address soulboundAccessoriesOwner,\\n        address payable revenueRecipient,\\n        string memory avatarBaseURI,\\n        string memory liquidAccessoriesURI,\\n        string memory soulboundAccessoriesURI\\n    )\\n    {\\n        avatarContract = new MiladyAvatar(\\n            miladysContract,\\n            tbaRegistry,\\n            tbaAccountImpl,\\n            avatarBaseURI\\n        );\\n\\n        rewardsContract = new Rewards(address(avatarContract), miladysContract);\\n\\n        liquidAccessoriesContract = new LiquidAccessories(\\n            tbaRegistry,\\n            rewardsContract,\\n            revenueRecipient,\\n            liquidAccessoriesURI\\n        );\\n\\n        soulboundAccessoriesContract = new SoulboundAccessories(\\n            tbaRegistry,\\n            tbaAccountImpl,\\n            miladyAuthorityAddress,\\n            soulboundAccessoriesURI\\n        );\\n\\n        avatarContract.setOtherContracts(liquidAccessoriesContract, soulboundAccessoriesContract, rewardsContract);\\n        liquidAccessoriesContract.setAvatarContract(avatarContract);\\n        soulboundAccessoriesContract.setAvatarContract(avatarContract);\\n\\n        liquidAccessoriesContract.transferOwnership(liquidAccessoriesOwner);\\n        soulboundAccessoriesContract.transferOwnership(soulboundAccessoriesOwner);\\n\\n        emit Deployed(\\n            address(avatarContract),\\n            address(liquidAccessoriesContract),\\n            address(soulboundAccessoriesContract),\\n            address(rewardsContract)\\n        );\\n    }\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/TokenGatedAccount/src/TBARegistry.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.18;\\n\\nimport \\\"openzeppelin/utils/Create2.sol\\\";\\nimport \\\"./IERC6551Registry.sol\\\";\\n\\ncontract TBARegistry is IERC6551Registry {\\n    error InitializationFailed();\\n\\n    struct TBA {\\n        address tokenContract;\\n        uint tokenId;\\n    }\\n    mapping (address => TBA) public registeredAccounts;\\n\\n    function createAccount(\\n        address _implementation,\\n        uint256 _chainId,\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        uint256 _salt,\\n        bytes calldata initData\\n    ) external returns (address) {\\n        bytes memory code = _creationCode(_implementation, _chainId, _tokenContract, _tokenId, _salt);\\n\\n        address _account = Create2.computeAddress(\\n            bytes32(_salt),\\n            keccak256(code)\\n        );\\n\\n        if (_account.code.length != 0) return _account;\\n\\n        _account = Create2.deploy(0, bytes32(_salt), code);\\n\\n        registeredAccounts[_account].tokenContract = _tokenContract;\\n        registeredAccounts[_account].tokenId = _tokenId;\\n\\n        if (initData.length != 0) {\\n            (bool success, ) = _account.call(initData);\\n            if (!success) revert InitializationFailed();\\n        }\\n\\n        emit AccountCreated(\\n            _account,\\n            _implementation,\\n            _chainId,\\n            _tokenContract,\\n            _tokenId,\\n            _salt\\n        );\\n\\n        return _account;\\n    }\\n\\n    function account(\\n        address _implementation,\\n        uint256 _chainId,\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        uint256 _salt\\n    ) external view returns (address) {\\n        bytes32 bytecodeHash = keccak256(\\n            _creationCode(_implementation, _chainId, _tokenContract, _tokenId, _salt)\\n        );\\n\\n        return Create2.computeAddress(bytes32(_salt), bytecodeHash);\\n    }\\n\\n    function _creationCode(\\n        address _implementation,\\n        uint256 _chainId,\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        uint256 _salt\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                hex\\\"3d60ad80600a3d3981f3363d3d373d3d3d363d73\\\",\\n                _implementation,\\n                hex\\\"5af43d82803e903d91602b57fd5bf3\\\",\\n                abi.encode(_salt, _chainId, _tokenContract, _tokenId)\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/TokenGatedAccount/src/TokenGatedAccount.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.18;\\n\\nimport \\\"openzeppelin/utils/introspection/IERC165.sol\\\";\\nimport \\\"openzeppelin/token/ERC721/IERC721.sol\\\";\\nimport \\\"openzeppelin/interfaces/IERC1271.sol\\\";\\nimport \\\"openzeppelin/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"openzeppelin/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"openzeppelin/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"sstore2/utils/Bytecode.sol\\\";\\nimport \\\"./IERC6551Account.sol\\\";\\nimport \\\"./IERC6551Executable.sol\\\";\\n\\ncontract TokenGatedAccount is IERC165, IERC1271, IERC6551Account, IERC6551Executable, IERC1155Receiver, IERC721Receiver {\\n    address public bondedAddress;\\n    address public tokenOwnerAtLastBond;\\n\\n    // ensures the msg.sender is either:\\n    //  * the token owner\\n    //  * the bonded account - UNLESS owner() has changed since that bond call\\n    modifier onlyAuthorizedMsgSender() {\\n        require(_isValidSigner(msg.sender), \\\"Unauthorized caller\\\");\\n        _;\\n    }\\n\\n    event NewBondedAddress(address indexed _newBondedAddress);\\n\\n    // note that we the bonded address can pass this bond on without authorization from owner()\\n    function bond(address _addressToBond) \\n        external\\n        onlyAuthorizedMsgSender()\\n    {\\n        bondedAddress = _addressToBond;\\n        tokenOwnerAtLastBond = owner();\\n\\n        emit NewBondedAddress(_addressToBond);\\n    }\\n\\n    uint public state;\\n\\n    receive() external payable {}\\n    fallback() external payable {}\\n\\n    function execute(address _to, uint256 _value, bytes calldata _data, uint operation)\\n        external\\n        payable\\n        onlyAuthorizedMsgSender()\\n        returns (bytes memory result)\\n    {\\n        require(operation == 0, \\\"Only call operations are supported\\\");\\n\\n        state ++;\\n\\n        bool success;\\n        (success, result) = _to.call{value: _value}(_data);\\n\\n        if (!success) {\\n            assembly {\\n                revert(add(result, 32), mload(result))\\n            }\\n        }\\n    }\\n\\n    function token()\\n        external\\n        view\\n        returns (\\n            uint256 _chainId,\\n            address _tokenContract,\\n            uint256 _tokenId\\n        )\\n    {\\n        uint256 length = address(this).code.length;\\n        return\\n            abi.decode(\\n                Bytecode.codeAt(address(this), length - 0x60, length),\\n                (uint256, address, uint256)\\n            );\\n    }\\n\\n    function owner() public view returns (address) {\\n        (uint256 chainId, address tokenContract, uint256 tokenId) = this.token();\\n        if (chainId != block.chainid) return address(0);\\n\\n        return IERC721(tokenContract).ownerOf(tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\\n        return (_interfaceId == type(IERC165).interfaceId ||\\n            _interfaceId == type(IERC6551Account).interfaceId);\\n    }\\n\\n    function isValidSigner(address signer, bytes calldata) external view returns (bytes4) {\\n        if (_isValidSigner(signer)) {\\n            return IERC6551Account.isValidSigner.selector;\\n        }\\n\\n        return bytes4(0);\\n    }\\n\\n    function _isValidSigner(address signer) internal view returns (bool) {\\n        return signer == owner() || (signer == bondedAddress && tokenOwnerAtLastBond == owner());\\n    }\\n\\n    function isValidSignature(bytes32 hash, bytes memory signature)\\n        external\\n        view\\n        returns (bytes4 magicValue)\\n    {\\n        bool isValid = \\n            SignatureChecker.isValidSignatureNow(owner(), hash, signature) ||\\n            (SignatureChecker.isValidSignatureNow(bondedAddress, hash, signature) && tokenOwnerAtLastBond == owner());\\n\\n        if (isValid) {\\n            return IERC1271.isValidSignature.selector;\\n        }\\n\\n        return \\\"\\\";\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external returns (bytes4) {\\n        return IERC1155Receiver.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external returns (bytes4)\\n    {\\n        return IERC1155Receiver.onERC1155BatchReceived.selector;\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external returns (bytes4)\\n    {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/MiladyAvatar.sol\": {\r\n      \"content\": \"/* solhint-disable private-vars-leading-underscore */\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"openzeppelin/token/ERC721/IERC721.sol\\\";\\nimport \\\"TokenGatedAccount/TokenGatedAccount.sol\\\";\\nimport \\\"TokenGatedAccount/TBARegistry.sol\\\";\\nimport \\\"./Rewards.sol\\\";\\nimport \\\"./LiquidAccessories.sol\\\";\\nimport \\\"./SoulboundAccessories.sol\\\";\\n\\ncontract MiladyAvatar is IERC721 {\\n    IERC721 public immutable miladysContract;\\n    LiquidAccessories public liquidAccessoriesContract;\\n    SoulboundAccessories public soulboundAccessoriesContract;\\n    Rewards public rewardsContract;\\n    \\n    // state needed for TBA address calculation\\n    TBARegistry public immutable tbaRegistry;\\n    IERC6551Account public immutable tbaAccountImpl;\\n\\n    string public baseURI;\\n\\n    address immutable initialDeployer;\\n\\n    constructor(\\n            IERC721 _miladysContract,\\n            TBARegistry _tbaRegistry,\\n            TokenGatedAccount _tbaAccountImpl,\\n            string memory _baseURI\\n    ) {\\n        initialDeployer = msg.sender;\\n        miladysContract = _miladysContract;\\n        tbaRegistry = _tbaRegistry;\\n        tbaAccountImpl = _tbaAccountImpl;\\n        baseURI = _baseURI;\\n    }\\n\\n    function setOtherContracts(\\n            LiquidAccessories _liquidAccessoriesContract, \\n            SoulboundAccessories _soulboundAccessoriesContract, \\n            Rewards _rewardsContract)\\n        external\\n    {\\n        require(msg.sender == initialDeployer, \\\"Caller not initial deployer\\\");\\n        require(address(liquidAccessoriesContract) == address(0), \\\"Contracts already set\\\");\\n        \\n        liquidAccessoriesContract = _liquidAccessoriesContract;\\n        soulboundAccessoriesContract = _soulboundAccessoriesContract;\\n        rewardsContract = _rewardsContract;\\n    }\\n\\n    // indexed by miladyId -> accessoryType\\n    mapping (uint => mapping (uint128 => uint)) public equipSlots;\\n    \\n    // main entry point for a user to change their Avatar's appearance / equip status\\n    // if an accessoryId's unpacked accVariant == 0, we interpret this as an unequip action\\n    function updateEquipSlotsByAccessoryIds(uint _miladyId, uint[] memory _accessoryIds)\\n        public\\n    {\\n        require(msg.sender == ownerOf(_miladyId), \\\"Not Milady TBA\\\");\\n\\n        for (uint i=0; i<_accessoryIds.length;) {\\n            (uint128 accType, uint128 accVariant) = accessoryIdToTypeAndVariantIds(_accessoryIds[i]);\\n\\n            _updateEquipSlotByTypeAndVariant(_miladyId, accType, accVariant);\\n\\n            unchecked { i++; }\\n        }\\n    }\\n\\n    function _updateEquipSlotByTypeAndVariant(uint _miladyId, uint128 _accType, uint128 _accVariantOrNull)\\n        internal\\n    {\\n        if (_accVariantOrNull == 0) {\\n            _unequipAccessoryByTypeIfEquipped(_miladyId, _accType);\\n        }\\n        else {\\n            uint accessoryId = typeAndVariantIdsToAccessoryId(_accType, _accVariantOrNull);\\n            _equipAccessoryIfOwned(_miladyId, accessoryId);\\n        }\\n    }\\n\\n    event AccessoryEquipped(uint indexed _miladyId, uint indexed _accessoryId);\\n\\n    // core function for equip logic.\\n    // unequips items if equip would overwrite for that accessory type\\n    // assumes the accessory's accVariant != 0\\n    function _equipAccessoryIfOwned(uint _miladyId, uint _accessoryId)\\n        internal\\n    {\\n        require(totalAccessoryBalanceOfAvatar(_miladyId, _accessoryId) > 0, \\\"Not accessory owner\\\");\\n\\n        (uint128 accType, uint accVariant) = accessoryIdToTypeAndVariantIds(_accessoryId);\\n        require(accVariant != 0);\\n\\n        _unequipAccessoryByTypeIfEquipped(_miladyId, accType);\\n\\n        equipSlots[_miladyId][accType] = _accessoryId;\\n        \\n        rewardsContract.registerMiladyForRewardsForAccessory(_miladyId, _accessoryId);\\n\\n        emit AccessoryEquipped(_miladyId, _accessoryId);\\n    }\\n\\n    event AccessoryUnequipped(uint indexed _miladyId, uint indexed _accessoryId);\\n\\n    // core function for unequip logic\\n    function _unequipAccessoryByTypeIfEquipped(uint _miladyId, uint128 _accType)\\n        internal\\n    {\\n        // if \\\"something\\\" is equiped in this slot\\n        if (equipSlots[_miladyId][_accType] != 0) { \\n            rewardsContract.deregisterMiladyForRewardsForAccessoryAndClaim(_miladyId, equipSlots[_miladyId][_accType], getPayableAvatarTBA(_miladyId));\\n\\n            emit AccessoryUnequipped(_miladyId, equipSlots[_miladyId][_accType]);\\n\\n            equipSlots[_miladyId][_accType] = 0;\\n        }\\n    }\\n\\n    // allows soulbound accessories to \\\"auto equip\\\" themselves upon mint\\n    // see `SoulboundAccessories.mintAndEquipSoulboundAccessories`\\n    function equipSoulboundAccessories(uint _miladyId, uint[] calldata _accessoryIds)\\n        external\\n    {\\n        require(msg.sender == address(soulboundAccessoriesContract), \\\"Not soulboundAccessories\\\");\\n\\n        for (uint i=0; i<_accessoryIds.length;) {\\n            _equipAccessoryIfOwned(_miladyId, _accessoryIds[i]);\\n\\n            unchecked { i++; }\\n        }\\n    }\\n\\n    // allows soulbound accessories to unequip the item upon unmint\\n    // see `SoulboundAccessories.unmintAndUnequipSoulboundAccessories`\\n    function unequipSoulboundAccessories(uint _miladyId, uint[] calldata _accessoryIds)\\n        external\\n    {\\n        require(msg.sender == address(soulboundAccessoriesContract), \\\"Not soulboundAccessories\\\");\\n\\n        for (uint i=0; i<_accessoryIds.length;) {\\n            (uint128 accType,) = accessoryIdToTypeAndVariantIds(_accessoryIds[i]);\\n            _unequipAccessoryByTypeIfEquipped(_miladyId, accType);\\n\\n            unchecked { i++; }\\n        }\\n    }\\n\\n    // allows liquid accessoires to \\\"auto unequip\\\" themselves upon transfer away\\n    // see `LiquidAccessories._beforeTokenTransfer`\\n    function preTransferUnequipById(uint _miladyId, uint _accessoryId)\\n        external\\n    {\\n        require(msg.sender == address(liquidAccessoriesContract), \\\"Not liquidAccessoriesContract\\\");\\n\\n        (uint128 accType, ) = accessoryIdToTypeAndVariantIds(_accessoryId);\\n\\n        _unequipAccessoryByTypeIfEquipped(_miladyId, accType);\\n    }\\n\\n\\n    function totalAccessoryBalanceOfAvatar(uint miladyId, uint accessoryId)\\n        public\\n        view\\n        returns(uint)\\n    {\\n        return\\n            liquidAccessoriesContract.balanceOf(getAvatarTBA(miladyId), accessoryId)\\n          + soulboundAccessoriesContract.balanceOf(getAvatarTBA(miladyId), accessoryId);\\n    }\\n\\n    // get the TokenGatedAccount for a particular Milady Avatar.\\n    function getAvatarTBA(uint _miladyId)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return tbaRegistry.account(address(tbaAccountImpl), block.chainid, address(this), _miladyId, 0);\\n    }\\n\\n    function getPayableAvatarTBA(uint _miladyId)\\n        public\\n        view\\n        returns (address payable)\\n    {\\n        return payable(getAvatarTBA(_miladyId));\\n    }\\n\\n    function name() external pure returns (string memory) {\\n        return \\\"Milady Avatar\\\";\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return \\\"MILA\\\";\\n    }\\n\\n    function tokenURI(uint256 _tokenId) \\n        external \\n        view \\n        returns (string memory) \\n    {\\n        require(_tokenId <= 9999, \\\"Invalid Milady/Avatar id\\\");\\n\\n        return string(abi.encodePacked(baseURI, Strings.toString(_tokenId)));\\n    }\\n\\n    function balanceOf(address _who) \\n        external \\n        view \\n        returns \\n        (uint256 balance) \\n    {\\n        (address tbaContractAddress,) = tbaRegistry.registeredAccounts(_who);\\n        if (tbaContractAddress == address(miladysContract)) {\\n            return 1;\\n        }\\n        else return 0;\\n    }\\n\\n    function ownerOf(uint256 _tokenId) \\n        public \\n        view \\n        returns (address owner) \\n    {\\n        require(_tokenId <= 9999, \\\"Invalid Milady/Avatar id\\\");\\n\\n        return tbaRegistry.account(address(tbaAccountImpl), block.chainid, address(miladysContract), _tokenId, 0);\\n    }\\n\\n    function safeTransferFrom(address, address, uint256, bytes calldata) external {\\n        revertWithSoulboundMessage();\\n    }\\n    \\n    function safeTransferFrom(address, address, uint256) external {\\n        revertWithSoulboundMessage();\\n    }\\n\\n    function transferFrom(address, address, uint256) external {\\n        revertWithSoulboundMessage();\\n    }\\n\\n    function approve(address, uint256) external {\\n        revertWithSoulboundMessage();\\n    }\\n\\n    function setApprovalForAll(address, bool) external {\\n        revertWithSoulboundMessage();\\n    }\\n\\n    function getApproved(uint256) external view returns (address) {\\n        revertWithSoulboundMessage();\\n    }\\n\\n    function isApprovedForAll(address, address) external view returns (bool) {\\n        return false;\\n    }\\n\\n    function revertWithSoulboundMessage() pure internal {\\n        revert(\\\"Cannot transfer soulbound tokens\\\");\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId;\\n    }\\n\\n    // accessory utils\\n\\n    // the remaining functions describe the scheme whereby hashes (treated as IDs) of an accessory type and accessory variant\\n    // are encoded into the same uint256 that is used for a global ID for a particular accessory\\n\\n    // an ID's upper 128 bits are the truncated hash of the category text;\\n    // the lower 128 bits are the truncated hash of the variant test\\n\\n    struct PlaintextAccessoryInfo {\\n        string accType;\\n        string accVariant;\\n    }\\n\\n    function batchPlaintextAccessoryInfoToAccessoryIds(PlaintextAccessoryInfo[] memory accInfos)\\n        public\\n        pure\\n        returns (uint[] memory accIds)\\n    {\\n        accIds = new uint[](accInfos.length);\\n        for (uint i=0; i<accInfos.length;)\\n        {\\n            accIds[i] = plaintextAccessoryInfoToAccessoryId(accInfos[i]);\\n\\n            unchecked { i++; }\\n        }\\n    }\\n\\n    function plaintextAccessoryInfoToAccessoryId(PlaintextAccessoryInfo memory accInfo)\\n        public\\n        pure\\n        returns (uint accessoryId)\\n    {\\n        uint128 accType = uint128(uint256(keccak256(abi.encodePacked(accInfo.accType))));\\n        uint128 accVariant = uint128(uint256(keccak256(abi.encodePacked(accInfo.accVariant))));\\n        accessoryId = typeAndVariantIdsToAccessoryId(accType, accVariant);\\n    }\\n\\n    function plaintextAccessoryTextToAccessoryId(string memory accTypeString, string memory accVariantString)\\n        public\\n        pure\\n        returns (uint accessoryId)\\n    {\\n        return plaintextAccessoryInfoToAccessoryId(PlaintextAccessoryInfo(accTypeString, accVariantString));\\n    }\\n\\n    function accessoryIdToTypeAndVariantIds(uint id)\\n        public\\n        pure\\n        returns (uint128 accType, uint128 accVariant)\\n    {\\n        return (uint128(id >> 128), uint128(id));\\n    }\\n\\n    function typeAndVariantIdsToAccessoryId(uint128 accType, uint128 accVariant)\\n        public\\n        pure\\n        returns (uint)\\n    {\\n        return (uint(accType) << 128) | uint(accVariant);\\n    }\\n}\"\r\n    },\r\n    \"src/LiquidAccessories.sol\": {\r\n      \"content\": \"/* solhint-disable private-vars-leading-underscore */\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"openzeppelin/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"openzeppelin/access/Ownable.sol\\\";\\nimport \\\"openzeppelin/security/ReentrancyGuard.sol\\\";\\nimport \\\"TokenGatedAccount/TBARegistry.sol\\\";\\nimport \\\"./MiladyAvatar.sol\\\";\\nimport \\\"./Rewards.sol\\\";\\n\\ncontract LiquidAccessories is ERC1155, Ownable, ReentrancyGuard {\\n    TBARegistry public immutable tbaRegistry;\\n    MiladyAvatar public avatarContract;\\n\\n    Rewards immutable rewardsContract;\\n    address payable revenueRecipient;\\n\\n    address immutable initialDeployer; \\n\\n    constructor(\\n            TBARegistry _tbaRegistry, \\n            Rewards _rewardsContract, \\n            address payable _revenueRecipient, \\n            string memory uri_)\\n        ERC1155(uri_)\\n        ReentrancyGuard()\\n    {\\n        initialDeployer = msg.sender;\\n\\n        tbaRegistry = _tbaRegistry;\\n        rewardsContract = _rewardsContract;\\n        revenueRecipient = _revenueRecipient;\\n    }\\n\\n    function setAvatarContract(MiladyAvatar _avatarContract)\\n        external\\n    {\\n        require(msg.sender == initialDeployer, \\\"Not deployer\\\");\\n        require(address(avatarContract) == address(0), \\\"avatarContract already set\\\");\\n\\n        avatarContract = _avatarContract;\\n    }\\n    \\n    // indexed by accessoryId\\n    mapping(uint => BondingCurveInfo) public bondingCurves;\\n    struct BondingCurveInfo {\\n        uint accessorySupply;\\n        uint curveParameter;\\n    }\\n\\n    function defineBondingCurveParameter(uint _accessoryId, uint _parameter)\\n        external\\n        onlyOwner()\\n    {\\n        require(_parameter != 0, \\\"Parameter cannot be 0\\\");\\n        require(bondingCurves[_accessoryId].curveParameter == 0, \\\"Parameter already set\\\");\\n\\n        bondingCurves[_accessoryId].curveParameter = _parameter;\\n    }\\n\\n    function changeRevenueRecipient(address payable _revenueRecipient)\\n        external\\n        onlyOwner()\\n    {\\n        revenueRecipient = _revenueRecipient;\\n    }\\n\\n    function mintAccessories(\\n            uint[] calldata _accessoryIds, \\n            uint[] calldata _amounts, \\n            address _recipient, \\n            address payable _overpayReturnAddress)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        // note that msg.value functions as an implicit \\\"minimumIn\\\" (analagous to burnAccessories's \\\"minRewardOut\\\"),\\n        // implicitly protecting this purchase from sandwich attacks\\n        require(_accessoryIds.length == _amounts.length, \\\"Array lengths differ\\\");\\n        \\n        uint totalMintCost;\\n        for (uint i=0; i<_accessoryIds.length;) {\\n            totalMintCost += getMintCostForNewAccessories(_accessoryIds[i], _amounts[i]);\\n            unchecked { i++; }\\n        }\\n        require(msg.value >= totalMintCost, \\\"Insufficient Ether included\\\");\\n\\n        for (uint i=0; i<_accessoryIds.length;) {\\n            _mintAccessoryAndDisburseRevenue(_accessoryIds[i], _amounts[i], _recipient);\\n            unchecked { i++; }\\n        }\\n\\n        if (msg.value > totalMintCost) {\\n            // return extra in case of overpayment\\n            (bool success,) = _overpayReturnAddress.call{ value: msg.value - totalMintCost }(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n        }\\n    }\\n\\n    function _mintAccessoryAndDisburseRevenue(uint _accessoryId, uint _amount, address _recipient)\\n        internal\\n        // only called from mintAccessories, therefore non-reentrant\\n    {\\n        require(_amount > 0, \\\"amount cannot be 0\\\");\\n\\n        uint mintCost = getMintCostForNewAccessories(_accessoryId, _amount);\\n        _mintAccessory(_accessoryId, _amount, _recipient);\\n\\n        uint burnReward = getBurnRewardForReturnedAccessories(_accessoryId, _amount);\\n        uint freeRevenue = mintCost - burnReward;\\n\\n        // If no one is currently equipping the accessory, the rewards contract will revert.\\n        // We test for this and just send everything to revenueRecipient if that's the case.\\n        (, uint numEligibleRewardRecipients) = rewardsContract.rewardInfoForAccessory(_accessoryId);\\n        if (numEligibleRewardRecipients == 0) {\\n            (bool success, ) = revenueRecipient.call{ value: freeRevenue }(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n        }\\n        else {\\n            uint halfFreeRevenue = freeRevenue / 2;\\n\\n            rewardsContract.addRewardsForAccessory{value:halfFreeRevenue}(_accessoryId);\\n\\n            // using `totalRevenue-halfFreeRevenue` instead of simply `halfFreeRevenue` to handle rounding errors from div by 2\\n            (bool success,) = revenueRecipient.call{ value : freeRevenue - halfFreeRevenue }(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n        }\\n    }\\n\\n    function _mintAccessory(uint _accessoryId, uint _amount, address _recipient)\\n        internal\\n    {\\n        bondingCurves[_accessoryId].accessorySupply += _amount;\\n        _mint(_recipient, _accessoryId, _amount, \\\"\\\");\\n    }\\n\\n    function burnAccessories(\\n            uint[] calldata _accessoryIds, \\n            uint[] calldata _amounts, \\n            uint _minRewardOut, \\n            address payable _fundsRecipient)\\n        external\\n        nonReentrant\\n    {\\n        require(_accessoryIds.length == _amounts.length, \\\"Array lengths differ\\\");\\n\\n        uint totalBurnReward;\\n        for (uint i=0; i<_accessoryIds.length;) {\\n            totalBurnReward += getBurnRewardForReturnedAccessories(_accessoryIds[i], _amounts[i]);\\n            _burnAccessory(_accessoryIds[i], _amounts[i]);\\n\\n            unchecked { i++; }\\n        }\\n\\n        require(totalBurnReward >= _minRewardOut, \\\"Specified reward not met\\\");\\n        (bool success,) = _fundsRecipient.call{ value : totalBurnReward }(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n\\n    function _burnAccessory(uint _accessoryId, uint _amount)\\n        internal\\n    {\\n        require(balanceOf(msg.sender, _accessoryId) >= _amount, \\\"Incorrect accessory balance\\\");\\n\\n        bondingCurves[_accessoryId].accessorySupply -= _amount;\\n        _burn(msg.sender, _accessoryId, _amount);\\n    }\\n\\n    function getMintCostForNewAccessories(uint _accessoryId, uint _amount)\\n        public\\n        view\\n        returns (uint)\\n    {\\n        uint currentSupplyOfAccessory = bondingCurves[_accessoryId].accessorySupply;\\n        uint curveParameter = bondingCurves[_accessoryId].curveParameter;\\n        require(curveParameter != 0, \\\"Item has no bonding curve\\\");\\n\\n        uint totalCost;\\n        for (uint i=0; i<_amount;) {\\n            totalCost += getMintCostForItemNumber(currentSupplyOfAccessory + i, curveParameter);\\n\\n            unchecked { i++; }\\n        }\\n        return totalCost;\\n    }\\n\\n    function getBurnRewardForReturnedAccessories(uint _accessoryId, uint _amount)\\n        public\\n        view\\n        returns (uint)\\n    {\\n        uint curveParameter = bondingCurves[_accessoryId].curveParameter;\\n        require(curveParameter != 0, \\\"No bonding curve\\\");\\n        uint currentSupplyOfAccessory = bondingCurves[_accessoryId].accessorySupply;\\n        require(_amount <= currentSupplyOfAccessory, \\\"Insufficient accessory supply\\\");\\n\\n        uint totalReward;\\n        for (uint i=0; i<_amount;) {\\n            totalReward += getBurnRewardForItemNumber((currentSupplyOfAccessory - 1) - i, curveParameter);\\n            \\n            unchecked { i++; }\\n        }\\n        return totalReward;\\n    }\\n\\n    function getMintCostForItemNumber(uint _itemNumber, uint _curveParameter)\\n        public\\n        pure\\n        returns (uint)\\n    {\\n        return\\n            ((getBurnRewardForItemNumber(_itemNumber, _curveParameter) * 1200))\\n            / 1000\\n        ;\\n    }\\n\\n    function getBurnRewardForItemNumber(uint _itemNumber, uint _curveParameter)\\n        public\\n        pure\\n        returns (uint)\\n    {\\n        return 0.005 ether + _curveParameter * _itemNumber * _itemNumber;\\n    }\\n\\n    // We need to make sure the equip status is updated if we send away an accessory that is currently equipped.\\n    function _beforeTokenTransfer(\\n            address, \\n            address _from, \\n            address, \\n            uint256[] memory _ids, \\n            uint256[] memory _amounts, \\n            bytes memory)\\n        internal\\n        override\\n    {\\n        // check if we're sending from a miladyAvatar TBA\\n        (address tbaTokenContract, uint tbaTokenId) = tbaRegistry.registeredAccounts(_from);\\n        \\n        // tbaTokenContract == 0x0 if not a TBA\\n        if (tbaTokenContract == address(avatarContract)) {\\n            for (uint i=0; i<_ids.length;) {\\n                \\n                // next 3 lines for clarity. possible todo: remove for gas savings\\n                uint accessoryId = _ids[i];\\n                uint requestedAmountToTransfer = _amounts[i];\\n                uint miladyId = tbaTokenId;\\n\\n                // check if this transfer would result in a 0 balance of that accessory\\n                if (requestedAmountToTransfer == avatarContract.totalAccessoryBalanceOfAvatar(miladyId, accessoryId)) {\\n                    //unequip if it's equipped\\n                    avatarContract.preTransferUnequipById(miladyId, accessoryId);\\n                }\\n\\n                unchecked { i++; }\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"src/SoulboundAccessories.sol\": {\r\n      \"content\": \"/* solhint-disable private-vars-leading-underscore */\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"openzeppelin/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"TokenGatedAccount/IERC6551Registry.sol\\\";\\nimport \\\"TokenGatedAccount/IERC6551Account.sol\\\";\\nimport \\\"TokenGatedAccount/TokenGatedAccount.sol\\\";\\nimport \\\"openzeppelin/access/Ownable.sol\\\";\\nimport \\\"./MiladyAvatar.sol\\\";\\n\\ncontract SoulboundAccessories is ERC1155, Ownable {\\n    MiladyAvatar public avatarContract;\\n\\n    // state needed for TBA address calculation\\n    IERC6551Registry public immutable tbaRegistry;\\n    IERC6551Account public immutable tbaAccountImpl;\\n\\n    address public miladyAuthority;\\n\\n    // indexed by miladyId\\n    mapping(uint => bool) public avatarActivated;\\n\\n    address immutable initialDeployer;\\n\\n    constructor(\\n        IERC6551Registry _tbaRegistry,\\n        IERC6551Account _tbaAccountImpl,\\n        address _miladyAuthority,\\n        string memory uri_\\n    )\\n        ERC1155(uri_)\\n    {\\n        initialDeployer = msg.sender;\\n\\n        tbaRegistry = _tbaRegistry;\\n        tbaAccountImpl = _tbaAccountImpl;\\n\\n        miladyAuthority = _miladyAuthority;\\n    }\\n\\n    function setAvatarContract(MiladyAvatar _avatarContract)\\n        external\\n    {\\n        require(msg.sender == initialDeployer, \\\"Not initial deployer\\\");\\n        require(address(avatarContract) == address(0), \\\"Avatar already set\\\");\\n\\n        avatarContract = _avatarContract;\\n    }\\n\\n    function changeMiladyAuthority(address _newMiladyAuthority)\\n        external\\n        onlyOwner()\\n    {\\n        miladyAuthority = _newMiladyAuthority;\\n    }\\n\\n    event SoulboundAccessoriesMinted(uint indexed miladyId, uint[] indexed accessories);\\n\\n    // we assume here that miladyAuthority will never specify an accessory whose decoded accVariant == 0\\n    function mintAndEquipSoulboundAccessories(uint _miladyId, uint[] calldata _accessories)\\n        external\\n    {\\n        require(msg.sender == miladyAuthority, \\\"Not miladyAuthority\\\");\\n\\n        // perhaps not strictly necessary, but might prevent the miladyAuthority server doing something stupid\\n        require(_accessories.length > 0, \\\"empty accessories array\\\");\\n\\n        require(!avatarActivated[_miladyId], \\\"Avatar already activated\\\");\\n        avatarActivated[_miladyId] = true;\\n\\n        address avatarTbaAddress = tbaRegistry.account(\\n            address(tbaAccountImpl),\\n            block.chainid,\\n            address(avatarContract),\\n            _miladyId,\\n            0\\n        );\\n\\n        uint[] memory listOf1s = new uint[](_accessories.length);\\n        for (uint i=0; i<listOf1s.length;) {\\n            listOf1s[i] = 1;\\n\\n            unchecked { i++; }\\n        }\\n\\n        _mintBatch(avatarTbaAddress, _accessories, listOf1s, \\\"\\\");\\n\\n        avatarContract.equipSoulboundAccessories(_miladyId, _accessories);\\n\\n        emit SoulboundAccessoriesMinted(_miladyId, _accessories);\\n    }\\n\\n    // This function is included as a last-resort option to leverage, in case the miladyAuthority key has been compromised.\\n    // It allows the owner to reverse any damage done by the key, by unminting and unequipping any erroneous soulboundAccessories.\\n    function unmintAndUnequipSoulboundAccessories(uint _miladyId, uint[] calldata _accessories)\\n        external\\n        onlyOwner()\\n    {\\n        require(avatarActivated[_miladyId], \\\"Avatar not activated\\\");\\n        avatarActivated[_miladyId] = false;\\n\\n        address avatarTbaAddress = tbaRegistry.account(\\n            address(tbaAccountImpl),\\n            block.chainid,\\n            address(avatarContract),\\n            _miladyId,\\n            0\\n        );\\n\\n        uint[] memory listOf1s = new uint[](_accessories.length);\\n        for (uint i=0; i<listOf1s.length;) {\\n            listOf1s[i] = 1;\\n\\n            unchecked { i++; }\\n        }\\n\\n        _burnBatch(avatarTbaAddress, _accessories, listOf1s);\\n\\n        avatarContract.unequipSoulboundAccessories(_miladyId, _accessories);\\n    }\\n\\n    // disable all token transfers, making these soulbound.\\n    function _beforeTokenTransfer(address, address _from, address, uint256[] memory, uint256[] memory, bytes memory)\\n        internal\\n        override\\n    {\\n        if (_from == address(0x0)) {\\n            return; // allow transfers from 0x0, i.e. mints\\n        }\\n        revert(\\\"Cannot transfer soulbound tokens\\\");\\n    }\\n\\n    // prevents spurious approvals\\n    function _setApprovalForAll(address, address, bool) \\n        internal \\n        override {\\n            revert(\\\"Cannot approve soulbound tokens\\\");\\n    }\\n}\"\r\n    },\r\n    \"src/Rewards.sol\": {\r\n      \"content\": \"/* solhint-disable private-vars-leading-underscore */\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"openzeppelin/token/ERC721/IERC721.sol\\\";\\nimport \\\"openzeppelin/security/ReentrancyGuard.sol\\\";\\nimport \\\"TokenGatedAccount/TBARegistry.sol\\\";\\n\\ncontract Rewards is ReentrancyGuard {\\n    IERC721 public immutable miladysContract;\\n    address public immutable avatarContractAddress;\\n\\n    constructor(address _avatarContractAddress, IERC721 _miladysContract) \\n        ReentrancyGuard()\\n    {\\n        avatarContractAddress = _avatarContractAddress;\\n        miladysContract = _miladysContract;\\n    }\\n\\n    // indexed by accessoryId\\n    mapping (uint => RewardInfoForAccessory) public rewardInfoForAccessory;\\n    struct RewardInfoForAccessory {\\n        uint rewardsPerWearerAccrued;\\n        uint totalWearers;\\n        // indexed by miladyId\\n        mapping (uint => MiladyRewardInfo) miladyRewardInfo;\\n    }\\n    struct MiladyRewardInfo {\\n        bool isRegistered;\\n        uint amountClaimed;\\n    }\\n\\n    event RewardsAccrued(uint indexed _accessoryId, uint _amount);\\n\\n    function addRewardsForAccessory(uint _accessoryId)\\n        payable\\n        external\\n        nonReentrant\\n    {\\n        require(msg.value > 0, \\\"No ether included\\\");\\n        require(rewardInfoForAccessory[_accessoryId].totalWearers > 0, \\\"No eligible recipients\\\");\\n\\n        rewardInfoForAccessory[_accessoryId].rewardsPerWearerAccrued += msg.value / rewardInfoForAccessory[_accessoryId].totalWearers;\\n\\n        emit RewardsAccrued(_accessoryId, msg.value);\\n    }\\n\\n    event MiladyRegisteredForRewards(uint indexed _miladyId, uint indexed _accessoryId);\\n\\n    function registerMiladyForRewardsForAccessory(uint _miladyId, uint _accessoryId)\\n        external\\n    {\\n        require(msg.sender == avatarContractAddress, \\\"Not avatarContractAddress\\\");\\n        \\n        MiladyRewardInfo storage miladyRewardInfo = rewardInfoForAccessory[_accessoryId].miladyRewardInfo[_miladyId];\\n\\n        require(! miladyRewardInfo.isRegistered, \\\"Milady already registered\\\");\\n\\n        // when a new Milady is registered, we pretend they've been here the whole time and have already claimed all they could\\n        // this essentially starts out this Milady with 0 claimable rewards, which will go up as revenue increases\\n        miladyRewardInfo.amountClaimed = rewardInfoForAccessory[_accessoryId].rewardsPerWearerAccrued;\\n        rewardInfoForAccessory[_accessoryId].totalWearers ++;\\n\\n        miladyRewardInfo.isRegistered = true;\\n\\n        emit MiladyRegisteredForRewards(_miladyId, _accessoryId);\\n    }\\n\\n    event MiladyDeregisteredForRewards(uint indexed _miladyId, uint indexed _accessoryId);\\n\\n    function deregisterMiladyForRewardsForAccessoryAndClaim(uint _miladyId, uint _accessoryId, address payable _recipient)\\n        external\\n        nonReentrant\\n    {\\n        require(msg.sender == avatarContractAddress, \\\"Not avatarContractAddress\\\");\\n\\n        MiladyRewardInfo storage miladyRewardInfo = rewardInfoForAccessory[_accessoryId].miladyRewardInfo[_miladyId];\\n\\n        require(miladyRewardInfo.isRegistered, \\\"Milady not registered\\\");\\n\\n        _claimRewardsForMiladyForAccessory(_miladyId, _accessoryId, _recipient);\\n\\n        rewardInfoForAccessory[_accessoryId].totalWearers --;\\n        miladyRewardInfo.isRegistered = false;\\n\\n        emit MiladyDeregisteredForRewards(_miladyId, _accessoryId);\\n    }\\n\\n    function claimRewardsForMilady(uint _miladyId, uint[] calldata _accessoriesToClaimFor, address payable _recipient)\\n        external\\n        nonReentrant\\n    {\\n        require(msg.sender == miladysContract.ownerOf(_miladyId), \\\"Not Milady owner\\\");\\n\\n        for (uint i=0; i<_accessoriesToClaimFor.length;) {\\n            _claimRewardsForMiladyForAccessory(_miladyId, _accessoriesToClaimFor[i], _recipient);\\n\\n            unchecked { i++; }\\n        }\\n    }\\n\\n    event RewardsClaimed(uint indexed _miladyId, uint indexed _accessoryId, address indexed _recipient);\\n\\n    function _claimRewardsForMiladyForAccessory(uint _miladyId, uint _accessoryId, address payable _recipient)\\n        internal\\n        // all calls to this must be nonreentrant\\n        // did not make this nonreentrant to prevent gas churn\\n    {\\n        RewardInfoForAccessory storage rewardInfo = rewardInfoForAccessory[_accessoryId];\\n\\n        uint amountToSend = getAmountClaimableForMiladyAndAccessory(_miladyId, _accessoryId);\\n\\n        rewardInfo.miladyRewardInfo[_miladyId].amountClaimed = rewardInfo.rewardsPerWearerAccrued;\\n\\n        (bool success,) = _recipient.call{ value: amountToSend }(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n\\n        emit RewardsClaimed(_miladyId, _accessoryId, _recipient);\\n    }\\n\\n    function getAmountClaimableForMiladyAndAccessory(uint _miladyId, uint _accessoryId)\\n        public\\n        view\\n        returns (uint amountClaimable)\\n    {\\n        if (! rewardInfoForAccessory[_accessoryId].miladyRewardInfo[_miladyId].isRegistered) {\\n            return 0;\\n        }\\n        \\n        RewardInfoForAccessory storage rewardInfo = rewardInfoForAccessory[_accessoryId];\\n        \\n        amountClaimable = rewardInfo.rewardsPerWearerAccrued - rewardInfo.miladyRewardInfo[_miladyId].amountClaimed;\\n    }\\n\\n    function getAmountClaimableForMiladyAndAccessories(uint _miladyId, uint[] memory _accessoryIds)\\n        public\\n        view\\n        returns (uint amountClaimable)\\n    {\\n        for (uint i=0; i<_accessoryIds.length;) {\\n            amountClaimable += getAmountClaimableForMiladyAndAccessory(_miladyId, _accessoryIds[i]);\\n\\n            unchecked { i++; }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Create2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \u2193 ptr ...  \u2193 ptr + 0x0B (start) ...  \u2193 ptr + 0x20 ...  \u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/TokenGatedAccount/src/IERC6551Registry.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.18;\\n\\ninterface IERC6551Registry {\\n    /**\\n     * @dev The registry SHALL emit the AccountCreated event upon successful account creation\\n     */\\n    event AccountCreated(\\n        address account,\\n        address indexed implementation,\\n        uint256 chainId,\\n        address indexed tokenContract,\\n        uint256 indexed tokenId,\\n        uint256 salt\\n    );\\n\\n    /**\\n     * @dev Creates a token bound account for a non-fungible token.\\n     *\\n     * If account has already been created, returns the account address without calling create2.\\n     *\\n     * If initData is not empty and account has not yet been created, calls account with\\n     * provided initData after creation.\\n     *\\n     * Emits AccountCreated event.\\n     *\\n     * @return the address of the account\\n     */\\n    function createAccount(\\n        address implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 salt,\\n        bytes calldata initData\\n    ) external returns (address);\\n\\n    /**\\n     * @dev Returns the computed token bound account address for a non-fungible token\\n     *\\n     * @return The computed address of the token bound account\\n     */\\n    function account(\\n        address implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 salt\\n    ) external view returns (address);\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/sstore2/contracts/utils/Bytecode.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary Bytecode {\\n  error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\n\\n  /**\\n    @notice Generate a creation code that results on a contract with `_code` as bytecode\\n    @param _code The returning value of the resulting `creationCode`\\n    @return creationCode (constructor) for new contract\\n  */\\n  function creationCodeFor(bytes memory _code) internal pure returns (bytes memory) {\\n    /*\\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n      0x01    0x80         0x80        DUP1                size size\\n      0x02    0x60         0x600e      PUSH1 14            14 size size\\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n      0x04    0x39         0x39        CODECOPY            size\\n      0x05    0x60         0x6000      PUSH1 00            0 size\\n      0x06    0xf3         0xf3        RETURN\\n      <CODE>\\n    */\\n\\n    return abi.encodePacked(\\n      hex\\\"63\\\",\\n      uint32(_code.length),\\n      hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n      _code\\n    );\\n  }\\n\\n  /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n  function codeSize(address _addr) internal view returns (uint256 size) {\\n    assembly { size := extcodesize(_addr) }\\n  }\\n\\n  /**\\n    @notice Returns the code of a given address\\n    @dev It will fail if `_end < _start`\\n    @param _addr Address that may or may not contain code\\n    @param _start number of bytes of code to skip on read\\n    @param _end index before which to end extraction\\n    @return oCode read from `_addr` deployed bytecode\\n\\n    Forked from: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\n  */\\n  function codeAt(address _addr, uint256 _start, uint256 _end) internal view returns (bytes memory oCode) {\\n    uint256 csize = codeSize(_addr);\\n    if (csize == 0) return bytes(\\\"\\\");\\n\\n    if (_start > csize) return bytes(\\\"\\\");\\n    if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end); \\n\\n    unchecked {\\n      uint256 reqSize = _end - _start;\\n      uint256 maxSize = csize - _start;\\n\\n      uint256 size = maxSize < reqSize ? maxSize : reqSize;\\n\\n      assembly {\\n        // allocate output byte array - this could also be done without assembly\\n        // by using o_code = new bytes(size)\\n        oCode := mload(0x40)\\n        // new \\\"memory end\\\" including padding\\n        mstore(0x40, add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        // store length in memory\\n        mstore(oCode, size)\\n        // actually retrieve the code, this needs assembly\\n        extcodecopy(_addr, add(oCode, 0x20), _start, size)\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/TokenGatedAccount/src/IERC6551Account.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.18;\\n\\n/// @dev the ERC-165 identifier for this interface is `0x6faff5f1`\\ninterface IERC6551Account {\\n    /**\\n     * @dev Allows the account to receive Ether\\n     *\\n     * Accounts MUST implement a `receive` function.\\n     *\\n     * Accounts MAY perform arbitrary logic to restrict conditions\\n     * under which Ether can be received.\\n     */\\n    receive() external payable;\\n\\n    /**\\n     * @dev Returns the identifier of the non-fungible token which owns the account\\n     *\\n     * The return value of this function MUST be constant - it MUST NOT change\\n     * over time\\n     *\\n     * @return chainId       The EIP-155 ID of the chain the token exists on\\n     * @return tokenContract The contract address of the token\\n     * @return tokenId       The ID of the token\\n     */\\n    function token()\\n        external\\n        view\\n        returns (\\n            uint256 chainId,\\n            address tokenContract,\\n            uint256 tokenId\\n        );\\n\\n    /**\\n     * @dev Returns a value that SHOULD be modified each time the account changes state\\n     *\\n     * @return The current account state\\n     */\\n    function state() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a magic value indicating whether a given signer is authorized to act on behalf of the account\\n     *\\n     * MUST return the bytes4 magic value 0x523e3260 if the given signer is valid\\n     *\\n     * By default, the holder of the non-fungible token the account is bound to MUST be considered a valid\\n     * signer\\n     *\\n     * Accounts MAY implement additional authorization logic which invalidates the holder as a\\n     * signer or grants signing permissions to other non-holder accounts\\n     *\\n     * @param  signer     The address to check signing authorization for\\n     * @param  context    Additional data used to determine whether the signer is valid\\n     * @return magicValue Magic value indicating whether the signer is valid\\n     */\\n    function isValidSigner(address signer, bytes calldata context)\\n        external\\n        view\\n        returns (bytes4 magicValue);\\n}\"\r\n    },\r\n    \"lib/TokenGatedAccount/src/IERC6551Executable.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.18;\\n\\n/// @dev the ERC-165 identifier for this interface is `0x74420f4c`\\ninterface IERC6551Executable {\\n    /**\\n     * @dev Executes a low-level operation if the caller is a valid signer on the account\\n     *\\n     * Reverts and bubbles up error if operation fails\\n     *\\n     * @param to        The target address of the operation\\n     * @param value     The Ether value to be sent to the target\\n     * @param data      The encoded operation calldata\\n     * @param operation A value indicating the type of operation to perform\\n     *\\n     * Accounts implementing this interface MUST accept the following operation parameter values:\\n     * - 0 = CALL\\n     * - 1 = DELEGATECALL\\n     * - 2 = CREATE\\n     * - 3 = CREATE2\\n     *\\n     * Accounts implementing this interface MAY support additional operations or restrict a signer's\\n     * ability to execute certain operations\\n     *\\n     * @return The result of the operation\\n     */\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        uint256 operation\\n    ) external payable returns (bytes memory);\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"sstore2/=lib/sstore2/contracts/\",\r\n      \"TokenGatedAccount/=lib/TokenGatedAccount/src/\",\r\n      \"@openzeppelin/contracts/=lib/TokenGatedAccount/lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract TBARegistry\",\"name\":\"tbaRegistry\",\"type\":\"address\"},{\"internalType\":\"contract TokenGatedAccount\",\"name\":\"tbaAccountImpl\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"miladysContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"miladyAuthorityAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidAccessoriesOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"soulboundAccessoriesOwner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"revenueRecipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"avatarBaseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"liquidAccessoriesURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"soulboundAccessoriesURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"avatarContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidAccessoriesContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"soulboundAccessoriesContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardsContractAddress\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"avatarContract\",\"outputs\":[{\"internalType\":\"contract MiladyAvatar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidAccessoriesContract\",\"outputs\":[{\"internalType\":\"contract LiquidAccessories\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsContract\",\"outputs\":[{\"internalType\":\"contract Rewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soulboundAccessoriesContract\",\"outputs\":[{\"internalType\":\"contract SoulboundAccessories\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Deployer", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005dbaf97218d8b959364caf7378a9c0a57e96bb37000000000000000000000000112d0535f7b73322f749e26f1eac4b2e67bfe4a90000000000000000000000005af0d9827e0c53e4799bb226655a1de152a425a50000000000000000000000005c3f1e9b004fada74bdb21238f6dd0ac34cdc03f000000000000000000000000cbdde4e4b440bdae14e3154afc855a9d6569c3fb000000000000000000000000cbdde4e4b440bdae14e3154afc855a9d6569c3fb000000000000000000000000a674df005fe7eec85d0f78e15204e6d0a8e1168d000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002d68747470733a2f2f6d657461646174612e6d696c6164792d6f732e6e6574776f726b2f6176617461723f69643d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003168747470733a2f2f6d657461646174612e6d696c6164792d6f732e6e6574776f726b2f6c69717569643f69643d7b69647d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003468747470733a2f2f6d657461646174612e6d696c6164792d6f732e6e6574776f726b2f736f756c626f756e643f69643d7b69647d000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}