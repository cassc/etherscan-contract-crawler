{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.15;\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\naddress constant GELATO_RELAY = 0xaBcC9b596420A9E9172FD5938620E265a0f9Df92;\r\naddress constant GELATO_RELAY_ERC2771 = 0xb539068872230f20456CF38EC52EF2f91AF4AE49;\r\n\r\naddress constant GELATO_RELAY_ZKSYNC = 0xB16a1DbE755f992636705fDbb3A8678a657EB3ea;\r\naddress constant GELATO_RELAY_ERC2771_ZKSYNC = 0x22DCC39b2AC376862183dd35A1664798dafC7Da6;\r\n\r\nabstract contract GelatoRelayBase {\r\n    modifier onlyGelatoRelay() {\r\n        require(_isGelatoRelay(msg.sender), \"onlyGelatoRelay\");\r\n        _;\r\n    }\r\n\r\n    function _isGelatoRelay(address _forwarder) internal view returns (bool) {\r\n        return\r\n            block.chainid == 324 || block.chainid == 280\r\n                ? _forwarder == GELATO_RELAY_ZKSYNC\r\n                : _forwarder == GELATO_RELAY;\r\n    }\r\n}\r\n\r\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\nlibrary TokenUtils {\r\n    using SafeERC20 for IERC20;\r\n\r\n    modifier onlyERC20(address _token) {\r\n        require(_token != NATIVE_TOKEN, \"TokenUtils.onlyERC20\");\r\n        _;\r\n    }\r\n\r\n    function transfer(\r\n        address _token,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal {\r\n        if (_amount == 0) return;\r\n        _token == NATIVE_TOKEN\r\n            ? Address.sendValue(payable(_to), _amount)\r\n            : IERC20(_token).safeTransfer(_to, _amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address _token,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal onlyERC20(_token) {\r\n        if (_amount == 0) return;\r\n        IERC20(_token).safeTransferFrom(_from, _to, _amount);\r\n    }\r\n\r\n    function getBalance(address token, address user)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            token == NATIVE_TOKEN\r\n                ? user.balance\r\n                : IERC20(token).balanceOf(user);\r\n    }\r\n}\r\n\r\nuint256 constant _FEE_COLLECTOR_START = 72; // offset: address + address + uint256\r\nuint256 constant _FEE_TOKEN_START = 52; // offset: address + uint256\r\nuint256 constant _FEE_START = 32; // offset: uint256\r\n\r\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\r\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\r\nfunction _getFeeCollectorRelayContext() pure returns (address feeCollector) {\r\n    assembly {\r\n        feeCollector := shr(\r\n            96,\r\n            calldataload(sub(calldatasize(), _FEE_COLLECTOR_START))\r\n        )\r\n    }\r\n}\r\n\r\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\r\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\r\nfunction _getFeeTokenRelayContext() pure returns (address feeToken) {\r\n    assembly {\r\n        feeToken := shr(96, calldataload(sub(calldatasize(), _FEE_TOKEN_START)))\r\n    }\r\n}\r\n\r\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\r\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\r\nfunction _getFeeRelayContext() pure returns (uint256 fee) {\r\n    assembly {\r\n        fee := calldataload(sub(calldatasize(), _FEE_START))\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Context variant with feeCollector, feeToken and fee appended to msg.data\r\n * Expects calldata encoding:\r\n * abi.encodePacked( _data,\r\n *                   _feeCollector,\r\n *                   _feeToken,\r\n *                   _fee);\r\n * Therefore, we're expecting 20 + 20 + 32 = 72 bytes to be appended to normal msgData\r\n * 32bytes start offsets from calldatasize:\r\n *     feeCollector: - 72 bytes\r\n *     feeToken: - 52 bytes\r\n *     fee: - 32 bytes\r\n */\r\n/// @dev Do not use with GelatoRelayFeeCollector - pick only one\r\nabstract contract GelatoRelayContext is GelatoRelayBase {\r\n    using TokenUtils for address;\r\n\r\n    // DANGER! Only use with onlyGelatoRelay `_isGelatoRelay` before transferring\r\n    function _transferRelayFee() internal {\r\n        _getFeeToken().transfer(_getFeeCollector(), _getFee());\r\n    }\r\n\r\n    // DANGER! Only use with onlyGelatoRelay `_isGelatoRelay` before transferring\r\n    function _transferRelayFeeCapped(uint256 _maxFee) internal {\r\n        uint256 fee = _getFee();\r\n        require(\r\n            fee <= _maxFee,\r\n            \"GelatoRelayContext._transferRelayFeeCapped: maxFee\"\r\n        );\r\n        _getFeeToken().transfer(_getFeeCollector(), fee);\r\n    }\r\n\r\n    function _getMsgData() internal view returns (bytes calldata) {\r\n        return\r\n            _isGelatoRelay(msg.sender)\r\n                ? msg.data[:msg.data.length - _FEE_COLLECTOR_START]\r\n                : msg.data;\r\n    }\r\n\r\n    // Only use with GelatoRelayBase onlyGelatoRelay or `_isGelatoRelay` checks\r\n    function _getFeeCollector() internal pure returns (address) {\r\n        return _getFeeCollectorRelayContext();\r\n    }\r\n\r\n    // Only use with previous onlyGelatoRelay or `_isGelatoRelay` checks\r\n    function _getFeeToken() internal pure returns (address) {\r\n        return _getFeeTokenRelayContext();\r\n    }\r\n\r\n    // Only use with previous onlyGelatoRelay or `_isGelatoRelay` checks\r\n    function _getFee() internal pure returns (uint256) {\r\n        return _getFeeRelayContext();\r\n    }\r\n}\r\n\r\n\r\nabstract contract WiskersBase is Ownable, GelatoRelayContext {\r\n    using SafeERC20 for IERC20;\r\n    struct signature_t {\r\n        uint8 _v;\r\n        bytes32 _r;\r\n        bytes32 _s;\r\n    }\r\n\r\n    function getChainID() public view returns (uint256) {\r\n        uint256 id;\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n        return id;\r\n    }\r\n\r\n    function _recoverSignatureSigner(\r\n        bytes32 payloadHash,\r\n        signature_t memory signature\r\n    ) public pure returns (address) {\r\n        bytes32 messageHash = keccak256(\r\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", payloadHash)\r\n        );\r\n        return ecrecover(messageHash, signature._v, signature._r, signature._s);\r\n    }\r\n\r\n    function recover() external onlyOwner {\r\n        (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(success, \"!recover\");\r\n    }\r\n\r\n    function withdraw(IERC20 token, uint256 amount) external onlyOwner {\r\n        uint256 bal = token.balanceOf(address(this));\r\n        token.safeTransferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            amount > bal ? bal : amount\r\n        );\r\n    }\r\n\r\n    /* Wrapper around gelato functions */\r\n    function __getFee() internal view virtual returns (uint256) {\r\n        return _getFee();\r\n    }\r\n\r\n    function __getFeeToken() internal view virtual returns (address) {\r\n        return _getFeeToken();\r\n    }\r\n\r\n    function __transferRelayFee() internal virtual {\r\n        return _transferRelayFee();\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IWETH9 is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 _amount) external;\r\n}\r\n\r\n\r\ncontract WiskersUniswapV2Action is WiskersBase {\r\n    using SafeERC20 for IERC20;\r\n\r\n    event NewOperator(address op);\r\n    event TakeFee(address token, uint256 feeAmount);\r\n    event RunAction(bytes32 actionHash);\r\n\r\n    event NewProtocolFee(uint256 opfee);\r\n    event NewFeeAddress(address feeAddress);\r\n\r\n    address public operator;\r\n\r\n    struct _actionStorage {\r\n        address creator;\r\n        address assetIn;\r\n        uint256 amountIn;\r\n        uint256 runLimit;\r\n        uint256 runs;\r\n        bytes payload;\r\n    }\r\n    mapping(bytes32 => mapping(uint256 => bytes)) public actionResult;\r\n    mapping(bytes32 => _actionStorage) public actionStorage;\r\n\r\n    struct actionStruct_t {\r\n        uint256 nonce;\r\n        address targetContract;\r\n        address creator;\r\n        address assetIn;\r\n        uint256 amountIn;\r\n        uint256 runLimit;\r\n        bytes payload;\r\n    }\r\n\r\n    address public constant ETH =\r\n        address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    address public immutable weth;\r\n\r\n    IUniswapV2Router02 public immutable swapRouter;\r\n\r\n    address public feeAddress;\r\n    uint256 public protocolFee = 33;\r\n\r\n    constructor(\r\n        address _weth,\r\n        address _swapRouter,\r\n        address _feeAddress,\r\n        address _op\r\n    ) {\r\n        weth = _weth;\r\n        swapRouter = IUniswapV2Router02(_swapRouter);\r\n        feeAddress = _feeAddress;\r\n        operator = _op;\r\n        emit NewOperator(_op);\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        if (msg.sender != operator) revert(\"Not Operator\");\r\n        _;\r\n    }\r\n\r\n    function setOperator(address _op) public onlyOwner {\r\n        operator = _op;\r\n        emit NewOperator(_op);\r\n    }\r\n\r\n    function setProtocolFee(uint256 _opfee) public onlyOwner {\r\n        if (_opfee > 100) revert(\"InvalidFee\");\r\n        protocolFee = _opfee;\r\n        emit NewProtocolFee(_opfee);\r\n    }\r\n\r\n    function setFeeAddress(address _feeAddress) public onlyOwner {\r\n        feeAddress = _feeAddress;\r\n        emit NewFeeAddress(_feeAddress);\r\n    }\r\n\r\n    function getActionResult(\r\n        bytes32 actionHash,\r\n        uint256 run\r\n    ) public view returns (bytes memory) {\r\n        return actionResult[actionHash][run];\r\n    }\r\n\r\n    function hasPair(\r\n        address token0,\r\n        address token1\r\n    ) internal view returns (bool) {\r\n        return\r\n            IUniswapV2Factory(swapRouter.factory()).getPair(token0, token1) !=\r\n            address(0);\r\n    }\r\n\r\n    /// @notice take protocol fee\r\n    /// @dev takes protocol cut of assetIn\r\n    /// @param assetIn asset being traded-in\r\n    /// @return amount taken in fee\r\n    function _takeFee(IERC20 assetIn) internal returns (uint256) {\r\n        uint256 amountIn = assetIn.balanceOf(address(this));\r\n        uint256 fee = (amountIn * protocolFee) / 10000;\r\n\r\n        if (address(assetIn) == weth) {\r\n            assetIn.safeTransfer(feeAddress, fee);\r\n            emit TakeFee(address(weth), fee);\r\n        } else {\r\n            address[] memory swapPath = new address[](2);\r\n            swapPath[0] = address(assetIn);\r\n            swapPath[1] = address(weth);\r\n\r\n            uint256 balanceDelta = IERC20(weth).balanceOf(address(feeAddress));\r\n            swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                fee,\r\n                0,\r\n                swapPath,\r\n                feeAddress,\r\n                block.timestamp\r\n            );\r\n            balanceDelta = IERC20(weth).balanceOf(address(feeAddress)) - balanceDelta;\r\n            emit TakeFee(address(weth), balanceDelta);\r\n        }\r\n\r\n        return fee;\r\n    }\r\n\r\n    /// @notice pay execution fee\r\n    /// @dev pay executor fee to gelato\r\n    /// @param assetIn asset being traded-in\r\n    /// @return amountFee taken in fee\r\n    function _payExecutionFee(\r\n        IERC20 assetIn,\r\n        uint16 slippage\r\n    ) internal returns (uint256 amountFee) {\r\n        uint256 amountIn = assetIn.balanceOf(address(this));\r\n        uint256 _fee = __getFee();\r\n        if (address(assetIn) == weth) {\r\n            amountFee = _fee;\r\n            IWETH9(weth).withdraw(amountFee);\r\n        } else {\r\n            address[] memory swapPath = new address[](2);\r\n            swapPath[0] = address(assetIn);\r\n            swapPath[1] = address(weth);\r\n\r\n            uint[] memory feeAmounts = swapRouter.getAmountsIn(_fee, swapPath);\r\n\r\n            // we dont know the tax of the token, so we assume user will set slippage to ok value\r\n            swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                (feeAmounts[0] * (uint256(slippage) + 10000)) / 10000,\r\n                _fee,\r\n                swapPath,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n            IWETH9(weth).withdraw(_fee);\r\n            amountFee = amountIn - assetIn.balanceOf(address(this));\r\n        }\r\n        if (_fee > address(this).balance) {\r\n            revert(\"ExecFeeNotPayable\");\r\n        }\r\n        if (__getFeeToken() != ETH) {\r\n            revert(\"ExecFeeTokenNotETH\");\r\n        }\r\n        __transferRelayFee();\r\n    }\r\n\r\n    function makeActionHash(\r\n        actionStruct_t memory action\r\n    ) public view returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    action.nonce,\r\n                    action.targetContract,\r\n                    action.creator,\r\n                    action.assetIn,\r\n                    action.amountIn,\r\n                    action.runLimit,\r\n                    action.payload,\r\n                    getChainID()\r\n                )\r\n            );\r\n    }\r\n\r\n    modifier validateSignature(\r\n        bytes32 payload,\r\n        signature_t memory signature,\r\n        address assumedSigner\r\n    ) {\r\n        {\r\n            address signer = _recoverSignatureSigner(payload, signature);\r\n            if (signer == address(0) || signer != assumedSigner) {\r\n                revert(\"InvalidOperatorSignature\");\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    function swapAssets(\r\n        actionStruct_t memory action,\r\n        bytes memory guardrails\r\n    ) internal returns (bytes memory result) {\r\n        IERC20 assetIn = IERC20(action.assetIn);\r\n        address creator = action.creator;\r\n        (address assetOut, uint16 slippage, bool amountInPercent) = abi.decode(\r\n            action.payload,\r\n            (address, uint16, bool)\r\n        );\r\n        // Get amountIn if its % or keep old amountIn\r\n        uint256 amountIn = amountInPercent\r\n            ? (IERC20(action.assetIn).balanceOf(action.creator) *\r\n                action.amountIn) / 10000\r\n            : action.amountIn;\r\n\r\n        if (assetIn.allowance(creator, address(this)) < amountIn) {\r\n            revert(\"NotEnoughAllowance\");\r\n        }\r\n        // Transfer assetIn from creator\r\n        {\r\n            assetIn.safeTransferFrom(creator, address(this), amountIn);\r\n            uint256 balanceAfterTransfer = assetIn.balanceOf(address(this));\r\n            if (balanceAfterTransfer == 0) {\r\n                revert(\"AmountNull\");\r\n            }\r\n            if (address(assetIn) != address(weth)) {\r\n                assetIn.approve(address(swapRouter), balanceAfterTransfer);\r\n            }\r\n        }\r\n        // Take fee and pay gelato\r\n        uint256 _protocolFee = _takeFee(assetIn);\r\n        uint256 _executionFee = _payExecutionFee(assetIn, slippage);\r\n\r\n        if (address(assetIn) == address(weth)) {\r\n            assetIn.approve(\r\n                address(swapRouter),\r\n                assetIn.balanceOf(address(this))\r\n            );\r\n        }\r\n\r\n        // update amountIn to account for tax tokens\r\n        amountIn = assetIn.balanceOf(address(this));\r\n        // Decode guardrails, minAmountOut in this case\r\n        uint256 minAmountOut = abi.decode(guardrails, (uint256));\r\n\r\n        // make path\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(assetIn);\r\n        path[1] = address(assetOut);\r\n\r\n        // get amountOut and apply slippage\r\n        uint256 estimatedAmountOutWithSlippage = (swapRouter.getAmountsOut(\r\n            amountIn,\r\n            path\r\n        )[1] * (10000 - slippage)) / 10000;\r\n\r\n        // do swap\r\n        swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amountIn,\r\n            minAmountOut,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        // check if amountOut is less than amount with slippage\r\n        uint256 outAmount = IERC20(assetOut).balanceOf(address(this));\r\n        if (estimatedAmountOutWithSlippage > outAmount) {\r\n            revert(\"InsufficientAmountOutWithSlippage\");\r\n        }\r\n\r\n        IERC20(assetOut).safeTransfer(creator, outAmount);\r\n        //refund remaining gas\r\n        if (assetOut != weth && IERC20(weth).balanceOf(address(this)) > 0) {\r\n            IERC20(weth).safeTransfer(\r\n                creator,\r\n                IERC20(weth).balanceOf(address(this))\r\n            );\r\n        }\r\n\r\n        result = abi.encode(\r\n            uint256(amountIn),\r\n            uint256(outAmount),\r\n            uint256(_protocolFee),\r\n            uint256(_executionFee)\r\n        );\r\n    }\r\n\r\n    struct wrappedAction {\r\n        bytes32 actionHash;\r\n        actionStruct_t action;\r\n        signature_t creatorSignature;\r\n        signature_t signature;\r\n        bytes guardrails;\r\n    }\r\n\r\n    function _runAction(\r\n        wrappedAction memory wa\r\n    )\r\n        internal\r\n        validateSignature(wa.actionHash, wa.creatorSignature, wa.action.creator)\r\n        validateSignature(\r\n            keccak256(abi.encode(wa.actionHash, keccak256(wa.guardrails))),\r\n            wa.signature,\r\n            operator\r\n        )\r\n    {\r\n        if (!verifyAction(wa.action)) {\r\n            revert(\"ActionVerificationFailed\");\r\n        }\r\n\r\n        if ((actionStorage[wa.actionHash].runs >= wa.action.runLimit)) {\r\n            revert(\"ActionExceededRunLimit\");\r\n        }\r\n        {\r\n            /* Action Start End */\r\n\r\n            bytes memory _result = swapAssets(wa.action, wa.guardrails);\r\n\r\n            /* Action Specific End */\r\n\r\n            if (actionStorage[wa.actionHash].creator == address(0)) {\r\n                actionStorage[wa.actionHash] = _actionStorage(\r\n                    wa.action.creator,\r\n                    address(wa.action.assetIn),\r\n                    wa.action.amountIn,\r\n                    wa.action.runLimit,\r\n                    0,\r\n                    wa.action.payload\r\n                );\r\n            }\r\n\r\n            uint256 runs = actionStorage[wa.actionHash].runs + 1;\r\n            actionResult[wa.actionHash][runs] = _result;\r\n            actionStorage[wa.actionHash].runs = runs;\r\n        }\r\n        emit RunAction(wa.actionHash);\r\n    }\r\n\r\n    function gelatoRunAction(\r\n        actionStruct_t calldata action,\r\n        signature_t calldata creatorSignature,\r\n        bytes calldata guardrails,\r\n        signature_t calldata signature\r\n    ) public onlyGelatoRelay {\r\n        _runAction(\r\n            wrappedAction(\r\n                makeActionHash(action),\r\n                action,\r\n                creatorSignature,\r\n                signature,\r\n                guardrails\r\n            )\r\n        );\r\n    }\r\n\r\n    // Checking/Validating Actions\r\n\r\n    function verifyAction(\r\n        actionStruct_t memory action\r\n    ) public view returns (bool) {\r\n        (address assetOut, uint16 maxSlippage, ) = abi.decode(\r\n            action.payload,\r\n            (address, uint16, bool)\r\n        );\r\n        if (action.runLimit == 0) {\r\n            revert(\"InvalidRunLimit\");\r\n        }\r\n        if (maxSlippage > 10000) {\r\n            revert(\"InvalidSlippage\");\r\n        }\r\n        if (action.assetIn != weth) {\r\n            if (!hasPair(address(action.assetIn), address(weth))) {\r\n                revert(\"NoPairForAssetInAndGas\");\r\n            }\r\n        }\r\n        if (!hasPair(address(action.assetIn), address(assetOut))) {\r\n            revert(\"NoPairForAssetInAndAssetOut\");\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function verifyActionAndSignature(\r\n        actionStruct_t memory action,\r\n        signature_t memory creatorSignature\r\n    ) public view returns (bool) {\r\n        bytes32 actionHash = makeActionHash(action);\r\n        address signer = _recoverSignatureSigner(actionHash, creatorSignature);\r\n        if (signer == address(0) || signer != action.creator) {\r\n            revert(\"InvalidCreatorSignature\");\r\n        }\r\n        return verifyAction(action);\r\n    }\r\n\r\n    function verifyActionOperatorSignature(\r\n        actionStruct_t calldata action,\r\n        bytes memory guardrails,\r\n        signature_t calldata creatorSignature,\r\n        signature_t calldata signature\r\n    ) public view returns (bool) {\r\n        bytes32 actionHash = makeActionHash(action);\r\n        {\r\n            if (verifyActionAndSignature(action, creatorSignature) == false) {\r\n                return false;\r\n            }\r\n        }\r\n        {\r\n            address signer = _recoverSignatureSigner(\r\n                keccak256(abi.encode(actionHash, keccak256(guardrails))),\r\n                signature\r\n            );\r\n            if (signer == address(0) || operator != signer) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function prepareActionCall(\r\n        actionStruct_t calldata action,\r\n        uint256 execFee\r\n    ) public view returns (uint256 quoteMinAmountOut) {\r\n        bytes32 actionHash = makeActionHash(action);\r\n\r\n        if ((action.runLimit <= actionStorage[actionHash].runs)) {\r\n            revert(\"ActionExceededRunLimit\");\r\n        }\r\n\r\n        (address assetOut, uint16 maxSlippage, bool amountInPercent) = abi\r\n            .decode(action.payload, (address, uint16, bool));\r\n        IERC20 assetIn = IERC20(action.assetIn);\r\n        uint256 amountIn = amountInPercent\r\n            ? (assetIn.balanceOf(action.creator) * action.amountIn) / 10000\r\n            : action.amountIn;\r\n\r\n        uint256 _fee = (amountIn * protocolFee) / 10000;\r\n        uint256 feeAmountsExec = execFee;\r\n\r\n        if (action.assetIn != weth) {\r\n            if (!hasPair(address(action.assetIn), address(weth))) {\r\n                revert(\"NoPairForAssetInAndGas\");\r\n            }\r\n            address[] memory feePath = new address[](2);\r\n            feePath[0] = address(assetIn);\r\n            feePath[1] = address(weth);\r\n            uint[] memory feeAmounts = swapRouter.getAmountsIn(\r\n                execFee,\r\n                feePath\r\n            );\r\n            feeAmountsExec =\r\n                (feeAmounts[0] * (uint256(maxSlippage) + 10000)) /\r\n                10000;\r\n        }\r\n        //check if there is a pool for assetIn and assetOut\r\n        if (!hasPair(address(action.assetIn), address(assetOut))) {\r\n            revert(\"NoPairForAssetInAndAssetOut\");\r\n        }\r\n\r\n        if ((feeAmountsExec + _fee) > amountIn) {\r\n            revert(\"FeeGreaterThanAmountIn\");\r\n        }\r\n\r\n        address[] memory swapPath = new address[](2);\r\n        swapPath[0] = address(action.assetIn);\r\n        swapPath[1] = address(assetOut);\r\n        uint[] memory swapAmountsOut = swapRouter.getAmountsOut(\r\n            amountIn - (feeAmountsExec + _fee),\r\n            swapPath\r\n        );\r\n        quoteMinAmountOut = (swapAmountsOut[1] * (10000 - maxSlippage)) / 10000;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_op\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"}],\"name\":\"NewFeeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"op\",\"type\":\"address\"}],\"name\":\"NewOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"opfee\",\"type\":\"uint256\"}],\"name\":\"NewProtocolFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"actionHash\",\"type\":\"bytes32\"}],\"name\":\"RunAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"TakeFee\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"internalType\":\"struct WiskersBase.signature_t\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"_recoverSignatureSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"actionResult\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"actionStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runs\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct WiskersUniswapV2Action.actionStruct_t\",\"name\":\"action\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"internalType\":\"struct WiskersBase.signature_t\",\"name\":\"creatorSignature\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"guardrails\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"internalType\":\"struct WiskersBase.signature_t\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"gelatoRunAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"actionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"run\",\"type\":\"uint256\"}],\"name\":\"getActionResult\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct WiskersUniswapV2Action.actionStruct_t\",\"name\":\"action\",\"type\":\"tuple\"}],\"name\":\"makeActionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct WiskersUniswapV2Action.actionStruct_t\",\"name\":\"action\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"execFee\",\"type\":\"uint256\"}],\"name\":\"prepareActionCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteMinAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_op\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_opfee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct WiskersUniswapV2Action.actionStruct_t\",\"name\":\"action\",\"type\":\"tuple\"}],\"name\":\"verifyAction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct WiskersUniswapV2Action.actionStruct_t\",\"name\":\"action\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"internalType\":\"struct WiskersBase.signature_t\",\"name\":\"creatorSignature\",\"type\":\"tuple\"}],\"name\":\"verifyActionAndSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct WiskersUniswapV2Action.actionStruct_t\",\"name\":\"action\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"guardrails\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"internalType\":\"struct WiskersBase.signature_t\",\"name\":\"creatorSignature\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"internalType\":\"struct WiskersBase.signature_t\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"verifyActionOperatorSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WiskersUniswapV2Action", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "5000", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f000000000000000000000000cbbfc0f4c8ef45abd1704d737f64d302587436d10000000000000000000000004e8af4bf3e7ed420bfcb5356ad24b9f0d2240d6b", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d795d4d0e2cd3143fca885888d7081693f57795004be1fe005ecdffb75140426"}