{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/IBFFBorrowerCurveLPv2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.19;\\n\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts@4.9.3/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts@4.9.3/access/Ownable2Step.sol\\\";\\n\\n// import our needed interfaces\\nimport \\\"./interfaces/IChainlink.sol\\\";\\nimport \\\"./interfaces/IConvex.sol\\\";\\nimport \\\"./interfaces/ICurve.sol\\\";\\nimport \\\"./interfaces/IIronBank.sol\\\";\\n\\n/**\\n * @title Iron Bank Fixed Forex Borrower\\n * @notice Contract for borrowing fixed forex tokens uncollateralized from Iron Bank and supplying them as liquidity to\\n *  Curve/Convex.\\n * @dev Only profit may be swept out by owner, and Iron Bank multisig can claw back all funds and repay borrows at any\\n *  time. Contract framework can easily be forked to supply liquidity to any markets (Curve, Uniswap, etc.) as needed.\\n */\\ncontract IBFFBorrowerCurveLPv2 is Ownable2Step {\\n    using SafeERC20 for IERC20;\\n\\n    struct Forex {\\n        string name;\\n        uint256 pid;\\n        address underlying;\\n        address synth;\\n        address cyToken;\\n        address curveLpToken;\\n        address curvePool;\\n        address rewardsContract;\\n        uint256 borrowLimit;\\n        uint256 borrowAmountStored;\\n        uint256 chainlinkUint;\\n        bytes32 currencyKey;\\n    }\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    /// @notice Used to track the deployed version of this contract.\\n    string public constant apiVersion = \\\"0.2.0\\\";\\n\\n    // use this to allow repaying v1 borrower debt to transfer debt over to this contract\\n    address public constant V1_BORROWER =\\n        0x9A97664f3aBA3d6De05099b513a854D838c99Db6;\\n\\n    /// @notice Iron Bank multisig, can call specific permissioned functions\\n    address public constant ironBankMultisig =\\n        0x9d960dAe0639C95a0C822C9d7769d19d30A430Aa;\\n\\n    // tokens\\n    IERC20 internal constant crv =\\n        IERC20(0xD533a949740bb3306d119CC777fa900bA034cd52);\\n    IERC20 internal constant cvx =\\n        IERC20(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\\n\\n    // other infra contracts\\n    address internal constant depositContract =\\n        0xF403C135812408BFbE8713b5A23a04b3D48AAE31;\\n    IChainlink internal constant feedRegistry =\\n        IChainlink(0x47Fb2585D2C56Fe188D0E6ec628a38b74fCeeeDf);\\n    IIronBank internal constant unitroller =\\n        IIronBank(0xAB1c342C7bf5Ec5F02ADEA1c2270670bCa144CbB);\\n    IConvex internal constant zapContract =\\n        IConvex(0xDd49A93FDcae579AE50B4b9923325e9e335ec82B); // with this we can claim all rewards at once\\n\\n    /**\\n     * @notice Boolean if we should always claim rewards when withdrawing.\\n     * @dev Generally this should be false as we only need to claim rewards on harvest().\\n     */\\n    bool public claimRewards;\\n\\n    /// @notice Array of our rewards contracts, used to claim all rewards at once.\\n    address[] public rewardsContracts;\\n\\n    /**\\n     * @notice Array of structs with all of the data on our markets.\\n     * @dev Keys: 0: ibEUR, 1: ibKRW, 2: ibCHF, 3: ibGBP, 4: ibEUR-USDC, 5: ibJPY, 6: ibAUD\\n     */\\n    mapping(uint256 => Forex) public forexInfo;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        string[] memory _names,\\n        uint256[] memory _pids,\\n        address[] memory _underlyingTokens,\\n        address[] memory _synths,\\n        address[] memory _cyTokens,\\n        address[] memory _curveLpTokens,\\n        address[] memory _curvePools,\\n        address[] memory _rewardsContracts,\\n        uint256[] memory _chainlinkUint,\\n        bytes32[] memory _currencyKeys\\n    ) {\\n        // setup almost everything in our struct\\n        for (uint256 i = 0; i < _pids.length; i++) {\\n            // set up our struct\\n            forexInfo[i] = Forex(\\n                _names[i],\\n                _pids[i],\\n                _underlyingTokens[i],\\n                _synths[i],\\n                _cyTokens[i],\\n                _curveLpTokens[i],\\n                _curvePools[i],\\n                _rewardsContracts[i],\\n                0,\\n                0,\\n                _chainlinkUint[i],\\n                _currencyKeys[i]\\n            );\\n        }\\n\\n        // do approvals\\n        for (uint256 i = 0; i < _pids.length; i++) {\\n            uint256 _pid = _pids[i];\\n            (address _want, , , address _rewardsContract, , ) = IConvex(\\n                depositContract\\n            ).poolInfo(_pid);\\n            require(_want == _curveLpTokens[i], \\\"Underlying array incorrect\\\");\\n            require(\\n                _rewardsContract == _rewardsContracts[i],\\n                \\\"Rewards array incorrect\\\"\\n            );\\n\\n            IERC20(_want).approve(depositContract, type(uint256).max);\\n\\n            // approve depositing our token into the pool, for repaying our borrows, and for swaps\\n            IERC20(_underlyingTokens[i]).approve(\\n                _curvePools[i],\\n                type(uint256).max\\n            );\\n\\n            // don't want to do these approvals again for ibEUR-USDC\\n            if (_pid != 86) {\\n                IERC20(_synths[i]).approve(_curvePools[i], type(uint256).max);\\n                IERC20(_underlyingTokens[i]).approve(\\n                    _cyTokens[i],\\n                    type(uint256).max\\n                );\\n            } else {\\n                // approve ibEUR-USDC LP on pool\\n                IERC20(_curveLpTokens[i]).approve(\\n                    _curvePools[i],\\n                    type(uint256).max\\n                );\\n            }\\n        }\\n\\n        // setup our rewardsContracts array\\n        rewardsContracts = _rewardsContracts;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyIronBank() {\\n        _onlyIronBank();\\n        _;\\n    }\\n\\n    function _onlyIronBank() internal view {\\n        require(msg.sender == ironBankMultisig, \\\"Must be Iron Bank\\\");\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function name() external pure returns (string memory) {\\n        return \\\"IronBankBorrowerV2\\\";\\n    }\\n\\n    /**\\n     * @notice How much of an LP we have staked in Convex.\\n     * @param _forexKey Key in our forexInfo struct to use.\\n     */\\n    function stakedBalance(uint256 _forexKey) public view returns (uint256) {\\n        IConvex rewardsContract = IConvex(forexInfo[_forexKey].rewardsContract);\\n        return rewardsContract.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice How much we can borrow of an asset in USD.\\n     * @param _forexKey Key in our forexInfo struct to use.\\n     */\\n    function creditLimit(uint256 _forexKey) public view returns (uint256) {\\n        return\\n            unitroller.creditLimits(\\n                address(this),\\n                forexInfo[_forexKey].cyToken\\n            );\\n    }\\n\\n    /**\\n     * @notice How much CRV we can claim from the staking contract for a given pool.\\n     * @param _forexKey Key in our forexInfo struct to use.\\n     */\\n    function claimableBalance(uint256 _forexKey) public view returns (uint256) {\\n        IConvex rewardsContract = IConvex(forexInfo[_forexKey].rewardsContract);\\n        return rewardsContract.earned(address(this));\\n    }\\n\\n    /**\\n     * @notice Whether our we can safely unwind our borrow with rewards\\n     * @dev Note that this uses the stored value, for current values call cyToken.borrowBalanceCurrent(address(this)).\\n     * @param _forexKey Key in our forexInfo struct to use.\\n     */\\n    function canRepayBorrowStored(uint256 _forexKey)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return\\n            claimableProfitInUsdc(_forexKey) +\\n                forceWithdrawValueInUsdc(_forexKey) >\\n            borrowedValueInUsdc(_forexKey);\\n    }\\n\\n    /**\\n     * @notice Value of our borrowed assets in USDC.\\n     * @param _forexKey Key in our forexInfo struct to use.\\n     */\\n    function borrowedValueInUsdc(uint256 _forexKey)\\n        public\\n        view\\n        returns (uint256 borrowedValue)\\n    {\\n        // check how much we have borrowed\\n        IIronBank cyToken = IIronBank(forexInfo[_forexKey].cyToken);\\n        borrowedValue =\\n            (cyToken.borrowBalanceStored(address(this)) *\\n                usdcPerForex(_forexKey)) /\\n            1e20; // 1e18 * 1e8 = 1e26\\n    }\\n\\n    /**\\n     * @notice Value of our holdings if we unwind completely to our ibXYZ token.\\n     * @param _forexKey Key in our forexInfo struct to use.\\n     */\\n    function forceWithdrawValueInUsdc(uint256 _forexKey)\\n        public\\n        view\\n        returns (uint256 assetsValue)\\n    {\\n        // check for any starting balance of underlying\\n        IERC20 underlying = IERC20(forexInfo[_forexKey].underlying);\\n        uint256 looseAssets = underlying.balanceOf(address(this));\\n        uint256 totalAssets;\\n        uint256 poolAssets;\\n        uint256 stakedAssets;\\n\\n        // check our forex per usdc\\n        uint256 _usdcPerForex = usdcPerForex(_forexKey);\\n\\n        // we use ibEUR for two pools\\n        if (_forexKey == 0 || _forexKey == 4) {\\n            // simulate how much we would get out\\n            stakedAssets = stakedBalance(0);\\n            if (stakedAssets > 0) {\\n                ICurveFi curvePool = ICurveFi(forexInfo[0].curvePool);\\n                poolAssets = curvePool.calc_withdraw_one_coin(\\n                    stakedBalance(0),\\n                    0\\n                );\\n            }\\n            totalAssets = poolAssets + looseAssets;\\n            poolAssets = 0;\\n\\n            stakedAssets = stakedBalance(4);\\n            if (stakedAssets > 0) {\\n                ICurveFiPool curvePool = ICurveFiPool(forexInfo[4].curvePool);\\n                poolAssets = curvePool.calc_withdraw_one_coin(\\n                    stakedBalance(4),\\n                    0\\n                );\\n            }\\n            totalAssets = totalAssets + poolAssets;\\n        } else {\\n            // simulate how much we would get out\\n            stakedAssets = stakedBalance(_forexKey);\\n            if (stakedAssets > 0) {\\n                ICurveFi curvePool = ICurveFi(forexInfo[_forexKey].curvePool);\\n                poolAssets = curvePool.calc_withdraw_one_coin(\\n                    stakedBalance(_forexKey),\\n                    0\\n                );\\n            }\\n            totalAssets = poolAssets + looseAssets;\\n        }\\n\\n        assetsValue = (totalAssets * _usdcPerForex) / 1e20; // 1e18 * 1e8 = 1e26\\n    }\\n\\n    /**\\n     * @notice Value of our holdings if we remove our LPs balanced from Curve, assuming 1 ibXYZ = 1 sXYZ = spot oracle price.\\n     * @param _forexKey Key in our forexInfo struct to use.\\n     */\\n    function holdingsValueInUsdc(uint256 _forexKey)\\n        public\\n        view\\n        returns (uint256 assetsValue)\\n    {\\n        // check for any starting balance of underlying, no reason for us to ever have loose synth balances\\n        IERC20 underlying = IERC20(forexInfo[_forexKey].underlying);\\n        uint256 looseAssets = underlying.balanceOf(address(this));\\n        uint256 totalAssets;\\n        uint256 poolAssets;\\n        uint256 stakedAssets;\\n\\n        // check our forex per usdc\\n        uint256 _usdcPerForex = usdcPerForex(_forexKey);\\n\\n        // we use ibEUR for two pools\\n        if (_forexKey == 0 || _forexKey == 4) {\\n            // simulate how much we would get out\\n            stakedAssets = stakedBalance(0);\\n            if (stakedAssets > 0) {\\n                ICurveFi curvePool = ICurveFi(forexInfo[0].curvePool);\\n                poolAssets =\\n                    (curvePool.balances(0) * stakedAssets) /\\n                    curvePool.totalSupply();\\n                poolAssets +=\\n                    (curvePool.balances(1) * stakedAssets) /\\n                    curvePool.totalSupply();\\n            }\\n            totalAssets = poolAssets + looseAssets;\\n            poolAssets = 0;\\n\\n            stakedAssets = stakedBalance(4);\\n            if (stakedAssets > 0) {\\n                ICurveFiPool curvePool = ICurveFiPool(forexInfo[4].curvePool);\\n                IERC20 curveLp = ICurveFiPool(forexInfo[4].curveLpToken);\\n                poolAssets =\\n                    (curvePool.balances(0) * stakedAssets) /\\n                    curveLp.totalSupply();\\n                assetsValue =\\n                    (curvePool.balances(1) * stakedAssets) /\\n                    curveLp.totalSupply();\\n            }\\n            totalAssets = totalAssets + poolAssets;\\n        } else {\\n            // simulate how much we would get out\\n            stakedAssets = stakedBalance(_forexKey);\\n            if (stakedAssets > 0) {\\n                ICurveFi curvePool = ICurveFi(forexInfo[_forexKey].curvePool);\\n                poolAssets =\\n                    (curvePool.balances(0) * stakedAssets) /\\n                    curvePool.totalSupply();\\n                poolAssets +=\\n                    (curvePool.balances(1) * stakedAssets) /\\n                    curvePool.totalSupply();\\n            }\\n            totalAssets = poolAssets + looseAssets;\\n        }\\n\\n        assetsValue += (totalAssets * _usdcPerForex) / 1e20; // 1e18 * 1e8 = 1e26\\n    }\\n\\n    /**\\n     * @notice The value in dollars that our claimable rewards are worth (in USDC, 6 decimals).\\n     * @param _forexKey Key in our forexInfo struct to use.\\n     */\\n    function claimableProfitInUsdc(uint256 _forexKey)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        // calculations pulled directly from CVX's contract for minting CVX per CRV claimed\\n        uint256 totalCliffs = 1_000;\\n        uint256 maxSupply = 100 * 1_000_000 * 1e18; // 100mil\\n        uint256 reductionPerCliff = 100_000 * 1e18; // 100,000\\n        uint256 supply = cvx.totalSupply();\\n        uint256 mintableCvx;\\n\\n        uint256 cliff = supply / reductionPerCliff;\\n        uint256 _claimableBal = claimableBalance(_forexKey);\\n        //mint if below total cliffs\\n        if (cliff < totalCliffs) {\\n            //for reduction% take inverse of current cliff\\n            uint256 reduction = totalCliffs - cliff;\\n            //reduce\\n            mintableCvx = (_claimableBal * reduction) / totalCliffs;\\n\\n            //supply cap check\\n            uint256 amtTillMax = maxSupply - supply;\\n            if (mintableCvx > amtTillMax) {\\n                mintableCvx = amtTillMax;\\n            }\\n        }\\n\\n        // our chainlink oracle returns prices normalized to 8 decimals, we convert it to 6\\n        uint256 crvPrice = feedRegistry.latestAnswer(\\n            address(crv),\\n            address(840)\\n        ) / 1e2; // ETH, USD. 1e8 div 1e2 = 1e6\\n\\n        uint256 cvxPrice = feedRegistry.latestAnswer(\\n            address(cvx),\\n            address(840)\\n        ) / 1e2; // ETH, USD. 1e8 div 1e2 = 1e6\\n\\n        uint256 crvValue = (crvPrice * _claimableBal) / 1e18; // 1e6 mul 1e18 div 1e18 = 1e6\\n        uint256 cvxValue = (cvxPrice * mintableCvx) / 1e18; // 1e6 mul 1e18 div 1e18 = 1e6\\n\\n        return crvValue + cvxValue;\\n    }\\n\\n    /**\\n     * @notice Convert 1 token to base USDC using chainlink oracles.\\n     * @dev Returns with 8 decimals\\n     * @param _forexKey Key in our forexInfo struct to use.\\n     */\\n    function usdcPerForex(uint256 _forexKey) public view returns (uint256) {\\n        // feed registry output is 8 decimals. in solidity 0.8.0+, must cast to uint160 BEFORE address\\n        uint256 _usdcPerForex = feedRegistry.latestAnswer(\\n            address(uint160(forexInfo[_forexKey].chainlinkUint)),\\n            address(840)\\n        );\\n\\n        return _usdcPerForex;\\n    }\\n\\n    /* ========== V1 -> V2 MIGRATION FUNCTIONS ========== */\\n\\n    /**\\n     * @notice Repay borrows on our v1 borrower. Used to transfer debt from v1 to v2.\\n     * @dev May only be called by owner. This should be called in a multisend with a repayBorrow call in v1.\\n     * @param _forexKey Key in our forexInfo struct to use (asset to repay).\\n     * @param _amount Amount to repay.\\n     */\\n    function transferToRepayBorrowV1(uint256 _forexKey, uint256 _amount)\\n        external\\n        onlyOwner\\n        returns (uint256 totalTransferred)\\n    {\\n        IIronBank cyToken = IIronBank(forexInfo[_forexKey].cyToken);\\n        IERC20 underlying = IERC20(forexInfo[_forexKey].underlying);\\n\\n        // repay the amount we input, or everything if we do 0\\n        if (_amount > 0) {\\n            underlying.transfer(V1_BORROWER, _amount);\\n            totalTransferred = _amount;\\n        } else {\\n            // repay max\\n            totalTransferred = cyToken.borrowBalanceCurrent(V1_BORROWER);\\n            underlying.transfer(V1_BORROWER, totalTransferred);\\n        }\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n     * @notice Borrow using our credit line.\\n     * @dev May only be called by owner.\\n     * @param _forexKey Key in our forexInfo struct to use (asset to borrow).\\n     * @param _amount Amount to borrow.\\n     */\\n    function borrow(uint256 _forexKey, uint256 _amount) external onlyOwner {\\n        IIronBank cyToken = IIronBank(forexInfo[_forexKey].cyToken);\\n        cyToken.borrow(_amount);\\n\\n        // update our borrow limit and balance for this token\\n        forexInfo[_forexKey].borrowLimit = creditLimit(_forexKey);\\n        forexInfo[_forexKey].borrowAmountStored = cyToken.borrowBalanceStored(\\n            address(this)\\n        );\\n    }\\n\\n    /**\\n     * @notice Repay borrow for an asset.\\n     * @dev May only be called by owner.\\n     * @param _forexKey Key in our forexInfo struct to use (asset to repay).\\n     * @param _amount Amount to repay.\\n     */\\n    function repayBorrow(uint256 _forexKey, uint256 _amount)\\n        external\\n        onlyOwner\\n    {\\n        _repayBorrow(_forexKey, _amount);\\n    }\\n\\n    function _repayBorrow(uint256 _forexKey, uint256 _amount) internal {\\n        IIronBank cyToken = IIronBank(forexInfo[_forexKey].cyToken);\\n\\n        // repay the amount we input, or everything if we do 0\\n        if (_amount > 0) {\\n            cyToken.repayBorrow(_amount);\\n        } else {\\n            // repay max\\n            cyToken.repayBorrow(type(uint256).max);\\n        }\\n\\n        // update our borrow limit and balance for this token\\n        forexInfo[_forexKey].borrowLimit = creditLimit(_forexKey);\\n        forexInfo[_forexKey].borrowAmountStored = cyToken.borrowBalanceStored(\\n            address(this)\\n        );\\n    }\\n\\n    /**\\n     * @notice Deposit held ibToken to a Curve pool and stake it in Convex.\\n     * @dev May only be called by owner. If needed, can use this to add more sXYZ to our LP holdings by externally\\n     *  minting more LP via the synth, then sending it directly here to be staked.\\n     * @param _forexKey Key in our forexInfo struct to use (asset to LP).\\n     * @param _forexAmount Amount to deposit to Curve LP.\\n     * @param _minAmountOut Min amount of LP expected from ibToken, set this to avoid \ud83e\udd6a.\\n     */\\n    function deposit(\\n        uint256 _forexKey,\\n        uint256 _forexAmount,\\n        uint256 _minAmountOut\\n    ) external onlyOwner {\\n        require(_minAmountOut > 0, \\\"Set _minAmountOut\\\");\\n\\n        // check for balances of tokens to deposit\\n        uint256 ibTokenBalance = IERC20(forexInfo[_forexKey].underlying)\\n            .balanceOf(address(this));\\n\\n        if (ibTokenBalance > 0) {\\n            ICurveFi curvePool = ICurveFi(forexInfo[_forexKey].curvePool);\\n            curvePool.add_liquidity([_forexAmount, 0], _minAmountOut);\\n        }\\n\\n        // Send all of our Curve pool tokens to be deposited\\n        ICurveFi curveLpToken = ICurveFi(forexInfo[_forexKey].curveLpToken);\\n        uint256 _toInvest = curveLpToken.balanceOf(address(this));\\n\\n        // deposit into convex and stake immediately (but only if we have something to invest)\\n        if (_toInvest > 0) {\\n            uint256 pid = forexInfo[_forexKey].pid;\\n            IConvex(depositContract).deposit(pid, _toInvest, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim and sweep out CRV and CVX to owner address.\\n     * @dev May only be called by owner.\\n     */\\n    function harvestAndSweep() external onlyOwner {\\n        _harvest();\\n        _sweepRewards();\\n    }\\n\\n    /**\\n     * @notice Claim rewards (likely only CVX and CRV). Rewards are not sold but may be swept out later.\\n     * @dev May only be called by owner.\\n     */\\n    function harvest() external onlyOwner {\\n        _harvest();\\n    }\\n\\n    function _harvest() internal {\\n        // this claims our CRV, CVX, and any extra tokens for all pools we are staked in\\n        address[] memory empty;\\n        zapContract.claimRewards(\\n            rewardsContracts,\\n            empty,\\n            empty,\\n            empty,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0\\n        );\\n    }\\n\\n    /**\\n     * @notice Sweep out all CRV and CVX (profit).\\n     * @dev May only be called by owner.\\n     */\\n    function sweepRewards() external onlyOwner {\\n        _sweepRewards();\\n    }\\n\\n    function _sweepRewards() internal {\\n        uint256 crvBalance = crv.balanceOf(address(this));\\n        if (crvBalance > 0) {\\n            crv.transfer(owner(), crvBalance);\\n        }\\n\\n        uint256 cvxBalance = cvx.balanceOf(address(this));\\n        if (cvxBalance > 0) {\\n            cvx.transfer(owner(), cvxBalance);\\n        }\\n    }\\n\\n    /**\\n     * @notice Manually withdraw some of our Convex LP to our forex token.\\n     * @dev May only be called by owner.\\n     * @param _amountToUnstake Amount of Convex LP to unstake and withdraw from.\\n     * @param _forexKey Key in our forexInfo struct to use (LP to exit from).\\n     * @param _minAmountOut Min amount of ibToken expected from LP, set this to avoid \ud83e\udd6a.\\n     */\\n    function withdrawToForex(\\n        uint256 _amountToUnstake,\\n        uint256 _forexKey,\\n        uint256 _minAmountOut\\n    ) external onlyOwner {\\n        _withdrawToForex(_amountToUnstake, _forexKey, _minAmountOut);\\n    }\\n\\n    /**\\n     * @notice Manually withdraw all of our staked Convex LP to our forex token.\\n     * @dev May only be called by owner.\\n     * @param _forexKey Key in our forexInfo struct to use (LP to exit from).\\n     * @param _minAmountOut Min amount of ibToken expected from LP, set this to avoid \ud83e\udd6a.\\n     */\\n    function withdrawToForexMax(uint256 _forexKey, uint256 _minAmountOut)\\n        external\\n        onlyOwner\\n    {\\n        _withdrawToForex(type(uint256).max, _forexKey, _minAmountOut);\\n    }\\n\\n    function _withdrawToForex(\\n        uint256 _amountToUnstake,\\n        uint256 _forexKey,\\n        uint256 _minAmountOut\\n    ) internal {\\n        require(_minAmountOut > 0, \\\"Set _minAmountOut\\\");\\n        uint256 _stakedBal = stakedBalance(_forexKey);\\n        if (_amountToUnstake >= _stakedBal) {\\n            _amountToUnstake = _stakedBal;\\n        }\\n\\n        if (_stakedBal > 0 && _amountToUnstake > 0) {\\n            IConvex rewardsContract = IConvex(\\n                forexInfo[_forexKey].rewardsContract\\n            );\\n            rewardsContract.withdrawAndUnwrap(_amountToUnstake, claimRewards);\\n        }\\n\\n        ICurveFi curveLpToken = ICurveFi(forexInfo[_forexKey].curveLpToken);\\n        ICurveFi curvePool = ICurveFi(forexInfo[_forexKey].curvePool);\\n        uint256 toWithdraw = curveLpToken.balanceOf(address(this));\\n\\n        if (toWithdraw > 0) {\\n            // ibEUR-USDC pool has slightly different interface\\n            if (_forexKey == 4) {\\n                curvePool.remove_liquidity_one_coin(\\n                    toWithdraw,\\n                    0,\\n                    _minAmountOut,\\n                    true\\n                );\\n            } else {\\n                curvePool.remove_liquidity_one_coin(\\n                    toWithdraw,\\n                    0,\\n                    _minAmountOut\\n                );\\n            }\\n        }\\n    }\\n\\n    /* ========== IRON BANK ONLY ========== */\\n\\n    /**\\n     * @notice Manually force a harvest() call.\\n     * @dev May only be called by Iron Bank Multisig.\\n     */\\n    function forceHarvest() external onlyIronBank {\\n        _harvest();\\n    }\\n\\n    /**\\n     * @notice Manually force a withdrawToForex() call.\\n     * @dev May only be called by Iron Bank Multisig.\\n     */\\n    function forceWithdrawToForex(uint256 _forexKey, uint256 _minAmountOut)\\n        external\\n        onlyIronBank\\n    {\\n        _withdrawToForex(type(uint256).max, _forexKey, _minAmountOut);\\n    }\\n\\n    /**\\n     * @notice Manually force a repayBorrow() call.\\n     * @dev May only be called by Iron Bank Multisig.\\n     */\\n    function forceRepayBorrow(uint256 _forexKey, uint256 _amount)\\n        external\\n        onlyIronBank\\n    {\\n        _repayBorrow(_forexKey, _amount);\\n    }\\n\\n    /**\\n     * @notice Manually withdraw all assets from Convex, sell any profits, repay borrows, and/or sweep out anything else\\n     *  we want.\\n     * @dev SEND WITH FLASHBOTS. May only be called by Iron Bank Multisig. This assumes we have enough assets to fully\\n     *  repay borrow for a given market. Check canRepayBorrowStored() after calling borrowBalanceCurrent() on the\\n     *  cyToken to confirm that a borrow can be fully repaid. If for some reason we can't repay (if pools are depegged)\\n     *  then best to just withdraw and sweep out the curve LPs.\\n     * @param _keys Array of keys to exit, sell profits, and/or repay borrows.\\n     * @param _withdrawFromConvex Boolean for if we only want to withdraw from convex so we can sweep out the curve LPs.\\n     * @param _tokensToRug Addresses of any tokens to sweep out (LP tokens, CVX, CRV, etc.).\\n     */\\n    function forceCloseMax(\\n        uint256[] memory _keys,\\n        bool _withdrawFromConvex,\\n        address[] memory _tokensToRug\\n    ) external onlyIronBank {\\n        // make sure we claim our rewards\\n        claimRewards = true;\\n\\n        // unstake everything from Convex but leave as Curve LP tokens and don't repay\\n        if (_withdrawFromConvex) {\\n            for (uint256 i = 0; i < _keys.length; i++) {\\n                uint256 _forexKey = _keys[i];\\n                uint256 _stakedBal = stakedBalance(_forexKey);\\n                IConvex rewardsContract = IConvex(\\n                    forexInfo[_forexKey].rewardsContract\\n                );\\n                rewardsContract.withdrawAndUnwrap(_stakedBal, claimRewards);\\n            }\\n        } else {\\n            // withdraw everything from Convex and our LPs (single-sided), and repay outstanding borrows\\n            for (uint256 i = 0; i < _keys.length; i++) {\\n                uint256 _forexKey = _keys[i];\\n\\n                // withdraw LP position to ibToken and repay\\n                _withdrawToForex(type(uint256).max, _forexKey, 1); // can't be zero\\n                _repayBorrow(_forexKey, 0);\\n            }\\n        }\\n\\n        // sweep any tokens we want back to the Iron Bank multisig. if we want to sweep LPs, include them in our array.\\n        for (uint256 j = 0; j < _tokensToRug.length; j++) {\\n            IERC20 token = IERC20(_tokensToRug[j]);\\n            uint256 toTransfer = token.balanceOf(address(this));\\n            if (toTransfer > 0) {\\n                token.safeTransfer(ironBankMultisig, toTransfer);\\n            }\\n        }\\n    }\\n\\n    // include so our contract plays nicely with ether\\n    receive() external payable {}\\n\\n    /* ========== SETTERS ========== */\\n\\n    /**\\n     * @notice Set whether we claim assets on withdrawal (usually no).\\n     * @dev May only be called by owner.\\n     * @param _claimRewards Whether or not we claim rewards on withdrawals.\\n     */\\n    function setClaimRewards(bool _claimRewards) external onlyOwner {\\n        claimRewards = _claimRewards;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIronBank.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.19;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts@4.9.3/token/ERC20/IERC20.sol\\\";\\n\\ninterface IIronBank is IERC20 {\\n    // add borrow, repay, etc here\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount)\\n        external\\n        returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function creditLimits(address protocol, address market)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function borrowBalanceStored(address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICurve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.19;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts@4.9.3/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICurveFi is IERC20 {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(\\n        // EURt\\n        uint256[2] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external payable;\\n\\n    function add_liquidity(\\n        // Compound, sAave\\n        uint256[2] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool _use_underlying\\n    ) external payable returns (uint256);\\n\\n    function add_liquidity(\\n        // Iron Bank, Aave\\n        uint256[3] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool _use_underlying\\n    ) external payable returns (uint256);\\n\\n    function add_liquidity(\\n        // 3Crv Metapools\\n        address pool,\\n        uint256[4] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external;\\n\\n    function add_liquidity(\\n        // Y and yBUSD\\n        uint256[4] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool _use_underlying\\n    ) external payable returns (uint256);\\n\\n    function add_liquidity(\\n        // 3pool\\n        uint256[3] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external payable;\\n\\n    function add_liquidity(\\n        // sUSD\\n        uint256[4] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external payable;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] calldata amounts)\\n        external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        uint256 i,\\n        uint256 min_amount,\\n        bool use_eth\\n    ) external;\\n\\n    function exchange(\\n        // CRV-ETH and CVX-ETH\\n        uint256 from,\\n        uint256 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount,\\n        bool use_eth\\n    ) external;\\n\\n    function exchange(\\n        // sETH\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external payable returns (uint256);\\n\\n    function exchange_underlying(\\n        // sETH\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external payable returns (uint256);\\n\\n    function balances(uint256) external view returns (uint256);\\n\\n    function price_oracle() external view returns (uint256);\\n\\n    function get_dy(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount\\n    ) external view returns (uint256);\\n\\n    // EURt\\n    function calc_token_amount(uint256[2] calldata _amounts, bool _is_deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // 3Crv Metapools\\n    function calc_token_amount(\\n        address _pool,\\n        uint256[4] calldata _amounts,\\n        bool _is_deposit\\n    ) external view returns (uint256);\\n\\n    // sUSD, Y pool, etc\\n    function calc_token_amount(uint256[4] calldata _amounts, bool _is_deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // 3pool, Iron Bank, etc\\n    function calc_token_amount(uint256[3] calldata _amounts, bool _is_deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 amount, int128 i)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\\ninterface ICurveFiPool is IERC20 {\\n    function calc_withdraw_one_coin(uint256 amount, uint256 x)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function exchange(\\n        // 3pool, no return\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n\\n    function exchange(\\n        // IBEUR-USDC\\n        uint256 from,\\n        uint256 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount,\\n        bool use_eth\\n    ) external payable returns (uint256);\\n\\n    function balances(uint256) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConvex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.19;\\n\\ninterface IConvex {\\n    // strategy's staked balance in the synthetix staking contract\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    // read how much claimable CRV a strategy has\\n    function earned(address account) external view returns (uint256);\\n\\n    // withdraw directly to curve LP token, this is what we primarily use\\n    function withdrawAndUnwrap(uint256 _amount, bool _claim)\\n        external\\n        returns (bool);\\n\\n    // deposit into convex, receive a tokenized deposit.  parameter to stake immediately (we always do this).\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external returns (bool);\\n\\n    // give us info about a pool based on its pid\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function claimRewards(\\n        address[] calldata rewardsContracts,\\n        address[] calldata extrarewardsContracts,\\n        address[] calldata tokenrewardsContracts,\\n        address[] calldata tokenRewardTokens,\\n        uint256 depositCrvMaxAmount,\\n        uint256 minAmountOut,\\n        uint256 depositCvxMaxAmount,\\n        uint256 spendCvxAmount,\\n        uint256 options\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IChainlink.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.19;\\n\\ninterface IChainlink {\\n    function latestAnswer(address base, address quote)\\n        external\\n        view\\n        returns (uint256 answer);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9.3/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9.3/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9.3/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9.3/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9.3/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9.3/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9.3/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_names\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_underlyingTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_synths\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_cyTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_curveLpTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_curvePools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_rewardsContracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_chainlinkUint\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_currencyKeys\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"V1_BORROWER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apiVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_forexKey\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_forexKey\",\"type\":\"uint256\"}],\"name\":\"borrowedValueInUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowedValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_forexKey\",\"type\":\"uint256\"}],\"name\":\"canRepayBorrowStored\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_forexKey\",\"type\":\"uint256\"}],\"name\":\"claimableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_forexKey\",\"type\":\"uint256\"}],\"name\":\"claimableProfitInUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_forexKey\",\"type\":\"uint256\"}],\"name\":\"creditLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_forexKey\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_forexAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_keys\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_withdrawFromConvex\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_tokensToRug\",\"type\":\"address[]\"}],\"name\":\"forceCloseMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_forexKey\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"forceRepayBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_forexKey\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"forceWithdrawToForex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_forexKey\",\"type\":\"uint256\"}],\"name\":\"forceWithdrawValueInUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetsValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"forexInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"synth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curveLpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curvePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardsContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountStored\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainlinkUint\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAndSweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_forexKey\",\"type\":\"uint256\"}],\"name\":\"holdingsValueInUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetsValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ironBankMultisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_forexKey\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_claimRewards\",\"type\":\"bool\"}],\"name\":\"setClaimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_forexKey\",\"type\":\"uint256\"}],\"name\":\"stakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_forexKey\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToRepayBorrowV1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTransferred\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_forexKey\",\"type\":\"uint256\"}],\"name\":\"usdcPerForex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToUnstake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_forexKey\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"withdrawToForex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_forexKey\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"withdrawToForexMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "IBFFBorrowerCurveLPv2", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArgumentsa000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000000056962455552000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000569624b52570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005696243484600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000056962474250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a69624555522d5553444300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000569624a5059000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000569624155440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000002f000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000002b0000000000000000000000000000000000000000000000000000000000000056000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000700000000000000000000000096e61422b6a9ba0e068b6c5add4ffabc6a4aae2700000000000000000000000095dfdc8161832e4ff7816ac4b6367ce2015382530000000000000000000000001cc481ce2bd2ec7bf67d1be64d4878b16078f30900000000000000000000000069681f8fde45345c3870bcd5eaf4a05a60e7d22700000000000000000000000096e61422b6a9ba0e068b6c5add4ffabc6a4aae270000000000000000000000005555f75e3d5278082200fb451d1b6ba946d8e13b000000000000000000000000fafdf0c4c1cb09d430bf88c75d88bb46dae099670000000000000000000000000000000000000000000000000000000000000007000000000000000000000000d71ecff9342a5ced620049e616c5035f1db98620000000000000000000000000269895a3df4d73b077fc823dd6da1b95f72aaf9b0000000000000000000000000f83287ff768d1c1e17a42f44d644d7f22e8ee1d00000000000000000000000097fe22e7341a0cd8db6f6c021a24dc8f4dad855f000000000000000000000000d71ecff9342a5ced620049e616c5035f1db98620000000000000000000000000f6b1c627e95bfc3c1b4c9b825a032ff0fbf3e07d000000000000000000000000f48e200eaf9906362bb1442fca31e0835773b8b4000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000e5c0774a5f065c285068170b20393925c84bf30000000000000000000000003c9f5385c288ce438ed55620938a4b967c0801010000000000000000000000001b3e95e8ecf7a7cab6c4de1b344f94865abd12d5000000000000000000000000ecab2c76f1a8359a06fab5fa0ceea51280a97ecf00000000000000000000000000e5c0774a5f065c285068170b20393925c84bf3000000000000000000000000215f34af6557a6598dbda9aa11cc556f5ae264b100000000000000000000000086bbd9ac8b9b44c95ffc6baae58e25033b7548aa000000000000000000000000000000000000000000000000000000000000000700000000000000000000000019b080fe1ffa0553469d20ca36219f17fcf038590000000000000000000000008461a004b50d321cb22b7d034969ce68039118990000000000000000000000009c2c8910f113181783c249d8f6aa41b51cde0f0c000000000000000000000000d6ac1cb9019137a896343da59dde6d097f7105380000000000000000000000008682fbf0cbf312c891532ba9f1a91e44f81ad7df0000000000000000000000008818a9bb44fbf33502be7c15c500d0c783b730670000000000000000000000003f1b0278a9ee595635b61817630cc19de792f506000000000000000000000000000000000000000000000000000000000000000700000000000000000000000019b080fe1ffa0553469d20ca36219f17fcf038590000000000000000000000008461a004b50d321cb22b7d034969ce68039118990000000000000000000000009c2c8910f113181783c249d8f6aa41b51cde0f0c000000000000000000000000d6ac1cb9019137a896343da59dde6d097f7105380000000000000000000000001570af3df649fc74872c5b8f280a162a3bdd4eb60000000000000000000000008818a9bb44fbf33502be7c15c500d0c783b730670000000000000000000000003f1b0278a9ee595635b61817630cc19de792f5060000000000000000000000000000000000000000000000000000000000000007000000000000000000000000cd0559adb6faa2fc83ab21cf4497c3b9b45bb29f0000000000000000000000008f18c0af0d7d511e8bdc6b3c64926b04edfe4892000000000000000000000000a5a5905efc55b05059ee247d5cac6dd6791cfc3300000000000000000000000051a16da36c79e28dd3c8c0c19214d8af413984aa000000000000000000000000aab7202d93b5633eb7fb3b80873c817b240f6f44000000000000000000000000ba8fe590498ed24d330bb925e69913b1ac35a81e000000000000000000000000b1fae59f23cace4949ae734e63e42168adb0ccb3000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000003d2000000000000000000000000000000000000000000000000000000000000019a00000000000000000000000000000000000000000000000000000000000002f4000000000000000000000000000000000000000000000000000000000000033a00000000000000000000000000000000000000000000000000000000000003d20000000000000000000000000000000000000000000000000000000000000188000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000077345555200000000000000000000000000000000000000000000000000000000734b525700000000000000000000000000000000000000000000000000000000734348460000000000000000000000000000000000000000000000000000000073474250000000000000000000000000000000000000000000000000000000007345555200000000000000000000000000000000000000000000000000000000734a5059000000000000000000000000000000000000000000000000000000007341554400000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f15251ef8e472e36fff59739835bf9d29c45c32da298e18b64ca94ec60c7bf87"}