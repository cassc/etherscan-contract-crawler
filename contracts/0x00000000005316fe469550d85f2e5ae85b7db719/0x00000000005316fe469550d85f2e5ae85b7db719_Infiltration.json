{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Infiltration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IInfiltration} from \\\"./interfaces/IInfiltration.sol\\\";\\n\\nimport {OwnableTwoSteps} from \\\"@looksrare/contracts-libs/contracts/OwnableTwoSteps.sol\\\";\\nimport {IERC20} from \\\"@looksrare/contracts-libs/contracts/interfaces/generic/IERC20.sol\\\";\\n\\nimport {ProtocolFee} from \\\"@looksrare/contracts-libs/contracts/ProtocolFee.sol\\\";\\nimport {PackableReentrancyGuard} from \\\"@looksrare/contracts-libs/contracts/PackableReentrancyGuard.sol\\\";\\nimport {LowLevelERC20Transfer} from \\\"@looksrare/contracts-libs/contracts/lowLevelCallers/LowLevelERC20Transfer.sol\\\";\\nimport {LowLevelWETH} from \\\"@looksrare/contracts-libs/contracts/lowLevelCallers/LowLevelWETH.sol\\\";\\nimport {ITransferManager} from \\\"@looksrare/contracts-transfer-manager/contracts/interfaces/ITransferManager.sol\\\";\\n\\nimport {VRFCoordinatorV2Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport {VRFConsumerBaseV2} from \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\n\\nimport {UnsafeMathUint256} from \\\"./libraries/UnsafeMathUint256.sol\\\";\\n\\n//                                            .:^^^^^^:::::::::::::::::::::::::::::::::::::::::::::.\\n//                                          :~7777!!!77?JJ??????!?YYYYYYYYJ?7~~!!!!!!!!!7???7~~~!~~^:.\\n//                                        :~!!!~~77JYYYJJYJJJJJ7J5PPPPP55?!!!!!!!7!!~~~~~~!77??7?!7!!~^.\\n//                                      .^~!!!7JYYYYYYJJJJJJJJJ7Y5PPPY?!!!!!!~~~~~~!7!!~~~~~~!????J??7!!^.\\n//                                   .:^!!?JYYYYYYYYJJJJJJJYJJ!J55YJ?!!!!!~~~~~~~~~~~!!7!!!!!7!!!!!77?JJ?!~:.\\n//                                 .:^~?YYYYYYYYYJJJJJJJJJJJJ??YYJ?!!!77!!!!!!!!!!!!!!~~!!!77!!!!!!!!!!!7?J7~:.\\n//                               .^~~!~JYYYYYYYYYJJJJJJJJ???~^??7^.........:::::::^^^^!!!!!77!!!!!!!!!!~~!!7?7!^.\\n//                             :^!!!!!~~JYYYYYYJJJJJJJ7!~^:::!????~....    ...:::::::::::^^~77!!!!!!!!!~~~!!!77!!^.\\n//                           :~77~!7!!~!JYJJJJJJJJJ!^^^^^^^:^JJ???7!^^::::::::..::::::::::::.:~!!!!!~7?!~~~~!!!!~~!^.\\n//                         :!?7!!!77!~~JJJJJJJJ?!^^^^^^^^^::J???5PPG##GPPP5555?77!::::::::.....::^!!!J5Y?!~~~~!77~~~!~:\\n//                      .:7J?!~!77!~~~!JJJJJ?~^^^^^^^^^^^::~?5##&@@@@@&BGBGPPPP555YJ!^::......:::...^?55YJ?!~~!!!!~~!!!~:\\n//                    .^7J?7!!!!!!~~~~JJJJ7~^^^^^^^^^^^^:^J##@@@@@@@@@@@&#GGPPP555PPP55?:...::::::.. :!?JJJJ7!~~!77!~!!~!~:.\\n//                  .:!?77!!!!!!~~~~~7JJ7~^^^^^^^^^^^^::~J#@@@@@@@@@@@@@@@#BGP55PPPPPGGGJ^......:::. ^~:^7???7!!!!!!~~!!!~!~:.\\n//                .:!7!~~!!!!!!!~~~~!J7~^^^^^^^^^^^^^::7PB&@@@@@@@@&&B55555YGGPPPPPPGGBBBG7......:::..:^::^!7777!!!!!~~!!!!~!~^.\\n//              .:^~!?J!~!7!!!!!~~~!~~^^~^^^^^:::::::.7PGB&&&&@@@&G?~~~!!!!~~~75GBBBBBBBB#B?  ......   .... :~!7!!!!~~!!!!!7!~7?~.\\n//            .:^~!?5PPJ!~!!!!!~!!^::!~!!!^:....... .^JPB&&&&&&&G?~~!!7?JJ7!~^:^!5###&#####P~       :^^:      .^!!~~!7777!!!!~7Y5J!.\\n//          .:^~!JY5PPPPY!~~~~!!^.   .:^!!^.       ::YBB####&&&P~^~!~~~^^^^:::::.^P&&&&&#&&&5    .:!????7!^::.  .^!!77777777!~!J5PPY!:\\n//        .:~~~?Y5555PP5Y?~~!!^.        .^:..^^^!77?!5BB######B~:^^^::::::::......^#&&&&&&&&5  .:!???????????7!!^::~7?7?77777777?Y555J~.\\n//       .:^~!!7?J??????7!!!7~.       .......:^77?JJ!5BBBBBBB#B^:::::....::::::::.~&@@@@&&&&5...^^^^^^^^^^^~^^^^^^:.~7!!~~~~~!!!!!77?7~:.\\n//         .:^~!~!77!!!!!~~~!!!^:..... .::~~:....:^^:?GBBBGPPP5~.....:::::::::::.:7&&&&&&&&&P:::^:^^^^^:. .:.    .^~~~~~~~~~~~~~!77!~:.\\n//           .:^~!!!77!!!~~~~~~!!^.   .::!77~^:......!Y555555555!:..::::::::::..:?#&&&&&&@@&5!7???????!. :~:.. .^!!~~~~~~~~~~~!!7!~:.\\n//            ..:^~!!7?!!~~~~~~~~!!~:.:^!7!^.:^: .....755PPPPPPGG57:..::::::..:7P#&&&&&&@@@P!7????JJJ!. :^::.:~!!~~~~~~~~!!!!!7!~:..\\n//           .....:^~!!77!~~~~~~~!!!!!^!7!:....^^  .. :?PPGGGGGBBBBPYJ^^^^^^JYG####&&&#&@@G?7????JJJ~. :^:.:!777!!!!!!!!!!!!7!~:.....\\n//         .........:^~!!77!~~~~~~!??JY?!:...  .^^  .. :?PGBBBB####&@&######&&&#######&&#P?7????JJ7~. :^:^!?77777777777!!!7!^:.........\\n//        ..........:::^~!!77!!~~~~!JJ5J7!:.    .^^. ....~PBB#####&&@@@@@@@@&&########&#J77????J?7:  :^^!?77777777??7!!!7!^:::...........\\n//      ..........:::::::^~~!7?7~~~~~7JY7!~~^.   .^^. .   ^7?G###&&&@@@@@@@@&&######GJY?77????J?7:  :!!!J?777777??7!!!!~^:::::::..........\\n//    ..........::::::::^^^^~~?J7!~~~~~??7^757^^. .^^.       :7?PBB#&&&&&&&&&&#BBP?7^!777????J?7..~~?5?!????????7!!!!~^^^^::::::::..........\\n//   ..........:::::::^^^^^^^^^!???!~~~~!?77J?:~~^^:^:  .       .::!JJJJJJJJJJ!^^^:..777??????!~^7J!JY77JJJJ??7!!!!~^^^^^^^^:::::::..........\\n//  .........:::::::^^^^^^~~~~^^^!7J?!!~~~77!^:~~!~~~~:...    .  .. .::::::::::::::.^777?77??7~~7J5!!7?JJJJ?7!!!!~^^~~~~^^^^^^:::::::.........\\n// .........:::::::^^^^^~~~~~~!~~^^!JJ?7!~!!!~^^^~~~~!??!^~^.... .. .:::::::::::::::77???Y5Y7~~?Y5YJJJJJJ??7~!!~~~!!~~~~~~^^^^^:::::::.........\\n// ........::::::^^^^^^~~~~~!!!!!!!~~!??77!!!~~~~:^~~~!?J???7777~^~^~~~~!!~~~~~~~!7JYYP5PG57^!?Y55YYYJJJJ7!!!~~!!!!!!!~~~~~^^^^^^::::::........\\n// ......:::::::^^^^^~~~~~~!!!!!7777!~~!??7777!~!~^^~!^!??J??????????555PP5555555J?55P5PP57^!?Y55P5YYYJ?!!!~~!7777!!!!!~~~~~~^^^^^:::::::......\\n// .....:::::::^^^^^~~~~~!!!!!!77777??7~~!???7?777!^~!!7???77???????JY55GG555555Y??5555PY?77JY55PPP5Y?!!!~!7??777777!!!!!~~~~~^^^^^^::::::.....\\n// ....::::::^^^^^^~~~~~!!!!!77777??????!^^!?YY??!!!^~!777!^!??7!!!!!7Y5PP5YYYYJ7~Y5P55?7?JJY5555PPY7!!^^!??????77777!!!!!~~~~~^^^^^^::::::....\\n// ...::::::^^^^^~~~~~!!!!!!77777??77!~~~~^:~7JP5J7^~~!!!7!7??!7777?JJ5YYYYPPP5J77555PJ77?JY555PP5J?7~^^~~~~!77??77777!!!!!!~~~~~^^^^^::::::...\\n// ..::::::^^^^^~~~~~!!!!!777777!!~~~~~!!!!!~^~?5PY7~~!77!!?7!!7????JJ55555555Y?7JP5YJ?7JJY55555Y?7~^~!!!!!~~~~~!!777777!!!!!~~~~~^^^^^::::::..\\n// ..::::::^^^^~~~~~!!!!!77!!~~~~~~~~7?JJJ?77!^:~?Y5Y!~!7!^7J7~~!7777?YYYYYYYYJ7?55J7JJ7J55555Y?!^:^!77?JJJ?7~~~~~~~~!!77!!!!!~~~~~^^^^^:::::..\\n// .::::::^^^^^~~~~!!!!!!!^^^^^^~!!7777JJY?77!!~^.^7YY?~^!!^?J7~^^!77?YYYYYYYY7~75Y7JJ?JY555Y?!^:^~!!77?YJJ7777!!~^^^^^^!!!!!!!~~~~^^^^^::::::.\\n// ::::::^^^^^~~~~~!!!!7!:!!^:^~~!!!7!777?JJ?77!~.::^7JJ7^^~~~????77?Y5PP5P55Y7?5Y?J???Y55Y?!^:::~!77?JJ?777!7!!!~~^:^!!^!7!!!!~~~~~^^^^^::::::\\n// :::::^^^^^~~~~~!!!!77!:J?!^^^~~~!!!!!777??777~.^^::^7YJ!^^!!77!!7JJY555555J7!!77J??JYY?!^::^^:!777??777!!!!!~~~^^^!?J^!77!!!!~~~~~^^^^^:::::\\n// :::::^^^^^~~~~!!!!!777~^!???7~^~~~!!!!!777777!.^~~~^^~?J!~^~~~!7??JJ55555Y?77!!???J?~^^:^~~~^:!777777!!!!!~~~^~7???!^~777!!!!!~~~~^^^^^:::::\\n// ::::^^^^^~~~~~!!!!77777~^^~!??7~^~~~~~!!!!!777!.^!!~!!^^!?7!77!~!?JJ5555YJ7~^7JJJ!~:.:!!~!!^:!777!!!!!~~~~~^~7??!~^^~77777!!!!~~~~~^^^^^::::\\n// ::::^^^^^~~~~!!!!!7777??7!^^^!??7~^~~~~~~!!!!!!.^~!!7??^.^!????????YPPPPJ~^~7JJ?!^:.^??7!!~^:!!!!!!~~~~~~^~7??!^^^!7??7777!!!!!~~~~^^^^^::::\\n// ::::^^^^~~~~~!!!!77777777??~^^^~7?7~^~^~~~~!~!~.:!!7!75J::::!7????7?PPP5!^~7777~::::J57!7!!^:!!~!~~~~^~^~7?7~^^^~??77777777!!!!~~~~~^^^^::::\\n// :::^^^^^~~~~!!!!!~~~^:::^^~7^:^^^~7?7!^^^^~~~~~..!!!77?5J:^^::~7?J?7JPPJ:~77!^::^^:J5?77!!!..~~~~~^^^^!7?7~^^^^~7~^^:::^~~~!!!!!~~~~^^^^^:::\\n// ::::^^^^~~~~!!!~^^^^~^^^^:.::::^~^:~7??!^::^^^: :~!!!77?5J:^~~::~?JJ?P5~!??~::~~^:J5?77!!!~: :^^^::^!??7~:^~^::::.:^^^^~^^^^~!!!~~~~^^^^::::\\n// ::::::^^~~~~!!~^^^~~~~^^^^:.::::^~^::~7??!^::::.::!7!!!7?5J^^~!!~^~?YPP?7~^~!!~^^J5?7!!!7!::.::::^!??7~::^~^::::.:^^^^~~~~^^^~!!~~~~^^::::::\\n// ^^^^~~^^^^~~!~:^^~~!~~~^^^^:.::^~~^^:::^!??!:~!~::^!!!!!7?5J^^~!77~^~??~^~77!~^^J5?7!!!!!^::~!~:!??!^:::^^~~^::.:^^^^~~~!~~^^:~!~~^^^^~~^^^^\\n// ^^^~~^:^^^^^~:^^~~!!!!!!!~~~^::~^^^^^^:::!J?!^!7!^::~!!!!7?5Y!^~!!7!~^^~!7!!~^!Y5?7!!!!~::^!7!^!?J!:::^^^^^^~::^~~~!!!!!!!~~^^:~^^^^::^~~^^^\\n// !!~!7^.::^^::.^~~!!!!!77?JJJJ?!~^::^^^^^^~7?~:!!77!^^~~!!!7?J5Y7~^^~!~~!~^^~7Y5J?7!!!~~^^!77!!:~?7~^^^^^^::^~!?JJJJ?77!!!!!~~^.::^^::.^7!~!!\\n// 777J?:.:^^^...:^~!!!7Y??7?777???!.:^~^^^~!~~!!!!!!7?7~^^^~~!77?JJ??~~~~~~??JJ?77!~~^^^~7?7!!!!!!~~!~^^^~^:.!??7777?7??Y7!!!~^:...^^^:.:?J777\\n// !!7Y?::!77~:^^:.:^~7J??!!!7^~!!77~.:~7~~~~^^?J?!^^~~!7??!~^^^~~!!7????????7!!~~^^^~!??7!~~^^!?J?^^~~~~7~:.~777~^~~7!!??J7~^:.:^^:~77!::?Y7!!\\n// !!7Y?::!!~:~?7~^:::^~~7!!7!^~~~7!!~.:~!!~~~^^^~: .:^^^^~~!7!~~~^:^^^^^^^^^^:^~~~!7!~~^^^^:. :~^^^~~~!!~:.~!!7!^~!~~7!7~~^:::^~7?~:~!!::?Y7!!\\n// ?77?Y7^:^:~!??J?7!^::^~!!!~~~~!!!!~^.:^7?!~~^^^^::.:^^~!!~~~~~~^^^^^^^^^^^^^^~~~~~~!!~^^:.::^^^^~~!?7^:.^~!!!!~~~~!!!~^::^!7?J??!~:^:^7Y?77?\\n// ??!7YJ^.:^!7???YYJ?7~~^^~~7!!!~~~~~~^::^~7??777!~!^^^^:::^~~~!!!!!!!!!!!!!!!!!!~~~^:::^^^^!~!777??7~^::^~~~~~~!!!7~~^^~~7?JYY???7!^:.^JY7!??\\n// ??77YJ~.^~!77?JJJYYYYJ7!^^^~!777!!~~~~^::^^~!77????77?7!!~~~~^::::::::::::::::^~~~~!!7?77????77!~^^::^~~~~!!777!~^^^!7JYYYYJJJ?77!~^.~JY77??\\n// J??77YJ~.^!!!JJ??777??YYJJ7!~^^~!77!~~~~~~~^^^^^~~!7777??????777777777777777777??????7777!~~^^^^^~~~~~~~!77!~^^~!7JJYY??777??JJ!!!^.~JY77??J\\n// YY?77JY!:^!!!YJ?7!!!~~!!??JYJJ7!~^~~!!!~!!!!7777~~~~^^^~~~~~!777777777777777777!~~~~~^^^~~~~7777!!!!~!!!~~^~!7JJYJ??!!~~!!!7?JY!!!^:!YJ77?YY\\n// YYJ?77JY!:~!!?Y?7!!!~~~~~~!!7?JYJ?7~^^~~!!!!7????????777777~~~~~~~~~~~~~~~~~~~~~~777777????????7!!!!~~^^~7?JYJ?7!!~~~~~~!!!7?Y?!!~:!YJ77?JYY\\n// YJYJJ?7?J?^:!!?J?!!!~~~~~~~~~~~!7JJYY?~^^~!!77!7777?????????JJJJJJJJJJJJJJJJJJJJ?????????7777!77!!~^^~?YYJJ7!~~~~~~~~~~~!!!?J?!!:^?J?7?JJYJY\\ncontract Infiltration is\\n    IInfiltration,\\n    OwnableTwoSteps,\\n    ERC721A,\\n    VRFConsumerBaseV2,\\n    LowLevelERC20Transfer,\\n    LowLevelWETH,\\n    ProtocolFee,\\n    PackableReentrancyGuard\\n{\\n    using UnsafeMathUint256 for uint256;\\n\\n    /**\\n     * @notice When the frontrun lock is unlocked, agents can escape or heal.\\n     */\\n    uint8 private constant FRONTRUN_LOCK__UNLOCKED = 1;\\n\\n    /**\\n     * @notice When the frontrun lock is locked, agents cannot escape or heal.\\n     */\\n    uint8 private constant FRONTRUN_LOCK__LOCKED = 2;\\n\\n    /**\\n     * @notice When VRF is being requested, agents cannot escape or heal. It unlocks when the randomness is fulfilled.\\n     * @dev frontrunLock is initially set as locked so that agents cannot escape or heal before the game starts.\\n     *      It is unlocked when the first round's randomness is fulfilled.\\n     */\\n    uint8 private frontrunLock = FRONTRUN_LOCK__LOCKED;\\n\\n    /**\\n     * @notice 100% in basis points.\\n     */\\n    uint256 private constant ONE_HUNDRED_PERCENT_IN_BASIS_POINTS = 10_000;\\n\\n    /**\\n     * @notice 100% in basis points squared.\\n     */\\n    uint256 private constant ONE_HUNDRED_PERCENT_IN_BASIS_POINTS_SQUARED = 10_000 ** 2;\\n\\n    /**\\n     * @notice The number of secondary prize pool winners. Their entitled shares are based on their placements.\\n     *         When the number of active agents is less than or equal to this number, 1 agent is instantly killed\\n     *         in each round.\\n     */\\n    uint256 private constant NUMBER_OF_SECONDARY_PRIZE_POOL_WINNERS = 50;\\n\\n    uint256 private constant PROBABILITY_PRECISION = 100_000_000;\\n\\n    /**\\n     * @notice Max agent supply.\\n     */\\n    uint256 public immutable MAX_SUPPLY;\\n\\n    /**\\n     * @notice Max mint per address.\\n     */\\n    uint256 public immutable MAX_MINT_PER_ADDRESS;\\n\\n    /**\\n     * @notice The price of minting 1 agent.\\n     */\\n    uint256 public immutable PRICE;\\n\\n    /**\\n     * @notice The number of blocks per round.\\n     */\\n    uint256 public immutable BLOCKS_PER_ROUND;\\n\\n    /**\\n     * @notice The percentage of agents to wound per round in basis points.\\n     */\\n    uint256 public immutable AGENTS_TO_WOUND_PER_ROUND_IN_BASIS_POINTS;\\n\\n    /**\\n     * @notice The number of rounds for agents to be wounded before getting killed.\\n     */\\n    uint256 public immutable ROUNDS_TO_BE_WOUNDED_BEFORE_DEAD;\\n\\n    /**\\n     * @notice This value is used as the denominator in healProbability.\\n     */\\n    uint256 private immutable ROUNDS_TO_BE_WOUNDED_BEFORE_DEAD_MINUS_ONE;\\n\\n    /**\\n     * @notice This value is used as the minuend in healProbability.\\n     */\\n    uint256 private immutable HEAL_PROBABILITY_MINUEND;\\n\\n    /**\\n     * @notice The base cost of healing an agent. The cost increases for each successful heal.\\n     */\\n    uint256 public immutable HEAL_BASE_COST;\\n\\n    /**\\n     * @notice WETH address.\\n     */\\n    address private immutable WETH;\\n\\n    /**\\n     * @notice LOOKS address.\\n     */\\n    address private immutable LOOKS;\\n\\n    /**\\n     * @notice Chainlink VRF key hash.\\n     */\\n\\n    bytes32 private immutable KEY_HASH;\\n\\n    /**\\n     * @notice Chainlink VRF coordinator.\\n     */\\n    VRFCoordinatorV2Interface private immutable VRF_COORDINATOR;\\n\\n    /**\\n     * @notice Chainlink VRF subscription ID.\\n     */\\n    uint64 private immutable SUBSCRIPTION_ID;\\n\\n    /**\\n     * @notice The transfer manager contract that manages LOOKS approvals.\\n     */\\n    ITransferManager private immutable TRANSFER_MANAGER;\\n\\n    /**\\n     * @notice The timestamp at which the mint period starts.\\n     */\\n    uint40 public mintStart;\\n\\n    /**\\n     * @notice The timestamp at which the mint period ends.\\n     */\\n    uint40 public mintEnd;\\n\\n    /**\\n     * @notice The bitmap of the placements of the secondary prize pool winners.\\n     * @dev Only bit 1 to 50 are used. Bit 0 is not used.\\n     */\\n    uint56 private prizesClaimedBitmap;\\n\\n    /**\\n     * @notice The base URI of the collection.\\n     */\\n    string private baseURI;\\n\\n    /**\\n     * @notice Amount of agents minted per address.\\n     */\\n    mapping(address minter => uint256 amount) public amountMintedPerAddress;\\n\\n    /**\\n     * @notice Chainlink randomness requests.\\n     */\\n    mapping(uint256 requestId => RandomnessRequest) public randomnessRequests;\\n\\n    /**\\n     * @notice The mapping agents acts as an \\\"array\\\". In the beginning of the game, the \\\"length\\\" of the \\\"array\\\"\\n     *         is the total supply. As the game progresses, the \\\"length\\\" of the \\\"array\\\" decreases\\n     *         as agents are killed. The function agentsAlive() returns the \\\"length\\\" of the \\\"array\\\".\\n     *\\n     *         When an Agent struct has 0 value for every field with its index within the total supply,\\n     *         it means that the agent is active.\\n     *\\n     *         Index 0 is not used as agent ID starts from 1.\\n     */\\n    mapping(uint256 index => Agent) private agents;\\n\\n    /**\\n     * @notice It is used to find the index of an agent in the agents mapping given its agent ID.\\n     *         If the index is 0, it means the agent's index is the same as its agent ID as no swaps\\n     *         have been made.\\n     */\\n    mapping(uint256 agentId => uint256 index) private agentIdToIndex;\\n\\n    /**\\n     * @notice The maximum healing or wounded agents allowed per round.\\n     */\\n    uint256 private constant MAXIMUM_HEALING_OR_WOUNDED_AGENTS_PER_ROUND = 30;\\n\\n    /**\\n     * @notice The maximum healing or wounded agents allowed per round + 1 for storing the array length.\\n     */\\n    uint256 private constant MAXIMUM_HEALING_OR_WOUNDED_AGENTS_PER_ROUND_AND_LENGTH = 31;\\n\\n    /**\\n     * @notice The first element of the array is the length of the array.\\n     */\\n    mapping(uint256 roundId => uint16[MAXIMUM_HEALING_OR_WOUNDED_AGENTS_PER_ROUND_AND_LENGTH] agentIds)\\n        private woundedAgentIdsPerRound;\\n\\n    /**\\n     * @notice The first element of the array is the length of the array.\\n     */\\n    mapping(uint256 roundId => uint16[MAXIMUM_HEALING_OR_WOUNDED_AGENTS_PER_ROUND_AND_LENGTH] agentIds)\\n        private healingAgentIdsPerRound;\\n\\n    /**\\n     * @notice Game information.\\n     */\\n    GameInfo public gameInfo;\\n\\n    /**\\n     * @dev Agent struct status offset for bitwise operations.\\n     */\\n    uint256 private constant AGENT__STATUS_OFFSET = 16;\\n\\n    /**\\n     * @dev Agent struct wounded at offset for bitwise operations.\\n     */\\n    uint256 private constant AGENT__WOUNDED_AT_OFFSET = 24;\\n\\n    /**\\n     * @dev Agent struct heal count offset for bitwise operations.\\n     */\\n    uint256 private constant AGENT__HEAL_COUNT_OFFSET = 64;\\n\\n    /**\\n     * @dev GameInfo struct wounded agents offset for bitwise operations.\\n     */\\n    uint256 private constant GAME_INFO__WOUNDED_AGENTS_OFFSET = 16;\\n\\n    /**\\n     * @dev GameInfo struct healing agents offset for bitwise operations.\\n     */\\n    uint256 private constant GAME_INFO__HEALING_AGENTS_OFFSET = 32;\\n\\n    /**\\n     * @dev GameInfo struct dead agents offset for bitwise operations.\\n     */\\n    uint256 private constant GAME_INFO__DEAD_AGENTS_OFFSET = 48;\\n\\n    /**\\n     * @dev GameInfo struct escaped agents offset for bitwise operations.\\n     */\\n    uint256 private constant GAME_INFO__ESCAPED_AGENTS_OFFSET = 64;\\n\\n    /**\\n     * @dev GameInfo struct current round ID offset for bitwise operations.\\n     */\\n    uint256 private constant GAME_INFO__CURRENT_ROUND_ID_OFFSET = 80;\\n\\n    /**\\n     * @dev GameInfo struct current round block number offset for bitwise operations.\\n     */\\n    uint256 private constant GAME_INFO__CURRENT_ROUND_BLOCK_NUMBER_OFFSET = 120;\\n\\n    /**\\n     * @dev RandomnessRequest struct exists offset for bitwise operations.\\n     */\\n    uint256 private constant RANDOMNESS_REQUESTS__EXISTS_OFFSET = 8;\\n\\n    /**\\n     * @dev 2 bytes bitmask.\\n     */\\n    uint256 private constant TWO_BYTES_BITMASK = 0xffff;\\n\\n    /**\\n     * @dev 5 bytes bitmask.\\n     */\\n    uint256 private constant FIVE_BYTES_BITMASK = 0xffffffffff;\\n\\n    /**\\n     * @param constructorCalldata Constructor calldata. See IInfiltration.ConstructorCalldata for its key values.\\n     */\\n    constructor(\\n        ConstructorCalldata memory constructorCalldata\\n    )\\n        OwnableTwoSteps(constructorCalldata.owner)\\n        ERC721A(constructorCalldata.name, constructorCalldata.symbol)\\n        VRFConsumerBaseV2(constructorCalldata.vrfCoordinator)\\n    {\\n        if (\\n            constructorCalldata.maxSupply <= NUMBER_OF_SECONDARY_PRIZE_POOL_WINNERS ||\\n            constructorCalldata.maxSupply > type(uint16).max\\n        ) {\\n            revert InvalidMaxSupply();\\n        }\\n\\n        if (\\n            (constructorCalldata.maxSupply * constructorCalldata.agentsToWoundPerRoundInBasisPoints) >\\n            MAXIMUM_HEALING_OR_WOUNDED_AGENTS_PER_ROUND * ONE_HUNDRED_PERCENT_IN_BASIS_POINTS\\n        ) {\\n            revert WoundedAgentIdsPerRoundExceeded();\\n        }\\n\\n        if (constructorCalldata.roundsToBeWoundedBeforeDead < 3) {\\n            revert RoundsToBeWoundedBeforeDeadTooLow();\\n        }\\n\\n        PRICE = constructorCalldata.price;\\n        MAX_SUPPLY = constructorCalldata.maxSupply;\\n        MAX_MINT_PER_ADDRESS = constructorCalldata.maxMintPerAddress;\\n        BLOCKS_PER_ROUND = constructorCalldata.blocksPerRound;\\n        AGENTS_TO_WOUND_PER_ROUND_IN_BASIS_POINTS = constructorCalldata.agentsToWoundPerRoundInBasisPoints;\\n        ROUNDS_TO_BE_WOUNDED_BEFORE_DEAD = constructorCalldata.roundsToBeWoundedBeforeDead;\\n\\n        // The next 2 values are used in healProbability\\n        ROUNDS_TO_BE_WOUNDED_BEFORE_DEAD_MINUS_ONE = ROUNDS_TO_BE_WOUNDED_BEFORE_DEAD.unsafeSubtract(1);\\n        HEAL_PROBABILITY_MINUEND =\\n            ((ROUNDS_TO_BE_WOUNDED_BEFORE_DEAD * 99 - 80) * PROBABILITY_PRECISION) /\\n            ROUNDS_TO_BE_WOUNDED_BEFORE_DEAD_MINUS_ONE;\\n\\n        LOOKS = constructorCalldata.looks;\\n        HEAL_BASE_COST = constructorCalldata.healBaseCost;\\n\\n        KEY_HASH = constructorCalldata.keyHash;\\n        VRF_COORDINATOR = VRFCoordinatorV2Interface(constructorCalldata.vrfCoordinator);\\n        SUBSCRIPTION_ID = constructorCalldata.subscriptionId;\\n\\n        TRANSFER_MANAGER = ITransferManager(constructorCalldata.transferManager);\\n        WETH = constructorCalldata.weth;\\n\\n        baseURI = constructorCalldata.baseURI;\\n\\n        _updateProtocolFeeRecipient(constructorCalldata.protocolFeeRecipient);\\n        _updateProtocolFeeBp(constructorCalldata.protocolFeeBp);\\n    }\\n\\n    /**\\n     * @dev updateProtocolFeeBp is not implemented in this contract.\\n     */\\n    function updateProtocolFeeBp(uint16) external pure override {\\n        revert Immutable();\\n    }\\n\\n    /**\\n     * @dev updateProtocolFeeRecipient is not implemented in this contract.\\n     */\\n    function updateProtocolFeeRecipient(address) external pure override {\\n        revert Immutable();\\n    }\\n\\n    /**\\n     * @inheritdoc IInfiltration\\n     */\\n    function setMintPeriod(uint40 newMintStart, uint40 newMintEnd) external onlyOwner {\\n        if (newMintStart >= newMintEnd) {\\n            revert InvalidMintPeriod();\\n        }\\n\\n        if (newMintStart != 0) {\\n            if (block.timestamp > newMintStart) {\\n                revert MintStartIsInThePast();\\n            }\\n\\n            uint256 currentMintStart = mintStart;\\n            if (currentMintStart != 0) {\\n                if (block.timestamp >= currentMintStart) {\\n                    revert MintAlreadyStarted();\\n                }\\n            }\\n\\n            mintStart = newMintStart;\\n        }\\n\\n        if (block.timestamp > newMintEnd || newMintEnd < mintEnd) {\\n            revert MintCanOnlyBeExtended();\\n        }\\n\\n        mintEnd = newMintEnd;\\n\\n        emit MintPeriodUpdated(newMintStart == 0 ? mintStart : newMintStart, newMintEnd);\\n    }\\n\\n    /**\\n     * @inheritdoc IInfiltration\\n     * @notice As long as the game has not started (after mint end), the owner can still mint.\\n     */\\n    function premint(address to, uint256 quantity) external payable onlyOwner {\\n        _assertExactNativeTokensSupplied(quantity);\\n        _assertTotalSupplyNotBreached(quantity);\\n        _assertGameNotYetBegun();\\n        _mintERC2309(to, quantity);\\n    }\\n\\n    /**\\n     * @inheritdoc IInfiltration\\n     */\\n    function mint(uint256 quantity) external payable nonReentrant {\\n        if (block.timestamp < mintStart || block.timestamp > mintEnd) {\\n            revert NotInMintPeriod();\\n        }\\n\\n        _assertGameNotYetBegun();\\n\\n        uint256 amountMinted = amountMintedPerAddress[msg.sender] + quantity;\\n        if (amountMinted > MAX_MINT_PER_ADDRESS) {\\n            revert TooManyMinted();\\n        }\\n\\n        _assertExactNativeTokensSupplied(quantity);\\n        _assertTotalSupplyNotBreached(quantity);\\n\\n        amountMintedPerAddress[msg.sender] = amountMinted;\\n        _mintERC2309(msg.sender, quantity);\\n    }\\n\\n    /**\\n     * @inheritdoc IInfiltration\\n     * @dev If Chainlink randomness callback does not come back after 1 day, we can call\\n     *      startNewRound to trigger a new randomness request.\\n     */\\n    function startGame() external onlyOwner {\\n        uint256 numberOfAgents = totalSupply();\\n        if (numberOfAgents < MAX_SUPPLY) {\\n            if (block.timestamp < mintEnd) {\\n                revert StillMinting();\\n            }\\n        }\\n        if (numberOfAgents < NUMBER_OF_SECONDARY_PRIZE_POOL_WINNERS) {\\n            revert NotEnoughMinted();\\n        }\\n\\n        _assertGameNotYetBegun();\\n\\n        gameInfo.currentRoundId = 1;\\n        gameInfo.activeAgents = uint16(numberOfAgents);\\n        uint256 balance = address(this).balance;\\n        uint256 protocolFee = balance.unsafeMultiply(protocolFeeBp).unsafeDivide(ONE_HUNDRED_PERCENT_IN_BASIS_POINTS);\\n        unchecked {\\n            gameInfo.prizePool = balance - protocolFee;\\n        }\\n\\n        emit RoundStarted(1);\\n\\n        _transferETHAndWrapIfFailWithGasLimit(WETH, protocolFeeRecipient, protocolFee, gasleft());\\n        _requestForRandomness();\\n    }\\n\\n    /**\\n     * @inheritdoc IInfiltration\\n     */\\n    function emergencyWithdraw() external onlyOwner {\\n        uint256 activeAgents;\\n        uint256 woundedAgents;\\n        uint256 healingAgents;\\n        uint256 escapedAgents;\\n        uint256 deadAgents;\\n        uint256 currentRoundId;\\n        uint256 currentRoundBlockNumber;\\n\\n        assembly {\\n            let gameInfoSlot0Value := sload(gameInfo.slot)\\n            activeAgents := and(gameInfoSlot0Value, TWO_BYTES_BITMASK)\\n            woundedAgents := and(shr(GAME_INFO__WOUNDED_AGENTS_OFFSET, gameInfoSlot0Value), TWO_BYTES_BITMASK)\\n            healingAgents := and(shr(GAME_INFO__HEALING_AGENTS_OFFSET, gameInfoSlot0Value), TWO_BYTES_BITMASK)\\n            escapedAgents := and(shr(GAME_INFO__ESCAPED_AGENTS_OFFSET, gameInfoSlot0Value), TWO_BYTES_BITMASK)\\n            deadAgents := and(shr(GAME_INFO__DEAD_AGENTS_OFFSET, gameInfoSlot0Value), TWO_BYTES_BITMASK)\\n            currentRoundId := and(shr(GAME_INFO__CURRENT_ROUND_ID_OFFSET, gameInfoSlot0Value), FIVE_BYTES_BITMASK)\\n            currentRoundBlockNumber := and(\\n                shr(GAME_INFO__CURRENT_ROUND_BLOCK_NUMBER_OFFSET, gameInfoSlot0Value),\\n                FIVE_BYTES_BITMASK\\n            )\\n        }\\n\\n        bool conditionOne = currentRoundId != 0 &&\\n            activeAgents + woundedAgents + healingAgents + escapedAgents + deadAgents != totalSupply();\\n\\n        // 50 blocks per round * 216 = 10,800 blocks which is roughly 36 hours\\n        // Prefer not to hard code this number as BLOCKS_PER_ROUND is not always 50\\n        bool conditionTwo = currentRoundId != 0 &&\\n            activeAgents > 1 &&\\n            block.number > currentRoundBlockNumber + BLOCKS_PER_ROUND * 216;\\n\\n        // Just in case startGame reverts, we can withdraw the ETH balance and redistribute to addresses that participated in the mint.\\n        bool conditionThree = currentRoundId == 0 && block.timestamp > uint256(mintEnd).unsafeAdd(36 hours);\\n\\n        if (conditionOne || conditionTwo || conditionThree) {\\n            uint256 ethBalance = address(this).balance;\\n            _transferETHAndWrapIfFailWithGasLimit(WETH, msg.sender, ethBalance, gasleft());\\n\\n            uint256 looksBalance = IERC20(LOOKS).balanceOf(address(this));\\n            _executeERC20DirectTransfer(LOOKS, msg.sender, looksBalance);\\n\\n            emit EmergencyWithdrawal(ethBalance, looksBalance);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IInfiltration\\n     * @dev If Chainlink randomness callback does not come back after 1 day, we can try by calling\\n     *      startNewRound again.\\n     */\\n    function startNewRound() external nonReentrant {\\n        uint256 currentRoundId = gameInfo.currentRoundId;\\n        if (currentRoundId == 0) {\\n            revert GameNotYetBegun();\\n        }\\n\\n        if (block.number < uint256(gameInfo.currentRoundBlockNumber).unsafeAdd(BLOCKS_PER_ROUND)) {\\n            revert TooEarlyToStartNewRound();\\n        }\\n\\n        if (block.timestamp < uint256(gameInfo.randomnessLastRequestedAt).unsafeAdd(1 days)) {\\n            revert TooEarlyToRetryRandomnessRequest();\\n        }\\n\\n        uint256 agentsRemaining = agentsAlive();\\n        uint256 activeAgents = gameInfo.activeAgents;\\n        if (agentsRemaining == 1) {\\n            if (activeAgents == 1) {\\n                revert GameOver();\\n            }\\n        }\\n\\n        if (activeAgents <= NUMBER_OF_SECONDARY_PRIZE_POOL_WINNERS) {\\n            uint256 woundedAgents = gameInfo.woundedAgents;\\n\\n            if (woundedAgents != 0) {\\n                uint256 killRoundId = currentRoundId > ROUNDS_TO_BE_WOUNDED_BEFORE_DEAD\\n                    ? currentRoundId.unsafeSubtract(ROUNDS_TO_BE_WOUNDED_BEFORE_DEAD)\\n                    : 1;\\n                uint256 totalDeadAgentsFromKilling;\\n                while (woundedAgentIdsPerRound[killRoundId][0] != 0) {\\n                    uint256 deadAgentsFromKilling = _killWoundedAgents({\\n                        currentRoundId: currentRoundId,\\n                        roundId: killRoundId,\\n                        currentRoundAgentsAlive: agentsRemaining\\n                    });\\n                    unchecked {\\n                        totalDeadAgentsFromKilling += deadAgentsFromKilling;\\n                        agentsRemaining -= deadAgentsFromKilling;\\n                        ++killRoundId;\\n                    }\\n                }\\n\\n                // This is equivalent to\\n                // unchecked {\\n                //     gameInfo.deadAgents += uint16(totalDeadAgentsFromKilling);\\n                // }\\n                // gameInfo.woundedAgents = 0;\\n                assembly {\\n                    let gameInfoSlot0Value := sload(gameInfo.slot)\\n                    let deadAgents := and(shr(GAME_INFO__DEAD_AGENTS_OFFSET, gameInfoSlot0Value), TWO_BYTES_BITMASK)\\n\\n                    gameInfoSlot0Value := and(\\n                        gameInfoSlot0Value,\\n                        // This is equivalent to\\n                        // not(\\n                        //     or(\\n                        //         shl(GAME_INFO__WOUNDED_AGENTS_OFFSET, TWO_BYTES_BITMASK),\\n                        //         shl(GAME_INFO__DEAD_AGENTS_OFFSET, TWO_BYTES_BITMASK)\\n                        //     )\\n                        // )\\n                        0xffffffffffffffffffffffffffffffffffffffffffffffff0000ffff0000ffff\\n                    )\\n\\n                    gameInfoSlot0Value := or(\\n                        gameInfoSlot0Value,\\n                        shl(GAME_INFO__DEAD_AGENTS_OFFSET, add(deadAgents, totalDeadAgentsFromKilling))\\n                    )\\n\\n                    sstore(gameInfo.slot, gameInfoSlot0Value)\\n                }\\n            }\\n\\n            if (agentsRemaining > 1) {\\n                _requestForRandomness();\\n            } else {\\n                _emitWonEventIfOnlyOneAgentRemaining(agentsRemaining, activeAgents);\\n            }\\n        } else {\\n            _requestForRandomness();\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IInfiltration\\n     */\\n    function claimGrandPrize() external nonReentrant {\\n        _assertGameOver();\\n        uint256 agentId = _agentIndexToId(agents[1], 1);\\n        _assertAgentOwnership(agentId);\\n\\n        uint256 prizePool = gameInfo.prizePool;\\n\\n        if (prizePool == 0) {\\n            revert NothingToClaim();\\n        }\\n\\n        gameInfo.prizePool = 0;\\n\\n        _transferETHAndWrapIfFailWithGasLimit(WETH, msg.sender, prizePool, gasleft());\\n\\n        emit PrizeClaimed(agentId, address(0), prizePool);\\n    }\\n\\n    /**\\n     * @inheritdoc IInfiltration\\n     */\\n    function claimSecondaryPrizes(uint256 agentId) external nonReentrant {\\n        _assertGameOver();\\n        _assertAgentOwnership(agentId);\\n\\n        uint256 placement = agentIndex(agentId);\\n        _assertValidPlacement(placement);\\n\\n        uint56 _prizesClaimedBitmap = prizesClaimedBitmap;\\n        if ((_prizesClaimedBitmap >> placement) & 1 != 0) {\\n            revert NothingToClaim();\\n        }\\n\\n        prizesClaimedBitmap = _prizesClaimedBitmap | uint56(1 << placement);\\n\\n        uint256 ethAmount = secondaryPrizePoolShareAmount(gameInfo.secondaryPrizePool, placement);\\n        if (ethAmount != 0) {\\n            _transferETHAndWrapIfFailWithGasLimit(WETH, msg.sender, ethAmount, gasleft());\\n            emit PrizeClaimed(agentId, address(0), ethAmount);\\n        }\\n\\n        uint256 secondaryLooksPrizePool = gameInfo.secondaryLooksPrizePool;\\n        if (secondaryLooksPrizePool == 0) {\\n            secondaryLooksPrizePool = IERC20(LOOKS).balanceOf(address(this));\\n            if (secondaryLooksPrizePool == 0) {\\n                return;\\n            }\\n            gameInfo.secondaryLooksPrizePool = secondaryLooksPrizePool;\\n        }\\n\\n        uint256 looksAmount = secondaryPrizePoolShareAmount(secondaryLooksPrizePool, placement);\\n        if (looksAmount != 0) {\\n            _executeERC20DirectTransfer(LOOKS, msg.sender, looksAmount);\\n            emit PrizeClaimed(agentId, LOOKS, looksAmount);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IInfiltration\\n     */\\n    function escape(uint256[] calldata agentIds) external nonReentrant {\\n        _assertFrontrunLockIsOff();\\n\\n        uint256 agentIdsCount = agentIds.length;\\n        _assertNotEmptyAgentIdsArrayProvided(agentIdsCount);\\n\\n        uint256 activeAgents = gameInfo.activeAgents;\\n        uint256 activeAgentsAfterEscape = activeAgents - agentIdsCount;\\n        _assertGameIsNotOverAfterEscape(activeAgentsAfterEscape);\\n\\n        uint256 currentRoundAgentsAlive = agentsAlive();\\n\\n        uint256 prizePool = gameInfo.prizePool;\\n        uint256 secondaryPrizePool = gameInfo.secondaryPrizePool;\\n        uint256 reward;\\n        uint256[] memory rewards = new uint256[](agentIdsCount);\\n\\n        for (uint256 i; i < agentIdsCount; ) {\\n            uint256 agentId = agentIds[i];\\n            _assertAgentOwnership(agentId);\\n\\n            uint256 index = agentIndex(agentId);\\n            _assertAgentStatus(agents[index], agentId, AgentStatus.Active);\\n\\n            uint256 totalEscapeValue = prizePool / currentRoundAgentsAlive;\\n            uint256 rewardForPlayer = (totalEscapeValue * _escapeMultiplier(currentRoundAgentsAlive)) /\\n                ONE_HUNDRED_PERCENT_IN_BASIS_POINTS;\\n            rewards[i] = rewardForPlayer;\\n            reward += rewardForPlayer;\\n\\n            uint256 rewardToSecondaryPrizePool = (totalEscapeValue.unsafeSubtract(rewardForPlayer) *\\n                _escapeRewardSplitForSecondaryPrizePool(currentRoundAgentsAlive)) / ONE_HUNDRED_PERCENT_IN_BASIS_POINTS;\\n\\n            unchecked {\\n                prizePool = prizePool - rewardForPlayer - rewardToSecondaryPrizePool;\\n            }\\n            secondaryPrizePool += rewardToSecondaryPrizePool;\\n\\n            _swap({\\n                currentAgentIndex: index,\\n                lastAgentIndex: currentRoundAgentsAlive,\\n                agentId: agentId,\\n                newStatus: AgentStatus.Escaped\\n            });\\n\\n            unchecked {\\n                --currentRoundAgentsAlive;\\n                ++i;\\n            }\\n        }\\n\\n        // This is equivalent to\\n        // unchecked {\\n        //     gameInfo.activeAgents = uint16(activeAgentsAfterEscape);\\n        //     gameInfo.escapedAgents += uint16(agentIdsCount);\\n        // }\\n        assembly {\\n            let gameInfoSlot0Value := sload(gameInfo.slot)\\n            let escapedAgents := add(\\n                and(shr(GAME_INFO__ESCAPED_AGENTS_OFFSET, gameInfoSlot0Value), TWO_BYTES_BITMASK),\\n                agentIdsCount\\n            )\\n\\n            gameInfoSlot0Value := and(\\n                gameInfoSlot0Value,\\n                // This is the equivalent of not(or(TWO_BYTES_BITMASK, shl(GAME_INFO__ESCAPED_AGENTS_OFFSET, TWO_BYTES_BITMASK)))\\n                0xffffffffffffffffffffffffffffffffffffffffffff0000ffffffffffff0000\\n            )\\n            gameInfoSlot0Value := or(gameInfoSlot0Value, activeAgentsAfterEscape)\\n            gameInfoSlot0Value := or(gameInfoSlot0Value, shl(GAME_INFO__ESCAPED_AGENTS_OFFSET, escapedAgents))\\n            sstore(gameInfo.slot, gameInfoSlot0Value)\\n        }\\n\\n        gameInfo.prizePool = prizePool;\\n        gameInfo.secondaryPrizePool = secondaryPrizePool;\\n\\n        _transferETHAndWrapIfFailWithGasLimit(WETH, msg.sender, reward, gasleft());\\n        emit Escaped(gameInfo.currentRoundId, agentIds, rewards);\\n\\n        _emitWonEventIfOnlyOneAgentRemaining(currentRoundAgentsAlive, activeAgentsAfterEscape);\\n    }\\n\\n    /**\\n     * @inheritdoc IInfiltration\\n     */\\n    function heal(uint256[] calldata agentIds) external nonReentrant {\\n        _assertFrontrunLockIsOff();\\n\\n        if (gameInfo.activeAgents <= NUMBER_OF_SECONDARY_PRIZE_POOL_WINNERS) {\\n            revert HealingDisabled();\\n        }\\n\\n        uint256 agentIdsCount = agentIds.length;\\n        _assertNotEmptyAgentIdsArrayProvided(agentIdsCount);\\n\\n        uint256 currentRoundId = gameInfo.currentRoundId;\\n        uint16[MAXIMUM_HEALING_OR_WOUNDED_AGENTS_PER_ROUND_AND_LENGTH]\\n            storage healingAgentIds = healingAgentIdsPerRound[currentRoundId];\\n        uint256 currentHealingAgentIdsCount = healingAgentIds[0];\\n\\n        uint256 newHealingAgentIdsCount = currentHealingAgentIdsCount.unsafeAdd(agentIdsCount);\\n\\n        if (newHealingAgentIdsCount > MAXIMUM_HEALING_OR_WOUNDED_AGENTS_PER_ROUND) {\\n            revert MaximumHealingRequestPerRoundExceeded();\\n        }\\n\\n        uint256 cost;\\n        uint256[] memory costs = new uint256[](agentIdsCount);\\n\\n        for (uint256 i; i < agentIdsCount; ) {\\n            uint256 agentId = agentIds[i];\\n\\n            uint256 index = agentIndex(agentId);\\n            _assertAgentStatus(agents[index], agentId, AgentStatus.Wounded);\\n\\n            bytes32 agentSlot = _getAgentStorageSlot(index);\\n            uint256 agentSlotValue;\\n            uint256 woundedAt;\\n\\n            // This is equivalent to\\n            // uint256 woundedAt = agent.woundedAt;\\n            assembly {\\n                agentSlotValue := sload(agentSlot)\\n                woundedAt := and(shr(AGENT__WOUNDED_AT_OFFSET, agentSlotValue), FIVE_BYTES_BITMASK)\\n            }\\n\\n            // This is equivalent to\\n            // healCount = agent.healCount;\\n            // agent.status = AgentStatus.Healing;\\n            uint256 healCount;\\n            assembly {\\n                healCount := and(shr(AGENT__HEAL_COUNT_OFFSET, agentSlotValue), TWO_BYTES_BITMASK)\\n\\n                agentSlotValue := and(\\n                    agentSlotValue,\\n                    // This is the equivalent of not(shl(AGENT__STATUS_OFFSET, 0xff))\\n                    0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff\\n                )\\n                agentSlotValue := or(\\n                    agentSlotValue,\\n                    // AgentStatus.Healing is 2\\n                    // This is equivalent to shl(AGENT__STATUS_OFFSET, 2)\\n                    0x20000\\n                )\\n                sstore(agentSlot, agentSlotValue)\\n            }\\n\\n            costs[i] = _costToHeal(healCount);\\n            cost += costs[i];\\n\\n            unchecked {\\n                ++i;\\n                healingAgentIds[currentHealingAgentIdsCount + i] = uint16(agentId);\\n            }\\n        }\\n\\n        healingAgentIds[0] = uint16(newHealingAgentIdsCount);\\n\\n        // This is equivalent to\\n        // unchecked {\\n        //     gameInfo.healingAgents += uint16(agentIdsCount);\\n        //     gameInfo.woundedAgents -= uint16(agentIdsCount);\\n        // }\\n        assembly {\\n            let gameInfoSlot0Value := sload(gameInfo.slot)\\n            let healingAgents := add(\\n                and(shr(GAME_INFO__HEALING_AGENTS_OFFSET, gameInfoSlot0Value), TWO_BYTES_BITMASK),\\n                agentIdsCount\\n            )\\n            let woundedAgents := sub(\\n                and(shr(GAME_INFO__WOUNDED_AGENTS_OFFSET, gameInfoSlot0Value), TWO_BYTES_BITMASK),\\n                agentIdsCount\\n            )\\n\\n            gameInfoSlot0Value := and(\\n                gameInfoSlot0Value,\\n                // This is equivalent to\\n                // not(\\n                //     or(\\n                //         shl(GAME_INFO__HEALING_AGENTS_OFFSET, TWO_BYTES_BITMASK),\\n                //         shl(GAME_INFO__WOUNDED_AGENTS_OFFSET, TWO_BYTES_BITMASK)\\n                //     )\\n                // )\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffff00000000ffff\\n            )\\n            gameInfoSlot0Value := or(gameInfoSlot0Value, shl(GAME_INFO__HEALING_AGENTS_OFFSET, healingAgents))\\n            gameInfoSlot0Value := or(gameInfoSlot0Value, shl(GAME_INFO__WOUNDED_AGENTS_OFFSET, woundedAgents))\\n            sstore(gameInfo.slot, gameInfoSlot0Value)\\n        }\\n\\n        TRANSFER_MANAGER.transferERC20(LOOKS, msg.sender, address(this), cost);\\n        _executeERC20DirectTransfer(LOOKS, 0x000000000000000000000000000000000000dEaD, cost / 4);\\n\\n        emit HealRequestSubmitted(currentRoundId, agentIds, costs);\\n    }\\n\\n    /**\\n     * @notice Only active and wounded agents are allowed to be transferred or traded.\\n     * @param from The current owner of the token.\\n     * @param to The new owner of the token.\\n     * @param tokenId The token ID.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public payable override {\\n        AgentStatus status = agents[agentIndex(tokenId)].status;\\n        if (status > AgentStatus.Wounded) {\\n            revert InvalidAgentStatus(tokenId, status);\\n        }\\n        super.transferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IInfiltration\\n     */\\n    function getAgent(uint256 index) external view returns (Agent memory agent) {\\n        agent = agents[index];\\n        agent.agentId = uint16(_agentIndexToId(agents[index], index));\\n    }\\n\\n    /**\\n     * @inheritdoc IInfiltration\\n     * @dev Unlike the actual heal function, this function does not revert if duplicated agent IDs are provided.\\n     */\\n    function costToHeal(uint256[] calldata agentIds) external view returns (uint256 cost) {\\n        uint256 agentIdsCount = agentIds.length;\\n\\n        for (uint256 i; i < agentIdsCount; ) {\\n            uint256 agentId = agentIds[i];\\n            Agent storage agent = agents[agentIndex(agentId)];\\n            _assertAgentStatus(agent, agentId, AgentStatus.Wounded);\\n\\n            cost += _costToHeal(agent.healCount);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IInfiltration\\n     * @dev Unlike the actual escape function, this function does not revert if duplicated agent IDs are provided.\\n     */\\n    function escapeReward(uint256[] calldata agentIds) external view returns (uint256 reward) {\\n        uint256 agentIdsCount = agentIds.length;\\n        _assertGameIsNotOverAfterEscape(gameInfo.activeAgents - agentIdsCount);\\n\\n        uint256 currentRoundAgentsAlive = agentsAlive();\\n\\n        uint256 prizePool = gameInfo.prizePool;\\n        uint256 secondaryPrizePool = gameInfo.secondaryPrizePool;\\n\\n        for (uint256 i; i < agentIdsCount; ) {\\n            uint256 agentId = agentIds[i];\\n\\n            uint256 index = agentIndex(agentId);\\n            _assertAgentStatus(agents[index], agentId, AgentStatus.Active);\\n\\n            uint256 totalEscapeValue = prizePool / currentRoundAgentsAlive;\\n            uint256 rewardForPlayer = (totalEscapeValue * _escapeMultiplier(currentRoundAgentsAlive)) /\\n                ONE_HUNDRED_PERCENT_IN_BASIS_POINTS;\\n            reward += rewardForPlayer;\\n\\n            uint256 rewardToSecondaryPrizePool = (totalEscapeValue.unsafeSubtract(rewardForPlayer) *\\n                _escapeRewardSplitForSecondaryPrizePool(currentRoundAgentsAlive)) / ONE_HUNDRED_PERCENT_IN_BASIS_POINTS;\\n\\n            secondaryPrizePool += rewardToSecondaryPrizePool;\\n\\n            unchecked {\\n                prizePool = prizePool - rewardForPlayer - rewardToSecondaryPrizePool;\\n                --currentRoundAgentsAlive;\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice\\n     *\\n     * Variables:\\n     * Attempted_Heal_Round - the round at which a user attempts to heal - this is x\\n     * Heal_Rounds_Maximum - the maximum number of rounds after a user is wounded in which they can heal (ROUNDS_TO_BE_WOUNDED_BEFORE_DEAD) - this is x2\\n     * Heal_Rounds_Minimum - the minimum number of rounds after a user is wounded until they can heal (a user cannot heal the same round as wound, so we select one round after wound hence 1) - this is x1\\n     * Maximum_Heal_Percentage - the maximum % chance a user can heal for, this will be if they heal in Heal_Rounds_Minimum (we have set this to 99% of a successful healing) - this is y1\\n     * Minimum_Heal_Percentage - the minimum % chance a user can heal for, this will be if they heal in Heal_Rounds_Maximum (we have set this to 80% of a successful healing) - this is y2\\n     *\\n     * Equation:\\n\\n     * If you substitute all of these into the following equation:\\n     * y = (( x * (y2-y1)) / (x2-x1)) + ((x2 * y1 - x1 * y2) / (x2 - x1))\\n\\n     * You will get an equation for y which is the PercentageChanceToHealSuccessfully given an Attempted_Heal_Round number.\\n\\n     * Explanation:\\n     * i.e if a user is wounded in round 2, and they try to heal in round 4, their Attempted_Heal_Round relative to themselves is 2, hence by subsituting 2 into the place of x in the above equation, their PercentageChanceToHealSuccessfully will be 98.59574468%.\\n     *\\n     * @param healingRoundsDelay The number of rounds elapsed since the agent was wounded.\\n     */\\n    function healProbability(uint256 healingRoundsDelay) public view returns (uint256 y) {\\n        if (healingRoundsDelay == 0 || healingRoundsDelay > ROUNDS_TO_BE_WOUNDED_BEFORE_DEAD) {\\n            revert InvalidHealingRoundsDelay();\\n        }\\n\\n        y =\\n            HEAL_PROBABILITY_MINUEND -\\n            ((healingRoundsDelay * 19) * PROBABILITY_PRECISION) /\\n            ROUNDS_TO_BE_WOUNDED_BEFORE_DEAD_MINUS_ONE;\\n    }\\n\\n    /**\\n     * @notice The formula is 80 - 50 * PercentageOfAgentsRemaining ** 2.\\n     */\\n    function escapeMultiplier() public view returns (uint256 multiplier) {\\n        multiplier = _escapeMultiplier(agentsAlive());\\n    }\\n\\n    /**\\n     * @notice The formula is the lesser of (9,980 / 99) - (UsersRemaining / TotalUsers) * (8,000 / 99) and 100.\\n     */\\n    function escapeRewardSplitForSecondaryPrizePool() public view returns (uint256 split) {\\n        split = _escapeRewardSplitForSecondaryPrizePool(agentsAlive());\\n    }\\n\\n    /**\\n     * @notice An agent's secondary prize pool share amount. The formula is 1.31487 * 995 / (placement * 49) - 15 / 49.\\n     * @param secondaryPrizePoolAmount The secondary prize pool amount.\\n     * @param placement The agent's rank in the leaderboard. This is not meant to be called with placement that is not between 1 and NUMBER_OF_SECONDARY_PRIZE_POOL_WINNERS.\\n     */\\n    function secondaryPrizePoolShareAmount(\\n        uint256 secondaryPrizePoolAmount,\\n        uint256 placement\\n    ) public pure returns (uint256 shareAmount) {\\n        shareAmount =\\n            (secondaryPrizePoolAmount * secondaryPrizePoolShareBp(placement)) /\\n            ONE_HUNDRED_PERCENT_IN_BASIS_POINTS;\\n    }\\n\\n    /**\\n     * @notice An agent's secondary prize pool share in basis points. The formula is 1.31817 * 995 / (placement * 49) - 15 / 49.\\n     * @param placement The agent's rank in the leaderboard. This is not meant to be called with placement that is not between 1 and NUMBER_OF_SECONDARY_PRIZE_POOL_WINNERS.\\n     */\\n    function secondaryPrizePoolShareBp(uint256 placement) public pure returns (uint256 share) {\\n        share = (1_31817 * (995_000_000 / (placement * 49) - uint256(15_000_000) / 49)) / 1_000_000_000;\\n    }\\n\\n    /**\\n     * @inheritdoc IInfiltration\\n     */\\n    function agentsAlive() public view returns (uint256) {\\n        return totalSupply() - gameInfo.deadAgents - gameInfo.escapedAgents;\\n    }\\n\\n    /**\\n     * @inheritdoc IInfiltration\\n     */\\n    function agentIndex(uint256 agentId) public view returns (uint256 index) {\\n        index = agentIdToIndex[agentId];\\n        if (index == 0) {\\n            index = agentId;\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IInfiltration\\n     */\\n    function getRoundInfo(\\n        uint256 roundId\\n    ) external view returns (uint256[] memory woundedAgentIds, uint256[] memory healingAgentIds) {\\n        woundedAgentIds = _buildAgentIdsPerRoundArray(woundedAgentIdsPerRound[roundId]);\\n        healingAgentIds = _buildAgentIdsPerRoundArray(healingAgentIdsPerRound[roundId]);\\n    }\\n\\n    /**\\n     * @param requestId The VRF request ID.\\n     * @param randomWords The random words returned from Chainlink. We only request 1 random word.\\n     */\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\\n        RandomnessRequest storage randomnessRequest = randomnessRequests[requestId];\\n\\n        uint256 currentRoundId = gameInfo.currentRoundId;\\n        uint256 randomnessRequestRoundId = randomnessRequest.roundId;\\n        if (\\n            randomnessRequestRoundId != currentRoundId || randomnessRequest.status != RandomnessRequestStatus.Requested\\n        ) {\\n            emit InvalidRandomnessFulfillment(requestId, randomnessRequestRoundId, currentRoundId);\\n            return;\\n        }\\n\\n        randomnessRequest.randomWord = randomWords[0];\\n        randomnessRequest.status = RandomnessRequestStatus.Fulfilled;\\n\\n        emit RandomnessFulfilled(randomnessRequest.roundId, requestId);\\n    }\\n\\n    /**\\n     * @inheritdoc IInfiltration\\n     */\\n    function closeRound(uint256 requestId) external {\\n        uint256 currentRoundId = gameInfo.currentRoundId;\\n        RandomnessRequest storage randomnessRequest = randomnessRequests[requestId];\\n        if (\\n            randomnessRequest.roundId != currentRoundId || randomnessRequest.status != RandomnessRequestStatus.Fulfilled\\n        ) {\\n            revert InvalidRandomnessRequestId();\\n        }\\n\\n        uint256 currentRandomWord = randomnessRequest.randomWord;\\n\\n        uint256 currentRoundAgentsAlive = agentsAlive();\\n        uint256 activeAgents = gameInfo.activeAgents;\\n        uint256 healingAgents = gameInfo.healingAgents;\\n\\n        uint256 deadAgentsFromHealing;\\n\\n        if (healingAgents != 0) {\\n            uint256 healedAgents;\\n            (healedAgents, deadAgentsFromHealing, currentRandomWord) = _healRequestFulfilled(\\n                currentRoundId,\\n                currentRoundAgentsAlive,\\n                currentRandomWord\\n            );\\n            unchecked {\\n                currentRoundAgentsAlive -= deadAgentsFromHealing;\\n                activeAgents += healedAgents;\\n                gameInfo.healingAgents = uint16(healingAgents - healedAgents - deadAgentsFromHealing);\\n            }\\n        }\\n\\n        if (activeAgents > NUMBER_OF_SECONDARY_PRIZE_POOL_WINNERS) {\\n            uint256 woundedAgents = _woundRequestFulfilled(\\n                currentRoundId,\\n                currentRoundAgentsAlive,\\n                activeAgents,\\n                currentRandomWord\\n            );\\n\\n            uint256 deadAgentsFromKilling;\\n            if (currentRoundId > ROUNDS_TO_BE_WOUNDED_BEFORE_DEAD) {\\n                deadAgentsFromKilling = _killWoundedAgents({\\n                    currentRoundId: currentRoundId,\\n                    roundId: currentRoundId.unsafeSubtract(ROUNDS_TO_BE_WOUNDED_BEFORE_DEAD),\\n                    currentRoundAgentsAlive: currentRoundAgentsAlive\\n                });\\n            }\\n\\n            // We only need to deduct wounded agents from active agents, dead agents from killing are already inactive.\\n\\n            // This is equivalent to\\n            // unchecked {\\n            //     gameInfo.activeAgents = activeAgents - woundedAgents;\\n            //     gameInfo.woundedAgents = gameInfo.woundedAgents + woundedAgents - deadAgentsFromKilling;\\n            //     gameInfo.deadAgents += (deadAgentsFromHealing + deadAgentsFromKilling);\\n            // }\\n            // SSTORE is called in _incrementRound\\n            uint256 gameInfoSlot0Value;\\n            assembly {\\n                gameInfoSlot0Value := sload(gameInfo.slot)\\n\\n                let currentWoundedAgents := and(\\n                    shr(GAME_INFO__WOUNDED_AGENTS_OFFSET, gameInfoSlot0Value),\\n                    TWO_BYTES_BITMASK\\n                )\\n                let currentDeadAgents := and(shr(GAME_INFO__DEAD_AGENTS_OFFSET, gameInfoSlot0Value), TWO_BYTES_BITMASK)\\n\\n                gameInfoSlot0Value := and(\\n                    gameInfoSlot0Value,\\n                    // This is equivalent to\\n                    // not(\\n                    //     or(\\n                    //         TWO_BYTES_BITMASK,\\n                    //         or(\\n                    //             shl(GAME_INFO__WOUNDED_AGENTS_OFFSET, TWO_BYTES_BITMASK),\\n                    //             shl(GAME_INFO__DEAD_AGENTS_OFFSET, TWO_BYTES_BITMASK)\\n                    //         )\\n                    //     )\\n                    // )\\n                    0xffffffffffffffffffffffffffffffffffffffffffffffff0000ffff00000000\\n                )\\n                gameInfoSlot0Value := or(gameInfoSlot0Value, sub(activeAgents, woundedAgents))\\n\\n                gameInfoSlot0Value := or(\\n                    gameInfoSlot0Value,\\n                    shl(\\n                        GAME_INFO__WOUNDED_AGENTS_OFFSET,\\n                        sub(add(currentWoundedAgents, woundedAgents), deadAgentsFromKilling)\\n                    )\\n                )\\n\\n                gameInfoSlot0Value := or(\\n                    gameInfoSlot0Value,\\n                    shl(\\n                        GAME_INFO__DEAD_AGENTS_OFFSET,\\n                        add(currentDeadAgents, add(deadAgentsFromHealing, deadAgentsFromKilling))\\n                    )\\n                )\\n            }\\n            _incrementRound(currentRoundId, gameInfoSlot0Value);\\n        } else {\\n            bool shouldKillOneAgent = activeAgents > 1;\\n            if (shouldKillOneAgent) {\\n                uint256 killedAgentIndex = (currentRandomWord % activeAgents).unsafeAdd(1);\\n                Agent storage agentToKill = agents[killedAgentIndex];\\n                uint256 agentId = _agentIndexToId(agentToKill, killedAgentIndex);\\n                _swap({\\n                    currentAgentIndex: killedAgentIndex,\\n                    lastAgentIndex: currentRoundAgentsAlive,\\n                    agentId: agentId,\\n                    newStatus: AgentStatus.Dead\\n                });\\n\\n                uint256[] memory killedAgentId = new uint256[](1);\\n                killedAgentId[0] = agentId;\\n                emit Killed(currentRoundId, killedAgentId);\\n\\n                unchecked {\\n                    --activeAgents;\\n                    --currentRoundAgentsAlive;\\n                }\\n            }\\n\\n            // This is equivalent to\\n            // unchecked {\\n            //     gameInfo.activeAgents = activeAgents;\\n            //     gameInfo.deadAgents = gameInfo.deadAgents + deadAgentsFromHealing + 1;\\n            // }\\n            // SSTORE is called in _incrementRound\\n            uint256 gameInfoSlot0Value;\\n            assembly {\\n                gameInfoSlot0Value := sload(gameInfo.slot)\\n                let deadAgents := and(shr(GAME_INFO__DEAD_AGENTS_OFFSET, gameInfoSlot0Value), TWO_BYTES_BITMASK)\\n\\n                gameInfoSlot0Value := and(\\n                    gameInfoSlot0Value,\\n                    // This is equivalent to not(or(TWO_BYTES_BITMASK, shl(GAME_INFO__DEAD_AGENTS_OFFSET, TWO_BYTES_BITMASK)))\\n                    0xffffffffffffffffffffffffffffffffffffffffffffffff0000ffffffff0000\\n                )\\n                gameInfoSlot0Value := or(gameInfoSlot0Value, activeAgents)\\n                // If shouldKillOneAgent is true, then add 1. If false, then add 0.\\n                gameInfoSlot0Value := or(\\n                    gameInfoSlot0Value,\\n                    shl(GAME_INFO__DEAD_AGENTS_OFFSET, add(add(deadAgents, deadAgentsFromHealing), shouldKillOneAgent))\\n                )\\n            }\\n\\n            _emitWonEventIfOnlyOneAgentRemaining(currentRoundAgentsAlive, activeAgents);\\n            _incrementRound(currentRoundId, gameInfoSlot0Value);\\n        }\\n\\n        frontrunLock = FRONTRUN_LOCK__UNLOCKED;\\n\\n        unchecked {\\n            emit RoundStarted(currentRoundId + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev This function doesn't check currentRoundId to be <= type(uint40).max but it's fine as\\n     *      it's practically impossible to reach this number of rounds.\\n     * @param currentRoundId The current round ID.\\n     * @param gameInfoSlot0Value The value of gameInfo.slot.\\n     */\\n    function _incrementRound(uint256 currentRoundId, uint256 gameInfoSlot0Value) private {\\n        // This is equivalent to\\n        // unchecked {\\n        //     uint256 newRoundId = currentRoundId + 1;\\n        //     gameInfo.currentRoundId = newRoundId;\\n        //     gameInfo.currentRoundBlockNumber = uint40(block.number);\\n        //     gameInfo.randomnessLastRequestedAt = 0;\\n        // }\\n        assembly {\\n            gameInfoSlot0Value := and(\\n                gameInfoSlot0Value,\\n                // This is equivalent to\\n                // let gameInfoRandomnessLastRequestedAtOffset := 160\\n                // not(\\n                //     or(\\n                //         or(\\n                //             shl(GAME_INFO__CURRENT_ROUND_ID_OFFSET, FIVE_BYTES_BITMASK),\\n                //             shl(GAME_INFO__CURRENT_ROUND_BLOCK_NUMBER_OFFSET, FIVE_BYTES_BITMASK)\\n                //         ),\\n                //         shl(gameInfoRandomnessLastRequestedAtOffset, FIVE_BYTES_BITMASK)\\n                //     )\\n                // )\\n                0xffffffffffffff000000000000000000000000000000ffffffffffffffffffff\\n            )\\n            gameInfoSlot0Value := or(\\n                gameInfoSlot0Value,\\n                shl(GAME_INFO__CURRENT_ROUND_ID_OFFSET, add(currentRoundId, 1))\\n            )\\n            gameInfoSlot0Value := or(gameInfoSlot0Value, shl(GAME_INFO__CURRENT_ROUND_BLOCK_NUMBER_OFFSET, number()))\\n            sstore(gameInfo.slot, gameInfoSlot0Value)\\n        }\\n    }\\n\\n    /**\\n     * @dev This function requests for a random word from Chainlink VRF for wounding and healing.\\n     */\\n    function _requestForRandomness() private {\\n        uint256 requestId = VRF_COORDINATOR.requestRandomWords({\\n            keyHash: KEY_HASH,\\n            subId: SUBSCRIPTION_ID,\\n            minimumRequestConfirmations: uint16(3),\\n            callbackGasLimit: uint32(2_500_000),\\n            numWords: uint32(1)\\n        });\\n\\n        if (randomnessRequests[requestId].status != RandomnessRequestStatus.None) {\\n            revert RandomnessRequestAlreadyExists();\\n        }\\n\\n        uint40 currentRoundId = gameInfo.currentRoundId;\\n\\n        gameInfo.randomnessLastRequestedAt = uint40(block.timestamp);\\n\\n        // This is equivalent to\\n        // randomnessRequests[requestId].status = RandomnessRequestStatus.Requested;\\n        // randomnessRequests[requestId].roundId = currentRoundId;\\n        assembly {\\n            // 1 is RandomnessRequestStatus.Requested\\n            let randomnessRequest := or(1, shl(RANDOMNESS_REQUESTS__EXISTS_OFFSET, currentRoundId))\\n            mstore(0x00, requestId)\\n            mstore(0x20, randomnessRequests.slot)\\n            let randomnessRequestStoragSlot := keccak256(0x00, 0x40)\\n            sstore(randomnessRequestStoragSlot, randomnessRequest)\\n        }\\n\\n        frontrunLock = FRONTRUN_LOCK__LOCKED;\\n\\n        emit RandomnessRequested(currentRoundId, requestId);\\n    }\\n\\n    /**\\n     * @param roundId The current round ID.\\n     * @param currentRoundAgentsAlive The number of agents alive currently.\\n     * @param randomWord The random word returned from Chainlink.\\n     * @return healedAgentsCount The number of agents that were healed.\\n     * @return deadAgentsCount The number of agents that were killed.\\n     * @return currentRandomWord The current random word after running the function.\\n     */\\n    function _healRequestFulfilled(\\n        uint256 roundId,\\n        uint256 currentRoundAgentsAlive,\\n        uint256 randomWord\\n    ) private returns (uint256 healedAgentsCount, uint256 deadAgentsCount, uint256 currentRandomWord) {\\n        uint16[MAXIMUM_HEALING_OR_WOUNDED_AGENTS_PER_ROUND_AND_LENGTH]\\n            storage healingAgentIds = healingAgentIdsPerRound[roundId];\\n        uint256 healingAgentIdsCount = healingAgentIds[0];\\n\\n        if (healingAgentIdsCount != 0) {\\n            HealResult[] memory healResults = new HealResult[](healingAgentIdsCount);\\n\\n            for (uint256 i; i < healingAgentIdsCount; ) {\\n                uint256 healingAgentId = healingAgentIds[i.unsafeAdd(1)];\\n                uint256 index = agentIndex(healingAgentId);\\n                Agent storage agent = agents[index];\\n\\n                healResults[i].agentId = healingAgentId;\\n\\n                // 1. An agent's \\\"healing at\\\" round ID is always equal to the current round ID\\n                //    as it immediately settles upon randomness fulfillment.\\n                //\\n                // 2. 10_000_000_000 == 100 * PROBABILITY_PRECISION\\n                if (randomWord % 10_000_000_000 <= healProbability(roundId.unsafeSubtract(agent.woundedAt))) {\\n                    // This line is not needed as HealOutcome.Healed is 0. It is here for clarity.\\n                    // healResults[i].outcome = HealOutcome.Healed;\\n                    _healAgent(agent);\\n                } else {\\n                    healResults[i].outcome = HealOutcome.Killed;\\n                    _swap({\\n                        currentAgentIndex: index,\\n                        lastAgentIndex: currentRoundAgentsAlive - deadAgentsCount,\\n                        agentId: healingAgentId,\\n                        newStatus: AgentStatus.Dead\\n                    });\\n                    unchecked {\\n                        ++deadAgentsCount;\\n                    }\\n                }\\n\\n                randomWord = _nextRandomWord(randomWord);\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n\\n            unchecked {\\n                healedAgentsCount = healingAgentIdsCount - deadAgentsCount;\\n            }\\n\\n            emit HealRequestFulfilled(roundId, healResults);\\n        }\\n\\n        currentRandomWord = randomWord;\\n    }\\n\\n    /**\\n     * @param roundId The current round ID.\\n     * @param currentRoundAgentsAlive The number of agents alive currently.\\n     * @param activeAgents The number of currently active agents.\\n     * @param randomWord The random word returned from Chainlink.\\n     * @return woundedAgentsCount The number of agents that were wounded.\\n     */\\n    function _woundRequestFulfilled(\\n        uint256 roundId,\\n        uint256 currentRoundAgentsAlive,\\n        uint256 activeAgents,\\n        uint256 randomWord\\n    ) private returns (uint256 woundedAgentsCount) {\\n        woundedAgentsCount =\\n            (activeAgents * AGENTS_TO_WOUND_PER_ROUND_IN_BASIS_POINTS) /\\n            ONE_HUNDRED_PERCENT_IN_BASIS_POINTS;\\n        // At some point the number of agents to wound will be 0 due to round down, so we set it to 1.\\n        if (woundedAgentsCount == 0) {\\n            woundedAgentsCount = 1;\\n        }\\n\\n        uint256[] memory woundedAgentIds = new uint256[](woundedAgentsCount);\\n        uint16[MAXIMUM_HEALING_OR_WOUNDED_AGENTS_PER_ROUND_AND_LENGTH]\\n            storage currentRoundWoundedAgentIds = woundedAgentIdsPerRound[roundId];\\n\\n        for (uint256 i; i < woundedAgentsCount; ) {\\n            uint256 woundedAgentIndex = (randomWord % currentRoundAgentsAlive).unsafeAdd(1);\\n            Agent storage agentToWound = agents[woundedAgentIndex];\\n\\n            if (agentToWound.status == AgentStatus.Active) {\\n                // This is equivalent to\\n                // agentToWound.status = AgentStatus.Wounded;\\n                // agentToWound.woundedAt = roundId;\\n                assembly {\\n                    let agentSlotValue := sload(agentToWound.slot)\\n                    agentSlotValue := and(\\n                        agentSlotValue,\\n                        // This is equivalent to\\n                        // or(\\n                        //     TWO_BYTES_BITMASK,\\n                        //     shl(64, TWO_BYTES_BITMASK)\\n                        // )\\n                        0x00000000000000000000000000000000000000000000ffff000000000000ffff\\n                    )\\n                    // AgentStatus.Wounded is 1\\n                    agentSlotValue := or(agentSlotValue, shl(AGENT__STATUS_OFFSET, 1))\\n                    agentSlotValue := or(agentSlotValue, shl(AGENT__WOUNDED_AT_OFFSET, roundId))\\n                    sstore(agentToWound.slot, agentSlotValue)\\n                }\\n\\n                uint256 woundedAgentId = _agentIndexToId(agentToWound, woundedAgentIndex);\\n                woundedAgentIds[i] = woundedAgentId;\\n\\n                unchecked {\\n                    ++i;\\n                    currentRoundWoundedAgentIds[i] = uint16(woundedAgentId);\\n                }\\n            }\\n\\n            randomWord = _nextRandomWord(randomWord);\\n        }\\n\\n        currentRoundWoundedAgentIds[0] = uint16(woundedAgentsCount);\\n\\n        emit Wounded(roundId, woundedAgentIds);\\n    }\\n\\n    /**\\n     * @dev This function emits the Killed event but some agent IDs in the array can be 0 because\\n     *      they might have been healed or are dead already.\\n     * @param currentRoundId The current round ID.\\n     * @param roundId The round ID in which the wounded agents should be killed.\\n     * @param currentRoundAgentsAlive The number of agents alive currently.\\n     * @return deadAgentsCount The number of agents that were killed.\\n     */\\n    function _killWoundedAgents(\\n        uint256 currentRoundId,\\n        uint256 roundId,\\n        uint256 currentRoundAgentsAlive\\n    ) private returns (uint256 deadAgentsCount) {\\n        uint16[MAXIMUM_HEALING_OR_WOUNDED_AGENTS_PER_ROUND_AND_LENGTH]\\n            storage woundedAgentIdsInRound = woundedAgentIdsPerRound[roundId];\\n        uint256 woundedAgentIdsCount = woundedAgentIdsInRound[0];\\n        uint256[] memory woundedAgentIds = new uint256[](woundedAgentIdsCount);\\n        for (uint256 i; i < woundedAgentIdsCount; ) {\\n            uint256 woundedAgentId = woundedAgentIdsInRound[i.unsafeAdd(1)];\\n            uint256 index = agentIndex(woundedAgentId);\\n            Agent storage agent = agents[index];\\n            if (agent.status == AgentStatus.Wounded) {\\n                if (agent.woundedAt == roundId) {\\n                    woundedAgentIds[i] = woundedAgentId;\\n                    _swap({\\n                        currentAgentIndex: index,\\n                        lastAgentIndex: currentRoundAgentsAlive - deadAgentsCount,\\n                        agentId: woundedAgentId,\\n                        newStatus: AgentStatus.Dead\\n                    });\\n                    unchecked {\\n                        ++deadAgentsCount;\\n                    }\\n                }\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit Killed(currentRoundId, woundedAgentIds);\\n    }\\n\\n    /**\\n     * @param agent The agent to check.\\n     * @param index The agent's index in the agents mapping.\\n     * @return agentId The agent's ID.\\n     */\\n    function _agentIndexToId(Agent storage agent, uint256 index) private view returns (uint256 agentId) {\\n        agentId = agent.agentId;\\n        agentId = agentId == 0 ? index : agentId;\\n    }\\n\\n    /**\\n     * @param healCount The number of times the agent has been successfully healed.\\n     * @return cost The cost to heal the agent based on the agent's successful heal count.\\n     */\\n    function _costToHeal(uint256 healCount) private view returns (uint256 cost) {\\n        cost = HEAL_BASE_COST * (2 ** healCount);\\n    }\\n\\n    /**\\n     * @param agent The agent to heal.\\n     */\\n    function _healAgent(Agent storage agent) private {\\n        // This is equivalent to\\n        // agent.status = AgentStatus.Active;\\n        // agent.woundedAt = 0;\\n        // lastHealCount = agent.healCount;\\n        // ++agent.healCount;\\n        assembly {\\n            let agentSlotValue := sload(agent.slot)\\n            let lastHealCount := and(shr(AGENT__HEAL_COUNT_OFFSET, agentSlotValue), TWO_BYTES_BITMASK)\\n            agentSlotValue := and(agentSlotValue, TWO_BYTES_BITMASK)\\n            agentSlotValue := or(agentSlotValue, shl(AGENT__HEAL_COUNT_OFFSET, add(lastHealCount, 1)))\\n            sstore(agent.slot, agentSlotValue)\\n        }\\n    }\\n\\n    /**\\n     * @notice An agent is killed by swapping it with the last agent in the agents mapping and decrementing `agentsAlive`\\n     *         by adding 1 to `gameInfo.deadAgents`.\\n     * @notice An agent escapes by swapping it with the last agent in the agents mapping and decrementing `agentsAlive`\\n     *         by adding 1 to `gameInfo.escapedAgents`.\\n     * @param currentAgentIndex The agent (whose status is being updated)'s index in the agents mapping.\\n     * @param lastAgentIndex Last agent's index in the agents mapping.\\n     * @param agentId The agent (whose status is being updated) 's ID.\\n     * @param newStatus The new status of the agent.\\n     */\\n    function _swap(uint256 currentAgentIndex, uint256 lastAgentIndex, uint256 agentId, AgentStatus newStatus) private {\\n        Agent storage lastAgent = agents[lastAgentIndex];\\n        uint256 lastAgentId = _agentIndexToId(lastAgent, lastAgentIndex);\\n\\n        agentIdToIndex[agentId] = lastAgentIndex;\\n        agentIdToIndex[lastAgentId] = currentAgentIndex;\\n\\n        /**\\n         * If last agent's agent ID is 0 that means it was never touched and is active.\\n         *\\n         * This is equivalent to\\n         *\\n         * agent.agentId = uint16(lastAgentId);\\n         * agent.status = lastAgent.status;\\n         * agent.woundedAt = lastAgent.woundedAt;\\n         * agent.healCount = lastAgent.healCount;\\n\\n         * lastAgent.agentId = uint16(agentId);\\n         * lastAgent.status = newStatus;\\n         * lastAgent.woundedAt = 0;\\n         * lastAgent.healCount = 0;\\n         */\\n        bytes32 currentAgentSlot = _getAgentStorageSlot(currentAgentIndex);\\n        bytes32 lastAgentSlot = _getAgentStorageSlot(lastAgentIndex);\\n\\n        assembly {\\n            let lastAgentCurrentValue := sload(lastAgentSlot)\\n            // The last agent's ID is either 0 or lastAgentId, so we do not need to clear the last 16 bits\\n            // as it can only be or(0, lastAgentId) or or(lastAgentId, lastAgentId) which both ends up being lastAgentId.\\n            lastAgentCurrentValue := or(lastAgentCurrentValue, lastAgentId)\\n            sstore(currentAgentSlot, lastAgentCurrentValue)\\n\\n            let lastAgentNewValue := agentId\\n            lastAgentNewValue := or(lastAgentNewValue, shl(AGENT__STATUS_OFFSET, newStatus))\\n            sstore(lastAgentSlot, lastAgentNewValue)\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the next random word by hashing.\\n     * @param randomWord The current random word.\\n     * @return nextRandomWord The next random word.\\n     */\\n    function _nextRandomWord(uint256 randomWord) private pure returns (uint256 nextRandomWord) {\\n        // This is equivalent to\\n        // randomWord = uint256(keccak256(abi.encode(randomWord)));\\n        assembly {\\n            mstore(0x00, randomWord)\\n            nextRandomWord := keccak256(0x00, 0x20)\\n        }\\n    }\\n\\n    /**\\n     * @param index The agent's index in the agents mapping.\\n     * @return agentStorageSlot The agent's storage slot.\\n     */\\n    function _getAgentStorageSlot(uint256 index) private pure returns (bytes32 agentStorageSlot) {\\n        assembly {\\n            mstore(0x00, index)\\n            mstore(0x20, agents.slot)\\n            agentStorageSlot := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev ONE_HUNDRED_PERCENT_IN_BASIS_POINTS is used as an amplifier to prevent a loss of precision.\\n     * @param agentsRemaining The number of agents remaining including wounded and healing agents.\\n     * @return multiplier The escape multiplier in basis points. This portion of the reward goes to the owner of the escaping agent.\\n     */\\n    function _escapeMultiplier(uint256 agentsRemaining) private view returns (uint256 multiplier) {\\n        multiplier =\\n            ((80 *\\n                ONE_HUNDRED_PERCENT_IN_BASIS_POINTS_SQUARED -\\n                50 *\\n                (((agentsRemaining * ONE_HUNDRED_PERCENT_IN_BASIS_POINTS) / totalSupply()) ** 2)) * 100) /\\n            ONE_HUNDRED_PERCENT_IN_BASIS_POINTS_SQUARED;\\n    }\\n\\n    /**\\n     * @dev ONE_HUNDRED_PERCENT_IN_BASIS_POINTS is used as an amplifier to prevent a loss of precision.\\n     * @param agentsRemaining The number of agents remaining including wounded and healing agents.\\n     * @return split The split of the remaining escape reward between the the secondary prize pool and the main prize pool in basis points.\\n     */\\n    function _escapeRewardSplitForSecondaryPrizePool(uint256 agentsRemaining) private view returns (uint256 split) {\\n        split =\\n            ((9_980 * ONE_HUNDRED_PERCENT_IN_BASIS_POINTS) /\\n                99 -\\n                (((agentsRemaining * ONE_HUNDRED_PERCENT_IN_BASIS_POINTS) / totalSupply()) * uint256(8_000)) /\\n                99) /\\n            100;\\n        if (split > ONE_HUNDRED_PERCENT_IN_BASIS_POINTS) {\\n            split = ONE_HUNDRED_PERCENT_IN_BASIS_POINTS;\\n        }\\n    }\\n\\n    /**\\n     * @dev Emit the Won event if there is only 1 active agent remaining in the game.\\n     * @param agentsRemaining The number of alive agents.\\n     * @param activeAgentsRemaining The number of active agents remaining.\\n     */\\n    function _emitWonEventIfOnlyOneAgentRemaining(uint256 agentsRemaining, uint256 activeAgentsRemaining) private {\\n        if (agentsRemaining == 1) {\\n            if (activeAgentsRemaining == 1) {\\n                emit Won(gameInfo.currentRoundId, _agentIndexToId(agents[1], 1));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Validate max supply is not breached after minting \\\"quantity\\\" amount of agents\\n     * @param quantity The quantity of agents to mint.\\n     */\\n    function _assertTotalSupplyNotBreached(uint256 quantity) private view {\\n        if (totalSupply() + quantity > MAX_SUPPLY) {\\n            revert ExceededTotalSupply();\\n        }\\n    }\\n\\n    /**\\n     * @notice Validate the game has not begun.\\n     */\\n    function _assertGameNotYetBegun() private view {\\n        if (gameInfo.currentRoundId != 0) {\\n            revert GameAlreadyBegun();\\n        }\\n    }\\n\\n    /**\\n     * @notice Validate exact ETH amount has been paid for the mint.\\n     * @param quantity The quantity of agents to mint.\\n     */\\n    function _assertExactNativeTokensSupplied(uint256 quantity) private view {\\n        if (quantity * PRICE != msg.value) {\\n            revert InexactNativeTokensSupplied();\\n        }\\n    }\\n\\n    /**\\n     * @notice Validate the msg.sender is the owner of the agent ID.\\n     * @param agentId The agent ID to validate.\\n     */\\n    function _assertAgentOwnership(uint256 agentId) private view {\\n        if (ownerOf(agentId) != msg.sender) {\\n            revert NotAgentOwner();\\n        }\\n    }\\n\\n    /**\\n     * @notice Validate the agent's status is the expected status.\\n     * @param agent The agent to validate.\\n     * @param agentId The agent's ID.\\n     * @param status The expected status.\\n     */\\n    function _assertAgentStatus(Agent storage agent, uint256 agentId, AgentStatus status) private view {\\n        if (agent.status != status) {\\n            revert InvalidAgentStatus(agentId, status);\\n        }\\n    }\\n\\n    /**\\n     * @notice Validate the placement is between 1 and 50.\\n     * @param placement The placement to validate.\\n     */\\n    function _assertValidPlacement(uint256 placement) private pure {\\n        if (placement == 0 || placement > NUMBER_OF_SECONDARY_PRIZE_POOL_WINNERS) {\\n            revert InvalidPlacement();\\n        }\\n    }\\n\\n    /**\\n     * @notice Validate the game is over by checking there is only 1 active agent and 0 wounded/healing agents.\\n     */\\n    function _assertGameOver() private view {\\n        if (gameInfo.activeAgents != 1 || gameInfo.woundedAgents != 0 || gameInfo.healingAgents != 0) {\\n            revert GameIsStillRunning();\\n        }\\n    }\\n\\n    /**\\n     * @notice Validate the frontrun lock is off.\\n     */\\n    function _assertFrontrunLockIsOff() private view {\\n        if (frontrunLock == FRONTRUN_LOCK__LOCKED) {\\n            revert FrontrunLockIsOn();\\n        }\\n    }\\n\\n    /**\\n     * @notice Validate the agent IDs array is not empty.\\n     */\\n    function _assertNotEmptyAgentIdsArrayProvided(uint256 agentIdsCount) private pure {\\n        if (agentIdsCount == 0) {\\n            revert NoAgentsProvided();\\n        }\\n    }\\n\\n    /**\\n     * @notice Validate the game's active agents to be greater than 0 after escape.\\n     */\\n    function _assertGameIsNotOverAfterEscape(uint256 activeAgentsAfterEscape) private pure {\\n        if (activeAgentsAfterEscape < 1) {\\n            revert NoAgentsLeft();\\n        }\\n    }\\n\\n    /**\\n     * @notice The starting token ID is 1.\\n     */\\n    function _startTokenId() internal pure override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice The base URI of the collection.\\n     */\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    /**\\n     * @param agentIdsPerRound The storage pointer to either a round's woundedAgentIdsPerRound or healingAgentIdsPerRound.\\n     * @return agentIds The agent IDs (now dynamically sized) in the round with the length removed.\\n     */\\n    function _buildAgentIdsPerRoundArray(\\n        uint16[MAXIMUM_HEALING_OR_WOUNDED_AGENTS_PER_ROUND_AND_LENGTH] storage agentIdsPerRound\\n    ) private view returns (uint256[] memory agentIds) {\\n        uint256 count = agentIdsPerRound[0];\\n        agentIds = new uint256[](count);\\n        for (uint256 i; i < count; ) {\\n            unchecked {\\n                agentIds[i] = agentIdsPerRound[i + 1];\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInfiltration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IInfiltration {\\n    /**\\n     * @notice Agent statuses.\\n     *         1. Active: The agent is active.\\n     *         2. Wounded: The agent is wounded. The agent can be healed for a number of blocks.\\n     *         3. Healing: The agent is healing. The outcome of the healing is not yet known.\\n     *         4. Escaped: The agent escaped from the game and took some rewards with him.\\n     *         5. Dead: The agent is dead. It can be due to the agent being wounded for too long or a failed healing.\\n     */\\n    enum AgentStatus {\\n        Active,\\n        Wounded,\\n        Healing,\\n        Escaped,\\n        Dead\\n    }\\n\\n    /**\\n     * @notice Heal outcomes. The agent can either be healed or killed.\\n     */\\n    enum HealOutcome {\\n        Healed,\\n        Killed\\n    }\\n\\n    /**\\n     * @notice Randomness request statuses.\\n     */\\n    enum RandomnessRequestStatus {\\n        None,\\n        Requested,\\n        Fulfilled\\n    }\\n\\n    /**\\n     * @notice An agent.\\n     * @dev The storage layout of an agent is as follows:\\n     * |---------------------------------------------------------------------------------------------------|\\n     * | empty (176 bits) | healCount (16 bits) | woundedAt (40 bits) | status (8 bits) | agentId (16 bits)|\\n     * |---------------------------------------------------------------------------------------------------|\\n     * @param agentId The ID of the agent.\\n     * @param status The status of the agent.\\n     * @param woundedAt The round number when the agent was wounded.\\n     * @param healCount The number of times the agent has been successfully healed.\\n     */\\n    struct Agent {\\n        uint16 agentId;\\n        AgentStatus status;\\n        uint40 woundedAt;\\n        uint16 healCount;\\n    }\\n\\n    /**\\n     * @notice The constructor calldata.\\n     * @param owner The owner of the contract.\\n     * @param name The name of the collection.\\n     * @param symbol The symbol of the collection.\\n     * @param price The mint price.\\n     * @param maxSupply The maximum supply of the collection.\\n     * @param maxMintPerAddress The maximum number of agents that can be minted per address.\\n     * @param blocksPerRound The number of blocks per round.\\n     * @param agentsToWoundPerRoundInBasisPoints The number of agents to wound per round in basis points.\\n     * @param roundsToBeWoundedBeforeDead The number of rounds for an agent to be wounded before getting killed.\\n     * @param looks The LOOKS token address.\\n     * @param vrfCoordinator The VRF coordinator address.\\n     * @param keyHash The VRF key hash.\\n     * @param subscriptionId The VRF subscription ID.\\n     * @param transferManager The transfer manager address.\\n     * @param healBaseCost The base cost to heal an agent.\\n     * @param protocolFeeRecipient The protocol fee recipient.\\n     * @param protocolFeeBp The protocol fee basis points.\\n     * @param weth The WETH address.\\n     * @param baseURI The base URI of the collection.\\n     */\\n    struct ConstructorCalldata {\\n        address owner;\\n        string name;\\n        string symbol;\\n        uint256 price;\\n        uint256 maxSupply;\\n        uint256 maxMintPerAddress;\\n        uint256 blocksPerRound;\\n        uint256 agentsToWoundPerRoundInBasisPoints;\\n        uint256 roundsToBeWoundedBeforeDead;\\n        address looks;\\n        address vrfCoordinator;\\n        bytes32 keyHash;\\n        uint64 subscriptionId;\\n        address transferManager;\\n        uint256 healBaseCost;\\n        address protocolFeeRecipient;\\n        uint16 protocolFeeBp;\\n        address weth;\\n        string baseURI;\\n    }\\n\\n    /**\\n     * @notice Game info.\\n     * @dev The storage layout of game info is as follows:\\n     * |-------------------------------------------------------------------------------------------------------------------------------|\\n     * | empty (56 bits) | randomnessLastRequestedAt (40 bits) | currentRoundBlockNumber (40 bits) | currentRoundId (40 bits)          |\\n     * | escapedAgents (16 bits) | deadAgents (16 bits) | healingAgents (16 bits) | woundedAgents (16 bits) | activeAgents (16 bits)   |\\n     * |-------------------------------------------------------------------------------------------------------------------------------|\\n     * | prizePool (256 bits)                                                                                                          |\\n     * |-------------------------------------------------------------------------------------------------------------------------------|\\n     * | secondaryPrizePool (256 bits)                                                                                                 |\\n     * |-------------------------------------------------------------------------------------------------------------------------------|\\n     * | secondaryLooksPrizePool (256 bits)                                                                                            |\\n     * |-------------------------------------------------------------------------------------------------------------------------------|\\n     * @param activeAgents The number of active agents.\\n     * @param woundedAgents The number of wounded agents.\\n     * @param healingAgents The number of healing agents.\\n     * @param deadAgents The number of dead agents.\\n     * @param escapedAgents The number of escaped agents.\\n     * @param currentRoundId The current round ID.\\n     * @param currentRoundBlockNumber The current round block number.\\n     * @param randomnessLastRequestedAt The timestamp when the randomness was last requested.\\n     * @param prizePool The ETH prize pool for the final winner.\\n     * @param secondaryPrizePool The secondary ETH prize pool for the top X winners.\\n     * @param secondaryLooksPrizePool The secondary LOOKS prize pool for the top X winners.\\n     */\\n    struct GameInfo {\\n        uint16 activeAgents;\\n        uint16 woundedAgents;\\n        uint16 healingAgents;\\n        uint16 deadAgents;\\n        uint16 escapedAgents;\\n        uint40 currentRoundId;\\n        uint40 currentRoundBlockNumber;\\n        uint40 randomnessLastRequestedAt;\\n        uint256 prizePool;\\n        uint256 secondaryPrizePool;\\n        uint256 secondaryLooksPrizePool;\\n    }\\n\\n    /**\\n     * @notice A Chainlink randomness request.\\n     * @param status The status of the randomness request.\\n     * @param roundId The round ID when the randomness request occurred.\\n     * @param randomWord The returned random word.\\n     */\\n    struct RandomnessRequest {\\n        RandomnessRequestStatus status;\\n        uint40 roundId;\\n        uint256 randomWord;\\n    }\\n\\n    /**\\n     * @notice A heal result that is used to emit events.\\n     * @param agentId The agent ID.\\n     * @param outcome The outcome of the healing.\\n     */\\n    struct HealResult {\\n        uint256 agentId;\\n        HealOutcome outcome;\\n    }\\n\\n    event EmergencyWithdrawal(uint256 ethAmount, uint256 looksAmount);\\n    event MintPeriodUpdated(uint256 mintStart, uint256 mintEnd);\\n    event HealRequestSubmitted(uint256 roundId, uint256[] agentIds, uint256[] costs);\\n    event HealRequestFulfilled(uint256 roundId, HealResult[] healResults);\\n    event RandomnessRequested(uint256 roundId, uint256 requestId);\\n    event RandomnessFulfilled(uint256 roundId, uint256 requestId);\\n    event InvalidRandomnessFulfillment(uint256 requestId, uint256 randomnessRequestRoundId, uint256 currentRoundId);\\n    event RoundStarted(uint256 roundId);\\n    event Escaped(uint256 roundId, uint256[] agentIds, uint256[] rewards);\\n    event PrizeClaimed(uint256 agentId, address currency, uint256 amount);\\n    event Wounded(uint256 roundId, uint256[] agentIds);\\n    event Killed(uint256 roundId, uint256[] agentIds);\\n    event Won(uint256 roundId, uint256 agentId);\\n\\n    error ExceededTotalSupply();\\n    error FrontrunLockIsOn();\\n    error GameAlreadyBegun();\\n    error GameNotYetBegun();\\n    error GameIsStillRunning();\\n    error GameOver();\\n    error HealingDisabled();\\n    error InexactNativeTokensSupplied();\\n    error InvalidAgentStatus(uint256 agentId, AgentStatus expectedStatus);\\n    error InvalidHealingRoundsDelay();\\n    error InvalidMaxSupply();\\n    error InvalidMintPeriod();\\n    error InvalidPlacement();\\n    error MaximumHealingRequestPerRoundExceeded();\\n    error MintAlreadyStarted();\\n    error MintCanOnlyBeExtended();\\n    error MintStartIsInThePast();\\n    error NoAgentsLeft();\\n    error NoAgentsProvided();\\n    error NotEnoughMinted();\\n    error NothingToClaim();\\n    error NotInMintPeriod();\\n    error NotAgentOwner();\\n    error Immutable();\\n    error RandomnessRequestAlreadyExists();\\n    error InvalidRandomnessRequestId();\\n    error RoundsToBeWoundedBeforeDeadTooLow();\\n    error StillMinting();\\n    error TooEarlyToStartNewRound();\\n    error TooEarlyToRetryRandomnessRequest();\\n    error TooManyMinted();\\n    error WoundedAgentIdsPerRoundExceeded();\\n\\n    /**\\n     * @notice Sets the mint period.\\n     * @dev If _mintStart is 0, the function call is just a mint end extension.\\n     * @param _mintStart The starting timestamp of the mint period.\\n     * @param _mintEnd The ending timestamp of the mint period.\\n     */\\n    function setMintPeriod(uint40 _mintStart, uint40 _mintEnd) external;\\n\\n    /**\\n     * @notice Mints a number of agents.\\n     * @param to The recipient\\n     * @param quantity The number of agents to mint.\\n     */\\n    function premint(address to, uint256 quantity) external payable;\\n\\n    /**\\n     * @notice Mints a number of agents.\\n     * @param quantity The number of agents to mint.\\n     */\\n    function mint(uint256 quantity) external payable;\\n\\n    /**\\n     * @notice This function is here in case the game's invariant condition does not hold or the game is stuck.\\n     *         Only callable by the contract owner.\\n     */\\n    function emergencyWithdraw() external;\\n\\n    /**\\n     * @notice Starts the game.\\n     * @dev Starting the game sets the current round ID to 1.\\n     */\\n    function startGame() external;\\n\\n    /**\\n     * @notice Starts a new round.\\n     */\\n    function startNewRound() external;\\n\\n    /**\\n     * @notice Close a round after randomness is fullfilled by Chainlink.\\n     * @param requestId The Chainlink request ID.\\n     */\\n    function closeRound(uint256 requestId) external;\\n\\n    /**\\n     * @notice Claims the grand prize. Only callable by the winner.\\n     */\\n    function claimGrandPrize() external;\\n\\n    /**\\n     * @notice Claims the secondary prizes. Only callable by top 50 agents.\\n     * @param agentId The agent ID.\\n     */\\n    function claimSecondaryPrizes(uint256 agentId) external;\\n\\n    /**\\n     * @notice Escape from the game and take some rewards. 80% of the prize pool is distributed to\\n     *         the escaped agents and the rest to the secondary prize pool.\\n     * @param agentIds The agent IDs to escape.\\n     */\\n    function escape(uint256[] calldata agentIds) external;\\n\\n    /**\\n     * @notice Submits a heal request for the specified agent IDs.\\n     * @param agentIds The agent IDs to heal.\\n     */\\n    function heal(uint256[] calldata agentIds) external;\\n\\n    /**\\n     * @notice Get the agent at the specified index.\\n     * @return agent The agent at the specified index.\\n     */\\n    function getAgent(uint256 index) external view returns (Agent memory agent);\\n\\n    /**\\n     * @notice Returns the cost to heal the specified agents\\n     * @dev The cost doubles for each time the agent is healed.\\n     * @param agentIds The agent IDs to heal.\\n     * @return cost The cost to heal the specified agents.\\n     */\\n    function costToHeal(uint256[] calldata agentIds) external view returns (uint256 cost);\\n\\n    /**\\n     * @notice Returns the reward for escaping the game.\\n     * @param agentIds The agent IDs to escape.\\n     * @return reward The reward for escaping the game.\\n     */\\n    function escapeReward(uint256[] calldata agentIds) external view returns (uint256 reward);\\n\\n    /**\\n     * @notice Returns the total number of agents alive.\\n     */\\n    function agentsAlive() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the index of a specific agent ID inside the agents mapping.\\n     * @param agentId The agent ID.\\n     * @return index The index of the agent ID.\\n     */\\n    function agentIndex(uint256 agentId) external view returns (uint256 index);\\n\\n    /**\\n     * @notice Returns a specific round's information.\\n     * @param roundId The round ID.\\n     * @return woundedAgentIds The agent IDs of the wounded agents in the specified round.\\n     * @return healingAgentIds The agent IDs of the healing agents in the specified round.\\n     */\\n    function getRoundInfo(\\n        uint256 roundId\\n    ) external view returns (uint256[] memory woundedAgentIds, uint256[] memory healingAgentIds);\\n}\\n\"\r\n    },\r\n    \"node_modules/@looksrare/contracts-libs/contracts/OwnableTwoSteps.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n// Interfaces\\nimport {IOwnableTwoSteps} from \\\"./interfaces/IOwnableTwoSteps.sol\\\";\\n\\n/**\\n * @title OwnableTwoSteps\\n * @notice This contract offers transfer of ownership in two steps with potential owner\\n *         having to confirm the transaction to become the owner.\\n *         Renouncement of the ownership is also a two-step process since the next potential owner is the address(0).\\n * @author LooksRare protocol team (\ud83d\udc40,\ud83d\udc8e)\\n */\\nabstract contract OwnableTwoSteps is IOwnableTwoSteps {\\n    /**\\n     * @notice Address of the current owner.\\n     */\\n    address public owner;\\n\\n    /**\\n     * @notice Address of the potential owner.\\n     */\\n    address public potentialOwner;\\n\\n    /**\\n     * @notice Ownership status.\\n     */\\n    Status public ownershipStatus;\\n\\n    /**\\n     * @notice Modifier to wrap functions for contracts that inherit this contract.\\n     */\\n    modifier onlyOwner() {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor\\n     * @param _owner The contract's owner\\n     */\\n    constructor(address _owner) {\\n        owner = _owner;\\n        emit NewOwner(_owner);\\n    }\\n\\n    /**\\n     * @notice This function is used to cancel the ownership transfer.\\n     * @dev This function can be used for both cancelling a transfer to a new owner and\\n     *      cancelling the renouncement of the ownership.\\n     */\\n    function cancelOwnershipTransfer() external onlyOwner {\\n        Status _ownershipStatus = ownershipStatus;\\n        if (_ownershipStatus == Status.NoOngoingTransfer) {\\n            revert NoOngoingTransferInProgress();\\n        }\\n\\n        if (_ownershipStatus == Status.TransferInProgress) {\\n            delete potentialOwner;\\n        }\\n\\n        delete ownershipStatus;\\n\\n        emit CancelOwnershipTransfer();\\n    }\\n\\n    /**\\n     * @notice This function is used to confirm the ownership renouncement.\\n     */\\n    function confirmOwnershipRenouncement() external onlyOwner {\\n        if (ownershipStatus != Status.RenouncementInProgress) {\\n            revert RenouncementNotInProgress();\\n        }\\n\\n        delete owner;\\n        delete ownershipStatus;\\n\\n        emit NewOwner(address(0));\\n    }\\n\\n    /**\\n     * @notice This function is used to confirm the ownership transfer.\\n     * @dev This function can only be called by the current potential owner.\\n     */\\n    function confirmOwnershipTransfer() external {\\n        if (ownershipStatus != Status.TransferInProgress) {\\n            revert TransferNotInProgress();\\n        }\\n\\n        if (msg.sender != potentialOwner) {\\n            revert WrongPotentialOwner();\\n        }\\n\\n        owner = msg.sender;\\n        delete ownershipStatus;\\n        delete potentialOwner;\\n\\n        emit NewOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @notice This function is used to initiate the transfer of ownership to a new owner.\\n     * @param newPotentialOwner New potential owner address\\n     */\\n    function initiateOwnershipTransfer(address newPotentialOwner) external onlyOwner {\\n        if (ownershipStatus != Status.NoOngoingTransfer) {\\n            revert TransferAlreadyInProgress();\\n        }\\n\\n        ownershipStatus = Status.TransferInProgress;\\n        potentialOwner = newPotentialOwner;\\n\\n        /**\\n         * @dev This function can only be called by the owner, so msg.sender is the owner.\\n         *      We don't have to SLOAD the owner again.\\n         */\\n        emit InitiateOwnershipTransfer(msg.sender, newPotentialOwner);\\n    }\\n\\n    /**\\n     * @notice This function is used to initiate the ownership renouncement.\\n     */\\n    function initiateOwnershipRenouncement() external onlyOwner {\\n        if (ownershipStatus != Status.NoOngoingTransfer) {\\n            revert TransferAlreadyInProgress();\\n        }\\n\\n        ownershipStatus = Status.RenouncementInProgress;\\n\\n        emit InitiateOwnershipRenouncement();\\n    }\\n\\n    function _onlyOwner() private view {\\n        if (msg.sender != owner) revert NotOwner();\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@looksrare/contracts-libs/contracts/interfaces/generic/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"node_modules/@looksrare/contracts-libs/contracts/ProtocolFee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title ProtocolFee\\n * @notice This contract makes it possible for a contract to charge a protocol fee.\\n * @author LooksRare protocol team (\ud83d\udc40,\ud83d\udc8e)\\n */\\nabstract contract ProtocolFee {\\n    /**\\n     * @dev Emitted when the protocol fee basis points is updated.\\n     */\\n    event ProtocolFeeBpUpdated(uint16 protocolFeeBp);\\n\\n    /**\\n     * @dev Emitted when the protocol fee recipient is updated.\\n     */\\n    event ProtocolFeeRecipientUpdated(address protocolFeeRecipient);\\n\\n    /**\\n     * @dev This error is used when the protocol fee basis points is too high\\n     *      or when the protocol fee recipient is a zero address.\\n     */\\n    error ProtocolFee__InvalidValue();\\n\\n    /**\\n     * @notice The maximum protocol fee in basis points, which is 25%.\\n     */\\n    uint16 public constant MAXIMUM_PROTOCOL_FEE_BP = 2_500;\\n\\n    /**\\n     * @notice The address of the protocol fee recipient.\\n     */\\n    address public protocolFeeRecipient;\\n\\n    /**\\n     * @notice The protocol fee basis points.\\n     */\\n    uint16 public protocolFeeBp;\\n\\n    /**\\n     * @dev This function is used to update the protocol fee recipient. It should be overridden\\n     *      by the contract that inherits from this contract. The function should be guarded\\n     *      by an access control mechanism to prevent unauthorized users from calling it.\\n     * @param _protocolFeeRecipient The address of the protocol fee recipient\\n     */\\n    function updateProtocolFeeRecipient(address _protocolFeeRecipient) external virtual;\\n\\n    /**\\n     * @dev This function is used to update the protocol fee basis points. It should be overridden\\n     *      by the contract that inherits from this contract. The function should be guarded\\n     *      by an access control mechanism to prevent unauthorized users from calling it.\\n     * @param _protocolFeeBp The protocol fee basis points\\n     */\\n    function updateProtocolFeeBp(uint16 _protocolFeeBp) external virtual;\\n\\n    /**\\n     * @param _protocolFeeRecipient The new protocol fee recipient address\\n     */\\n    function _updateProtocolFeeRecipient(address _protocolFeeRecipient) internal {\\n        if (_protocolFeeRecipient == address(0)) {\\n            revert ProtocolFee__InvalidValue();\\n        }\\n        protocolFeeRecipient = _protocolFeeRecipient;\\n        emit ProtocolFeeRecipientUpdated(_protocolFeeRecipient);\\n    }\\n\\n    /**\\n     * @param _protocolFeeBp The new protocol fee in basis points\\n     */\\n    function _updateProtocolFeeBp(uint16 _protocolFeeBp) internal {\\n        if (_protocolFeeBp > MAXIMUM_PROTOCOL_FEE_BP) {\\n            revert ProtocolFee__InvalidValue();\\n        }\\n        protocolFeeBp = _protocolFeeBp;\\n        emit ProtocolFeeBpUpdated(_protocolFeeBp);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@looksrare/contracts-libs/contracts/PackableReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n// Interfaces\\nimport {IReentrancyGuard} from \\\"./interfaces/IReentrancyGuard.sol\\\";\\n\\n/**\\n * @title PackableReentrancyGuard\\n * @notice This contract protects against reentrancy attacks.\\n *         It is adjusted from OpenZeppelin.\\n *         The only difference between this contract and ReentrancyGuard\\n *         is that _status is uint8 instead of uint256 so that it can be\\n *         packed with other contracts' storage variables.\\n * @author LooksRare protocol team (\ud83d\udc40,\ud83d\udc8e)\\n */\\nabstract contract PackableReentrancyGuard is IReentrancyGuard {\\n    uint8 private _status;\\n\\n    /**\\n     * @notice Modifier to wrap functions to prevent reentrancy calls.\\n     */\\n    modifier nonReentrant() {\\n        if (_status == 2) {\\n            revert ReentrancyFail();\\n        }\\n\\n        _status = 2;\\n        _;\\n        _status = 1;\\n    }\\n\\n    constructor() {\\n        _status = 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@looksrare/contracts-libs/contracts/lowLevelCallers/LowLevelERC20Transfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n// Interfaces\\nimport {IERC20} from \\\"../interfaces/generic/IERC20.sol\\\";\\n\\n// Errors\\nimport {ERC20TransferFail, ERC20TransferFromFail} from \\\"../errors/LowLevelErrors.sol\\\";\\nimport {NotAContract} from \\\"../errors/GenericErrors.sol\\\";\\n\\n/**\\n * @title LowLevelERC20Transfer\\n * @notice This contract contains low-level calls to transfer ERC20 tokens.\\n * @author LooksRare protocol team (\ud83d\udc40,\ud83d\udc8e)\\n */\\ncontract LowLevelERC20Transfer {\\n    /**\\n     * @notice Execute ERC20 transferFrom\\n     * @param currency Currency address\\n     * @param from Sender address\\n     * @param to Recipient address\\n     * @param amount Amount to transfer\\n     */\\n    function _executeERC20TransferFrom(address currency, address from, address to, uint256 amount) internal {\\n        if (currency.code.length == 0) {\\n            revert NotAContract();\\n        }\\n\\n        (bool status, bytes memory data) = currency.call(abi.encodeCall(IERC20.transferFrom, (from, to, amount)));\\n\\n        if (!status) {\\n            revert ERC20TransferFromFail();\\n        }\\n\\n        if (data.length > 0) {\\n            if (!abi.decode(data, (bool))) {\\n                revert ERC20TransferFromFail();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Execute ERC20 (direct) transfer\\n     * @param currency Currency address\\n     * @param to Recipient address\\n     * @param amount Amount to transfer\\n     */\\n    function _executeERC20DirectTransfer(address currency, address to, uint256 amount) internal {\\n        if (currency.code.length == 0) {\\n            revert NotAContract();\\n        }\\n\\n        (bool status, bytes memory data) = currency.call(abi.encodeCall(IERC20.transfer, (to, amount)));\\n\\n        if (!status) {\\n            revert ERC20TransferFail();\\n        }\\n\\n        if (data.length > 0) {\\n            if (!abi.decode(data, (bool))) {\\n                revert ERC20TransferFail();\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@looksrare/contracts-libs/contracts/lowLevelCallers/LowLevelWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n// Interfaces\\nimport {IWETH} from \\\"../interfaces/generic/IWETH.sol\\\";\\n\\n/**\\n * @title LowLevelWETH\\n * @notice This contract contains a function to transfer ETH with an option to wrap to WETH.\\n *         If the ETH transfer fails within a gas limit, the amount in ETH is wrapped to WETH and then transferred.\\n * @author LooksRare protocol team (\ud83d\udc40,\ud83d\udc8e)\\n */\\ncontract LowLevelWETH {\\n    /**\\n     * @notice It transfers ETH to a recipient with a specified gas limit.\\n     *         If the original transfers fails, it wraps to WETH and transfers the WETH to recipient.\\n     * @param _WETH WETH address\\n     * @param _to Recipient address\\n     * @param _amount Amount to transfer\\n     * @param _gasLimit Gas limit to perform the ETH transfer\\n     */\\n    function _transferETHAndWrapIfFailWithGasLimit(\\n        address _WETH,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _gasLimit\\n    ) internal {\\n        bool status;\\n\\n        assembly {\\n            status := call(_gasLimit, _to, _amount, 0, 0, 0, 0)\\n        }\\n\\n        if (!status) {\\n            IWETH(_WETH).deposit{value: _amount}();\\n            IWETH(_WETH).transfer(_to, _amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@looksrare/contracts-transfer-manager/contracts/interfaces/ITransferManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\n// Enums\\nimport {TokenType} from \\\"../enums/TokenType.sol\\\";\\n\\n/**\\n * @title ITransferManager\\n * @author LooksRare protocol team (\ud83d\udc40,\ud83d\udc8e)\\n */\\ninterface ITransferManager {\\n    /**\\n     * @notice This struct is only used for transferBatchItemsAcrossCollections.\\n     * @param tokenAddress Token address\\n     * @param tokenType 0 for ERC721, 1 for ERC1155\\n     * @param itemIds Array of item ids to transfer\\n     * @param amounts Array of amounts to transfer\\n     */\\n    struct BatchTransferItem {\\n        address tokenAddress;\\n        TokenType tokenType;\\n        uint256[] itemIds;\\n        uint256[] amounts;\\n    }\\n\\n    /**\\n     * @notice It is emitted if operators' approvals to transfer NFTs are granted by a user.\\n     * @param user Address of the user\\n     * @param operators Array of operator addresses\\n     */\\n    event ApprovalsGranted(address user, address[] operators);\\n\\n    /**\\n     * @notice It is emitted if operators' approvals to transfer NFTs are revoked by a user.\\n     * @param user Address of the user\\n     * @param operators Array of operator addresses\\n     */\\n    event ApprovalsRemoved(address user, address[] operators);\\n\\n    /**\\n     * @notice It is emitted if a new operator is added to the global allowlist.\\n     * @param operator Operator address\\n     */\\n    event OperatorAllowed(address operator);\\n\\n    /**\\n     * @notice It is emitted if an operator is removed from the global allowlist.\\n     * @param operator Operator address\\n     */\\n    event OperatorRemoved(address operator);\\n\\n    /**\\n     * @notice It is returned if the operator to approve has already been approved by the user.\\n     */\\n    error OperatorAlreadyApprovedByUser();\\n\\n    /**\\n     * @notice It is returned if the operator to revoke has not been previously approved by the user.\\n     */\\n    error OperatorNotApprovedByUser();\\n\\n    /**\\n     * @notice It is returned if the transfer caller is already allowed by the owner.\\n     * @dev This error can only be returned for owner operations.\\n     */\\n    error OperatorAlreadyAllowed();\\n\\n    /**\\n     * @notice It is returned if the operator to approve is not in the global allowlist defined by the owner.\\n     * @dev This error can be returned if the user tries to grant approval to an operator address not in the\\n     *      allowlist or if the owner tries to remove the operator from the global allowlist.\\n     */\\n    error OperatorNotAllowed();\\n\\n    /**\\n     * @notice It is returned if the transfer caller is invalid.\\n     *         For a transfer called to be valid, the operator must be in the global allowlist and\\n     *         approved by the 'from' user.\\n     */\\n    error TransferCallerInvalid();\\n\\n    /**\\n     * @notice This function transfers ERC20 tokens.\\n     * @param tokenAddress Token address\\n     * @param from Sender address\\n     * @param to Recipient address\\n     * @param amount amount\\n     */\\n    function transferERC20(\\n        address tokenAddress,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice This function transfers a single item for a single ERC721 collection.\\n     * @param tokenAddress Token address\\n     * @param from Sender address\\n     * @param to Recipient address\\n     * @param itemId Item ID\\n     */\\n    function transferItemERC721(\\n        address tokenAddress,\\n        address from,\\n        address to,\\n        uint256 itemId\\n    ) external;\\n\\n    /**\\n     * @notice This function transfers items for a single ERC721 collection.\\n     * @param tokenAddress Token address\\n     * @param from Sender address\\n     * @param to Recipient address\\n     * @param itemIds Array of itemIds\\n     * @param amounts Array of amounts\\n     */\\n    function transferItemsERC721(\\n        address tokenAddress,\\n        address from,\\n        address to,\\n        uint256[] calldata itemIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    /**\\n     * @notice This function transfers a single item for a single ERC1155 collection.\\n     * @param tokenAddress Token address\\n     * @param from Sender address\\n     * @param to Recipient address\\n     * @param itemId Item ID\\n     * @param amount Amount\\n     */\\n    function transferItemERC1155(\\n        address tokenAddress,\\n        address from,\\n        address to,\\n        uint256 itemId,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice This function transfers items for a single ERC1155 collection.\\n     * @param tokenAddress Token address\\n     * @param from Sender address\\n     * @param to Recipient address\\n     * @param itemIds Array of itemIds\\n     * @param amounts Array of amounts\\n     * @dev It does not allow batch transferring if from = msg.sender since native function should be used.\\n     */\\n    function transferItemsERC1155(\\n        address tokenAddress,\\n        address from,\\n        address to,\\n        uint256[] calldata itemIds,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    /**\\n     * @notice This function transfers items across an array of tokens that can be ERC20, ERC721 and ERC1155.\\n     * @param items Array of BatchTransferItem\\n     * @param from Sender address\\n     * @param to Recipient address\\n     */\\n    function transferBatchItemsAcrossCollections(\\n        BatchTransferItem[] calldata items,\\n        address from,\\n        address to\\n    ) external;\\n\\n    /**\\n     * @notice This function allows a user to grant approvals for an array of operators.\\n     *         Users cannot grant approvals if the operator is not allowed by this contract's owner.\\n     * @param operators Array of operator addresses\\n     * @dev Each operator address must be globally allowed to be approved.\\n     */\\n    function grantApprovals(address[] calldata operators) external;\\n\\n    /**\\n     * @notice This function allows a user to revoke existing approvals for an array of operators.\\n     * @param operators Array of operator addresses\\n     * @dev Each operator address must be approved at the user level to be revoked.\\n     */\\n    function revokeApprovals(address[] calldata operators) external;\\n\\n    /**\\n     * @notice This function allows an operator to be added for the shared transfer system.\\n     *         Once the operator is allowed, users can grant NFT approvals to this operator.\\n     * @param operator Operator address to allow\\n     * @dev Only callable by owner.\\n     */\\n    function allowOperator(address operator) external;\\n\\n    /**\\n     * @notice This function allows the user to remove an operator for the shared transfer system.\\n     * @param operator Operator address to remove\\n     * @dev Only callable by owner.\\n     */\\n    function removeOperator(address operator) external;\\n\\n    /**\\n     * @notice This returns whether the user has approved the operator address.\\n     * The first address is the user and the second address is the operator.\\n     */\\n    function hasUserApprovedOperator(address user, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"node_modules/erc721a/contracts/ERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/UnsafeMathUint256.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nlibrary UnsafeMathUint256 {\\n  function unsafeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n      unchecked {\\n          return a + b;\\n      }\\n  }\\n\\n  function unsafeSubtract(uint256 a, uint256 b) internal pure returns (uint256) {\\n      unchecked {\\n          return a - b;\\n      }\\n  }\\n\\n  function unsafeMultiply(uint256 a, uint256 b) internal pure returns (uint256) {\\n      unchecked {\\n          return a * b;\\n      }\\n  }\\n\\n  function unsafeDivide(uint256 a, uint256 b) internal pure returns (uint256) {\\n      unchecked {\\n          return a / b;\\n      }\\n  }\\n}\\n\"\r\n    },\r\n    \"node_modules/@looksrare/contracts-libs/contracts/interfaces/IOwnableTwoSteps.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IOwnableTwoSteps\\n * @author LooksRare protocol team (\ud83d\udc40,\ud83d\udc8e)\\n */\\ninterface IOwnableTwoSteps {\\n    /**\\n     * @notice This enum keeps track of the ownership status.\\n     * @param NoOngoingTransfer The default status when the owner is set\\n     * @param TransferInProgress The status when a transfer to a new owner is initialized\\n     * @param RenouncementInProgress The status when a transfer to address(0) is initialized\\n     */\\n    enum Status {\\n        NoOngoingTransfer,\\n        TransferInProgress,\\n        RenouncementInProgress\\n    }\\n\\n    /**\\n     * @notice This is returned when there is no transfer of ownership in progress.\\n     */\\n    error NoOngoingTransferInProgress();\\n\\n    /**\\n     * @notice This is returned when the caller is not the owner.\\n     */\\n    error NotOwner();\\n\\n    /**\\n     * @notice This is returned when there is no renouncement in progress but\\n     *         the owner tries to validate the ownership renouncement.\\n     */\\n    error RenouncementNotInProgress();\\n\\n    /**\\n     * @notice This is returned when the transfer is already in progress but the owner tries\\n     *         initiate a new ownership transfer.\\n     */\\n    error TransferAlreadyInProgress();\\n\\n    /**\\n     * @notice This is returned when there is no ownership transfer in progress but the\\n     *         ownership change tries to be approved.\\n     */\\n    error TransferNotInProgress();\\n\\n    /**\\n     * @notice This is returned when the ownership transfer is attempted to be validated by the\\n     *         a caller that is not the potential owner.\\n     */\\n    error WrongPotentialOwner();\\n\\n    /**\\n     * @notice This is emitted if the ownership transfer is cancelled.\\n     */\\n    event CancelOwnershipTransfer();\\n\\n    /**\\n     * @notice This is emitted if the ownership renouncement is initiated.\\n     */\\n    event InitiateOwnershipRenouncement();\\n\\n    /**\\n     * @notice This is emitted if the ownership transfer is initiated.\\n     * @param previousOwner Previous/current owner\\n     * @param potentialOwner Potential/future owner\\n     */\\n    event InitiateOwnershipTransfer(address previousOwner, address potentialOwner);\\n\\n    /**\\n     * @notice This is emitted when there is a new owner.\\n     */\\n    event NewOwner(address newOwner);\\n}\\n\"\r\n    },\r\n    \"node_modules/@looksrare/contracts-libs/contracts/interfaces/IReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IReentrancyGuard\\n * @author LooksRare protocol team (\ud83d\udc40,\ud83d\udc8e)\\n */\\ninterface IReentrancyGuard {\\n    /**\\n     * @notice This is returned when there is a reentrant call.\\n     */\\n    error ReentrancyFail();\\n}\\n\"\r\n    },\r\n    \"node_modules/@looksrare/contracts-libs/contracts/errors/LowLevelErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @notice It is emitted if the ETH transfer fails.\\n */\\nerror ETHTransferFail();\\n\\n/**\\n * @notice It is emitted if the ERC20 approval fails.\\n */\\nerror ERC20ApprovalFail();\\n\\n/**\\n * @notice It is emitted if the ERC20 transfer fails.\\n */\\nerror ERC20TransferFail();\\n\\n/**\\n * @notice It is emitted if the ERC20 transferFrom fails.\\n */\\nerror ERC20TransferFromFail();\\n\\n/**\\n * @notice It is emitted if the ERC721 transferFrom fails.\\n */\\nerror ERC721TransferFromFail();\\n\\n/**\\n * @notice It is emitted if the ERC1155 safeTransferFrom fails.\\n */\\nerror ERC1155SafeTransferFromFail();\\n\\n/**\\n * @notice It is emitted if the ERC1155 safeBatchTransferFrom fails.\\n */\\nerror ERC1155SafeBatchTransferFromFail();\\n\"\r\n    },\r\n    \"node_modules/@looksrare/contracts-libs/contracts/errors/GenericErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @notice It is emitted if the call recipient is not a contract.\\n */\\nerror NotAContract();\\n\"\r\n    },\r\n    \"node_modules/@looksrare/contracts-libs/contracts/interfaces/generic/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@looksrare/contracts-transfer-manager/contracts/enums/TokenType.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nenum TokenType {\\n    ERC20,\\n    ERC721,\\n    ERC1155\\n}\\n\"\r\n    },\r\n    \"node_modules/erc721a/contracts/IERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@chainlink/=node_modules/@chainlink/\",\r\n      \"@ensdomains/=node_modules/@ensdomains/\",\r\n      \"@eth-optimism/=node_modules/@eth-optimism/\",\r\n      \"@looksrare/=node_modules/@looksrare/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc721a/=node_modules/erc721a/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat/=node_modules/hardhat/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 888888\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMintPerAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocksPerRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"agentsToWoundPerRoundInBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundsToBeWoundedBeforeDead\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"looks\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"transferManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"healBaseCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"protocolFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"protocolFeeBp\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"internalType\":\"struct IInfiltration.ConstructorCalldata\",\"name\":\"constructorCalldata\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20TransferFail\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceededTotalSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FrontrunLockIsOn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GameAlreadyBegun\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GameIsStillRunning\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GameNotYetBegun\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GameOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HealingDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Immutable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InexactNativeTokensSupplied\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"enum IInfiltration.AgentStatus\",\"name\":\"expectedStatus\",\"type\":\"uint8\"}],\"name\":\"InvalidAgentStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidHealingRoundsDelay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMaxSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMintPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPlacement\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRandomnessRequestId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaximumHealingRequestPerRoundExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintAlreadyStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintCanOnlyBeExtended\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintStartIsInThePast\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAgentsLeft\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAgentsProvided\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoOngoingTransferInProgress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAgentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInMintPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolFee__InvalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RandomnessRequestAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyFail\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RenouncementNotInProgress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoundsToBeWoundedBeforeDeadTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StillMinting\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooEarlyToRetryRandomnessRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooEarlyToStartNewRound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferAlreadyInProgress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferNotInProgress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WoundedAgentIdsPerRoundExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongPotentialOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CancelOwnershipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"looksAmount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"agentIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"name\":\"Escaped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"enum IInfiltration.HealOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IInfiltration.HealResult[]\",\"name\":\"healResults\",\"type\":\"tuple[]\"}],\"name\":\"HealRequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"agentIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"costs\",\"type\":\"uint256[]\"}],\"name\":\"HealRequestSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InitiateOwnershipRenouncement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"potentialOwner\",\"type\":\"address\"}],\"name\":\"InitiateOwnershipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomnessRequestRoundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentRoundId\",\"type\":\"uint256\"}],\"name\":\"InvalidRandomnessFulfillment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"agentIds\",\"type\":\"uint256[]\"}],\"name\":\"Killed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintEnd\",\"type\":\"uint256\"}],\"name\":\"MintPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PrizeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"protocolFeeBp\",\"type\":\"uint16\"}],\"name\":\"ProtocolFeeBpUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"ProtocolFeeRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RandomnessFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RandomnessRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"RoundStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"Won\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"agentIds\",\"type\":\"uint256[]\"}],\"name\":\"Wounded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AGENTS_TO_WOUND_PER_ROUND_IN_BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BLOCKS_PER_ROUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HEAL_BASE_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_PROTOCOL_FEE_BP\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MINT_PER_ADDRESS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUNDS_TO_BE_WOUNDED_BEFORE_DEAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"agentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agentsAlive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"amountMintedPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGrandPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"claimSecondaryPrizes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"closeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmOwnershipRenouncement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"agentIds\",\"type\":\"uint256[]\"}],\"name\":\"costToHeal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"agentIds\",\"type\":\"uint256[]\"}],\"name\":\"escape\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escapeMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"agentIds\",\"type\":\"uint256[]\"}],\"name\":\"escapeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escapeRewardSplitForSecondaryPrizePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"split\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameInfo\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"activeAgents\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"woundedAgents\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"healingAgents\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"deadAgents\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"escapedAgents\",\"type\":\"uint16\"},{\"internalType\":\"uint40\",\"name\":\"currentRoundId\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"currentRoundBlockNumber\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"randomnessLastRequestedAt\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"prizePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryPrizePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryLooksPrizePool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAgent\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"agentId\",\"type\":\"uint16\"},{\"internalType\":\"enum IInfiltration.AgentStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint40\",\"name\":\"woundedAt\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"healCount\",\"type\":\"uint16\"}],\"internalType\":\"struct IInfiltration.Agent\",\"name\":\"agent\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getRoundInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"woundedAgentIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"healingAgentIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"agentIds\",\"type\":\"uint256[]\"}],\"name\":\"heal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"healingRoundsDelay\",\"type\":\"uint256\"}],\"name\":\"healProbability\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateOwnershipRenouncement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"initiateOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintEnd\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintStart\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownershipStatus\",\"outputs\":[{\"internalType\":\"enum IOwnableTwoSteps.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potentialOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"premint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeBp\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"randomnessRequests\",\"outputs\":[{\"internalType\":\"enum IInfiltration.RandomnessRequestStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint40\",\"name\":\"roundId\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"randomWord\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secondaryPrizePoolAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"placement\",\"type\":\"uint256\"}],\"name\":\"secondaryPrizePoolShareAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shareAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"placement\",\"type\":\"uint256\"}],\"name\":\"secondaryPrizePoolShareBp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"newMintStart\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"newMintEnd\",\"type\":\"uint40\"}],\"name\":\"setMintPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startNewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"updateProtocolFeeBp\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"updateProtocolFeeRecipient\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "Infiltration", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "888888", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000b5a9e5a319c7fda551a30be592c77394bf935c6f000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000b1a2bc2ec50000000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000023000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000030000000000000000000000000f4d2888d29d722226fafa5d9b24f9164c092421e000000000000000000000000271682deb8c4e0901d1a1550ad2e64d568e699098af398995b04c28e9951adb9721ef74c74f93e6a478f39e7e0777be13527e7ef00000000000000000000000000000000000000000000000000000000000002de00000000000000000000000000000000000ea4af05656c17b90f4d64add29e1d0000000000000000000000000000000000000000000000056bc75e2d63100000000000000000000000000000c8c57e4c73c71f72ca0a7e043e5d2d144f98ef1300000000000000000000000000000000000000000000000000000000000005dc000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000000164c6f6f6b735261726520494e46494c54524154494f4e0000000000000000000000000000000000000000000000000000000000000000000000000000000000074c524147454e5400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003468747470733a2f2f6170692e6c6f6f6b73726172652e6f72672f6170692f76312f696e66696c74726174696f6e2f6167656e742f000000000000000000000000", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}