{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"TokenVestingStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Shared.sol\\\";\\nimport \\\"IStateChainGateway.sol\\\";\\nimport \\\"IAddressHolder.sol\\\";\\nimport \\\"ITokenVestingStaking.sol\\\";\\nimport \\\"MockStProvider.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\n\\n/**\\n * @title TokenVestingStaking\\n * @dev A token holder contract that that vests its balance of any ERC20 token to the beneficiary.\\n *      Validator lockup - stakable. Nothing unlocked until end of contract where everything\\n *      unlocks at once. All funds can be staked during the vesting period.\\n *      If revoked send all funds to revoker and block beneficiary releases indefinitely.\\n *      Any staked funds at the moment of revocation can be retrieved by the revoker upon unstaking.\\n *\\n *      The reference to the staking contract is hold by the AddressHolder contract to allow for governance to\\n *      update it in case the staking contract needs to be upgraded.\\n *\\n *      The vesting schedule is time-based (i.e. using block timestamps as opposed to e.g. block numbers), and\\n *      is therefore sensitive to timestamp manipulation (which is something miners can do, to a certain degree).\\n *      Therefore, it is recommended to avoid using short time durations (less than a minute).\\n *\\n */\\ncontract TokenVestingStaking is ITokenVestingStaking, Shared {\\n    using SafeERC20 for IERC20;\\n\\n    // beneficiary of tokens after they are released. It can be transferrable.\\n    address private beneficiary;\\n    bool public immutable transferableBeneficiary;\\n    // the revoker who can cancel the vesting and withdraw any unvested tokens\\n    address private revoker;\\n\\n    // Durations and timestamps are expressed in UNIX time, the same units as block.timestamp.\\n    uint256 public immutable start;\\n    uint256 public immutable end;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    IERC20 public immutable FLIP;\\n\\n    // The contract that holds the reference addresses for staking purposes.\\n    IAddressHolder public immutable addressHolder;\\n\\n    bool public revoked;\\n\\n    // Cumulative counter for amount staked to the st provider\\n    uint256 public stTokenStaked;\\n\\n    // Cumulative counter for amount unstaked from the st provider\\n    uint256 public stTokenUnstaked;\\n\\n    /**\\n     * @param beneficiary_ address of the beneficiary to whom vested tokens are transferred\\n     * @param revoker_   the person with the power to revoke the vesting. Address(0) means it is not revocable.\\n     * @param start_ the unix time when the beneficiary can start staking the tokens.\\n     * @param end_ the unix time of the end of the vesting period, everything withdrawable after\\n     * @param transferableBeneficiary_ whether the beneficiary address can be transferred\\n     * @param addressHolder_ the contract holding the reference address to the ScGateway for staking\\n     * @param flip_ the FLIP token address.\\n     */\\n    constructor(\\n        address beneficiary_,\\n        address revoker_,\\n        uint256 start_,\\n        uint256 end_,\\n        bool transferableBeneficiary_,\\n        IAddressHolder addressHolder_,\\n        IERC20 flip_\\n    ) nzAddr(beneficiary_) nzAddr(address(addressHolder_)) nzAddr(address(flip_)) {\\n        require(start_ <= end_, \\\"Vesting: start_ after end_\\\");\\n        require(block.timestamp < start_, \\\"Vesting: start before current time\\\");\\n\\n        beneficiary = beneficiary_;\\n        revoker = revoker_;\\n        start = start_;\\n        end = end_;\\n        transferableBeneficiary = transferableBeneficiary_;\\n        addressHolder = addressHolder_;\\n        FLIP = flip_;\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                  State-changing functions                //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice  Funds an account in the statechain with some tokens for the nodeID\\n     *          and forces the return address of that to be this contract.\\n     * @param nodeID the nodeID to fund.\\n     * @param amount the amount of FLIP out of the current funds in this contract.\\n     */\\n    function fundStateChainAccount(\\n        bytes32 nodeID,\\n        uint256 amount\\n    ) external override onlyBeneficiary notRevoked afterStart {\\n        address stateChainGateway = addressHolder.getStateChainGateway();\\n\\n        FLIP.approve(stateChainGateway, amount);\\n        IStateChainGateway(stateChainGateway).fundStateChainAccount(nodeID, amount);\\n    }\\n\\n    /**\\n     * @notice  Stakes to the staking provider by transferring an amount of FLIP to the staking minter.\\n     *          It is expected that an amount of stFLIP will be minted to this contract.\\n     * @param amount the amount of FLIP to stake to the staking provider.\\n     */\\n    function stakeToStProvider(uint256 amount) external override onlyBeneficiary notRevoked afterStart {\\n        address stMinter = addressHolder.getStakingAddress();\\n\\n        FLIP.approve(stMinter, amount);\\n\\n        stTokenStaked += amount;\\n\\n        require(IMinter(stMinter).mint(address(this), amount));\\n    }\\n\\n    /**\\n     * @notice  Unstakes from the staking provider by transferring stFLIP to the staking burner.\\n     * @param amount the amount of FLIP to stake to the staking provider.\\n     */\\n    function unstakeFromStProvider(uint256 amount) external override onlyBeneficiary notRevoked returns (uint256) {\\n        (address stBurner, address stFlip) = addressHolder.getUnstakingAddresses();\\n\\n        IERC20(stFlip).approve(stBurner, amount);\\n\\n        stTokenUnstaked += amount;\\n\\n        return IBurner(stBurner).burn(address(this), amount);\\n    }\\n\\n    /**\\n     * @notice Claims the liquid staking provider rewards.\\n     * @param amount_ the amount of rewards to claim. If greater than `totalRewards`, then all rewards are claimed.\\n     * @dev `stTokenCounter` updates after staking/unstaking operation to keep track of the st token principle. Any\\n     *       amount above the principle is considered rewards and thus can be claimed by the beneficiary.\\n     */\\n    function claimStProviderRewards(uint256 amount_) external override onlyBeneficiary notRevoked {\\n        address stFlip = addressHolder.getStFlip();\\n        uint256 totalRewards = stFLIP(stFlip).balanceOf(address(this)) + stTokenUnstaked - stTokenStaked;\\n\\n        uint256 amount = amount_ > totalRewards ? totalRewards : amount_;\\n\\n        stFLIP(stFlip).transfer(beneficiary, amount);\\n    }\\n\\n    /**\\n     * @notice Transfers vested tokens to beneficiary.\\n     * @param token ERC20 token which is being vested.\\n     */\\n    function release(IERC20 token) external override onlyBeneficiary notRevoked {\\n        uint256 unreleased = _releasableAmount(token);\\n        require(unreleased > 0, \\\"Vesting: no tokens are due\\\");\\n\\n        emit TokensReleased(token, unreleased);\\n\\n        token.safeTransfer(beneficiary, unreleased);\\n    }\\n\\n    /**\\n     * @notice Allows the revoker to revoke the vesting and stop the beneficiary from releasing any\\n     *         tokens if the vesting period has not been completed. Any staked tokens at the time of\\n     *         revoking can be retrieved by the revoker upon unstaking via `retrieveRevokedFunds`.\\n     * @param token ERC20 token which is being vested.\\n     */\\n    function revoke(IERC20 token) external override onlyRevoker notRevoked {\\n        require(block.timestamp <= end, \\\"Vesting: vesting expired\\\");\\n\\n        uint256 balance = token.balanceOf(address(this));\\n\\n        uint256 unreleased = _releasableAmount(token);\\n        uint256 refund = balance - unreleased;\\n\\n        revoked = true;\\n\\n        token.safeTransfer(revoker, refund);\\n\\n        emit TokenVestingRevoked(token, refund);\\n    }\\n\\n    /**\\n     * @notice Allows the revoker to retrieve tokens that have been unstaked after the revoke\\n     *         function has been called. Safeguard mechanism in case of unstaking happening\\n     *         after revoke, otherwise funds would be locked.\\n     * @param token ERC20 token which is being vested.\\n     */\\n    function retrieveRevokedFunds(IERC20 token) external override onlyRevoker {\\n        require(revoked, \\\"Vesting: token not revoked\\\");\\n        uint256 balance = token.balanceOf(address(this));\\n\\n        token.safeTransfer(revoker, balance);\\n    }\\n\\n    /**\\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\\n     * @param token ERC20 token which is being vested.\\n     */\\n    function _releasableAmount(IERC20 token) private view returns (uint256) {\\n        return block.timestamp < end ? 0 : token.balanceOf(address(this));\\n    }\\n\\n    /// @dev    Allow the beneficiary to be transferred to a new address if needed\\n    function transferBeneficiary(address beneficiary_) external override onlyBeneficiary nzAddr(beneficiary_) {\\n        require(transferableBeneficiary, \\\"Vesting: beneficiary not transferrable\\\");\\n        emit BeneficiaryTransferred(beneficiary, beneficiary_);\\n        beneficiary = beneficiary_;\\n    }\\n\\n    /// @dev    Allow the revoker to be transferred to a new address if needed\\n    function transferRevoker(address revoker_) external override onlyRevoker nzAddr(revoker_) {\\n        emit RevokerTransferred(revoker, revoker_);\\n        revoker = revoker_;\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                Non-state-changing functions              //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @return the beneficiary address\\n     */\\n    function getBeneficiary() external view override returns (address) {\\n        return beneficiary;\\n    }\\n\\n    /**\\n     * @return the revoker address\\n     */\\n    function getRevoker() external view override returns (address) {\\n        return revoker;\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                      Modifiers                           //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Ensure that the caller is the beneficiary address\\n     */\\n    modifier onlyBeneficiary() {\\n        require(msg.sender == beneficiary, \\\"Vesting: not the beneficiary\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Ensure that the caller is the revoker address\\n     */\\n    modifier onlyRevoker() {\\n        require(msg.sender == revoker, \\\"Vesting: not the revoker\\\");\\n        _;\\n    }\\n\\n    modifier notRevoked() {\\n        require(!revoked, \\\"Vesting: token revoked\\\");\\n        _;\\n    }\\n\\n    modifier afterStart() {\\n        require(block.timestamp >= start, \\\"Vesting: not started\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"Shared.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IShared.sol\\\";\\n\\n/**\\n * @title    Shared contract\\n * @notice   Holds constants and modifiers that are used in multiple contracts\\n * @dev      It would be nice if this could be a library, but modifiers can't be exported :(\\n */\\n\\nabstract contract Shared is IShared {\\n    /// @dev The address used to indicate whether transfer should send native or a token\\n    address internal constant _NATIVE_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address internal constant _ZERO_ADDR = address(0);\\n    bytes32 internal constant _NULL = \\\"\\\";\\n    uint256 internal constant _E_18 = 1e18;\\n\\n    /// @dev    Checks that a uint isn't zero/empty\\n    modifier nzUint(uint256 u) {\\n        require(u != 0, \\\"Shared: uint input is empty\\\");\\n        _;\\n    }\\n\\n    /// @dev    Checks that an address isn't zero/empty\\n    modifier nzAddr(address a) {\\n        require(a != _ZERO_ADDR, \\\"Shared: address input is empty\\\");\\n        _;\\n    }\\n\\n    /// @dev    Checks that a bytes32 isn't zero/empty\\n    modifier nzBytes32(bytes32 b) {\\n        require(b != _NULL, \\\"Shared: bytes32 input is empty\\\");\\n        _;\\n    }\\n\\n    /// @dev    Checks that the pubKeyX is populated\\n    modifier nzKey(Key memory key) {\\n        require(key.pubKeyX != 0, \\\"Shared: pubKeyX is empty\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"IShared.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"IERC20.sol\\\";\\n\\n/**\\n * @title    Shared interface\\n * @notice   Holds structs needed by other interfaces\\n */\\ninterface IShared {\\n    /**\\n     * @dev  SchnorrSECP256K1 requires that each key has a public key part (x coordinate),\\n     *       a parity for the y coordinate (0 if the y ordinate of the public key is even, 1\\n     *       if it's odd)\\n     */\\n    struct Key {\\n        uint256 pubKeyX;\\n        uint8 pubKeyYParity;\\n    }\\n\\n    /**\\n     * @dev  Contains a signature and the nonce used to create it. Also the recovered address\\n     *       to check that the signature is valid\\n     */\\n    struct SigData {\\n        uint256 sig;\\n        uint256 nonce;\\n        address kTimesGAddress;\\n    }\\n\\n    /**\\n     * @param token The address of the token to be transferred\\n     * @param recipient The address of the recipient of the transfer\\n     * @param amount    The amount to transfer, in wei (uint)\\n     */\\n    struct TransferParams {\\n        address token;\\n        address payable recipient;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @param swapID    The unique identifier for this swap (bytes32), used for create2\\n     * @param token     The token to be transferred\\n     */\\n    struct DeployFetchParams {\\n        bytes32 swapID;\\n        address token;\\n    }\\n\\n    /**\\n     * @param fetchContract   The address of the deployed Deposit contract\\n     * @param token     The token to be transferred\\n     */\\n    struct FetchParams {\\n        address payable fetchContract;\\n        address token;\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"IStateChainGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IFLIP.sol\\\";\\nimport \\\"IAggKeyNonceConsumer.sol\\\";\\nimport \\\"IGovernanceCommunityGuarded.sol\\\";\\nimport \\\"IFlipIssuer.sol\\\";\\n\\n/**\\n * @title    StateChainGateway interface\\n */\\ninterface IStateChainGateway is IGovernanceCommunityGuarded, IFlipIssuer, IAggKeyNonceConsumer {\\n    event Funded(bytes32 indexed nodeID, uint256 amount, address funder);\\n    event RedemptionRegistered(\\n        bytes32 indexed nodeID,\\n        uint256 amount,\\n        address indexed redeemAddress,\\n        uint48 startTime,\\n        uint48 expiryTime,\\n        address executor\\n    );\\n    event RedemptionExecuted(bytes32 indexed nodeID, uint256 amount);\\n    event RedemptionExpired(bytes32 indexed nodeID, uint256 amount);\\n    event MinFundingChanged(uint256 oldMinFunding, uint256 newMinFunding);\\n    event GovernanceWithdrawal(address to, uint256 amount);\\n    event FLIPSet(address flip);\\n    event FlipSupplyUpdated(uint256 oldSupply, uint256 newSupply, uint256 stateChainBlockNumber);\\n\\n    struct Redemption {\\n        uint256 amount;\\n        address redeemAddress;\\n        // 48 so that 160 (from redeemAddress) + 48 + 48 is 256 they can all be packed\\n        // into a single 256 bit slot\\n        uint48 startTime;\\n        uint48 expiryTime;\\n        address executor;\\n    }\\n\\n    /**\\n     * @notice  Sets the FLIP address after initialization. We can't do this in the constructor\\n     *          because FLIP contract requires this contract's address on deployment for minting.\\n     *          First this contract is deployed, then the FLIP contract and finally setFLIP\\n     *          should be called. OnlyDeployer modifer for added security since tokens will be\\n     *          minted to this contract before calling setFLIP.\\n     * @param flip FLIP token address\\n     */\\n    function setFlip(IFLIP flip) external;\\n\\n    /**\\n     * @notice          Add FLIP funds to a StateChain account identified with a nodeID\\n     * @dev             Requires the funder to have called `approve` in FLIP\\n     * @param amount    The amount of FLIP tokens\\n     * @param nodeID    The nodeID of the account to fund\\n     */\\n    function fundStateChainAccount(bytes32 nodeID, uint256 amount) external;\\n\\n    /**\\n     * @notice  Redeem FLIP from the StateChain. The State Chain will determine the amount\\n     *          that can be redeemed, but a basic calculation for a validator would be:\\n     *          amount redeemable = stake + rewards - penalties.\\n     * @param sigData   Struct containing the signature data over the message\\n     *                  to verify, signed by the aggregate key.\\n     * @param nodeID    The nodeID of the account redeeming the FLIP\\n     * @param amount    The amount of funds to be locked up\\n     * @param redeemAddress    The redeemAddress who will receive the FLIP\\n     * @param expiryTime   The last valid timestamp that can execute this redemption (uint48)\\n     */\\n    function registerRedemption(\\n        SigData calldata sigData,\\n        bytes32 nodeID,\\n        uint256 amount,\\n        address redeemAddress,\\n        uint48 expiryTime,\\n        address executor\\n    ) external;\\n\\n    /**\\n     * @notice  Execute a pending redemption to get back funds. Cannot execute a pending\\n     *          redemption before 48h have passed after registering it, or after the specified\\n     *          expiry time\\n     * @dev     No need for nzUint(nodeID) since that is handled by `redemption.expiryTime > 0`\\n     * @param nodeID    The nodeID of the account redeeming the FLIP\\n     * @return          The address that received the FLIP and the amount\\n     */\\n    function executeRedemption(bytes32 nodeID) external returns (address, uint256);\\n\\n    /**\\n     * @notice  Compares a given new FLIP supply against the old supply and mints or burns\\n     *          FLIP tokens from this contract as appropriate.\\n     *          It requires a message signed by the aggregate key.\\n     * @param sigData    Struct containing the signature data over the message\\n     *                   to verify, signed by the aggregate key.\\n     * @param newTotalSupply        new total supply of FLIP\\n     * @param stateChainBlockNumber State Chain block number for the new total supply\\n     */\\n    function updateFlipSupply(SigData calldata sigData, uint256 newTotalSupply, uint256 stateChainBlockNumber) external;\\n\\n    /**\\n     * @notice  Updates the address that is allowed to issue FLIP tokens. This will be used when this\\n     *          contract needs an upgrade. A new contract will be deployed and all the FLIP will be\\n     *          transferred to it via the redemption process. Finally the right to issue FLIP will be transferred.\\n     * @param sigData     Struct containing the signature data over the message\\n     *                    to verify, signed by the aggregate key.\\n     * @param newIssuer   New contract that will issue FLIP tokens.\\n     * @param omitChecks Allow the omission of the extra checks in a special case\\n     */\\n    function updateFlipIssuer(SigData calldata sigData, address newIssuer, bool omitChecks) external;\\n\\n    /**\\n     * @notice      Set the minimum amount of funds needed for `fundStateChainAccount` to be able\\n     *              to be called. Used to prevent spamming of funding.\\n     * @param newMinFunding   The new minimum funding amount\\n     */\\n    function setMinFunding(uint256 newMinFunding) external;\\n\\n    /**\\n     * @notice Withdraw all FLIP to governance address in case of emergency. This withdrawal needs\\n     *         to be approved by the Community, it is a last resort. Used to rectify an emergency.\\n     *         The governance address is also updated as the issuer of FLIP.\\n     */\\n    function govWithdraw() external;\\n\\n    /**\\n     * @notice Update the FLIP Issuer address with the governance address in case of emergency.\\n     *         This needs to be approved by the Community, it is a last resort. Used to rectify\\n     *         an emergency.\\n     */\\n    function govUpdateFlipIssuer() external;\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                  Non-state-changing functions            //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice  Get the minimum amount of funds that's required for funding\\n     *          an account on the StateChain.\\n     * @return  The minimum amount (uint)\\n     */\\n    function getMinimumFunding() external view returns (uint256);\\n\\n    /**\\n     * @notice  Get the pending redemption for the input nodeID. If there was never\\n     *          a pending redemption for this nodeID, or it has already been executed\\n     *          (and therefore deleted), it'll return (0, 0x00..., 0, 0)\\n     * @param nodeID   The nodeID which has a pending redemption\\n     * @return         The redemption (Redemption struct)\\n     */\\n    function getPendingRedemption(bytes32 nodeID) external view returns (Redemption memory);\\n\\n    /**\\n     * @notice  Get the last state chain block number that the supply was updated at\\n     * @return  The state chain block number of the last update\\n     */\\n    function getLastSupplyUpdateBlockNumber() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IFLIP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\n\\n/**\\n * @title    FLIP interface for the FLIP utility token\\n */\\ninterface IFLIP is IERC20 {\\n    event IssuerUpdated(address oldIssuer, address newIssuer);\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                  State-changing functions                //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    function mint(address account, uint amount) external;\\n\\n    function burn(address account, uint amount) external;\\n\\n    function updateIssuer(address newIssuer) external;\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                  Non-state-changing functions            //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    function getIssuer() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"IAggKeyNonceConsumer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IShared.sol\\\";\\nimport \\\"IKeyManager.sol\\\";\\n\\n/**\\n * @title    AggKeyNonceConsumer interface\\n */\\n\\ninterface IAggKeyNonceConsumer is IShared {\\n    event UpdatedKeyManager(address keyManager);\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                  State-changing functions                //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n    /**\\n     * @notice  Update KeyManager reference. Used if KeyManager contract is updated\\n     * @param sigData    Struct containing the signature data over the message\\n     *                   to verify, signed by the aggregate key.\\n     * @param keyManager New KeyManager's address\\n     * @param omitChecks Allow the omission of the extra checks in a special case\\n     */\\n    function updateKeyManager(SigData calldata sigData, IKeyManager keyManager, bool omitChecks) external;\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                          Getters                         //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice  Get the KeyManager address/interface that's used to validate sigs\\n     * @return  The KeyManager (IKeyManager)\\n     */\\n    function getKeyManager() external view returns (IKeyManager);\\n}\\n\"\r\n    },\r\n    \"IKeyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IShared.sol\\\";\\n\\n/**\\n * @title    KeyManager interface\\n * @notice   The interface for functions KeyManager implements\\n */\\ninterface IKeyManager is IShared {\\n    event AggKeySetByAggKey(Key oldAggKey, Key newAggKey);\\n    event AggKeySetByGovKey(Key oldAggKey, Key newAggKey);\\n    event GovKeySetByAggKey(address oldGovKey, address newGovKey);\\n    event GovKeySetByGovKey(address oldGovKey, address newGovKey);\\n    event CommKeySetByAggKey(address oldCommKey, address newCommKey);\\n    event CommKeySetByCommKey(address oldCommKey, address newCommKey);\\n    event SignatureAccepted(SigData sigData, address signer);\\n    event GovernanceAction(bytes32 message);\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                  State-changing functions                //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    function consumeKeyNonce(SigData memory sigData, bytes32 contractMsgHash) external;\\n\\n    function setAggKeyWithAggKey(SigData memory sigData, Key memory newAggKey) external;\\n\\n    function setAggKeyWithGovKey(Key memory newAggKey) external;\\n\\n    function setGovKeyWithAggKey(SigData calldata sigData, address newGovKey) external;\\n\\n    function setGovKeyWithGovKey(address newGovKey) external;\\n\\n    function setCommKeyWithAggKey(SigData calldata sigData, address newCommKey) external;\\n\\n    function setCommKeyWithCommKey(address newCommKey) external;\\n\\n    function govAction(bytes32 message) external;\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                  Non-state-changing functions            //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    function getAggregateKey() external view returns (Key memory);\\n\\n    function getGovernanceKey() external view returns (address);\\n\\n    function getCommunityKey() external view returns (address);\\n\\n    function isNonceUsedByAggKey(uint256 nonce) external view returns (bool);\\n\\n    function getLastValidateTime() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IGovernanceCommunityGuarded.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IShared.sol\\\";\\n\\n/**\\n * @title    GovernanceCommunityGuarded interface\\n */\\n\\ninterface IGovernanceCommunityGuarded is IShared {\\n    event CommunityGuardDisabled(bool communityGuardDisabled);\\n    event Suspended(bool suspended);\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                  State-changing functions                //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n    /**\\n     * @notice  Enable Community Guard\\n     */\\n\\n    function enableCommunityGuard() external;\\n\\n    /**\\n     * @notice  Disable Community Guard\\n     */\\n    function disableCommunityGuard() external;\\n\\n    /**\\n     * @notice  Can be used to suspend contract execution - only executable by\\n     *          governance and only to be used in case of emergency.\\n     */\\n    function suspend() external;\\n\\n    /**\\n     * @notice      Resume contract execution\\n     */\\n    function resume() external;\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                          Getters                         //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice  Get the Community Key\\n     * @return  The CommunityKey\\n     */\\n    function getCommunityKey() external view returns (address);\\n\\n    /**\\n     * @notice  Get the Community Guard state\\n     * @return  The Community Guard state\\n     */\\n    function getCommunityGuardDisabled() external view returns (bool);\\n\\n    /**\\n     * @notice  Get suspended state\\n     * @return  The suspended state\\n     */\\n    function getSuspendedState() external view returns (bool);\\n\\n    /**\\n     * @notice  Get governor address\\n     * @return  The governor address\\n     */\\n    function getGovernor() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"IFlipIssuer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IFLIP.sol\\\";\\n\\n/**\\n * @title    Flip Issuer interface\\n * @notice   This interface is required when updating the FLIP issuer.\\n *           Additionally, any contract inheriting this should implement the\\n *           mint and burn capabilities to interact with the FLIP contract.\\n */\\ninterface IFlipIssuer {\\n    /**\\n     * @notice  Get the FLIP token address\\n     * @return  The address of FLIP\\n     */\\n    function getFLIP() external view returns (IFLIP);\\n}\\n\"\r\n    },\r\n    \"IAddressHolder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAddressHolder {\\n    event StateChainGatewayUpdated(address oldStateChainGateway, address newStateChainGateway);\\n    event StakingAddressesUpdated(\\n        address oldStMinter,\\n        address oldStBurner,\\n        address oldStFLIP,\\n        address newStMinter,\\n        address newStBurner,\\n        address newStFLIP\\n    );\\n    event GovernorTransferred(address oldGovernor, address newGovernor);\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                  State-changing functions                //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    function updateStateChainGateway(address _stateChainGateway) external;\\n\\n    function updateStakingAddresses(address _stMinter, address _stBurner, address _stFLIP) external;\\n\\n    function transferGovernor(address _governor) external;\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                Non-state-changing functions              //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    function getStateChainGateway() external view returns (address);\\n\\n    function getStakingAddress() external view returns (address);\\n\\n    function getUnstakingAddresses() external view returns (address, address);\\n\\n    function getStFlip() external view returns (address);\\n\\n    function getGovernor() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"ITokenVestingStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"SafeERC20.sol\\\";\\n\\ninterface ITokenVestingStaking {\\n    event TokensReleased(IERC20 indexed token, uint256 amount);\\n    event TokenVestingRevoked(IERC20 indexed token, uint256 refund);\\n\\n    event BeneficiaryTransferred(address oldBeneficiary, address newBeneficiary);\\n    event RevokerTransferred(address oldRevoker, address newRevoker);\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                  State-changing functions                //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    function fundStateChainAccount(bytes32 nodeID, uint256 amount) external;\\n\\n    function stakeToStProvider(uint256 amount) external;\\n\\n    function unstakeFromStProvider(uint256 amount) external returns (uint256);\\n\\n    function claimStProviderRewards(uint256 amount_) external;\\n\\n    function release(IERC20 token) external;\\n\\n    function revoke(IERC20 token) external;\\n\\n    function retrieveRevokedFunds(IERC20 token) external;\\n\\n    function transferBeneficiary(address beneficiary_) external;\\n\\n    function transferRevoker(address revoker_) external;\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                Non-state-changing functions              //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    function getBeneficiary() external view returns (address);\\n\\n    function getRevoker() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"draft-IERC20Permit.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"MockStProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"ERC20.sol\\\";\\n\\ninterface IMinter {\\n    function mint(address to, uint256 amount) external returns (bool);\\n}\\n\\ninterface IBurner {\\n    function burn(address to, uint256 amount) external returns (uint256);\\n}\\n\\ncontract Minter is IMinter {\\n    stFLIP public stflip;\\n    IERC20 public flip;\\n    address public output;\\n\\n    constructor(address _stflip, address _flip, address _output) {\\n        stflip = stFLIP(_stflip);\\n        flip = IERC20(_flip);\\n        output = address(_output);\\n    }\\n\\n    function mint(address to, uint256 amount) external returns (bool) {\\n        // require(stflip.minter() == address(this), \\\"this is not a valid mint contract\\\");\\n        flip.transferFrom(msg.sender, output, amount);\\n\\n        _mint(to, amount);\\n        return true;\\n    }\\n\\n    function _mint(address to, uint256 amount) internal {\\n        stflip.mint(to, amount);\\n        // emit Mint(to, amount);\\n    }\\n}\\n\\ncontract Burner is IBurner {\\n    stFLIP public stflip;\\n    IERC20 public flip;\\n\\n    struct Burn {\\n        address user;\\n        uint256 amount;\\n        bool completed;\\n    }\\n    Burn[] public burns;\\n\\n    constructor(address _stflip, address _flip) {\\n        stflip = stFLIP(_stflip);\\n        flip = IERC20(_flip);\\n    }\\n\\n    // NOTE: Burn & Redeem functions are simplified for the sake of testing\\n    function burn(address to, uint256 amount) external returns (uint256) {\\n        stflip.transferFrom(msg.sender, address(this), amount);\\n\\n        burns.push(Burn(to, amount, false));\\n        stflip.burn(amount, address(this));\\n\\n        return burns.length - 1;\\n    }\\n\\n    function redeem(uint256 burnId) external {\\n        require(burns[burnId].completed == false, \\\"completed\\\"); // Audit: Cache the burns[Burnid]\\n\\n        burns[burnId].completed = true;\\n        flip.transfer(burns[burnId].user, burns[burnId].amount);\\n    }\\n}\\n\\n// solhint-disable-next-line contract-name-camelcase\\ncontract stFLIP is ERC20 {\\n    address public minter;\\n    address public burner;\\n\\n    event Burn(address from, uint256 amount, address refundee);\\n\\n    constructor() ERC20(\\\"StakedFLIP\\\", \\\"stFLIP\\\") {}\\n\\n    function initialize(address _minter, address _burner) public {\\n        require(minter == address(0) && burner == address(0), \\\"already initialized\\\");\\n        minter = _minter;\\n        burner = _burner;\\n    }\\n\\n    function mint(address to, uint256 amount) public {\\n        require(msg.sender == minter, \\\"only minter can mint\\\");\\n        _mint(to, amount);\\n    }\\n\\n    function burn(uint256 value, address refundee) public {\\n        require(msg.sender == burner, \\\"only burner can burn\\\");\\n        emit Burn(msg.sender, value, refundee);\\n        _burn(msg.sender, value);\\n    }\\n\\n    function mockSlash(address account, uint256 amount) public {\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"IERC20Metadata.sol\\\";\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"libraries\": {\r\n      \"TokenVestingStaking.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"revoker_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferableBeneficiary_\",\"type\":\"bool\"},{\"internalType\":\"contract IAddressHolder\",\"name\":\"addressHolder_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"flip_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"BeneficiaryTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRevoker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRevoker\",\"type\":\"address\"}],\"name\":\"RevokerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refund\",\"type\":\"uint256\"}],\"name\":\"TokenVestingRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FLIP\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressHolder\",\"outputs\":[{\"internalType\":\"contract IAddressHolder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"claimStProviderRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nodeID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundStateChainAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRevoker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"retrieveRevokedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stTokenStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stTokenUnstaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeToStProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary_\",\"type\":\"address\"}],\"name\":\"transferBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"revoker_\",\"type\":\"address\"}],\"name\":\"transferRevoker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferableBeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeFromStProvider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenVestingStaking", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "0000000000000000000000004cefec39e702dddda97e93b968e7535283d601e100000000000000000000000038a4bcc04f5136e6408589a440f495d7ad0f34db00000000000000000000000000000000000000000000000000000000656d720000000000000000000000000000000000000000000000000000000000674072400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b3797a0f2d2a55eb058277c1fe4ba052a97d2136000000000000000000000000826180541412d574cf1336d22c0c0a287822678a", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}