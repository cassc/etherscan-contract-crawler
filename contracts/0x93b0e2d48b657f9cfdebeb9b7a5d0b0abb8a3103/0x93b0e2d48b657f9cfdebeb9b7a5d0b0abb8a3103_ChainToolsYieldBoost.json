{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"ctls/YieldBooster.sol\": {\r\n      \"content\": \"\\r\\n//SPDX-License-Identifier: UNLICENSED\\r\\n/*                              \\r\\n                    CHAINTOOLS 2023. DEFI REIMAGINED\\r\\n\\r\\n                                                               2023\\r\\n\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800            2021           \u28f0\u28fe\u28ff\u28f6\u2844\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28002019\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800     \u2839\u28ffV4\u2844\u2877\u2800\u2800\u2800\u2800\u2800   \\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800 \u2880\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800 \u28e4\u28fe\u28ff\u28f7\u28e6\u2840\u2800\u2800\u2800\u2800   \u28ff\u28ff\u284f\u2801\u2800\u2800\u2800\u2800\u2800   \\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800 \u2880\u28f4\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800 \u2880\u28ff\u28ff\u28ff\u28ff\u28ff\u2804\u2800\u2800\u2800  \u28f0\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800   \\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800 \u2880\u28f4\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800 \u2880\u28f4\u28ff\u28ff\u28ff\u281f\u281b\u280b\u2800\u2800\u2800 \u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800   \\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800 \u2880\u28f4\u28ff\u28ff\u28ff\u28ff\u28ff\u281f\u2809\u2809\u2809\u2801\u2880\u28f4\u28ff\u28ffV3\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800  \u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28c7\u2800\u2800\u2800\u2800\u2800\u2800   \\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800 \u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u281b\u2800\u2800\u2800\u2800\u2800 \u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u2800\u2800 \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e7\u2840\u2800\u2800\u2800\u2800   \\r\\n\u2800\u2800\u2800        2017\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ffV2\u28ff\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28c4\u2800\u2800\u2800\u2800\u2800\u2800 \u28b9\u28ff \u28ff\u28ff\u28ff\u28ff\u2819\u28bf\u28c6\u2800\u2800\u2800   \\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e4\u28f4\u28e6\u28e4\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e6\u2840\u2800\u2800\u2800\u2800\u2808\u28bb\u28ff\u28ff\u28ff\u28ff\u281b\u283f\u283f\u2836\u2836\u28f6\u2800  \u28ff \u28b8\u28ff\u28ff\u28ff\u28ff\u28c6\u2839\u2807\u2800\u2800   \\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28f4\u28ff\u28ff\u28ff\u28ff\u28f7\u2846\u2800\u2800\u2800\u2800\u2838\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u2809\u281b\u28bf\u28f7\u2844\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\u28e6\u2840\u2800\u2800\u2800\u2800\u2800  \u2839\u2807\u28ff\u28ff\u28ff\u28ff\u28ff\u2846\u2800\u2800\u2800\u2800   \\r\\n\u2800\u2800\u2800\u2800\u28e0\u28f4\u28ff\u28ffV1\u28ff\u28ff\u28ff\u284f\u281b\u2803\u2800\u2800\u2800\u2800\u2800\u2839\u28ff\u28ff\u28ff\u28ff\u28ff\u28c7\u2800\u2800\u2818\u280b\u2801\u2800\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800  \u28ff\u28ff\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800   \\r\\n\u2800\u2800\u28e0\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800 \u2838\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800  \u2800\u28ff\u28ff\u285f\u28bf\u28ff\u28ff\u2800\u2800\u2800\u2800   \\r\\n\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u281b\u2809\u2819\u28ff\u28ff\u28ff\u28e6\u2840\u2800\u2800\u2800\u2800\u2800 \u2888\u28ff\u28ff\u285f\u28b9\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28ff\u28ff\u287f\u2808\u28ff\u28ff\u285f\u2800\u2800\u2800\u2800\u2800  \u28b8\u28ff\u28ff\u2800\u28b8\u28ff\u28ff\u2800\u2800\u2800\u2800   \\r\\n\u2800\u2800\u2839\u28ff\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u283b\u28ff\u28ff\u28ff\u28ff\u28f6\u28c4\u2800\u2800\u2800\u28b0\u28ff\u28ff\u285f\u2801\u28fe\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28f6\u28ff\u281f\u280b\u2800\u28bc\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2800  \u28ff\u28ff\u2801\u2800\u28b9\u28ff\u28ff\u2800\u2800\u2800\u2800   \\r\\n\u2800\u2880\u28f4\u28ff\u287f\u280b\u28b9\u28ff\u2847\u2800\u2800\u2808\u2819\u28ff\u28c7\u2819\u28ff\u28f7\u2800\u2800\u28b8\u28ff\u285f\u2800\u2800\u28bb\u28ff\u284f\u2800\u2800\u2800\u2800\u2800\u2880\u28fc\u287f\u2801\u2800\u2800\u2800\u2818\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800   \u28a8\u28ff\u2847\u2800\u2800\u2800\u28ff\u28ff\u2800\u2800\u2800\u2800   \\r\\n\u28f4\u28ff\u285f\u2809\u2800\u2800\u28fe\u28ff\u2847\u2800\u2800\u2800\u2800\u2888\u28ff\u2844\u2800\u2809\u2800\u2800\u28fc\u28ff\u2846\u2800\u2800\u28b8\u28ff\u28f7\u2800\u2800\u2800\u2800\u28b4\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ef\u2840\u2800\u2800\u2800\u2800    \u28b8\u28ff\u28c7\u2800\u2800\u2800\u28ba\u28ff\u2844\u2800\u2800\u2800   \\r\\n\u2808\u283b\u2837\u2804\u2800\u2800\u28ff\u28ff\u28f7\u28e4\u28e0\u2800\u2800\u2808\u283d\u2837\u2800\u2800\u2800\u2838\u281f\u281b\u281b\u2812\u2836\u2838\u28ff\u28ff\u28f7\u28e6\u28e4\u28c4\u2808\u283b\u2837\u2804\u2800\u2800\u2800\u283e\u283f\u283f\u28ff\u28f6\u28e4\u2800    \u2818\u281b\u281b\u281b\u2812\u2800\u2838\u283f\u283f\u2826 \\r\\n\\r\\n\\r\\nTelegram: https://t.me/ChaintoolsOfficial\\r\\nWebsite: https://www.chaintools.ai/\\r\\nWhitepaper: https://chaintools-whitepaper.gitbook.io/\\r\\nTwitter: https://twitter.com/ChaintoolsTech\\r\\ndApp: https://www.chaintools.wtf/\\r\\n*/\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\n// import \\\"forge-std/console.sol\\\";\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n    function getAmountsOut(\\r\\n        uint256 amountIn,\\r\\n        address[] memory path\\r\\n    ) external view returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\r\\n}\\r\\n\\r\\ninterface IV2Pair {\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function burn(\\r\\n        address to\\r\\n    ) external returns (uint256 amount0, uint256 amount1);\\r\\n}\\r\\n\\r\\ninterface IV3Pool {\\r\\n    function liquidity() external view returns (uint128 Liq);\\r\\n\\r\\n    struct Info {\\r\\n        uint128 liquidity;\\r\\n        uint256 feeGrowthInside0LastX128;\\r\\n        uint256 feeGrowthInside1LastX128;\\r\\n        uint128 tokensOwed0;\\r\\n        uint128 tokensOwed1;\\r\\n    }\\r\\n\\r\\n    function initialize(uint160 sqrtPriceX96) external;\\r\\n\\r\\n    function positions(\\r\\n        bytes32 key\\r\\n    ) external view returns (IV3Pool.Info memory liqInfo);\\r\\n\\r\\n    function swap(\\r\\n        address recipient,\\r\\n        bool zeroForOne,\\r\\n        int256 amountSpecified,\\r\\n        uint160 sqrtPriceLimitX96,\\r\\n        bytes memory data\\r\\n    ) external returns (int256 amount0, int256 amount1);\\r\\n\\r\\n    function burn(\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        uint128 amount\\r\\n    ) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function collect(\\r\\n        address recipient,\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        uint128 amount0Requested,\\r\\n        uint128 amount1Requested\\r\\n    ) external returns (uint128 amount0, uint128 amount1);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (uint160, int24, uint16, uint16, uint16, uint8, bool);\\r\\n\\r\\n    function flash(\\r\\n        address recipient,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function uniswapV3FlashCallback(\\r\\n        uint256 fee0,\\r\\n        uint256 fee1,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n\\r\\n    function mint(\\r\\n        address recipient,\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        uint128 amount,\\r\\n        bytes calldata data\\r\\n    ) external returns (uint256 amount0, uint256 amount1);\\r\\n}\\r\\n\\r\\ninterface IWETH {\\r\\n    function withdraw(uint256 wad) external;\\r\\n\\r\\n    function approve(address who, uint256 wad) external returns (bool);\\r\\n\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address dst, uint256 wad) external returns (bool);\\r\\n\\r\\n    function balanceOf(address _owner) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IQuoterV2 {\\r\\n    function quoteExactInputSingle(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint24 fee,\\r\\n        uint256 amountIn,\\r\\n        uint160 sqrtPriceLimitX96\\r\\n    ) external returns (uint256 amountOut);\\r\\n}\\r\\n\\r\\ninterface IV3Factory {\\r\\n    function getPool(\\r\\n        address token0,\\r\\n        address token1,\\r\\n        uint24 poolFee\\r\\n    ) external view returns (address);\\r\\n\\r\\n    function createPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external returns (address);\\r\\n}\\r\\n\\r\\ninterface INonfungiblePositionManager {\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    struct IncreaseLiquidityParams {\\r\\n        uint256 tokenId;\\r\\n        uint256 amount0Desired;\\r\\n        uint256 amount1Desired;\\r\\n        uint256 amount0Min;\\r\\n        uint256 amount1Min;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    function increaseLiquidity(\\r\\n        INonfungiblePositionManager.IncreaseLiquidityParams calldata params\\r\\n    ) external returns (uint128 liquidity, uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function tokenOfOwnerByIndex(\\r\\n        address owner,\\r\\n        uint256 index\\r\\n    ) external view returns (uint256 tokenId);\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) external;\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    struct MintParams {\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint24 fee;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        uint256 amount0Desired;\\r\\n        uint256 amount1Desired;\\r\\n        uint256 amount0Min;\\r\\n        uint256 amount1Min;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    function mint(\\r\\n        MintParams calldata mp\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 tokenId,\\r\\n            uint128 liquidity,\\r\\n            uint256 amount0,\\r\\n            uint256 amount1\\r\\n        );\\r\\n\\r\\n    function collect(\\r\\n        CollectParams calldata params\\r\\n    ) external payable returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    struct CollectParams {\\r\\n        uint256 tokenId;\\r\\n        address recipient;\\r\\n        uint128 amount0Max;\\r\\n        uint128 amount1Max;\\r\\n    }\\r\\n\\r\\n    struct DecreaseLiquidityParams {\\r\\n        uint256 tokenId;\\r\\n        uint128 liquidity;\\r\\n        uint256 amount0Min;\\r\\n        uint256 amount1Min;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    function decreaseLiquidity(\\r\\n        DecreaseLiquidityParams calldata dl\\r\\n    ) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function positions(\\r\\n        uint256 tokenId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint96 nonce,\\r\\n            address operator,\\r\\n            address token0,\\r\\n            address token1,\\r\\n            uint24 fee,\\r\\n            int24 tickLower,\\r\\n            int24 tickUpper,\\r\\n            uint128 liquidity,\\r\\n            uint256 feeGrowthInside0LastX128,\\r\\n            uint256 feeGrowthInside1LastX128,\\r\\n            uint128 tokensOwed0,\\r\\n            uint128 tokensOwed1\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IRouterV3 {\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function WETH9() external view returns (address);\\r\\n\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external returns (uint256 amountIn);\\r\\n\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n}\\r\\n\\r\\n// Credits: https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/TickMath.sol\\r\\nlibrary TickMath {\\r\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\r\\n    int24 internal constant MIN_TICK = -887272;\\r\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\r\\n    int24 internal constant MAX_TICK = 887272;\\r\\n\\r\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\r\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\r\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\r\\n    uint160 internal constant MAX_SQRT_RATIO =\\r\\n        1461446703485210103287273052203988822378723970342;\\r\\n\\r\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\r\\n    /// @dev Throws if |tick| > max tick\\r\\n    /// @param tick The input tick for the above formula\\r\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\r\\n    /// at the given tick\\r\\n    function getSqrtRatioAtTick(\\r\\n        int24 tick\\r\\n    ) internal pure returns (uint160 sqrtPriceX96) {\\r\\n        uint256 absTick = tick < 0\\r\\n            ? uint256(-int256(tick))\\r\\n            : uint256(int256(tick));\\r\\n        require(absTick <= uint256(int256(MAX_TICK)), \\\"T\\\");\\r\\n\\r\\n        uint256 ratio = absTick & 0x1 != 0\\r\\n            ? 0xfffcb933bd6fad37aa2d162d1a594001\\r\\n            : 0x100000000000000000000000000000000;\\r\\n        if (absTick & 0x2 != 0)\\r\\n            ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\r\\n        if (absTick & 0x4 != 0)\\r\\n            ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\r\\n        if (absTick & 0x8 != 0)\\r\\n            ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\r\\n        if (absTick & 0x10 != 0)\\r\\n            ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\r\\n        if (absTick & 0x20 != 0)\\r\\n            ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\r\\n        if (absTick & 0x40 != 0)\\r\\n            ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\r\\n        if (absTick & 0x80 != 0)\\r\\n            ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\r\\n        if (absTick & 0x100 != 0)\\r\\n            ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\r\\n        if (absTick & 0x200 != 0)\\r\\n            ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\r\\n        if (absTick & 0x400 != 0)\\r\\n            ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\r\\n        if (absTick & 0x800 != 0)\\r\\n            ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\r\\n        if (absTick & 0x1000 != 0)\\r\\n            ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\r\\n        if (absTick & 0x2000 != 0)\\r\\n            ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\r\\n        if (absTick & 0x4000 != 0)\\r\\n            ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\r\\n        if (absTick & 0x8000 != 0)\\r\\n            ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\r\\n        if (absTick & 0x10000 != 0)\\r\\n            ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\r\\n        if (absTick & 0x20000 != 0)\\r\\n            ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\r\\n        if (absTick & 0x40000 != 0)\\r\\n            ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\r\\n        if (absTick & 0x80000 != 0)\\r\\n            ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\r\\n\\r\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\r\\n\\r\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\r\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\r\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\r\\n        sqrtPriceX96 = uint160(\\r\\n            (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface YieldVault {\\r\\n    function getDeviation(\\r\\n        uint256 amountIn,\\r\\n        uint256 startTickDeviation\\r\\n    ) external view returns (uint256 adjusted);\\r\\n\\r\\n    function getCurrentTick() external view returns (int24 cTick);\\r\\n\\r\\n    function getStartTickDeviation(\\r\\n        int24 currentTick\\r\\n    ) external view returns (uint256 perc);\\r\\n\\r\\n    function findPoolFee(\\r\\n        address token0,\\r\\n        address token1\\r\\n    ) external view returns (uint24 poolFee);\\r\\n\\r\\n    function getPosition(\\r\\n        uint256 tokenId\\r\\n    ) external view returns (address token0, address token1, uint128 liquidity);\\r\\n\\r\\n    function getTickDistance(\\r\\n        uint256 flag\\r\\n    ) external view returns (int24 tickDistance);\\r\\n\\r\\n    function findApprovalToken(\\r\\n        address pool\\r\\n    ) external view returns (address token);\\r\\n\\r\\n    function findApprovalToken(\\r\\n        address token0,\\r\\n        address token1\\r\\n    ) external view returns (address token);\\r\\n\\r\\n    function buyback(\\r\\n        uint256 flag,\\r\\n        uint128 internalWETHAmt,\\r\\n        uint128 internalCTLSAmt,\\r\\n        address to,\\r\\n        uint256 id\\r\\n    ) external returns (uint256 t0, uint256 t1);\\r\\n\\r\\n    function keeper() external view returns(address);\\r\\n}\\r\\ninterface ctls {\\r\\n    function adjustFomo(uint16 a,uint256 b,address c) external;\\r\\n}\\r\\n\\r\\ncontract ChainToolsYieldBooster {\\r\\n    INonfungiblePositionManager internal immutable positionManager;\\r\\n    address internal immutable token;\\r\\n    address internal immutable pool;\\r\\n    address internal immutable multiSig;\\r\\n    address internal immutable WETH;\\r\\n    address internal immutable v3Router;\\r\\n    address internal YIELD_VAULT;\\r\\n    address internal immutable keeper;\\r\\n    event REWARDPOOLFEE(uint256 totalVolume);\\r\\n\\r\\n    constructor(address _CTLS, address _pool, address _yield_vault) {\\r\\n        token = _CTLS;\\r\\n        pool = _pool;\\r\\n        v3Router = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\\r\\n        multiSig = 0xb0Df68E0bf4F54D06A4a448735D2a3d7D97A2222;\\r\\n        YIELD_VAULT = _yield_vault;\\r\\n        positionManager = INonfungiblePositionManager(\\r\\n            0xC36442b4a4522E871399CD717aBDD847Ab11FE88\\r\\n        );\\r\\n        keeper = 0x5648C24Ea7cFE703836924bF2080ceFa44A12cA8;\\r\\n        WETH = IRouterV3(v3Router).WETH9();\\r\\n        // WETH = 0x0877fD90eD6CD35c7C0472b69F190B8C9aF0B53b;\\r\\n    }\\r\\n\\r\\n    function preventFragmentations(address who) external {\\r\\n        require(msg.sender == multiSig || msg.sender == token, \\\"multiSig\\\");\\r\\n        if (who == address(0)) {\\r\\n            address fac = positionManager.factory();\\r\\n            address _pool = IV3Factory(fac).createPool(WETH, token, 3000);\\r\\n            ctls(payable(token)).adjustFomo(5, 0, _pool);\\r\\n            _pool = IV3Factory(fac).createPool(WETH, token, 500);\\r\\n            ctls(payable(token)).adjustFomo(5, 0, _pool);\\r\\n        } else {\\r\\n            ctls(payable(token)).adjustFomo(5, 0, who);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function yield(\\r\\n        uint256 id,\\r\\n        uint256 times,\\r\\n        uint256 startAmt,\\r\\n        uint256 flag,\\r\\n        uint128 a0,\\r\\n        uint128 a1,\\r\\n        address to\\r\\n    ) external returns (uint256 c2, uint256 c3) {\\r\\n        require(msg.sender == multiSig || msg.sender == keeper, \\\"multiSig\\\");\\r\\n        bool breakLoop;\\r\\n        for (uint256 i; i < times; ) {\\r\\n            unchecked {\\r\\n                int256 borrow2;\\r\\n                if (!breakLoop) {\\r\\n                    try\\r\\n                        IV3Pool(pool).swap(\\r\\n                            address(this),\\r\\n                            false,\\r\\n                            -int256(startAmt),\\r\\n                            1461446703485210103287273052203988822378723970341,\\r\\n                            \\\"\\\"\\r\\n                        )\\r\\n                    returns (int256 _a1, int256) {\\r\\n                        borrow2 = _a1;\\r\\n                    } catch {\\r\\n                        breakLoop = true;\\r\\n                    }\\r\\n                    try\\r\\n                        IV3Pool(pool).swap(\\r\\n                            address(this),\\r\\n                            true,\\r\\n                            -int256(borrow2),\\r\\n                            4295128740,\\r\\n                            \\\"\\\"\\r\\n                        )\\r\\n                    {} catch {\\r\\n                        breakLoop = true;\\r\\n                    }\\r\\n                } else {\\r\\n                    break;\\r\\n                }\\r\\n\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        try YieldVault(YIELD_VAULT).buyback(flag, a0, a1, to, id) returns (\\r\\n            uint256 c0,\\r\\n            uint256 c1\\r\\n        ) {\\r\\n            c2 = c0;\\r\\n            c3 = c1;\\r\\n        } catch {}\\r\\n\\r\\n        emit REWARDPOOLFEE(startAmt * times * 2);\\r\\n    }\\r\\n\\r\\n    function uniswapV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata\\r\\n    ) external {\\r\\n        address _pool = pool;\\r\\n        assembly {\\r\\n            if iszero(eq(caller(), _pool)) {\\r\\n                revert(0, 0)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (amount0Delta < 0) {\\r\\n            address sendToken = token;\\r\\n            assembly {\\r\\n                let inputMem := mload(0x40)\\r\\n                mstore(\\r\\n                    inputMem,\\r\\n                    0xa9059cbb00000000000000000000000000000000000000000000000000000000\\r\\n                )\\r\\n                mstore(add(inputMem, 0x04), _pool)\\r\\n                mstore(add(inputMem, 0x24), amount1Delta)\\r\\n                pop(call(gas(), sendToken, 0, inputMem, 0x44, 0, 0))\\r\\n            }\\r\\n        } else {\\r\\n            address sendToken = WETH;\\r\\n            assembly {\\r\\n                let inputMem := mload(0x40)\\r\\n                mstore(\\r\\n                    inputMem,\\r\\n                    0xa9059cbb00000000000000000000000000000000000000000000000000000000\\r\\n                )\\r\\n                mstore(add(inputMem, 0x04), _pool)\\r\\n                mstore(add(inputMem, 0x24), amount0Delta)\\r\\n                pop(call(gas(), sendToken, 0, inputMem, 0x44, 0, 0))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function changeYieldVaultAddress(address newAdr) external {\\r\\n        require(msg.sender == multiSig, \\\"multiSig\\\");\\r\\n        YIELD_VAULT = newAdr;\\r\\n    }\\r\\n\\r\\n    function withdraw(address what) external {\\r\\n        require(msg.sender == multiSig, \\\"multiSig\\\");\\r\\n        IERC20(what).transfer(\\r\\n            multiSig,\\r\\n            IERC20(what).balanceOf(address(this)) - 1\\r\\n        );\\r\\n        if (address(this).balance > 0) {\\r\\n            payable(multiSig).transfer(address(this).balance);\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CTLS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yield_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalVolume\",\"type\":\"uint256\"}],\"name\":\"REWARDPOOLFEE\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdr\",\"type\":\"address\"}],\"name\":\"changeYieldVaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"preventFragmentations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"what\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"a0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"a1\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"yield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"c2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"c3\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ChainToolsYieldBooster", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dbecdd726f6ad8e24afc78fe3cc8eb7b73c2d94d000000000000000000000000ceb492c5e67385e2a08265352d646a0c32a5d085000000000000000000000000a373f8a0c75e2315444079c3745bcc97653b0bd5", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9803876281e87a7721739ad87f4c2110f6297925dfed7cbb6017f5f427bdc303"}