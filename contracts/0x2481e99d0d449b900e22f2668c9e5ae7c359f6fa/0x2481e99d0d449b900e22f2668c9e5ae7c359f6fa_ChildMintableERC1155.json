{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/child/IChildERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of IChildERC1155\\n */\\ninterface IChildERC1155 is IERC1155MetadataURIUpgradeable {\\n    /**\\n     * @dev Sets the value for {rootToken} and {uri_}\\n     *\\n     * This value is immutable: it can only be set once during\\n     * initialization.\\n     */\\n    function initialize(address rootToken_, string calldata uri_) external;\\n\\n    /**\\n     * @notice Returns predicate address controlling the child token\\n     * @return address Returns the address of the predicate\\n     */\\n    function predicate() external view returns (address);\\n\\n    /**\\n     * @notice Returns address of the token on the root chain\\n     * @return address Returns the address of the predicate\\n     */\\n    function rootToken() external view returns (address);\\n\\n    /**\\n     * @notice Mints an NFT token to a particular address\\n     * @dev Can only be called by the predicate address\\n     * @param account Account of the user to mint the tokens to\\n     * @param id Index of NFT to mint to the account\\n     * @param amount Amount of NFT to mint\\n     * @return bool Returns true if function call is successful\\n     */\\n    function mint(address account, uint256 id, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @notice Mints multiple NFTs to one address\\n     * @dev single destination for compliance with the general format of EIP-1155\\n     * @param accounts Array of addresses to mint each NFT to\\n     * @param tokenIds Array of indexes of the NFTs to be minted\\n     * @param amounts Array of the amount of each NFT to be minted\\n     * @return bool Returns true if function call is successful\\n     */\\n    function mintBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Burns an NFT tokens from a particular address\\n     * @dev Can only be called by the predicate address\\n     * @param from Address to burn the NFTs from\\n     * @param id Index of NFT to burn from the account\\n     * @param amount Amount of NFT to burn\\n     * @return bool Returns true if function call is successful\\n     */\\n    function burn(address from, uint256 id, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @notice Burns multiple NFTs from one address\\n     * @dev included for compliance with the general format of EIP-1155\\n     * @param from Address to burn NFTs from\\n     * @param tokenIds Array of indexes of the NFTs to be minted\\n     * @param amounts Array of the amount of each NFT to be minted\\n     * @return bool Returns true if function call is successful\\n     */\\n    function burnBatch(address from, uint256[] calldata tokenIds, uint256[] calldata amounts) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStateSender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IStateSender {\\n    function syncState(address receiver, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/root/IChildMintableERC1155Predicate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"../child/IChildERC1155.sol\\\";\\nimport \\\"./IL2StateReceiver.sol\\\";\\n\\ninterface IChildMintableERC1155Predicate is IL2StateReceiver {\\n    event MintableERC1155Deposit(\\n        address indexed rootToken,\\n        address indexed childToken,\\n        address sender,\\n        address indexed receiver,\\n        uint256 tokenId,\\n        uint256 amount\\n    );\\n    event MintableERC1155DepositBatch(\\n        address indexed rootToken,\\n        address indexed childToken,\\n        address indexed sender,\\n        address[] receivers,\\n        uint256[] tokenIds,\\n        uint256[] amounts\\n    );\\n    event MintableERC1155Withdraw(\\n        address indexed rootToken,\\n        address indexed childToken,\\n        address sender,\\n        address indexed receiver,\\n        uint256 tokenId,\\n        uint256 amount\\n    );\\n    event MintableERC1155WithdrawBatch(\\n        address indexed rootToken,\\n        address indexed childToken,\\n        address indexed sender,\\n        address[] receivers,\\n        uint256[] tokenIds,\\n        uint256[] amounts\\n    );\\n    event MintableTokenMapped(address indexed rootToken, address indexed childToken);\\n\\n    function initialize(\\n        address newStateSender,\\n        address newExitHelper,\\n        address newRootERC721Predicate,\\n        address newChildTokenTemplate\\n    ) external;\\n\\n    function withdraw(IChildERC1155 childToken, uint256 tokenId, uint256 amount) external;\\n\\n    function withdrawTo(IChildERC1155 childToken, address receiver, uint256 tokenId, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/root/IL2StateReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IL2StateReceiver {\\n    /**\\n     * @notice Called by exit helper when state is received from L2\\n     * @param sender Address of the sender on the child chain\\n     * @param data Data sent by the sender\\n     */\\n    function onL2StateReceive(uint256 id, address sender, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"contracts/root/ChildMintableERC1155Predicate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"../interfaces/root/IChildMintableERC1155Predicate.sol\\\";\\nimport \\\"../interfaces/child/IChildERC1155.sol\\\";\\nimport \\\"../interfaces/IStateSender.sol\\\";\\n\\n/**\\n    @title ChildMintableERC1155Predicate\\n    @author Polygon Technology (@QEDK)\\n    @notice Enables mintable ERC1155 token deposits and withdrawals across an arbitrary root chain and child chain\\n */\\n// solhint-disable reason-string\\ncontract ChildMintableERC1155Predicate is Initializable, IChildMintableERC1155Predicate {\\n    IStateSender public stateSender;\\n    address public exitHelper;\\n    address public rootERC1155Predicate;\\n    address public childTokenTemplate;\\n    bytes32 public constant DEPOSIT_SIG = keccak256(\\\"DEPOSIT\\\");\\n    bytes32 public constant DEPOSIT_BATCH_SIG = keccak256(\\\"DEPOSIT_BATCH\\\");\\n    bytes32 public constant WITHDRAW_SIG = keccak256(\\\"WITHDRAW\\\");\\n    bytes32 public constant WITHDRAW_BATCH_SIG = keccak256(\\\"WITHDRAW_BATCH\\\");\\n    bytes32 public constant MAP_TOKEN_SIG = keccak256(\\\"MAP_TOKEN\\\");\\n\\n    mapping(address => address) public rootTokenToChildToken;\\n\\n    modifier onlyValidToken(IChildERC1155 childToken) {\\n        require(_verifyContract(childToken), \\\"ChildMintableERC1155Predicate: NOT_CONTRACT\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialization function for ChildMintableERC1155Predicate\\n     * @param newStateSender Address of StateSender to send exit information to\\n     * @param newExitHelper Address of ExitHelper to receive deposit information from\\n     * @param newRootERC1155Predicate Address of root ERC1155 predicate to communicate with\\n     * @param newChildTokenTemplate Address of child token implementation to deploy clones of\\n     * @dev Can only be called once.\\n     */\\n    function initialize(\\n        address newStateSender,\\n        address newExitHelper,\\n        address newRootERC1155Predicate,\\n        address newChildTokenTemplate\\n    ) public virtual initializer {\\n        _initialize(newStateSender, newExitHelper, newRootERC1155Predicate, newChildTokenTemplate);\\n    }\\n\\n    /**\\n     * @notice Function to be used for token deposits\\n     * @param sender Address of the sender on the root chain\\n     * @param data Data sent by the sender\\n     * @dev Can be extended to include other signatures for more functionality\\n     */\\n    function onL2StateReceive(uint256 /* id */, address sender, bytes calldata data) external {\\n        require(msg.sender == exitHelper, \\\"ChildMintableERC1155Predicate: ONLY_EXIT_HELPER\\\");\\n        require(sender == rootERC1155Predicate, \\\"ChildMintableERC1155Predicate: ONLY_ROOT_PREDICATE\\\");\\n\\n        if (bytes32(data[:32]) == DEPOSIT_SIG) {\\n            _beforeTokenDeposit();\\n            _deposit(data[32:]);\\n            _afterTokenDeposit();\\n        } else if (bytes32(data[:32]) == DEPOSIT_BATCH_SIG) {\\n            _beforeTokenDeposit();\\n            _depositBatch(data);\\n            _afterTokenDeposit();\\n        } else if (bytes32(data[:32]) == MAP_TOKEN_SIG) {\\n            _mapToken(data);\\n        } else {\\n            revert(\\\"ChildMintableERC1155Predicate: INVALID_SIGNATURE\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Function to withdraw tokens from the withdrawer to themselves on the root chain\\n     * @param childToken Address of the child token being withdrawn\\n     * @param tokenId Index of the NFT to withdraw\\n     * @param amount Amount of the NFT to withdraw\\n     */\\n    function withdraw(IChildERC1155 childToken, uint256 tokenId, uint256 amount) external {\\n        _beforeTokenWithdraw();\\n        _withdraw(childToken, msg.sender, tokenId, amount);\\n        _afterTokenWithdraw();\\n    }\\n\\n    /**\\n     * @notice Function to withdraw tokens from the withdrawer to another address on the root chain\\n     * @param childToken Address of the child token being withdrawn\\n     * @param receiver Address of the receiver on the root chain\\n     * @param tokenId Index of the NFT to withdraw\\n     * @param amount Amount of NFT to withdraw\\n     */\\n    function withdrawTo(IChildERC1155 childToken, address receiver, uint256 tokenId, uint256 amount) external {\\n        _beforeTokenWithdraw();\\n        _withdraw(childToken, receiver, tokenId, amount);\\n        _afterTokenWithdraw();\\n    }\\n\\n    /**\\n     * @notice Function to batch withdraw tokens from the withdrawer to other addresses on the root chain\\n     * @param childToken Address of the child token being withdrawn\\n     * @param receivers Addresses of the receivers on the root chain\\n     * @param tokenIds indices of the NFTs to withdraw\\n     * @param amounts Amounts of NFTs to withdraw\\n     */\\n    function withdrawBatch(\\n        IChildERC1155 childToken,\\n        address[] calldata receivers,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts\\n    ) external {\\n        _beforeTokenWithdraw();\\n        _withdrawBatch(childToken, receivers, tokenIds, amounts);\\n        _afterTokenWithdraw();\\n    }\\n\\n    /**\\n     * @notice Internal initialization function for ChildMintableERC1155Predicate\\n     * @param newStateSender Address of StateSender to send exit information to\\n     * @param newExitHelper Address of ExitHelper to receive deposit information from\\n     * @param newRootERC1155Predicate Address of root ERC1155 predicate to communicate with\\n     * @param newChildTokenTemplate Address of child token implementation to deploy clones of\\n     * @dev Can be called multiple times.\\n     */\\n    function _initialize(\\n        address newStateSender,\\n        address newExitHelper,\\n        address newRootERC1155Predicate,\\n        address newChildTokenTemplate\\n    ) internal {\\n        require(\\n            newStateSender != address(0) &&\\n                newExitHelper != address(0) &&\\n                newRootERC1155Predicate != address(0) &&\\n                newChildTokenTemplate != address(0),\\n            \\\"ChildMintableERC1155Predicate: BAD_INITIALIZATION\\\"\\n        );\\n        stateSender = IStateSender(newStateSender);\\n        exitHelper = newExitHelper;\\n        rootERC1155Predicate = newRootERC1155Predicate;\\n        childTokenTemplate = newChildTokenTemplate;\\n    }\\n\\n    // solhint-disable no-empty-blocks\\n    // slither-disable-start dead-code\\n    function _beforeTokenDeposit() internal virtual {}\\n\\n    function _beforeTokenWithdraw() internal virtual {}\\n\\n    function _afterTokenDeposit() internal virtual {}\\n\\n    function _afterTokenWithdraw() internal virtual {}\\n\\n    // slither-disable-end dead-code\\n\\n    function _withdraw(\\n        IChildERC1155 childToken,\\n        address receiver,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) private onlyValidToken(childToken) {\\n        address rootToken = childToken.rootToken();\\n\\n        require(\\n            rootTokenToChildToken[rootToken] == address(childToken),\\n            \\\"ChildMintableERC1155Predicate: UNMAPPED_TOKEN\\\"\\n        );\\n        // a mapped token should never have root token unset\\n        assert(rootToken != address(0));\\n        // a mapped token should never have predicate unset\\n        assert(childToken.predicate() == address(this));\\n\\n        require(childToken.burn(msg.sender, tokenId, amount), \\\"ChildMintableERC1155Predicate: BURN_FAILED\\\");\\n        stateSender.syncState(\\n            rootERC1155Predicate,\\n            abi.encode(WITHDRAW_SIG, rootToken, msg.sender, receiver, tokenId, amount)\\n        );\\n        // slither-disable-next-line reentrancy-events\\n        emit MintableERC1155Withdraw(rootToken, address(childToken), msg.sender, receiver, tokenId, amount);\\n    }\\n\\n    function _withdrawBatch(\\n        IChildERC1155 childToken,\\n        address[] calldata receivers,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts\\n    ) private onlyValidToken(childToken) {\\n        address rootToken = childToken.rootToken();\\n\\n        require(\\n            rootTokenToChildToken[rootToken] == address(childToken),\\n            \\\"ChildMintableERC1155Predicate: UNMAPPED_TOKEN\\\"\\n        );\\n        // a mapped token should never have root token unset\\n        assert(rootToken != address(0));\\n        // a mapped token should never have predicate unset\\n        assert(childToken.predicate() == address(this));\\n\\n        require(\\n            receivers.length == tokenIds.length && tokenIds.length == amounts.length,\\n            \\\"ChildMintableERC1155Predicate: INVALID_LENGTH\\\"\\n        );\\n\\n        require(childToken.burnBatch(msg.sender, tokenIds, amounts), \\\"ChildMintableERC1155Predicate: BURN_FAILED\\\");\\n\\n        stateSender.syncState(\\n            rootERC1155Predicate,\\n            abi.encode(WITHDRAW_BATCH_SIG, rootToken, msg.sender, receivers, tokenIds, amounts)\\n        );\\n        // slither-disable-next-line reentrancy-events\\n        emit MintableERC1155WithdrawBatch(rootToken, address(childToken), msg.sender, receivers, tokenIds, amounts);\\n    }\\n\\n    function _deposit(bytes calldata data) private {\\n        (address depositToken, address depositor, address receiver, uint256 tokenId, uint256 amount) = abi.decode(\\n            data,\\n            (address, address, address, uint256, uint256)\\n        );\\n\\n        IChildERC1155 childToken = IChildERC1155(rootTokenToChildToken[depositToken]);\\n\\n        require(address(childToken) != address(0), \\\"ChildMintableERC1155Predicate: UNMAPPED_TOKEN\\\");\\n        // a mapped token should always pass specifications\\n        assert(_verifyContract(childToken));\\n\\n        address rootToken = IChildERC1155(childToken).rootToken();\\n\\n        // a mapped child token should match deposited token\\n        assert(rootToken == depositToken);\\n        // a mapped token should never have root token unset\\n        assert(rootToken != address(0));\\n        // a mapped token should never have predicate unset\\n        assert(IChildERC1155(childToken).predicate() == address(this));\\n        require(\\n            IChildERC1155(childToken).mint(receiver, tokenId, amount),\\n            \\\"ChildMintableERC1155Predicate: MINT_FAILED\\\"\\n        );\\n        // slither-disable-next-line reentrancy-events\\n        emit MintableERC1155Deposit(depositToken, address(childToken), depositor, receiver, tokenId, amount);\\n    }\\n\\n    function _depositBatch(bytes calldata data) private {\\n        (\\n            ,\\n            address depositToken,\\n            address depositor,\\n            address[] memory receivers,\\n            uint256[] memory tokenIds,\\n            uint256[] memory amounts\\n        ) = abi.decode(data, (bytes32, address, address, address[], uint256[], uint256[]));\\n\\n        IChildERC1155 childToken = IChildERC1155(rootTokenToChildToken[depositToken]);\\n\\n        require(address(childToken) != address(0), \\\"ChildMintableERC1155Predicate: UNMAPPED_TOKEN\\\");\\n        // a mapped token should always pass specifications\\n        assert(_verifyContract(childToken));\\n\\n        address rootToken = IChildERC1155(childToken).rootToken();\\n\\n        // a mapped child token should match deposited token\\n        assert(rootToken == depositToken);\\n        // a mapped token should never have root token unset\\n        assert(rootToken != address(0));\\n        // a mapped token should never have predicate unset\\n        assert(IChildERC1155(childToken).predicate() == address(this));\\n        require(\\n            IChildERC1155(childToken).mintBatch(receivers, tokenIds, amounts),\\n            \\\"ChildMintableERC1155Predicate: MINT_FAILED\\\"\\n        );\\n        // slither-disable-next-line reentrancy-events\\n        emit MintableERC1155DepositBatch(depositToken, address(childToken), depositor, receivers, tokenIds, amounts);\\n    }\\n\\n    /**\\n     * @notice Function to be used for mapping a root token to a child token\\n     * @dev Allows for 1-to-1 mappings for any root token to a child token\\n     */\\n    function _mapToken(bytes calldata data) private {\\n        (, address rootToken, string memory uri_) = abi.decode(data, (bytes32, address, string));\\n        assert(rootToken != address(0)); // invariant since root predicate performs the same check\\n        assert(rootTokenToChildToken[rootToken] == address(0)); // invariant since root predicate performs the same check\\n        IChildERC1155 childToken = IChildERC1155(\\n            Clones.cloneDeterministic(childTokenTemplate, keccak256(abi.encodePacked(rootToken)))\\n        );\\n        rootTokenToChildToken[rootToken] = address(childToken);\\n        childToken.initialize(rootToken, uri_);\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit MintableTokenMapped(rootToken, address(childToken));\\n    }\\n\\n    // slither does not handle try-catch blocks correctly\\n    // slither-disable-next-line unused-return\\n    function _verifyContract(IChildERC1155 childToken) private view returns (bool) {\\n        if (address(childToken).code.length == 0) {\\n            return false;\\n        }\\n        // slither-disable-next-line uninitialized-local,variable-scope\\n        try childToken.supportsInterface(0xd9b67a26) returns (bool support) {\\n            return support;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    // slither-disable-next-line unused-state,naming-convention\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 115\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintableERC1155Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"MintableERC1155DepositBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintableERC1155Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"MintableERC1155WithdrawBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childToken\",\"type\":\"address\"}],\"name\":\"MintableTokenMapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPOSIT_BATCH_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAP_TOKEN_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_BATCH_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"childTokenTemplate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStateSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newExitHelper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newRootERC1155Predicate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newChildTokenTemplate\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onL2StateReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootERC1155Predicate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rootTokenToChildToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateSender\",\"outputs\":[{\"internalType\":\"contract IStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChildERC1155\",\"name\":\"childToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChildERC1155\",\"name\":\"childToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChildERC1155\",\"name\":\"childToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ChildMintableERC1155Predicate", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "115", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}