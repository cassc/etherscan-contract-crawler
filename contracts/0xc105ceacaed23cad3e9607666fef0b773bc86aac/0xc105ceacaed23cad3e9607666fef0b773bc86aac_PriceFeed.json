{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"PriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\nimport \\\"IAggregatorV3Interface.sol\\\";\\nimport \\\"Address.sol\\\";\\nimport \\\"PrismaMath.sol\\\";\\nimport \\\"PrismaOwnable.sol\\\";\\n\\n/**\\n    @title Prisma Multi Token Price Feed\\n    @notice Based on Gravita's PriceFeed:\\n            https://github.com/Gravita-Protocol/Gravita-SmartContracts/blob/9b69d555f3567622b0f84df8c7f1bb5cd9323573/contracts/PriceFeed.sol\\n\\n            Prisma's implementation additionally caches price values within a block and incorporates exchange rate settings for derivative tokens (e.g. stETH -> wstETH).\\n */\\ncontract PriceFeed is PrismaOwnable {\\n    struct OracleRecord {\\n        IAggregatorV3Interface chainLinkOracle;\\n        uint8 decimals;\\n        uint32 heartbeat;\\n        bytes4 sharePriceSignature;\\n        uint8 sharePriceDecimals;\\n        bool isFeedWorking;\\n        bool isEthIndexed;\\n    }\\n\\n    struct PriceRecord {\\n        uint96 scaledPrice;\\n        uint32 timestamp;\\n        uint32 lastUpdated;\\n        uint80 roundId;\\n    }\\n\\n    struct FeedResponse {\\n        uint80 roundId;\\n        int256 answer;\\n        uint256 timestamp;\\n        bool success;\\n    }\\n\\n    // Custom Errors --------------------------------------------------------------------------------------------------\\n\\n    error PriceFeed__InvalidFeedResponseError(address token);\\n    error PriceFeed__FeedFrozenError(address token);\\n    error PriceFeed__UnknownFeedError(address token);\\n    error PriceFeed__HeartbeatOutOfBoundsError();\\n\\n    // Events ---------------------------------------------------------------------------------------------------------\\n\\n    event NewOracleRegistered(address token, address chainlinkAggregator, bool isEthIndexed);\\n    event PriceFeedStatusUpdated(address token, address oracle, bool isWorking);\\n    event PriceRecordUpdated(address indexed token, uint256 _price);\\n\\n    /** Constants ---------------------------------------------------------------------------------------------------- */\\n\\n    // Used to convert a chainlink price answer to an 18-digit precision uint\\n    uint256 public constant TARGET_DIGITS = 18;\\n\\n    // Responses are considered stale this many seconds after the oracle's heartbeat\\n    uint256 public constant RESPONSE_TIMEOUT_BUFFER = 1 hours;\\n\\n    // Maximum deviation allowed between two consecutive Chainlink oracle prices. 18-digit precision.\\n    uint256 public constant MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND = 5e17; // 50%\\n\\n    // State ------------------------------------------------------------------------------------------------------------\\n\\n    mapping(address => OracleRecord) public oracleRecords;\\n    mapping(address => PriceRecord) public priceRecords;\\n\\n    struct OracleSetup {\\n        address token;\\n        address chainlink;\\n        uint32 heartbeat;\\n        bytes4 sharePriceSignature;\\n        uint8 sharePriceDecimals;\\n        bool isEthIndexed;\\n    }\\n\\n    constructor(address _prismaCore, address ethFeed, OracleSetup[] memory oracles) PrismaOwnable(_prismaCore) {\\n        _setOracle(address(0), ethFeed, 3600, 0, 0, false);\\n        for (uint i = 0; i < oracles.length; i++) {\\n            OracleSetup memory o = oracles[i];\\n            _setOracle(o.token, o.chainlink, o.heartbeat, o.sharePriceSignature, o.sharePriceDecimals, o.isEthIndexed);\\n        }\\n    }\\n\\n    // Admin routines ---------------------------------------------------------------------------------------------------\\n\\n    /**\\n        @notice Set the oracle for a specific token\\n        @param _token Address of the LST to set the oracle for\\n        @param _chainlinkOracle Address of the chainlink oracle for this LST\\n        @param _heartbeat Oracle heartbeat, in seconds\\n        @param sharePriceSignature Four byte function selector to be used when calling `_collateral`, in order to obtain the share price\\n        @param sharePriceDecimals Decimal precision used in the returned share price\\n        @param _isEthIndexed True if the base currency is ETH\\n     */\\n    function setOracle(\\n        address _token,\\n        address _chainlinkOracle,\\n        uint32 _heartbeat,\\n        bytes4 sharePriceSignature,\\n        uint8 sharePriceDecimals,\\n        bool _isEthIndexed\\n    ) external onlyOwner {\\n        _setOracle(_token, _chainlinkOracle, _heartbeat, sharePriceSignature, sharePriceDecimals, _isEthIndexed);\\n    }\\n\\n    function _setOracle(\\n        address _token,\\n        address _chainlinkOracle,\\n        uint32 _heartbeat,\\n        bytes4 sharePriceSignature,\\n        uint8 sharePriceDecimals,\\n        bool _isEthIndexed\\n    ) internal {\\n        if (_heartbeat > 86400) revert PriceFeed__HeartbeatOutOfBoundsError();\\n        IAggregatorV3Interface newFeed = IAggregatorV3Interface(_chainlinkOracle);\\n        (FeedResponse memory currResponse, FeedResponse memory prevResponse, ) = _fetchFeedResponses(newFeed, 0);\\n\\n        if (!_isFeedWorking(currResponse, prevResponse)) {\\n            revert PriceFeed__InvalidFeedResponseError(_token);\\n        }\\n        if (_isPriceStale(currResponse.timestamp, _heartbeat)) {\\n            revert PriceFeed__FeedFrozenError(_token);\\n        }\\n\\n        OracleRecord memory record = OracleRecord({\\n            chainLinkOracle: newFeed,\\n            decimals: newFeed.decimals(),\\n            heartbeat: _heartbeat,\\n            sharePriceSignature: sharePriceSignature,\\n            sharePriceDecimals: sharePriceDecimals,\\n            isFeedWorking: true,\\n            isEthIndexed: _isEthIndexed\\n        });\\n\\n        oracleRecords[_token] = record;\\n        PriceRecord memory _priceRecord = priceRecords[_token];\\n\\n        _processFeedResponses(_token, record, currResponse, prevResponse, _priceRecord);\\n        emit NewOracleRegistered(_token, _chainlinkOracle, _isEthIndexed);\\n    }\\n\\n    // Public functions -------------------------------------------------------------------------------------------------\\n\\n    /**\\n        @notice Get the latest price returned from the oracle\\n        @dev You can obtain these values by calling `TroveManager.fetchPrice()`\\n             rather than directly interacting with this contract.\\n        @param _token Token to fetch the price for\\n        @return The latest valid price for the requested token\\n     */\\n    function fetchPrice(address _token) public returns (uint256) {\\n        PriceRecord memory priceRecord = priceRecords[_token];\\n        OracleRecord memory oracle = oracleRecords[_token];\\n\\n        uint256 scaledPrice = priceRecord.scaledPrice;\\n        // We short-circuit only if the price was already correct in the current block\\n        if (priceRecord.lastUpdated != block.timestamp) {\\n            if (priceRecord.lastUpdated == 0) {\\n                revert PriceFeed__UnknownFeedError(_token);\\n            }\\n\\n            (FeedResponse memory currResponse, FeedResponse memory prevResponse, bool updated) = _fetchFeedResponses(\\n                oracle.chainLinkOracle,\\n                priceRecord.roundId\\n            );\\n\\n            if (updated) {\\n                scaledPrice = _processFeedResponses(_token, oracle, currResponse, prevResponse, priceRecord);\\n            } else {\\n                if (_isPriceStale(priceRecord.timestamp, oracle.heartbeat)) {\\n                    revert PriceFeed__FeedFrozenError(_token);\\n                }\\n\\n                priceRecord.lastUpdated = uint32(block.timestamp);\\n                priceRecords[_token] = priceRecord;\\n            }\\n        }\\n\\n        if (oracle.isEthIndexed) {\\n            uint256 ethPrice = fetchPrice(address(0));\\n            return (ethPrice * scaledPrice) / 1 ether;\\n        }\\n        return scaledPrice;\\n    }\\n\\n    // Internal functions -----------------------------------------------------------------------------------------------\\n\\n    function _processFeedResponses(\\n        address _token,\\n        OracleRecord memory oracle,\\n        FeedResponse memory _currResponse,\\n        FeedResponse memory _prevResponse,\\n        PriceRecord memory priceRecord\\n    ) internal returns (uint256) {\\n        uint8 decimals = oracle.decimals;\\n        bool isValidResponse = _isFeedWorking(_currResponse, _prevResponse) &&\\n            !_isPriceStale(_currResponse.timestamp, oracle.heartbeat) &&\\n            !_isPriceChangeAboveMaxDeviation(_currResponse, _prevResponse, decimals);\\n        if (isValidResponse) {\\n            uint256 scaledPrice = _scalePriceByDigits(uint256(_currResponse.answer), decimals);\\n            if (oracle.sharePriceSignature != 0) {\\n                (bool success, bytes memory returnData) = _token.staticcall(abi.encode(oracle.sharePriceSignature));\\n                require(success, \\\"Share price not available\\\");\\n                scaledPrice = (scaledPrice * abi.decode(returnData, (uint256))) / (10 ** oracle.sharePriceDecimals);\\n            }\\n            if (!oracle.isFeedWorking) {\\n                _updateFeedStatus(_token, oracle, true);\\n            }\\n            _storePrice(_token, scaledPrice, _currResponse.timestamp, _currResponse.roundId);\\n            return scaledPrice;\\n        } else {\\n            if (oracle.isFeedWorking) {\\n                _updateFeedStatus(_token, oracle, false);\\n            }\\n            if (_isPriceStale(priceRecord.timestamp, oracle.heartbeat)) {\\n                revert PriceFeed__FeedFrozenError(_token);\\n            }\\n            return priceRecord.scaledPrice;\\n        }\\n    }\\n\\n    function _fetchFeedResponses(\\n        IAggregatorV3Interface oracle,\\n        uint80 lastRoundId\\n    ) internal view returns (FeedResponse memory currResponse, FeedResponse memory prevResponse, bool updated) {\\n        currResponse = _fetchCurrentFeedResponse(oracle);\\n        if (lastRoundId == 0 || currResponse.roundId > lastRoundId) {\\n            prevResponse = _fetchPrevFeedResponse(oracle, currResponse.roundId);\\n            updated = true;\\n        }\\n    }\\n\\n    function _isPriceStale(uint256 _priceTimestamp, uint256 _heartbeat) internal view returns (bool) {\\n        return block.timestamp - _priceTimestamp > _heartbeat + RESPONSE_TIMEOUT_BUFFER;\\n    }\\n\\n    function _isFeedWorking(\\n        FeedResponse memory _currentResponse,\\n        FeedResponse memory _prevResponse\\n    ) internal view returns (bool) {\\n        return _isValidResponse(_currentResponse) && _isValidResponse(_prevResponse);\\n    }\\n\\n    function _isValidResponse(FeedResponse memory _response) internal view returns (bool) {\\n        return\\n            (_response.success) &&\\n            (_response.roundId != 0) &&\\n            (_response.timestamp != 0) &&\\n            (_response.timestamp <= block.timestamp) &&\\n            (_response.answer != 0);\\n    }\\n\\n    function _isPriceChangeAboveMaxDeviation(\\n        FeedResponse memory _currResponse,\\n        FeedResponse memory _prevResponse,\\n        uint8 decimals\\n    ) internal pure returns (bool) {\\n        uint256 currentScaledPrice = _scalePriceByDigits(uint256(_currResponse.answer), decimals);\\n        uint256 prevScaledPrice = _scalePriceByDigits(uint256(_prevResponse.answer), decimals);\\n\\n        uint256 minPrice = PrismaMath._min(currentScaledPrice, prevScaledPrice);\\n        uint256 maxPrice = PrismaMath._max(currentScaledPrice, prevScaledPrice);\\n\\n        /*\\n         * Use the larger price as the denominator:\\n         * - If price decreased, the percentage deviation is in relation to the previous price.\\n         * - If price increased, the percentage deviation is in relation to the current price.\\n         */\\n        uint256 percentDeviation = ((maxPrice - minPrice) * PrismaMath.DECIMAL_PRECISION) / maxPrice;\\n\\n        return percentDeviation > MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND;\\n    }\\n\\n    function _scalePriceByDigits(uint256 _price, uint256 _answerDigits) internal pure returns (uint256) {\\n        if (_answerDigits == TARGET_DIGITS) {\\n            return _price;\\n        } else if (_answerDigits < TARGET_DIGITS) {\\n            // Scale the returned price value up to target precision\\n            return _price * (10 ** (TARGET_DIGITS - _answerDigits));\\n        } else {\\n            // Scale the returned price value down to target precision\\n            return _price / (10 ** (_answerDigits - TARGET_DIGITS));\\n        }\\n    }\\n\\n    function _updateFeedStatus(address _token, OracleRecord memory _oracle, bool _isWorking) internal {\\n        oracleRecords[_token].isFeedWorking = _isWorking;\\n        emit PriceFeedStatusUpdated(_token, address(_oracle.chainLinkOracle), _isWorking);\\n    }\\n\\n    function _storePrice(address _token, uint256 _price, uint256 _timestamp, uint80 roundId) internal {\\n        priceRecords[_token] = PriceRecord({\\n            scaledPrice: uint96(_price),\\n            timestamp: uint32(_timestamp),\\n            lastUpdated: uint32(block.timestamp),\\n            roundId: roundId\\n        });\\n        emit PriceRecordUpdated(_token, _price);\\n    }\\n\\n    function _fetchCurrentFeedResponse(\\n        IAggregatorV3Interface _priceAggregator\\n    ) internal view returns (FeedResponse memory response) {\\n        try _priceAggregator.latestRoundData() returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 /* startedAt */,\\n            uint256 timestamp,\\n            uint80 /* answeredInRound */\\n        ) {\\n            // If call to Chainlink succeeds, return the response and success = true\\n            response.roundId = roundId;\\n            response.answer = answer;\\n            response.timestamp = timestamp;\\n            response.success = true;\\n        } catch {\\n            // If call to Chainlink aggregator reverts, return a zero response with success = false\\n            return response;\\n        }\\n    }\\n\\n    function _fetchPrevFeedResponse(\\n        IAggregatorV3Interface _priceAggregator,\\n        uint80 _currentRoundId\\n    ) internal view returns (FeedResponse memory prevResponse) {\\n        if (_currentRoundId == 0) {\\n            return prevResponse;\\n        }\\n        unchecked {\\n            try _priceAggregator.getRoundData(_currentRoundId - 1) returns (\\n                uint80 roundId,\\n                int256 answer,\\n                uint256 /* startedAt */,\\n                uint256 timestamp,\\n                uint80 /* answeredInRound */\\n            ) {\\n                prevResponse.roundId = roundId;\\n                prevResponse.answer = answer;\\n                prevResponse.timestamp = timestamp;\\n                prevResponse.success = true;\\n            } catch {}\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IAggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Code from https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\n\\npragma solidity 0.8.19;\\n\\ninterface IAggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"PrismaMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nlibrary PrismaMath {\\n    uint256 internal constant DECIMAL_PRECISION = 1e18;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \u201ctoo high\u201d could lead to overflows.\\n     * - Making it \u201ctoo low\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\n     *\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39,\\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n     *\\n     */\\n    uint256 internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    function _max(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a >= _b) ? _a : _b;\\n    }\\n\\n    /*\\n     * Multiply two decimal numbers and use normal rounding rules:\\n     * -round product up if 19'th mantissa digit >= 5\\n     * -round product down if 19'th mantissa digit < 5\\n     *\\n     * Used only inside the exponentiation, _decPow().\\n     */\\n    function decMul(uint256 x, uint256 y) internal pure returns (uint256 decProd) {\\n        uint256 prod_xy = x * y;\\n\\n        decProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\\n    }\\n\\n    /*\\n     * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n     *\\n     * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n     *\\n     * Called by two functions that represent time in units of minutes:\\n     * 1) TroveManager._calcDecayedBaseRate\\n     * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n     *\\n     * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n     * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n     *\\n     * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n     * negligibly different from just passing the cap, since:\\n     *\\n     * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n     * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n     */\\n    function _decPow(uint256 _base, uint256 _minutes) internal pure returns (uint256) {\\n        if (_minutes > 525600000) {\\n            _minutes = 525600000;\\n        } // cap to avoid overflow\\n\\n        if (_minutes == 0) {\\n            return DECIMAL_PRECISION;\\n        }\\n\\n        uint256 y = DECIMAL_PRECISION;\\n        uint256 x = _base;\\n        uint256 n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n / 2;\\n            } else {\\n                // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n - 1) / 2;\\n            }\\n        }\\n\\n        return decMul(x, y);\\n    }\\n\\n    function _getAbsoluteDifference(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a >= _b) ? _a - _b : _b - _a;\\n    }\\n\\n    function _computeNominalCR(uint256 _coll, uint256 _debt) internal pure returns (uint256) {\\n        if (_debt > 0) {\\n            return (_coll * NICR_PRECISION) / _debt;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return 2 ** 256 - 1;\\n        }\\n    }\\n\\n    function _computeCR(uint256 _coll, uint256 _debt, uint256 _price) internal pure returns (uint256) {\\n        if (_debt > 0) {\\n            uint256 newCollRatio = (_coll * _price) / _debt;\\n\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return 2 ** 256 - 1;\\n        }\\n    }\\n\\n    function _computeCR(uint256 _coll, uint256 _debt) internal pure returns (uint256) {\\n        if (_debt > 0) {\\n            uint256 newCollRatio = (_coll) / _debt;\\n\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else {\\n            // if (_debt == 0)\\n            return 2 ** 256 - 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"PrismaOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"IPrismaCore.sol\\\";\\n\\n/**\\n    @title Prisma Ownable\\n    @notice Contracts inheriting `PrismaOwnable` have the same owner as `PrismaCore`.\\n            The ownership cannot be independently modified or renounced.\\n */\\ncontract PrismaOwnable {\\n    IPrismaCore public immutable PRISMA_CORE;\\n\\n    constructor(address _prismaCore) {\\n        PRISMA_CORE = IPrismaCore(_prismaCore);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == PRISMA_CORE.owner(), \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    function owner() public view returns (address) {\\n        return PRISMA_CORE.owner();\\n    }\\n\\n    function guardian() public view returns (address) {\\n        return PRISMA_CORE.guardian();\\n    }\\n}\\n\"\r\n    },\r\n    \"IPrismaCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPrismaCore {\\n    event FeeReceiverSet(address feeReceiver);\\n    event GuardianSet(address guardian);\\n    event NewOwnerAccepted(address oldOwner, address owner);\\n    event NewOwnerCommitted(address owner, address pendingOwner, uint256 deadline);\\n    event NewOwnerRevoked(address owner, address revokedOwner);\\n    event Paused();\\n    event PriceFeedSet(address priceFeed);\\n    event Unpaused();\\n\\n    function acceptTransferOwnership() external;\\n\\n    function commitTransferOwnership(address newOwner) external;\\n\\n    function revokeTransferOwnership() external;\\n\\n    function setFeeReceiver(address _feeReceiver) external;\\n\\n    function setGuardian(address _guardian) external;\\n\\n    function setPaused(bool _paused) external;\\n\\n    function setPriceFeed(address _priceFeed) external;\\n\\n    function OWNERSHIP_TRANSFER_DELAY() external view returns (uint256);\\n\\n    function feeReceiver() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function ownershipTransferDeadline() external view returns (uint256);\\n\\n    function paused() external view returns (bool);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function priceFeed() external view returns (address);\\n\\n    function startTime() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"PriceFeed.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_prismaCore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethFeed\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chainlink\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"heartbeat\",\"type\":\"uint32\"},{\"internalType\":\"bytes4\",\"name\":\"sharePriceSignature\",\"type\":\"bytes4\"},{\"internalType\":\"uint8\",\"name\":\"sharePriceDecimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isEthIndexed\",\"type\":\"bool\"}],\"internalType\":\"struct PriceFeed.OracleSetup[]\",\"name\":\"oracles\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PriceFeed__FeedFrozenError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceFeed__HeartbeatOutOfBoundsError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PriceFeed__InvalidFeedResponseError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PriceFeed__UnknownFeedError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"chainlinkAggregator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEthIndexed\",\"type\":\"bool\"}],\"name\":\"NewOracleRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWorking\",\"type\":\"bool\"}],\"name\":\"PriceFeedStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"PriceRecordUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRISMA_CORE\",\"outputs\":[{\"internalType\":\"contract IPrismaCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESPONSE_TIMEOUT_BUFFER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TARGET_DIGITS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"fetchPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracleRecords\",\"outputs\":[{\"internalType\":\"contract IAggregatorV3Interface\",\"name\":\"chainLinkOracle\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"heartbeat\",\"type\":\"uint32\"},{\"internalType\":\"bytes4\",\"name\":\"sharePriceSignature\",\"type\":\"bytes4\"},{\"internalType\":\"uint8\",\"name\":\"sharePriceDecimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isFeedWorking\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEthIndexed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceRecords\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"scaledPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdated\",\"type\":\"uint32\"},{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chainlinkOracle\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_heartbeat\",\"type\":\"uint32\"},{\"internalType\":\"bytes4\",\"name\":\"sharePriceSignature\",\"type\":\"bytes4\"},{\"internalType\":\"uint8\",\"name\":\"sharePriceDecimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_isEthIndexed\",\"type\":\"bool\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PriceFeed", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005d17ea085f2ff5da3e6979d5d26f1dbab664ccf80000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000040000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0000000000000000000000000cfe54b5cd566ab89272946f602d76ea879cab4a80000000000000000000000000000000000000000000000000000000000000e10035faf820000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ae78736cd615f374d3085123a210448e74fc6393000000000000000000000000536218f9e9eb48863970252233c8f271f554c2d00000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000be9895146f7af43049ca1c1ae358b0541ea49704000000000000000000000000f017fcb346a1885194689ba23eff2fe6fa5c483b0000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000ac3e018457b222d93114458476f3e3416abbe38f000000000000000000000000b9af7723cfbd4469a7e8aa60b93428d648bda99d0000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}