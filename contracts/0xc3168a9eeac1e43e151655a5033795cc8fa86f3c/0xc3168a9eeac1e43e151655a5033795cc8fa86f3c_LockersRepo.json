{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/lib/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.8;\\n\\nlibrary EnumerableSet {\\n    struct Set {\\n        bytes32[] _values;\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                set._values[toDeleteIndex] = lastValue;\\n                set._indexes[lastValue] = valueIndex;\\n            }\\n\\n            delete set._values[lastIndex];\\n            set._values.pop();\\n\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        return set._values[index];\\n    }\\n\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    //======== Bytes32Set ========\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    function add(Bytes32Set storage set, bytes32 value)\\n        public\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        public\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function length(Bytes32Set storage set) public view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(Bytes32Set storage set, uint256 index)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    function values(Bytes32Set storage set)\\n        public\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        return _values(set._inner);\\n    }\\n\\n    //======== AddressSet ========\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    function add(AddressSet storage set, address value)\\n        public\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(AddressSet storage set, address value)\\n        public\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(AddressSet storage set, address value)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function length(AddressSet storage set) public view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(AddressSet storage set, uint256 index)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function values(AddressSet storage set)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    //======== UintSet ========\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function add(UintSet storage set, uint256 value) public returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(UintSet storage set, uint256 value)\\n        public\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) public view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(UintSet storage set, uint256 index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function values(UintSet storage set)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/LockersRepo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\n/* *\\n * Copyright 2021-2023 LI LI @ JINGTIAN & GONGCHENG.\\n * All Rights Reserved.\\n * */\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\nlibrary LockersRepo {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    struct Head {\\n        uint40 from;\\n        uint40 to;\\n        uint48 expireDate;\\n        uint128 value;\\n    }\\n    struct Body {\\n        address counterLocker;\\n        bytes payload;\\n    }\\n    struct Locker {\\n        Head head;\\n        Body body;\\n    }\\n\\n    struct Repo {\\n        // hashLock => locker\\n        mapping (bytes32 => Locker) lockers;\\n        EnumerableSet.Bytes32Set snList;\\n    }\\n\\n    //#################\\n    //##    Write    ##\\n    //#################\\n\\n    function headSnParser(bytes32 sn) public pure returns (Head memory head) {\\n        uint _sn = uint(sn);\\n        \\n        head = Head({\\n            from: uint40(_sn >> 216),\\n            to: uint40(_sn >> 176),\\n            expireDate: uint48(_sn >> 128),\\n            value: uint128(_sn)\\n        });\\n    }\\n\\n    function codifyHead(Head memory head) public pure returns (bytes32 headSn) {\\n        bytes memory _sn = abi.encodePacked(\\n                            head.from,\\n                            head.to,\\n                            head.expireDate,\\n                            head.value);\\n        assembly {\\n            headSn := mload(add(_sn, 0x20))\\n        }\\n    }\\n\\n    function lockPoints(\\n        Repo storage repo,\\n        Head memory head,\\n        bytes32 hashLock\\n    ) public {\\n        Body memory body;\\n        lockConsideration(repo, head, body, hashLock);        \\n    }\\n\\n    function lockConsideration(\\n        Repo storage repo,\\n        Head memory head,\\n        Body memory body,\\n        bytes32 hashLock\\n    ) public {       \\n        if (repo.snList.add(hashLock)) {            \\n            Locker storage locker = repo.lockers[hashLock];      \\n            locker.head = head;\\n            locker.body = body;\\n        } else revert (\\\"LR.lockConsideration: occupied\\\");\\n    }\\n\\n    function pickupPoints(\\n        Repo storage repo,\\n        bytes32 hashLock,\\n        string memory hashKey,\\n        uint caller\\n    ) public returns(Head memory head) {\\n        \\n        bytes memory key = bytes(hashKey);\\n\\n        require(hashLock == keccak256(key),\\n            \\\"LR.pickupPoints: wrong key\\\");\\n\\n        Locker storage locker = repo.lockers[hashLock];\\n\\n        require(block.timestamp < locker.head.expireDate, \\n            \\\"LR.pickupPoints: locker expired\\\");\\n\\n        bool flag = true;\\n\\n        if (locker.body.counterLocker != address(0)) {\\n            require(locker.head.to == caller, \\n                \\\"LR.pickupPoints: wrong caller\\\");\\n\\n            uint len = key.length;\\n            bytes memory zero = new bytes(32 - (len % 32));\\n\\n            bytes memory payload = abi.encodePacked(locker.body.payload, len, key, zero);\\n            (flag, ) = locker.body.counterLocker.call(payload);\\n        }\\n\\n        if (flag) {\\n            head = locker.head;\\n            delete repo.lockers[hashLock];\\n            repo.snList.remove(hashLock);\\n        }\\n    }\\n\\n    function withdrawDeposit(\\n        Repo storage repo,\\n        bytes32 hashLock,\\n        uint256 caller\\n    ) public returns(Head memory head) {\\n\\n        Locker memory locker = repo.lockers[hashLock];\\n\\n        require(block.timestamp >= locker.head.expireDate, \\n            \\\"LR.withdrawDeposit: locker not expired\\\");\\n\\n        require(locker.head.from == caller, \\n            \\\"LR.withdrawDeposit: wrong caller\\\");\\n\\n        if (repo.snList.remove(hashLock)) {\\n            head = locker.head;\\n            delete repo.lockers[hashLock];\\n        } revert (\\\"LR.withdrawDeposit: locker not exist\\\");\\n    }\\n\\n    //#################\\n    //##    Read     ##\\n    //#################\\n\\n    function getHeadOfLocker(\\n        Repo storage repo,\\n        bytes32 hashLock\\n    ) public view returns (Head memory head) {\\n        return repo.lockers[hashLock].head;\\n    }\\n\\n    function getLocker(\\n        Repo storage repo,\\n        bytes32 hashLock\\n    ) public view returns (Locker memory) {\\n        return repo.lockers[hashLock];\\n    }\\n\\n    function getSnList(\\n        Repo storage repo\\n    ) public view returns (bytes32[] memory ) {\\n        return repo.snList.values();\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/lib/EnumerableSet.sol\": {\r\n        \"EnumerableSet\": \"0xc4f24b69792ff96f0316fab2d7df198af8033930\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"from\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"to\",\"type\":\"uint40\"},{\"internalType\":\"uint48\",\"name\":\"expireDate\",\"type\":\"uint48\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"internalType\":\"struct LockersRepo.Head\",\"name\":\"head\",\"type\":\"tuple\"}],\"name\":\"codifyHead\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"headSn\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sn\",\"type\":\"bytes32\"}],\"name\":\"headSnParser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"from\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"to\",\"type\":\"uint40\"},{\"internalType\":\"uint48\",\"name\":\"expireDate\",\"type\":\"uint48\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"internalType\":\"struct LockersRepo.Head\",\"name\":\"head\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "LockersRepo", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}