{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nlibrary AuthLib {\r\n    struct authData {\r\n        bool initialized;\r\n        uint256 ownerCount;\r\n        mapping(address => bool) owners;\r\n        mapping(string => mapping(address => bool)) approvals;\r\n        address[] ownerAddresses;\r\n        mapping(address => uint256) potentialOwnerVotes;\r\n        mapping(address => mapping(address => bool)) removeOwnerVotes;\r\n    }\r\n\r\n    function init(authData storage self, address[] memory owners) public {\r\n        require(!self.initialized, \"Already initialized\");\r\n        self.initialized = true;\r\n        require(owners.length > 0, \"Owner list cannot be empty\");\r\n        for (uint256 i = 0; i < owners.length; i++) {\r\n            require(owners[i] != address(0), \"Owner address cannot be zero\");\r\n            if (!self.owners[owners[i]]) {\r\n                self.owners[owners[i]] = true;\r\n                self.ownerCount++;\r\n            }\r\n        }\r\n    }\r\n\r\n    function voteNewOwner(authData storage self, address owner)\r\n        public\r\n        onlyOwner(self)\r\n    {\r\n        require(!self.owners[owner], \"Address is already an owner\");\r\n        self.potentialOwnerVotes[owner]++;\r\n\r\n        if (self.potentialOwnerVotes[owner] >= self.ownerCount / 2) {\r\n            self.owners[owner] = true;\r\n            self.ownerCount++;\r\n            self.ownerAddresses.push(owner);\r\n            delete self.potentialOwnerVotes[owner];\r\n        }\r\n    }\r\n\r\n    function removeOwner(authData storage self, address ownerToRemove)\r\n        public\r\n        onlyOwner(self)\r\n    {\r\n        require(self.owners[ownerToRemove], \"Provided address is not an owner\");\r\n        require(\r\n            !self.removeOwnerVotes[ownerToRemove][msg.sender],\r\n            \"You have already voted for removal\"\r\n        );\r\n\r\n        self.removeOwnerVotes[ownerToRemove][msg.sender] = true;\r\n        self.potentialOwnerVotes[ownerToRemove]++;\r\n\r\n        if (self.potentialOwnerVotes[ownerToRemove] * 2 > self.ownerCount) {\r\n            self.owners[ownerToRemove] = false;\r\n            self.ownerCount--;\r\n            delete self.potentialOwnerVotes[ownerToRemove];\r\n\r\n            for (uint256 i = 0; i < self.ownerAddresses.length; i++) {\r\n                if (self.ownerAddresses[i] == ownerToRemove) {\r\n                    self.ownerAddresses[i] = self.ownerAddresses[\r\n                        self.ownerAddresses.length - 1\r\n                    ];\r\n                    self.ownerAddresses.pop();\r\n                    break;\r\n                }\r\n                self.removeOwnerVotes[ownerToRemove][\r\n                    self.ownerAddresses[i]\r\n                ] = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function authorize(authData storage self, string memory functionName)\r\n        public\r\n        onlyOwner(self)\r\n    {\r\n        require(\r\n            !self.approvals[functionName][msg.sender],\r\n            \"You have already authorized this function\"\r\n        );\r\n        self.approvals[functionName][msg.sender] = true;\r\n    }\r\n\r\n    function clearAuth(authData storage self, string memory functionName)\r\n        internal\r\n    {\r\n        for (uint256 i = 0; i < self.ownerAddresses.length; i++) {\r\n            if (self.approvals[functionName][self.ownerAddresses[i]]) {\r\n                delete self.approvals[functionName][self.ownerAddresses[i]];\r\n            }\r\n        }\r\n    }\r\n\r\n    function requireAuth(authData storage self, string memory functionName)\r\n        public\r\n        view\r\n    {\r\n        uint256 approvalCount;\r\n        for (uint256 i = 0; i < self.ownerAddresses.length; i++) {\r\n            if (self.approvals[functionName][self.ownerAddresses[i]]) {\r\n                approvalCount++;\r\n            }\r\n        }\r\n        require(\r\n            approvalCount * 2 >= self.ownerCount,\r\n            \"Function not authorized by enough owners\"\r\n        );\r\n    }\r\n\r\n    function isOwner(authData storage self) public view returns (bool) {\r\n        return self.owners[msg.sender];\r\n    }\r\n\r\n    modifier onlyOwner(authData storage self) {\r\n        require(self.owners[msg.sender], \"You are not an owner\");\r\n        _;\r\n    }\r\n}", "ABI": "[]", "ContractName": "AuthLib", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://00da4e373ab2edb8341c3753e9ba2b5dc29f957c432bc76e3be6878ff4746ee2"}