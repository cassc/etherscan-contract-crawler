{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Bribes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./interfaces/IMinter.sol\\\";\\nimport \\\"./interfaces/IVoter.sol\\\";\\nimport \\\"./interfaces/IVotingEscrow.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract Bribe is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant WEEK = 7 days; // rewards are released over 7 days\\n    uint256 public firstBribeTimestamp;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    struct Reward {\\n        uint256 periodFinish;\\n        uint256 rewardsPerEpoch;\\n        uint256 lastUpdateTime; \\n    }\\n\\n    mapping(address => mapping(uint256 => Reward)) public rewardData;  // token -> startTimestamp -> Reward\\n    mapping(address => bool) public isRewardToken;\\n    address[] public rewardTokens;\\n    address public voter;\\n    address public immutable bribeFactory;\\n    address public minter;\\n    address public immutable ve;\\n    address public owner;\\n\\n    string public TYPE;\\n\\n    // owner -> reward token -> lastTime\\n    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\\n    mapping(address => mapping(address => uint256)) public userTimestamp;\\n    mapping(uint256 => uint256) public safetyMargin; // transition to n+1. this mapping is for unexpected consequences regarding removal of \\\"+ WEEK\\\" in multiple functions\\n\\n    //uint256 private _totalSupply;\\n    mapping(uint256 => uint256) private _totalSupply;\\n    mapping(address => mapping(uint256 => uint256)) private _balances; //owner -> timestamp -> amount\\n\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(address _owner,address _voter,address _bribeFactory, string memory _type)  {\\n        require(_bribeFactory != address(0) && _voter != address(0) && _owner != address(0));\\n        voter = _voter;\\n        bribeFactory = _bribeFactory;\\n        firstBribeTimestamp = 0;\\n        ve = IVoter(_voter)._ve();\\n        minter = IVoter(_voter).minter();\\n        require(minter != address(0));\\n        owner = _owner;\\n        TYPE = _type;\\n    }\\n\\n    /// @notice get the current epoch \\n    function getEpochStart() public view returns(uint256){\\n        return IMinter(minter).active_period();\\n    }\\n\\n    /// @notice get next epoch (where bribes are saved)\\n    function getNextEpochStart() public view returns(uint256){\\n        return getEpochStart() + WEEK;\\n    }\\n\\n\\n    /* ========== VIEWS ========== */\\n\\n    /// @notice get the length of the reward tokens\\n    function rewardsListLength() external view returns(uint256) {\\n        return rewardTokens.length;\\n    }\\n\\n    /// @notice get the last totalSupply (total votes for a pool)\\n    function totalSupply() external view returns (uint256) {\\n        uint256 _currentEpochStart = IMinter(minter).active_period() + safetyMargin[0]; // claim until current epoch + safetyMargin\\n        return _totalSupply[_currentEpochStart];\\n    }\\n\\n    /// @notice get a totalSupply given a timestamp\\n    function totalSupplyAt(uint256 _timestamp) external view returns (uint256) {\\n        return _totalSupply[_timestamp];\\n    }\\n\\n    /// @notice read the balanceOf the tokenId at a given timestamp\\n    function balanceOfAt(uint256 tokenId, uint256 _timestamp) public view returns (uint256) {\\n        address _owner = IVotingEscrow(ve).ownerOf(tokenId);\\n        return _balances[_owner][_timestamp];\\n    }\\n\\n\\n    /// @notice get last deposit available given a tokenID\\n    function balanceOf(uint256 tokenId) public view returns (uint256) {\\n        uint256 _timestamp = getNextEpochStart();\\n        address _owner = IVotingEscrow(ve).ownerOf(tokenId);\\n        return _balances[_owner][_timestamp];\\n    }\\n\\n    /// @notice get the balance of an owner in the current epoch\\n    function balanceOfOwner(address _owner) public view returns (uint256) {\\n        uint256 _timestamp = getNextEpochStart();\\n        return _balances[_owner][_timestamp];\\n    }\\n\\n    /// @notice get the balance of an owner given a timestamp\\n    function balanceOfOwnerAt(address _owner, uint256 _timestamp) public view returns (uint256) {\\n        return _balances[_owner][_timestamp];\\n    }\\n\\n\\n    /// @notice Read earned amount given a tokenID and _rewardToken\\n    function earned(uint256 tokenId, address _rewardToken) public view returns(uint256){\\n        uint256 k = 0;\\n        uint256 reward = 0;\\n        uint256 _endTimestamp = IMinter(minter).active_period() + safetyMargin[1]; // claim until current epoch + safetyMargin\\n        address _owner = IVotingEscrow(ve).ownerOf(tokenId);\\n        uint256 _userLastTime = userTimestamp[_owner][_rewardToken];\\n        \\n        if(_endTimestamp == _userLastTime){\\n            return 0;\\n        }\\n\\n        // if user first time then set it to first bribe - week to avoid any timestamp problem\\n        if(_userLastTime < firstBribeTimestamp){\\n            _userLastTime = firstBribeTimestamp - WEEK;\\n        }\\n\\n        for(k; k < 50; k++){\\n            if(_userLastTime == _endTimestamp){\\n                // if we reach the current epoch, exit\\n                break;\\n            }\\n            reward += _earned(_owner, _rewardToken, _userLastTime);\\n            _userLastTime += WEEK;   \\n                     \\n        }  \\n        return reward;  \\n    }\\n\\n    /// @notice read earned amounts given an address and the reward token\\n    function earned(address _owner, address _rewardToken) public view returns(uint256){\\n        uint256 k = 0;\\n        uint256 reward = 0;\\n        uint256 _endTimestamp = IMinter(minter).active_period() + safetyMargin[2]; // claim until current epoch + safetyMargin\\n        uint256 _userLastTime = userTimestamp[_owner][_rewardToken];\\n        \\n        if(_endTimestamp == _userLastTime){\\n            return 0;\\n        }\\n\\n        // if user first time then set it to first bribe - week to avoid any timestamp problem\\n        if(_userLastTime < firstBribeTimestamp){\\n            _userLastTime = firstBribeTimestamp - WEEK;\\n        }\\n\\n        for(k; k < 50; k++){\\n            if(_userLastTime == _endTimestamp){\\n                // if we reach the current epoch, exit\\n                break;\\n            }\\n            reward += _earned(_owner, _rewardToken, _userLastTime);\\n            _userLastTime += WEEK;   \\n                     \\n        }  \\n        return reward;  \\n    }\\n\\n    /// @notice Read earned amount given address and reward token, returns the rewards and the last user timestamp (used in case user do not claim since 50+epochs)\\n    function earnedWithTimestamp(address _owner, address _rewardToken) private view returns(uint256,uint256){\\n        uint256 k = 0;\\n        uint256 reward = 0;\\n        uint256 _endTimestamp = IMinter(minter).active_period() + safetyMargin[3]; // claim until current epoch + safetyMargin\\n        uint256 _userLastTime = userTimestamp[_owner][_rewardToken];\\n        \\n        \\n        // if user first time then set it to first bribe - week to avoid any timestamp problem\\n        if(_userLastTime < firstBribeTimestamp){\\n            _userLastTime = firstBribeTimestamp - WEEK;\\n        }\\n\\n        for(k; k < 50; k++){\\n            if(_userLastTime == _endTimestamp){\\n                // if we reach the current epoch, exit\\n                break;\\n            }\\n            reward += _earned(_owner, _rewardToken, _userLastTime);\\n            _userLastTime += WEEK;   \\n                     \\n        }  \\n        return (reward, _userLastTime);  \\n    }\\n\\n    /// @notice get the earned rewards\\n    function _earned(address _owner, address _rewardToken, uint256 _timestamp) internal view returns (uint256) {\\n        uint256 _balance = balanceOfOwnerAt(_owner, _timestamp);\\n        if(_balance == 0){\\n            return 0;\\n        } else {\\n            uint256 _rewardPerToken = rewardPerToken(_rewardToken, _timestamp);\\n            uint256 _rewards = _rewardPerToken * _balance / 1e36;\\n            return _rewards;\\n        }\\n    }\\n\\n    /// @notice get the rewards for token\\n    function rewardPerToken(address _rewardsToken, uint256 _timestamp) public view returns (uint256) {\\n        if (_totalSupply[_timestamp] == 0) {\\n            return rewardData[_rewardsToken][_timestamp].rewardsPerEpoch;\\n        }\\n        return rewardData[_rewardsToken][_timestamp].rewardsPerEpoch * 1e36 / _totalSupply[_timestamp];\\n    }\\n\\n \\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice User votes deposit\\n    /// @dev    called on voter.vote() or voter.poke()\\n    ///         we save into owner \\\"address\\\" and not \\\"tokenID\\\". \\n    ///         Owner must reset before transferring token\\n    function deposit(uint256 amount, uint256 tokenId) external nonReentrant {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        require(msg.sender == voter);\\n        uint256 _startTimestamp = IMinter(minter).active_period() + safetyMargin[4];\\n        uint256 _oldSupply = _totalSupply[_startTimestamp]; \\n        address _owner = IVotingEscrow(ve).ownerOf(tokenId);\\n        uint256 _lastBalance = _balances[_owner][_startTimestamp]; \\n\\n        _totalSupply[_startTimestamp] =  _oldSupply + amount;\\n        _balances[_owner][_startTimestamp] = _lastBalance + amount;\\n\\n        emit Staked(tokenId, amount);\\n    }\\n\\n    /// @notice User votes withdrawal \\n    /// @dev    called on voter.reset()\\n    function withdraw(uint256 amount, uint256 tokenId) external nonReentrant {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        require(msg.sender == voter);\\n        uint256 _startTimestamp = IMinter(minter).active_period() + safetyMargin[5]; \\n        address _owner = IVotingEscrow(ve).ownerOf(tokenId);\\n\\n        // incase of bribe contract reset in gauge proxy\\n        if (amount <= _balances[_owner][_startTimestamp]) {\\n            uint256 _oldSupply = _totalSupply[_startTimestamp]; \\n            uint256 _oldBalance = _balances[_owner][_startTimestamp];\\n            _totalSupply[_startTimestamp] =  _oldSupply - amount;\\n            _balances[_owner][_startTimestamp] =  _oldBalance - amount;\\n            emit Withdrawn(tokenId, amount);\\n        }\\n\\n    }\\n\\n    /// @notice Claim the TOKENID rewards\\n    function getReward(uint256 tokenId, address[] memory tokens) external nonReentrant  {\\n        require(IVotingEscrow(ve).isApprovedOrOwner(msg.sender, tokenId));\\n        uint256 _userLastTime;\\n        uint256 reward = 0;\\n        address _owner = IVotingEscrow(ve).ownerOf(tokenId);\\n        \\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            address _rewardToken = tokens[i];\\n            (reward, _userLastTime) = earnedWithTimestamp(_owner, _rewardToken);          \\n            if (reward > 0) {\\n                IERC20(_rewardToken).safeTransfer(_owner, reward);\\n                emit RewardPaid(_owner, _rewardToken, reward);\\n            }\\n            userTimestamp[_owner][_rewardToken] = _userLastTime;\\n        }\\n    }\\n\\n    /// @notice Claim the rewards given msg.sender\\n    function getReward(address[] memory tokens) external nonReentrant  {\\n        uint256 _userLastTime;\\n        uint256 reward = 0;\\n        address _owner = msg.sender;\\n        \\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            address _rewardToken = tokens[i];\\n            (reward, _userLastTime) = earnedWithTimestamp(_owner, _rewardToken);          \\n            if (reward > 0) {\\n                IERC20(_rewardToken).safeTransfer(_owner, reward);\\n                emit RewardPaid(_owner, _rewardToken, reward);\\n            }\\n            userTimestamp[_owner][_rewardToken] = _userLastTime;\\n        }\\n    }\\n\\n    /// @notice Claim rewards from voter\\n    function getRewardForOwner(uint256 tokenId, address[] memory tokens) public nonReentrant  {\\n        require(msg.sender == voter);\\n        uint256 _userLastTime;\\n        uint256 reward = 0;\\n        address _owner = IVotingEscrow(ve).ownerOf(tokenId);\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            address _rewardToken = tokens[i];\\n            (reward, _userLastTime) = earnedWithTimestamp(_owner, _rewardToken);    \\n            if (reward > 0) {\\n                IERC20(_rewardToken).safeTransfer(_owner, reward);\\n                emit RewardPaid(_owner, _rewardToken, reward);\\n            }\\n            userTimestamp[_owner][_rewardToken] = _userLastTime;\\n        }\\n    }\\n\\n    /// @notice Claim rewards from voter\\n    function getRewardForAddress(address _owner, address[] memory tokens) public nonReentrant  {\\n        require(msg.sender == voter);\\n        uint256 _userLastTime;\\n        uint256 reward = 0;\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            address _rewardToken = tokens[i];\\n            (reward, _userLastTime) = earnedWithTimestamp(_owner, _rewardToken);    \\n            if (reward > 0) {\\n                IERC20(_rewardToken).safeTransfer(_owner, reward);\\n                emit RewardPaid(_owner, _rewardToken, reward);\\n            }\\n            userTimestamp[_owner][_rewardToken] = _userLastTime;\\n        }\\n    }\\n\\n    /// @notice Notify a bribe amount\\n    function notifyRewardAmount(address _rewardsToken, uint256 reward) external nonReentrant {\\n        require(isRewardToken[_rewardsToken], \\\"reward token not verified\\\");\\n        IERC20(_rewardsToken).safeTransferFrom(msg.sender,address(this),reward);\\n\\n        uint256 _startTimestamp = IMinter(minter).active_period() + safetyMargin[6]; //period points to the current thursday. Bribes are distributed from next epoch (thursday) + safetyMargin\\n        if(firstBribeTimestamp == 0){\\n            firstBribeTimestamp = _startTimestamp;\\n        }\\n\\n        uint256 _lastReward = rewardData[_rewardsToken][_startTimestamp].rewardsPerEpoch;\\n        \\n        rewardData[_rewardsToken][_startTimestamp].rewardsPerEpoch = _lastReward + reward;\\n        rewardData[_rewardsToken][_startTimestamp].lastUpdateTime = block.timestamp;\\n        rewardData[_rewardsToken][_startTimestamp].periodFinish = _startTimestamp + WEEK;\\n\\n        emit RewardAdded(_rewardsToken, reward, _startTimestamp);\\n    }\\n\\n\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    /// @notice add rewards tokens\\n    function addRewardTokens(address[] memory _rewardsToken) public onlyAllowed {\\n        uint256 i = 0;\\n        for(i; i < _rewardsToken.length; i++){\\n           _addRewardToken(_rewardsToken[i]);\\n        }\\n    }\\n\\n    /// @notice add a single reward token\\n    function addRewardToken(address _rewardsToken) public onlyAllowed {\\n        _addRewardToken(_rewardsToken);\\n    }\\n    function _addRewardToken(address _rewardsToken) internal {\\n        if(!isRewardToken[_rewardsToken]){\\n            isRewardToken[_rewardsToken] = true;\\n            rewardTokens.push(_rewardsToken);\\n        }\\n    }\\n\\n    /// @notice Recover some ERC20 from the contract and updated given bribe\\n    function recoverERC20AndUpdateData(address tokenAddress, uint256 tokenAmount) external onlyAllowed {\\n        require(tokenAmount <= IERC20(tokenAddress).balanceOf(address(this)));\\n        \\n        uint256 _startTimestamp = IMinter(minter).active_period() + safetyMargin[7];\\n        uint256 _lastReward = rewardData[tokenAddress][_startTimestamp].rewardsPerEpoch;\\n        rewardData[tokenAddress][_startTimestamp].rewardsPerEpoch = _lastReward - tokenAmount;\\n        rewardData[tokenAddress][_startTimestamp].lastUpdateTime = block.timestamp;\\n\\n\\n        IERC20(tokenAddress).safeTransfer(owner, tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /// @notice Recover some ERC20 from the contract.\\n    /// @dev    Be careful --> if called then getReward() at last epoch will fail because some reward are missing! \\n    ///         Think about calling recoverERC20AndUpdateData()\\n    function emergencyRecoverERC20(address tokenAddress, uint256 tokenAmount) external onlyAllowed {\\n        require(tokenAmount <= IERC20(tokenAddress).balanceOf(address(this)));\\n        IERC20(tokenAddress).safeTransfer(owner, tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /// @notice Set a new voter\\n    function setVoter(address _Voter) external onlyAllowed {\\n        require(_Voter != address(0));\\n        voter = _Voter;\\n    }\\n\\n    /// @notice Set a new minter\\n    function setMinter(address _minter) external onlyAllowed {\\n        require(_minter != address(0));\\n        minter = _minter;\\n    }\\n\\n    /// @notice Set a new Owner\\n    event SetOwner(address indexed _owner);\\n    function setOwner(address _owner) external onlyAllowed {\\n        require(_owner != address(0));\\n        owner = _owner;\\n        emit SetOwner(_owner);\\n    }\\n\\n    /// @notice Set safety margin for future flexibility & fix in case of any errors\\n    function setSafetyMargin(uint256 index, uint256 amount) external onlyAllowed {\\n        safetyMargin[index] = amount;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyAllowed() {\\n        require( (msg.sender == owner || msg.sender == bribeFactory), \\\"permission is denied!\\\" );\\n        _;\\n    }\\n\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RewardAdded(address indexed rewardToken, uint256 reward, uint256 startTimestamp);\\n    event Staked(uint256 indexed tokenId, uint256 amount);\\n    event Withdrawn(uint256 indexed tokenId, uint256 amount);\\n    event RewardPaid(address indexed user,address indexed rewardsToken,uint256 reward);\\n    event Recovered(address indexed token, uint256 amount);\\n}\\n\"\r\n    },\r\n    \"contracts/factories/BribeFactoryV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport \\\"../Bribes.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport '../interfaces/IPermissionsRegistry.sol';\\n\\ninterface IBribe {\\n    function addRewardToken(address) external;\\n    function setVoter(address _Voter) external;\\n    function setMinter(address _Voter) external;\\n    function setOwner(address _Voter) external;\\n    function emergencyRecoverERC20(address tokenAddress, uint256 tokenAmount) external;\\n    function recoverERC20AndUpdateData(address tokenAddress, uint256 tokenAmount) external;\\n    function addRewardTokens(address[] memory) external;\\n}\\n\\ncontract BribeFactoryV3 is OwnableUpgradeable {\\n    address public last_bribe;\\n    address[] internal _bribes;\\n    address public voter;\\n\\n    address[] public defaultRewardToken;\\n\\n    IPermissionsRegistry public permissionsRegistry;\\n\\n    modifier onlyAllowed() {\\n        require(owner() == msg.sender || permissionsRegistry.hasRole(\\\"BRIBE_ADMIN\\\",msg.sender), 'ERR: BRIBE_ADMIN');\\n        _;\\n    }\\n\\n    constructor() {}\\n    function initialize(address _voter, address _permissionsRegistry) initializer  public {\\n        __Ownable_init();   //after deploy ownership to multisig\\n        voter = _voter;\\n        \\n        defaultRewardToken.push(address(0x95D8Bf2F57cf973251972b496dC6B1d9C6b5bCe3));   // $blue\\n        defaultRewardToken.push(address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2));   // $weth\\n        defaultRewardToken.push(address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48));   // $usdc\\n        defaultRewardToken.push(address(0x6B175474E89094C44Da98b954EedeAC495271d0F));   // $dai\\n        defaultRewardToken.push(address(0xdAC17F958D2ee523a2206206994597C13D831ec7));   // $usdt\\n\\n        // registry to check accesses\\n        permissionsRegistry = IPermissionsRegistry(_permissionsRegistry);\\n\\n    }\\n\\n\\n    /// @notice create a bribe contract\\n    /// @dev    _owner must be blueTeamMultisig\\n    function createBribe(address _owner,address _token0,address _token1, string memory _type) external returns (address) {\\n        require(msg.sender == voter || msg.sender == owner(), 'only voter');\\n\\n        Bribe lastBribe = new Bribe(_owner,voter,address(this), _type);\\n\\n        if(_token0 != address(0)) lastBribe.addRewardToken(_token0);  \\n        if(_token1 != address(0)) lastBribe.addRewardToken(_token1); \\n\\n        lastBribe.addRewardTokens(defaultRewardToken);      \\n         \\n        last_bribe = address(lastBribe);\\n        _bribes.push(last_bribe);\\n        return last_bribe;\\n    }\\n\\n\\n    /* -----------------------------------------------------------------------------\\n    --------------------------------------------------------------------------------\\n    --------------------------------------------------------------------------------\\n                                    ONLY OWNER\\n    --------------------------------------------------------------------------------\\n    --------------------------------------------------------------------------------\\n    ----------------------------------------------------------------------------- */\\n\\n\\n    /// @notice set the bribe factory voter\\n    function setVoter(address _Voter) external {\\n        require(owner() == msg.sender, 'not owner');\\n        require(_Voter != address(0));\\n        voter = _Voter;\\n    }\\n\\n    \\n    /// @notice set the bribe factory permission registry\\n    function setPermissionsRegistry(address _permReg) external {\\n        require(owner() == msg.sender, 'not owner');\\n        require(_permReg != address(0));\\n        permissionsRegistry = IPermissionsRegistry(_permReg);\\n    }\\n\\n    /// @notice set the bribe factory permission registry\\n    function pushDefaultRewardToken(address _token) external {\\n        require(owner() == msg.sender, 'not owner');\\n        require(_token != address(0));\\n        defaultRewardToken.push(_token);    \\n    }\\n\\n    \\n    /// @notice set the bribe factory permission registry\\n    function removeDefaultRewardToken(address _token) external {\\n        require(owner() == msg.sender, 'not owner');\\n        require(_token != address(0));\\n        uint i = 0;\\n        for(i; i < defaultRewardToken.length; i++){\\n            if(defaultRewardToken[i] == _token){\\n                defaultRewardToken[i] = defaultRewardToken[defaultRewardToken.length -1];\\n                defaultRewardToken.pop();\\n                break;\\n            }\\n        }    \\n    }\\n\\n    /* -----------------------------------------------------------------------------\\n    --------------------------------------------------------------------------------\\n    --------------------------------------------------------------------------------\\n                                    ONLY OWNER or BRIBE ADMIN\\n    --------------------------------------------------------------------------------\\n    --------------------------------------------------------------------------------\\n    ----------------------------------------------------------------------------- */\\n\\n    /// @notice Add a reward token to a given bribe\\n    function addRewardToBribe(address _token, address __bribe) external onlyAllowed {\\n        IBribe(__bribe).addRewardToken(_token);\\n    }\\n\\n    /// @notice Add multiple reward token to a given bribe\\n    function addRewardsToBribe(address[] memory _token, address __bribe) external onlyAllowed {\\n        uint i = 0;\\n        for ( i ; i < _token.length; i++){\\n            IBribe(__bribe).addRewardToken(_token[i]);\\n        }\\n    }\\n\\n    /// @notice Add a reward token to given bribes\\n    function addRewardToBribes(address _token, address[] memory __bribes) external onlyAllowed {\\n        uint i = 0;\\n        for ( i ; i < __bribes.length; i++){\\n            IBribe(__bribes[i]).addRewardToken(_token);\\n        }\\n\\n    }\\n\\n    /// @notice Add multiple reward tokens to given bribes\\n    function addRewardsToBribes(address[][] memory _token, address[] memory __bribes) external onlyAllowed {\\n        uint i = 0;\\n        uint k;\\n        for ( i ; i < __bribes.length; i++){\\n            address _br = __bribes[i];\\n            for(k = 0; k < _token.length; k++){\\n                IBribe(_br).addRewardToken(_token[i][k]);\\n            }\\n        }\\n\\n    }\\n\\n    /// @notice set a new voter in given bribes\\n    function setBribeVoter(address[] memory _bribe, address _voter) external onlyOwner {\\n        uint i = 0;\\n        for(i; i< _bribe.length; i++){\\n            IBribe(_bribe[i]).setVoter(_voter);\\n        }\\n    }\\n\\n    /// @notice set a new minter in given bribes\\n    function setBribeMinter(address[] memory _bribe, address _minter) external onlyOwner {\\n        uint i = 0;\\n        for(i; i< _bribe.length; i++){\\n            IBribe(_bribe[i]).setMinter(_minter);\\n        }\\n    }\\n\\n    /// @notice set a new owner in given bribes\\n    function setBribeOwner(address[] memory _bribe, address _owner) external onlyOwner {\\n        uint i = 0;\\n        for(i; i< _bribe.length; i++){\\n            IBribe(_bribe[i]).setOwner(_owner);\\n        }\\n    }\\n\\n    /// @notice recover an ERC20 from bribe contracts.\\n    function recoverERC20From(address[] memory _bribe, address[] memory _tokens, uint[] memory _amounts) external onlyOwner {\\n        uint i = 0;\\n        require(_bribe.length == _tokens.length, 'mismatch len');\\n        require(_tokens.length == _amounts.length, 'mismatch len');\\n\\n        for(i; i< _bribe.length; i++){\\n            if(_amounts[i] > 0) IBribe(_bribe[i]).emergencyRecoverERC20(_tokens[i], _amounts[i]);\\n        }\\n    }\\n\\n     /// @notice recover an ERC20 from bribe contracts and update. \\n    function recoverERC20AndUpdateData(address[] memory _bribe, address[] memory _tokens, uint[] memory _amounts) external onlyOwner {\\n        uint i = 0;\\n        require(_bribe.length == _tokens.length, 'mismatch len');\\n        require(_tokens.length == _amounts.length, 'mismatch len');\\n\\n        for(i; i< _bribe.length; i++){\\n            if(_amounts[i] > 0) IBribe(_bribe[i]).recoverERC20AndUpdateData(_tokens[i], _amounts[i]);\\n        }\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IMinter {\\n    function update_period() external returns (uint);\\n    function check() external view returns(bool);\\n    function period() external view returns(uint);\\n    function active_period() external view returns(uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPermissionsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPermissionsRegistry {\\n    function emergencyCouncil() external view returns(address);\\n    function blueTeamMultisig() external view returns(address);\\n    function hasRole(bytes memory role, address caller) external view returns(bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVoter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IVoter {\\n    function claimBribes(address[] memory _bribes, address[][] memory _tokens, uint256 _tokenId) external;\\n    function claimFees(address[] memory _fees, address[][] memory _tokens, uint256 _tokenId) external;\\n    function reset(uint256 _tokenId) external;\\n    function vote(uint256 _tokenId, address[] calldata _poolVote, uint256[] calldata _weights) external;\\n    function poke(uint256 _tokenId) external;\\n    function _epochTimestamp() external view returns(uint256);\\n\\n    function _ve() external view returns (address);\\n    function gauges(address _pair) external view returns (address);\\n    function isGauge(address _gauge) external view returns (bool);\\n    function poolForGauge(address _gauge) external view returns (address);\\n    function factory() external view returns (address);\\n    function minter() external view returns(address);\\n    function isWhitelisted(address token) external view returns (bool);\\n    function notifyRewardAmount(uint amount) external;\\n    function distributeAll() external;\\n    function distributeFees(address[] memory _gauges) external;\\n\\n    function internal_bribes(address _gauge) external view returns (address);\\n    function external_bribes(address _gauge) external view returns (address);\\n\\n    function usedWeights(uint id) external view returns(uint);\\n    function lastVoted(uint id) external view returns(uint);\\n    function poolVote(uint id, uint _index) external view returns(address _pair);\\n    function votes(uint id, address _pool) external view returns(uint votes);\\n    function poolVoteLength(uint tokenId) external view returns(uint);\\n    \\n}\"\r\n    },\r\n    \"contracts/interfaces/IVotingEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IVotingEscrow {\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n    }\\n\\n    struct LockedBalance {\\n        int128 amount;\\n        uint end;\\n    }\\n\\n    function create_lock(uint _value, uint _lock_duration) external returns (uint);\\n    function create_lock_for(uint _value, uint _lock_duration, address _to) external returns (uint);\\n    function merge(uint _from, uint _to) external;\\n    function increase_amount(uint _tokenId, uint _value) external;\\n    function increase_unlock_time(uint _tokenId, uint _lock_duration) external;\\n    function split(uint[] memory amounts, uint _tokenId) external;\\n    function withdraw(uint _tokenId) external;\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    function locked(uint id) external view returns(LockedBalance memory);\\n    function tokenOfOwnerByIndex(address _owner, uint _tokenIndex) external view returns (uint);\\n\\n    function token() external view returns (address);\\n    function team() external returns (address);\\n    function epoch() external view returns (uint);\\n    function point_history(uint loc) external view returns (Point memory);\\n    function user_point_history(uint tokenId, uint loc) external view returns (Point memory);\\n    function user_point_epoch(uint tokenId) external view returns (uint);\\n    function optionToken() external view returns (address);\\n    function ownerOf(uint) external view returns (address);\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n    function transferFrom(address, address, uint) external;\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint _tokenId\\n    ) external;\\n\\n    function voted(uint) external view returns (bool);\\n    function attachments(uint) external view returns (uint);\\n    function voting(uint tokenId) external;\\n    function abstain(uint tokenId) external;\\n    function attach(uint tokenId) external;\\n    function detach(uint tokenId) external;\\n\\n    function checkpoint() external;\\n    function deposit_for(uint tokenId, uint value) external;\\n\\n    function balanceOfNFT(uint _id) external view returns (uint);\\n    function balanceOf(address _owner) external view returns (uint);\\n    function totalSupply() external view returns (uint);\\n    function supply() external view returns (uint);\\n    function balanceOfNFTAt(uint _tokenId, uint _t) external view returns (uint);\\n    function balanceOfAtNFT(uint _tokenId, uint _t) external view returns (uint);\\n\\n\\n\\n    function decimals() external view returns(uint8);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__bribe\",\"type\":\"address\"}],\"name\":\"addRewardToBribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"__bribes\",\"type\":\"address[]\"}],\"name\":\"addRewardToBribes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_token\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"__bribe\",\"type\":\"address\"}],\"name\":\"addRewardsToBribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[][]\",\"name\":\"_token\",\"type\":\"address[][]\"},{\"internalType\":\"address[]\",\"name\":\"__bribes\",\"type\":\"address[]\"}],\"name\":\"addRewardsToBribes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"createBribe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"defaultRewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_permissionsRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_bribe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permissionsRegistry\",\"outputs\":[{\"internalType\":\"contract IPermissionsRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"pushDefaultRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bribe\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20AndUpdateData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bribe\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20From\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeDefaultRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bribe\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setBribeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bribe\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setBribeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bribe\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"setBribeVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_permReg\",\"type\":\"address\"}],\"name\":\"setPermissionsRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Voter\",\"type\":\"address\"}],\"name\":\"setVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BribeFactoryV3", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}