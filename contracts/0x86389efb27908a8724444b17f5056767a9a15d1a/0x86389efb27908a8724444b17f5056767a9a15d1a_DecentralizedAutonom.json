{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DecentralizedAutonomousTrust.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./math/BigDiv.sol\\\";\\nimport \\\"./math/Sqrt.sol\\\";\\nimport \\\"./Take.sol\\\";\\nimport \\\"./uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"./uniswap/IUniswapV2Factory.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/TokenTimelock.sol\\\";\\n\\n\\n/**\\n * @title Decentralized Autonomous Trust\\n * This contract is a modified version of the implementation provided by Fairmint for a\\n * Decentralized Autonomous Trust as described in the continuous\\n * organization whitepaper (https://github.com/c-org/whitepaper) and\\n * specified here: https://github.com/fairmint/c-org/wiki.\\n * Code from : https://github.com/Fairmint/c-org/blob/dfd3129f9bce8717406aba54d1f1888d8e253dbb/contracts/DecentralizedAutonomousTrust.sol\\n * Changes Added: https://github.com/Fairmint/c-org/commit/60bb63b9112a82996f275a75a87c28b1d73e3f11\\n *\\n * Use at your own risk. \\n */\\ncontract DecentralizedAutonomousTrust\\n  is Take\\n{\\n  using SafeMath for uint;\\n  using Sqrt for uint;\\n  using SafeERC20 for IERC20;\\n\\n  /**\\n   * Events\\n   */\\n\\n  event Buy(\\n    address indexed _from,\\n    address indexed _to,\\n    uint256 _currencyValue,\\n    uint256 _fairValue\\n  );\\n  event Close();\\n  event StateChange(\\n    uint256 _previousState,\\n    uint256 _newState\\n  );\\n  event UpdateConfig(\\n    address indexed _beneficiary,\\n    address indexed _control,\\n    address _uniswapRouterAddress,\\n    address _uniswapFactoryAddress,\\n    uint256 _minInvestment,\\n    uint256 _openUntilAtLeast\\n  );\\n  // Constants\\n\\n  //  The default state\\n  uint256 private constant STATE_INIT = 0;\\n\\n  //  The state after initGoal has been reached\\n  uint256 private constant STATE_RUN = 1;\\n\\n  //  The state after closed by the `beneficiary` account from STATE_RUN\\n  uint256 private constant STATE_CLOSE = 2;\\n\\n  //  The state after closed by the `beneficiary` account from STATE_INIT\\n  uint256 private constant STATE_CANCEL = 3;\\n\\n  //  When multiplying 2 terms, the max value is 2^128-1\\n  uint256 private constant MAX_BEFORE_SQUARE = 2**128 - 1;\\n\\n  //  The denominator component for values specified in basis points.\\n  uint256 private constant BASIS_POINTS_DEN = 10000;\\n\\n  // The max `totalSupply`\\n  // @dev This limit ensures that the DAT's formulas do not overflow (<MAX_BEFORE_SQUARE/2)\\n  uint256 private constant MAX_SUPPLY = 10 ** 38;\\n\\n  /**\\n   * Data for DAT business logic\\n   */\\n\\n  /// @notice The address of the beneficiary organization which receives the investments.\\n  /// Points to the wallet of the organization.\\n  address payable public beneficiary;\\n\\n  /// @notice The buy slope of the bonding curve.\\n  /// Does not affect the financial model, only the granularity of TAKE.\\n  /// @dev This is the numerator component of the fractional value.\\n  uint256 public buySlopeNum;\\n\\n  /// @notice The buy slope of the bonding curve.\\n  /// Does not affect the financial model, only the granularity of TAKE.\\n  /// @dev This is the denominator component of the fractional value.\\n  uint256 public buySlopeDen;\\n\\n  /// @notice The address from which the updatable variables can be updated\\n  address public control;\\n\\n  /// @notice The address of the token used as reserve in the bonding curve\\n  /// (e.g. the DAI contract). Use ETH if 0.\\n  IERC20 public currency;\\n\\n  /// @notice The initial fundraising goal (expressed in TAKE) to start the c-org.\\n  /// `0` means that there is no initial fundraising and the c-org immediately moves to run state.\\n  uint256 public initGoal;\\n\\n  uint256 public initReserve;\\n\\n  /// @notice The bonding curve fundraising goal.\\n  uint256 public bcGoal;\\n\\n  /// @notice The bonding curve fundraising final result.\\n  uint256 public bcTakeReleased;\\n\\n  /// @notice The investment reserve of the c-org. Defines the percentage of the value invested that is\\n  /// automatically funneled and held into the buyback_reserve expressed in basis points.\\n  uint256 public investmentReserveBasisPoints;\\n\\n  /// @notice The earliest date/time (in seconds) that the DAT may enter the `CLOSE` state, ensuring\\n  /// that if the DAT reaches the `RUN` state it will remain running for at least this period of time.\\n  /// @dev This value may be increased anytime by the control account\\n  uint256 public openUntilAtLeast;\\n\\n  /// @notice The minimum amount of `currency` investment accepted.\\n  uint256 public minInvestment;\\n\\n  /// @notice The current state of the contract.\\n  /// @dev See the constants above for possible state values.\\n  uint256 public state;\\n\\n  string public constant version = \\\"2\\\";\\n  // --- EIP712 niceties ---\\n  // Original source: https://etherscan.io/address/0x6b175474e89094c44da98b954eedeac495271d0f#code\\n  //  mapping (address => uint) public nonces;\\n  bytes32 public DOMAIN_SEPARATOR;\\n  // bytes32 public constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\\\");\\n  bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\\n\\n  address public  uniswapFactoryAddress;\\n  address public  uniswapRouterAddress;\\n  IUniswapV2Router02 private uniswapRouter;\\n  IUniswapV2Factory private uniswapFactory;\\n  address internal constant NULL_ADDRESS = 0x0000000000000000000000000000000000000000;\\n  uint96 private constant uniswapBurnRate = 1000;\\n  address public uniswapPairAddress = 0x0000000000000000000000000000000000000000;\\n  address public uniswapTokenTimelockAddress = 0x0000000000000000000000000000000000000000;\\n  address public takeTimelockAddress = 0x0000000000000000000000000000000000000000;\\n\\n  // Team Revenue in percent\\n  uint256 private constant teamRevenueBasisPoints = 3000;\\n\\n  //\\n  bool public bcFlowAllowed = false;\\n\\n  /// Pay\\n\\n  /// @notice Pay the organization on-chain without minting any tokens.\\n  /// @dev This allows you to add funds directly to the buybackReserve.\\n  function pay() external payable\\n  {\\n    require(address(currency) == address(0), \\\"ONLY_FOR_CURRENCY_ETH\\\");\\n  }\\n\\n  function handleBC(\\n    bool withdrawOnError\\n  ) external\\n  {\\n    require(state == STATE_CLOSE, \\\"ONLY_AFTER_CLOSE\\\");\\n    require(msg.sender == beneficiary, \\\"BENEFICIARY_ONLY\\\");\\n\\n    uint256 reserve = address(this).balance;\\n    require(reserve > 0, \\\"MUST_BUY_AT_LEAST_1\\\");\\n\\n    uint256 teamReserve = reserve.mul(teamRevenueBasisPoints);\\n    teamReserve /= BASIS_POINTS_DEN;\\n    uint256 uniswapPoolEthAmount  = reserve.sub(teamReserve);\\n\\n    uint256 uniswapPoolTakeAmount = uniswapPoolEthAmount.mul(buySlopeDen);\\n    uniswapPoolTakeAmount = uniswapPoolTakeAmount.div(bcTakeReleased);\\n    uniswapPoolTakeAmount = uniswapPoolTakeAmount.div(buySlopeNum);\\n\\n    super._allowTokenTransfer();\\n    super._approve(address(this), uniswapRouterAddress, uint(-1));\\n    try uniswapRouter.addLiquidityETH{\\n    value: uniswapPoolEthAmount\\n    }(\\n      address(this),\\n      uniswapPoolTakeAmount,\\n      uniswapPoolTakeAmount,\\n      uniswapPoolEthAmount,\\n      address(this),\\n      block.timestamp + 15\\n    ) returns (uint256 amountToken, uint256 amountETH, uint256 liquidity) {\\n      Address.sendValue(beneficiary, address(this).balance);\\n\\n      uniswapPairAddress = uniswapFactory.getPair(uniswapRouter.WETH(), address(this));\\n      super._setBurnConfig(uniswapBurnRate, NULL_ADDRESS);\\n      super._addBurnSaleAddress(uniswapPairAddress);\\n      super._setApproveConfig(NULL_ADDRESS);\\n\\n      lockTakeTokens();\\n    } catch {\\n      if (withdrawOnError) {\\n        Address.sendValue(beneficiary, address(this).balance);\\n        uint96 amount = safe96(this.balanceOf(address(this)), \\\"DAT:: amount exceeds 96 bits\\\");\\n        super._transferTokens(address(this), beneficiary, amount);\\n      }\\n    }\\n\\n  }\\n\\n  function lockUniswapTokens() external {\\n    require(state == STATE_CLOSE, \\\"ONLY_AFTER_CLOSE\\\");\\n    require(msg.sender == beneficiary, \\\"BENEFICIARY_ONLY\\\");\\n\\n    IERC20 uniswapPair = IERC20(uniswapPairAddress);\\n\\n    TokenTimelock uniswapTokenTimelock = new TokenTimelock(uniswapPair, beneficiary, block.timestamp + 31 days);\\n    uniswapTokenTimelockAddress = address(uniswapTokenTimelock);\\n\\n    uniswapPair.transfer(uniswapTokenTimelockAddress, uniswapPair.balanceOf(address(this)) );\\n  }\\n\\n  // --- Approve by signature ---\\n  // Original source: https://etherscan.io/address/0x6b175474e89094c44da98b954eedeac495271d0f#code\\n  function permit(\\n    address holder,\\n    address spender,\\n    uint256 nonce,\\n    uint256 expiry,\\n    bool allowed,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external\\n  {\\n    bytes32 digest = keccak256(\\n      abi.encodePacked(\\n        \\\"\\\\x19\\\\x01\\\",\\n        DOMAIN_SEPARATOR,\\n        keccak256(\\n          abi.encode(PERMIT_TYPEHASH,\\n          holder,\\n          spender,\\n          nonce,\\n          expiry,\\n          allowed\\n          )\\n        )\\n      )\\n    );\\n\\n    require(holder != address(0), \\\"DAT/invalid-address-0\\\");\\n    require(holder == ecrecover(digest, v, r, s), \\\"DAT/invalid-permit\\\");\\n    require(expiry == 0 || now <= expiry, \\\"DAT/permit-expired\\\");\\n    require(nonce == nonces[holder]++, \\\"DAT/invalid-nonce\\\");\\n    uint256 wad = allowed ? uint(-1) : 0;\\n    super._approve(holder, spender, wad);\\n  }\\n\\n  /**\\n   * Config / Control\\n   */\\n\\n  /// @notice Called once after deploy to set the initial configuration.\\n  /// None of the values provided here may change once initially set.\\n  /// @dev using the init pattern in order to support zos upgrades\\n  function initialize(\\n    address _currencyAddress,\\n    uint256 _initGoal,\\n    uint256 _bcGoal,\\n    uint256 _buySlopeNum,\\n    uint256 _buySlopeDen,\\n    uint256 _investmentReserveBasisPoints\\n  ) public\\n  {\\n    require(control == address(0), \\\"ALREADY_INITIALIZED\\\");\\n\\n    initReserve = 0;\\n\\n    // Set initGoal, which in turn defines the initial state\\n    if(_initGoal == 0)\\n    {\\n      emit StateChange(state, STATE_RUN);\\n      state = STATE_RUN;\\n    }\\n    else\\n    {\\n      // Math: If this value got too large, the DAT would overflow on sell\\n      require(_initGoal < MAX_SUPPLY, \\\"EXCESSIVE_GOAL\\\");\\n      initGoal = _initGoal;\\n    }\\n\\n    require(_bcGoal > 0, \\\"INVALID_BC_GOAL\\\");\\n    bcGoal = _bcGoal;\\n\\n    bcTakeReleased = 0;\\n\\n    require(_buySlopeNum > 0, \\\"INVALID_SLOPE_NUM\\\");\\n    require(_buySlopeDen > 0, \\\"INVALID_SLOPE_DEN\\\");\\n    require(_buySlopeNum < MAX_BEFORE_SQUARE, \\\"EXCESSIVE_SLOPE_NUM\\\");\\n    require(_buySlopeDen < MAX_BEFORE_SQUARE, \\\"EXCESSIVE_SLOPE_DEN\\\");\\n    buySlopeNum = _buySlopeNum;\\n    buySlopeDen = _buySlopeDen;\\n    // 100% or less\\n    require(_investmentReserveBasisPoints <= BASIS_POINTS_DEN, \\\"INVALID_RESERVE\\\");\\n    investmentReserveBasisPoints = _investmentReserveBasisPoints;\\n\\n    // Set default values (which may be updated using `updateConfig`)\\n    minInvestment = 1 ether;\\n    beneficiary = msg.sender;\\n    control = msg.sender;\\n\\n    // Save currency\\n    currency = IERC20(_currencyAddress);\\n\\n    // Initialize permit\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n        keccak256(bytes(name)),\\n        keccak256(bytes(version)),\\n        _getChainId(),\\n        address(this)\\n      )\\n    );\\n  }\\n\\n  function updateConfig(\\n    address payable _beneficiary,\\n    address _control,\\n    address _uniswapRouterAddress,\\n    address _uniswapFactoryAddress,\\n    uint256 _minInvestment,\\n    uint256 _openUntilAtLeast\\n  ) public\\n  {\\n    // This require(also confirms that initialize has been called.\\n    require(msg.sender == control, \\\"CONTROL_ONLY\\\");\\n\\n    require(_control != address(0), \\\"INVALID_ADDRESS\\\");\\n    control = _control;\\n\\n    require(_uniswapRouterAddress != address(0), \\\"INVALID_ADDRESS\\\");\\n    uniswapRouterAddress = _uniswapRouterAddress;\\n\\n    require(_uniswapFactoryAddress != address(0), \\\"INVALID_ADDRESS\\\");\\n    uniswapFactoryAddress = _uniswapFactoryAddress;\\n\\n    uniswapRouter = IUniswapV2Router02(uniswapRouterAddress);\\n    uniswapFactory = IUniswapV2Factory(uniswapFactoryAddress);\\n\\n    require(_minInvestment > 0, \\\"INVALID_MIN_INVESTMENT\\\");\\n    minInvestment = _minInvestment;\\n\\n    require(_openUntilAtLeast >= openUntilAtLeast, \\\"OPEN_UNTIL_MAY_NOT_BE_REDUCED\\\");\\n    openUntilAtLeast = _openUntilAtLeast;\\n\\n    if(beneficiary != _beneficiary)\\n    {\\n      require(_beneficiary != address(0), \\\"INVALID_ADDRESS\\\");\\n      uint256 tokens = balances[beneficiary];\\n      if(tokens > 0)\\n      {\\n        _transfer(beneficiary, _beneficiary, tokens);\\n      }\\n      beneficiary = _beneficiary;\\n    }\\n\\n    emit UpdateConfig(\\n      _beneficiary,\\n      _control,\\n      _uniswapRouterAddress,\\n      _uniswapFactoryAddress,\\n      _minInvestment,\\n      _openUntilAtLeast\\n    );\\n  }\\n\\n  function allowBcFlow() public {\\n    require(msg.sender == beneficiary, \\\"BENEFICIARY_ONLY\\\");\\n    bcFlowAllowed = true;\\n  }\\n\\n  /**\\n   * Functions for our business logic\\n   */\\n\\n\\n  // Buy\\n\\n  /// @notice Calculate how many TAKE tokens you would buy with the given amount of currency if `buy` was called now.\\n  /// @param _currencyValue How much currency to spend in order to buy TAKE.\\n  function estimateBuyValue(\\n    uint256 _currencyValue\\n  ) public view\\n    returns (uint)\\n  {\\n    if(_currencyValue < minInvestment)\\n    {\\n      return 0;\\n    }\\n\\n    /// Calculate the tokenValue for this investment\\n    uint256 tokenValue;\\n    if(state == STATE_RUN)\\n    {\\n      uint256 supply = bcTakeReleased;\\n      // Math: worst case\\n      // MAX * 2 * MAX_BEFORE_SQUARE\\n      // / MAX_BEFORE_SQUARE\\n      tokenValue = BigDiv.bigDiv2x1(\\n        _currencyValue,\\n        2 * buySlopeDen,\\n        buySlopeNum\\n      );\\n\\n      // Math: worst case MAX + (MAX_BEFORE_SQUARE * MAX_BEFORE_SQUARE)\\n      tokenValue = tokenValue.add(supply * supply);\\n      tokenValue = tokenValue.sqrt();\\n\\n      // Math: small chance of underflow due to possible rounding in sqrt\\n      tokenValue = tokenValue.sub(supply);\\n    }\\n    else\\n    {\\n      // invalid state\\n      return 0;\\n    }\\n\\n    return tokenValue;\\n  }\\n\\n  function estimateBuyTokensValue (\\n    uint256 _tokenValue\\n  ) public view\\n    returns (uint)\\n  {\\n    /// Calculate the investment to buy _tokenValue\\n    uint256 currencyValue;\\n    if(state == STATE_RUN) {\\n      uint256 supply = bcTakeReleased;\\n\\n      uint256 tokenValue = _tokenValue.add(supply);\\n\\n      tokenValue = tokenValue.mul(tokenValue);\\n      tokenValue = tokenValue.sub(supply * supply);\\n\\n      currencyValue = BigDiv.bigDiv2x1(\\n        tokenValue,\\n        buySlopeNum,\\n        2 * buySlopeDen\\n      );\\n    }\\n    else\\n    {\\n      // invalid state\\n      return 0;\\n    }\\n\\n  return currencyValue;\\n  }\\n\\n  /// @notice Purchase TAKE tokens with the given amount of currency.\\n  /// @param _to The account to receive the TAKE tokens from this purchase.\\n  /// @param _currencyValue How much currency to spend in order to buy TAKE.\\n  /// @param _minTokensBought Buy at least this many TAKE tokens or the transaction reverts.\\n  /// @dev _minTokensBought is necessary as the price will change if some elses transaction mines after\\n  /// yours was submitted.\\n  function buy(\\n    address _to,\\n    uint256 _currencyValue,\\n    uint256 _minTokensBought\\n  ) public payable\\n  {\\n    require(bcFlowAllowed, \\\"TOKEN_SALE_NOT_STARTED\\\");\\n    require(_to != address(0), \\\"INVALID_ADDRESS\\\");\\n    require(_minTokensBought > 0, \\\"MUST_BUY_AT_LEAST_1\\\");\\n    require(bcGoal >= bcTakeReleased, \\\"BC_GOAL_REACHED\\\");\\n\\n    bool closeAfterBuy = false;\\n\\n    // Calculate the tokenValue for this investment\\n    uint256 tokenValue = estimateBuyValue(_currencyValue);\\n    if (bcTakeReleased.add(tokenValue) >= bcGoal) {\\n      closeAfterBuy = true;\\n      tokenValue = bcGoal.sub(bcTakeReleased);\\n      _currencyValue = estimateBuyTokensValue(tokenValue);\\n    }\\n\\n    require(tokenValue >= _minTokensBought, \\\"PRICE_SLIPPAGE\\\");\\n\\n    emit Buy(msg.sender, _to, _currencyValue, tokenValue);\\n\\n    _collectInvestment(_currencyValue, msg.value, true);\\n    super._transferTokens(address(this), _to, safe96(tokenValue, \\\"DAT:: amount exceeds 96 bits\\\"));\\n\\n    bcTakeReleased = bcTakeReleased.add(tokenValue);\\n\\n    if(state == STATE_RUN && closeAfterBuy) {\\n      _close();\\n    }\\n  }\\n  \\n  /// Close\\n\\n  /// @notice Called by the beneficiary account to STATE_CLOSE or STATE_CANCEL the c-org.\\n  function close() public\\n  {\\n    require(msg.sender == beneficiary, \\\"BENEFICIARY_ONLY\\\");\\n    _close();\\n  }\\n\\n  /**\\n * Functions required by the ERC-20 token standard\\n */\\n\\n  /// @dev Moves tokens from one account to another if authorized.\\n  function _transfer(\\n    address _from,\\n    address _to,\\n    uint256 _amount\\n  ) internal\\n  {\\n    require(state != STATE_INIT || _from == beneficiary, \\\"ONLY_BENEFICIARY_DURING_INIT\\\");\\n    uint96 amount = safe96(_amount, \\\"DAT::transfer: amount exceeds 96 bits\\\");\\n    super._transferTokens(_from, _to, amount);\\n  }\\n\\n  function _close() private\\n  {\\n    if(state == STATE_INIT)\\n    {\\n      // Allow the org to cancel anytime if the initGoal was not reached.\\n      emit StateChange(state, STATE_CANCEL);\\n      state = STATE_CANCEL;\\n    }\\n    else if(state == STATE_RUN)\\n    {\\n      require(openUntilAtLeast <= block.timestamp, \\\"TOO_EARLY\\\");\\n\\n      emit StateChange(state, STATE_CLOSE);\\n      state = STATE_CLOSE;\\n    }\\n    else\\n    {\\n      revert(\\\"INVALID_STATE\\\");\\n    }\\n\\n    emit Close();\\n  }\\n\\n\\n  /**\\n   * Transaction Helpers\\n   */\\n\\n  /// @notice Confirms the transfer of `_quantityToInvest` currency to the contract.\\n  function _collectInvestment(\\n    uint256 _quantityToInvest,\\n    uint256 _msgValue,\\n    bool _refundRemainder\\n  ) private\\n  {\\n    if(address(currency) == address(0))\\n    {\\n      // currency is ETH\\n      if(_refundRemainder)\\n      {\\n        // Math: if _msgValue was not sufficient then revert\\n        uint256 refund = _msgValue.sub(_quantityToInvest);\\n        if(refund > 0)\\n        {\\n          Address.sendValue(msg.sender, refund);\\n        }\\n      }\\n      else\\n      {\\n        require(_quantityToInvest == _msgValue, \\\"INCORRECT_MSG_VALUE\\\");\\n      }\\n    }\\n    else\\n    {\\n      // currency is ERC20\\n      require(_msgValue == 0, \\\"DO_NOT_SEND_ETH\\\");\\n\\n      currency.safeTransferFrom(msg.sender, address(this), _quantityToInvest);\\n    }\\n  }\\n\\n  /// @dev Send `_amount` currency from the contract to the `_to` account.\\n  function _transferCurrency(\\n    address payable _to,\\n    uint256 _amount\\n  ) private\\n  {\\n    if(_amount > 0)\\n    {\\n      if(address(currency) == address(0))\\n      {\\n        Address.sendValue(_to, _amount);\\n      }\\n      else\\n      {\\n        currency.safeTransfer(_to, _amount);\\n      }\\n    }\\n  }\\n\\n  function _getChainId(\\n  ) private pure\\n  returns (uint256 id)\\n  {\\n    // solium-disable-next-line\\n    assembly\\n    {\\n      id := chainid()\\n    }\\n  }\\n\\n  function lockTakeTokens() private {\\n    require(state == STATE_CLOSE, \\\"ONLY_AFTER_CLOSE\\\");\\n    require(msg.sender == beneficiary, \\\"BENEFICIARY_ONLY\\\");\\n\\n    TokenTimelock takeTokenTimelock = new TokenTimelock(IERC20(address(this)), beneficiary, block.timestamp + 31 days);\\n    takeTimelockAddress = address(takeTokenTimelock);\\n\\n    this.transfer(takeTimelockAddress, this.balanceOf(address(this)) );\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/math/BigDiv.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Reduces the size of terms before multiplication, to avoid an overflow, and then\\n * restores the proper size after division.\\n * @notice This effectively allows us to overflow values in the numerator and/or denominator\\n * of a fraction, so long as the end result does not overflow as well.\\n * @dev Results may be off by 1 + 0.000001% for 2x1 calls and 2 + 0.00001% for 2x2 calls.\\n * Do not use if your contract expects very small result values to be accurate.\\n */\\nlibrary BigDiv\\n{\\n  using SafeMath for uint256;\\n\\n  // @notice The max possible value\\n  uint256 private constant MAX_UINT = 2**256 - 1;\\n\\n  // @notice When multiplying 2 terms <= this value the result won't overflow\\n  uint256 private constant MAX_BEFORE_SQUARE = 2**128 - 1;\\n\\n  // @notice The max error target is off by 1 plus up to 0.000001% error\\n  // for bigDiv2x1 and that `* 2` for bigDiv2x2\\n  uint256 private constant MAX_ERROR = 100000000;\\n\\n  // @notice A larger error threshold to use when multiple rounding errors may apply\\n  uint256 private constant MAX_ERROR_BEFORE_DIV = MAX_ERROR * 2;\\n\\n  /**\\n   * @notice Returns the approx result of `a * b / d` so long as the result is <= MAX_UINT\\n   * @param _numA the first numerator term\\n   * @param _numB the second numerator term\\n   * @param _den the denominator\\n   * @return the approx result with up to off by 1 + MAX_ERROR, rounding down if needed\\n   */\\n  function bigDiv2x1(\\n    uint256 _numA,\\n    uint256 _numB,\\n    uint256 _den\\n  ) internal pure\\n    returns(uint256)\\n  {\\n    if(_numA == 0 || _numB == 0)\\n    {\\n      // would div by 0 or underflow if we don't special case 0\\n      return 0;\\n    }\\n\\n    uint256 value;\\n\\n    if(MAX_UINT / _numA >= _numB)\\n    {\\n      // a*b does not overflow, return exact math\\n      value = _numA * _numB;\\n      value /= _den;\\n      return value;\\n    }\\n\\n    // Sort numerators\\n    uint256 numMax = _numB;\\n    uint256 numMin = _numA;\\n    if(_numA > _numB)\\n    {\\n      numMax = _numA;\\n      numMin = _numB;\\n    }\\n\\n    value = numMax / _den;\\n    if(value > MAX_ERROR)\\n    {\\n      // _den is small enough to be MAX_ERROR or better w/o a factor\\n      value = value.mul(numMin);\\n      return value;\\n    }\\n\\n    // formula = ((a / f) * b) / (d / f)\\n    // factor >= a / sqrt(MAX) * (b / sqrt(MAX))\\n    uint256 factor = numMin - 1;\\n    factor /= MAX_BEFORE_SQUARE;\\n    factor += 1;\\n    uint256 temp = numMax - 1;\\n    temp /= MAX_BEFORE_SQUARE;\\n    temp += 1;\\n    if(MAX_UINT / factor >= temp)\\n    {\\n      factor *= temp;\\n      value = numMax / factor;\\n      if(value > MAX_ERROR_BEFORE_DIV)\\n      {\\n        value = value.mul(numMin);\\n        temp = _den - 1;\\n        temp /= factor;\\n        temp = temp.add(1);\\n        value /= temp;\\n        return value;\\n      }\\n    }\\n\\n    // formula: (a / (d / f)) * (b / f)\\n    // factor: b / sqrt(MAX)\\n    factor = numMin - 1;\\n    factor /= MAX_BEFORE_SQUARE;\\n    factor += 1;\\n    value = numMin / factor;\\n    temp = _den - 1;\\n    temp /= factor;\\n    temp += 1;\\n    temp = numMax / temp;\\n    value = value.mul(temp);\\n    return value;\\n  }\\n\\n  /**\\n   * @notice Returns the approx result of `a * b / d` so long as the result is <= MAX_UINT\\n   * @param _numA the first numerator term\\n   * @param _numB the second numerator term\\n   * @param _den the denominator\\n   * @return the approx result with up to off by 1 + MAX_ERROR, rounding down if needed\\n   * @dev roundUp is implemented by first rounding down and then adding the max error to the result\\n   */\\n  function bigDiv2x1RoundUp(\\n    uint256 _numA,\\n    uint256 _numB,\\n    uint256 _den\\n  ) internal pure\\n    returns(uint256)\\n  {\\n    // first get the rounded down result\\n    uint256 value = bigDiv2x1(_numA, _numB, _den);\\n\\n    if(value == 0)\\n    {\\n      // when the value rounds down to 0, assume up to an off by 1 error\\n      return 1;\\n    }\\n\\n    // round down has a max error of MAX_ERROR, add that to the result\\n    // for a round up error of <= MAX_ERROR\\n    uint256 temp = value - 1;\\n    temp /= MAX_ERROR;\\n    temp += 1;\\n    if(MAX_UINT - value < temp)\\n    {\\n      // value + error would overflow, return MAX\\n      return MAX_UINT;\\n    }\\n\\n    value += temp;\\n\\n    return value;\\n  }\\n\\n  /**\\n   * @notice Returns the approx result of `a * b / (c * d)` so long as the result is <= MAX_UINT\\n   * @param _numA the first numerator term\\n   * @param _numB the second numerator term\\n   * @param _denA the first denominator term\\n   * @param _denB the second denominator term\\n   * @return the approx result with up to off by 2 + MAX_ERROR*10 error, rounding down if needed\\n   * @dev this uses bigDiv2x1 and adds additional rounding error so the max error of this\\n   * formula is larger\\n   */\\n  function bigDiv2x2(\\n    uint256 _numA,\\n    uint256 _numB,\\n    uint256 _denA,\\n    uint256 _denB\\n  ) internal pure\\n    returns (uint256)\\n  {\\n    if(MAX_UINT / _denA >= _denB)\\n    {\\n      // denA*denB does not overflow, use bigDiv2x1 instead\\n      return bigDiv2x1(_numA, _numB, _denA * _denB);\\n    }\\n\\n    if(_numA == 0 || _numB == 0)\\n    {\\n      // would div by 0 or underflow if we don't special case 0\\n      return 0;\\n    }\\n\\n    // Sort denominators\\n    uint256 denMax = _denB;\\n    uint256 denMin = _denA;\\n    if(_denA > _denB)\\n    {\\n      denMax = _denA;\\n      denMin = _denB;\\n    }\\n\\n    uint256 value;\\n\\n    if(MAX_UINT / _numA >= _numB)\\n    {\\n      // a*b does not overflow, use `a / d / c`\\n      value = _numA * _numB;\\n      value /= denMin;\\n      value /= denMax;\\n      return value;\\n    }\\n\\n    // `ab / cd` where both `ab` and `cd` would overflow\\n\\n    // Sort numerators\\n    uint256 numMax = _numB;\\n    uint256 numMin = _numA;\\n    if(_numA > _numB)\\n    {\\n      numMax = _numA;\\n      numMin = _numB;\\n    }\\n\\n    // formula = (a/d) * b / c\\n    uint256 temp = numMax / denMin;\\n    if(temp > MAX_ERROR_BEFORE_DIV)\\n    {\\n      return bigDiv2x1(temp, numMin, denMax);\\n    }\\n\\n    // formula: ((a/f) * b) / d then either * f / c or / c * f\\n    // factor >= a / sqrt(MAX) * (b / sqrt(MAX))\\n    uint256 factor = numMin - 1;\\n    factor /= MAX_BEFORE_SQUARE;\\n    factor += 1;\\n    temp = numMax - 1;\\n    temp /= MAX_BEFORE_SQUARE;\\n    temp += 1;\\n    if(MAX_UINT / factor >= temp)\\n    {\\n      factor *= temp;\\n\\n      value = numMax / factor;\\n      if(value > MAX_ERROR_BEFORE_DIV)\\n      {\\n        value = value.mul(numMin);\\n        value /= denMin;\\n        if(value > 0 && MAX_UINT / value >= factor)\\n        {\\n          value *= factor;\\n          value /= denMax;\\n          return value;\\n        }\\n      }\\n    }\\n\\n    // formula: (a/f) * b / ((c*d)/f)\\n    // factor >= c / sqrt(MAX) * (d / sqrt(MAX))\\n    factor = denMin;\\n    factor /= MAX_BEFORE_SQUARE;\\n    temp = denMax;\\n    // + 1 here prevents overflow of factor*temp\\n    temp /= MAX_BEFORE_SQUARE + 1;\\n    factor *= temp;\\n    return bigDiv2x1(numMax / factor, numMin, MAX_UINT);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/math/Sqrt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n\\n/**\\n * @title Calculates the square root of a given value.\\n * @dev Results may be off by 1.\\n */\\nlibrary Sqrt\\n{\\n  // The max possible value\\n  uint256 private constant MAX_UINT = 2**256 - 1;\\n\\n  // Source: https://github.com/ethereum/dapp-bin/pull/50\\n  function sqrt(\\n    uint x\\n  ) internal pure\\n    returns (uint y)\\n  {\\n    if (x == 0)\\n    {\\n      return 0;\\n    }\\n    else if (x <= 3)\\n    {\\n      return 1;\\n    }\\n    else if (x == MAX_UINT)\\n    {\\n      // Without this we fail on x + 1 below\\n      return 2**128 - 1;\\n    }\\n\\n    uint z = (x + 1) / 2;\\n    y = x;\\n    while (z < y)\\n    {\\n      y = z;\\n      z = (x / z + z) / 2;\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Take.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Take is Ownable {\\n    using SafeMath for uint;\\n\\n    /// @notice EIP-20 token name for this token\\n    string public constant name = \\\"Take\\\";\\n\\n    /// @notice EIP-20 token symbol for this token\\n    string public constant symbol = \\\"TAKE\\\";\\n\\n    /// @notice EIP-20 token decimals for this token\\n    uint8 public constant decimals = 18;\\n\\n    /// @notice Total number of tokens in circulation\\n    uint256 public totalSupply;\\n\\n    // Allowance amounts on behalf of others\\n    mapping (address => mapping (address => uint96)) internal allowances;\\n\\n    // Official record of token balances for each account\\n    mapping (address => uint96) internal balances;\\n\\n    /// @notice A record of each accounts delegate\\n    mapping (address => address) public delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping (address => uint32) public numCheckpoints;\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping (address => uint) public nonces;\\n\\n    /// @notice An event thats emitted when an burn config changed\\n    event BurnConfigChanged(uint96 burnRate, address burnPoolAddress);\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /// @notice The standard EIP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @notice The standard EIP-20 approval event\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint96 public  burnRate;\\n    address public burnPoolAddress;\\n    uint96 public constant burnRateBase = 10000;\\n\\n    address public approveDisabledAddress;\\n    bool public tokenTransferAllowed = false;\\n\\n    mapping (address => bool)  public burnSaleAddresses;\\n\\n\\n    /**\\n     * @notice Construct a new Take token\\n     */\\n    constructor() public {\\n        uint96 _totalSupply = 1000000e18;\\n        totalSupply = _totalSupply;\\n        balances[msg.sender] = _totalSupply;\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\n\\n        burnRate = 0;\\n        burnPoolAddress = 0x0000000000000000000000000000000000000000;\\n        approveDisabledAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    }\\n\\n    function setBurnConfig(uint96 _burnRate, address _burnPoolAddress) external\\n    onlyOwner\\n    {\\n        _setBurnConfig(_burnRate, _burnPoolAddress);\\n    }\\n\\n    function addBurnSaleAddress(address burnAddress) external onlyOwner {\\n        _addBurnSaleAddress(burnAddress);\\n    }\\n\\n    function removeBurnSaleAddress(address burnAddress) external onlyOwner {\\n        burnSaleAddresses[burnAddress] = false;\\n    }\\n\\n    function setApproveConfig(address _approveDisabledAddress) external onlyOwner {\\n        _setApproveConfig(_approveDisabledAddress);\\n    }\\n\\n    function allowTokenTransfer() external onlyOwner {\\n        _allowTokenTransfer();\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 rawAmount) external returns (bool) {\\n        require(approveDisabledAddress != spender, \\\"Take::approve: disabled\\\");\\n\\n        uint96 amount;\\n        if (rawAmount == uint(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(rawAmount, \\\"Take::approve: amount exceeds 96 bits\\\");\\n        }\\n\\n        allowances[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 rawAmount) external returns (bool) {\\n        if (msg.sender != owner()) {\\n            require(tokenTransferAllowed, \\\"Take:: Token transfer not allowed\\\");\\n        }\\n\\n        uint96 amount = safe96(rawAmount, \\\"Take::transfer: amount exceeds 96 bits\\\");\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 rawAmount) external returns (bool) {\\n        if (msg.sender != owner()) {\\n            require(tokenTransferAllowed, \\\"Take:: Token transfer not allowed\\\");\\n        }\\n\\n        address spender = msg.sender;\\n        uint96 spenderAllowance = allowances[src][spender];\\n        uint96 amount = safe96(rawAmount, \\\"Take::approve: amount exceeds 96 bits\\\");\\n\\n        if (spender != src && spenderAllowance != uint96(-1)) {\\n            uint96 newAllowance = sub96(spenderAllowance, amount, \\\"Take::transferFrom: transfer amount exceeds spender allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint96) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) public {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber) public view returns (uint96) {\\n        require(blockNumber < block.number, \\\"Take::getPriorVotes: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint96 delegatorBalance = balances[delegator];\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _transferTokens(address src, address dst, uint96 amount) internal {\\n        require(src != address(0), \\\"Take::_transferTokens: cannot transfer from the zero address\\\");\\n        require(dst != address(0), \\\"Take::_transferTokens: cannot transfer to the zero address\\\");\\n\\n        uint96 sendAmount = amount;\\n        uint96 burnFee = div96(mul96(burnRate, amount), burnRateBase);\\n        if (burnFee >0 && burnSaleAddresses[dst]) {\\n            balances[burnPoolAddress] = add96(\\n                balances[burnPoolAddress],\\n                burnFee,\\n                \\\"Take::_transferTokens: transfer amount burnFee overflows\\\"\\n            );\\n            sendAmount = sub96(amount, burnFee, \\\"Take::_transferTokens: burnFee > amount\\\");\\n\\n            emit Transfer(src, burnPoolAddress, burnFee);\\n        }\\n\\n        balances[src] = sub96(balances[src], amount, \\\"Take::_transferTokens: transfer amount exceeds balance\\\");\\n        balances[dst] = add96(balances[dst], sendAmount, \\\"Take::_transferTokens: transfer amount overflows\\\");\\n        emit Transfer(src, dst, sendAmount);\\n\\n        _moveDelegates(delegates[src], delegates[dst], amount);\\n    }\\n\\n    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint96 srcRepNew = sub96(srcRepOld, amount, \\\"Take::_moveVotes: vote amount underflows\\\");\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint96 dstRepNew = add96(dstRepOld, amount, \\\"Take::_moveVotes: vote amount overflows\\\");\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"Take::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul96(uint96 a, uint96 b) internal pure returns (uint96) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint96 c = a * b;\\n        require(c / a == b, \\\"multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div96(uint96 a, uint96 b) internal pure returns (uint96) {\\n        require(b > 0, \\\"division by zero\\\");\\n        uint96 c = a / b;\\n\\n        return c;\\n    }\\n\\n    function getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n    //DAT Helpers\\n\\n    function _approve(address owner, address spender, uint256 rawAmount) internal {\\n        require(owner != address(0), \\\"Take::approve: approve from the zero address\\\");\\n        require(spender != address(0), \\\"Take::approve: approve to the zero address\\\");\\n\\n        uint96 amount;\\n        if (rawAmount == uint(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(rawAmount, \\\"Take::approve: amount exceeds 96 bits\\\");\\n        }\\n\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _addBurnSaleAddress(address burnAddress) internal onlyOwner {\\n        burnSaleAddresses[burnAddress] = true;\\n    }\\n\\n    function _setBurnConfig(uint96 _burnRate, address _burnPoolAddress) internal\\n    {\\n        burnRate = _burnRate;\\n        burnPoolAddress = _burnPoolAddress;\\n\\n        emit BurnConfigChanged(burnRate, burnPoolAddress);\\n    }\\n\\n    function _setApproveConfig(address _approveDisabledAddress) internal {\\n        approveDisabledAddress = _approveDisabledAddress;\\n    }\\n\\n    function _allowTokenTransfer() internal {\\n        tokenTransferAllowed = true;\\n    }\\n}\"\r\n    },\r\n    \"contracts/uniswap/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/uniswap/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/TokenTimelock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./SafeERC20.sol\\\";\\n\\n/**\\n * @dev A token holder contract that will allow a beneficiary to extract the\\n * tokens after a given release time.\\n *\\n * Useful for simple vesting schedules like \\\"advisors get all of their tokens\\n * after 1 year\\\".\\n */\\ncontract TokenTimelock {\\n    using SafeERC20 for IERC20;\\n\\n    // ERC20 basic token contract being held\\n    IERC20 private _token;\\n\\n    // beneficiary of tokens after they are released\\n    address private _beneficiary;\\n\\n    // timestamp when token release is enabled\\n    uint256 private _releaseTime;\\n\\n    constructor (IERC20 token_, address beneficiary_, uint256 releaseTime_) public {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(releaseTime_ > block.timestamp, \\\"TokenTimelock: release time is before current time\\\");\\n        _token = token_;\\n        _beneficiary = beneficiary_;\\n        _releaseTime = releaseTime_;\\n    }\\n\\n    /**\\n     * @return the token being held.\\n     */\\n    function token() public view returns (IERC20) {\\n        return _token;\\n    }\\n\\n    /**\\n     * @return the beneficiary of the tokens.\\n     */\\n    function beneficiary() public view returns (address) {\\n        return _beneficiary;\\n    }\\n\\n    /**\\n     * @return the time when the tokens are released.\\n     */\\n    function releaseTime() public view returns (uint256) {\\n        return _releaseTime;\\n    }\\n\\n    /**\\n     * @notice Transfers tokens held by timelock to beneficiary.\\n     */\\n    function release() public virtual {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp >= _releaseTime, \\\"TokenTimelock: current time is before release time\\\");\\n\\n        uint256 amount = _token.balanceOf(address(this));\\n        require(amount > 0, \\\"TokenTimelock: no tokens to release\\\");\\n\\n        _token.safeTransfer(_beneficiary, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"burnRate\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burnPoolAddress\",\"type\":\"address\"}],\"name\":\"BurnConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_currencyValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fairValue\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Close\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_previousState\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newState\",\"type\":\"uint256\"}],\"name\":\"StateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_control\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_uniswapRouterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_uniswapFactoryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minInvestment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_openUntilAtLeast\",\"type\":\"uint256\"}],\"name\":\"UpdateConfig\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burnAddress\",\"type\":\"address\"}],\"name\":\"addBurnSaleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowBcFlow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveDisabledAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bcFlowAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bcGoal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bcTakeReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRate\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRateBase\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"burnSaleAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_currencyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokensBought\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buySlopeDen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buySlopeNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"control\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenValue\",\"type\":\"uint256\"}],\"name\":\"estimateBuyTokensValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currencyValue\",\"type\":\"uint256\"}],\"name\":\"estimateBuyValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"withdrawOnError\",\"type\":\"bool\"}],\"name\":\"handleBC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initGoal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initGoal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bcGoal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buySlopeNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buySlopeDen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investmentReserveBasisPoints\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investmentReserveBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockUniswapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openUntilAtLeast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burnAddress\",\"type\":\"address\"}],\"name\":\"removeBurnSaleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approveDisabledAddress\",\"type\":\"address\"}],\"name\":\"setApproveConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_burnRate\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_burnPoolAddress\",\"type\":\"address\"}],\"name\":\"setBurnConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTimelockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTransferAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapTokenTimelockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_control\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_openUntilAtLeast\",\"type\":\"uint256\"}],\"name\":\"updateConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DecentralizedAutonomousTrust", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}