{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/libraries/Struct.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nlibrary Storage {\\r\\n    \\r\\n    struct NETWORK{\\r\\n        bool valid;\\r\\n        uint8 decimals;\\r\\n    }\\r\\n\\r\\n    struct TKN{\\r\\n        uint256 origin_network;\\r\\n        string origin_hash;\\r\\n        uint8 origin_decimals;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Bridge {\\r\\n\\r\\n    struct TICKET{\\r\\n        address dst_address;\\r\\n        uint256 dst_network;\\r\\n        uint256 amount;\\r\\n        string src_hash;\\r\\n        string src_address;\\r\\n        uint256 src_network;\\r\\n        string origin_hash;\\r\\n        uint256 origin_network;\\r\\n        uint256 nonce;\\r\\n        string name;\\r\\n        string symbol;\\r\\n        uint8 origin_decimals;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/security/OnlyBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./OnlyGovernance.sol\\\";\\r\\n\\r\\nabstract contract OnlyBridge is OnlyGovernance {\\r\\n\\r\\n    address private bridge;\\r\\n\\r\\n    function getBridge() public view returns(address){\\r\\n        return bridge;\\r\\n    }\\r\\n    /**\\r\\n     * @notice Used to set the bridge contract that determines the position\\r\\n     * ranges and calls rebalance(). Must be called after this vault is\\r\\n     * deployed.\\r\\n     */\\r\\n    function setBridge(address _bridge) external onlyGovernance {\\r\\n        bridge = _bridge;\\r\\n    }\\r\\n\\r\\n    modifier onlyBridge {\\r\\n        require(msg.sender == bridge, \\\"bridge\\\");\\r\\n        _;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/security/OnlyGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract OnlyGovernance {\\r\\n\\r\\n    address private governance;\\r\\n    address private pendingGovernance;\\r\\n\\r\\n    constructor() {\\r\\n        governance = msg.sender;\\r\\n    }\\r\\n\\r\\n    function getGovernance() public view returns(address){\\r\\n        return governance;\\r\\n    }\\r\\n\\r\\n    function getPendingGovernance() public view returns(address){\\r\\n        return pendingGovernance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Governance address is not updated until the new governance\\r\\n     * address has called `acceptGovernance()` to accept this responsibility.\\r\\n     */\\r\\n    function setGovernance(address _governance) external onlyGovernance {\\r\\n        pendingGovernance = _governance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice `setGovernance()` should be called by the existing governance\\r\\n     * address prior to calling this function.\\r\\n     */\\r\\n    function acceptGovernance() external {\\r\\n        require(msg.sender == pendingGovernance, \\\"pendingGovernance\\\");\\r\\n        governance = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernance {\\r\\n        require(msg.sender == governance, \\\"governance\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/SpaceStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"./security/OnlyGovernance.sol\\\";\\r\\nimport \\\"./security/OnlyBridge.sol\\\";\\r\\nimport {Storage} from \\\"./libraries/Struct.sol\\\";\\r\\n\\r\\ncontract SpaceStorage is OnlyGovernance, OnlyBridge {\\r\\n\\r\\n    uint24 public threshold;\\r\\n    mapping(address => bool) public validators;\\r\\n\\r\\n    mapping(uint256 => Storage.NETWORK) public known_networks;\\r\\n\\r\\n    mapping(address => Storage.TKN) _minted;\\r\\n\\r\\n    mapping(string => address) public getAddressFromOriginHash;\\r\\n\\r\\n    mapping(bytes32 => uint256) public transfers;\\r\\n    \\r\\n    mapping(string => address) public lock_map;\\r\\n\\r\\n    function addNetwork(uint256 id, uint8 decimals_) onlyGovernance external {\\r\\n        require(\\r\\n            !known_networks[id].valid,\\r\\n            \\\"Network exist\\\"\\r\\n        );\\r\\n        known_networks[id] = Storage.NETWORK({valid:true, decimals:decimals_});\\r\\n    }\\r\\n\\r\\n    function removeNetwork(uint256 id) onlyGovernance external {\\r\\n        require(\\r\\n            known_networks[id].valid,\\r\\n            \\\"dosnt exist network\\\"\\r\\n        );\\r\\n        delete known_networks[id];\\r\\n    }\\r\\n\\r\\n    function addValidator(address validator) onlyGovernance public {\\r\\n        require(\\r\\n            !validators[validator],\\r\\n            \\\"Owner exist\\\"\\r\\n        );\\r\\n        validators[validator] = true;\\r\\n    }\\r\\n    \\r\\n    function removeValidator(address validator) onlyGovernance external {\\r\\n        require(\\r\\n            validators[validator],\\r\\n            \\\"dosnt exist owner\\\"\\r\\n        );\\r\\n        delete validators[validator];\\r\\n    }\\r\\n      \\r\\n    function setThreshold(uint24 value) onlyGovernance external {\\r\\n        threshold = value;\\r\\n    }\\r\\n\\r\\n    function addMinted(address token_address, string memory origin_hash, Storage.TKN memory tkn) onlyBridge external {\\r\\n        _minted[token_address] = tkn;\\r\\n        getAddressFromOriginHash[origin_hash] = token_address;\\r\\n    }\\r\\n\\r\\n    function incrementNonce(bytes32 key) onlyBridge external {\\r\\n        transfers[key] += 1;\\r\\n    }\\r\\n\\r\\n    function addLockMap(string memory t, address token_hash) onlyBridge external {\\r\\n        lock_map[t] = token_hash;\\r\\n    }\\r\\n\\r\\n    function minted(address key) external view returns (Storage.TKN memory){\\r\\n        return _minted[key];\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"t\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token_hash\",\"type\":\"address\"}],\"name\":\"addLockMap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"origin_hash\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"origin_network\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"origin_hash\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"origin_decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct Storage.TKN\",\"name\":\"tkn\",\"type\":\"tuple\"}],\"name\":\"addMinted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"name\":\"addNetwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"addValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"getAddressFromOriginHash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"incrementNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"known_networks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"lock_map\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"key\",\"type\":\"address\"}],\"name\":\"minted\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"origin_network\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"origin_hash\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"origin_decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct Storage.TKN\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"removeNetwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"removeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"value\",\"type\":\"uint24\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transfers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SpaceStorage", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}