{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/TravelCareMultiSig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ncontract TravelCareMultiSig {\\n    event Deposit(address indexed sender, uint256 amount, uint256 balance);\\n    event ConfirmTransaction(address indexed owner, uint256 indexed txIndex);\\n    event RevokeConfirmation(address indexed owner, uint256 indexed txIndex);\\n    event ExecuteTransaction(address indexed owner, uint256 indexed txIndex);\\n    event TransferETHTransaction(\\n        address indexed owner,\\n        uint256 indexed txIndex,\\n        address indexed to,\\n        uint256 value\\n    );\\n    event TransferERC20Transaction(\\n        address indexed owner,\\n        uint256 indexed txIndex,\\n        address token,\\n        address indexed to,\\n        uint256 value\\n    );\\n    event AddOwnerTransaction(\\n        address indexed creator,\\n        address indexed ownerToAdd,\\n        uint256 indexed txIndex,\\n        uint256 numConfirmationsRequired\\n    );\\n    event RemoveOwnerTransaction(\\n        address indexed creator,\\n        address indexed ownerToRemove,\\n        uint256 indexed txIndex,\\n        uint256 numConfirmationsRequired\\n    );\\n\\n    address[] public owners;\\n    mapping(address => bool) public isOwner;\\n    uint256 public numConfirmationsRequired;\\n\\n    enum TransactionType {\\n        TransferETH,\\n        TransferERC20,\\n        AddOwner,\\n        RemoveOwner\\n    }\\n\\n    struct Transaction {\\n        address to;\\n        address token;\\n        uint256 value;\\n        bool executed;\\n        uint numConfirmations;\\n        TransactionType txType;\\n    }\\n\\n    // mapping from tx index => owner => bool\\n    mapping(uint256 => mapping(address => bool)) public isConfirmed;\\n\\n    Transaction[] public transactions;\\n\\n    modifier onlyOwner() {\\n        require(isOwner[msg.sender], \\\"not owner\\\");\\n        _;\\n    }\\n\\n    modifier txExists(uint256 _txIndex) {\\n        require(_txIndex < transactions.length, \\\"tx does not exist\\\");\\n        _;\\n    }\\n\\n    modifier notExecuted(uint256 _txIndex) {\\n        require(!transactions[_txIndex].executed, \\\"tx already executed\\\");\\n        _;\\n    }\\n\\n    modifier notConfirmed(uint256 _txIndex) {\\n        require(!isConfirmed[_txIndex][msg.sender], \\\"tx already confirmed\\\");\\n        _;\\n    }\\n\\n    constructor(address[] memory _owners, uint256 _numConfirmationsRequired) {\\n        require(_owners.length > 0, \\\"owners required\\\");\\n        require(\\n            _numConfirmationsRequired > 0 &&\\n                _numConfirmationsRequired <= _owners.length,\\n            \\\"invalid number of required confirmations\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _owners.length; i++) {\\n            address owner = _owners[i];\\n\\n            require(owner != address(0), \\\"invalid owner\\\");\\n            require(!isOwner[owner], \\\"owner not unique\\\");\\n\\n            isOwner[owner] = true;\\n            owners.push(owner);\\n        }\\n\\n        numConfirmationsRequired = _numConfirmationsRequired;\\n    }\\n\\n    receive() external payable {\\n        emit Deposit(msg.sender, msg.value, address(this).balance);\\n    }\\n\\n    function transferETHTransaction(\\n        address _to,\\n        uint256 _value\\n    ) public onlyOwner {\\n        uint256 txIndex = transactions.length;\\n\\n        transactions.push(\\n            Transaction({\\n                to: _to,\\n                value: _value,\\n                token: address(0),\\n                executed: false,\\n                numConfirmations: 0,\\n                txType: TransactionType.TransferETH\\n            })\\n        );\\n\\n        emit TransferETHTransaction(\\n            msg.sender,\\n            txIndex,\\n            _to,\\n            _value\\n        );\\n    }\\n\\n    function transferERC20Transaction(\\n        address _token,\\n        address _to,\\n        uint256 _value\\n    ) public onlyOwner {\\n        uint256 txIndex = transactions.length;\\n\\n        transactions.push(\\n            Transaction({\\n                to: _to,\\n                value: _value,\\n                token: _token,\\n                executed: false,\\n                numConfirmations: 0,\\n                txType: TransactionType.TransferERC20\\n            })\\n        );\\n\\n        emit TransferERC20Transaction(\\n            msg.sender,\\n            txIndex,\\n            _token,\\n            _to,\\n            _value\\n        );\\n    }\\n\\n    function addOwnerTransaction(\\n        address _ownerToAdd,\\n        uint256 _numConfirmationsRequired\\n    ) public onlyOwner {\\n        uint256 txIndex = transactions.length;\\n\\n        transactions.push(\\n            Transaction({\\n                to: _ownerToAdd,\\n                value: _numConfirmationsRequired,\\n                token: address(0),\\n                executed: false,\\n                numConfirmations: 0,\\n                txType: TransactionType.AddOwner\\n            })\\n        );\\n\\n        emit AddOwnerTransaction(\\n            msg.sender,\\n            _ownerToAdd,\\n            txIndex,\\n            _numConfirmationsRequired\\n        );\\n    }\\n\\n    function removeOwnerTransaction(\\n        address _ownerToRemove,\\n        uint256 _numConfirmationsRequired\\n    ) public onlyOwner {\\n        uint256 txIndex = transactions.length;\\n\\n        transactions.push(\\n            Transaction({\\n                to: _ownerToRemove,\\n                value: _numConfirmationsRequired,\\n                token: address(0),\\n                executed: false,\\n                numConfirmations: 0,\\n                txType: TransactionType.RemoveOwner\\n            })\\n        );\\n\\n        emit RemoveOwnerTransaction(\\n            msg.sender,\\n            _ownerToRemove,\\n            txIndex,\\n            _numConfirmationsRequired\\n        );\\n    }\\n\\n    function confirmTransaction(uint256 _txIndex)\\n        public\\n        onlyOwner\\n        txExists(_txIndex)\\n        notExecuted(_txIndex)\\n        notConfirmed(_txIndex)\\n    {\\n        Transaction storage transaction = transactions[_txIndex];\\n        transaction.numConfirmations += 1;\\n        isConfirmed[_txIndex][msg.sender] = true;\\n\\n        emit ConfirmTransaction(msg.sender, _txIndex);\\n    }\\n\\n    function executeTransaction(uint256 _txIndex)\\n        public\\n        onlyOwner\\n        txExists(_txIndex)\\n        notExecuted(_txIndex)\\n    {\\n        Transaction storage transaction = transactions[_txIndex];\\n\\n        require(\\n            transaction.numConfirmations >= numConfirmationsRequired,\\n            \\\"cannot execute tx\\\"\\n        );\\n\\n        transaction.executed = true;\\n\\n        TransactionType txType = transaction.txType;\\n        if (txType == TransactionType.TransferETH) {\\n            (bool success, ) = transaction.to.call{value: transaction.value}(\\\"\\\");\\n            require(success, \\\"tx failed\\\");\\n        } else if (txType == TransactionType.TransferERC20) {\\n            (bool success, ) = transaction.token.call(\\n                abi.encodeWithSignature(\\n                    \\\"transfer(address,uint256)\\\",\\n                    transaction.to,\\n                    transaction.value\\n                )\\n            );\\n            require(success, \\\"tx failed\\\");\\n        } else if (txType == TransactionType.AddOwner) {\\n            address owner = transaction.to;\\n            require(owner != address(0), \\\"invalid owner\\\");\\n            require(!isOwner[owner], \\\"owner not unique\\\");\\n\\n            isOwner[owner] = true;\\n            owners.push(owner);\\n            numConfirmationsRequired = transaction.value;\\n        } else if (txType == TransactionType.RemoveOwner) {\\n            address owner = transaction.to;\\n            require(isOwner[owner], \\\"Not an owner\\\");\\n            isOwner[owner] = false;\\n\\n            uint256 length = owners.length;\\n            uint256 i;\\n            for (i = 0; i < length; i++) {\\n                if (owners[i] == owner)\\n                    break;\\n            }\\n\\n            owners[i] = owners[length - 1];\\n            owners.pop();\\n            numConfirmationsRequired = transaction.value;\\n        }\\n\\n        emit ExecuteTransaction(msg.sender, _txIndex);\\n    }\\n\\n    function revokeConfirmation(uint256 _txIndex)\\n        public\\n        onlyOwner\\n        txExists(_txIndex)\\n        notExecuted(_txIndex)\\n    {\\n        Transaction storage transaction = transactions[_txIndex];\\n\\n        require(isConfirmed[_txIndex][msg.sender], \\\"tx not confirmed\\\");\\n\\n        transaction.numConfirmations -= 1;\\n        isConfirmed[_txIndex][msg.sender] = false;\\n\\n        emit RevokeConfirmation(msg.sender, _txIndex);\\n    }\\n\\n    function getOwners() public view returns (address[] memory) {\\n        return owners;\\n    }\\n\\n    function getTransactionCount() public view returns (uint256) {\\n        return transactions.length;\\n    }\\n\\n    function getTransaction(uint256 _txIndex)\\n        public\\n        view\\n        returns (\\n            address to,\\n            address token,\\n            uint256 value,\\n            bool executed,\\n            uint numConfirmations,\\n            TransactionType txType\\n        )\\n    {\\n        Transaction storage transaction = transactions[_txIndex];\\n\\n        return (\\n            transaction.to,\\n            transaction.token,\\n            transaction.value,\\n            transaction.executed,\\n            transaction.numConfirmations,\\n            transaction.txType\\n        );\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_numConfirmationsRequired\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerToAdd\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numConfirmationsRequired\",\"type\":\"uint256\"}],\"name\":\"AddOwnerTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"ConfirmTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerToRemove\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numConfirmationsRequired\",\"type\":\"uint256\"}],\"name\":\"RemoveOwnerTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"RevokeConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferERC20Transaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferETHTransaction\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerToAdd\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numConfirmationsRequired\",\"type\":\"uint256\"}],\"name\":\"addOwnerTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"getTransaction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numConfirmations\",\"type\":\"uint256\"},{\"internalType\":\"enum TravelCareMultiSig.TransactionType\",\"name\":\"txType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numConfirmationsRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerToRemove\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numConfirmationsRequired\",\"type\":\"uint256\"}],\"name\":\"removeOwnerTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numConfirmations\",\"type\":\"uint256\"},{\"internalType\":\"enum TravelCareMultiSig.TransactionType\",\"name\":\"txType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferERC20Transaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferETHTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TravelCareMultiSig", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000eab6ad179c12c897cd3d1cec15fab1c6c9bb235000000000000000000000000edee08c8ab4f0212c735042c7bd2816d1d68700f0000000000000000000000005b4e76968c382eba9369766437b1ec6ac5d096d4", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}