{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IORFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IORFeeManager {\\n    struct DealerInfo {\\n        uint feeRatio; // 1000,000 percent\\n        bytes32 extraInfoHash;\\n    }\\n\\n    // feeMPTInfo\\n    struct Submission {\\n        uint64 startBlock;\\n        uint64 endBlock;\\n        uint64 submitTimestamp;\\n        bytes32 profitRoot;\\n        bytes32 stateTransTreeRoot;\\n    }\\n\\n    enum ChallengeStatus {\\n        none,\\n        challengeDuration,\\n        challengeAccepted,\\n        challengeSuccess,\\n        challengeFail\\n    }\\n\\n    enum FeeMangerDuration {\\n        lock,\\n        challenge,\\n        withdraw\\n    }\\n\\n    event DealerUpdated(address indexed dealer, uint feeRatio, bytes extraInfo);\\n\\n    event SubmitterRegistered(address indexed submitter, uint marginAmount);\\n\\n    event SubmissionUpdated(\\n        uint64 startBlock,\\n        uint64 endBlock,\\n        uint64 indexed submitTimestamp,\\n        bytes32 indexed profitRoot,\\n        bytes32 indexed stateTransTreeRoot\\n    );\\n    event Withdraw(address indexed user, uint64 chainId, address token, uint debt, uint amount);\\n\\n    event ETHDeposit(address indexed sender, uint amount);\\n\\n    function registerSubmitter(uint marginAmount, address submitter) external;\\n\\n    function submit(uint64 startBlock, uint64 endBlock, bytes32 profitRoot, bytes32 stateTransTreeRoot) external;\\n\\n    function startChallenge(uint marginAmount, address challenger) external;\\n\\n    function responsePositioning(bytes calldata response) external;\\n\\n    function getCurrentBlockInfo() external view returns (Submission memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IORManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {BridgeLib} from \\\"../library/BridgeLib.sol\\\";\\n\\ninterface IORManager {\\n    event ChainInfoUpdated(uint64 indexed id, BridgeLib.ChainInfo chainInfo);\\n    event ChainTokenUpdated(uint64 indexed id, BridgeLib.TokenInfo tokenInfo);\\n    event EbcsUpdated(address[] ebcs, bool[] statuses);\\n    event SubmitterFeeUpdated(address submitter);\\n    event ProtocolFeeUpdated(uint64 protocolFee);\\n    event MinChallengeRatioUpdated(uint64 minChallengeRatio);\\n    event ChallengeUserRatioUpdated(uint64 challengeUserRatio);\\n    event FeeChallengeSecondUpdated(uint64 feeChallengeSecond);\\n    event FeeTakeOnChallengeSecondUpdated(uint64 feeTakeOnChallengeSecond);\\n    event MaxMDCLimitUpdated(uint64 maxMDCLimit);\\n    event ExtraTransferContractsUpdated(uint64[] chainIds, uint[] extraTransferContracts);\\n\\n    function registerChains(uint64 enableTime, BridgeLib.ChainInfo[] calldata chains_) external;\\n\\n    function updateChainSpvs(uint64 enableTime, uint64 id, address[] calldata spvs, uint[] calldata indexs) external;\\n\\n    function getChainInfo(uint64 id) external view returns (BridgeLib.ChainInfo memory);\\n\\n    function updateChainTokens(\\n        uint64 enableTime,\\n        uint64[] memory ids,\\n        BridgeLib.TokenInfo[] calldata tokenInfos\\n    ) external;\\n\\n    function getChainTokenInfo(uint64 id, uint token) external view returns (BridgeLib.TokenInfo memory);\\n\\n    function ebcIncludes(address ebc) external view returns (bool);\\n\\n    function updateEbcs(address[] calldata ebcs_, bool[] calldata statuses) external;\\n\\n    function submitter() external view returns (address);\\n\\n    function updateSubmitter(uint64 enableTime, address submitter_) external;\\n\\n    function protocolFee() external view returns (uint64);\\n\\n    function updateProtocolFee(uint64 enableTime, uint64 protocolFee_) external;\\n\\n    function minChallengeRatio() external view returns (uint64);\\n\\n    function updateMinChallengeRatio(uint64 enableTime, uint64 minChallengeRatio_) external;\\n\\n    function challengeUserRatio() external view returns (uint64);\\n\\n    function updateChallengeUserRatio(uint64 enableTime, uint64 challengeUserRatio_) external;\\n\\n    function feeChallengeSecond() external view returns (uint64);\\n\\n    function updateFeeChallengeSecond(uint64 enableTime, uint64 feeChallengeSecond_) external;\\n\\n    function feeTakeOnChallengeSecond() external view returns (uint64);\\n\\n    function updateFeeTakeOnChallengeSecond(uint64 enableTime, uint64 feeTakeOnChallengeSecond_) external;\\n\\n    function maxMDCLimit() external view returns (uint64);\\n\\n    function updateMaxMDCLimit(uint64 maxMDCLimit_) external;\\n\\n    function getExtraTransferContract(uint64 chainId) external view returns (uint);\\n\\n    function updateExtraTransferContracts(\\n        uint64 enableTime,\\n        uint64[] calldata chainIds,\\n        uint[] calldata extraTransferContracts\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/library/BridgeLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary BridgeLib {\\n    struct TokenInfo {\\n        uint token; // uint160(address) will overflow in the token used for starknet\\n        address mainnetToken;\\n        uint8 decimals;\\n    }\\n\\n    struct ChainInfo {\\n        uint64 id;\\n        uint192 batchLimit;\\n        uint64 minVerifyChallengeSourceTxSecond;\\n        uint64 maxVerifyChallengeSourceTxSecond;\\n        uint64 minVerifyChallengeDestTxSecond;\\n        uint64 maxVerifyChallengeDestTxSecond;\\n        uint nativeToken;\\n        address[] spvs;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/ConstantsLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nlibrary ConstantsLib {\\n    uint constant RATIO_MULTIPLE = 1000000;\\n\\n    uint constant MIN_ENABLE_DELAY = 120; // Unit: second\\n\\n    uint constant DEALER_WITHDRAW_DELAY = 3600; // Unit: second\\n\\n    uint constant WITHDRAW_DURATION = 3360; // Unit: second\\n\\n    uint constant LOCK_DURATION = 240; // Unit: second\\n    // uint constant DEALER_WITHDRAW_DELAY = 30; // Unit: second for test off-chain\\n\\n    // uint constant WITHDRAW_DURATION = 300; // Unit: second for test off-chain\\n\\n    // uint constant LOCK_DURATION = 180; // Unit: second for test off-chain\\n\\n    uint constant EBC_AMOUNT_PARAMS_MODULUS = 10000;\\n}\\n\"\r\n    },\r\n    \"contracts/library/HelperLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nlibrary HelperLib {\\n    function hash(bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(data);\\n    }\\n\\n    function includes(uint[] memory arr, uint element) internal pure returns (bool) {\\n        for (uint i = 0; i < arr.length; ) {\\n            if (element == arr[i]) {\\n                return true;\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function arrayIncludes(uint[] memory arr, uint[] memory elements) internal pure returns (bool) {\\n        for (uint i = 0; i < elements.length; i++) {\\n            bool ic = false;\\n            for (uint j = 0; j < arr.length; ) {\\n                if (elements[i] == arr[j]) {\\n                    ic = true;\\n                    break;\\n                }\\n                unchecked {\\n                    j++;\\n                }\\n            }\\n\\n            if (!ic) return false;\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function includes(address[] memory arr, address element) internal pure returns (bool) {\\n        for (uint i = 0; i < arr.length; ) {\\n            if (element == arr[i]) {\\n                return true;\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function arrayIncludes(address[] memory arr, address[] memory elements) internal pure returns (bool) {\\n        for (uint i = 0; i < elements.length; i++) {\\n            bool ic = false;\\n            for (uint j = 0; j < arr.length; ) {\\n                if (elements[i] == arr[j]) {\\n                    ic = true;\\n                    break;\\n                }\\n                unchecked {\\n                    j++;\\n                }\\n            }\\n\\n            if (!ic) return false;\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/MerkleTreeLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary MerkleTreeLib {\\n    /***************************** \\n     * In SMT verification we use three different MergeValueType\\n     * and we define those three types in the enumeration structure below\\n    mergeType --> 0\\n    struct type1 {     \\n        bytes32 value;            \\n    }                   \\n\\n    mergeType --> 1\\n    struct type2 {       \\n        uint8 zeroCount;  \\n        bytes32 baseNode; \\n        bytes32 zeroBits; \\n    }                     \\n\\n    mergeType --> 2\\n    struct type3 {    \\n        uint8 height;  \\n        bytes32 key;   \\n        bytes32 value; \\n    }                           \\n    *****************************/\\n\\n    enum MergeValueType {\\n        VALUE,\\n        MERGE_WITH_ZERO,\\n        SHORT_CUT\\n    }\\n\\n    struct SMTLeaf {\\n        uint64 chainId;\\n        address token;\\n        address user;\\n        uint256 amount;\\n        uint256 debt;\\n    }\\n\\n    uint8 internal constant MERGE_NORMAL = 1;\\n    uint8 internal constant MERGE_ZEROS = 2;\\n    uint8 internal constant MAX_TREE_LEVEL = 255;\\n\\n    function isRight(bytes32 _hash, uint height) internal pure returns (bool) {\\n        return getBit(_hash, height);\\n    }\\n\\n    function setBit(bytes32 bitmap, uint index) internal pure returns (bytes32) {\\n        return bytes32(uint256(bitmap) | (1 << (index & 0xff)));\\n    }\\n\\n    function getBit(uint256 bitmap, uint index) internal pure returns (bool) {\\n        bool result;\\n        assembly {\\n            let shifted := shl(index, 1)\\n            let temp := and(bitmap, shifted)\\n\\n            result := iszero(iszero(temp))\\n        }\\n        return result;\\n    }\\n\\n    function getBit(bytes32 bitmap, uint index) internal pure returns (bool) {\\n        bool result;\\n        assembly {\\n            let shifted := shl(index, 1)\\n            let temp := and(bitmap, shifted)\\n\\n            result := iszero(iszero(temp))\\n        }\\n        return result;\\n    }\\n\\n    function clearBit(bytes32 bitmap, uint index) internal pure returns (bytes32) {\\n        return bytes32(uint256(bitmap) & (~(1 << index)));\\n    }\\n\\n    function copyBits(bytes32 bitmap, uint index) internal pure returns (bytes32) {\\n        return bytes32((uint256(bitmap) << index) >> index);\\n    }\\n\\n    function parentPath(bytes32 path, uint height) internal pure returns (bytes32) {\\n        if (height == 255) {\\n            return bytes32(0);\\n        }\\n        unchecked {\\n            return copyBits(path, (height + 1));\\n        }\\n    }\\n\\n    function isZero(bytes32 value) internal pure returns (bool) {\\n        bool result;\\n        assembly {\\n            result := eq(value, 0)\\n        }\\n        return result;\\n    }\\n\\n    function isZero(uint256 value) internal pure returns (bool) {\\n        bool result;\\n        assembly {\\n            result := eq(value, 0)\\n        }\\n        return result;\\n    }\\n\\n    using MerkleTreeLib for uint256;\\n    using MerkleTreeLib for bytes32;\\n\\n    error InvalidMergeValue();\\n\\n    function verify(\\n        bytes32 key,\\n        bytes32 v,\\n        uint256 leaves_bitmap,\\n        bytes32 root,\\n        bytes32 firstZeroBits,\\n        uint8 startIndex,\\n        bytes32[] calldata siblings\\n    ) internal pure returns (bool) {\\n        bytes32 parent_path;\\n        uint iReverse;\\n        uint8 n;\\n        bool _isRight;\\n        MergeValueType mergeType;\\n        uint8 currentZeroCount;\\n        bytes32 currentBaseNode;\\n        bytes32 currentZeroBits;\\n\\n        if (leaves_bitmap.isZero()) {\\n            return\\n                keccak256(\\n                    abi.encode(\\n                        MERGE_ZEROS, //MERGE_ZEROS == 2\\n                        keccak256(abi.encode(0, key.parentPath(0), v)),\\n                        key.getBit(0) ? key.clearBit(0) : key,\\n                        0\\n                    )\\n                ) == root;\\n        }\\n\\n        if (!(v.isZero() || startIndex == 0)) {\\n            mergeType = MergeValueType.MERGE_WITH_ZERO;\\n            currentZeroCount = startIndex;\\n            currentBaseNode = keccak256(abi.encode(0, key.parentPath(0), v));\\n            currentZeroBits = firstZeroBits;\\n        }\\n\\n        for (uint i = startIndex; ; ) {\\n            unchecked {\\n                iReverse = MAX_TREE_LEVEL - i;\\n            }\\n            parent_path = key.parentPath(i);\\n            _isRight = key.isRight(iReverse);\\n\\n            if (leaves_bitmap.getBit(iReverse)) {\\n                if (mergeType == MergeValueType.MERGE_WITH_ZERO) {\\n                    currentBaseNode = keccak256(\\n                        abi.encode(MERGE_ZEROS, currentBaseNode, currentZeroBits, currentZeroCount)\\n                    );\\n                }\\n\\n                currentBaseNode = keccak256(\\n                    abi.encode(\\n                        MERGE_NORMAL,\\n                        i,\\n                        parent_path,\\n                        _isRight ? siblings[n] : currentBaseNode,\\n                        _isRight ? currentBaseNode : siblings[n]\\n                    )\\n                );\\n                mergeType = MergeValueType.VALUE;\\n\\n                unchecked {\\n                    n += 1;\\n                }\\n            } else {\\n                if (n > 0) {\\n                    if (mergeType == MergeValueType.VALUE) {\\n                        currentZeroCount = 1;\\n                        currentZeroBits = _isRight ? bytes32(0).setBit(MAX_TREE_LEVEL - i) : bytes32(0);\\n                        currentBaseNode = keccak256(abi.encode(i, parent_path, currentBaseNode));\\n                    } else if (mergeType == MergeValueType.MERGE_WITH_ZERO) {\\n                        unchecked {\\n                            currentZeroCount = currentZeroCount + 1;\\n                        }\\n                        currentZeroBits = _isRight ? currentZeroBits.setBit(MAX_TREE_LEVEL - i) : currentZeroBits;\\n                    } else {\\n                        revert InvalidMergeValue();\\n                    }\\n                    mergeType = MergeValueType.MERGE_WITH_ZERO;\\n                }\\n            }\\n\\n            key = parent_path;\\n\\n            if (i == MAX_TREE_LEVEL) {\\n                break;\\n            }\\n\\n            unchecked {\\n                i += 1;\\n            }\\n        }\\n\\n        if (mergeType == MergeValueType.VALUE) {\\n            return currentBaseNode == root;\\n        } else if (mergeType == MergeValueType.MERGE_WITH_ZERO) {\\n            return\\n                keccak256(\\n                    abi.encode(\\n                        MERGE_ZEROS, //MERGE_ZEROS == 2\\n                        currentBaseNode,\\n                        currentZeroBits,\\n                        currentZeroCount\\n                    )\\n                ) == root;\\n        }\\n\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ORFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IORFeeManager} from \\\"./interface/IORFeeManager.sol\\\";\\nimport {IORManager} from \\\"./interface/IORManager.sol\\\";\\nimport {HelperLib} from \\\"./library/HelperLib.sol\\\";\\nimport {ConstantsLib} from \\\"./library/ConstantsLib.sol\\\";\\nimport {MerkleTreeLib} from \\\"./library/MerkleTreeLib.sol\\\";\\n\\ncontract ORFeeManager is IORFeeManager, Ownable, ReentrancyGuard {\\n    using HelperLib for bytes;\\n    using SafeERC20 for IERC20;\\n    using MerkleTreeLib for bytes32;\\n\\n    // Ownable._owner use a slot\\n    IORManager private immutable _manager;\\n    ChallengeStatus public challengeStatus;\\n    Submission public submissions;\\n\\n    mapping(address => DealerInfo) private _dealers;\\n    mapping(address => uint) public submitter;\\n    mapping(address => uint64) public withdrawLock;\\n\\n    modifier isChallengerQualified() {\\n        require(address(msg.sender).balance >= address(IORManager(_manager).submitter()).balance, \\\"NF\\\");\\n        _;\\n    }\\n\\n    function durationCheck() public view returns (FeeMangerDuration duration) {\\n        uint challengeEnd = submissions.submitTimestamp + ConstantsLib.DEALER_WITHDRAW_DELAY;\\n        if (block.timestamp <= challengeEnd) {\\n            return FeeMangerDuration.challenge;\\n        }\\n\\n        uint mod = (block.timestamp - challengeEnd) % (ConstantsLib.WITHDRAW_DURATION + ConstantsLib.LOCK_DURATION);\\n        if (mod <= ConstantsLib.WITHDRAW_DURATION) {\\n            return FeeMangerDuration.withdraw;\\n        } else {\\n            return FeeMangerDuration.lock;\\n        }\\n    }\\n\\n    function withdrawLockCheck(address withdrawUser) external view returns (bool) {\\n        return withdrawLock[withdrawUser] < submissions.submitTimestamp ? false : true;\\n    }\\n\\n    receive() external payable {\\n        emit ETHDeposit(msg.sender, msg.value);\\n    }\\n\\n    constructor(address owner_, address manager_) {\\n        require(owner_ != address(0), \\\"OZ\\\");\\n        require(manager_ != address(0), \\\"MZ\\\");\\n\\n        _transferOwnership(owner_);\\n        _manager = IORManager(manager_);\\n    }\\n\\n    function withdrawVerification(\\n        MerkleTreeLib.SMTLeaf[] calldata smtLeaves,\\n        bytes32[][] calldata siblings,\\n        uint8[] calldata startIndex,\\n        bytes32[] calldata firstZeroBits,\\n        uint256[] calldata bitmaps,\\n        uint256[] calldata withdrawAmount\\n    ) external nonReentrant {\\n        require(durationCheck() == FeeMangerDuration.withdraw, \\\"WE\\\");\\n        require(challengeStatus == ChallengeStatus.none, \\\"WDC\\\");\\n        require(withdrawLock[msg.sender] < submissions.submitTimestamp, \\\"WL\\\");\\n        withdrawLock[msg.sender] = submissions.submitTimestamp;\\n        for (uint i = 0; i < smtLeaves.length; ) {\\n            address token = smtLeaves[i].token;\\n            address user = smtLeaves[i].user;\\n            uint64 chainId = smtLeaves[i].chainId;\\n            uint256 debt = smtLeaves[i].debt;\\n            uint256 amount = smtLeaves[i].amount;\\n            require(msg.sender == user, \\\"NU\\\");\\n            require(withdrawAmount[i] <= amount, \\\"UIF\\\");\\n            require(\\n                keccak256(abi.encode(chainId, token, user)).verify(\\n                    keccak256(abi.encode(token, chainId, amount, debt)),\\n                    bitmaps[i],\\n                    submissions.profitRoot,\\n                    firstZeroBits[i],\\n                    startIndex[i],\\n                    siblings[i]\\n                ),\\n                \\\"merkle root verify failed\\\"\\n            );\\n\\n            if (token != address(0)) {\\n                IERC20(token).safeTransfer(msg.sender, withdrawAmount[i]);\\n            } else {\\n                (bool success, ) = payable(msg.sender).call{value: withdrawAmount[i]}(\\\"\\\");\\n                require(success, \\\"ETH: IF\\\");\\n            }\\n            emit Withdraw(msg.sender, chainId, token, debt, withdrawAmount[i]);\\n            unchecked {\\n                i += 1;\\n            }\\n        }\\n    }\\n\\n    function submit(\\n        uint64 startBlock,\\n        uint64 endBlock,\\n        bytes32 profitRoot,\\n        bytes32 stateTransTreeRoot\\n    ) external override nonReentrant {\\n        require(submitter[msg.sender] != 0, \\\"NS\\\");\\n        require(challengeStatus == ChallengeStatus.none, \\\"SDC\\\");\\n        require(durationCheck() == FeeMangerDuration.lock, \\\"NL2\\\");\\n        require(endBlock > startBlock, \\\"EB\\\");\\n        require(startBlock == submissions.endBlock, \\\"BE\\\");\\n        submissions = Submission(startBlock, endBlock, uint64(block.timestamp), profitRoot, stateTransTreeRoot);\\n        emit SubmissionUpdated(startBlock, endBlock, uint64(block.timestamp), profitRoot, stateTransTreeRoot);\\n    }\\n\\n    function updateDealer(uint feeRatio, bytes calldata extraInfo) external {\\n        bytes32 extraInfoHash = extraInfo.hash();\\n        _dealers[msg.sender] = DealerInfo(feeRatio, extraInfoHash);\\n        emit DealerUpdated(msg.sender, feeRatio, extraInfo);\\n    }\\n\\n    function getDealerInfo(address dealer) external view returns (DealerInfo memory) {\\n        return _dealers[dealer];\\n    }\\n\\n    function transferOwnership(address newOwner) public override onlyOwner {\\n        require(newOwner != address(0), \\\"OZ\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function registerSubmitter(uint marginAmount, address _submitter) external override onlyOwner {\\n        require(_submitter == IORManager(_manager).submitter(), \\\"NSR\\\");\\n        submitter[_submitter] = marginAmount;\\n        emit SubmitterRegistered(_submitter, marginAmount);\\n    }\\n\\n    function getCurrentBlockInfo() external view override returns (Submission memory) {}\\n\\n    function startChallenge(uint marginAmount, address _submitter) public override isChallengerQualified nonReentrant {\\n        challengeStatus = ChallengeStatus.challengeAccepted;\\n        (marginAmount, _submitter);\\n    }\\n\\n    function responsePositioning(bytes calldata response) public override {\\n        (response);\\n        endChallenge();\\n    }\\n\\n    function endChallenge() internal nonReentrant {\\n        challengeStatus = ChallengeStatus.none;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidMergeValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dealer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraInfo\",\"type\":\"bytes\"}],\"name\":\"DealerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"startBlock\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endBlock\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"submitTimestamp\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profitRoot\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"stateTransTreeRoot\",\"type\":\"bytes32\"}],\"name\":\"SubmissionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marginAmount\",\"type\":\"uint256\"}],\"name\":\"SubmitterRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"challengeStatus\",\"outputs\":[{\"internalType\":\"enum IORFeeManager.ChallengeStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"durationCheck\",\"outputs\":[{\"internalType\":\"enum IORFeeManager.FeeMangerDuration\",\"name\":\"duration\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"startBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"submitTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"profitRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateTransTreeRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct IORFeeManager.Submission\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dealer\",\"type\":\"address\"}],\"name\":\"getDealerInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extraInfoHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IORFeeManager.DealerInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marginAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_submitter\",\"type\":\"address\"}],\"name\":\"registerSubmitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"responsePositioning\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marginAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_submitter\",\"type\":\"address\"}],\"name\":\"startChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submissions\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"startBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"submitTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"profitRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateTransTreeRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"startBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endBlock\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"profitRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateTransTreeRoot\",\"type\":\"bytes32\"}],\"name\":\"submit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"submitter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraInfo\",\"type\":\"bytes\"}],\"name\":\"updateDealer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawLock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawUser\",\"type\":\"address\"}],\"name\":\"withdrawLockCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"internalType\":\"struct MerkleTreeLib.SMTLeaf[]\",\"name\":\"smtLeaves\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"siblings\",\"type\":\"bytes32[][]\"},{\"internalType\":\"uint8[]\",\"name\":\"startIndex\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"firstZeroBits\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bitmaps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"withdrawAmount\",\"type\":\"uint256[]\"}],\"name\":\"withdrawVerification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ORFeeManager", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "0000000000000000000000008a700fdb6121a57c59736041d9aa21dfd8820660000000000000000000000000e90fab21febfb008886b3639c26ccf70e414b9de", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}