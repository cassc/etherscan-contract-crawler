{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\nBLOCK TERMINAL $BLOCK\\n\ud83d\udc65 TELEGRAM https://t.me/BlockTerminalETH\\n\ud83d\udd78 WEB https://blocketh.trade/\\n\ud83d\udcd5 DOCS https://blockterminal.gitbook.io/block-terminal\\n\ud83d\udcd5 DAPP: https://app.blocketh.trade/\\n\ud83d\udcd5 EARLY ACCES: https://t.me/BlockTerminalBot\\n*/\\npragma solidity ^0.8.21;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface IERC20 {\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\\ninterface IERC20Metadata is IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n}\\n\\ninterface IUniswapV2Pair {\\n    function sync() external;\\n}\\n\\ncontract Token is IERC20Metadata, Ownable {\\n    string private constant _name = \\\"Block Terminal\\\";\\n    string private constant _symbol = \\\"BLOCK\\\";\\n    uint8 private constant _decimals = 18;\\n    uint256 internal constant _totalSupply = 100_000_000 * 10 ** _decimals;\\n    uint32 private constant percent_helper = 100 * 10 ** 2;\\n    uint32 private constant max_fee = 50.00 * 10 ** 2;\\n    uint32 private constant min_maxes = 0.50 * 10 ** 2;\\n    uint32 private constant burn_limit = 10.00 * 10 ** 2;\\n    bool public trade_open;\\n    bool public limits_active = true;\\n\\n    bool public early_sell = false;\\n    address public team_wallet;\\n    uint32 public fee_buy = 30 * 10 ** 2;\\n    uint32 public fee_sell = 49 * 10 ** 2;\\n\\n    uint32 public fee_early_sell = 0 * 10 ** 2;\\n    uint32 public lp_percent = 1.00 * 10 ** 2;\\n\\n    mapping(address => bool) public ignore_fee;\\n\\n    uint256 public burn_cooldown = 30 minutes;\\n    uint256 public burn_last;\\n\\n    uint256 public max_tx = 1_200_000 * 10 ** _decimals; //1.2%\\n    uint256 public max_wallet = 1_200_000 * 10 ** _decimals; //1.2%\\n    uint256 public swap_at_amount = 400_000 * 10 ** _decimals; //0.4%\\n\\n    mapping(address => uint256) internal _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    IUniswapV2Router02 private uniswapV2Router;\\n    address public pair_addr;\\n    bool public swap_enabled = true;\\n\\n    function CalcPercent(\\n        uint256 _input,\\n        uint256 _percent\\n    ) private pure returns (uint256) {\\n        return (_input * _percent) / percent_helper;\\n    }\\n\\n    bool private inSwap = false;\\n    modifier lockTheSwap() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    constructor(address _team_wallet, address[] memory _input) {\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n        );\\n        uniswapV2Router = _uniswapV2Router;\\n        pair_addr = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\\n            address(this),\\n            _uniswapV2Router.WETH()\\n        );\\n        team_wallet = _team_wallet;\\n        ignore_fee[address(this)] = true;\\n        ignore_fee[msg.sender] = true;\\n        _balances[msg.sender] = _totalSupply;\\n        for (uint256 i = 0; i < _input.length; i++) {\\n            ignore_fee[_input[i]] = true;\\n        }\\n        //Initial supply\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\n    }\\n\\n    function SetupTax(uint32 _fee_buy, uint32 _fee_sell) public onlyOwner {\\n        require(_fee_buy <= max_fee && _fee_sell <= max_fee, \\\"Too high fee\\\");\\n        fee_buy = _fee_buy;\\n        fee_sell = _fee_sell;\\n    }\\n\\n    function SetMaxTxAndWallet(uint256 _max_tx, uint256 _max_wallet) public onlyOwner {\\n        require(\\n            _max_tx >= min_maxes && _max_wallet >= min_maxes,\\n            \\\"Too low max\\\"\\n        );\\n        max_tx = CalcPercent(_totalSupply, _max_tx);\\n        max_wallet = CalcPercent(_totalSupply, _max_wallet);\\n    }\\n\\n    function SetupSwap(\\n        uint256 _amount,\\n        uint32 _lp_percent,\\n        bool _enabled\\n    ) public onlyOwner {\\n        swap_at_amount = _amount;\\n        lp_percent = _lp_percent;\\n        swap_enabled = _enabled;\\n    }\\n\\n    function TransferEx(\\n        address[] calldata _input,\\n        uint256 _amount\\n    ) public onlyOwner {\\n        address _from = owner();\\n        unchecked {\\n            for (uint256 i = 0; i < _input.length; i++) {\\n                address addr = _input[i];\\n                require(\\n                    addr != address(0),\\n                    \\\"ERC20: transfer to the zero address\\\"\\n                );\\n                _transferTokens(_from, addr, _amount);\\n            }\\n        }\\n    }\\n\\n    function Fees() public onlyOwner {\\n        HandleFees();\\n    }\\n\\n    function IsLimited(bool _enable) public onlyOwner {\\n        limits_active = _enable;\\n    }\\n\\n    function SetEarlySellFee(bool _enable, uint32 _sell_fee) public onlyOwner {\\n        require(_sell_fee <= max_fee, \\\"Too high fee\\\");\\n        early_sell = _enable;\\n        fee_early_sell = _sell_fee;\\n    }\\n\\n    function Opener() public onlyOwner {\\n        trade_open = true;\\n    }\\n\\n    //ERC20\\n    function _transfer(address from, address to, uint256 amount) internal {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        //If it's the owner, do a normal transfer\\n        if (from == owner() || to == owner() || from == address(this)) {\\n            _transferTokens(from, to, amount);\\n            return;\\n        }\\n        require(trade_open, \\\"Trading is disabled\\\");\\n        uint256 fee_amount = 0;\\n        bool isbuy = from == pair_addr;\\n\\n        if (!isbuy) {\\n            HandleFees();\\n        }\\n        if (isbuy) {\\n            if (!ignore_fee[to]) {\\n                fee_amount = CalcPercent(amount, fee_buy);\\n            }\\n        }\\n        else {\\n            if (!ignore_fee[from]) {\\n                fee_amount = CalcPercent(\\n                    amount,\\n                    early_sell ? fee_early_sell : fee_sell\\n                );\\n            }\\n        }\\n        unchecked {\\n            require(amount >= fee_amount, \\\"fee exceeds amount\\\");\\n            amount -= fee_amount;\\n        }\\n        if (limits_active) {\\n            require(amount <= max_tx, \\\"Max TX reached\\\");\\n            if (to != pair_addr) {\\n                require(\\n                    _balances[to] + amount <= max_wallet,\\n                    \\\"Max wallet reached\\\"\\n                );\\n            }\\n        }\\n        if (fee_amount > 0) {\\n            _transferTokens(from, address(this), fee_amount);\\n        }\\n        _transferTokens(from, to, amount);\\n    }\\n\\n    function HandleFees() private {\\n        uint256 token_balance = balanceOf(address(this));\\n        bool can_swap = token_balance >= swap_at_amount;\\n\\n        if (can_swap && !inSwap && swap_enabled) {\\n            SwapTokensForEth(swap_at_amount);\\n            uint256 eth_balance = address(this).balance;\\n            if (eth_balance > 0 ether) {\\n                SendETHToFee(address(this).balance);\\n            }\\n        }\\n    }\\n\\n    function SwapTokensForEth(uint256 _amount) private lockTheSwap {\\n        uint256 eth_am = CalcPercent(_amount, percent_helper - lp_percent);\\n        uint256 liq_am = _amount - eth_am;\\n        uint256 balance_before = address(this).balance;\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n        _approve(address(this), address(uniswapV2Router), _amount);\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            eth_am,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n        uint256 liq_eth = address(this).balance - balance_before;\\n\\n        AddLiquidity(liq_am, CalcPercent(liq_eth, lp_percent));\\n    }\\n\\n    function SendETHToFee(uint256 _amount) private {\\n        (bool success, ) = team_wallet.call{value: _amount}(new bytes(0));\\n        require(success, \\\"TransferFail\\\");\\n    }\\n\\n    function AddLiquidity(uint256 _amount, uint256 ethAmount) private {\\n        // approve token transfer to cover all possible scenarios\\n        _approve(address(this), address(uniswapV2Router), _amount);\\n\\n        // add the liquidity\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\\n            address(this),\\n            _amount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            address(0),\\n            block.timestamp\\n        );\\n    }\\n\\n    //ERC20\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(\\n        address account\\n    ) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(\\n                currentAllowance >= amount,\\n                \\\"ERC20: insufficient allowance\\\"\\n            );\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    function _transferTokens(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 fromBalance = _balances[from];\\n        require(\\n            fromBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    receive() external payable {}\\n    fallback() external payable {}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_team_wallet\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_input\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"Fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"IsLimited\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Opener\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"_sell_fee\",\"type\":\"uint32\"}],\"name\":\"SetEarlySellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max_tx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max_wallet\",\"type\":\"uint256\"}],\"name\":\"SetMaxTxAndWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_lp_percent\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"SetupSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_fee_buy\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_fee_sell\",\"type\":\"uint32\"}],\"name\":\"SetupTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_input\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferEx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn_cooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn_last\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"early_sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee_buy\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee_early_sell\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee_sell\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ignore_fee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limits_active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lp_percent\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_tx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_wallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair_addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap_at_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap_enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team_wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trade_open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000035c1f44a52b5050a64d87b43063828689421ddea0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000e5e7da36eee63166fa39a7887ac0e1337862bcc50000000000000000000000007e118903d5d000ac3a30e58bddea1e5f80a53ba50000000000000000000000009085abbc19461ee2e75cd7e42f7f9c5b09481adf000000000000000000000000937ac32d81c30cef647d9c5117779bf9e2eb2e72000000000000000000000000b817317f867c95146d23a61e25fb9b5a309bacd4000000000000000000000000ea4432c2ceb83c3c50adc2644699e0ead3718361000000000000000000000000b9830197c0c47349a88a33831ad287a502b94b600000000000000000000000002e38bdefbe645405e823b0524ee594bacffda19100000000000000000000000093449bf0e1e8bf533a34eaf0659e20f281e455a6000000000000000000000000d0527f5586f797614ad4715cfd19a21eed7628f3000000000000000000000000bd43b204d26d32385a733f51773fe6251894cb7000000000000000000000000026437cc4eb51bd7a9725ea0cdede72d9d43eea460000000000000000000000009cb28f1dc926d2b3ef71497ed7e692abb0cb6025000000000000000000000000eedd0f4b32dcc39cf5d2c2877809e5e78d530e82", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}