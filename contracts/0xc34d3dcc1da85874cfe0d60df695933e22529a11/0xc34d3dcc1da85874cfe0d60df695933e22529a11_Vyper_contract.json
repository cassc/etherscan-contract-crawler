{"SourceCode": "# @version 0.3.7\r\n\r\n\"\"\"\r\n@title Vesting Escrow\r\n@author Curve Finance, Yearn Finance, Lido Finance\r\n@license GPL-3.0\r\n@notice Vests ERC20 tokens for a single address\r\n@dev Intended to be deployed many times via `VotingEscrowFactory`\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\ninterface IVestingEscrowFactory:\r\n    def voting_adapter() -> address: nonpayable\r\n    def owner() -> address: nonpayable\r\n    def manager() -> address: nonpayable\r\n\r\n\r\nevent VestingEscrowInitialized:\r\n    factory: indexed(address)\r\n    recipient: indexed(address)\r\n    token: indexed(address)\r\n    amount: uint256\r\n    start_time: uint256\r\n    end_time: uint256\r\n    cliff_length: uint256\r\n    is_fully_revokable: bool\r\n\r\n\r\nevent Claim:\r\n    beneficiary: indexed(address)\r\n    claimed: uint256\r\n\r\n\r\nevent UnvestedTokensRevoked:\r\n    recoverer: indexed(address)\r\n    revoked: uint256\r\n\r\n\r\nevent VestingFullyRevoked:\r\n    recoverer: indexed(address)\r\n    revoked: uint256\r\n\r\n\r\nevent ERC20Recovered:\r\n    token: address\r\n    amount: uint256\r\n\r\n\r\nevent ETHRecovered:\r\n    amount: uint256\r\n\r\n\r\nrecipient: public(address)\r\ntoken: public(ERC20)\r\nstart_time: public(uint256)\r\nend_time: public(uint256)\r\ncliff_length: public(uint256)\r\nfactory: public(IVestingEscrowFactory)\r\ntotal_locked: public(uint256)\r\nis_fully_revokable: public(bool)\r\n\r\ntotal_claimed: public(uint256)\r\ndisabled_at: public(uint256)\r\ninitialized: public(bool)\r\nis_fully_revoked: public(bool)\r\n\r\n\r\n@external\r\ndef __init__():\r\n    \"\"\"\r\n    @notice Initialize source contract implementation.\r\n    \"\"\"\r\n    # ensure that the original contract cannot be initialized\r\n    self.initialized = True\r\n\r\n\r\n@external\r\ndef initialize(\r\n    token: address,\r\n    amount: uint256,\r\n    recipient: address,\r\n    start_time: uint256,\r\n    end_time: uint256,\r\n    cliff_length: uint256,\r\n    is_fully_revokable: bool,\r\n    factory: address,\r\n) -> bool:\r\n    \"\"\"\r\n    @notice Initialize the contract.\r\n    @dev This function is separate from `__init__` because of the factory pattern\r\n         used in `VestingEscrowFactory.deploy_vesting_contract`. It may be called\r\n         once per deployment.\r\n    @param token Address of the ERC20 token being distributed\r\n    @param amount Amount of the ERC20 token to be controleed by escrow\r\n    @param recipient Address to vest tokens for\r\n    @param start_time Epoch time at which token distribution starts\r\n    @param end_time Time until everything should be vested\r\n    @param cliff_length Duration after which the first portion vests\r\n    @param factory Address of the parent factory\r\n    \"\"\"\r\n    assert not self.initialized, \"can only initialize once\"\r\n    self.initialized = True\r\n\r\n    self.token = ERC20(token)\r\n    self.is_fully_revokable = is_fully_revokable\r\n    self.start_time = start_time\r\n    self.end_time = end_time\r\n    self.cliff_length = cliff_length\r\n\r\n    assert ERC20(token).balanceOf(self) >= amount, \"insufficient balance\"\r\n\r\n    self.total_locked = amount\r\n    self.recipient = recipient\r\n    self.disabled_at = end_time  # Set to maximum time\r\n    self.factory = IVestingEscrowFactory(factory)\r\n    log VestingEscrowInitialized(\r\n        factory,\r\n        recipient,\r\n        token,\r\n        amount,\r\n        start_time,\r\n        end_time,\r\n        cliff_length,\r\n        is_fully_revokable,\r\n    )\r\n\r\n    return True\r\n\r\n\r\n@internal\r\n@view\r\ndef _total_vested_at(time: uint256) -> uint256:\r\n    start: uint256 = self.start_time\r\n    end: uint256 = self.end_time\r\n    locked: uint256 = self.total_locked\r\n    if time < start + self.cliff_length:\r\n        return 0\r\n    return min(locked * (time - start) / (end - start), locked)\r\n\r\n\r\n@internal\r\n@view\r\ndef _unclaimed() -> uint256:\r\n    if self.is_fully_revoked:\r\n        return 0\r\n    claim_time: uint256 = min(block.timestamp, self.disabled_at)\r\n    return self._total_vested_at(claim_time) - self.total_claimed\r\n\r\n\r\n@external\r\n@view\r\ndef unclaimed() -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of unclaimed, vested tokens for recipient\r\n    \"\"\"\r\n    return self._unclaimed()\r\n\r\n\r\n@internal\r\n@view\r\ndef _locked() -> uint256:\r\n    if block.timestamp >= self.disabled_at:\r\n        return 0\r\n    return self.total_locked - self._total_vested_at(block.timestamp)\r\n\r\n\r\n@external\r\n@view\r\ndef locked() -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of locked tokens for recipient\r\n    \"\"\"\r\n    return self._locked()\r\n\r\n\r\n@external\r\ndef claim(\r\n    beneficiary: address = msg.sender, amount: uint256 = max_value(uint256)\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Claim tokens which have vested\r\n    @param beneficiary Address to transfer claimed tokens to\r\n    @param amount Amount of tokens to claim\r\n    \"\"\"\r\n    self._check_sender_is_recipient()\r\n\r\n    claimable: uint256 = min(self._unclaimed(), amount)\r\n    self.total_claimed += claimable\r\n\r\n    assert self.token.transfer(\r\n        beneficiary, claimable, default_return_value=True\r\n    ), \"transfer failed\"\r\n\r\n    log Claim(beneficiary, claimable)\r\n\r\n    return claimable\r\n\r\n\r\n@external\r\ndef revoke_unvested():\r\n    \"\"\"\r\n    @notice Disable further flow of tokens and revoke the unvested part to owner\r\n    \"\"\"\r\n    self._check_sender_is_owner_or_manager()\r\n\r\n    revokable: uint256 = self._locked()\r\n    assert revokable > 0, \"nothing to revoke\"\r\n    self.disabled_at = block.timestamp\r\n\r\n    assert self.token.transfer(\r\n        self._owner(), revokable, default_return_value=True\r\n    ), \"transfer failed\"\r\n\r\n    log UnvestedTokensRevoked(msg.sender, revokable)\r\n\r\n\r\n@external\r\ndef revoke_all():\r\n    \"\"\"\r\n    @notice Disable further flow of tokens and revoke all tokens to owner\r\n    \"\"\"\r\n    self._check_sender_is_owner()\r\n    assert self.is_fully_revokable, \"not allowed for ordinary vesting\"\r\n    assert not self.is_fully_revoked, \"already fully revoked\"\r\n\r\n    # NOTE: do not revoke extra tokens\r\n    revokable: uint256 = self._locked() + self._unclaimed()\r\n    assert revokable > 0, \"nothing to revoke\"\r\n\r\n    self.is_fully_revoked = True\r\n    self.disabled_at = block.timestamp\r\n\r\n    assert self.token.transfer(\r\n        self._owner(), revokable, default_return_value=True\r\n    ), \"transfer failed\"\r\n\r\n    log VestingFullyRevoked(msg.sender, revokable)\r\n\r\n\r\n@external\r\ndef recover_erc20(token: address, amount: uint256):\r\n    \"\"\"\r\n    @notice Recover ERC20 tokens to recipient\r\n    @param token Address of the ERC20 token to be recovered\r\n    @param amount Amount of the ERC20 token to be recovered\r\n    \"\"\"\r\n    recoverable: uint256 = amount\r\n    if token == self.token.address:\r\n        available: uint256 = ERC20(token).balanceOf(self) - (\r\n            self._locked() + self._unclaimed()\r\n        )\r\n        recoverable = min(recoverable, available)\r\n    if recoverable > 0:\r\n        assert ERC20(token).transfer(\r\n            self.recipient, recoverable, default_return_value=True\r\n        ), \"transfer failed\"\r\n        log ERC20Recovered(token, recoverable)\r\n\r\n\r\n@external\r\ndef recover_ether():\r\n    \"\"\"\r\n    @notice Recover Ether to recipient\r\n    \"\"\"\r\n    amount: uint256 = self.balance\r\n    if amount != 0:\r\n        self._safe_send_ether(self.recipient, amount)\r\n        log ETHRecovered(amount)\r\n\r\n\r\n@external\r\ndef aragon_vote(abi_encoded_params: Bytes[1000]):\r\n    \"\"\"\r\n    @notice Participate Aragon vote using all available tokens on the contract's balance\r\n    @param abi_encoded_params Abi encoded data for call. Can be obtained from VotingAdapter.encode_aragon_vote_calldata\r\n    \"\"\"\r\n    self._check_sender_is_recipient()\r\n    self._check_voting_adapter_is_set()\r\n    raw_call(\r\n        self.factory.voting_adapter(),\r\n        _abi_encode(\r\n            abi_encoded_params,\r\n            method_id=method_id(\"aragon_vote(bytes)\"),\r\n        ),\r\n        is_delegate_call=True,\r\n    )\r\n\r\n\r\n@external\r\ndef snapshot_set_delegate(abi_encoded_params: Bytes[1000]):\r\n    \"\"\"\r\n    @notice Delegate Snapshot voting power of all available tokens on the contract's balance\r\n    @param abi_encoded_params Abi encoded data for call. Can be obtained from VotingAdapter.encode_snapshot_set_delegate_calldata\r\n    \"\"\"\r\n    self._check_sender_is_recipient()\r\n    self._check_voting_adapter_is_set()\r\n    raw_call(\r\n        self.factory.voting_adapter(),\r\n        _abi_encode(\r\n            abi_encoded_params,\r\n            method_id=method_id(\"snapshot_set_delegate(bytes)\"),\r\n        ),\r\n        is_delegate_call=True,\r\n    )\r\n\r\n\r\n@external\r\ndef delegate(abi_encoded_params: Bytes[1000]):\r\n    \"\"\"\r\n    @notice Delegate voting power of all available tokens on the contract's balance\r\n    @param abi_encoded_params Abi encoded data for call. Can be obtained from VotingAdapter.encode_delegate_calldata\r\n    \"\"\"\r\n    self._check_sender_is_recipient()\r\n    self._check_voting_adapter_is_set()\r\n    raw_call(\r\n        self.factory.voting_adapter(),\r\n        _abi_encode(\r\n            abi_encoded_params,\r\n            method_id=method_id(\"delegate(bytes)\"),\r\n        ),\r\n        is_delegate_call=True,\r\n    )\r\n\r\n\r\n@internal\r\ndef _owner() -> address:\r\n    return self.factory.owner()\r\n\r\n\r\n@internal\r\ndef _manager() -> address:\r\n    return self.factory.manager()\r\n\r\n\r\n@internal\r\ndef _check_sender_is_owner_or_manager():\r\n    assert (\r\n        msg.sender == self._owner() or msg.sender == self._manager()\r\n    ), \"msg.sender not owner or manager\"\r\n\r\n\r\n@internal\r\ndef _check_sender_is_owner():\r\n    assert msg.sender == self._owner(), \"msg.sender not owner\"\r\n\r\n\r\n@internal\r\ndef _check_sender_is_recipient():\r\n    assert msg.sender == self.recipient, \"msg.sender not recipient\"\r\n\r\n\r\n@internal\r\ndef _check_voting_adapter_is_set():\r\n    assert self.factory.voting_adapter() != empty(\r\n        address\r\n    ), \"voting adapter not set\"\r\n\r\n\r\n@internal\r\ndef _safe_send_ether(_to: address, _value: uint256):\r\n    \"\"\"\r\n    @notice Overcome 2300 gas limit on simple send\r\n    \"\"\"\r\n    _response: Bytes[32] = raw_call(\r\n        _to, empty(bytes32), value=_value, max_outsize=32\r\n    )\r\n    if len(_response) > 0:\r\n        assert convert(_response, bool), \"ETH transfer failed\"", "ABI": "[{\"name\":\"VestingEscrowInitialized\",\"inputs\":[{\"name\":\"factory\",\"type\":\"address\",\"indexed\":true},{\"name\":\"recipient\",\"type\":\"address\",\"indexed\":true},{\"name\":\"token\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"start_time\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"end_time\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"cliff_length\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"is_fully_revokable\",\"type\":\"bool\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Claim\",\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\",\"indexed\":true},{\"name\":\"claimed\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UnvestedTokensRevoked\",\"inputs\":[{\"name\":\"recoverer\",\"type\":\"address\",\"indexed\":true},{\"name\":\"revoked\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"VestingFullyRevoked\",\"inputs\":[{\"name\":\"recoverer\",\"type\":\"address\",\"indexed\":true},{\"name\":\"revoked\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ERC20Recovered\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ETHRecovered\",\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"start_time\",\"type\":\"uint256\"},{\"name\":\"end_time\",\"type\":\"uint256\"},{\"name\":\"cliff_length\",\"type\":\"uint256\"},{\"name\":\"is_fully_revokable\",\"type\":\"bool\"},{\"name\":\"factory\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"unclaimed\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"locked\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim\",\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim\",\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"revoke_unvested\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"revoke_all\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"recover_erc20\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"recover_ether\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"aragon_vote\",\"inputs\":[{\"name\":\"abi_encoded_params\",\"type\":\"bytes\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"snapshot_set_delegate\",\"inputs\":[{\"name\":\"abi_encoded_params\",\"type\":\"bytes\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"delegate\",\"inputs\":[{\"name\":\"abi_encoded_params\",\"type\":\"bytes\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"recipient\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"start_time\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"end_time\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"cliff_length\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"factory\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"total_locked\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"is_fully_revokable\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"total_claimed\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"disabled_at\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"initialized\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"is_fully_revoked\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.3.7", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}