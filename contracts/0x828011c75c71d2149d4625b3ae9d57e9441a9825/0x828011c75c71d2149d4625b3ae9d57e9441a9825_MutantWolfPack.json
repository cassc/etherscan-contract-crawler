{"SourceCode": "// SPDX-License-Identifier: unlicensed\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: ERC721A/ERC721A.sol\r\n\r\n\r\n\r\n// Creator: Chiru Labs\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nerror ApprovalCallerNotOwnerNorApproved();\r\n\r\nerror ApprovalQueryForNonexistentToken();\r\n\r\nerror ApproveToCaller();\r\n\r\nerror ApprovalToCurrentOwner();\r\n\r\nerror BalanceQueryForZeroAddress();\r\n\r\nerror MintedQueryForZeroAddress();\r\n\r\nerror BurnedQueryForZeroAddress();\r\n\r\nerror AuxQueryForZeroAddress();\r\n\r\nerror MintToZeroAddress();\r\n\r\nerror MintZeroQuantity();\r\n\r\nerror OwnerIndexOutOfBounds();\r\n\r\nerror OwnerQueryForNonexistentToken();\r\n\r\nerror TokenIndexOutOfBounds();\r\n\r\nerror TransferCallerNotOwnerNorApproved();\r\n\r\nerror TransferFromIncorrectOwner();\r\n\r\nerror TransferToNonERC721ReceiverImplementer();\r\n\r\nerror TransferToZeroAddress();\r\n\r\nerror URIQueryForNonexistentToken();\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n\r\n * the Metadata extension. Built to optimize for lower gas during batch mints.\r\n\r\n *\r\n\r\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\r\n\r\n *\r\n\r\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\r\n\r\n *\r\n\r\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\r\n\r\n */\r\n\r\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\r\n\r\n    using Address for address;\r\n\r\n    using Strings for uint256;\r\n\r\n\r\n\r\n    // Compiler will pack this into a single 256bit word.\r\n\r\n    struct TokenOwnership {\r\n\r\n        // The address of the owner.\r\n\r\n        address addr;\r\n\r\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\r\n\r\n        uint64 startTimestamp;\r\n\r\n        // Whether the token has been burned.\r\n\r\n        bool burned;\r\n\r\n    }\r\n\r\n\r\n\r\n    // Compiler will pack this into a single 256bit word.\r\n\r\n    struct AddressData {\r\n\r\n        // Realistically, 2**64-1 is more than enough.\r\n\r\n        uint64 balance;\r\n\r\n        // Keeps track of mint count with minimal overhead for tokenomics.\r\n\r\n        uint64 numberMinted;\r\n\r\n        // Keeps track of burn count with minimal overhead for tokenomics.\r\n\r\n        uint64 numberBurned;\r\n\r\n        // For miscellaneous variable(s) pertaining to the address\r\n\r\n        // (e.g. number of whitelist mint slots used).\r\n\r\n        // If there are multiple variables, please pack them into a uint64.\r\n\r\n        uint64 aux;\r\n\r\n    }\r\n\r\n\r\n\r\n    // The tokenId of the next token to be minted.\r\n\r\n    uint256 internal _currentIndex;\r\n\r\n\r\n\r\n    // The number of tokens burned.\r\n\r\n    uint256 internal _burnCounter;\r\n\r\n\r\n\r\n    // Token name\r\n\r\n    string private _name;\r\n\r\n\r\n\r\n    // Token symbol\r\n\r\n    string private _symbol;\r\n\r\n\r\n\r\n    // Mapping from token ID to ownership details\r\n\r\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\r\n\r\n    mapping(uint256 => TokenOwnership) internal _ownerships;\r\n\r\n\r\n\r\n    // Mapping owner address to address data\r\n\r\n    mapping(address => AddressData) private _addressData;\r\n\r\n\r\n\r\n    // Mapping from token ID to approved address\r\n\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n\r\n\r\n    // Mapping from owner to operator approvals\r\n\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n\r\n        _name = name_;\r\n\r\n        _symbol = symbol_;\r\n\r\n        _currentIndex = _startTokenId();\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * To change the starting tokenId, please override this function.\r\n\r\n     */\r\n\r\n    function _startTokenId() internal view virtual returns (uint256) {\r\n\r\n        return 0;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n\r\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\r\n\r\n     */\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n\r\n        // Counter underflow is impossible as _burnCounter cannot be incremented\r\n\r\n        // more than _currentIndex - _startTokenId() times\r\n\r\n        unchecked {\r\n\r\n            return _currentIndex - _burnCounter - _startTokenId();\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns the total amount of tokens minted in the contract.\r\n\r\n     */\r\n\r\n    function _totalMinted() internal view returns (uint256) {\r\n\r\n        // Counter underflow is impossible as _currentIndex does not decrement,\r\n\r\n        // and it is initialized to _startTokenId()\r\n\r\n        unchecked {\r\n\r\n            return _currentIndex - _startTokenId();\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC165-supportsInterface}.\r\n\r\n     */\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n\r\n        return\r\n\r\n            interfaceId == type(IERC721).interfaceId ||\r\n\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n\r\n            super.supportsInterface(interfaceId);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC721-balanceOf}.\r\n\r\n     */\r\n\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n\r\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\r\n\r\n        return uint256(_addressData[owner].balance);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns the number of tokens minted by `owner`.\r\n\r\n     */\r\n\r\n    function _numberMinted(address owner) internal view returns (uint256) {\r\n\r\n        if (owner == address(0)) revert MintedQueryForZeroAddress();\r\n\r\n        return uint256(_addressData[owner].numberMinted);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns the number of tokens burned by or on behalf of `owner`.\r\n\r\n     */\r\n\r\n    function _numberBurned(address owner) internal view returns (uint256) {\r\n\r\n        if (owner == address(0)) revert BurnedQueryForZeroAddress();\r\n\r\n        return uint256(_addressData[owner].numberBurned);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\r\n\r\n     */\r\n\r\n    function _getAux(address owner) internal view returns (uint64) {\r\n\r\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\r\n\r\n        return _addressData[owner].aux;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\r\n\r\n     * If there are multiple variables, please pack them into a uint64.\r\n\r\n     */\r\n\r\n    function _setAux(address owner, uint64 aux) internal {\r\n\r\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\r\n\r\n        _addressData[owner].aux = aux;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Gas spent here starts off proportional to the maximum mint batch size.\r\n\r\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\r\n\r\n     */\r\n\r\n    function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\r\n\r\n        uint256 curr = tokenId;\r\n\r\n\r\n\r\n        unchecked {\r\n\r\n            if (_startTokenId() <= curr && curr < _currentIndex) {\r\n\r\n                TokenOwnership memory ownership = _ownerships[curr];\r\n\r\n                if (!ownership.burned) {\r\n\r\n                    if (ownership.addr != address(0)) {\r\n\r\n                        return ownership;\r\n\r\n                    }\r\n\r\n                    // Invariant:\r\n\r\n                    // There will always be an ownership that has an address and is not burned\r\n\r\n                    // before an ownership that does not have an address and is not burned.\r\n\r\n                    // Hence, curr will not underflow.\r\n\r\n                    while (true) {\r\n\r\n                        curr--;\r\n\r\n                        ownership = _ownerships[curr];\r\n\r\n                        if (ownership.addr != address(0)) {\r\n\r\n                            return ownership;\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        revert OwnerQueryForNonexistentToken();\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC721-ownerOf}.\r\n\r\n     */\r\n\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n\r\n        return ownershipOf(tokenId).addr;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC721Metadata-name}.\r\n\r\n     */\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n\r\n        return _name;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC721Metadata-symbol}.\r\n\r\n     */\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n\r\n        return _symbol;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n\r\n     */\r\n\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n\r\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n\r\n\r\n\r\n        string memory baseURI = _baseURI();\r\n\r\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n\r\n     * by default, can be overriden in child contracts.\r\n\r\n     */\r\n\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n\r\n        return '';\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC721-approve}.\r\n\r\n     */\r\n\r\n    function approve(address to, uint256 tokenId) public override {\r\n\r\n        address owner = ERC721A.ownerOf(tokenId);\r\n\r\n        if (to == owner) revert ApprovalToCurrentOwner();\r\n\r\n\r\n\r\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\r\n\r\n            revert ApprovalCallerNotOwnerNorApproved();\r\n\r\n        }\r\n\r\n\r\n\r\n        _approve(to, tokenId, owner);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC721-getApproved}.\r\n\r\n     */\r\n\r\n    function getApproved(uint256 tokenId) public view override returns (address) {\r\n\r\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\r\n\r\n\r\n\r\n        return _tokenApprovals[tokenId];\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n\r\n     */\r\n\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n\r\n        if (operator == _msgSender()) revert ApproveToCaller();\r\n\r\n\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n\r\n     */\r\n\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n\r\n        return _operatorApprovals[owner][operator];\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC721-transferFrom}.\r\n\r\n     */\r\n\r\n    function transferFrom(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 tokenId\r\n\r\n    ) public virtual override {\r\n\r\n        _transfer(from, to, tokenId);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n\r\n     */\r\n\r\n    function safeTransferFrom(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 tokenId\r\n\r\n    ) public virtual override {\r\n\r\n        safeTransferFrom(from, to, tokenId, '');\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n\r\n     */\r\n\r\n    function safeTransferFrom(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 tokenId,\r\n\r\n        bytes memory _data\r\n\r\n    ) public virtual override {\r\n\r\n        _transfer(from, to, tokenId);\r\n\r\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\r\n\r\n            revert TransferToNonERC721ReceiverImplementer();\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns whether `tokenId` exists.\r\n\r\n     *\r\n\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n\r\n     *\r\n\r\n     * Tokens start existing when they are minted (`_mint`),\r\n\r\n     */\r\n\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n\r\n        return _startTokenId() <= tokenId && tokenId < _currentIndex &&\r\n\r\n            !_ownerships[tokenId].burned;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _safeMint(address to, uint256 quantity) internal {\r\n\r\n        _safeMint(to, quantity, '');\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\r\n\r\n     * - `quantity` must be greater than 0.\r\n\r\n     *\r\n\r\n     * Emits a {Transfer} event.\r\n\r\n     */\r\n\r\n    function _safeMint(\r\n\r\n        address to,\r\n\r\n        uint256 quantity,\r\n\r\n        bytes memory _data\r\n\r\n    ) internal {\r\n\r\n        _mint(to, quantity, _data, true);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `to` cannot be the zero address.\r\n\r\n     * - `quantity` must be greater than 0.\r\n\r\n     *\r\n\r\n     * Emits a {Transfer} event.\r\n\r\n     */\r\n\r\n    function _mint(\r\n\r\n        address to,\r\n\r\n        uint256 quantity,\r\n\r\n        bytes memory _data,\r\n\r\n        bool safe\r\n\r\n    ) internal {\r\n\r\n        uint256 startTokenId = _currentIndex;\r\n\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n\r\n\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n\r\n\r\n        // Overflows are incredibly unrealistic.\r\n\r\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\r\n\r\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\r\n\r\n        unchecked {\r\n\r\n            _addressData[to].balance += uint64(quantity);\r\n\r\n            _addressData[to].numberMinted += uint64(quantity);\r\n\r\n\r\n\r\n            _ownerships[startTokenId].addr = to;\r\n\r\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\r\n\r\n\r\n\r\n            uint256 updatedIndex = startTokenId;\r\n\r\n            uint256 end = updatedIndex + quantity;\r\n\r\n\r\n\r\n            if (safe && to.isContract()) {\r\n\r\n                do {\r\n\r\n                    emit Transfer(address(0), to, updatedIndex);\r\n\r\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\r\n\r\n                        revert TransferToNonERC721ReceiverImplementer();\r\n\r\n                    }\r\n\r\n                } while (updatedIndex != end);\r\n\r\n                // Reentrancy protection\r\n\r\n                if (_currentIndex != startTokenId) revert();\r\n\r\n            } else {\r\n\r\n                do {\r\n\r\n                    emit Transfer(address(0), to, updatedIndex++);\r\n\r\n                } while (updatedIndex != end);\r\n\r\n            }\r\n\r\n            _currentIndex = updatedIndex;\r\n\r\n        }\r\n\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `to` cannot be the zero address.\r\n\r\n     * - `tokenId` token must be owned by `from`.\r\n\r\n     *\r\n\r\n     * Emits a {Transfer} event.\r\n\r\n     */\r\n\r\n    function _transfer(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 tokenId\r\n\r\n    ) private {\r\n\r\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\r\n\r\n\r\n\r\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\r\n\r\n            isApprovedForAll(prevOwnership.addr, _msgSender()) ||\r\n\r\n            getApproved(tokenId) == _msgSender());\r\n\r\n\r\n\r\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\r\n\r\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\r\n\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n\r\n\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n\r\n\r\n        // Clear approvals from the previous owner\r\n\r\n        _approve(address(0), tokenId, prevOwnership.addr);\r\n\r\n\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n\r\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n\r\n        unchecked {\r\n\r\n            _addressData[from].balance -= 1;\r\n\r\n            _addressData[to].balance += 1;\r\n\r\n\r\n\r\n            _ownerships[tokenId].addr = to;\r\n\r\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\r\n\r\n\r\n\r\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\r\n\r\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n\r\n            uint256 nextTokenId = tokenId + 1;\r\n\r\n            if (_ownerships[nextTokenId].addr == address(0)) {\r\n\r\n                // This will suffice for checking _exists(nextTokenId),\r\n\r\n                // as a burned slot cannot contain the zero address.\r\n\r\n                if (nextTokenId < _currentIndex) {\r\n\r\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\r\n\r\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Destroys `tokenId`.\r\n\r\n     * The approval is cleared when the token is burned.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `tokenId` must exist.\r\n\r\n     *\r\n\r\n     * Emits a {Transfer} event.\r\n\r\n     */\r\n\r\n    function _burn(uint256 tokenId) internal virtual {\r\n\r\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\r\n\r\n\r\n\r\n        _beforeTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\r\n\r\n\r\n\r\n        // Clear approvals from the previous owner\r\n\r\n        _approve(address(0), tokenId, prevOwnership.addr);\r\n\r\n\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n\r\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n\r\n        unchecked {\r\n\r\n            _addressData[prevOwnership.addr].balance -= 1;\r\n\r\n            _addressData[prevOwnership.addr].numberBurned += 1;\r\n\r\n\r\n\r\n            // Keep track of who burned the token, and the timestamp of burning.\r\n\r\n            _ownerships[tokenId].addr = prevOwnership.addr;\r\n\r\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\r\n\r\n            _ownerships[tokenId].burned = true;\r\n\r\n\r\n\r\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\r\n\r\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n\r\n            uint256 nextTokenId = tokenId + 1;\r\n\r\n            if (_ownerships[nextTokenId].addr == address(0)) {\r\n\r\n                // This will suffice for checking _exists(nextTokenId),\r\n\r\n                // as a burned slot cannot contain the zero address.\r\n\r\n                if (nextTokenId < _currentIndex) {\r\n\r\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\r\n\r\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        emit Transfer(prevOwnership.addr, address(0), tokenId);\r\n\r\n        _afterTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\r\n\r\n\r\n\r\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\r\n\r\n        unchecked {\r\n\r\n            _burnCounter++;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Approve `to` to operate on `tokenId`\r\n\r\n     *\r\n\r\n     * Emits a {Approval} event.\r\n\r\n     */\r\n\r\n    function _approve(\r\n\r\n        address to,\r\n\r\n        uint256 tokenId,\r\n\r\n        address owner\r\n\r\n    ) private {\r\n\r\n        _tokenApprovals[tokenId] = to;\r\n\r\n        emit Approval(owner, to, tokenId);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\r\n\r\n     *\r\n\r\n     * @param from address representing the previous owner of the given token ID\r\n\r\n     * @param to target address that will receive the tokens\r\n\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n\r\n     * @param _data bytes optional data to send along with the call\r\n\r\n     * @return bool whether the call correctly returned the expected magic value\r\n\r\n     */\r\n\r\n    function _checkContractOnERC721Received(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 tokenId,\r\n\r\n        bytes memory _data\r\n\r\n    ) private returns (bool) {\r\n\r\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n\r\n            return retval == IERC721Receiver(to).onERC721Received.selector;\r\n\r\n        } catch (bytes memory reason) {\r\n\r\n            if (reason.length == 0) {\r\n\r\n                revert TransferToNonERC721ReceiverImplementer();\r\n\r\n            } else {\r\n\r\n                assembly {\r\n\r\n                    revert(add(32, reason), mload(reason))\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\r\n\r\n     * And also called before burning one token.\r\n\r\n     *\r\n\r\n     * startTokenId - the first token id to be transferred\r\n\r\n     * quantity - the amount to be transferred\r\n\r\n     *\r\n\r\n     * Calling conditions:\r\n\r\n     *\r\n\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\r\n\r\n     * transferred to `to`.\r\n\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n\r\n     * - When `to` is zero, `tokenId` will be burned by `from`.\r\n\r\n     * - `from` and `to` are never both zero.\r\n\r\n     */\r\n\r\n    function _beforeTokenTransfers(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 startTokenId,\r\n\r\n        uint256 quantity\r\n\r\n    ) internal virtual {}\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\r\n\r\n     * minting.\r\n\r\n     * And also called after one token has been burned.\r\n\r\n     *\r\n\r\n     * startTokenId - the first token id to be transferred\r\n\r\n     * quantity - the amount to be transferred\r\n\r\n     *\r\n\r\n     * Calling conditions:\r\n\r\n     *\r\n\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\r\n\r\n     * transferred to `to`.\r\n\r\n     * - When `from` is zero, `tokenId` has been minted for `to`.\r\n\r\n     * - When `to` is zero, `tokenId` has been burned by `from`.\r\n\r\n     * - `from` and `to` are never both zero.\r\n\r\n     */\r\n\r\n    function _afterTokenTransfers(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 startTokenId,\r\n\r\n        uint256 quantity\r\n\r\n    ) internal virtual {}\r\n\r\n}\r\n\r\n\r\n// File: contracts/MutantWolfPack.sol\r\n\r\n\r\n\r\npragma solidity 0.8.10;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MutantWolfPack is Ownable, ERC721A{\r\n\r\n    using Strings for uint256;\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n\r\n    //Configuration  //editable\r\n\r\n    bool       public isFreemint;\r\n\r\n    bool       public isPublicSale;\r\n\r\n\r\n\r\n    uint256    public max_supply              = 3000;\r\n\r\n\r\n\r\n    uint256    public freemint_qty            = 300;\r\n\r\n    uint256    public reserved_qty            = 20;\r\n\r\n\r\n\r\n    uint256    public maxMintsPerTransaction  = 5;\r\n\r\n    uint256    public freeMintPerWallet       = 2;\r\n\r\n\r\n\r\n    uint256    public publicsale_price        = 0.025 ether;\r\n\r\n    \r\n\r\n    address    public proxyRegistryAddress;\r\n\r\n    address    public signer;\r\n\r\n\r\n\r\n    string     public baseExtension           = \"\";\r\n\r\n    string     private __baseURI;\r\n\r\n\r\n\r\n    //Distribution //editable\r\n\r\n    uint256 public lastIndexPrimary;\r\n\r\n    uint256 public lastIndexTeam;\r\n\r\n\r\n\r\n    mapping(uint256 => uint256) public percentage;\r\n\r\n    mapping(uint256 => address) public recipient;\r\n\r\n\r\n\r\n    //DB\r\n\r\n    mapping(address => uint256) public mintedOnFreemint;\r\n\r\n\r\n\r\n    event Mint(address indexed sender, uint256 indexed type_mint, uint256 timestamp);\r\n\r\n    \r\n\r\n    constructor(\r\n\r\n        string memory ___baseURI,\r\n\r\n        address _signer,\r\n\r\n        address _proxyRegistryAddress,\r\n\r\n\r\n\r\n        uint256[] memory _primaryPercentage,\r\n\r\n        address[] memory _primaryReceipient,\r\n\r\n        uint256[] memory _split,\r\n\r\n        address[] memory _addressTeam\r\n\r\n    )\r\n\r\n    ERC721A(\"Mutant Wolf Pack\", \"MWP\")\r\n\r\n    {\r\n\r\n        __baseURI = ___baseURI;\r\n\r\n        signer = _signer;\r\n\r\n        proxyRegistryAddress = _proxyRegistryAddress;\r\n\r\n\r\n\r\n        _setDistribution(\r\n\r\n            _primaryPercentage,\r\n\r\n            _primaryReceipient,\r\n\r\n            _split,\r\n\r\n            _addressTeam\r\n\r\n        );\r\n\r\n    }    \r\n\r\n\r\n\r\n    //General Part\r\n\r\n    function _startTokenId() internal view virtual override returns (uint256) {\r\n\r\n        return 1;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n\r\n        return __baseURI;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function baseURI() public view returns(string memory){\r\n\r\n        return _baseURI();\r\n\r\n    }\r\n\r\n    \r\n\r\n    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory){\r\n\r\n        require(_exists(_tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n\r\n\r\n        string memory ___baseURI = _baseURI();\r\n\r\n        return bytes(___baseURI).length > 0 ? string(abi.encodePacked(___baseURI, _tokenId.toString(), baseExtension)) : \"\";\r\n\r\n    }\r\n\r\n\r\n\r\n    //Set Configuration Part\r\n\r\n    //1\r\n\r\n    function setBaseURI(string memory _baseURIArg) external onlyOwner {\r\n\r\n        __baseURI = _baseURIArg;\r\n\r\n    }\r\n\r\n\r\n\r\n    //2\r\n\r\n    function setMaxSupply(uint _maxSupply) external onlyOwner {\r\n\r\n        max_supply = _maxSupply;\r\n\r\n    }\r\n\r\n\r\n\r\n    //3\r\n\r\n    function setMaxMintsPerTransaction(uint _maxMintsPerTransaction) external onlyOwner {\r\n\r\n        maxMintsPerTransaction = _maxMintsPerTransaction;\r\n\r\n    }\r\n\r\n\r\n\r\n    //4\r\n\r\n    function setSigner(address _signer) external onlyOwner {\r\n\r\n        signer = _signer;\r\n\r\n    }\r\n\r\n    \r\n\r\n    //5\r\n\r\n    function setBaseExtension(string memory _baseExt) external onlyOwner {\r\n\r\n        baseExtension =  _baseExt;\r\n\r\n    }\r\n\r\n\r\n\r\n    //6\r\n\r\n    function setPublicSaleActive() external onlyOwner{\r\n\r\n        if(isPublicSale == false){\r\n\r\n            isPublicSale = true;\r\n\r\n        }\r\n\r\n        else{\r\n\r\n            isPublicSale = false;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    \r\n\r\n    //7\r\n\r\n    function setProxy(address _proxy) external onlyOwner {\r\n\r\n        proxyRegistryAddress =  _proxy;\r\n\r\n    }\r\n\r\n\r\n\r\n    //8\r\n\r\n    function setPublicSalePrice(uint256 _price) external onlyOwner{\r\n\r\n        publicsale_price = _price;\r\n\r\n    }\r\n\r\n\r\n\r\n    //9\r\n\r\n    function setFreeMintLimit(uint256 _limit) external onlyOwner{\r\n\r\n        freeMintPerWallet = _limit;\r\n\r\n    }\r\n\r\n\r\n\r\n    //10\r\n\r\n    function setFreeMintQTY(uint256 _qty) external onlyOwner{\r\n\r\n        freemint_qty = _qty;\r\n\r\n    }\r\n\r\n\r\n\r\n    //11\r\n\r\n    function setReservedQTY(uint256 _qty) external onlyOwner{\r\n\r\n        reserved_qty = _qty;\r\n\r\n    }\r\n\r\n\r\n\r\n    //12\r\n\r\n    function setFreeMintActive() external onlyOwner{\r\n\r\n        if(isFreemint == false){\r\n\r\n            isFreemint = true;\r\n\r\n        }\r\n\r\n        else{\r\n\r\n            isFreemint = false;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    //13\r\n\r\n    function setDistribution(\r\n\r\n        uint256[] memory _primaryPercentage,\r\n\r\n        address[] memory _primaryReceipient,\r\n\r\n        uint256[] memory _split,\r\n\r\n        address[] memory _addressTeam\r\n\r\n    ) external onlyOwner{\r\n\r\n        _setDistribution(\r\n\r\n            _primaryPercentage,\r\n\r\n            _primaryReceipient,\r\n\r\n            _split,\r\n\r\n            _addressTeam\r\n\r\n        );\r\n\r\n    }\r\n\r\n\r\n\r\n    //Internal\r\n\r\n    function _setDistribution(\r\n\r\n        uint256[] memory _primaryPercentage,\r\n\r\n        address[] memory _primaryReceipient,\r\n\r\n        uint256[] memory _split,\r\n\r\n        address[] memory _addressTeam\r\n\r\n    ) internal {\r\n\r\n        require(\r\n\r\n            _primaryPercentage.length == _primaryReceipient.length &&\r\n\r\n            _split.length == _addressTeam.length, \"length must same\"\r\n\r\n        );\r\n\r\n\r\n\r\n        for(uint256 i=0; i< _primaryPercentage.length; i++){\r\n\r\n            percentage[i+1] = _primaryPercentage[i];\r\n\r\n            recipient[i+1] = _primaryReceipient[i];\r\n\r\n        }\r\n\r\n        lastIndexPrimary = _primaryPercentage.length;\r\n\r\n\r\n\r\n        for(uint256 i=0; i< _split.length; i++){\r\n\r\n            percentage[lastIndexPrimary +1 +i] = _split[i];\r\n\r\n            recipient[lastIndexPrimary +1 +i] = _addressTeam[i];\r\n\r\n        }\r\n\r\n        lastIndexTeam = lastIndexPrimary + _split.length;\r\n\r\n    }\r\n\r\n\r\n\r\n    //Mint Part\r\n\r\n    //Mint Internal\r\n\r\n    function _mintNFT(address _to, uint256 _amount) internal {\r\n\r\n        _safeMint(_to, _amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    //Public Sale Mint\r\n\r\n    function publicSaleMint(uint256 _amount) external payable{\r\n\r\n        require(_amount > 0 , \"amount must not zero\");\r\n\r\n        require(isPublicSale == true, \"Public sale is not active\");\r\n\r\n        require(_amount <= maxMintsPerTransaction, \"Max mints per transaction constraint violation\");\r\n\r\n        require(msg.value == _amount * publicsale_price, \"Wrong Ether Value For Public Sale\");\r\n\r\n\r\n\r\n        require(totalSupply() + reserved_qty + freemint_qty + _amount <= max_supply, \"Tokens supply reached limit\");\r\n\r\n        _mintNFT(msg.sender, _amount);\r\n\r\n\r\n\r\n        emit Mint(msg.sender, 1, block.timestamp);\r\n\r\n    }\r\n\r\n\r\n\r\n    //Public sale and free mint\r\n\r\n    function publicWithFreeMint(uint256 _amountTotal, uint256 _amountFree, bytes memory _signature) external payable{\r\n\r\n        require(_amountTotal > 0 && _amountFree > 0 && _amountTotal > _amountFree, \"all amount must not zero\");\r\n\r\n        require(recoverSigner(prefixed(keccak256(abi.encodePacked(\r\n\r\n                                    msg.sender,\r\n\r\n                                    _amountTotal,\r\n\r\n                                    _amountFree,\r\n\r\n                                    mintedOnFreemint[msg.sender],\r\n\r\n                                    uint8(1)\r\n\r\n                            ))), _signature)== signer, \"You have not access for minting\");\r\n\r\n        require(isFreemint == true && isPublicSale == true, \"Public sale and Free mint must active\");\r\n\r\n\r\n\r\n        //free part\r\n\r\n        require(_amountFree <= freemint_qty, \"Freemint Supply Not Enough For Minting\");\r\n\r\n        require(mintedOnFreemint[msg.sender] + _amountFree <= freeMintPerWallet, \"Max mints for free mint constraint violation\");\r\n\r\n\r\n\r\n        //public part\r\n\r\n        require(_amountTotal <= maxMintsPerTransaction, \"Max mints per transaction constraint violation\");\r\n\r\n        require(msg.value == (_amountTotal.sub(_amountFree)) * publicsale_price, \"Wrong Ether Value For Public Sale\");\r\n\r\n        require(totalSupply() + reserved_qty + freemint_qty + _amountTotal <= max_supply, \"Tokens supply reached limit\");\r\n\r\n\r\n\r\n        freemint_qty-=_amountFree; //1\r\n\r\n        mintedOnFreemint[msg.sender] += _amountFree; //2\r\n\r\n        \r\n\r\n        _mintNFT(msg.sender, _amountTotal);\r\n\r\n\r\n\r\n        emit Mint(msg.sender, 2, block.timestamp);\r\n\r\n    }\r\n\r\n\r\n\r\n    //Free Mint\r\n\r\n    function freeMint(uint256 _amount, bytes memory _signature) external {\r\n\r\n        require(_amount > 0 , \"amount must not zero\");\r\n\r\n        require(recoverSigner(prefixed(keccak256(abi.encodePacked(\r\n\r\n                                    msg.sender,\r\n\r\n                                    _amount,\r\n\r\n                                    mintedOnFreemint[msg.sender],\r\n\r\n                                    uint8(2)\r\n\r\n                            ))), _signature)== signer, \"You have not access for minting\");\r\n\r\n\r\n\r\n        require(isFreemint == true, \"Free mint is not active\");\r\n\r\n        require(_amount <= freemint_qty, \"Freemint Supply Not Enough For Minting\");\r\n\r\n        require(mintedOnFreemint[msg.sender] + _amount <= freeMintPerWallet, \"Max mints for free mint constraint violation\");\r\n\r\n        \r\n\r\n        freemint_qty-=_amount; //1\r\n\r\n        mintedOnFreemint[msg.sender] += _amount; //2\r\n\r\n        \r\n\r\n        _mintNFT(msg.sender, _amount);\r\n\r\n\r\n\r\n        emit Mint(msg.sender, 3, block.timestamp);\r\n\r\n    }\r\n\r\n\r\n\r\n    //Reserved Mint\r\n\r\n    function reservedMint(address[] memory _to, uint256[] memory _amount) external onlyOwner{\r\n\r\n        require(_to.length == _amount.length, \"must same length\");\r\n\r\n        uint reserved = reserved_qty;\r\n\r\n        for(uint i=0; i<_to.length; i++){\r\n\r\n            require(_amount[i] <= reserved ,\"Reserved supply reached limit\");\r\n\r\n            _mintNFT(_to[i],_amount[i]);\r\n\r\n            reserved-= _amount[i];\r\n\r\n        }\r\n\r\n        reserved_qty=reserved;\r\n\r\n\r\n\r\n        emit Mint(msg.sender, 4, block.timestamp);\r\n\r\n    }\r\n\r\n\r\n\r\n    //Withdraw Part\r\n\r\n    function withdraw() external onlyOwner{\r\n\r\n        uint256 balance = address(this).balance;\r\n\r\n        uint256 percent100 = 100*(10**18);\r\n\r\n\r\n\r\n        uint teamvalue = balance;\r\n\r\n        uint256 sentValue;\r\n\r\n\r\n\r\n        //primary distribution\r\n\r\n        for(uint256 j=0; j<lastIndexPrimary; j++){\r\n\r\n            sentValue = (percentage[j+1].mul(balance)).div(percent100);\r\n\r\n            _sent(recipient[j+1], sentValue);\r\n\r\n            teamvalue = teamvalue.sub(sentValue);\r\n\r\n        }\r\n\r\n\r\n\r\n        //team distribution\r\n\r\n        balance = teamvalue;\r\n\r\n        for(uint256 i=lastIndexPrimary; i<lastIndexTeam; i++){\r\n\r\n            if(i != lastIndexTeam-1){\r\n\r\n                sentValue = (percentage[i+1].mul(teamvalue)).div(percent100);\r\n\r\n                balance = balance.sub(sentValue);\r\n\r\n            }\r\n\r\n            else{\r\n\r\n                sentValue= balance;\r\n\r\n            }\r\n\r\n            _sent(recipient[i+1], sentValue);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function _sent(address _to, uint256 _value) private returns (bool){\r\n\r\n        (bool sent,) =payable(_to).call{value: _value}(\"\");\r\n\r\n        return sent;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    //signature part\r\n\r\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\r\n\r\n        return keccak256(abi.encodePacked(\r\n\r\n        '\\x19Ethereum Signed Message:\\n32', \r\n\r\n        hash\r\n\r\n        ));\r\n\r\n    }\r\n\r\n\r\n\r\n    function recoverSigner(bytes32 message, bytes memory sig)\r\n\r\n        internal\r\n\r\n        pure\r\n\r\n        returns (address)\r\n\r\n    {\r\n\r\n        uint8 v;\r\n\r\n        bytes32 r;\r\n\r\n        bytes32 s;\r\n\r\n    \r\n\r\n        (v, r, s) = splitSignature(sig);\r\n\r\n    \r\n\r\n        return ecrecover(message, v, r, s);\r\n\r\n    }\r\n\r\n\r\n\r\n    function splitSignature(bytes memory sig)\r\n\r\n        internal\r\n\r\n        pure\r\n\r\n        returns (uint8, bytes32, bytes32)\r\n\r\n    {\r\n\r\n        require(sig.length == 65);\r\n\r\n    \r\n\r\n        bytes32 r;\r\n\r\n        bytes32 s;\r\n\r\n        uint8 v;\r\n\r\n    \r\n\r\n        assembly {\r\n\r\n            // first 32 bytes, after the length prefix\r\n\r\n            r := mload(add(sig, 32))\r\n\r\n            // second 32 bytes\r\n\r\n            s := mload(add(sig, 64))\r\n\r\n            // final byte (first byte of the next 32 bytes)\r\n\r\n            v := byte(0, mload(add(sig, 96)))\r\n\r\n        }\r\n\r\n    \r\n\r\n        return (v, r, s);\r\n\r\n    }\r\n\r\n\r\n\r\n    //Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings\r\n\r\n    function isApprovedForAll(address owner, address operator)\r\n\r\n        override\r\n\r\n        public\r\n\r\n        view\r\n\r\n        returns (bool)\r\n\r\n    {\r\n\r\n        // Whitelist OpenSea proxy contract for easy trading.\r\n\r\n        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\r\n\r\n        if (address(proxyRegistry.proxies(owner)) == operator) {\r\n\r\n            return true;\r\n\r\n        }\r\n\r\n\r\n\r\n        return super.isApprovedForAll(owner, operator);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract OwnableDelegateProxy { }\r\n\r\ncontract ProxyRegistry {\r\n\r\n    mapping(address => OwnableDelegateProxy) public proxies;\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"___baseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_primaryPercentage\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_primaryReceipient\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_split\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_addressTeam\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"type_mint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"freeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeMintPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freemint_qty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFreemint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastIndexPrimary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastIndexTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintsPerTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintedOnFreemint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"publicSaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountFree\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"publicWithFreeMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicsale_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"reservedMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserved_qty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseExt\",\"type\":\"string\"}],\"name\":\"setBaseExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURIArg\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_primaryPercentage\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_primaryReceipient\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_split\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_addressTeam\",\"type\":\"address[]\"}],\"name\":\"setDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setFreeMintActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setFreeMintLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_qty\",\"type\":\"uint256\"}],\"name\":\"setFreeMintQTY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxMintsPerTransaction\",\"type\":\"uint256\"}],\"name\":\"setMaxMintsPerTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPublicSaleActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPublicSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_qty\",\"type\":\"uint256\"}],\"name\":\"setReservedQTY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MutantWolfPack", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000008d51be960dd304ca0be6c5b112ff3a99b18b9cdc000000000000000000000000a5409ec958c83c3f309868babaca7c86dcb077c10000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002668747470733a2f2f697066732d61737365742e6d7574616e74776f6c667061636b2e636f6d2f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000002b5e3af16b188000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000eac05884ea59a40de7944e296a6a01f4739fd8700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000056bc75e2d6310000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000eac05884ea59a40de7944e296a6a01f4739fd87", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://171fe0e29eb7be12c8630359e76315908df1992375e046bceb7ffb09e542ef88"}