{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/extensions/core/ThePixelsIncExtensionStorageV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// ______  __  __   ______       _____    __  __   _____    ______\\n// /\\\\__  _\\\\/\\\\ \\\\_\\\\ \\\\ /\\\\  ___\\\\     /\\\\  __-. /\\\\ \\\\/\\\\ \\\\ /\\\\  __-. /\\\\  ___\\\\\\n// \\\\/_/\\\\ \\\\/\\\\ \\\\  __ \\\\\\\\ \\\\  __\\\\     \\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\ \\\\_\\\\ \\\\\\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\  __\\\\\\n//   \\\\ \\\\_\\\\ \\\\ \\\\_\\\\ \\\\_\\\\\\\\ \\\\_____\\\\    \\\\ \\\\____- \\\\ \\\\_____\\\\\\\\ \\\\____- \\\\ \\\\_____\\\\\\n//    \\\\/_/  \\\\/_/\\\\/_/ \\\\/_____/     \\\\/____/  \\\\/_____/ \\\\/____/  \\\\/_____/\\n//\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./ThePixelsDigitsUtility.sol\\\";\\nimport \\\"./../../common/interfaces/IINT.sol\\\";\\nimport \\\"./../../common/interfaces/IThePixelsIncExtensionStorageV2.sol\\\";\\nimport \\\"./../../common/interfaces/ICoreRewarder.sol\\\";\\n\\ncontract ThePixelsIncExtensionStorageV2 is\\n    Ownable,\\n    IThePixelsIncExtensionStorageV2,\\n    ThePixelsDigitsUtility\\n{\\n    struct Extension {\\n        bool isEnabled;\\n        bool isSticky;\\n        uint8 beginIndex;\\n        uint8 endIndex;\\n        address operator;\\n    }\\n\\n    bool public isLive;\\n\\n    address public immutable INTAddress;\\n    address public DAOAddress;\\n    address public rewarderAddress;\\n\\n    uint256 public extensionCount;\\n\\n    mapping(uint256 => uint256) public override pixelExtensions;\\n    mapping(uint256 => Extension) public extensions;\\n    mapping(uint256 => mapping(uint256 => Variant)) public variants;\\n    mapping(uint256 => mapping(uint256 => Category)) public categories;\\n    mapping(uint256 => mapping(uint256 => mapping(uint256 => bool)))\\n        public claimedPixelVariants;\\n    mapping(uint256 => mapping(uint256 => mapping(uint256 => bool)))\\n        public usedCollectionTokens;\\n\\n    constructor(\\n        address _INTAddress,\\n        address _DAOAddress,\\n        address _rewarderAddress\\n    ) {\\n        INTAddress = _INTAddress;\\n        DAOAddress = _DAOAddress;\\n        rewarderAddress = _rewarderAddress;\\n    }\\n\\n    // OWNER CONTROLS\\n\\n    function setIsLive(bool _isLive) external onlyOwner {\\n        isLive = _isLive;\\n    }\\n\\n    function setDAOAddress(address _DAOAddress) external onlyOwner {\\n        DAOAddress = _DAOAddress;\\n    }\\n\\n    function setRewarderAddress(address _rewarderAddress) external onlyOwner {\\n        rewarderAddress = _rewarderAddress;\\n    }\\n\\n    function setExtension(uint256 extensionId, Extension memory extension)\\n        public\\n        onlyOwner\\n    {\\n        require(\\n            extension.endIndex > extension.beginIndex,\\n            \\\"Indexes are invalid\\\"\\n        );\\n        extensions[extensionId] = extension;\\n        emitExtensionChangeEvent(extensionId, extension);\\n    }\\n\\n    function setExtensions(\\n        uint256[] memory extensionIds,\\n        Extension[] memory _extensions\\n    ) public onlyOwner {\\n        for (uint256 i = 0; i < extensionIds.length; i++) {\\n            setExtension(extensionIds[i], _extensions[i]);\\n        }\\n    }\\n\\n    function enableExtension(uint256 extensionId, bool isEnabled)\\n        external\\n        onlyOwner\\n    {\\n        extensions[extensionId].isEnabled = isEnabled;\\n        emitExtensionChangeEvent(extensionId, extensions[extensionId]);\\n    }\\n\\n    function setVariant(\\n        uint256 extensionId,\\n        uint256 variantId,\\n        Variant memory variant\\n    ) public onlyOwner {\\n        variants[extensionId][variantId] = variant;\\n        emitVariantChangeEvent(extensionId, variantId, variant);\\n    }\\n\\n    function setVariants(\\n        uint256 extensionId,\\n        uint256[] memory variantIds,\\n        Variant[] memory _variants\\n    ) public onlyOwner {\\n        for (uint256 i; i < variantIds.length; i++) {\\n            setVariant(extensionId, variantIds[i], _variants[i]);\\n        }\\n    }\\n\\n    function enableVariant(\\n        uint256 extensionId,\\n        uint256 variantId,\\n        bool isEnabled\\n    ) external onlyOwner {\\n        variants[extensionId][variantId].isEnabled = isEnabled;\\n        emitVariantChangeEvent(\\n            extensionId,\\n            variantId,\\n            variants[extensionId][variantId]\\n        );\\n    }\\n\\n    function setCategory(\\n        uint256 extensionId,\\n        uint256 categoryId,\\n        Category memory category\\n    ) public onlyOwner {\\n        categories[extensionId][categoryId] = category;\\n        emitCategoryChangeEvent(extensionId, categoryId, category);\\n    }\\n\\n    function setCategories(\\n        uint256 extensionId,\\n        uint256[] memory categoryIds,\\n        Category[] memory _categories\\n    ) public onlyOwner {\\n        for (uint256 i; i < categoryIds.length; i++) {\\n            setCategory(extensionId, categoryIds[i], _categories[i]);\\n        }\\n    }\\n\\n    // Used for migration\\n    function setClaimedPixelVariants(\\n        uint256[] memory extensionIds,\\n        uint256[] memory tokenIds,\\n        uint256[] memory variantIds,\\n        bool[] memory isClaimeds\\n    ) public onlyOwner {\\n        for (uint256 i; i < extensionIds.length; i++) {\\n            claimedPixelVariants[extensionIds[i]][tokenIds[i]][\\n                variantIds[i]\\n            ] = isClaimeds[i];\\n        }\\n    }\\n\\n    // Used for migration\\n    function setPixelExtensions(\\n        uint256[] memory tokenIds,\\n        uint256[] memory _pixelExtensions\\n    ) public onlyOwner {\\n        for (uint256 i; i < tokenIds.length; i++) {\\n            pixelExtensions[tokenIds[i]] = _pixelExtensions[i];\\n        }\\n    }\\n\\n    // PUBILC CONTROLS\\n\\n    function extendWithVariant(\\n        address owner,\\n        uint256 extensionId,\\n        uint256 tokenId,\\n        uint256 variantId,\\n        bool useCollectionTokenId,\\n        uint256 collectionTokenId\\n    ) public override {\\n        require(isLive, \\\"Extension storage is not live\\\");\\n        Extension memory extension = extensions[extensionId];\\n        require(extension.isEnabled, \\\"This extension is disabled\\\");\\n\\n        _extendWithVariant(\\n            owner,\\n            extension,\\n            extensionId,\\n            tokenId,\\n            variantId,\\n            useCollectionTokenId,\\n            collectionTokenId\\n        );\\n    }\\n\\n    function extendMultipleWithVariants(\\n        address owner,\\n        uint256 extensionId,\\n        uint256[] memory tokenIds,\\n        uint256[] memory variantIds,\\n        bool[] memory useCollectionTokenIds,\\n        uint256[] memory collectionTokenIds\\n    ) public override {\\n        require(isLive, \\\"Extension storage is not live\\\");\\n        Extension memory extension = extensions[extensionId];\\n        require(extension.isEnabled, \\\"This extension is disabled\\\");\\n\\n        for (uint256 i; i < tokenIds.length; i++) {\\n            _extendWithVariant(\\n                owner,\\n                extension,\\n                extensionId,\\n                tokenIds[i],\\n                variantIds[i],\\n                useCollectionTokenIds[i],\\n                collectionTokenIds[i]\\n            );\\n        }\\n    }\\n\\n    function detachVariant(\\n        address owner,\\n        uint256 extensionId,\\n        uint256 tokenId\\n    ) public override {\\n        require(isLive, \\\"Extension storage is not live\\\");\\n        Extension memory extension = extensions[extensionId];\\n        require(extension.isEnabled, \\\"This extension is disabled\\\");\\n\\n        _detachExtensionVariant(owner, extension, extensionId, tokenId);\\n    }\\n\\n    function detachVariants(\\n        address owner,\\n        uint256 extensionId,\\n        uint256[] memory tokenIds\\n    ) public override {\\n        require(isLive, \\\"Extension storage is not live\\\");\\n        Extension memory extension = extensions[extensionId];\\n        require(extension.isEnabled, \\\"This extension is disabled\\\");\\n\\n        for (uint256 i; i < tokenIds.length; i++) {\\n            _detachExtensionVariant(owner, extension, extensionId, tokenIds[i]);\\n        }\\n    }\\n\\n    function transferExtensionVariant(\\n        address owner,\\n        uint256 extensionId,\\n        uint256 variantId,\\n        uint256 fromTokenId,\\n        uint256 toTokenId\\n    ) public override {\\n        require(isLive, \\\"Extension storage is not live\\\");\\n        Extension memory extension = extensions[extensionId];\\n        require(extension.isEnabled, \\\"This extension is disabled\\\");\\n        require(!extension.isSticky, \\\"This extension is sticky\\\");\\n\\n        Variant memory _variant = variants[extensionId][variantId];\\n        require(_variant.isEnabled, \\\"This variant is disabled\\\");\\n\\n        require(\\n            extension.operator == msg.sender || owner == msg.sender,\\n            \\\"Not authorised - Invalid owner or operator\\\"\\n        );\\n\\n        require(\\n            ICoreRewarder(rewarderAddress).isOwner(owner, fromTokenId),\\n            \\\"Not authorised - Invalid owner\\\"\\n        );\\n\\n        bool ownershipOfSender = claimedPixelVariants[extensionId][fromTokenId][\\n            variantId\\n        ];\\n        require(ownershipOfSender, \\\"Sender doesn't own this variant\\\");\\n        uint256 currentVariantId = currentVariantIdOf(extensionId, fromTokenId);\\n        if (currentVariantId == variantId) {\\n            _detach(\\n                msg.sender,\\n                extensionId,\\n                extension.beginIndex,\\n                extension.endIndex,\\n                fromTokenId\\n            );\\n        }\\n\\n        bool ownershipOfRecipent = claimedPixelVariants[extensionId][toTokenId][\\n            variantId\\n        ];\\n        require(!ownershipOfRecipent, \\\"Recipent already has this variant\\\");\\n\\n        claimedPixelVariants[extensionId][fromTokenId][variantId] = false;\\n        claimedPixelVariants[extensionId][toTokenId][variantId] = true;\\n\\n        emit VariantTransferred(extensionId, variantId, fromTokenId, toTokenId);\\n    }\\n\\n    // UTILITY\\n\\n    function variantDetail(\\n        address owner,\\n        uint256 extensionId,\\n        uint256 tokenId,\\n        uint256 variantId,\\n        bool useCollectionTokenId,\\n        uint256 collectionTokenId\\n    ) public view override returns (Variant memory, VariantStatus memory) {\\n        Variant memory variant = variants[extensionId][variantId];\\n        VariantStatus memory status;\\n\\n        (uint128 _cost, uint128 _supply) = _costAndSupplyOfVariant(\\n            extensionId,\\n            variant\\n        );\\n\\n        status.cost = _cost;\\n        status.supply = _supply;\\n\\n        bool isFreeForCollection = _shouldConsumeCollectionToken(\\n            owner,\\n            extensionId,\\n            variantId,\\n            useCollectionTokenId,\\n            collectionTokenId,\\n            variant\\n        );\\n\\n        if (isFreeForCollection) {\\n            status.cost = 0;\\n        }\\n\\n        if (claimedPixelVariants[extensionId][tokenId][variantId]) {\\n            status.isAlreadyClaimed = true;\\n            status.cost = 0;\\n        }\\n\\n        return (variant, status);\\n    }\\n\\n    function variantDetails(\\n        address owner,\\n        uint256 extensionId,\\n        uint256[] memory tokenIds,\\n        uint256[] memory variantIds,\\n        bool[] memory useCollectionTokenIds,\\n        uint256[] memory collectionTokenIds\\n    ) public view override returns (Variant[] memory, VariantStatus[] memory) {\\n        VariantStatus[] memory statuses = new VariantStatus[](\\n            variantIds.length\\n        );\\n        Variant[] memory _variants = new Variant[](variantIds.length);\\n\\n        for (uint256 i; i < tokenIds.length; i++) {\\n            (\\n                Variant memory _variant,\\n                VariantStatus memory _status\\n            ) = variantDetail(\\n                    owner,\\n                    extensionId,\\n                    tokenIds[i],\\n                    variantIds[i],\\n                    useCollectionTokenIds[i],\\n                    collectionTokenIds[i]\\n                );\\n            _variants[i] = _variant;\\n            statuses[i] = _status;\\n        }\\n\\n        return (_variants, statuses);\\n    }\\n\\n    function variantsOfExtension(\\n        uint256 extensionId,\\n        uint256[] memory variantIds\\n    ) public view override returns (Variant[] memory) {\\n        Variant[] memory _variants = new Variant[](variantIds.length);\\n\\n        for (uint256 i; i < variantIds.length; i++) {\\n            _variants[i] = variants[extensionId][variantIds[i]];\\n        }\\n\\n        return _variants;\\n    }\\n\\n    function balanceOfToken(\\n        uint256 extensionId,\\n        uint256 tokenId,\\n        uint256[] memory variantIds\\n    ) public view override returns (uint256) {\\n        uint256 balance;\\n        for (uint256 i; i < variantIds.length; i++) {\\n            uint256 variantId = variantIds[i];\\n            if (claimedPixelVariants[extensionId][tokenId][variantId]) {\\n                balance++;\\n            }\\n        }\\n        return balance;\\n    }\\n\\n    function currentVariantIdOf(uint256 extensionId, uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        Extension memory extension = extensions[extensionId];\\n        uint256 value = pixelExtensions[tokenId];\\n        return _digitsAt(value, extension.beginIndex, extension.endIndex);\\n    }\\n\\n    function currentVariantIdsOf(uint256 extensionId, uint256[] memory tokenIds)\\n        public\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory _variants = new uint256[](tokenIds.length);\\n        for (uint256 i; i < tokenIds.length; i++) {\\n            _variants[i] = currentVariantIdOf(extensionId, tokenIds[i]);\\n        }\\n        return _variants;\\n    }\\n\\n    // INTERNAL\\n\\n    function _extendWithVariant(\\n        address _owner,\\n        Extension memory _extension,\\n        uint256 _extensionId,\\n        uint256 _tokenId,\\n        uint256 _variantId,\\n        bool _useCollectionTokenId,\\n        uint256 _collectionTokenId\\n    ) internal {\\n        Variant memory _variant = variants[_extensionId][_variantId];\\n        require(_variant.isEnabled, \\\"This variant is disabled\\\");\\n\\n        if (_variant.isOperatorExecution) {\\n            require(\\n                _extension.operator == msg.sender,\\n                \\\"Not authroised - Invalid operator\\\"\\n            );\\n        } else {\\n            require(_owner == msg.sender, \\\"Not authroised - Invalid owner\\\");\\n        }\\n\\n        require(\\n            ICoreRewarder(rewarderAddress).isOwner(_owner, _tokenId),\\n            \\\"Not authorised - Invalid owner\\\"\\n        );\\n\\n        if (_variant.isDisabledForSpecialPixels) {\\n            require(\\n                !_isSpecialPixel(_tokenId),\\n                \\\"This variant is not for special pixels\\\"\\n            );\\n        }\\n\\n        _extend(\\n            _owner,\\n            _extensionId,\\n            _extension.beginIndex,\\n            _extension.endIndex,\\n            _tokenId,\\n            _variantId\\n        );\\n\\n        if (!claimedPixelVariants[_extensionId][_tokenId][_variantId]) {\\n            (uint128 _cost, uint128 _supply) = _costAndSupplyOfVariant(\\n                _extensionId,\\n                _variant\\n            );\\n\\n            bool shouldConsumeCollectionToken = _shouldConsumeCollectionToken(\\n                _owner,\\n                _extensionId,\\n                _variantId,\\n                _useCollectionTokenId,\\n                _collectionTokenId,\\n                _variant\\n            );\\n\\n            if (shouldConsumeCollectionToken) {\\n                _cost = 0;\\n                usedCollectionTokens[_extensionId][_variantId][\\n                    _collectionTokenId\\n                ] = true;\\n            }\\n\\n            if (_supply != 0) {\\n                require(_variant.count < _supply, \\\"Sorry, sold out\\\");\\n                variants[_extensionId][_variantId].count++;\\n            }\\n\\n            claimedPixelVariants[_extensionId][_tokenId][_variantId] = true;\\n\\n            if (_cost > 0) {\\n                _spendINT(\\n                    _owner,\\n                    _cost,\\n                    _variant.contributer,\\n                    _variant.contributerCut\\n                );\\n            }\\n        }\\n    }\\n\\n    function _detachExtensionVariant(\\n        address _owner,\\n        Extension memory _extension,\\n        uint256 _extensionId,\\n        uint256 _tokenId\\n    ) internal {\\n        require(!_extension.isSticky, \\\"This extension is sticky\\\");\\n        require(\\n            _extension.operator == msg.sender || _owner == msg.sender,\\n            \\\"Not authorised - Invalid owner or operator\\\"\\n        );\\n\\n        require(\\n            ICoreRewarder(rewarderAddress).isOwner(_owner, _tokenId),\\n            \\\"Not authorised - Invalid owner\\\"\\n        );\\n\\n        _detach(\\n            _owner,\\n            _extensionId,\\n            _extension.beginIndex,\\n            _extension.endIndex,\\n            _tokenId\\n        );\\n    }\\n\\n    function _extend(\\n        address _owner,\\n        uint256 _extensionId,\\n        uint8 _beginIndex,\\n        uint8 _endIndex,\\n        uint256 _tokenId,\\n        uint256 _value\\n    ) internal {\\n        uint256 value = pixelExtensions[_tokenId];\\n        uint256 newValue = _replacedDigits(\\n            value,\\n            _beginIndex,\\n            _endIndex,\\n            _value\\n        );\\n        pixelExtensions[_tokenId] = newValue;\\n        emit Extended(_owner, _tokenId, _extensionId, value, newValue);\\n    }\\n\\n    function _detach(\\n        address _owner,\\n        uint256 _extensionId,\\n        uint8 _beginIndex,\\n        uint8 _endIndex,\\n        uint256 _tokenId\\n    ) internal {\\n        uint256 value = pixelExtensions[_tokenId];\\n        uint256 newValue = _clearDigits(value, _beginIndex, _endIndex);\\n        pixelExtensions[_tokenId] = newValue;\\n        emit Detached(_owner, _tokenId, _extensionId, value, newValue);\\n    }\\n\\n    function _spendINT(\\n        address _owner,\\n        uint128 _amount,\\n        address _contributer,\\n        uint16 _contributerCut\\n    ) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        uint128 contributerAmount;\\n        uint128 daoAmount;\\n        unchecked {\\n            if (_contributerCut > 0) {\\n                contributerAmount = _amount / _contributerCut;\\n                daoAmount = _amount - contributerAmount;\\n            } else {\\n                daoAmount = _amount;\\n            }\\n        }\\n\\n        if (daoAmount > 0) {\\n            IINT(INTAddress).transferFrom(_owner, DAOAddress, daoAmount);\\n        }\\n\\n        if (contributerAmount > 0) {\\n            IINT(INTAddress).transferFrom(\\n                _owner,\\n                _contributer,\\n                contributerAmount\\n            );\\n        }\\n\\n        emit INTSpent(_owner, _contributer, contributerAmount, daoAmount);\\n    }\\n\\n    function _costAndSupplyOfVariant(\\n        uint256 _extensionId,\\n        Variant memory _variant\\n    ) internal view returns (uint128, uint128) {\\n        uint128 _cost = _variant.cost;\\n        uint128 _supply = _variant.supply;\\n\\n        if (_variant.categoryId > 0) {\\n            Category memory _category = categories[_extensionId][\\n                _variant.categoryId\\n            ];\\n            _cost = _category.cost;\\n            _supply = _category.supply;\\n        }\\n\\n        return (_cost, _supply);\\n    }\\n\\n    function _shouldConsumeCollectionToken(\\n        address _owner,\\n        uint256 _extensionId,\\n        uint256 _variantId,\\n        bool _useCollectionTokenId,\\n        uint256 _collectionTokenId,\\n        Variant memory _variant\\n    ) internal view returns (bool) {\\n        if (_variant.isFreeForCollection && _useCollectionTokenId) {\\n            if (\\n                !usedCollectionTokens[_extensionId][_variantId][\\n                    _collectionTokenId\\n                ] &&\\n                IERC721(_variant.collection).ownerOf(_collectionTokenId) ==\\n                _owner\\n            ) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _isSpecialPixel(uint256 tokenId) internal pure returns (bool) {\\n        if (\\n            tokenId == 5061 ||\\n            tokenId == 5060 ||\\n            tokenId == 5059 ||\\n            tokenId == 5058 ||\\n            tokenId == 5057\\n        ) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    // EVENTS\\n\\n    function emitExtensionChangeEvent(\\n        uint256 extensionId,\\n        Extension memory extension\\n    ) internal {\\n        emit ExtensionChanged(\\n            extensionId,\\n            extension.operator,\\n            extension.isEnabled,\\n            extension.isSticky,\\n            extension.beginIndex,\\n            extension.endIndex\\n        );\\n    }\\n\\n    function emitVariantChangeEvent(\\n        uint256 extensionId,\\n        uint256 variantId,\\n        Variant memory variant\\n    ) internal {\\n        emit VariantChanged(\\n            extensionId,\\n            variantId,\\n            variant.isOperatorExecution,\\n            variant.isFreeForCollection,\\n            variant.isEnabled,\\n            variant.isDisabledForSpecialPixels,\\n            variant.contributerCut,\\n            variant.cost,\\n            variant.supply,\\n            variant.count,\\n            variant.contributer,\\n            variant.collection\\n        );\\n    }\\n\\n    function emitCategoryChangeEvent(\\n        uint256 extensionId,\\n        uint256 categoryId,\\n        Category memory category\\n    ) internal {\\n        emit CategoryChanged(\\n            extensionId,\\n            categoryId,\\n            category.cost,\\n            category.supply\\n        );\\n    }\\n\\n    event Extended(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        uint256 extensionId,\\n        uint256 previousExtension,\\n        uint256 newExtension\\n    );\\n\\n    event Detached(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        uint256 extensionId,\\n        uint256 previousExtension,\\n        uint256 newExtension\\n    );\\n\\n    event ExtensionChanged(\\n        uint256 indexed extensionId,\\n        address operator,\\n        bool isEnabled,\\n        bool isSticky,\\n        uint8 beginIndex,\\n        uint8 endIndex\\n    );\\n\\n    event VariantChanged(\\n        uint256 indexed extensionId,\\n        uint256 indexed variantId,\\n        bool isOperatorExecution,\\n        bool isFreeForCollection,\\n        bool isEnabled,\\n        bool isDisabledForSpecialPixels,\\n        uint16 contributerCut,\\n        uint128 cost,\\n        uint128 supply,\\n        uint128 count,\\n        address contributer,\\n        address collection\\n    );\\n\\n    event CategoryChanged(\\n        uint256 indexed extensionId,\\n        uint256 indexed categoryId,\\n        uint128 cost,\\n        uint128 supply\\n    );\\n\\n    event VariantTransferred(\\n        uint256 indexed extensionId,\\n        uint256 indexed variantId,\\n        uint256 fromTokenId,\\n        uint256 toTokenId\\n    );\\n\\n    event INTSpent(\\n        address indexed owner,\\n        address contributer,\\n        uint256 contributerAmount,\\n        uint256 daoAmount\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/extensions/core/ThePixelsDigitsUtility.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// ______  __  __   ______       _____    __  __   _____    ______\\n// /\\\\__  _\\\\/\\\\ \\\\_\\\\ \\\\ /\\\\  ___\\\\     /\\\\  __-. /\\\\ \\\\/\\\\ \\\\ /\\\\  __-. /\\\\  ___\\\\\\n// \\\\/_/\\\\ \\\\/\\\\ \\\\  __ \\\\\\\\ \\\\  __\\\\     \\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\ \\\\_\\\\ \\\\\\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\  __\\\\\\n//   \\\\ \\\\_\\\\ \\\\ \\\\_\\\\ \\\\_\\\\\\\\ \\\\_____\\\\    \\\\ \\\\____- \\\\ \\\\_____\\\\\\\\ \\\\____- \\\\ \\\\_____\\\\\\n//    \\\\/_/  \\\\/_/\\\\/_/ \\\\/_____/     \\\\/____/  \\\\/_____/ \\\\/____/  \\\\/_____/\\n//\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract ThePixelsDigitsUtility {\\n    using Strings for uint256;\\n\\n    function _clearDigits(\\n        uint256 value,\\n        uint256 beginIndex,\\n        uint256 endIndex\\n    ) internal pure returns (uint256) {\\n        require(endIndex > beginIndex, \\\"Indexes are invalid\\\");\\n        uint256 _replaceValue = uint256(10**(endIndex - beginIndex - 1));\\n        return _replacedDigits(\\n            value, \\n            beginIndex, \\n            endIndex, \\n            _replaceValue\\n        );\\n    }\\n\\n    function _replacedDigits(\\n        uint256 value,\\n        uint256 beginIndex,\\n        uint256 endIndex,\\n        uint256 replaceValue\\n    ) internal pure returns (uint256) {\\n        require(endIndex > beginIndex, \\\"Indexes are invalid\\\");\\n\\n        unchecked {\\n            uint256 length = _digitOf(value);\\n            uint256 maxReplaceValue = uint256(10**(endIndex - beginIndex) - 1);\\n            require(\\n                replaceValue <= maxReplaceValue,\\n                \\\"Replace value is too big\\\"\\n            );\\n\\n            uint256 minReplaceValue = uint256(10**(endIndex - beginIndex - 1));\\n            require(\\n                replaceValue >= minReplaceValue,\\n                \\\"Replace value is too small\\\"\\n            );\\n\\n            if (value == 0) {\\n                value = 1;\\n            }\\n\\n            if (beginIndex < length && endIndex < length) {\\n                uint256 left = (value / (10**(length - beginIndex))) *\\n                    (10**(length - beginIndex));\\n                uint256 middle = replaceValue * (10**(length - endIndex));\\n                uint256 leftFromEndIndex = uint256(\\n                    (value / (10**(length - endIndex))) *\\n                        (10**(length - endIndex))\\n                );\\n                uint256 right = value - leftFromEndIndex;\\n                return left + middle + right;\\n            } else if (beginIndex >= length && endIndex >= length) {\\n                uint256 left = value * (10**(endIndex - length));\\n                return left + replaceValue;\\n            } else if (beginIndex < length && endIndex >= length) {\\n                uint256 left = (value / (10**(length - beginIndex))) *\\n                    (10**(endIndex - beginIndex));\\n                return left + replaceValue;\\n            }\\n        }\\n\\n        return value;\\n    }\\n\\n    function _digitsAt(\\n        uint256 value,\\n        uint256 beginIndex,\\n        uint256 endIndex\\n    ) internal pure returns (uint256) {\\n        require(endIndex > beginIndex, \\\"Indexes are invalid\\\");\\n\\n        unchecked {\\n            uint256 length = _digitOf(value);\\n            if (beginIndex < length && endIndex <= length) {\\n                uint256 left = (value / (10**(length - beginIndex))) *\\n                    (10**(length - beginIndex));\\n                uint256 valueWithoutLeft = value - left;\\n                return valueWithoutLeft / (10**(length - endIndex));\\n            } else if (beginIndex >= length && endIndex >= length) {\\n                return 0;\\n            }\\n        }\\n\\n        return value;\\n    }\\n\\n    function _digitOf(uint256 value) internal pure returns (uint256) {\\n        return bytes(value.toString()).length;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/interfaces/IINT.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n// ______  __  __   ______       _____    __  __   _____    ______\\n// /\\\\__  _\\\\/\\\\ \\\\_\\\\ \\\\ /\\\\  ___\\\\     /\\\\  __-. /\\\\ \\\\/\\\\ \\\\ /\\\\  __-. /\\\\  ___\\\\\\n// \\\\/_/\\\\ \\\\/\\\\ \\\\  __ \\\\\\\\ \\\\  __\\\\     \\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\ \\\\_\\\\ \\\\\\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\  __\\\\\\n//   \\\\ \\\\_\\\\ \\\\ \\\\_\\\\ \\\\_\\\\\\\\ \\\\_____\\\\    \\\\ \\\\____- \\\\ \\\\_____\\\\\\\\ \\\\____- \\\\ \\\\_____\\\\\\n//    \\\\/_/  \\\\/_/\\\\/_/ \\\\/_____/     \\\\/____/  \\\\/_____/ \\\\/____/  \\\\/_____/\\n//\\n\\ninterface IINT {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/common/interfaces/IThePixelsIncExtensionStorageV2.sol\": {\r\n      \"content\": \"// pragma solidity ^0.8.0;\\n// SPDX-License-Identifier: MIT\\n\\n// ______  __  __   ______       _____    __  __   _____    ______\\n// /\\\\__  _\\\\/\\\\ \\\\_\\\\ \\\\ /\\\\  ___\\\\     /\\\\  __-. /\\\\ \\\\/\\\\ \\\\ /\\\\  __-. /\\\\  ___\\\\\\n// \\\\/_/\\\\ \\\\/\\\\ \\\\  __ \\\\\\\\ \\\\  __\\\\     \\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\ \\\\_\\\\ \\\\\\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\  __\\\\\\n//   \\\\ \\\\_\\\\ \\\\ \\\\_\\\\ \\\\_\\\\\\\\ \\\\_____\\\\    \\\\ \\\\____- \\\\ \\\\_____\\\\\\\\ \\\\____- \\\\ \\\\_____\\\\\\n//    \\\\/_/  \\\\/_/\\\\/_/ \\\\/_____/     \\\\/____/  \\\\/_____/ \\\\/____/  \\\\/_____/\\n//\\n\\npragma solidity ^0.8.0;\\n\\ninterface IThePixelsIncExtensionStorageV2 {\\n    struct Variant {\\n        bool isOperatorExecution;\\n        bool isFreeForCollection;\\n        bool isEnabled;\\n        bool isDisabledForSpecialPixels;\\n        uint16 contributerCut;\\n        uint128 cost;\\n        uint128 supply;\\n        uint128 count;\\n        uint128 categoryId;\\n        address contributer;\\n        address collection;\\n    }\\n\\n    struct Category {\\n        uint128 cost;\\n        uint128 supply;\\n    }\\n\\n    struct VariantStatus {\\n        bool isAlreadyClaimed;\\n        uint128 cost;\\n        uint128 supply;\\n    }\\n\\n    function extendWithVariant(\\n        address owner,\\n        uint256 extensionId,\\n        uint256 tokenId,\\n        uint256 variantId,\\n        bool useCollectionTokenId,\\n        uint256 collectionTokenId\\n    ) external;\\n\\n    function extendMultipleWithVariants(\\n        address owner,\\n        uint256 extensionId,\\n        uint256[] memory tokenIds,\\n        uint256[] memory variantIds,\\n        bool[] memory useCollectionTokenId,\\n        uint256[] memory collectionTokenIds\\n    ) external;\\n\\n    function detachVariant(\\n        address owner,\\n        uint256 extensionId,\\n        uint256 tokenId\\n    ) external;\\n\\n    function detachVariants(\\n        address owner,\\n        uint256 extensionId,\\n        uint256[] memory tokenIds\\n    ) external;\\n\\n    function variantDetail(\\n        address owner,\\n        uint256 extensionId,\\n        uint256 tokenId,\\n        uint256 variantId,\\n        bool useCollectionTokenId,\\n        uint256 collectionTokenId\\n    ) external view returns (Variant memory, VariantStatus memory);\\n\\n    function variantDetails(\\n        address owner,\\n        uint256 extensionId,\\n        uint256[] memory tokenIds,\\n        uint256[] memory variantIds,\\n        bool[] memory useCollectionTokenIds,\\n        uint256[] memory collectionTokenIds\\n    ) external view returns (Variant[] memory, VariantStatus[] memory);\\n\\n    function variantsOfExtension(\\n        uint256 extensionId,\\n        uint256[] memory variantIds\\n    ) external view returns (Variant[] memory);\\n\\n    function transferExtensionVariant(\\n        address owner,\\n        uint256 extensionId,\\n        uint256 variantId,\\n        uint256 fromTokenId,\\n        uint256 toTokenId\\n    ) external;\\n\\n    function pixelExtensions(uint256 tokenId) external view returns (uint256);\\n\\n    function balanceOfToken(\\n        uint256 extensionId,\\n        uint256 tokenId,\\n        uint256[] memory variantIds\\n    ) external view returns (uint256);\\n\\n    function currentVariantIdOf(uint256 extensionId, uint256 tokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function currentVariantIdsOf(uint256 extensionId, uint256[] memory tokenIds)\\n        external\\n        view\\n        returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/common/interfaces/ICoreRewarder.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n// ______  __  __   ______       _____    __  __   _____    ______\\n// /\\\\__  _\\\\/\\\\ \\\\_\\\\ \\\\ /\\\\  ___\\\\     /\\\\  __-. /\\\\ \\\\/\\\\ \\\\ /\\\\  __-. /\\\\  ___\\\\\\n// \\\\/_/\\\\ \\\\/\\\\ \\\\  __ \\\\\\\\ \\\\  __\\\\     \\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\ \\\\_\\\\ \\\\\\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\  __\\\\\\n//   \\\\ \\\\_\\\\ \\\\ \\\\_\\\\ \\\\_\\\\\\\\ \\\\_____\\\\    \\\\ \\\\____- \\\\ \\\\_____\\\\\\\\ \\\\____- \\\\ \\\\_____\\\\\\n//    \\\\/_/  \\\\/_/\\\\/_/ \\\\/_____/     \\\\/____/  \\\\/_____/ \\\\/____/  \\\\/_____/\\n//\\n\\ninterface ICoreRewarder {\\n    function stake(\\n        uint256[] calldata tokenIds\\n    ) external;\\n\\n    function withdraw(\\n        uint256[] calldata tokenIds\\n    ) external;\\n\\n    function claim(uint256[] calldata tokenIds) external;\\n\\n    function earned(uint256[] memory tokenIds)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function lastClaimTimesOfTokens(uint256[] memory tokenIds)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isOwner(address owner, uint256 tokenId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function tokensOfOwner(address _owner)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function stakedTokensOfOwner(address owner)\\n        external\\n        view\\n        returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_INTAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DAOAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewarderAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"categoryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"cost\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"supply\",\"type\":\"uint128\"}],\"name\":\"CategoryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousExtension\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExtension\",\"type\":\"uint256\"}],\"name\":\"Detached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousExtension\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExtension\",\"type\":\"uint256\"}],\"name\":\"Extended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSticky\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"beginIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"endIndex\",\"type\":\"uint8\"}],\"name\":\"ExtensionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contributer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contributerAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daoAmount\",\"type\":\"uint256\"}],\"name\":\"INTSpent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"variantId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isOperatorExecution\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFreeForCollection\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDisabledForSpecialPixels\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"contributerCut\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"cost\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"supply\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"count\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contributer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"VariantChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"variantId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"}],\"name\":\"VariantTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAOAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"variantIds\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"categories\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"cost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"supply\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimedPixelVariants\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"currentVariantIdOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"currentVariantIdsOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"detachVariant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"detachVariants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"enableExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variantId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"enableVariant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"variantIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"useCollectionTokenIds\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collectionTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"extendMultipleWithVariants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variantId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useCollectionTokenId\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collectionTokenId\",\"type\":\"uint256\"}],\"name\":\"extendWithVariant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extensionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"extensions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSticky\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"beginIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"endIndex\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pixelExtensions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewarderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"categoryIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"cost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"supply\",\"type\":\"uint128\"}],\"internalType\":\"struct IThePixelsIncExtensionStorageV2.Category[]\",\"name\":\"_categories\",\"type\":\"tuple[]\"}],\"name\":\"setCategories\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"categoryId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"cost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"supply\",\"type\":\"uint128\"}],\"internalType\":\"struct IThePixelsIncExtensionStorageV2.Category\",\"name\":\"category\",\"type\":\"tuple\"}],\"name\":\"setCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"extensionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"variantIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"isClaimeds\",\"type\":\"bool[]\"}],\"name\":\"setClaimedPixelVariants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_DAOAddress\",\"type\":\"address\"}],\"name\":\"setDAOAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSticky\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"beginIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"endIndex\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"internalType\":\"struct ThePixelsIncExtensionStorageV2.Extension\",\"name\":\"extension\",\"type\":\"tuple\"}],\"name\":\"setExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"extensionIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSticky\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"beginIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"endIndex\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"internalType\":\"struct ThePixelsIncExtensionStorageV2.Extension[]\",\"name\":\"_extensions\",\"type\":\"tuple[]\"}],\"name\":\"setExtensions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isLive\",\"type\":\"bool\"}],\"name\":\"setIsLive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_pixelExtensions\",\"type\":\"uint256[]\"}],\"name\":\"setPixelExtensions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewarderAddress\",\"type\":\"address\"}],\"name\":\"setRewarderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variantId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOperatorExecution\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFreeForCollection\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDisabledForSpecialPixels\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"contributerCut\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"cost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"supply\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"count\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"categoryId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"contributer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"internalType\":\"struct IThePixelsIncExtensionStorageV2.Variant\",\"name\":\"variant\",\"type\":\"tuple\"}],\"name\":\"setVariant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"variantIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOperatorExecution\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFreeForCollection\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDisabledForSpecialPixels\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"contributerCut\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"cost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"supply\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"count\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"categoryId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"contributer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"internalType\":\"struct IThePixelsIncExtensionStorageV2.Variant[]\",\"name\":\"_variants\",\"type\":\"tuple[]\"}],\"name\":\"setVariants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variantId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"}],\"name\":\"transferExtensionVariant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedCollectionTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variantId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useCollectionTokenId\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collectionTokenId\",\"type\":\"uint256\"}],\"name\":\"variantDetail\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOperatorExecution\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFreeForCollection\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDisabledForSpecialPixels\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"contributerCut\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"cost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"supply\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"count\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"categoryId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"contributer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"internalType\":\"struct IThePixelsIncExtensionStorageV2.Variant\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isAlreadyClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"cost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"supply\",\"type\":\"uint128\"}],\"internalType\":\"struct IThePixelsIncExtensionStorageV2.VariantStatus\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"variantIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"useCollectionTokenIds\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collectionTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"variantDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOperatorExecution\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFreeForCollection\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDisabledForSpecialPixels\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"contributerCut\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"cost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"supply\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"count\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"categoryId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"contributer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"internalType\":\"struct IThePixelsIncExtensionStorageV2.Variant[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isAlreadyClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"cost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"supply\",\"type\":\"uint128\"}],\"internalType\":\"struct IThePixelsIncExtensionStorageV2.VariantStatus[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"variants\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperatorExecution\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFreeForCollection\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDisabledForSpecialPixels\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"contributerCut\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"cost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"supply\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"count\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"categoryId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"contributer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"variantIds\",\"type\":\"uint256[]\"}],\"name\":\"variantsOfExtension\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOperatorExecution\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFreeForCollection\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDisabledForSpecialPixels\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"contributerCut\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"cost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"supply\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"count\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"categoryId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"contributer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"internalType\":\"struct IThePixelsIncExtensionStorageV2.Variant[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ThePixelsIncExtensionStorageV2", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "000000000000000000000000f011dac919a751dff6343553aa031b9f8e95300f000000000000000000000000c8d797d2bdb88ea365b04bdbd43f5a748723c2920000000000000000000000002228b2a09ed31aedbf28172e79dc89e681504e98", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}