{"SourceCode": "# @version 0.2.4\r\n\"\"\"\r\n@title Simple Vesting Escrow\r\n@author Curve Finance\r\n@license MIT\r\n@notice Vests `ERC20CRV` tokens for a single address\r\n@dev Intended to be deployed many times via `VotingEscrowFactory`\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\nevent Fund:\r\n    recipient: indexed(address)\r\n    amount: uint256\r\n\r\nevent Claim:\r\n    recipient: indexed(address)\r\n    claimed: uint256\r\n\r\nevent ToggleDisable:\r\n    recipient: address\r\n    disabled: bool\r\n\r\nevent CommitOwnership:\r\n    admin: address\r\n\r\nevent ApplyOwnership:\r\n    admin: address\r\n\r\n\r\ntoken: public(address)\r\nstart_time: public(uint256)\r\nend_time: public(uint256)\r\ninitial_locked: public(HashMap[address, uint256])\r\ntotal_claimed: public(HashMap[address, uint256])\r\n\r\ninitial_locked_supply: public(uint256)\r\n\r\ncan_disable: public(bool)\r\ndisabled_at: public(HashMap[address, uint256])\r\n\r\nadmin: public(address)\r\nfuture_admin: public(address)\r\n\r\n@external\r\ndef __init__():\r\n    # ensure that the original contract cannot be initialized\r\n    self.admin = msg.sender\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef initialize(\r\n    _admin: address,\r\n    _token: address,\r\n    _recipient: address,\r\n    _amount: uint256,\r\n    _start_time: uint256,\r\n    _end_time: uint256,\r\n    _can_disable: bool\r\n) -> bool:\r\n    \"\"\"\r\n    @notice Initialize the contract.\r\n    @dev This function is seperate from `__init__` because of the factory pattern\r\n         used in `VestingEscrowFactory.deploy_vesting_contract`. It may be called\r\n         once per deployment.\r\n    @param _admin Admin address\r\n    @param _token Address of the ERC20 token being distributed\r\n    @param _recipient Address to vest tokens for\r\n    @param _amount Amount of tokens being vested for `_recipient`\r\n    @param _start_time Epoch time at which token distribution starts\r\n    @param _end_time Time until everything should be vested\r\n    @param _can_disable Can admin disable recipient's ability to claim tokens?\r\n    \"\"\"\r\n    assert self.admin == ZERO_ADDRESS  # dev: can only initialize once\r\n\r\n    self.token = _token\r\n    self.admin = _admin\r\n    self.start_time = _start_time\r\n    self.end_time = _end_time\r\n    self.can_disable = _can_disable\r\n\r\n    assert ERC20(_token).transferFrom(msg.sender, self, _amount)\r\n\r\n    self.initial_locked[_recipient] = _amount\r\n    self.initial_locked_supply = _amount\r\n    log Fund(_recipient, _amount)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef toggle_disable(_recipient: address):\r\n    \"\"\"\r\n    @notice Disable or re-enable a vested address's ability to claim tokens\r\n    @dev When disabled, the address is only unable to claim tokens which are still\r\n         locked at the time of this call. It is not possible to block the claim\r\n         of tokens which have already vested.\r\n    @param _recipient Address to disable or enable\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin only\r\n    assert self.can_disable, \"Cannot disable\"\r\n\r\n    is_disabled: bool = self.disabled_at[_recipient] == 0\r\n    if is_disabled:\r\n        self.disabled_at[_recipient] = block.timestamp\r\n    else:\r\n        self.disabled_at[_recipient] = 0\r\n\r\n    log ToggleDisable(_recipient, is_disabled)\r\n\r\n\r\n@external\r\ndef disable_can_disable():\r\n    \"\"\"\r\n    @notice Disable the ability to call `toggle_disable`\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin only\r\n    self.can_disable = False\r\n\r\n\r\n@internal\r\n@view\r\ndef _total_vested_of(_recipient: address, _time: uint256 = block.timestamp) -> uint256:\r\n    start: uint256 = self.start_time\r\n    end: uint256 = self.end_time\r\n    locked: uint256 = self.initial_locked[_recipient]\r\n    if _time < start:\r\n        return 0\r\n    return min(locked * (_time - start) / (end - start), locked)\r\n\r\n\r\n@internal\r\n@view\r\ndef _total_vested() -> uint256:\r\n    start: uint256 = self.start_time\r\n    end: uint256 = self.end_time\r\n    locked: uint256 = self.initial_locked_supply\r\n    if block.timestamp < start:\r\n        return 0\r\n    return min(locked * (block.timestamp - start) / (end - start), locked)\r\n\r\n\r\n@external\r\n@view\r\ndef vestedSupply() -> uint256:\r\n    \"\"\"\r\n    @notice Get the total number of tokens which have vested, that are held\r\n            by this contract\r\n    \"\"\"\r\n    return self._total_vested()\r\n\r\n\r\n@external\r\n@view\r\ndef lockedSupply() -> uint256:\r\n    \"\"\"\r\n    @notice Get the total number of tokens which are still locked\r\n            (have not yet vested)\r\n    \"\"\"\r\n    return self.initial_locked_supply - self._total_vested()\r\n\r\n\r\n@external\r\n@view\r\ndef vestedOf(_recipient: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of tokens which have vested for a given address\r\n    @param _recipient address to check\r\n    \"\"\"\r\n    return self._total_vested_of(_recipient)\r\n\r\n\r\n@external\r\n@view\r\ndef balanceOf(_recipient: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of unclaimed, vested tokens for a given address\r\n    @param _recipient address to check\r\n    \"\"\"\r\n    return self._total_vested_of(_recipient) - self.total_claimed[_recipient]\r\n\r\n\r\n@external\r\n@view\r\ndef lockedOf(_recipient: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of locked tokens for a given address\r\n    @param _recipient address to check\r\n    \"\"\"\r\n    return self.initial_locked[_recipient] - self._total_vested_of(_recipient)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef claim(addr: address = msg.sender):\r\n    \"\"\"\r\n    @notice Claim tokens which have vested\r\n    @param addr Address to claim tokens for\r\n    \"\"\"\r\n    t: uint256 = self.disabled_at[addr]\r\n    if t == 0:\r\n        t = block.timestamp\r\n    claimable: uint256 = self._total_vested_of(addr, t) - self.total_claimed[addr]\r\n    self.total_claimed[addr] += claimable\r\n    assert ERC20(self.token).transfer(addr, claimable)\r\n\r\n    log Claim(addr, claimable)\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(addr: address) -> bool:\r\n    \"\"\"\r\n    @notice Transfer ownership of GaugeController to `addr`\r\n    @param addr Address to have ownership transferred to\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin only\r\n    self.future_admin = addr\r\n    log CommitOwnership(addr)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef apply_transfer_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Apply pending ownership transfer\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin only\r\n    _admin: address = self.future_admin\r\n    assert _admin != ZERO_ADDRESS  # dev: admin not set\r\n    self.admin = _admin\r\n    log ApplyOwnership(_admin)\r\n\r\n    return True", "ABI": "[{\"name\":\"Fund\",\"inputs\":[{\"type\":\"address\",\"name\":\"recipient\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"amount\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Claim\",\"inputs\":[{\"type\":\"address\",\"name\":\"recipient\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"claimed\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ToggleDisable\",\"inputs\":[{\"type\":\"address\",\"name\":\"recipient\",\"indexed\":false},{\"type\":\"bool\",\"name\":\"disabled\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"CommitOwnership\",\"inputs\":[{\"type\":\"address\",\"name\":\"admin\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ApplyOwnership\",\"inputs\":[{\"type\":\"address\",\"name\":\"admin\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"initialize\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_admin\"},{\"type\":\"address\",\"name\":\"_token\"},{\"type\":\"address\",\"name\":\"_recipient\"},{\"type\":\"uint256\",\"name\":\"_amount\"},{\"type\":\"uint256\",\"name\":\"_start_time\"},{\"type\":\"uint256\",\"name\":\"_end_time\"},{\"type\":\"bool\",\"name\":\"_can_disable\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":325328},{\"name\":\"toggle_disable\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_recipient\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":40250},{\"name\":\"disable_can_disable\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":21265},{\"name\":\"vestedSupply\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":4348},{\"name\":\"lockedSupply\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":5345},{\"name\":\"vestedOf\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_recipient\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":5043},{\"name\":\"balanceOf\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_recipient\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":6155},{\"name\":\"lockedOf\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_recipient\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":6185},{\"name\":\"claim\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"claim\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"addr\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"commit_transfer_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"addr\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":37972},{\"name\":\"apply_transfer_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":38872},{\"name\":\"token\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1541},{\"name\":\"start_time\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1571},{\"name\":\"end_time\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1601},{\"name\":\"initial_locked\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1785},{\"name\":\"total_claimed\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1815},{\"name\":\"initial_locked_supply\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1691},{\"name\":\"can_disable\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1721},{\"name\":\"disabled_at\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1905},{\"name\":\"admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1781},{\"name\":\"future_admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1811}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.2.4", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}