{"SourceCode": "pragma solidity ^0.8.18;\r\n// SPDX-License-Identifier: MIT\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\n\r\n\r\n\r\ncontract RevShare {\r\n    \r\n    IERC20 token;\r\n    \r\n    mapping(address => uint)  balances;\r\n    \r\n    constructor(address _token)   {\r\n        token = IERC20(_token);\r\n    }\r\n    \r\n    function distribute(address payable[] memory recipients) public payable {\r\n        uint len = recipients.length;\r\n        uint totalReward = msg.value;\r\n        uint total;\r\n        \r\n        for (uint256 i = 0; i < len; i++) {\r\n            uint bal = token.balanceOf(recipients[i]);\r\n            balances[recipients[i]] = bal;\r\n            total += bal;\r\n        }\r\n\r\n        \r\n        for (uint256 i = 0; i < len; i++) {\r\n         recipients[i].transfer(balances[recipients[i]] *  totalReward /total );\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "RevShare", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dc5a9a89e31651d60e9a1e6feb767dc9feea763f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://be8164a8e23f0cac657b67619916f1cb2bab7f0e29f5d0ef02823e7e03ca3380"}