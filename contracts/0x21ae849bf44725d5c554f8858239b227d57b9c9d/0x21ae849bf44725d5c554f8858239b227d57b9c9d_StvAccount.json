{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/StvAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport {Errors} from \\\"src/libraries/Errors.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IVault} from \\\"src/interfaces/IVault.sol\\\";\\nimport {IOperator} from \\\"src/storage/interfaces/IOperator.sol\\\";\\n\\n/// @title StvAccount\\n/// @notice Contract which is cloned and deployed for every stv created by a `manager` through `Vault` contract\\ncontract StvAccount {\\n    using SafeERC20 for IERC20;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        STATE VARIABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice address of the operator contract\\n    address private immutable OPERATOR;\\n    /// @notice info of the stv\\n    IVault.StvInfo public stvInfo;\\n    /// @notice balances of the stv\\n    IVault.StvBalance public stvBalance;\\n    /// @notice info of the investors who deposited into the stv\\n    mapping(address => IVault.InvestorInfo) public investorInfo;\\n    /// @notice array of investors\\n    address[] public investors;\\n    /// @notice total received after opening a spot position\\n    mapping(address => uint96) public totalTradeTokenReceivedAfterOpen;\\n    /// @notice total tradeToken used for closing a spot position\\n    mapping(address => uint96) public totalTradeTokenUsedForClose;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                       CONSTRUCTOR/MODIFIERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _operator) {\\n        OPERATOR = _operator;\\n    }\\n\\n    modifier onlyVault() {\\n        address vault = IOperator(OPERATOR).getAddress(\\\"VAULT\\\");\\n        if (msg.sender != vault) revert Errors.NoAccess();\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        EXTERNAL FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to execute trades on different ddexes\\n    /// @dev can only be called by a plugin\\n    /// @param adapter address of the contract\\n    /// @param data calldata\\n    function execute(address adapter, bytes calldata data, uint256 ethToSend) external payable returns (bytes memory) {\\n        bool isPlugin = IOperator(OPERATOR).getPlugin(msg.sender);\\n        if (!isPlugin) revert Errors.NoAccess();\\n        (bool success, bytes memory returnData) = adapter.call{value: ethToSend}(data);\\n        if (!success) revert Errors.CallFailed(returnData);\\n        return returnData;\\n    }\\n\\n    /// @notice updates the state `stvInfo`\\n    /// @dev can only be called by the `Vault` contract\\n    /// @param stv StvInfo\\n    function createStv(IVault.StvInfo memory stv) external onlyVault {\\n        stvInfo = stv;\\n    }\\n\\n    /// @notice updates `totalRaised` and the `investorInfo`\\n    /// @dev can only be called by the `Vault` contract\\n    /// @param investorAccount address of the investor's Account contract\\n    /// @param amount amount deposited into the stv\\n    /// @param isFirstDeposit bool to check if its the first time deposit by the investor\\n    function deposit(address investorAccount, uint96 amount, bool isFirstDeposit) external onlyVault {\\n        if (isFirstDeposit) investors.push(investorAccount);\\n        stvBalance.totalRaised += amount;\\n        investorInfo[investorAccount].depositAmount += amount;\\n    }\\n\\n    /// @notice updates `status` of the stv\\n    /// @dev can only be called by the `Vault` contract\\n    function liquidate() external onlyVault {\\n        stvInfo.status = IVault.StvStatus.LIQUIDATED;\\n    }\\n\\n    /// @notice updates state according to increase or decrease trade\\n    /// @dev can only be called by the `Vault` contract\\n    /// @param amount amount of tokens used to increase/decrease position\\n    /// @param tradeToken address of the token used for spot execution\\n    /// @param totalReceived tokens received after the position is executed\\n    /// @param isOpen bool to check if its an increase or a decrease trade\\n    function execute(uint96 amount, address tradeToken, uint96 totalReceived, bool isOpen) external onlyVault {\\n        if (isOpen) {\\n            stvInfo.status = IVault.StvStatus.OPEN;\\n            if (tradeToken != address(0)) totalTradeTokenReceivedAfterOpen[tradeToken] += totalReceived;\\n        } else {\\n            if (tradeToken != address(0)) totalTradeTokenUsedForClose[tradeToken] += amount;\\n        }\\n    }\\n\\n    /// @notice transfers all the tokens to the respective investors\\n    /// @dev can only be called by the `Vault` contract\\n    /// @param totalRemainingAfterDistribute amount of tokens remaining after the stv is closed\\n    /// @param mFee manager fees\\n    /// @param pFee performance fees\\n    function distribute(uint96 totalRemainingAfterDistribute, uint96 mFee, uint96 pFee) external onlyVault {\\n        address defaultStableCoin = IOperator(OPERATOR).getAddress(\\\"DEFAULTSTABLECOIN\\\");\\n\\n        stvInfo.status = IVault.StvStatus.DISTRIBUTED;\\n        stvBalance.totalRemainingAfterDistribute = totalRemainingAfterDistribute;\\n\\n        if (mFee > 0 || pFee > 0) {\\n            IVault.StvInfo memory stv = stvInfo;\\n            address managerAccount = IOperator(OPERATOR).getTraderAccount(stv.manager);\\n            address treasury = IOperator(OPERATOR).getAddress(\\\"TREASURY\\\");\\n            IERC20(defaultStableCoin).safeTransfer(managerAccount, mFee);\\n            IERC20(defaultStableCoin).safeTransfer(treasury, pFee);\\n        }\\n\\n        uint256 maxDistributeIndex = IOperator(OPERATOR).getMaxDistributeIndex();\\n        _distribute(false, 0, maxDistributeIndex);\\n    }\\n\\n    /// @notice called if `distribute` runs out of gas\\n    /// @dev can only be called by the `Vault` contract\\n    /// @param isCancel bool to check if the stv is cancelled or closed\\n    /// @param indexFrom starting index to transfer the tokens to the investors\\n    /// @param indexTo ending index to transfer the tokens to the investors\\n    function distributeOut(bool isCancel, uint256 indexFrom, uint256 indexTo) external onlyVault {\\n        _distribute(isCancel, indexFrom, indexTo);\\n    }\\n\\n    /// @notice updates `status` of the stv\\n    /// @dev can only be called by the `Vault` contract\\n    /// @param status status of the stv\\n    function updateStatus(IVault.StvStatus status) external onlyVault {\\n        stvInfo.status = status;\\n    }\\n\\n    /// @notice cancels the stv and transfers the tokens back to the investors\\n    /// @dev can only be called by the `Vault` contract\\n    function cancel() external onlyVault {\\n        stvInfo.endTime = 0;\\n\\n        uint256 maxDistributeIndex = IOperator(OPERATOR).getMaxDistributeIndex();\\n        _distribute(true, 0, maxDistributeIndex);\\n    }\\n\\n    /// @notice get the claimableAmount after the stv is closed\\n    /// @dev can only be called by the `Vault` contract\\n    /// @param investorAccount address of the investor's Account contract\\n    function getClaimableAmountAfterDistribute(address investorAccount)\\n        external\\n        view\\n        returns (uint96 claimableAmount)\\n    {\\n        return _getClaimableAmountAfterDistribute(investorAccount);\\n    }\\n\\n    /// @notice Get all the addresses invested in this stv\\n    function getInvestors() public view returns (address[] memory) {\\n        return investors;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _getClaimableAmountAfterDistribute(address investorAccount)\\n        internal\\n        view\\n        returns (uint96 claimableAmount)\\n    {\\n        IVault.InvestorInfo memory _investorInfo = investorInfo[investorAccount];\\n        IVault.StvBalance memory _stvBalance = stvBalance;\\n\\n        if (stvInfo.status == IVault.StvStatus.DISTRIBUTED && !_investorInfo.claimed) {\\n            claimableAmount =\\n                (_stvBalance.totalRemainingAfterDistribute * _investorInfo.depositAmount) / _stvBalance.totalRaised;\\n        } else {\\n            claimableAmount = 0;\\n        }\\n    }\\n\\n    function _distribute(bool isCancel, uint256 indexFrom, uint256 indexTo) internal {\\n        uint256 maxDistributeIndex = IOperator(OPERATOR).getMaxDistributeIndex();\\n        if (indexTo - indexFrom > maxDistributeIndex) revert Errors.AboveMaxDistributeIndex();\\n\\n        address[] memory _investors = investors;\\n        if (indexTo == maxDistributeIndex && maxDistributeIndex > _investors.length) indexTo = _investors.length;\\n\\n        address defaultStableCoin = IOperator(OPERATOR).getAddress(\\\"DEFAULTSTABLECOIN\\\");\\n        uint256 i = indexFrom;\\n\\n        if (isCancel) {\\n            for (; i < indexTo;) {\\n                address investorAccount = _investors[i];\\n                IVault.InvestorInfo memory _investorInfo = investorInfo[investorAccount];\\n                uint256 transferAmount = _investorInfo.depositAmount;\\n\\n                investorInfo[investorAccount].depositAmount = 0;\\n                IERC20(defaultStableCoin).safeTransfer(investorAccount, transferAmount);\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        } else {\\n            for (; i < indexTo;) {\\n                address investorAccount = _investors[i];\\n                uint96 claimableAmount = _getClaimableAmountAfterDistribute(investorAccount);\\n                if (investorInfo[investorAccount].claimed) continue;\\n\\n                investorInfo[investorAccount].claimed = true;\\n                investorInfo[investorAccount].depositAmount = 0;\\n                investorInfo[investorAccount].claimedAmount = claimableAmount;\\n                IERC20(defaultStableCoin).safeTransfer(investorAccount, claimableAmount);\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nlibrary Errors {\\n    // Zero Errors\\n    error ZeroAmount();\\n    error ZeroAddress();\\n    error ZeroTotalRaised();\\n    error ZeroClaimableAmount();\\n\\n    // Modifier Errors\\n    error NotOwner();\\n    error NotAdmin();\\n    error CallerNotVault();\\n    error CallerNotTrade();\\n    error CallerNotVaultOwner();\\n    error CallerNotGenerate();\\n    error NoAccess();\\n    error NotPlugin();\\n\\n    // State Errors\\n    error BelowMinFundraisingPeriod();\\n    error AboveMaxFundraisingPeriod();\\n    error BelowMinLeverage();\\n    error AboveMaxLeverage();\\n    error BelowMinEndTime();\\n    error TradeTokenNotApplicable();\\n\\n    // STV errors\\n    error StvDoesNotExist();\\n    error AlreadyOpened();\\n    error MoreThanTotalRaised();\\n    error MoreThanTotalReceived();\\n    error StvNotOpen();\\n    error StvNotClose();\\n    error ClaimNotApplicable();\\n    error StvStatusMismatch();\\n\\n    // General Errors\\n    error BalanceLessThanAmount();\\n    error FundraisingPeriodEnded();\\n    error TotalRaisedMoreThanCapacity();\\n    error StillFundraising();\\n    error CommandMisMatch();\\n    error TradeCommandMisMatch();\\n    error NotInitialised();\\n    error Initialised();\\n    error LengthMismatch();\\n    error TransferFailed();\\n    error DelegateCallFailed();\\n    error CallFailed(bytes);\\n    error AccountAlreadyExists();\\n    error SwapFailed();\\n    error ExchangeDataMismatch();\\n    error AccountNotExists();\\n    error InputMismatch();\\n    error AboveMaxDistributeIndex();\\n    error BelowMinStvDepositAmount();\\n\\n    // Protocol specific errors\\n    error GmxFeesMisMatch();\\n    error UpdateOrderRequestMisMatch();\\n    error CancelOrderRequestMisMatch();\\n\\n    // Subscriptions\\n    error NotASubscriber();\\n    error AlreadySubscribed();\\n    error MoreThanLimit();\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\ninterface IVault {\\n    /// @notice Enum to describe the trading status of the vault\\n    /// @dev NOT_OPENED - Not open\\n    /// @dev OPEN - opened position\\n    /// @dev CANCELLED_WITH_ZERO_RAISE - cancelled without any raise\\n    /// @dev CANCELLED_WITH_NO_FILL - cancelled with raise but not opening a position\\n    /// @dev CANCELLED_BY_MANAGER - cancelled by the manager after raising\\n    /// @dev DISTRIBUTED - distributed fees\\n    /// @dev LIQUIDATED - liquidated position\\n    enum StvStatus {\\n        NOT_OPENED,\\n        OPEN,\\n        CANCELLED_WITH_ZERO_RAISE,\\n        CANCELLED_WITH_NO_FILL,\\n        CANCELLED_BY_MANAGER,\\n        DISTRIBUTED,\\n        LIQUIDATED\\n    }\\n\\n    struct StvInfo {\\n        address stvId;\\n        uint40 endTime;\\n        StvStatus status;\\n        address manager;\\n        uint96 capacityOfStv;\\n    }\\n\\n    struct StvBalance {\\n        uint96 totalRaised;\\n        uint96 totalRemainingAfterDistribute;\\n    }\\n\\n    struct InvestorInfo {\\n        uint96 depositAmount;\\n        uint96 claimedAmount;\\n        bool claimed;\\n    }\\n\\n    function getQ() external view returns (address);\\n    function maxFundraisingPeriod() external view returns (uint40);\\n    function distributeOut(address stvId, bool isCancel, uint256 indexFrom, uint256 indexTo) external;\\n}\\n\"\r\n    },\r\n    \"src/storage/interfaces/IOperator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\ninterface IOperator {\\n    function getMaxDistributeIndex() external view returns (uint256);\\n    function getAddress(string calldata adapter) external view returns (address);\\n    function getAddresses(string[] calldata adapters) external view returns (address[] memory);\\n    function getTraderAccount(address trader) external view returns (address);\\n    function getPlugin(address plugin) external view returns (bool);\\n    function getPlugins(address[] calldata plugins) external view returns (bool[] memory);\\n    function setAddress(string calldata adapter, address addr) external;\\n    function setAddresses(string[] calldata adapters, address[] calldata addresses) external;\\n    function setPlugin(address plugin, bool isPlugin) external;\\n    function setPlugins(address[] calldata plugins, bool[] calldata isPlugin) external;\\n    function setTraderAccount(address trader, address account) external;\\n    function getAllSubscribers(address manager) external view returns (address[] memory);\\n    function getIsSubscriber(address manager, address subscriber) external view returns (bool);\\n    function getSubscriptionAmount(address manager, address subscriber) external view returns (uint96);\\n    function getTotalSubscribedAmountPerManager(address manager) external view returns (uint96);\\n    function setSubscribe(address manager, address subscriber, uint96 maxLimit) external;\\n    function setUnsubscribe(address manager, address subscriber) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"@synthetix/=src/interfaces/synthetix/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"@openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {\r\n      \"src/Generate.sol\": {\r\n        \"Generate\": \"0x74e0ca6e1ecfb462a80f3b7ab6840013ee32c1c5\"\r\n      },\r\n      \"src/SpotTrade/SpotTrade.sol\": {\r\n        \"SpotTrade\": \"0x019dfb87e218a07091c83cec604cb2d48fbdf194\"\r\n      },\r\n      \"src/Trade.sol\": {\r\n        \"Trade\": \"0x16766913fae839da226a669c76f04b2b5e2380a0\"\r\n      },\r\n      \"src/libraries/BytesCheck.sol\": {\r\n        \"BytesCheck\": \"0x3f3a5da6dbb99dc879a8ed2ec26c831da962231f\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AboveMaxDistributeIndex\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"CallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stvId\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"endTime\",\"type\":\"uint40\"},{\"internalType\":\"enum IVault.StvStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"capacityOfStv\",\"type\":\"uint96\"}],\"internalType\":\"struct IVault.StvInfo\",\"name\":\"stv\",\"type\":\"tuple\"}],\"name\":\"createStv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investorAccount\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"isFirstDeposit\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"totalRemainingAfterDistribute\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"mFee\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"pFee\",\"type\":\"uint96\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isCancel\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"indexFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexTo\",\"type\":\"uint256\"}],\"name\":\"distributeOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"ethToSend\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"totalReceived\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investorAccount\",\"type\":\"address\"}],\"name\":\"getClaimableAmountAfterDistribute\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"claimableAmount\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInvestors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investorInfo\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"depositAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"claimedAmount\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stvBalance\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"totalRaised\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"totalRemainingAfterDistribute\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stvInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stvId\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"endTime\",\"type\":\"uint40\"},{\"internalType\":\"enum IVault.StvStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"capacityOfStv\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTradeTokenReceivedAfterOpen\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTradeTokenUsedForClose\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IVault.StvStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"updateStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StvAccount", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008ae58861e6d3d47972953dcae37c87d842683ccc", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}