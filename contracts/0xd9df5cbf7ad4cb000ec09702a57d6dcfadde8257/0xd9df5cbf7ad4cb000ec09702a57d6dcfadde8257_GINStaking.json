{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract GINStaking {\r\n\r\n    address owner;\r\n    address public tokenContract;\r\n    uint[] public profits;\r\n    uint[] public mins;\r\n    bool public lock = false;\r\n    uint decimals;\r\n\r\n    struct Stake {\r\n        address user;\r\n        uint256 amount;\r\n        uint256 since;\r\n        uint8 tier;\r\n    }\r\n\r\n    Stake[] public stakes;\r\n\r\n    mapping(address => uint256) public stakeholders;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier notLocked {\r\n        require(lock == false);\r\n        _;\r\n    }\r\n\r\n    event Staked(address indexed user, uint256 index, uint256 amount, uint8 tier, uint256 timestamp);\r\n    event Withdrawed(address indexed user, uint256 reward, uint256 index, uint256 timestamp);\r\n\r\n    constructor(address _tokenContract, uint _decimals) {\r\n        owner = msg.sender;\r\n        tokenContract = _tokenContract;\r\n        decimals = _decimals;\r\n\r\n        profits.push(15);\r\n        profits.push(20);\r\n        profits.push(25);\r\n        profits.push(30);\r\n        \r\n        mins.push(10 * 10 ** decimals);\r\n        mins.push(20 * 10 ** decimals);\r\n        mins.push(50 * 10 ** decimals);\r\n        mins.push(100 * 10 ** decimals);\r\n\r\n        stakes.push();\r\n    }\r\n    \r\n    function _addStake(address _user) private returns (uint256) {\r\n        stakes.push();\r\n        uint256 index = stakes.length - 1;\r\n        stakes[index].user = _user;\r\n        stakeholders[_user] = index;\r\n        return index;\r\n    }\r\n\r\n    function stake(uint256 _amount) public returns (bool) {\r\n        require(stakeholders[msg.sender] == 0);\r\n        require(_amount >= mins[0]);\r\n\r\n        IERC20 token = IERC20(tokenContract);\r\n        token.transferFrom(msg.sender, address(this), _amount);\r\n\r\n        return _stake(_amount);\r\n    }\r\n\r\n    function _stake(uint256 _amount) private returns (bool) {\r\n        uint256 index = _addStake(msg.sender);\r\n\r\n        stakes[index].amount = _amount;\r\n        stakes[index].since = block.timestamp;\r\n        stakes[index].tier = getStakeTier(_amount);\r\n\r\n        emit Staked(msg.sender, index, _amount, stakes[index].tier, block.timestamp);\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdrawStake() public notLocked returns (bool) {\r\n        uint256 index = stakeholders[msg.sender];\r\n\r\n        require(index > 0);\r\n        \r\n        uint256 reward = getStakeReward(index);\r\n        \r\n        stakeholders[msg.sender] = 0;\r\n        \r\n        IERC20 token = IERC20(tokenContract);\r\n        token.transfer(msg.sender, reward);\r\n\r\n        emit Withdrawed(msg.sender, reward, index, block.timestamp);\r\n\r\n        return true;\r\n    }\r\n\r\n    function getStakeTier(uint256 _amount) public view returns (uint8) {\r\n        uint8 tier;\r\n\r\n        for(uint8 q = 0; q < 4; q++) {\r\n            if(_amount >= mins[q]) {\r\n                tier = q;\r\n            }\r\n        }\r\n\r\n        return tier;\r\n    }\r\n\r\n    function getStakeReward(uint256 _index) public view returns (uint256) {\r\n        uint256 diff = block.timestamp - stakes[_index].since;\r\n        uint256 diff_date = diff / 60 / 60 / 24 / 30;\r\n\r\n        uint256 factor = diff_date * profits[stakes[_index].tier];\r\n\r\n        uint256 reward = stakes[_index].amount + stakes[_index].amount / 1000 * factor;\r\n        return reward;\r\n    }\r\n\r\n    function withdrawTokens(uint256 _amount) external onlyOwner {\r\n        IERC20 token = IERC20(tokenContract);\r\n        if(_amount == 0) {\r\n            _amount = token.balanceOf(address(this));\r\n        }\r\n        require(token.balanceOf(address(this)) >= _amount);\r\n        token.transfer(owner, _amount);\r\n    }\r\n\r\n    function setParams(address _tokenContract, uint256 _decimals) external onlyOwner {\r\n        tokenContract = _tokenContract;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    function setProfits(uint _profit1, uint _profit2, uint _profit3, uint _profit4) external onlyOwner {\r\n        profits[0] = _profit1;\r\n        profits[1] = _profit2;\r\n        profits[2] = _profit3;\r\n        profits[3] = _profit4;\r\n    }\r\n\r\n    function setMins(uint _min1, uint _min2, uint _min3, uint _min4) external onlyOwner  {\r\n        mins[0] = _min1;\r\n        mins[1] = _min2;\r\n        mins[2] = _min3;\r\n        mins[3] = _min4;\r\n    }\r\n\r\n    function setLock(bool _lock) external onlyOwner {\r\n        lock = _lock;\r\n    }\r\n\r\n    function transferOwnership(address _owner) external onlyOwner {\r\n        owner = _owner;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdrawed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getStakeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getStakeTier\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"profits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"setLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min4\",\"type\":\"uint256\"}],\"name\":\"setMins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profit1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_profit2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_profit3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_profit4\",\"type\":\"uint256\"}],\"name\":\"setProfits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeholders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"since\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GINStaking", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000003d788269cd58830c124cb683be4fb45bab3042e0000000000000000000000000000000000000000000000000000000000000012", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a3b3c09c555a38563f3027aa320617f071f40f1b48d9fc5cf7b3926e151d3a75"}