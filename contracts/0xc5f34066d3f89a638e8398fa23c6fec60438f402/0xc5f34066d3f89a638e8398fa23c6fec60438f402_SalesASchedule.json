{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma experimental ABIEncoderV2;\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/EnumerableSet.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// File: contracts/WhitelistGuard.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\nabstract contract WhitelistGuard is Ownable\r\n{\r\n\tusing EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n\tEnumerableSet.AddressSet private whitelist;\r\n\r\n\tmodifier onlyEOAorWhitelist()\r\n\t{\r\n\t\taddress _from = _msgSender();\r\n\t\trequire(tx.origin == _from || whitelist.contains(_from), \"access denied\");\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyWhitelist()\r\n\t{\r\n\t\taddress _from = _msgSender();\r\n\t\trequire(whitelist.contains(_from), \"access denied\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction addToWhitelist(address _address) external onlyOwner\r\n\t{\r\n\t\trequire(whitelist.add(_address), \"already listed\");\r\n\t}\r\n\r\n\tfunction removeFromWhitelist(address _address) external onlyOwner\r\n\t{\r\n\t\trequire(whitelist.remove(_address), \"not listed\");\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/TimeLockedAccounts.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\nabstract contract TimeLockedAccounts\r\n{\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\tstruct PeriodInfo {\r\n\t\tuint256 periodDuration;\r\n\t\tuint256 periodCount;\r\n\t\tuint256 ratePerPeriod;\r\n\t}\r\n\r\n\tstruct PlanInfo {\r\n\t\tstring description;\r\n\t\tPeriodInfo[] periods;\r\n\t\tbool enabled;\r\n\t}\r\n\r\n\tstruct AccountInfo {\r\n\t\tuint256 planId;\r\n\t\tuint256 initialBalance;\r\n\t\tuint256 currentBalance;\r\n\t\tuint256 baseTime;\r\n\t\tuint256 basePeriodIndex;\r\n\t\tuint256 basePeriodCount;\r\n\t}\r\n\r\n\taddress public immutable token;\r\n\r\n\tuint256 private planCount_;\r\n\tmapping (uint256 => PlanInfo) private planInfo_;\r\n\r\n\tmapping (address => AccountInfo) public accountInfo;\r\n\r\n\tconstructor (address _token) public\r\n\t{\r\n\t\ttoken = _token;\r\n\t}\r\n\r\n\tfunction planInfo(uint256 _planId) external view returns (string memory _description, bool _enabled)\r\n\t{\r\n\t\tPlanInfo memory _plan = planInfo_[_planId];\r\n\t\treturn (_plan.description, _plan.enabled);\r\n\t}\r\n\r\n\tfunction periodInfo(uint256 _planId, uint256 _i) external view returns (uint256 periodDuration, uint256 periodCount, uint256 ratePerPeriod)\r\n\t{\r\n\t\tPlanInfo memory _plan = planInfo_[_planId];\r\n\t\tPeriodInfo memory _period = _plan.periods[_i];\r\n\t\treturn (_period.periodDuration, _period.periodCount, _period.ratePerPeriod);\r\n\t}\r\n\r\n\tfunction available(address _receiver) external view returns (uint256 _amount)\r\n\t{\r\n\t\tuint256 _when = now;\r\n\t\t(,,,,_amount) = _available(_receiver, _when);\r\n\t\treturn _amount;\r\n\t}\r\n\r\n\tfunction available(address _receiver, uint256 _when) external view returns (uint256 _amount)\r\n\t{\r\n\t\t(,,,,_amount) = _available(_receiver, _when);\r\n\t\treturn _amount;\r\n\t}\r\n\r\n\tfunction deposit(address _receiver, uint256 _amount, uint256 _planId) public virtual\r\n\t{\r\n\t\taddress _sender = msg.sender;\r\n\t\tuint256 _baseTime = now;\r\n\t\t_deposit(_receiver, _amount, _planId, _baseTime);\r\n\t\tIERC20(token).safeTransferFrom(_sender, address(this), _amount);\r\n\t}\r\n\r\n\tfunction depositBatch(address _sender, address[] memory _receivers, uint256[] memory _amounts, uint256 _planId, uint256 _baseTime) public virtual\r\n\t{\r\n\t\trequire(_receivers.length == _amounts.length, \"length mismatch\");\r\n\t\tuint256 _totalAmount = 0;\r\n\t\tfor (uint256 _i = 0; _i < _receivers.length; _i++) {\r\n\t\t\taddress _receiver = _receivers[_i];\r\n\t\t\tuint256 _amount = _amounts[_i];\r\n\t\t\t_deposit(_receiver, _amount, _planId, _baseTime);\r\n\t\t\tuint256 _prevTotalAmount = _totalAmount;\r\n\t\t\t_totalAmount += _amount;\r\n\t\t\trequire(_totalAmount >= _prevTotalAmount, \"excessive amount\");\r\n\t\t}\r\n\t\tIERC20(token).safeTransferFrom(_sender, address(this), _totalAmount);\r\n\t}\r\n\r\n\tfunction withdraw() public virtual\r\n\t{\r\n\t\taddress _receiver = msg.sender;\r\n\t\t_withdraw(_receiver);\r\n\t}\r\n\r\n\tfunction withdrawBatch(address[] memory _receivers) public virtual\r\n\t{\r\n\t\tfor (uint256 _i = 0; _i < _receivers.length; _i++) {\r\n\t\t\t_withdraw(_receivers[_i]);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _available(address _receiver, uint256 _when) private view returns (uint256 _newCurrentBalance, uint256 _newBaseTime, uint256 _newBasePeriodIndex, uint256 _newBasePeriodCount, uint256 _amount)\r\n\t{\r\n\t\tAccountInfo memory _account = accountInfo[_receiver];\r\n\t\tuint256 _planId = _account.planId;\r\n\t\tuint256 _initialBalance = _account.initialBalance;\r\n\t\t_newCurrentBalance = _account.currentBalance;\r\n\t\t_newBaseTime = _account.baseTime;\r\n\t\t_newBasePeriodIndex = _account.basePeriodIndex;\r\n\t\t_newBasePeriodCount = _account.basePeriodCount;\r\n\t\trequire(_planId > 0, \"nonexistent\");\r\n\t\trequire(_when >= _newBaseTime, \"unavailable\");\r\n\t\tPlanInfo memory _plan = planInfo_[_planId];\r\n\t\tPeriodInfo[] memory _periods = _plan.periods;\r\n\t\tfor (; _newBasePeriodIndex < _periods.length; _newBasePeriodIndex++) {\r\n\t\t\tPeriodInfo memory _period = _periods[_newBasePeriodIndex];\r\n\t\t\tuint256 _periodDuration = _period.periodDuration;\r\n\t\t\tuint256 _periodCount = (_when - _newBaseTime) / _periodDuration;\r\n\t\t\tif (_periodCount == 0) break;\r\n\t\t\tif (_newBasePeriodCount == 0) _newBasePeriodCount = _period.periodCount;\r\n\t\t\tif (_periodCount > _newBasePeriodCount) _periodCount = _newBasePeriodCount;\r\n\t\t\tuint256 _ratePerPeriod = _period.ratePerPeriod;\r\n\t\t\tuint256 _amountPerPeriod = (_initialBalance * _ratePerPeriod) / 1e12;\r\n\t\t\t_newCurrentBalance -= _periodCount * _amountPerPeriod;\r\n\t\t\t_newBaseTime += _periodCount * _periodDuration;\r\n\t\t\t_newBasePeriodCount -= _periodCount;\r\n\t\t\tif (_newBasePeriodCount > 0) break;\r\n\t\t}\r\n\t\t_amount = _account.currentBalance - _newCurrentBalance;\r\n\t\treturn (_newCurrentBalance, _newBaseTime, _newBasePeriodIndex, _newBasePeriodCount, _amount);\r\n\t}\r\n\r\n\tfunction _deposit(address _receiver, uint256 _amount, uint256 _planId, uint256 _baseTime) private\r\n\t{\r\n\t\trequire(1 <= _amount && _amount <= uint256(-1) / 1e12, \"invalid amount\");\r\n\t\trequire(1 <= _planId && _planId <= planCount_, \"invalid plan\");\r\n\t\tPlanInfo memory _plan = planInfo_[_planId];\r\n\t\trequire(_plan.enabled, \"unavailable\");\r\n\t\tPeriodInfo[] memory _periods = _plan.periods;\r\n\t\tuint256 _sumAmount = 0;\r\n\t\tfor (uint256 _i = 0; _i < _periods.length; _i++) {\r\n\t\t\tPeriodInfo memory _period = _periods[_i];\r\n\t\t\tuint256 _periodCount = _period.periodCount;\r\n\t\t\tuint256 _ratePerPeriod = _period.ratePerPeriod;\r\n\t\t\tuint256 _amountPerPeriod = (_amount * _ratePerPeriod) / 1e12;\r\n\t\t\t_sumAmount += _periodCount * _amountPerPeriod;\r\n\t\t}\r\n\t\trequire(_sumAmount == _amount, \"invalid amount\");\r\n\t\tAccountInfo storage _account = accountInfo[_receiver];\r\n\t\trequire(_account.planId == 0, \"already exists\");\r\n\t\t_account.planId = _planId;\r\n\t\t_account.initialBalance = _amount;\r\n\t\t_account.currentBalance = _amount;\r\n\t\t_account.baseTime = _baseTime;\r\n\t\t_account.basePeriodIndex = 0;\r\n\t\t_account.basePeriodCount = 0;\r\n\t}\r\n\r\n\tfunction _withdraw(address _receiver) private\r\n\t{\r\n\t\tuint256 _when = now;\r\n\t\t(uint256 _newCurrentBalance, uint256 _newBaseTime, uint256 _newBasePeriodIndex, uint256 _newBasePeriodCount, uint256 _amount) = _available(_receiver, _when);\r\n\t\trequire(_amount > 0, \"unavailable\");\r\n\t\tAccountInfo storage _account = accountInfo[_receiver];\r\n\t\t_account.currentBalance = _newCurrentBalance;\r\n\t\t_account.baseTime = _newBaseTime;\r\n\t\t_account.basePeriodIndex = _newBasePeriodIndex;\r\n\t\t_account.basePeriodCount = _newBasePeriodCount;\r\n\t\tIERC20(token).safeTransfer(_receiver, _amount);\r\n\t}\r\n\r\n\tfunction _createPlan(string memory _description) internal returns (uint256 _planId)\r\n\t{\r\n\t\t_planId = ++planCount_;\r\n\t\tPlanInfo storage _plan = planInfo_[_planId];\r\n\t\t_plan.description = _description;\r\n\t\t_plan.enabled = false;\r\n\t\treturn _planId;\r\n\t}\r\n\r\n\tfunction _addPlanPeriod(uint256 _planId, uint256 _periodDuration, uint256 _periodCount, uint256 _ratePerPeriod) internal\r\n\t{\r\n\t\trequire(1 <= _planId && _planId <= planCount_, \"invalid plan\");\r\n\t\trequire(_periodDuration > 0, \"invalid duration\");\r\n\t\trequire(_ratePerPeriod <= 1e12, \"invalid rate\");\r\n\t\tuint256 _maxPeriodCount = _ratePerPeriod == 0 ? 1 : 1e12 / _ratePerPeriod;\r\n\t\trequire(1 <= _periodCount && _periodCount <= _maxPeriodCount, \"invalid count\");\r\n\t\tPlanInfo storage _plan = planInfo_[_planId];\r\n\t\trequire(!_plan.enabled, \"unavailable\");\r\n\t\t_plan.periods.push(PeriodInfo({\r\n\t\t\tperiodDuration: _periodDuration,\r\n\t\t\tperiodCount: _periodCount,\r\n\t\t\tratePerPeriod: _ratePerPeriod\r\n\t\t}));\r\n\t}\r\n\r\n\tfunction _enablePlan(uint256 _planId) internal\r\n\t{\r\n\t\trequire(1 <= _planId && _planId <= planCount_, \"invalid plan\");\r\n\t\tPlanInfo storage _plan = planInfo_[_planId];\r\n\t\trequire(!_plan.enabled, \"unavailable\");\r\n\t\tPeriodInfo[] memory _periods = _plan.periods;\r\n\t\tuint256 _sumRate = 0;\r\n\t\tfor (uint256 _i = 0; _i < _periods.length; _i++) {\r\n\t\t\tuint256 _periodCount = _periods[_i].periodCount;\r\n\t\t\tuint256 _ratePerPeriod = _periods[_i].ratePerPeriod;\r\n\t\t\t_sumRate += _periodCount * _ratePerPeriod;\r\n\t\t}\r\n\t\trequire(_sumRate == 1e12, \"invalid rate sum\");\r\n\t\t_plan.enabled = true;\r\n\t}\r\n}\r\n\r\n// File: contracts/ManagedTimeLockedAccounts.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\ncontract ManagedTimeLockedAccounts is WhitelistGuard, TimeLockedAccounts\r\n{\r\n\taddress public treasury;\r\n\r\n\tuint256 public totalBalance;\r\n\tbool public allowFullRecovery = true;\r\n\r\n\tconstructor (address _token, address _treasury) TimeLockedAccounts(_token) public\r\n\t{\r\n\t\ttreasury = _treasury;\r\n\t}\r\n\r\n\tfunction deposit(address _receiver, uint256 _amount, uint256 _planId) public override onlyOwner\r\n\t{\r\n\t\tuint256 _balanceBefore = IERC20(token).balanceOf(address(this));\r\n\t\tTimeLockedAccounts.deposit(_receiver, _amount, _planId);\r\n\t\tuint256 _balanceAfter = IERC20(token).balanceOf(address(this));\r\n\t\ttotalBalance += _balanceAfter - _balanceBefore;\r\n\t}\r\n\r\n\tfunction depositBatch(address _sender, address[] memory _receivers, uint256[] memory _amounts, uint256 _planId, uint256 _baseTime) public override onlyOwner\r\n\t{\r\n\t\tuint256 _balanceBefore = IERC20(token).balanceOf(address(this));\r\n\t\tTimeLockedAccounts.depositBatch(_sender, _receivers, _amounts, _planId, _baseTime);\r\n\t\tuint256 _balanceAfter = IERC20(token).balanceOf(address(this));\r\n\t\ttotalBalance += _balanceAfter - _balanceBefore;\r\n\t}\r\n\r\n\tfunction withdraw() public override onlyEOAorWhitelist\r\n\t{\r\n\t\tuint256 _balanceBefore = IERC20(token).balanceOf(address(this));\r\n\t\tTimeLockedAccounts.withdraw();\r\n\t\tuint256 _balanceAfter = IERC20(token).balanceOf(address(this));\r\n\t\ttotalBalance -= _balanceBefore - _balanceAfter;\r\n\t}\r\n\r\n\tfunction withdrawBatch(address[] memory _receivers) public override onlyOwner\r\n\t{\r\n\t\tuint256 _balanceBefore = IERC20(token).balanceOf(address(this));\r\n\t\tTimeLockedAccounts.withdrawBatch(_receivers);\r\n\t\tuint256 _balanceAfter = IERC20(token).balanceOf(address(this));\r\n\t\ttotalBalance -= _balanceBefore - _balanceAfter;\r\n\t}\r\n\r\n\tfunction createPlan(string memory _description) external onlyOwner returns (uint256 _planId)\r\n\t{\r\n\t\treturn _createPlan(_description);\r\n\t}\r\n\r\n\tfunction addPlanPeriod(uint256 _planId, uint256 _periodDuration, uint256 _periodCount, uint256 _ratePerPeriod) external onlyOwner\r\n\t{\r\n\t\t_addPlanPeriod(_planId, _periodDuration, _periodCount, _ratePerPeriod);\r\n\t}\r\n\r\n\tfunction enablePlan(uint256 _planId) external onlyOwner\r\n\t{\r\n\t\t_enablePlan(_planId);\r\n\t}\r\n\r\n\tfunction disableFullRecovery() external onlyOwner\r\n\t{\r\n\t\tallowFullRecovery = false;\r\n\t}\r\n\r\n\tfunction recoverLostFunds(address _token) external onlyOwner\r\n\t{\r\n\t\tuint256 _balance = IERC20(_token).balanceOf(address(this));\r\n\t\tif (_token == token && !allowFullRecovery) {\r\n\t\t\t_balance -= totalBalance;\r\n\t\t}\r\n\t\tIERC20(_token).safeTransfer(treasury, _balance);\r\n\t}\r\n\r\n\tfunction setTreasury(address _newTreasury) external onlyOwner\r\n\t{\r\n\t\trequire(_newTreasury != address(0), \"invalid address\");\r\n\t\taddress _oldTreasury = treasury;\r\n\t\ttreasury = _newTreasury;\r\n\t\temit ChangeTreasury(_oldTreasury, _newTreasury);\r\n\t}\r\n\r\n\tevent ChangeTreasury(address _oldTreasury, address _newTreasury);\r\n}\r\n\r\ncontract VestingSchedule is ManagedTimeLockedAccounts\r\n{\r\n\tconstructor (address _token, address _treasury) ManagedTimeLockedAccounts(_token, _treasury) public\r\n\t{\r\n\t\tuint256[] memory _rates = new uint256[](6);\r\n\t\t_rates[0] = 24e10; // 1st year 24%\r\n\t\t_rates[1] = 22e10; // 2st year 22%\r\n\t\t_rates[2] = 18e10; // 3st year 18%\r\n\t\t_rates[3] = 16e10; // 4st year 16%\r\n\t\t_rates[4] = 12e10; // 5st year 12%\r\n\t\t_rates[5] = 8e10;  // 6st year 8%\r\n\t\t_createVestingPlan(\"Vesting\", 7 days, 52, _rates); // 52 weeks / year\r\n\t}\r\n\r\n\tfunction _createVestingPlan(string memory _description, uint256 _periodDuration, uint256 _periodCount, uint256[] memory _rates) internal returns (uint256 _planId)\r\n\t{\r\n\t\t_planId = _createPlan(_description);\r\n\t\tuint256 _remRate = 0;\r\n\t\tfor (uint256 _i = 0; _i < _rates.length; _i++) {\r\n\t\t\tuint256 _rate = _rates[_i];\r\n\t\t\tuint256 _ratePerPeriod = _rate / _periodCount;\r\n\t\t\t_addPlanPeriod(_planId, _periodDuration, _periodCount, _ratePerPeriod);\r\n\t\t\t_remRate += _rate - _periodCount * _ratePerPeriod;\r\n\t\t}\r\n\t\tif (_remRate > 0) {\r\n\t\t\t_addPlanPeriod(_planId, 1, 1, _remRate);\r\n\t\t}\r\n\t\t_enablePlan(_planId);\r\n\t\treturn _planId;\r\n\t}\r\n}\r\n\r\ncontract SalesASchedule is ManagedTimeLockedAccounts\r\n{\r\n\tconstructor (address _token, address _treasury) ManagedTimeLockedAccounts(_token, _treasury) public\r\n\t{\r\n\t\tuint256 _planId = _createPlan(\"Sales A\");\r\n\t\t_addPlanPeriod(_planId, 30 days, 1, 8e10);   // 1 x 8% (30d)\r\n\t\t_addPlanPeriod(_planId, 30 days, 16, 575e8); // 16 x 5.75% (30d)\r\n\t\t_enablePlan(_planId);\r\n\t}\r\n}\r\n\r\ncontract SalesSSchedule is ManagedTimeLockedAccounts\r\n{\r\n\tconstructor (address _token, address _treasury) ManagedTimeLockedAccounts(_token, _treasury) public\r\n\t{\r\n\t\tuint256 _planId = _createPlan(\"Sales S\");\r\n\t\t_addPlanPeriod(_planId, 30 days, 1, 10e10); // 1 x 10% (30d)\r\n\t\t_addPlanPeriod(_planId, 30 days, 12, 75e9); // 12 x 7.5% (30d)\r\n\t\t_enablePlan(_planId);\r\n\t}\r\n}\r\n\r\ncontract SalesPSchedule is ManagedTimeLockedAccounts\r\n{\r\n\tconstructor (address _token, address _treasury) ManagedTimeLockedAccounts(_token, _treasury) public\r\n\t{\r\n\t\tuint256 _planId = _createPlan(\"Sales P\");\r\n\t\t_addPlanPeriod(_planId, 1 seconds, 1, 12e10); // 1 x 12%\r\n\t\t_addPlanPeriod(_planId, 30 days, 8, 11e10);   // 8 x 11% (30d)\r\n\t\t_enablePlan(_planId);\r\n\t}\r\n}\r\n\r\ncontract AirdropSchedule is ManagedTimeLockedAccounts\r\n{\r\n\tconstructor (address _token, address _treasury) ManagedTimeLockedAccounts(_token, _treasury) public\r\n\t{\r\n\t\tuint256 _planId = _createPlan(\"Airdrop\");\r\n\t\t_addPlanPeriod(_planId, 1 seconds, 1, 1e12); // 100%\r\n\t\t_enablePlan(_planId);\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"ChangeTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePeriodIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePeriodCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratePerPeriod\",\"type\":\"uint256\"}],\"name\":\"addPlanPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowFullRecovery\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"createPlan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_planId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_planId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseTime\",\"type\":\"uint256\"}],\"name\":\"depositBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableFullRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planId\",\"type\":\"uint256\"}],\"name\":\"enablePlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_i\",\"type\":\"uint256\"}],\"name\":\"periodInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"periodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planId\",\"type\":\"uint256\"}],\"name\":\"planInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverLostFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"}],\"name\":\"withdrawBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SalesASchedule", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000bf6ff49ffd3d104302ef0ab0f10f5a84324c091c000000000000000000000000c718e5a5b06ce7fed722b128c0c0eb9c5c902d92", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://15a4f0b7b6544fe1e0e2d1263dfebe81c44166584041941879e05862da4c6f57"}