{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/DolaSavings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.21;\\n\\ninterface IERC20 {\\n    function transfer(address, uint) external returns (bool);\\n    function transferFrom(address, address, uint) external returns (bool);\\n    function balanceOf(address) external view returns (uint);\\n}\\n\\ninterface IDBR {\\n    function mint(address, uint) external;\\n}\\n\\n/**\\n * @title DolaSavings\\n * @dev Smart contract for staking DOLA tokens to earn DBR rewards.\\n */\\ncontract DolaSavings {\\n\\n    IDBR public immutable dbr;\\n    IERC20 public immutable dola;\\n    address public gov;\\n    address public pendingGov;\\n    address public operator;\\n    uint public constant mantissa = 10**18;\\n    uint public maxYearlyRewardBudget;\\n    uint public maxRewardPerDolaMantissa = 10**18; // 1 DBR per DOLA\\n    uint public yearlyRewardBudget; // starts at 0\\n    uint public lastUpdate;\\n    uint public rewardIndexMantissa;\\n    uint public totalSupply;\\n    \\n    mapping (address => uint) public balanceOf;\\n    mapping (address => uint) public stakerIndexMantissa;\\n    mapping (address => uint) public accruedRewards;\\n \\n    /**\\n     * @dev Modifier to update the reward index for the whole contract as well as for a specific user.\\n     * Calculates rewards based on the time elapsed and the total supply staked.\\n     * @param user Address of the user for whom to update the index.\\n     */\\n    modifier updateIndex(address user) {\\n        uint deltaT = block.timestamp - lastUpdate;\\n        if(deltaT > 0) {\\n            if(yearlyRewardBudget > 0 && totalSupply > 0) {\\n                uint _totalSupply = totalSupply;\\n                uint _yearlyRewardBudget = yearlyRewardBudget;\\n                uint maxBudget = maxRewardPerDolaMantissa * _totalSupply / mantissa;\\n                uint budget = _yearlyRewardBudget > maxBudget ? maxBudget : _yearlyRewardBudget;\\n                uint rewardsAccrued = deltaT * budget * mantissa / 365 days;\\n                rewardIndexMantissa += rewardsAccrued / _totalSupply;\\n            }\\n            lastUpdate = block.timestamp;\\n        }\\n\\n        uint deltaIndex = rewardIndexMantissa - stakerIndexMantissa[user];\\n        uint bal = balanceOf[user];\\n        uint stakerDelta = bal * deltaIndex;\\n        stakerIndexMantissa[user] = rewardIndexMantissa;\\n        accruedRewards[user] += stakerDelta / mantissa;\\n        _;\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"ONLY GOV\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(msg.sender == operator, \\\"ONLY OPERATOR\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor for DolaSavings.\\n     * @param _dbr Address of the DBR token contract.\\n     * @param _dola Address of the DOLA token contract.\\n     * @param _gov Address of governance.\\n     * @param _operator Address of the operator.\\n     */\\n    constructor (address _dbr, address _dola, address _gov, address _operator) {\\n        dbr = IDBR(_dbr);\\n        dola = IERC20(_dola);\\n        gov = _gov;\\n        operator = _operator;\\n        lastUpdate = block.timestamp;\\n    }\\n\\n    function setOperator(address _operator) external onlyGov { operator = _operator; }\\n    function setPendingGov(address _gov) external onlyGov { pendingGov = _gov; }\\n    function acceptGov() external {\\n        require(msg.sender == pendingGov, \\\"Only pendingGov\\\");\\n        gov = pendingGov;\\n        pendingGov = address(0);\\n    }\\n\\n    /**\\n     * @dev Sets the maximum yearly reward budget.\\n     * @param _max The maximum yearly reward budget.\\n     */\\n    function setMaxYearlyRewardBudget(uint _max) external onlyGov updateIndex(msg.sender) {\\n        maxYearlyRewardBudget = _max;\\n        if(yearlyRewardBudget > _max) {\\n            yearlyRewardBudget = _max;\\n            emit SetYearlyRewardBudget(_max);\\n        }\\n        emit SetMaxYearlyRewardBudget(_max);\\n    }\\n\\n    /**\\n     * @dev Sets the maximum reward per DOLA in mantissa.\\n     * @param _max The maximum reward per DOLA in mantissa.\\n     */\\n    function setMaxRewardPerDolaMantissa(uint _max) external onlyGov updateIndex(msg.sender) {\\n        require(_max < type(uint).max / (mantissa * 10 ** 13)); //May overflow if set to max and more than 10 trillion DOLA has been deposited\\n        maxRewardPerDolaMantissa = _max;\\n        emit SetMaxRewardPerDolaMantissa(_max);\\n    }\\n\\n    /**\\n     * @dev Sets the yearly reward budget.\\n     * @param _yearlyRewardBudget The yearly reward budget.\\n     */\\n    function setYearlyRewardBudget(uint _yearlyRewardBudget) external onlyOperator updateIndex(msg.sender) {\\n        require(_yearlyRewardBudget <= maxYearlyRewardBudget, \\\"REWARD BUDGET ABOVE MAX\\\");\\n        yearlyRewardBudget = _yearlyRewardBudget;\\n        emit SetYearlyRewardBudget(_yearlyRewardBudget);\\n    }\\n\\n    /**\\n     * @dev Stakes DOLA tokens.\\n     * @param amount The amount of DOLA tokens to stake.\\n     * @param recipient The address of the recipient.\\n     */\\n    function stake(uint amount, address recipient) external updateIndex(recipient) {\\n        require(recipient != address(0), \\\"Zero address\\\");\\n        balanceOf[recipient] += amount;\\n        totalSupply += amount;\\n        dola.transferFrom(msg.sender, address(this), amount);\\n        emit Stake(msg.sender, recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Unstakes DOLA tokens.\\n     * @param amount The amount of DOLA tokens to unstake.\\n     */\\n    function unstake(uint amount) external updateIndex(msg.sender) {\\n        balanceOf[msg.sender] -= amount;\\n        totalSupply -= amount;\\n        dola.transfer(msg.sender, amount);\\n        emit Unstake(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Calculates the claimable rewards for a user.\\n     * @param user The address of the user.\\n     * @return The amount of claimable rewards.\\n     */\\n    function claimable(address user) external view returns(uint) {\\n        uint _totalSupply = totalSupply;\\n        uint _yearlyRewardBudget = yearlyRewardBudget;\\n        uint _rewardIndexMantissa = rewardIndexMantissa;\\n        uint deltaT = block.timestamp - lastUpdate;\\n        uint maxBudget = maxRewardPerDolaMantissa * _totalSupply / mantissa;\\n        uint budget = _yearlyRewardBudget > maxBudget ? maxBudget : _yearlyRewardBudget;\\n        uint rewardsAccrued = deltaT * budget * mantissa / 365 days;\\n        _rewardIndexMantissa = _totalSupply > 0 ? _rewardIndexMantissa + rewardsAccrued / _totalSupply : _rewardIndexMantissa;\\n        uint deltaIndex = _rewardIndexMantissa - stakerIndexMantissa[user];\\n        uint bal = balanceOf[user];\\n        uint stakerDelta = bal * deltaIndex / mantissa;\\n        return (accruedRewards[user] + stakerDelta);\\n    }\\n\\n    /**\\n     * @dev Claims the accrued rewards of the msg.sender and mints DBR tokens to the specified address.\\n     * @param to The address to receive the claimed DBR tokens.\\n     */\\n    function claim(address to) external updateIndex(msg.sender) {\\n        uint accrued = accruedRewards[msg.sender];\\n        dbr.mint(to, accrued);\\n        accruedRewards[msg.sender] = 0;\\n        emit Claim(msg.sender, to, accrued);\\n    }\\n\\n    /**\\n     * @dev Transfers out any ERC20 tokens from the contract.\\n     * Ensures that user staked DOLA cannot be swept.\\n     * @param token The address of the ERC20 token to sweep.\\n     * @param amount The amount of tokens to sweep.\\n     * @param to The recipient address of the swept tokens.\\n     */\\n    function sweep(address token, uint amount, address to) external onlyGov {\\n        if(token == address(dola)) {\\n            require(IERC20(token).balanceOf(address(this)) - totalSupply >= amount, \\\"CANNOT SWEEP USER DOLA\\\");\\n        }\\n        IERC20(token).transfer(to, amount);\\n    }\\n\\n    event Stake(address indexed caller, address indexed recipient, uint amount);\\n    event Unstake(address indexed caller, uint amount);\\n    event Claim(address indexed caller, address indexed recipient, uint claimed);\\n\\n    event SetYearlyRewardBudget(uint newYearlyRewardBudget);\\n    event SetMaxRewardPerDolaMantissa(uint newMax);\\n    event SetMaxYearlyRewardBudget(uint newMax);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/solmate/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dbr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dola\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"SetMaxRewardPerDolaMantissa\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"SetMaxYearlyRewardBudget\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newYearlyRewardBudget\",\"type\":\"uint256\"}],\"name\":\"SetYearlyRewardBudget\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accruedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dbr\",\"outputs\":[{\"internalType\":\"contract IDBR\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dola\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRewardPerDolaMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxYearlyRewardBudget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardIndexMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMaxRewardPerDolaMantissa\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMaxYearlyRewardBudget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setPendingGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_yearlyRewardBudget\",\"type\":\"uint256\"}],\"name\":\"setYearlyRewardBudget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerIndexMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yearlyRewardBudget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DolaSavings", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ad038eb671c44b853887a7e32528fab35dc5d710000000000000000000000000865377367054516e17014ccded1e7d814edc9ce4000000000000000000000000926df14a23be491164dcf93f4c468a50ef659d5b0000000000000000000000008f97cca30dbe80e7a8b462f1dd1a51c32accdfc8", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}