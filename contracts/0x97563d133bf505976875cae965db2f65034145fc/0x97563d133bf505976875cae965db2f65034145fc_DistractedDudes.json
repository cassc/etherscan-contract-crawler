{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@a16z/contracts/licenses/CantBeEvil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// a16z Contracts v0.0.1 (CantBeEvil.sol)\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./ICantBeEvil.sol\\\";\\n\\nenum LicenseVersion {\\n    PUBLIC,\\n    EXCLUSIVE,\\n    COMMERCIAL,\\n    COMMERCIAL_NO_HATE,\\n    PERSONAL,\\n    PERSONAL_NO_HATE\\n}\\n\\ncontract CantBeEvil is ERC165, ICantBeEvil {\\n    using Strings for uint;\\n    string internal constant _BASE_LICENSE_URI = \\\"ar://zmc1WTspIhFyVY82bwfAIcIExLFH5lUcHHUN0wXg4W8/\\\";\\n    LicenseVersion internal licenseVersion;\\n    constructor(LicenseVersion _licenseVersion) {\\n        licenseVersion = _licenseVersion;\\n    }\\n\\n    function getLicenseURI() public view returns (string memory) {\\n        return string.concat(_BASE_LICENSE_URI, uint(licenseVersion).toString());\\n    }\\n\\n    function getLicenseName() public view returns (string memory) {\\n        return _getLicenseVersionKeyByValue(licenseVersion);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165) returns (bool) {\\n        return\\n            interfaceId == type(ICantBeEvil).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function _getLicenseVersionKeyByValue(LicenseVersion _licenseVersion) internal pure returns (string memory) {\\n        require(uint8(_licenseVersion) <= 6);\\n        if (LicenseVersion.PUBLIC == _licenseVersion) return \\\"PUBLIC\\\";\\n        if (LicenseVersion.EXCLUSIVE == _licenseVersion) return \\\"EXCLUSIVE\\\";\\n        if (LicenseVersion.COMMERCIAL == _licenseVersion) return \\\"COMMERCIAL\\\";\\n        if (LicenseVersion.COMMERCIAL_NO_HATE == _licenseVersion) return \\\"COMMERCIAL_NO_HATE\\\";\\n        if (LicenseVersion.PERSONAL == _licenseVersion) return \\\"PERSONAL\\\";\\n        else return \\\"PERSONAL_NO_HATE\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"@a16z/contracts/licenses/ICantBeEvil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// a16z Contracts v0.0.1 (ICantBeEvil.sol)\\npragma solidity ^0.8.13;\\n\\ninterface ICantBeEvil {\\n    function getLicenseURI() external view returns (string memory);\\n    function getLicenseName() external view returns (string memory);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/DistractedDudes.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./WTFERC721.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { LicenseVersion, CantBeEvil } from \\\"@a16z/contracts/licenses/CantBeEvil.sol\\\";\\nimport { IDudesAuctionHouse } from \\\"./IDudesAuctionHouse.sol\\\";\\n\\n/**\\n * @title Distracted Dudes\\n * @notice What distracts you?? Released CC0; onchain verifiable via a16z Cant Be Evil license\\n */\\ncontract DistractedDudes is WTFERC721, Ownable, CantBeEvil(LicenseVersion.PUBLIC) {\\n  /* ============ Variables ============ */\\n\\n  /// @notice NFT price in ETH\\n  uint256 public price;\\n\\n  /// @notice mfer contract address\\n  IERC721 public immutable mferAddress;\\n\\n  /// @notice pfer contract address\\n  IERC721 public immutable pferAddress;\\n\\n  /// @notice sproto contract address\\n  IERC721 public immutable sprotoAddress;\\n\\n  /// @notice Max number of non 1/1 NFTs available in this collection\\n  uint256 public immutable maxNFT;\\n\\n  /// @notice Max number of 1/1 NFTs available in this collection\\n  uint256 public immutable max1o1NFT;\\n\\n  /// @notice Max number of NFTs that can be public minted in a single transaction\\n  uint256 public immutable maxPublicMint;\\n\\n  /// @notice Timestamp of when public sale starts\\n  uint256 public saleStartTimestamp;\\n\\n  /// @notice Timestamp of when presale starts\\n  uint256 public presaleStartTimestamp;\\n\\n  /// @notice Total current supply of non 1/1 NFTs\\n  uint256 public dudeCurrentSupply;\\n\\n  /// @notice Total current supply of 1/1 NFTs\\n  uint256 public dude1o1CurrentSupply;\\n\\n  /// @notice NFT tokens base URI\\n  string public baseURI;\\n\\n  /// @notice Map to track what access token ids were used to mint dudes\\n  mapping(IERC721 => mapping(uint256 => bool)) public accessTokenUsedToMint;\\n\\n  IDudesAuctionHouse public auctionHouse;\\n\\n  /// @notice Flag for if NFT metadata is revealed\\n  bool private revealed = false;\\n\\n  string private constant PRE_REVEAL_URI = \\\"ipfs://QmP1paK6cVekPPCvMGH6JHKVu1QYu4tMBZDqbYs5LWoM3A\\\";\\n\\n  address payable private mainDude;\\n\\n  /* ============ Structs ============ */\\n  // Enum for type of access NFT\\n  enum AccessNFTType {\\n    MFER,\\n    PFER,\\n    SPROTO\\n  }\\n\\n  struct ContractData {\\n    uint256 price;\\n    IERC721 mferAddress;\\n    IERC721 pferAddress;\\n    IERC721 sprotoAddress;\\n    uint256 maxNFT;\\n    uint256 max1o1NFT;\\n    uint256 maxPublicMint;\\n    uint256 saleStartTimestamp;\\n    uint256 presaleStartTimestamp;\\n    address payable mainDude;\\n  }\\n\\n  /* ============ Constructor ============ */\\n\\n  /**\\n   * @notice Initializes the NFT contract\\n   * @param _name NFT collection name\\n   * @param _symbol NFT collection symbol\\n   * @param _contractData struct containing contract data\\n   *          price - price per dude\\n   *          mferAddress - mfer contract address\\n   *          pferAddress - pfer contract address\\n   *          sprotoAddress - sproto contract address\\n   *          maxNFT - max number of non 1/1 NFTs available in this collection\\n   *          max1o1NFT - max number of 1/1 NFTs available in this collection\\n   *          maxPublicMint - max number of NFTs that can be public minted\\n   *          saleStartTimestamp - timestamp of when public sale starts\\n   *          presaleStartTimestamp - timestamp of when early access presale starts\\n   *          mainDude - main dude address\\n   */\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    ContractData memory _contractData\\n  ) WTFERC721(_name, _symbol) {\\n    require(_contractData.maxNFT > 0, \\\"Dudes:max-nft-gt-zero\\\");\\n    require(_contractData.max1o1NFT > 0, \\\"Dudes:max-1o1-gt-zero\\\");\\n    require(_contractData.maxPublicMint > 0, \\\"Dudes:max-mint-gt-zero\\\");\\n    require(_contractData.presaleStartTimestamp > block.timestamp, \\\"Dudes:presale-start-gt-now\\\");\\n    require(_contractData.saleStartTimestamp > block.timestamp, \\\"Dudes:sale-start-gt-now\\\");\\n    require(_contractData.mainDude != address(0), \\\"Dudes:main-dude-not-zero-address\\\");\\n\\n    price = _contractData.price;\\n    mferAddress = _contractData.mferAddress;\\n    pferAddress = _contractData.pferAddress;\\n    sprotoAddress = _contractData.sprotoAddress;\\n    maxNFT = _contractData.maxNFT;\\n    max1o1NFT = _contractData.max1o1NFT;\\n    maxPublicMint = _contractData.maxPublicMint;\\n    saleStartTimestamp = _contractData.saleStartTimestamp;\\n    presaleStartTimestamp = _contractData.presaleStartTimestamp;\\n    mainDude = _contractData.mainDude;\\n  }\\n\\n  modifier onlyAuctionHouse() {\\n    require(msg.sender != address(0) && msg.sender == address(auctionHouse), \\\"Dudes:caller-is-not-auction-house\\\");\\n    _;\\n  }\\n\\n  /* ============ External Functions ============ */\\n\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(CantBeEvil, WTFERC721)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  function totalSupply() external view returns (uint256) {\\n    return dudeCurrentSupply + dude1o1CurrentSupply - balanceOf(address(0));\\n  }\\n\\n  /**\\n   * @notice Returns true is public sale is live.\\n   */\\n  function isPublicSaleActive() external view returns (bool) {\\n    return _isPublicSaleActive();\\n  }\\n\\n  /**\\n   * @notice Returns true if mfers can mint.\\n   */\\n  function isPremintActive() external view returns (bool) {\\n    return _isPremintActive();\\n  }\\n\\n  /**\\n   * @notice Override: returns token uri or static reveal uri if reveal is not active\\n   */\\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n    if (revealed) {\\n      return super.tokenURI(tokenId);\\n    } else {\\n      return PRE_REVEAL_URI;\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns true if the specific access token has been used to mint a dude\\n   */\\n  function isAccessTokenUsed(address _accessTokenAddress, uint256 _tokenId)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return _isAccessTokenUsed(_accessTokenAddress, _tokenId);\\n  }\\n\\n  /**\\n   * @notice set reveal state to true\\n   * no way to set reveal back to false riskaay\\n   */\\n  function setRevealed() external onlyOwner {\\n    revealed = true;\\n  }\\n\\n  function setPrice(uint256 _price) external onlyOwner {\\n    price = _price;\\n  }\\n\\n  function setMainDude(address payable _mainDude) external onlyOwner {\\n    mainDude = _mainDude;\\n  }\\n\\n  function setAuctionHouse(IDudesAuctionHouse _auctionHouse) external onlyOwner {\\n    auctionHouse = _auctionHouse;\\n  }\\n\\n  /**\\n   * @notice Mints a new number of dudes at a 1:1 ratio of mfer/pfer/sproto.\\n   * @param _accessTokenIds list of mfer/pfer/sproto token ids that the sender holds to mint dudes\\n   * @param _accessNFTType type of access NFT from AccessNFTType enum - 0 for mfer, 1 for pfer, 2 for sproto\\n   * @dev be aware that even if one of the access token ids is not valid, the whole transaction will fail\\n   */\\n  function premint(uint256[] calldata _accessTokenIds, uint8 _accessNFTType) external payable {\\n    require(_isPremintActive(), \\\"Dudes:premint-not-active\\\");\\n    require(!_isPublicSaleActive(), \\\"Dudes:premint-is-over\\\");\\n    uint256 numberOfTokens = _accessTokenIds.length;\\n    require(numberOfTokens > 0, \\\"Dudes:premint-ids-gt-zero\\\");\\n\\n    // set erc721 contract address based on accessNFTType\\n    IERC721 accessNFTAddress;\\n    if (_accessNFTType == uint8(AccessNFTType.MFER)) {\\n      accessNFTAddress = mferAddress;\\n    } else if (_accessNFTType == uint8(AccessNFTType.PFER)) {\\n      accessNFTAddress = pferAddress;\\n    } else if (_accessNFTType == uint8(AccessNFTType.SPROTO)) {\\n      accessNFTAddress = sprotoAddress;\\n    } else {\\n      revert(\\\"Dudes:invalid-access-nft-type\\\");\\n    }\\n\\n    require(accessNFTAddress.balanceOf(msg.sender) >= numberOfTokens, \\\"Dudes:not-enough-tokens\\\");\\n\\n    uint256 _totalSupply = dudeCurrentSupply;\\n    require(_totalSupply + numberOfTokens <= maxNFT, \\\"Dudes:premint-sold-out\\\");\\n\\n    // loop through the list of access tokens\\n    // check that the msg.sender owns the token\\n    // check that the token has not been used to mint a dude\\n    // if all checks pass, mint a dude and mark the token as used\\n\\n    for (uint256 i = 0; i < numberOfTokens; i++) {\\n      uint256 accessTokenId = _accessTokenIds[i];\\n      require(accessNFTAddress.ownerOf(accessTokenId) == msg.sender, \\\"Dudes:premint-not-owner\\\");\\n      require(\\n        accessTokenUsedToMint[accessNFTAddress][accessTokenId] == false,\\n        \\\"Dudes:premint-already-used\\\"\\n      );\\n      uint256 mintTokenId = _totalSupply + i;\\n      accessTokenUsedToMint[accessNFTAddress][accessTokenId] = true;\\n      _safeMint(msg.sender, mintTokenId);\\n    }\\n\\n    dudeCurrentSupply += numberOfTokens;\\n  }\\n\\n  /**\\n   * @notice Mints a new number of dudes.\\n   * @param _numberOfTokens Number of dudes to mint\\n   */\\n  function mintDudes(uint256 _numberOfTokens) external payable {\\n    require(_isPublicSaleActive(), \\\"Dudes:sale-inactive\\\");\\n\\n    require(_numberOfTokens > 0, \\\"Dudes:wtf\\\");\\n\\n    uint256 _totalSupply = dudeCurrentSupply;\\n\\n    require(_totalSupply + _numberOfTokens <= maxNFT, \\\"Dudes:sold-out\\\");\\n    require(_numberOfTokens <= maxPublicMint, \\\"Dudes:exceeds-max-mint-per-tx\\\");\\n\\n    uint256 totalCost = _numberOfTokens * price;\\n    require(msg.value >= totalCost, \\\"Dudes:insufficient-funds\\\");\\n\\n    dudeCurrentSupply += _numberOfTokens;\\n\\n    for (uint256 i; i < _numberOfTokens; i++) {\\n      uint256 _mintIndex = _totalSupply + i;\\n      _safeMint(msg.sender, _mintIndex);\\n    }\\n  }\\n\\n  /**\\n   * @notice Set NFT tokens base URI\\n   * @dev This function is only callable by the owner of the contract.\\n   * @param baseURI_ NFT tokens base URI\\n   */\\n  function setBaseURI(string memory baseURI_) external onlyOwner {\\n    baseURI = baseURI_;\\n  }\\n\\n  /**\\n   * @notice Withdraw ETH from the contract.\\n   * @dev This function can be called by anyone but hardcode to withdraw to only specific address.\\n   */\\n  function withdraw() external {\\n    uint256 _amount = address(this).balance;\\n    require(_amount > 0, \\\"Dudes:withdraw-amount-gt-zero\\\");\\n\\n    (bool _success, ) = mainDude.call{ value: _amount }(\\\"\\\");\\n\\n    require(_success, \\\"Dudes:failed-to-withdraw-eth\\\");\\n  }\\n\\n  receive() external payable {}\\n\\n  /* ============ Internal Functions ============ */\\n\\n  function _isPublicSaleActive() internal view returns (bool) {\\n    return saleStartTimestamp < block.timestamp;\\n  }\\n\\n  function _isPremintActive() internal view returns (bool) {\\n    return presaleStartTimestamp < block.timestamp;\\n  }\\n\\n  function _isAccessTokenUsed(address _accessTokenAddress, uint256 _tokenId)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return accessTokenUsedToMint[IERC721(_accessTokenAddress)][_tokenId];\\n  }\\n\\n  /**\\n   * @notice Set NFT base URI.\\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n   * by default, can be overridden in child contracts.\\n   * @return NFT tokens base URI\\n   */\\n  function _baseURI() internal view virtual override returns (string memory) {\\n    return baseURI;\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal virtual override {\\n    if (address(auctionHouse) != address(0)) {\\n      // do not allow transfers of dudes out for the current auction winner\\n      IDudesAuctionHouse.Auction memory _auction = auctionHouse.getActiveAuction();\\n      if (_auction.bidder != address(0)) {\\n        if (!_auction.settled) {\\n          require(_auction.bidder != from, \\\"Dudes:transfer-auction-bidder\\\");\\n        }\\n      }\\n    }\\n  }\\n\\n  /* ============ Auction House Functions ============ */\\n\\n  /**\\n   * @notice Get the next 1 of 1 dude token id.\\n   * @dev the 1 of 1 token ids will start at the non 1 of 1 max supply for the collection. Since token ids are zero indexed,\\n   *  the first token id of the 1 of 1s will be maxNFT.\\n   * @return dudeId The next 1 of 1 dude token id or 0 if there are no more dudes for auction\\n   */\\n  function getDudeForAuction() external view returns (uint256 dudeId) {\\n    if (dude1o1CurrentSupply < max1o1NFT) {\\n      dudeId = maxNFT + dude1o1CurrentSupply;\\n    } else {\\n      dudeId = 0;\\n    }\\n  }\\n\\n  function mintAuctionDude(address _winner, uint256 _dudeId) external onlyAuctionHouse {\\n    dude1o1CurrentSupply++;\\n    _safeMint(_winner, _dudeId);\\n  }\\n\\n  function burnByAuction(uint256 _dudeId) external onlyAuctionHouse {\\n    _burn(_dudeId);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/IDudesAuctionHouse.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for Dudes Auction House\\n\\n// LICENSE\\n// IDudesAuctionHouse.sol is a modified version of Nouns's INounsAuctionHouse.sol:\\n// https://github.com/nounsDAO/nouns-monorepo/blob/master/packages/nouns-contracts/contracts/interfaces/INounsAuctionHouse.sol\\n//\\n// INounsAuctionHouse.sol source code Copyright Nounders DAO licensed under the GPL-3.0 license.\\n// With modifications by the Dudes.\\n\\npragma solidity 0.8.15;\\n\\ninterface IDudesAuctionHouse {\\n  struct Auction {\\n    // ID for the DUDE (ERC721 token ID)\\n    uint256 dudeId;\\n    // The current highest bid amount\\n    // This will be the number of DUDE NFTs\\n    uint256 amount;\\n    // The time that the auction started\\n    uint256 startTime;\\n    // The time that the auction is scheduled to end\\n    uint256 endTime;\\n    // The address of the current highest bid\\n    address bidder;\\n    // Whether or not the auction has been settled\\n    bool settled;\\n    // array of dude token ids that were used to bid\\n    uint256[] biddedDudes;\\n  }\\n\\n  event AuctionCreated(uint256 indexed dudeId, uint256 startTime, uint256 endTime);\\n\\n  event AuctionBid(uint256 indexed dudeId, address sender, uint256 value, bool extended);\\n\\n  event AuctionExtended(uint256 indexed dudeId, uint256 endTime);\\n\\n  event AuctionSettled(uint256 indexed dudeId, address winner, uint256 amount);\\n\\n  event AuctionTimeBufferUpdated(uint256 timeBuffer);\\n\\n  event AuctionReservePriceUpdated(uint256 reservePrice);\\n\\n  event AuctionMinBidIncrementPercentageUpdated(uint256 minBidIncrementPercentage);\\n\\n  function getActiveAuction() external view returns (IDudesAuctionHouse.Auction memory);\\n\\n  function getActiveAuctionBiddedDudes() external view returns (uint256[] memory);\\n\\n  function settleAuction() external;\\n\\n  function settleCurrentAndCreateNewAuction() external;\\n\\n  function createBid(uint256 dudeId, uint256[] calldata dudesToUse) external;\\n\\n  function setTimeBuffer(uint256 timeBuffer) external;\\n\\n  function setReservePrice(uint256 reservePrice) external;\\n\\n  function setMinBidIncrementPercentage(uint8 minBidIncrementPercentage) external;\\n}\\n\"\r\n    },\r\n    \"contracts/WTFERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract WTFERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n  using Address for address;\\n  using Strings for uint256;\\n\\n  // Token name\\n  string private _name;\\n\\n  // Token symbol\\n  string private _symbol;\\n\\n  // Mapping from token ID to owner address\\n  mapping(uint256 => address) private _owners;\\n\\n  // Mapping owner address to token count\\n  mapping(address => uint256) private _balances;\\n\\n  // Mapping from token ID to approved address\\n  mapping(uint256 => address) private _tokenApprovals;\\n\\n  // Mapping from owner to operator approvals\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n  /**\\n   * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n   */\\n  constructor(string memory name_, string memory symbol_) {\\n    _name = name_;\\n    _symbol = symbol_;\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC165, IERC165)\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IERC721).interfaceId ||\\n      interfaceId == type(IERC721Metadata).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-balanceOf}.\\n   */\\n  function balanceOf(address owner) public view virtual override returns (uint256) {\\n    return _balances[owner];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-ownerOf}.\\n   */\\n  function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n    address owner = _owners[tokenId];\\n    require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n    return owner;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-name}.\\n   */\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-symbol}.\\n   */\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-tokenURI}.\\n   */\\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n    _requireMinted(tokenId);\\n\\n    string memory baseURI = _baseURI();\\n    return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n   * by default, can be overridden in child contracts.\\n   */\\n  function _baseURI() internal view virtual returns (string memory) {\\n    return \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev See {IERC721-approve}.\\n   */\\n  function approve(address to, uint256 tokenId) public virtual override {\\n    address owner = WTFERC721.ownerOf(tokenId);\\n    require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n    require(\\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n      \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n    );\\n\\n    _approve(to, tokenId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-getApproved}.\\n   */\\n  function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n    _requireMinted(tokenId);\\n\\n    return _tokenApprovals[tokenId];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-setApprovalForAll}.\\n   */\\n  function setApprovalForAll(address operator, bool approved) public virtual override {\\n    _setApprovalForAll(_msgSender(), operator, approved);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-isApprovedForAll}.\\n   */\\n  function isApprovedForAll(address owner, address operator)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return _operatorApprovals[owner][operator];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-transferFrom}.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override {\\n    //solhint-disable-next-line max-line-length\\n    require(\\n      _isApprovedOrOwner(_msgSender(), tokenId),\\n      \\\"ERC721: caller is not token owner nor approved\\\"\\n    );\\n\\n    _transfer(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override {\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory data\\n  ) public virtual override {\\n    require(\\n      _isApprovedOrOwner(_msgSender(), tokenId),\\n      \\\"ERC721: caller is not token owner nor approved\\\"\\n    );\\n    _safeTransfer(from, to, tokenId, data);\\n  }\\n\\n  /**\\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n   *\\n   * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n   *\\n   * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n   * implement alternative mechanisms to perform token transfer, such as signature-based.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must exist and be owned by `from`.\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _safeTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory data\\n  ) internal virtual {\\n    _transfer(from, to, tokenId);\\n    require(\\n      _checkOnERC721Received(from, to, tokenId, data),\\n      \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Returns whether `tokenId` exists.\\n   *\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n   *\\n   * Tokens start existing when they are minted (`_mint`),\\n   * and stop existing when they are burned (`_burn`).\\n   */\\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n    return _owners[tokenId] != address(0);\\n  }\\n\\n  /**\\n   * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function _isApprovedOrOwner(address spender, uint256 tokenId)\\n    internal\\n    view\\n    virtual\\n    returns (bool)\\n  {\\n    address owner = WTFERC721.ownerOf(tokenId);\\n    return (spender == owner ||\\n      isApprovedForAll(owner, spender) ||\\n      getApproved(tokenId) == spender);\\n  }\\n\\n  /**\\n   * @dev Safely mints `tokenId` and transfers it to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must not exist.\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _safeMint(address to, uint256 tokenId) internal virtual {\\n    _safeMint(to, tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n   * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n   */\\n  function _safeMint(\\n    address to,\\n    uint256 tokenId,\\n    bytes memory data\\n  ) internal virtual {\\n    _mint(to, tokenId);\\n    require(\\n      _checkOnERC721Received(address(0), to, tokenId, data),\\n      \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Mints `tokenId` and transfers it to `to`.\\n   *\\n   * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must not exist.\\n   * - `to` cannot be the zero address.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _mint(address to, uint256 tokenId) internal virtual {\\n    require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n    require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n    _beforeTokenTransfer(address(0), to, tokenId);\\n\\n    _balances[to] += 1;\\n    _owners[tokenId] = to;\\n\\n    emit Transfer(address(0), to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Destroys `tokenId`.\\n   * The approval is cleared when the token is burned.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _burn(uint256 tokenId) internal virtual {\\n    address owner = WTFERC721.ownerOf(tokenId);\\n\\n    _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n    // Clear approvals\\n    _approve(address(0), tokenId);\\n\\n    _balances[owner] -= 1;\\n    delete _owners[tokenId];\\n\\n    emit Transfer(owner, address(0), tokenId);\\n  }\\n\\n  /**\\n   * @dev Transfers `tokenId` from `from` to `to`.\\n   *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must be owned by `from`.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal virtual {\\n    require(WTFERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n    require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n    _beforeTokenTransfer(from, to, tokenId);\\n\\n    // Clear approvals from the previous owner\\n    _approve(address(0), tokenId);\\n\\n    _balances[from] -= 1;\\n    _balances[to] += 1;\\n    _owners[tokenId] = to;\\n\\n    emit Transfer(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Approve `to` to operate on `tokenId`\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function _approve(address to, uint256 tokenId) internal virtual {\\n    _tokenApprovals[tokenId] = to;\\n    emit Approval(WTFERC721.ownerOf(tokenId), to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Approve `operator` to operate on all of `owner` tokens\\n   *\\n   * Emits an {ApprovalForAll} event.\\n   */\\n  function _setApprovalForAll(\\n    address owner,\\n    address operator,\\n    bool approved\\n  ) internal virtual {\\n    require(owner != operator, \\\"ERC721: approve to caller\\\");\\n    _operatorApprovals[owner][operator] = approved;\\n    emit ApprovalForAll(owner, operator, approved);\\n  }\\n\\n  /**\\n   * @dev Reverts if the `tokenId` has not been minted yet.\\n   */\\n  function _requireMinted(uint256 tokenId) internal view virtual {\\n    require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n  }\\n\\n  /**\\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n   * The call is not executed if the target address is not a contract.\\n   *\\n   * @param from address representing the previous owner of the given token ID\\n   * @param to target address that will receive the tokens\\n   * @param tokenId uint256 ID of the token to be transferred\\n   * @param data bytes optional data to send along with the call\\n   * @return bool whether the call correctly returned the expected magic value\\n   */\\n  function _checkOnERC721Received(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory data\\n  ) private returns (bool) {\\n    if (to.isContract()) {\\n      try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (\\n        bytes4 retval\\n      ) {\\n        return retval == IERC721Receiver.onERC721Received.selector;\\n      } catch (bytes memory reason) {\\n        if (reason.length == 0) {\\n          revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        } else {\\n          /// @solidity memory-safe-assembly\\n          assembly {\\n            revert(add(32, reason), mload(reason))\\n          }\\n        }\\n      }\\n    } else {\\n      return true;\\n    }\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any token transfer. This includes minting\\n   * and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n   * transferred to `to`.\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\n   * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal virtual {}\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC721\",\"name\":\"mferAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"pferAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"sprotoAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxNFT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max1o1NFT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPublicMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"mainDude\",\"type\":\"address\"}],\"internalType\":\"struct DistractedDudes.ContractData\",\"name\":\"_contractData\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accessTokenUsedToMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionHouse\",\"outputs\":[{\"internalType\":\"contract IDudesAuctionHouse\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dudeId\",\"type\":\"uint256\"}],\"name\":\"burnByAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dude1o1CurrentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dudeCurrentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDudeForAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dudeId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLicenseName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLicenseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isAccessTokenUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPremintActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max1o1NFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPublicMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mferAddress\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dudeId\",\"type\":\"uint256\"}],\"name\":\"mintAuctionDude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"mintDudes\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pferAddress\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_accessTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"_accessNFTType\",\"type\":\"uint8\"}],\"name\":\"premint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDudesAuctionHouse\",\"name\":\"_auctionHouse\",\"type\":\"address\"}],\"name\":\"setAuctionHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_mainDude\",\"type\":\"address\"}],\"name\":\"setMainDude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setRevealed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sprotoAddress\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DistractedDudes", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000079fcdef22feed20eddacbb2587640e45491b757f000000000000000000000000bcc664b1e6848caba2eb2f3de6e21f81b9276dd8000000000000000000000000eeca64ea9fcf99a22806cd99b3d29cf6e8d5492500000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000065540a00000000000000000000000000000000000000000000000000000000006553fbf0000000000000000000000000c8cb403435c955ef7a4587e948880d0c58a54add0000000000000000000000000000000000000000000000000000000000000010446973747261637465642044756465730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044455444500000000000000000000000000000000000000000000000000000000", "EVMVersion": "istanbul", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}