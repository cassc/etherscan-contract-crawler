{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/release/extensions/external-position-manager/external-positions/lido-withdrawals/LidoWithdrawalsPositionParser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\nimport {IExternalPositionParser} from \\\"../IExternalPositionParser.sol\\\";\\nimport {ILidoWithdrawalsPosition} from \\\"./ILidoWithdrawalsPosition.sol\\\";\\nimport {LidoWithdrawalsPositionDataDecoder} from \\\"./LidoWithdrawalsPositionDataDecoder.sol\\\";\\n\\npragma solidity 0.8.19;\\n\\n/// @title LidoWithdrawalsPositionParser\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Parser for Lido Withdrawal Positions\\ncontract LidoWithdrawalsPositionParser is IExternalPositionParser, LidoWithdrawalsPositionDataDecoder {\\n    address private immutable STETH_ADDRESS;\\n    address private immutable WETH_ADDRESS;\\n\\n    constructor(address _stethAddress, address _wethAddress) {\\n        STETH_ADDRESS = _stethAddress;\\n        WETH_ADDRESS = _wethAddress;\\n    }\\n\\n    /// @notice Parses the assets to send and receive for the callOnExternalPosition\\n    /// @param _actionId The _actionId for the callOnExternalPosition\\n    /// @param _encodedActionArgs The encoded parameters for the callOnExternalPosition\\n    /// @return assetsToTransfer_ The assets to be transferred from the Vault\\n    /// @return amountsToTransfer_ The amounts to be transferred from the Vault\\n    /// @return assetsToReceive_ The assets to be received at the Vault\\n    function parseAssetsForAction(address, uint256 _actionId, bytes memory _encodedActionArgs)\\n        external\\n        view\\n        override\\n        returns (\\n            address[] memory assetsToTransfer_,\\n            uint256[] memory amountsToTransfer_,\\n            address[] memory assetsToReceive_\\n        )\\n    {\\n        if (_actionId == uint256(ILidoWithdrawalsPosition.Actions.RequestWithdrawals)) {\\n            assetsToTransfer_ = new address[](1);\\n            assetsToTransfer_[0] = STETH_ADDRESS;\\n            amountsToTransfer_ = new uint256[](1);\\n\\n            // Sum the total amount of stETH to be withdrawn\\n            uint256[] memory amounts = __decodeRequestWithdrawalsActionArgs(_encodedActionArgs);\\n            for (uint256 i; i < amounts.length; i++) {\\n                amountsToTransfer_[0] += amounts[i];\\n            }\\n        } else if (_actionId == uint256(ILidoWithdrawalsPosition.Actions.ClaimWithdrawals)) {\\n            assetsToReceive_ = new address[](1);\\n            assetsToReceive_[0] = WETH_ADDRESS;\\n        }\\n\\n        return (assetsToTransfer_, amountsToTransfer_, assetsToReceive_);\\n    }\\n\\n    /// @notice Parse and validate input arguments to be used when initializing a newly-deployed ExternalPositionProxy\\n    /// @dev Empty for this external position type\\n    function parseInitArgs(address, bytes memory) external override returns (bytes memory) {}\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/external-position-manager/external-positions/IExternalPositionParser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IExternalPositionParser Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for all external position parsers\\ninterface IExternalPositionParser {\\n    function parseAssetsForAction(address _externalPosition, uint256 _actionId, bytes memory _encodedActionArgs)\\n        external\\n        returns (\\n            address[] memory assetsToTransfer_,\\n            uint256[] memory amountsToTransfer_,\\n            address[] memory assetsToReceive_\\n        );\\n\\n    function parseInitArgs(address _vaultProxy, bytes memory _initializationData)\\n        external\\n        returns (bytes memory initArgs_);\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/external-position-manager/external-positions/lido-withdrawals/ILidoWithdrawalsPosition.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\nimport {IExternalPosition} from \\\"../../../../../persistent/external-positions/IExternalPosition.sol\\\";\\nimport {LidoWithdrawalsPositionLibBase1} from\\n    \\\"../../../../../persistent/external-positions/lido-withdrawals/LidoWithdrawalsPositionLibBase1.sol\\\";\\n\\npragma solidity 0.8.19;\\n\\n/// @title ILidoWithdrawalsPosition Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface ILidoWithdrawalsPosition is IExternalPosition {\\n    enum Actions {\\n        RequestWithdrawals,\\n        ClaimWithdrawals\\n    }\\n\\n    function getRequests() external view returns (LidoWithdrawalsPositionLibBase1.Request[] memory requests_);\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/external-position-manager/external-positions/lido-withdrawals/LidoWithdrawalsPositionDataDecoder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.8.19;\\n\\n/// @title LidoWithdrawalsPositionDataDecoder Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Abstract contract containing data decodings for LidoWithdrawalsPosition payloads\\nabstract contract LidoWithdrawalsPositionDataDecoder {\\n    /// @dev Helper to decode args used during the ClaimWithdrawals action\\n    function __decodeClaimWithdrawalsActionArgs(bytes memory _actionArgs)\\n        internal\\n        pure\\n        returns (uint256[] memory requestIds_, uint256[] memory hints_)\\n    {\\n        return abi.decode(_actionArgs, (uint256[], uint256[]));\\n    }\\n\\n    /// @dev Helper to decode args used during the RequestWithdrawals action\\n    function __decodeRequestWithdrawalsActionArgs(bytes memory _actionArgs)\\n        internal\\n        pure\\n        returns (uint256[] memory amounts_)\\n    {\\n        return abi.decode(_actionArgs, (uint256[]));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/external-positions/IExternalPosition.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IExternalPosition Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IExternalPosition {\\n    function getDebtAssets() external returns (address[] memory, uint256[] memory);\\n\\n    function getManagedAssets() external returns (address[] memory, uint256[] memory);\\n\\n    function init(bytes memory) external;\\n\\n    function receiveCallFromVault(bytes memory) external;\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/external-positions/lido-withdrawals/LidoWithdrawalsPositionLibBase1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.8.19;\\n\\n/// @title LidoWithdrawalsPositionLibBase1 Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A persistent contract containing all storage variables, events, and data structures\\n/// @dev DO NOT EDIT CONTRACT. If new events or storage are necessary,\\n/// a new contract should inherit the most recent base.\\ncontract LidoWithdrawalsPositionLibBase1 {\\n    struct Request {\\n        uint128 amount;\\n        uint128 id;\\n    }\\n\\n    event RequestAdded(uint256 indexed id, uint256 amount);\\n\\n    event RequestRemoved(uint256 indexed id);\\n\\n    Request[] internal requests;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-solc-0.6/contracts/\",\r\n      \"@uniswap/v3-core/=lib/uniswap-v3-core/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-solc-0.6/=lib/openzeppelin-solc-0.6/contracts/\",\r\n      \"openzeppelin-solc-0.7/=lib/openzeppelin-solc-0.7/contracts/\",\r\n      \"openzeppelin-solc-0.8/=lib/openzeppelin-solc-0.8/contracts/\",\r\n      \"uniswap-v3-core/=lib/uniswap-v3-core/\",\r\n      \"uniswap-v3-core-0.8/=lib/uniswap-v3-core-0.8/\",\r\n      \"uniswap-v3-periphery/=lib/uniswap-v3-periphery/contracts/\",\r\n      \"uniswap-v3-periphery-0.8/=lib/uniswap-v3-periphery-0.8/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\",\r\n      \"appendCBOR\": false\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_actionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_encodedActionArgs\",\"type\":\"bytes\"}],\"name\":\"parseAssetsForAction\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"assetsToTransfer_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToTransfer_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"assetsToReceive_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"parseInitArgs\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LidoWithdrawalsPositionParser", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ae7ab96520de3a18e5e111b5eaab095312d7fe84000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}