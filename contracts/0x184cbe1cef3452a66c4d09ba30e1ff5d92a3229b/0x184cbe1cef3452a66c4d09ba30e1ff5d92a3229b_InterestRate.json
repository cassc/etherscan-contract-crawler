{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/InterestRate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { IYieldOracle } from \\\"./interfaces/IYieldOracle.sol\\\";\\nimport { WadRayMath } from \\\"./libraries/math/WadRayMath.sol\\\";\\n\\n// forgefmt: disable-start\\n\\nstruct IlkData {\\n    // Word 1\\n    uint96 adjustedProfitMargin; // 27 decimals\\n    uint96 minimumKinkRate; // 27 decimals\\n\\n    // Word 2\\n    uint16 reserveFactor; // 4 decimals\\n    uint96 adjustedBaseRate; // 27 decimals\\n    uint96 minimumBaseRate; // 27 decimals\\n    uint16 optimalUtilizationRate; // 4 decimals\\n    uint16 distributionFactor; // 4 decimals\\n\\n    // Word 3\\n    uint96 adjustedAboveKinkSlope; // 27 decimals\\n    uint96 minimumAboveKinkSlope; // 27 decimals\\n}\\n\\n// Word 1\\n//\\n//                                                256  240   216   192                     96                      0\\n//                                                 |    |     |     |     min_kink_rate     |   adj_profit_margin  |\\n//\\nuint256 constant ADJUSTED_PROFIT_MARGIN_MASK =    0x0000000000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF; \\nuint256 constant MINIMUM_KINK_RATE_MASK =         0x0000000000000000FFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000;\\n\\n// Word 2\\n//\\n//                                                256  240 224 208                     112                     16   0\\n//                                                 | __ |   |   |     min_base_rate     |     adj_base_rate     |   |\\n//                                                        ^   ^                                                   ^\\n//                                                        ^  opt_util                                 reserve_factor\\n//                                       distribution_factor\\n\\nuint256 constant RESERVE_FACTOR_MASK =            0x000000000000000000000000000000000000000000000000000000000000FFFF;\\nuint256 constant ADJUSTED_BASE_RATE_MASK =        0x000000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF0000;\\nuint256 constant MINIMUM_BASE_RATE_MASK =         0x000000000000FFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000;\\nuint256 constant OPTIMAL_UTILIZATION_MASK =       0x00000000FFFF0000000000000000000000000000000000000000000000000000;\\nuint256 constant DISTRIBUTION_FACTOR_MASK =       0x0000FFFF00000000000000000000000000000000000000000000000000000000;\\n\\n// Word 3\\n//                                                256  240   216   192                     96                      0\\n//                                                 |    |     |     |  min_above_kink_slope | adj_above_kink_slope |\\n//\\nuint256 constant ADJUSTED_ABOVE_KINK_SLOPE_MASK =  0x0000000000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF;\\nuint256 constant MINIMUM_ABOVE_KINK_SLOPE_MASK =   0x0000000000000000FFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000; \\n\\n// forgefmt: disable-end\\n\\n// Word 1\\nuint8 constant ADJUSTED_PROFIT_MARGIN_SHIFT = 0;\\nuint8 constant MINIMUM_KINK_RATE_SHIFT = 96;\\n\\n// Word 2\\nuint8 constant RESERVE_FACTOR_SHIFT = 0;\\nuint8 constant ADJUSTED_BASE_RATE_SHIFT = 16;\\nuint8 constant MINIMUM_BASE_RATE_SHIFT = 16 + 96;\\nuint8 constant OPTIMAL_UTILIZATION_SHIFT = 16 + 96 + 96;\\nuint8 constant DISTRIBUTION_FACTOR_SHIFT = 16 + 96 + 96 + 16;\\n\\n// Word 3\\nuint8 constant ADJUSTED_ABOVE_KINK_SLOPE_SHIFT = 0;\\nuint8 constant MINIMUM_ABOVE_KINK_SLOPE_SHIFT = 96;\\n\\nuint48 constant SECONDS_IN_A_YEAR = 31_536_000;\\n\\n/**\\n * @notice An external contract that provides the APY for each collateral type.\\n * A modular design here allows for updating of the parameters at a later date\\n * without upgrading the core protocol.\\n *\\n * @dev Each collateral has its own interest rate model, and every operation on\\n * the `IonPool` (lend, withdraw, borrow, repay) will alter the interest rate\\n * for all collaterals. Therefore, before every operation, the previous interest\\n * rate must be accrued. Ion determines the interest rate for each collateral\\n * based on various collateral-specific parameters which must be stored\\n * on-chain. However, to iterate through all these parameters as contract\\n * storage on every operation introduces an immense gas overhead, especially as\\n * more collaterals are listed on Ion. Therefore, this contract is heavily\\n * optimized to reduce storage reads at the unfortunate cost of code-complexity.\\n *\\n * @custom:security-contact security@molecularlabs.io\\n */\\ncontract InterestRate {\\n    using WadRayMath for *;\\n\\n    error CollateralIndexOutOfBounds();\\n    error DistributionFactorsDoNotSumToOne(uint256 sum);\\n    error TotalDebtsLength(uint256 COLLATERAL_COUNT, uint256 totalIlkDebtsLength);\\n\\n    error InvalidMinimumKinkRate(uint256 minimumKinkRate, uint256 minimumBaseRate);\\n    error InvalidIlkDataListLength(uint256 length);\\n    error InvalidOptimalUtilizationRate(uint256 optimalUtilizationRate);\\n    error InvalidReserveFactor(uint256 reserveFactor);\\n    error InvalidYieldOracleAddress();\\n\\n    uint256 private constant MAX_ILKS = 8;\\n\\n    /**\\n     * @dev Packed collateral configs\\n     */\\n    uint256 private immutable ILKCONFIG_0A;\\n    uint256 private immutable ILKCONFIG_0B;\\n    uint256 private immutable ILKCONFIG_0C;\\n    uint256 private immutable ILKCONFIG_1A;\\n    uint256 private immutable ILKCONFIG_1B;\\n    uint256 private immutable ILKCONFIG_1C;\\n    uint256 private immutable ILKCONFIG_2A;\\n    uint256 private immutable ILKCONFIG_2B;\\n    uint256 private immutable ILKCONFIG_2C;\\n    uint256 private immutable ILKCONFIG_3A;\\n    uint256 private immutable ILKCONFIG_3B;\\n    uint256 private immutable ILKCONFIG_3C;\\n    uint256 private immutable ILKCONFIG_4A;\\n    uint256 private immutable ILKCONFIG_4B;\\n    uint256 private immutable ILKCONFIG_4C;\\n    uint256 private immutable ILKCONFIG_5A;\\n    uint256 private immutable ILKCONFIG_5B;\\n    uint256 private immutable ILKCONFIG_5C;\\n    uint256 private immutable ILKCONFIG_6A;\\n    uint256 private immutable ILKCONFIG_6B;\\n    uint256 private immutable ILKCONFIG_6C;\\n    uint256 private immutable ILKCONFIG_7A;\\n    uint256 private immutable ILKCONFIG_7B;\\n    uint256 private immutable ILKCONFIG_7C;\\n\\n    uint256 public immutable COLLATERAL_COUNT;\\n    IYieldOracle public immutable YIELD_ORACLE;\\n\\n    /**\\n     * @notice Creates a new `InterestRate` instance.\\n     * @param ilkDataList List of ilk configs.\\n     * @param _yieldOracle Address of the Yield oracle.\\n     */\\n    constructor(IlkData[] memory ilkDataList, IYieldOracle _yieldOracle) {\\n        if (address(_yieldOracle) == address(0)) revert InvalidYieldOracleAddress();\\n        if (ilkDataList.length > MAX_ILKS) revert InvalidIlkDataListLength(ilkDataList.length);\\n\\n        COLLATERAL_COUNT = ilkDataList.length;\\n        YIELD_ORACLE = _yieldOracle;\\n\\n        uint256 distributionFactorSum = 0;\\n        for (uint256 i = 0; i < COLLATERAL_COUNT;) {\\n            distributionFactorSum += ilkDataList[i].distributionFactor;\\n\\n            if (ilkDataList[i].minimumKinkRate < ilkDataList[i].minimumBaseRate) {\\n                revert InvalidMinimumKinkRate(ilkDataList[i].minimumKinkRate, ilkDataList[i].minimumBaseRate);\\n            }\\n            if (ilkDataList[i].optimalUtilizationRate == 0) {\\n                revert InvalidOptimalUtilizationRate(ilkDataList[i].optimalUtilizationRate);\\n            }\\n            if (ilkDataList[i].reserveFactor > 1e4) {\\n                revert InvalidReserveFactor(ilkDataList[i].reserveFactor);\\n            }\\n\\n            // forgefmt: disable-next-line\\n            unchecked { ++i; }\\n        }\\n\\n        if (distributionFactorSum != 1e4) revert DistributionFactorsDoNotSumToOne(distributionFactorSum);\\n\\n        (ILKCONFIG_0A, ILKCONFIG_0B, ILKCONFIG_0C) = _packCollateralConfig(ilkDataList, 0);\\n        (ILKCONFIG_1A, ILKCONFIG_1B, ILKCONFIG_1C) = _packCollateralConfig(ilkDataList, 1);\\n        (ILKCONFIG_2A, ILKCONFIG_2B, ILKCONFIG_2C) = _packCollateralConfig(ilkDataList, 2);\\n        (ILKCONFIG_3A, ILKCONFIG_3B, ILKCONFIG_3C) = _packCollateralConfig(ilkDataList, 3);\\n        (ILKCONFIG_4A, ILKCONFIG_4B, ILKCONFIG_4C) = _packCollateralConfig(ilkDataList, 4);\\n        (ILKCONFIG_5A, ILKCONFIG_5B, ILKCONFIG_5C) = _packCollateralConfig(ilkDataList, 5);\\n        (ILKCONFIG_6A, ILKCONFIG_6B, ILKCONFIG_6C) = _packCollateralConfig(ilkDataList, 6);\\n        (ILKCONFIG_7A, ILKCONFIG_7B, ILKCONFIG_7C) = _packCollateralConfig(ilkDataList, 7);\\n    }\\n\\n    /**\\n     * @notice Helper function to pack the collateral configs into 3 words. This\\n     * function is only called during construction.\\n     * @param ilkDataList The list of ilk configs.\\n     * @param index The ilkIndex to pack.\\n     * @return packedConfig_a\\n     * @return packedConfig_b\\n     * @return packedConfig_c\\n     */\\n    function _packCollateralConfig(\\n        IlkData[] memory ilkDataList,\\n        uint256 index\\n    )\\n        private\\n        view\\n        returns (uint256 packedConfig_a, uint256 packedConfig_b, uint256 packedConfig_c)\\n    {\\n        if (index >= COLLATERAL_COUNT) return (0, 0, 0);\\n\\n        IlkData memory ilkData = ilkDataList[index];\\n\\n        packedConfig_a = (\\n            uint256(ilkData.adjustedProfitMargin) << ADJUSTED_PROFIT_MARGIN_SHIFT\\n                | uint256(ilkData.minimumKinkRate) << MINIMUM_KINK_RATE_SHIFT\\n        );\\n\\n        packedConfig_b = (\\n            uint256(ilkData.reserveFactor) << RESERVE_FACTOR_SHIFT\\n                | uint256(ilkData.adjustedBaseRate) << ADJUSTED_BASE_RATE_SHIFT\\n                | uint256(ilkData.minimumBaseRate) << MINIMUM_BASE_RATE_SHIFT\\n                | uint256(ilkData.optimalUtilizationRate) << OPTIMAL_UTILIZATION_SHIFT\\n                | uint256(ilkData.distributionFactor) << DISTRIBUTION_FACTOR_SHIFT\\n        );\\n\\n        packedConfig_c = (\\n            uint256(ilkData.adjustedAboveKinkSlope) << ADJUSTED_ABOVE_KINK_SLOPE_SHIFT\\n                | uint256(ilkData.minimumAboveKinkSlope) << MINIMUM_ABOVE_KINK_SLOPE_SHIFT\\n        );\\n    }\\n\\n    /**\\n     * @notice Helper function to unpack the collateral configs from the 3\\n     * words.\\n     * @param index The ilkIndex to unpack.\\n     * @return ilkData The unpacked collateral config.\\n     */\\n    function unpackCollateralConfig(uint256 index) external view returns (IlkData memory ilkData) {\\n        return _unpackCollateralConfig(index);\\n    }\\n\\n    function _unpackCollateralConfig(uint256 index) internal view returns (IlkData memory ilkData) {\\n        if (index > COLLATERAL_COUNT - 1) revert CollateralIndexOutOfBounds();\\n\\n        uint256 packedConfig_a;\\n        uint256 packedConfig_b;\\n        uint256 packedConfig_c;\\n\\n        if (index == 0) {\\n            packedConfig_a = ILKCONFIG_0A;\\n            packedConfig_b = ILKCONFIG_0B;\\n            packedConfig_c = ILKCONFIG_0C;\\n        } else if (index == 1) {\\n            packedConfig_a = ILKCONFIG_1A;\\n            packedConfig_b = ILKCONFIG_1B;\\n            packedConfig_c = ILKCONFIG_1C;\\n        } else if (index == 2) {\\n            packedConfig_a = ILKCONFIG_2A;\\n            packedConfig_b = ILKCONFIG_2B;\\n            packedConfig_c = ILKCONFIG_2C;\\n        } else if (index == 3) {\\n            packedConfig_a = ILKCONFIG_3A;\\n            packedConfig_b = ILKCONFIG_3B;\\n            packedConfig_c = ILKCONFIG_3C;\\n        } else if (index == 4) {\\n            packedConfig_a = ILKCONFIG_4A;\\n            packedConfig_b = ILKCONFIG_4B;\\n            packedConfig_c = ILKCONFIG_4C;\\n        } else if (index == 5) {\\n            packedConfig_a = ILKCONFIG_5A;\\n            packedConfig_b = ILKCONFIG_5B;\\n            packedConfig_c = ILKCONFIG_5C;\\n        } else if (index == 6) {\\n            packedConfig_a = ILKCONFIG_6A;\\n            packedConfig_b = ILKCONFIG_6B;\\n            packedConfig_c = ILKCONFIG_6C;\\n        } else if (index == 7) {\\n            packedConfig_a = ILKCONFIG_7A;\\n            packedConfig_b = ILKCONFIG_7B;\\n            packedConfig_c = ILKCONFIG_7C;\\n        }\\n\\n        uint96 adjustedProfitMargin =\\n            uint96((packedConfig_a & ADJUSTED_PROFIT_MARGIN_MASK) >> ADJUSTED_PROFIT_MARGIN_SHIFT);\\n        uint96 minimumKinkRate = uint96((packedConfig_a & MINIMUM_KINK_RATE_MASK) >> MINIMUM_KINK_RATE_SHIFT);\\n\\n        uint16 reserveFactor = uint16((packedConfig_b & RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_SHIFT);\\n        uint96 adjustedBaseRate = uint96((packedConfig_b & ADJUSTED_BASE_RATE_MASK) >> ADJUSTED_BASE_RATE_SHIFT);\\n        uint96 minimumBaseRate = uint96((packedConfig_b & MINIMUM_BASE_RATE_MASK) >> MINIMUM_BASE_RATE_SHIFT);\\n        uint16 optimalUtilizationRate = uint16((packedConfig_b & OPTIMAL_UTILIZATION_MASK) >> OPTIMAL_UTILIZATION_SHIFT);\\n        uint16 distributionFactor = uint16((packedConfig_b & DISTRIBUTION_FACTOR_MASK) >> DISTRIBUTION_FACTOR_SHIFT);\\n\\n        uint96 adjustedAboveKinkSlope =\\n            uint96((packedConfig_c & ADJUSTED_ABOVE_KINK_SLOPE_MASK) >> ADJUSTED_ABOVE_KINK_SLOPE_SHIFT);\\n        uint96 minimumAboveKinkSlope =\\n            uint96((packedConfig_c & MINIMUM_ABOVE_KINK_SLOPE_MASK) >> MINIMUM_ABOVE_KINK_SLOPE_SHIFT);\\n\\n        ilkData = IlkData({\\n            adjustedProfitMargin: adjustedProfitMargin,\\n            minimumKinkRate: minimumKinkRate,\\n            reserveFactor: reserveFactor,\\n            adjustedBaseRate: adjustedBaseRate,\\n            minimumBaseRate: minimumBaseRate,\\n            optimalUtilizationRate: optimalUtilizationRate,\\n            distributionFactor: distributionFactor,\\n            adjustedAboveKinkSlope: adjustedAboveKinkSlope,\\n            minimumAboveKinkSlope: minimumAboveKinkSlope\\n        });\\n    }\\n\\n    /**\\n     * @notice Calculates the interest rate for a given collateral.\\n     * @param ilkIndex Index of the collateral.\\n     * @param totalIlkDebt Total debt of the collateral. [RAD]\\n     * @param totalEthSupply Total eth supply of the system. [WAD]\\n     * @return The borrow rate for the collateral. [RAY]\\n     * @return The reserve factor for the collateral. [RAY]\\n     */\\n    function calculateInterestRate(\\n        uint256 ilkIndex,\\n        uint256 totalIlkDebt,\\n        uint256 totalEthSupply\\n    )\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        IlkData memory ilkData = _unpackCollateralConfig(ilkIndex);\\n        uint256 optimalUtilizationRateRay = ilkData.optimalUtilizationRate.scaleUpToRay(4);\\n        uint256 collateralApyRayInSeconds = YIELD_ORACLE.apys(ilkIndex).scaleUpToRay(8) / SECONDS_IN_A_YEAR;\\n\\n        uint256 distributionFactor = ilkData.distributionFactor;\\n        // The only time the distribution factor will be set to 0 is when a\\n        // market has been sunset. In this case, we want to prevent division by\\n        // 0, but we also want to prevent the borrow rate from skyrocketing. So\\n        // we will return a reasonable borrow rate of kink utilization on the\\n        // minimum curve.\\n        if (distributionFactor == 0) {\\n            return (ilkData.minimumKinkRate, ilkData.reserveFactor.scaleUpToRay(4));\\n        }\\n        // [RAD] / [WAD] = [RAY]\\n        uint256 utilizationRate =\\n            totalEthSupply == 0 ? 0 : totalIlkDebt / (totalEthSupply.wadMulDown(distributionFactor.scaleUpToWad(4)));\\n\\n        // Avoid stack too deep\\n        uint256 adjustedBelowKinkSlope;\\n        {\\n            uint256 slopeNumerator;\\n            unchecked {\\n                slopeNumerator = collateralApyRayInSeconds - ilkData.adjustedProfitMargin - ilkData.adjustedBaseRate;\\n            }\\n\\n            // Underflow occurred\\n            // If underflow occurred, then the Apy was too low or the profitMargin was too high and\\n            // we would want to switch to minimum borrow rate. Set slopeNumerator to zero such\\n            // that adjusted borrow rate is below the minimum borrow rate.\\n            if (slopeNumerator > collateralApyRayInSeconds) {\\n                slopeNumerator = 0;\\n            }\\n\\n            adjustedBelowKinkSlope = slopeNumerator.rayDivDown(optimalUtilizationRateRay);\\n        }\\n\\n        uint256 minimumBelowKinkSlope =\\n            (ilkData.minimumKinkRate - ilkData.minimumBaseRate).rayDivDown(optimalUtilizationRateRay);\\n\\n        // Below kink\\n        if (utilizationRate < optimalUtilizationRateRay) {\\n            uint256 adjustedBorrowRate = adjustedBelowKinkSlope.rayMulDown(utilizationRate) + ilkData.adjustedBaseRate;\\n            uint256 minimumBorrowRate = minimumBelowKinkSlope.rayMulDown(utilizationRate) + ilkData.minimumBaseRate;\\n\\n            if (adjustedBorrowRate < minimumBorrowRate) {\\n                return (minimumBorrowRate, ilkData.reserveFactor.scaleUpToRay(4));\\n            } else {\\n                return (adjustedBorrowRate, ilkData.reserveFactor.scaleUpToRay(4));\\n            }\\n        }\\n        // Above kink\\n        else {\\n            // For the above kink calculation, we will use the below kink slope\\n            // for all utilization up until the kink. From that point on we will\\n            // use the above kink slope.\\n            uint256 excessUtil = utilizationRate - optimalUtilizationRateRay;\\n\\n            uint256 adjustedNormalRate =\\n                adjustedBelowKinkSlope.rayMulDown(optimalUtilizationRateRay) + ilkData.adjustedBaseRate;\\n            uint256 minimumNormalRate =\\n                minimumBelowKinkSlope.rayMulDown(optimalUtilizationRateRay) + ilkData.minimumBaseRate;\\n\\n            // [WAD] * [RAY] / [WAD] = [RAY]\\n            uint256 adjustedBorrowRate = ilkData.adjustedAboveKinkSlope.rayMulDown(excessUtil) + adjustedNormalRate;\\n            uint256 minimumBorrowRate = ilkData.minimumAboveKinkSlope.rayMulDown(excessUtil) + minimumNormalRate;\\n\\n            if (adjustedBorrowRate < minimumBorrowRate) {\\n                return (minimumBorrowRate, ilkData.reserveFactor.scaleUpToRay(4));\\n            } else {\\n                return (adjustedBorrowRate, ilkData.reserveFactor.scaleUpToRay(4));\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IYieldOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IYieldOracle {\\n    function apys(uint256 ilkIndex) external view returns (uint32);\\n}\\n\"\r\n    },\r\n    \"src/libraries/math/WadRayMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nuint256 constant WAD = 1e18;\\nuint256 constant RAY = 1e27;\\nuint256 constant RAD = 1e45;\\n\\n/**\\n * @title WadRayMath\\n *\\n * @notice This library provides mul/div[up/down] functionality for WAD, RAY and\\n * RAD with phantom overflow protection as well as scale[up/down] functionality\\n * for WAD, RAY and RAD.\\n *\\n * @custom:security-contact security@molecularlabs.io\\n */\\nlibrary WadRayMath {\\n    using Math for uint256;\\n\\n    error NotScalingUp(uint256 from, uint256 to);\\n    error NotScalingDown(uint256 from, uint256 to);\\n\\n    /**\\n     * @notice Multiplies two WAD numbers and returns the result as a WAD\\n     * rounding the result down.\\n     * @param a Multiplicand.\\n     * @param b Multiplier.\\n     */\\n    function wadMulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mulDiv(b, WAD);\\n    }\\n\\n    /**\\n     * @notice Multiplies two WAD numbers and returns the result as a WAD\\n     * rounding the result up.\\n     * @param a Multiplicand.\\n     * @param b Multiplier.\\n     */\\n    function wadMulUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mulDiv(b, WAD, Math.Rounding.Ceil);\\n    }\\n\\n    /**\\n     * @notice Divides two WAD numbers and returns the result as a WAD rounding\\n     * the result down.\\n     * @param a Dividend.\\n     * @param b Divisor.\\n     */\\n    function wadDivDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mulDiv(WAD, b);\\n    }\\n\\n    /**\\n     * @notice Divides two WAD numbers and returns the result as a WAD rounding\\n     * the result up.\\n     * @param a Dividend.\\n     * @param b Divisor.\\n     */\\n    function wadDivUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mulDiv(WAD, b, Math.Rounding.Ceil);\\n    }\\n\\n    /**\\n     * @notice Multiplies two RAY numbers and returns the result as a RAY\\n     * rounding the result down.\\n     * @param a Multiplicand\\n     * @param b Multiplier\\n     */\\n    function rayMulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mulDiv(b, RAY);\\n    }\\n\\n    /**\\n     * @notice Multiplies two RAY numbers and returns the result as a RAY\\n     * rounding the result up.\\n     * @param a Multiplicand\\n     * @param b Multiplier\\n     */\\n    function rayMulUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mulDiv(b, RAY, Math.Rounding.Ceil);\\n    }\\n\\n    /**\\n     * @notice Divides two RAY numbers and returns the result as a RAY\\n     * rounding the result down.\\n     * @param a Dividend\\n     * @param b Divisor\\n     */\\n    function rayDivDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mulDiv(RAY, b);\\n    }\\n\\n    /**\\n     * @notice Divides two RAY numbers and returns the result as a RAY\\n     * rounding the result up.\\n     * @param a Dividend\\n     * @param b Divisor\\n     */\\n    function rayDivUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mulDiv(RAY, b, Math.Rounding.Ceil);\\n    }\\n\\n    /**\\n     * @notice Multiplies two RAD numbers and returns the result as a RAD\\n     * rounding the result down.\\n     * @param a Multiplicand\\n     * @param b Multiplier\\n     */\\n    function radMulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mulDiv(b, RAD);\\n    }\\n\\n    /**\\n     * @notice Multiplies two RAD numbers and returns the result as a RAD\\n     * rounding the result up.\\n     * @param a Multiplicand\\n     * @param b Multiplier\\n     */\\n    function radMulUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mulDiv(b, RAD, Math.Rounding.Ceil);\\n    }\\n\\n    /**\\n     * @notice Divides two RAD numbers and returns the result as a RAD rounding\\n     * the result down.\\n     * @param a Dividend\\n     * @param b Divisor\\n     */\\n    function radDivDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mulDiv(RAD, b);\\n    }\\n\\n    /**\\n     * @notice Divides two RAD numbers and returns the result as a RAD rounding\\n     * the result up.\\n     * @param a Dividend\\n     * @param b Divisor\\n     */\\n    function radDivUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mulDiv(RAD, b, Math.Rounding.Ceil);\\n    }\\n\\n    // --- Scalers ---\\n\\n    /**\\n     * @notice Scales a value up from WAD. NOTE: The `scale` value must be\\n     * less than 18.\\n     * @param value to scale up.\\n     * @param scale of the returned value.\\n     */\\n    function scaleUpToWad(uint256 value, uint256 scale) internal pure returns (uint256) {\\n        return scaleUp(value, scale, 18);\\n    }\\n\\n    /**\\n     * @notice Scales a value up from RAY. NOTE: The `scale` value must be\\n     * less than 27.\\n     * @param value to scale up.\\n     * @param scale of the returned value.\\n     */\\n    function scaleUpToRay(uint256 value, uint256 scale) internal pure returns (uint256) {\\n        return scaleUp(value, scale, 27);\\n    }\\n\\n    /**\\n     * @notice Scales a value up from RAD. NOTE: The `scale` value must be\\n     * less than 45.\\n     * @param value to scale up.\\n     * @param scale of the returned value.\\n     */\\n    function scaleUpToRad(uint256 value, uint256 scale) internal pure returns (uint256) {\\n        return scaleUp(value, scale, 45);\\n    }\\n\\n    /**\\n     * @notice Scales a value down to WAD. NOTE: The `scale` value must be\\n     * greater than 18.\\n     * @param value to scale down.\\n     * @param scale of the returned value.\\n     */\\n    function scaleDownToWad(uint256 value, uint256 scale) internal pure returns (uint256) {\\n        return scaleDown(value, scale, 18);\\n    }\\n\\n    /**\\n     * @notice Scales a value down to RAY. NOTE: The `scale` value must be\\n     * greater than 27.\\n     * @param value to scale down.\\n     * @param scale of the returned value.\\n     */\\n    function scaleDownToRay(uint256 value, uint256 scale) internal pure returns (uint256) {\\n        return scaleDown(value, scale, 27);\\n    }\\n\\n    /**\\n     * @notice Scales a value down to RAD. NOTE: The `scale` value must be\\n     * greater than 45.\\n     * @param value to scale down.\\n     * @param scale of the returned value.\\n     */\\n    function scaleDownToRad(uint256 value, uint256 scale) internal pure returns (uint256) {\\n        return scaleDown(value, scale, 45);\\n    }\\n\\n    /**\\n     * @notice Scales a value up from one fixed-point precision to another.\\n     * @param value to scale up.\\n     * @param from Precision to scale from.\\n     * @param to Precision to scale to.\\n     */\\n    function scaleUp(uint256 value, uint256 from, uint256 to) internal pure returns (uint256) {\\n        if (from >= to) revert NotScalingUp(from, to);\\n        return value * (10 ** (to - from));\\n    }\\n\\n    /**\\n     * @notice Scales a value down from one fixed-point precision to another.\\n     * @param value to scale down.\\n     * @param from Precision to scale from.\\n     * @param to Precision to scale to.\\n     */\\n    function scaleDown(uint256 value, uint256 from, uint256 to) internal pure returns (uint256) {\\n        if (from <= to) revert NotScalingDown(from, to);\\n        return value / (10 ** (from - to));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@balancer-labs/v2-interfaces/=lib/balancer-v2-monorepo/pkg/interfaces/\",\r\n      \"@balancer-labs/v2-pool-stable/=lib/balancer-v2-monorepo/pkg/pool-stable/\",\r\n      \"@chainlink/contracts/=lib/chainlink/contracts/\",\r\n      \"@uniswap/v3-periphery/=lib/v3-periphery/\",\r\n      \"@uniswap/v3-core/=lib/v3-core/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"balancer-v2-monorepo/=lib/balancer-v2-monorepo/\",\r\n      \"chainlink/=lib/chainlink/\",\r\n      \"ds-test/=lib/forge-safe/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"forge-safe/=lib/forge-safe/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solady/=lib/solady/\",\r\n      \"solidity-stringutils/=lib/forge-safe/lib/surl/lib/solidity-stringutils/\",\r\n      \"solmate/=lib/forge-safe/lib/solmate/src/\",\r\n      \"surl/=lib/forge-safe/lib/surl/\",\r\n      \"v3-core/=lib/v3-core/\",\r\n      \"v3-periphery/=lib/v3-periphery/contracts/\",\r\n      \"solarray/=lib/solarray/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 300\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint96\",\"name\":\"adjustedProfitMargin\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"minimumKinkRate\",\"type\":\"uint96\"},{\"internalType\":\"uint16\",\"name\":\"reserveFactor\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"adjustedBaseRate\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"minimumBaseRate\",\"type\":\"uint96\"},{\"internalType\":\"uint16\",\"name\":\"optimalUtilizationRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"distributionFactor\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"adjustedAboveKinkSlope\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"minimumAboveKinkSlope\",\"type\":\"uint96\"}],\"internalType\":\"struct IlkData[]\",\"name\":\"ilkDataList\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IYieldOracle\",\"name\":\"_yieldOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CollateralIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sum\",\"type\":\"uint256\"}],\"name\":\"DistributionFactorsDoNotSumToOne\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"InvalidIlkDataListLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumKinkRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumBaseRate\",\"type\":\"uint256\"}],\"name\":\"InvalidMinimumKinkRate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optimalUtilizationRate\",\"type\":\"uint256\"}],\"name\":\"InvalidOptimalUtilizationRate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"}],\"name\":\"InvalidReserveFactor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidYieldOracleAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"NotScalingUp\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"COLLATERAL_COUNT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalIlkDebtsLength\",\"type\":\"uint256\"}],\"name\":\"TotalDebtsLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COLLATERAL_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YIELD_ORACLE\",\"outputs\":[{\"internalType\":\"contract IYieldOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ilkIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalIlkDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEthSupply\",\"type\":\"uint256\"}],\"name\":\"calculateInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"unpackCollateralConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint96\",\"name\":\"adjustedProfitMargin\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"minimumKinkRate\",\"type\":\"uint96\"},{\"internalType\":\"uint16\",\"name\":\"reserveFactor\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"adjustedBaseRate\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"minimumBaseRate\",\"type\":\"uint96\"},{\"internalType\":\"uint16\",\"name\":\"optimalUtilizationRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"distributionFactor\",\"type\":\"uint16\"},{\"internalType\":\"uint96\",\"name\":\"adjustedAboveKinkSlope\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"minimumAboveKinkSlope\",\"type\":\"uint96\"}],\"internalType\":\"struct IlkData\",\"name\":\"ilkData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InterestRate", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "300", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000437cc840e234c2127f54cd59b0b18af59c58676000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000386125f1867ec8e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015ef86acdf95b24000000000000000000000000000000000000000000000000000000000000021340000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000116c8555df9f50000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}