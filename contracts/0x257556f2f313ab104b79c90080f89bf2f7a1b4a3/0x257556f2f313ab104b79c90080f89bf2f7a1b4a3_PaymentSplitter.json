{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFundingAllocations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\n/**\\r\\n * @title IFundingAllocations\\r\\n * @author ChangeDao\\r\\n */\\r\\n\\r\\ninterface IFundingAllocations {\\r\\n    /* ============== Events ============== */\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when owner sets a new address for ChangeDao's wallet\\r\\n     */\\r\\n    event NewWallet(address indexed changeDaoWallet);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when owner sets new royalties share amount for ChangeDao\\r\\n     */\\r\\n    event SetRoyaltiesShares(uint256 indexed shareAmount);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when owner sets new funding share amount for ChangeDao\\r\\n     */\\r\\n    event SetFundingShares(uint256 indexed shareAmount);\\r\\n\\r\\n    /* ============== Getter Functions ============== */\\r\\n\\r\\n    function changeDaoWallet() external view returns (address payable);\\r\\n\\r\\n    function changeDaoRoyalties() external view returns (uint256);\\r\\n    \\r\\n    function changeDaoFunding() external view returns (uint256);\\r\\n\\r\\n    /* ============== Setter Functions ============== */\\r\\n\\r\\n    function setChangeDaoRoyalties(uint256 _royaltiesShares) external;\\r\\n\\r\\n    function setChangeDaoFunding(uint256 _fundingShares) external;\\r\\n\\r\\n    function setChangeDaoWallet(address payable _changeDaoWallet) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IPaymentSplitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"./IFundingAllocations.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IPaymentSplitter\\r\\n * @author ChangeDao\\r\\n */\\r\\ninterface IPaymentSplitter {\\r\\n    /* ============== Events ============== */\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a payee is added to the _payees array\\r\\n     */\\r\\n    event PayeeAdded(address indexed account, uint256 indexed shares);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when ETH is released to an address\\r\\n     */\\r\\n    event ETHPaymentReleased(address indexed to, uint256 indexed amount);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when DAI or USDC is released to an address\\r\\n     */\\r\\n    event StablecoinPaymentReleased(\\r\\n        IERC20 indexed token,\\r\\n        address indexed to,\\r\\n        uint256 indexed amount\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the contract directly receives ETH\\r\\n     */\\r\\n    event ETHPaymentReceived(address indexed from, uint256 indexed amount);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a paymentSplitter clone is initialized\\r\\n     */\\r\\n    event PaymentSplitterInitialized(\\r\\n        address indexed changeMaker,\\r\\n        bytes32 indexed contractType,\\r\\n        IPaymentSplitter indexed paymentSplitterCloneAddress,\\r\\n        uint256 changeDaoShares,\\r\\n        address changeDaoWallet,\\r\\n        IFundingAllocations allocations\\r\\n    );\\r\\n\\r\\n    /* ============== Receive ============== */\\r\\n\\r\\n    receive() external payable;\\r\\n\\r\\n    /* ============== Initialize ============== */\\r\\n\\r\\n    function initialize(\\r\\n        address _changeMaker,\\r\\n        bytes32 _contractType,\\r\\n        IFundingAllocations _allocations,\\r\\n        address[] memory payees_,\\r\\n        uint256[] memory shares_\\r\\n    ) external payable;\\r\\n\\r\\n    /* ============== Getter Functions ============== */\\r\\n\\r\\n    function changeDaoShares() external view returns (uint256);\\r\\n\\r\\n    function changeDaoWallet() external view returns (address payable);\\r\\n\\r\\n    function DAI_ADDRESS() external view returns (IERC20);\\r\\n\\r\\n    function USDC_ADDRESS() external view returns (IERC20);\\r\\n\\r\\n    function payeesLength() external view returns (uint256);\\r\\n\\r\\n    function getPayee(uint256 _index) external view returns (address);\\r\\n\\r\\n    function totalShares() external view returns (uint256);\\r\\n\\r\\n    function totalReleasedETH() external view returns (uint256);\\r\\n\\r\\n    function totalReleasedERC20(IERC20 _token) external view returns (uint256);\\r\\n\\r\\n    function shares(address _account) external view returns (uint256);\\r\\n\\r\\n    function recipientReleasedETH(address _account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function recipientReleasedERC20(IERC20 _token, address _account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function pendingETHPayment(address _account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function pendingERC20Payment(IERC20 _token, address _account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /* ============== Release Functions ============== */\\r\\n\\r\\n    function releaseETH(address payable _account) external;\\r\\n\\r\\n    function releaseERC20(IERC20 _token, address _account) external;\\r\\n\\r\\n    function releaseAll(address payable _account) external;\\r\\n\\r\\n    function releaseAllFundingTypes(\\r\\n        address[] memory _fundingTokens,\\r\\n        address payable _account\\r\\n    ) external;\\r\\n\\r\\n    function ownerReleaseAll() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/PaymentSplitter/PaymentSplitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"../interfaces/IPaymentSplitter.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title PaymentSplitter\\r\\n * @author ChangeDao\\r\\n * @notice Implementation contract for royaltiesPSClones and fundingPSClones\\r\\n * @dev Modification of OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\\r\\n */\\r\\ncontract PaymentSplitter is IPaymentSplitter, Ownable, Initializable {\\r\\n    /* ============== Clone State Variables ============== */\\r\\n\\r\\n    uint256 public override changeDaoShares;\\r\\n    address payable public override changeDaoWallet;\\r\\n    bytes32 private constant _CHANGEDAO_FUNDING = \\\"CHANGEDAO_FUNDING\\\";\\r\\n    bytes32 private constant _CHANGEDAO_ROYALTIES = \\\"CHANGEDAO_ROYALTIES\\\";\\r\\n    address private constant _ETH_ADDRESS =\\r\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n    IERC20 public immutable override DAI_ADDRESS;\\r\\n    IERC20 public immutable override USDC_ADDRESS;\\r\\n\\r\\n    uint256 private _totalShares;\\r\\n    mapping(address => uint256) private _shares;\\r\\n    address[] private _payees;\\r\\n\\r\\n    uint256 private _totalReleasedETH;\\r\\n    mapping(address => uint256) private _recipientReleasedETH;\\r\\n\\r\\n    mapping(IERC20 => uint256) private _totalReleasedERC20;\\r\\n    mapping(IERC20 => mapping(address => uint256))\\r\\n        private _recipientReleasedERC20;\\r\\n\\r\\n    /* ============== Receive ============== */\\r\\n\\r\\n    /**\\r\\n     * @dev Accepts ETH sent directly to the contract\\r\\n     */\\r\\n    receive() external payable virtual override {\\r\\n        emit ETHPaymentReceived(_msgSender(), msg.value);\\r\\n    }\\r\\n\\r\\n    /* ============== Constructor ============== */\\r\\n\\r\\n    /**\\r\\n     * @param _daiAddress DAI address\\r\\n     * @param _usdcAddress USDC address\\r\\n     */\\r\\n    constructor(IERC20 _daiAddress, IERC20 _usdcAddress) payable initializer {\\r\\n        DAI_ADDRESS = _daiAddress;\\r\\n        USDC_ADDRESS = _usdcAddress;\\r\\n    }\\r\\n\\r\\n    /* ============== Initialize ============== */\\r\\n\\r\\n    /**\\r\\n     * @notice Initializes the paymentSplitter clone.\\r\\n     * @param _changeMaker Address of the changeMaker that is making the project\\r\\n     * @param _contractType Must be bytes32 \\\"CHANGEDAO_FUNDING\\\" or \\\"CHANGEDAO_ROYALTIES\\\"\\r\\n     * @param _allocations FundingAllocations address\\r\\n     * @param payees_ Array of recipient addresses\\r\\n     * @param shares_ Array of share amounts for recipients\\r\\n     */\\r\\n    function initialize(\\r\\n        address _changeMaker,\\r\\n        bytes32 _contractType,\\r\\n        IFundingAllocations _allocations,\\r\\n        address[] memory payees_,\\r\\n        uint256[] memory shares_\\r\\n    ) public payable override initializer {\\r\\n        /** Set changeDao's share amount based on values set per contract type in FundingAllocations contract */\\r\\n        if (_contractType == _CHANGEDAO_FUNDING) {\\r\\n            changeDaoShares = _allocations.changeDaoFunding();\\r\\n        } else if (_contractType == _CHANGEDAO_ROYALTIES) {\\r\\n            changeDaoShares = _allocations.changeDaoRoyalties();\\r\\n        } else revert(\\\"PS: Invalid contract type\\\");\\r\\n\\r\\n        changeDaoWallet = payable(_allocations.changeDaoWallet());\\r\\n\\r\\n        require(\\r\\n            payees_.length == shares_.length,\\r\\n            \\\"PS: payees and shares length mismatch\\\"\\r\\n        );\\r\\n        require(payees_.length > 0, \\\"PS: no payees\\\");\\r\\n        require(payees_.length <= 35, \\\"PS: payees exceed 35\\\");\\r\\n        uint256 sharesSum;\\r\\n\\r\\n        for (uint256 i = 0; i < payees_.length; i++) {\\r\\n            _addPayee(payees_[i], shares_[i]);\\r\\n            sharesSum += shares_[i];\\r\\n        }\\r\\n        _addPayee(changeDaoWallet, changeDaoShares);\\r\\n        sharesSum += changeDaoShares;\\r\\n        require(sharesSum == 10000, \\\"PS: total shares do not equal 10000\\\");\\r\\n\\r\\n        emit PaymentSplitterInitialized(\\r\\n            _changeMaker,\\r\\n            _contractType,\\r\\n            IPaymentSplitter(this),\\r\\n            changeDaoShares,\\r\\n            changeDaoWallet,\\r\\n            _allocations\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* ============== Getter Functions ============== */\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the number of recipient addresses\\r\\n     */\\r\\n    function payeesLength() public view override returns (uint256) {\\r\\n        return _payees.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the address of the payee number `index`.\\r\\n     * @param _index Index of payee address in _payees array\\r\\n     */\\r\\n    function getPayee(uint256 _index) public view override returns (address) {\\r\\n        return _payees[_index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the total shares held by all payees.\\r\\n     */\\r\\n    function totalShares() public view override returns (uint256) {\\r\\n        return _totalShares;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the total amount of Ether already released.\\r\\n     */\\r\\n    function totalReleasedETH() public view override returns (uint256) {\\r\\n        return _totalReleasedETH;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract.\\r\\n     * @param _token ERC20 token address\\r\\n     */\\r\\n    function totalReleasedERC20(IERC20 _token)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _totalReleasedERC20[_token];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the amount of shares held by an account.\\r\\n     * @param _account Address of recipient\\r\\n     */\\r\\n    function shares(address _account) public view override returns (uint256) {\\r\\n        return _shares[_account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the amount of Ether already released to a payee.\\r\\n     * @param _account Address of recipient\\r\\n     */\\r\\n    function recipientReleasedETH(address _account)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _recipientReleasedETH[_account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n   * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract.\\r\\n   * @param _token ERC20 token address\\r\\n   * @param _account Address of recipient \\r\\n\\r\\n   */\\r\\n    function recipientReleasedERC20(IERC20 _token, address _account)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _recipientReleasedERC20[_token][_account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of ETH held for a given shareholder.\\r\\n     * @param _account Address of recipient\\r\\n     */\\r\\n    function pendingETHPayment(address _account)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(_shares[_account] > 0, \\\"PS: account has no shares\\\");\\r\\n\\r\\n        uint256 totalReceived = address(this).balance + totalReleasedETH();\\r\\n        uint256 payment = _pendingPayment(\\r\\n            _account,\\r\\n            totalReceived,\\r\\n            recipientReleasedETH(_account)\\r\\n        );\\r\\n        return payment;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of DAI or USDC held for a given shareholder.\\r\\n     * @param _token ERC20 token address\\r\\n     * @param _account Address of recipient\\r\\n     */\\r\\n    function pendingERC20Payment(IERC20 _token, address _account)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(_shares[_account] > 0, \\\"PS: account has no shares\\\");\\r\\n\\r\\n        uint256 totalReceived = _token.balanceOf(address(this)) +\\r\\n            totalReleasedERC20(_token);\\r\\n        uint256 alreadyReleased = recipientReleasedERC20(_token, _account);\\r\\n\\r\\n        uint256 payment = _pendingPayment(\\r\\n            _account,\\r\\n            totalReceived,\\r\\n            alreadyReleased\\r\\n        );\\r\\n        return payment;\\r\\n    }\\r\\n\\r\\n    /* ============== Release Functions ============== */\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.\\r\\n     * @param _account Address of recipient\\r\\n     */\\r\\n    function releaseETH(address payable _account) public virtual override {\\r\\n        require(_shares[_account] > 0, \\\"PS: account has no shares\\\");\\r\\n\\r\\n        uint256 totalReceived = address(this).balance + totalReleasedETH();\\r\\n        uint256 payment = _pendingPayment(\\r\\n            _account,\\r\\n            totalReceived,\\r\\n            recipientReleasedETH(_account)\\r\\n        );\\r\\n\\r\\n        if (payment == 0) return;\\r\\n\\r\\n        _recipientReleasedETH[_account] += payment;\\r\\n        _totalReleasedETH += payment;\\r\\n\\r\\n        Address.sendValue(_account, payment);\\r\\n        emit ETHPaymentReleased(_account, payment);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract.\\r\\n     * @param _token ERC20 token address\\r\\n     * @param _account Address of recipient\\r\\n     */\\r\\n    function releaseERC20(IERC20 _token, address _account)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n    {\\r\\n        require(_shares[_account] > 0, \\\"PS: account has no shares\\\");\\r\\n\\r\\n        uint256 totalReceived = _token.balanceOf(address(this)) +\\r\\n            totalReleasedERC20(_token);\\r\\n        uint256 payment = _pendingPayment(\\r\\n            _account,\\r\\n            totalReceived,\\r\\n            recipientReleasedERC20(_token, _account)\\r\\n        );\\r\\n\\r\\n        if (payment == 0) return;\\r\\n\\r\\n        _recipientReleasedERC20[_token][_account] += payment;\\r\\n        _totalReleasedERC20[_token] += payment;\\r\\n\\r\\n        SafeERC20.safeTransfer(_token, _account, payment);\\r\\n        emit StablecoinPaymentReleased(_token, _account, payment);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Convenience function to release an account's ETH, DAI and USDC in one call\\r\\n     * @param _account Address of recipient\\r\\n     */\\r\\n    function releaseAll(address payable _account) public override {\\r\\n        releaseERC20(DAI_ADDRESS, _account);\\r\\n        releaseERC20(USDC_ADDRESS, _account);\\r\\n        releaseETH(_account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Convenience function to release ETH and ERC20 tokens (not just DAI and USDC)\\r\\n     * @dev Caller should exclude any tokens with zero balance to avoide wasting gas\\r\\n     * @dev Any non-ERC20 or ETH addresses will revert\\r\\n     * @param _account Address of recipient\\r\\n     * @param _fundingTokens Array of funding token addresses to be released to _account\\r\\n     */\\r\\n    function releaseAllFundingTypes(\\r\\n        address[] memory _fundingTokens,\\r\\n        address payable _account\\r\\n    ) external override {\\r\\n        for (uint256 i; i < _fundingTokens.length; i++) {\\r\\n            if (_fundingTokens[i] != _ETH_ADDRESS) {\\r\\n                releaseERC20(IERC20(_fundingTokens[i]), _account);\\r\\n            } else {\\r\\n                releaseETH(_account);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev ChangeDao can release any funds inadvertently sent to the implementation contract\\r\\n     */\\r\\n    function ownerReleaseAll() external override onlyOwner {\\r\\n        SafeERC20.safeTransfer(\\r\\n            DAI_ADDRESS,\\r\\n            owner(),\\r\\n            DAI_ADDRESS.balanceOf(address(this))\\r\\n        );\\r\\n        SafeERC20.safeTransfer(\\r\\n            USDC_ADDRESS,\\r\\n            owner(),\\r\\n            USDC_ADDRESS.balanceOf(address(this))\\r\\n        );\\r\\n        Address.sendValue(payable(owner()), address(this).balance);\\r\\n    }\\r\\n\\r\\n    /* ============== Internal Functions ============== */\\r\\n\\r\\n    /**\\r\\n     * @dev Internal logic for computing the pending payment of an `account` given the token historical balances and already released amounts.\\r\\n     */\\r\\n    function _pendingPayment(\\r\\n        address _account,\\r\\n        uint256 _totalReceived,\\r\\n        uint256 _alreadyReleased\\r\\n    ) private view returns (uint256) {\\r\\n        return\\r\\n            (_totalReceived * _shares[_account]) /\\r\\n            _totalShares -\\r\\n            _alreadyReleased;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a new payee to the contract.\\r\\n     * @param _account The address of the payee to add.\\r\\n     * @param shares_ The number of shares owned by the payee.\\r\\n     */\\r\\n    function _addPayee(address _account, uint256 shares_) private {\\r\\n        require(_account != address(0), \\\"PS: account is the zero address\\\");\\r\\n        require(shares_ > 0, \\\"PS: shares are 0\\\");\\r\\n        require(_shares[_account] == 0, \\\"PS: account already has shares\\\");\\r\\n\\r\\n        _payees.push(_account);\\r\\n        _shares[_account] = shares_;\\r\\n        _totalShares = _totalShares + shares_;\\r\\n        emit PayeeAdded(_account, shares_);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_daiAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usdcAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHPaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHPaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"changeMaker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contractType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract IPaymentSplitter\",\"name\":\"paymentSplitterCloneAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"changeDaoShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"changeDaoWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IFundingAllocations\",\"name\":\"allocations\",\"type\":\"address\"}],\"name\":\"PaymentSplitterInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StablecoinPaymentReleased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAI_ADDRESS\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_ADDRESS\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeDaoShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeDaoWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPayee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_changeMaker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_contractType\",\"type\":\"bytes32\"},{\"internalType\":\"contract IFundingAllocations\",\"name\":\"_allocations\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"payees_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares_\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerReleaseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payeesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pendingERC20Payment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pendingETHPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"recipientReleasedERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"recipientReleasedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"releaseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_fundingTokens\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"releaseAllFundingTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"releaseERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"releaseETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"totalReleasedERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleasedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PaymentSplitter", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}