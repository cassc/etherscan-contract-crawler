{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v2/BaseVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/INftVault.sol\\\";\\r\\n\\r\\n/// @notice Base configuration contract for the NFT Vault\\r\\nabstract contract BaseVault is INftVault, Ownable {\\r\\n    using Address for address payable;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n\\r\\n    /// @notice Basis points denominator in fee values\\r\\n    uint256 private constant BASIS_POINTS_DENOMINATOR = 10_000;\\r\\n\\r\\n    /// @notice max lock time buffer\\r\\n    uint256 internal constant MAX_LOCK_TIME_BUFFER = 1825 days; // 5 years\\r\\n\\r\\n    /// @notice max deposit fee 10%\\r\\n    uint16 private constant MAX_DEPOSIT_FEE = 1000;\\r\\n    /// @notice max withdraw fee 10%\\r\\n    uint16 private constant MAX_WITHDRAW_FEE = 1000;\\r\\n\\r\\n    /// @notice Array limit in the batch tx functions. Default 20 items\\r\\n    uint256 internal _batchTxLimit = 20;\\r\\n\\r\\n    /// @notice deposit fee percentage. denominator 10000\\r\\n    uint256 internal _depositFee;\\r\\n    /// @notice Withdraw fee percentage. denominator 10000\\r\\n    uint256 internal _withdrawFee;\\r\\n\\r\\n    /// @notice Flag to see if we use only depositable nfts (true) or use all nfts (false)\\r\\n    bool internal _isUseNftWhitelist;\\r\\n\\r\\n    /// @notice deposit fee receive wallet address\\r\\n    address payable internal _treasury;\\r\\n\\r\\n    address internal _depositValidator;\\r\\n    address internal _withdrawValidator;\\r\\n\\r\\n    /// @notice ERC20 tokens which are exempted from the deposit fee when deposited\\r\\n    mapping(address => bool) internal _depositFeeExemptedTokenList;\\r\\n\\r\\n    /// @notice ERC20 tokens which are exempted from the withdraw fee when withdrawn\\r\\n    mapping(address => bool) internal _withdrawFeeExemptedTokenList;\\r\\n\\r\\n    /// @notice A wrapper is allowed to withdraw user's token deposited\\r\\n    /// @dev key is a hash of user address and wrapper address\\r\\n    mapping(bytes32 => bool) internal _withdrawForPaymentApproved;\\r\\n    /// @notice Payment wrapper contract list which can make payment for Slash\\r\\n    EnumerableSet.AddressSet internal _wrapperList;\\r\\n\\r\\n    /// @notice Allowed nfts to be used in the NFT Vault\\r\\n    EnumerableSet.AddressSet internal _nftWhitelist;\\r\\n\\r\\n    /// @notice NFT address is on the blacklist\\r\\n    EnumerableSet.AddressSet internal _nftBlacklist;\\r\\n\\r\\n    /// @notice Tokenid is on the blacklist\\r\\n    mapping(address => EnumerableSet.UintSet) internal _tokenIdBlacklist;\\r\\n\\r\\n    /// @notice EIP20 address is on the blacklist\\r\\n    EnumerableSet.AddressSet internal _tokenBlacklist;\\r\\n\\r\\n    /// @notice Update limit of the array in the batch tx functions\\r\\n    /// @dev Only owner is allowed to call this function\\r\\n    function updateBatchTxLimit(uint256 limit_) external onlyOwner {\\r\\n        if (_batchTxLimit == limit_) revert AlreadyConfigured();\\r\\n        _batchTxLimit = limit_;\\r\\n        emit BatchTxLimitUpdated(limit_);\\r\\n    }\\r\\n\\r\\n    function batchTxLimit() external view returns (uint256) {\\r\\n        return _batchTxLimit;\\r\\n    }\\r\\n\\r\\n    /// @notice Update treasury wallet to receive fee\\r\\n    /// @param treasury_ fee receive address\\r\\n    function updateTreasury(address payable treasury_) external onlyOwner {\\r\\n        if (treasury_ == address(0)) revert InvalidZeroAddress();\\r\\n        if (_treasury == treasury_) revert AlreadyConfigured();\\r\\n\\r\\n        treasury_.sendValue(0); // We try to send 0 ETH to the new treasury address to check if it can receive ETH\\r\\n\\r\\n        _treasury = treasury_;\\r\\n\\r\\n        emit TreasuryUpdated(treasury_);\\r\\n    }\\r\\n\\r\\n    function treasury() external view returns (address payable) {\\r\\n        return _treasury;\\r\\n    }\\r\\n\\r\\n    /// @notice Exempt token from the deposit fee\\r\\n    function exemptTokenFromDepositFee(\\r\\n        address token_,\\r\\n        bool flag_\\r\\n    ) external onlyOwner {\\r\\n        if (_depositFeeExemptedTokenList[token_] == flag_)\\r\\n            revert AlreadyConfigured();\\r\\n        _depositFeeExemptedTokenList[token_] = flag_;\\r\\n\\r\\n        emit TokenExemptedFromDepositFee(token_, flag_);\\r\\n    }\\r\\n\\r\\n    /// @notice Check if the token is exempted from deposit fee in the vault\\r\\n    function isTokenExemptedFromDepositFee(\\r\\n        address token_\\r\\n    ) external view returns (bool) {\\r\\n        return _depositFeeExemptedTokenList[token_];\\r\\n    }\\r\\n\\r\\n    /// @notice Get fee amount when deposit is made with the `token` and `amount`\\r\\n    /// @dev For the exempted token, fee amount is 0\\r\\n    /// @param token_ ERC20 token which is being deposited\\r\\n    function depositFee(\\r\\n        address token_,\\r\\n        uint256 amount_\\r\\n    ) public view override returns (uint256) {\\r\\n        if (_depositFeeExemptedTokenList[token_]) return 0;\\r\\n        return (amount_ * _depositFee) / BASIS_POINTS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function depositFee() external view returns (uint256) {\\r\\n        return _depositFee;\\r\\n    }\\r\\n\\r\\n    /// @notice Update deposit fee percentage\\r\\n    /// @dev Must be less than MAX_DEPOSIT_FEE 10%\\r\\n    /// @param fee_ deposit fee percentage (denominator 10000)\\r\\n    function updateDepositFee(uint256 fee_) external onlyOwner {\\r\\n        if (fee_ > MAX_DEPOSIT_FEE) revert Overflow256(MAX_DEPOSIT_FEE, fee_);\\r\\n        if (_depositFee == fee_) revert AlreadyConfigured();\\r\\n        _depositFee = fee_;\\r\\n        emit DepositFeeUpdated(fee_);\\r\\n    }\\r\\n\\r\\n    /// @notice Exempt token from the withdraw fee\\r\\n    function exemptTokenFromWithdrawFee(\\r\\n        address token_,\\r\\n        bool flag_\\r\\n    ) external onlyOwner {\\r\\n        if (_withdrawFeeExemptedTokenList[token_] == flag_)\\r\\n            revert AlreadyConfigured();\\r\\n        _withdrawFeeExemptedTokenList[token_] = flag_;\\r\\n\\r\\n        emit TokenExemptedFromWithdrawFee(token_, flag_);\\r\\n    }\\r\\n\\r\\n    /// @notice Check if the token is exempted from deposit fee in the vault\\r\\n    function isTokenExemptedFromWithdrawFee(\\r\\n        address token_\\r\\n    ) external view returns (bool) {\\r\\n        return _withdrawFeeExemptedTokenList[token_];\\r\\n    }\\r\\n\\r\\n    /// @notice Update withdraw fee percentage\\r\\n    /// @dev Must be less than MAX_WITHDRAW_FEE 10%\\r\\n    /// @param fee_ withdraw fee percentage (denominator 10000)\\r\\n    function updateWithdrawFee(uint256 fee_) external onlyOwner {\\r\\n        if (fee_ > MAX_WITHDRAW_FEE) revert Overflow256(MAX_WITHDRAW_FEE, fee_);\\r\\n        if (_withdrawFee == fee_) revert AlreadyConfigured();\\r\\n        _withdrawFee = fee_;\\r\\n\\r\\n        emit WithdrawFeeUpdated(fee_);\\r\\n    }\\r\\n\\r\\n    /// @notice Get fee amount when withdraw is made with the `token` and `amount`\\r\\n    /// @dev For the exempted token, fee amount is 0\\r\\n    /// @param token_ ERC20 token which is being withdrawn\\r\\n    function withdrawFee(\\r\\n        address token_,\\r\\n        uint256 amount_\\r\\n    ) public view override returns (uint256) {\\r\\n        if (_withdrawFeeExemptedTokenList[token_]) return 0;\\r\\n        return (amount_ * _withdrawFee) / BASIS_POINTS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function withdrawFee() external view returns (uint256) {\\r\\n        return _withdrawFee;\\r\\n    }\\r\\n\\r\\n    /// @notice Update deposit validator\\r\\n    function updateDepositValidator(address validator_) external onlyOwner {\\r\\n        if (_depositValidator == validator_) revert AlreadyConfigured();\\r\\n        if (validator_ == address(0)) revert InvalidZeroAddress();\\r\\n        _depositValidator = validator_;\\r\\n    }\\r\\n\\r\\n    function depositValidator() external view returns (address) {\\r\\n        return _depositValidator;\\r\\n    }\\r\\n\\r\\n    /// @notice Update withdraw validator\\r\\n    function updateWithdrawValidator(address validator_) external onlyOwner {\\r\\n        if (_withdrawValidator == validator_) revert AlreadyConfigured();\\r\\n        if (validator_ == address(0)) revert InvalidZeroAddress();\\r\\n\\r\\n        _withdrawValidator = validator_;\\r\\n    }\\r\\n\\r\\n    function withdrawValidator() external view returns (address) {\\r\\n        return _withdrawValidator;\\r\\n    }\\r\\n\\r\\n    /// @notice Check if the NFT deposit whitelist is being used\\r\\n    /// @return - true when used, false when not being used\\r\\n    function isUseNftWhitelist() external view returns (bool) {\\r\\n        return _isUseNftWhitelist;\\r\\n    }\\r\\n\\r\\n    /// @notice Set the flag for using deposit whitelist or not\\r\\n    function updateIsUseNftWhitelist(bool flag_) external onlyOwner {\\r\\n        if (_isUseNftWhitelist == flag_) revert AlreadyConfigured();\\r\\n        _isUseNftWhitelist = flag_;\\r\\n\\r\\n        emit NftWhitelistUsed(flag_);\\r\\n    }\\r\\n\\r\\n    /// @notice Get whitelisted nft count\\r\\n    function whitelistedNftCount() external view returns (uint256) {\\r\\n        return _nftWhitelist.length();\\r\\n    }\\r\\n\\r\\n    /// @notice Get blacklisted tokenId\\r\\n    function blacklistTokenIdCount(\\r\\n        address nftAddress_\\r\\n    ) external view returns (uint256) {\\r\\n        return _tokenIdBlacklist[nftAddress_].length();\\r\\n    }\\r\\n\\r\\n    /// @notice Get blacklisted nft\\r\\n    function blacklistNftCount() external view returns (uint256) {\\r\\n        return _nftBlacklist.length();\\r\\n    }\\r\\n\\r\\n    /// @notice Get blacklisted token\\r\\n    function blacklistTokenCount() external view returns (uint256) {\\r\\n        return _tokenBlacklist.length();\\r\\n    }\\r\\n\\r\\n    /// @notice Allow / disallow the given nft address for the deposit\\r\\n    /// @dev We always update the whitelist regardless whitelist is used or not\\r\\n    function updateNftWhitelist(\\r\\n        address[] calldata nftAddresses_,\\r\\n        bool flag_\\r\\n    ) external onlyOwner {\\r\\n        uint256 i;\\r\\n        uint256 length = nftAddresses_.length;\\r\\n        for (; i < length; ) {\\r\\n            if (_nftWhitelist.contains(nftAddresses_[i]) != flag_) {\\r\\n                if (flag_) _nftWhitelist.add(nftAddresses_[i]);\\r\\n                else _nftWhitelist.remove(nftAddresses_[i]);\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit NftWhitelistUpdated(nftAddresses_, flag_);\\r\\n    }\\r\\n\\r\\n    /// @notice Allow / disallow the given nft address for the deposit\\r\\n    /// @dev We always update the whitelist regardless whitelist is used or not\\r\\n    function updateNftBlacklist(\\r\\n        address[] calldata nftAddresses_,\\r\\n        bool flag_\\r\\n    ) external onlyOwner {\\r\\n        uint256 i;\\r\\n        uint256 length = nftAddresses_.length;\\r\\n        for (; i < length; ) {\\r\\n            if (_nftBlacklist.contains(nftAddresses_[i]) != flag_) {\\r\\n                if (flag_) _nftBlacklist.add(nftAddresses_[i]);\\r\\n                else _nftBlacklist.remove(nftAddresses_[i]);\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit NftBlacklistUpdated(nftAddresses_, flag_);\\r\\n    }\\r\\n\\r\\n    /// @notice Allow / disallow the given token address for the deposit\\r\\n    /// @dev We always update the blacklist regardless blacklist is used or not\\r\\n    function updateTokenBlacklist(\\r\\n        address[] calldata tokens_,\\r\\n        bool flag_\\r\\n    ) external onlyOwner {\\r\\n        uint256 i;\\r\\n        uint256 length = tokens_.length;\\r\\n        for (; i < length; ) {\\r\\n            if (_tokenBlacklist.contains(tokens_[i]) != flag_) {\\r\\n                if (flag_) _tokenBlacklist.add(tokens_[i]);\\r\\n                else _tokenBlacklist.remove(tokens_[i]);\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit TokenBlacklistUpdated(tokens_, flag_);\\r\\n    }\\r\\n\\r\\n    /// @notice Add / remove the exact tokenId in nft collection for the blacklist deposit\\r\\n    function updateTokenIdBlacklist(\\r\\n        address nftAddress_,\\r\\n        uint256 tokenId_,\\r\\n        bool flag_\\r\\n    ) external onlyOwner {\\r\\n        if (_tokenIdBlacklist[nftAddress_].contains(tokenId_) == flag_)\\r\\n            revert AlreadyConfigured();\\r\\n\\r\\n        if (flag_) {\\r\\n            _tokenIdBlacklist[nftAddress_].add(tokenId_);\\r\\n            if (!_nftBlacklist.contains(nftAddress_))\\r\\n                _nftBlacklist.add(nftAddress_);\\r\\n        } else {\\r\\n            _tokenIdBlacklist[nftAddress_].remove(tokenId_);\\r\\n            if (_tokenIdBlacklist[nftAddress_].length() == 0)\\r\\n                _nftBlacklist.remove(nftAddress_);\\r\\n        }\\r\\n\\r\\n        emit TokenIdBlacklistUpdated(nftAddress_, tokenId_, flag_);\\r\\n    }\\r\\n\\r\\n    /// @notice Check tokenId is blacklisted or not\\r\\n    function tokenIdInBlacklist(\\r\\n        address nftAddress_,\\r\\n        uint256 tokenId_\\r\\n    ) public view returns (bool) {\\r\\n        return _tokenIdBlacklist[nftAddress_].contains(tokenId_);\\r\\n    }\\r\\n\\r\\n    /// @notice Check token is blacklisted or not\\r\\n    function tokenInBlacklist(address token) public view returns (bool) {\\r\\n        return _tokenBlacklist.contains(token);\\r\\n    }\\r\\n\\r\\n    /// @notice Return deposit allowed nft list\\r\\n    /// @dev This function is paginated for considering gas wastes in bulk cases\\r\\n    function getNftWhitelistPaging(\\r\\n        uint256 offset_,\\r\\n        uint256 limit_\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address[] memory nftAddresses,\\r\\n            uint256[] memory nftTokenIds,\\r\\n            uint256 nextOffset,\\r\\n            uint256 total\\r\\n        )\\r\\n    {\\r\\n        EnumerableSet.AddressSet storage nftWhitelist = _nftWhitelist;\\r\\n        total = nftWhitelist.length();\\r\\n        nftTokenIds = new uint256[](0); // nftTokenIds will not be used at the moment\\r\\n        if (offset_ >= total) nextOffset = offset_;\\r\\n        else {\\r\\n            if (offset_ + limit_ > total) limit_ = total - offset_;\\r\\n            nextOffset = offset_ + limit_;\\r\\n            nftAddresses = new address[](limit_);\\r\\n            uint256 i;\\r\\n            for (; i < limit_; ) {\\r\\n                nftAddresses[i] = nftWhitelist.at(i + offset_);\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Return deposit blacklist nft list\\r\\n    /// @dev This function is paginated for considering gas wastes in bulk cases\\r\\n    function getNftBlacklistPaging(\\r\\n        uint256 offset_,\\r\\n        uint256 limit_\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address[] memory nftAddresses,\\r\\n            uint256 nextOffset,\\r\\n            uint256 total\\r\\n        )\\r\\n    {\\r\\n        EnumerableSet.AddressSet storage nftBlacklist = _nftBlacklist;\\r\\n        total = nftBlacklist.length();\\r\\n        if (offset_ >= total) nextOffset = offset_;\\r\\n        else {\\r\\n            if (offset_ + limit_ > total) limit_ = total - offset_;\\r\\n            nextOffset = offset_ + limit_;\\r\\n            nftAddresses = new address[](limit_);\\r\\n            uint256 i;\\r\\n            for (; i < limit_; ) {\\r\\n                nftAddresses[i] = nftBlacklist.at(i + offset_);\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Return deposit blacklist token list\\r\\n    /// @dev This function is paginated for considering gas wastes in bulk cases\\r\\n    function getTokenBlacklistPaging(\\r\\n        uint256 offset_,\\r\\n        uint256 limit_\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory tokens, uint256 nextOffset, uint256 total)\\r\\n    {\\r\\n        EnumerableSet.AddressSet storage tokenBlacklist = _tokenBlacklist;\\r\\n        total = tokenBlacklist.length();\\r\\n        if (offset_ >= total) nextOffset = offset_;\\r\\n        else {\\r\\n            if (offset_ + limit_ > total) limit_ = total - offset_;\\r\\n            nextOffset = offset_ + limit_;\\r\\n            tokens = new address[](limit_);\\r\\n            uint256 i;\\r\\n            for (; i < limit_; ) {\\r\\n                tokens[i] = tokenBlacklist.at(i + offset_);\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Return deposit blacklist nft tokenid\\r\\n    /// @dev This function is paginated for considering gas wastes in bulk cases\\r\\n    function getTokenIdBlacklistPaging(\\r\\n        address nftAddress_,\\r\\n        uint256 offset_,\\r\\n        uint256 limit_\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory nftTokenIds,\\r\\n            uint256 nextOffset,\\r\\n            uint256 total\\r\\n        )\\r\\n    {\\r\\n        EnumerableSet.UintSet storage tokenIdBlacklist = _tokenIdBlacklist[\\r\\n            nftAddress_\\r\\n        ];\\r\\n        total = tokenIdBlacklist.length();\\r\\n        nftTokenIds = new uint256[](0); // nftTokenIds will not be used at the moment\\r\\n        if (offset_ >= total) nextOffset = offset_;\\r\\n        else {\\r\\n            if (offset_ + limit_ > total) limit_ = total - offset_;\\r\\n            nextOffset = offset_ + limit_;\\r\\n            nftTokenIds = new uint256[](limit_);\\r\\n            uint256 i;\\r\\n            for (; i < limit_; ) {\\r\\n                nftTokenIds[i] = tokenIdBlacklist.at(i + offset_);\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Get payment wrapper count\\r\\n    function wrapperCount() external view returns (uint256) {\\r\\n        return _wrapperList.length();\\r\\n    }\\r\\n\\r\\n    /// @notice Return wrapper count\\r\\n    /// @dev This function is paginated for considering gas wastes in bulk cases\\r\\n    function getWrapperListPaging(\\r\\n        uint256 offset_,\\r\\n        uint256 limit_\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory wrappers, uint256 nextOffset, uint256 total)\\r\\n    {\\r\\n        EnumerableSet.AddressSet storage wrapperList = _wrapperList;\\r\\n        total = wrapperList.length();\\r\\n        if (offset_ >= total) nextOffset = offset_;\\r\\n        else {\\r\\n            if (offset_ + limit_ > total) limit_ = total - offset_;\\r\\n            nextOffset = offset_ + limit_;\\r\\n            wrappers = new address[](limit_);\\r\\n            uint256 i;\\r\\n            for (; i < limit_; ) {\\r\\n                wrappers[i] = wrapperList.at(i + offset_);\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Add / remove item in the wrapper list\\r\\n    function updateWrapperList(\\r\\n        address wrapper_,\\r\\n        bool flag_\\r\\n    ) external onlyOwner {\\r\\n        if (_wrapperList.contains(wrapper_) == flag_)\\r\\n            revert AlreadyConfigured();\\r\\n\\r\\n        if (flag_) _wrapperList.add(wrapper_);\\r\\n        else _wrapperList.remove(wrapper_);\\r\\n\\r\\n        emit WrapperUpdated(wrapper_, flag_);\\r\\n    }\\r\\n\\r\\n    /// @notice Check if the given contract is allowed to call deposit & payment function\\r\\n    function isWrapper(address contract_) external view returns (bool) {\\r\\n        return _wrapperList.contains(contract_);\\r\\n    }\\r\\n\\r\\n    /// @notice Approve wrapper to withdraw funds from the vault contract\\r\\n    function approveWrapper(address wrapper_, bool flag_) external {\\r\\n        if (!_wrapperList.contains(wrapper_) && flag_) revert InvalidWrapper();\\r\\n        bytes32 key = keccak256(abi.encodePacked(_msgSender(), wrapper_));\\r\\n        if (_withdrawForPaymentApproved[key] == flag_)\\r\\n            revert AlreadyConfigured();\\r\\n        _withdrawForPaymentApproved[key] = flag_;\\r\\n\\r\\n        emit WrapperApprovedForPayment(_msgSender(), wrapper_, flag_);\\r\\n    }\\r\\n\\r\\n    /// @notice Check if the wrapper is approved to withdraw user's tokens\\r\\n    function wrapperApproved(\\r\\n        address account_,\\r\\n        address wrapper_\\r\\n    ) external view returns (bool) {\\r\\n        bytes32 key = keccak256(abi.encodePacked(account_, wrapper_));\\r\\n        return _withdrawForPaymentApproved[key];\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/v2/interfaces/IDepositValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IDepositValidator {\\r\\n    /// @notice Check if the given nft is valid one for being used in nft vault\\r\\n    /// @dev nftAddress is only used at the moment, other args may be used later\\r\\n    /// @dev Only ERC721 standard is being supported at the moment\\r\\n    function isValid(\\r\\n        address /* remitter_ */, // may be used later\\r\\n        address nftAddress_,\\r\\n        uint256 /* nftTokenId_ */ // may be used later\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/v2/interfaces/INftVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface INftVault {\\r\\n    enum BalanceFetchType {\\r\\n        UNLOCKED_ONLY,\\r\\n        LOCKED_ONLY,\\r\\n        ALL\\r\\n    }\\r\\n\\r\\n    /// @notice Get fee amount when withdraw is made with the `token` and `amount`\\r\\n    /// @dev For the exempted token, fee amount is 0\\r\\n    /// @param token_ ERC20 token which is being withdrawn\\r\\n    function withdrawFee(\\r\\n        address token_,\\r\\n        uint256 amount_\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /// @notice Get fee amount when deposit is made with the `token` and `amount`\\r\\n    /// @dev For the exempted token, fee amount is 0\\r\\n    /// @param token_ ERC20 token which is being deposited\\r\\n    function depositFee(\\r\\n        address token_,\\r\\n        uint256 amount_\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /// @notice Batch deposit for several nft tokens + token ids\\r\\n    /// @param erc20Token_ ERC20 token contract address to deposit\\r\\n    /// @param nftAddresses_ key NFT contract addresses\\r\\n    /// @param nftTokenIds_ key NFT contract token IDs\\r\\n    /// @param amounts_ deposit amounts\\r\\n    /// @param unlockAt_ the time until the deposited tokens are locked\\r\\n    function batchDeposit(\\r\\n        address erc20Token_,\\r\\n        address[] calldata nftAddresses_,\\r\\n        uint256[] calldata nftTokenIds_,\\r\\n        uint256[] calldata amounts_,\\r\\n        uint64 unlockAt_\\r\\n    ) external payable;\\r\\n\\r\\n    /// @notice Withdraw for making payment on the Slash Protocol\\r\\n    /// @param account_ Account who is going to make payment via Slash\\r\\n    /// @param nftAddress_ key NFT contract address\\r\\n    /// @param nftTokenId_ key NFT token ID\\r\\n    /// @param erc20Token_ withdraw token contract address\\r\\n    /// @param amount_ withdraw amount\\r\\n    function withdrawForPayment(\\r\\n        address account_,\\r\\n        address erc20Token_,\\r\\n        address nftAddress_,\\r\\n        uint256 nftTokenId_,\\r\\n        uint256 amount_\\r\\n    ) external;\\r\\n\\r\\n    event BatchTxLimitUpdated(uint256 limit);\\r\\n    event Deposited(\\r\\n        address erc20Token,\\r\\n        address nftAddress,\\r\\n        uint256 nftTokenId,\\r\\n        uint256 amount,\\r\\n        uint64 unlockAt\\r\\n    );\\r\\n    event DepositFeeUpdated(uint256 fee);\\r\\n    event NftWhitelistUpdated(address nftAddress, bool flag);\\r\\n    event TokenIdBlacklistUpdated(\\r\\n        address nftAddress,\\r\\n        uint256 tokenId,\\r\\n        bool flag\\r\\n    );\\r\\n    event UpdateTrustedForwarder(address forwarder);\\r\\n    event NftWhitelistUpdated(address[] nftAddress, bool flag);\\r\\n    event NftBlacklistUpdated(address[] nftAddress, bool flag);\\r\\n    event TokenBlacklistUpdated(address[] tokens, bool flag);\\r\\n    event NftWhitelistUsed(bool flag);\\r\\n    event RecoverWrongToken(address token, uint256 amount);\\r\\n    event TokenExemptedFromDepositFee(address token, bool flag);\\r\\n    event TokenExemptedFromWithdrawFee(address token, bool flag);\\r\\n    event TreasuryUpdated(address payable treasury);\\r\\n    event Locked(\\r\\n        address holder,\\r\\n        address erc20Token,\\r\\n        address nftAddress,\\r\\n        uint256 nftTokenId,\\r\\n        uint256 amount,\\r\\n        uint64 unlockAt\\r\\n    );\\r\\n    event Relocked(\\r\\n        address holder,\\r\\n        address erc20Token,\\r\\n        address nftAddress,\\r\\n        uint256 nftTokenId,\\r\\n        uint64 lockId,\\r\\n        uint64 unlockAt\\r\\n    );\\r\\n    event Unlocked(\\r\\n        address holder,\\r\\n        address erc20Token,\\r\\n        address nftAddress,\\r\\n        uint256 nftTokenId,\\r\\n        uint64 lockId\\r\\n    );\\r\\n    event WithdrawFeeUpdated(uint256 fee);\\r\\n    event Withdrawn(\\r\\n        address recipient,\\r\\n        address erc20Token,\\r\\n        address nftAddress,\\r\\n        uint256 nftTokenId,\\r\\n        uint256 amountWithdrawn,\\r\\n        uint256 feePaid\\r\\n    );\\r\\n    event WrapperApprovedForPayment(\\r\\n        address account,\\r\\n        address wrapper,\\r\\n        bool flag\\r\\n    );\\r\\n    event WrapperUpdated(address wrapper, bool flag);\\r\\n\\r\\n    error AlreadyConfigured();\\r\\n    error AlreadyLocked();\\r\\n    error InsufficientTransfer(uint256 expected, uint256 actual);\\r\\n    error InvalidNft();\\r\\n    error InvalidWrapper();\\r\\n    error InvalidZeroAddress();\\r\\n    error InvalidZeroAmount();\\r\\n    error Overflow256(uint256 limit, uint256 actual);\\r\\n    error TooMuchWithdrawals(uint256 available, uint256 actual);\\r\\n    error UnapprovedWrapper();\\r\\n    error Unpermitted();\\r\\n    error InvalidUnlockTime();\\r\\n    error InvalidArraySize();\\r\\n    error InvalidToken(address token);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/v2/interfaces/IWithdrawValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IWithdrawValidator {\\r\\n    /// @notice Check if the owner is able to withdraw tokens from nft vault\\r\\n    /// @dev It just checks if the owner holds given `tokenId` of the `nftAddress`\\r\\n    /// @dev Only ERC721 standard is being supported at the moment\\r\\n    function isValid(\\r\\n        address owner_,\\r\\n        address nftAddress_,\\r\\n        uint256 tokenId_\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/v2/libs/IterableAddressMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nstruct ItAddressMap {\\r\\n    // address => index\\r\\n    mapping(address => uint256) indexs;\\r\\n    // array of address\\r\\n    address[] keys;\\r\\n    // never use it, just for keep compile success.\\r\\n    uint256 size;\\r\\n}\\r\\n\\r\\nlibrary IterableAddressMap {\\r\\n    /// @notice Insert new address\\r\\n    function insert(ItAddressMap storage self_, address key_) internal {\\r\\n        uint256 keyIndex = self_.indexs[key_];\\r\\n        if (keyIndex > 0) return;\\r\\n        else {\\r\\n            self_.keys.push(key_);\\r\\n            self_.indexs[key_] = self_.keys.length;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Remove address\\r\\n    function remove(ItAddressMap storage self_, address key_) internal {\\r\\n        uint256 index = self_.indexs[key_];\\r\\n        if (index == 0) return;\\r\\n        address lastKey = self_.keys[self_.keys.length - 1];\\r\\n        if (key_ != lastKey) {\\r\\n            self_.keys[index - 1] = lastKey;\\r\\n            self_.indexs[lastKey] = index;\\r\\n        }\\r\\n        delete self_.indexs[key_];\\r\\n        self_.keys.pop();\\r\\n    }\\r\\n\\r\\n    /// @notice Check if the address is contained\\r\\n    function contains(\\r\\n        ItAddressMap storage self_,\\r\\n        address key_\\r\\n    ) internal view returns (bool) {\\r\\n        return self_.indexs[key_] > 0;\\r\\n    }\\r\\n\\r\\n    /// @notice View the count of addresses added to this struct\\r\\n    function itemCount(\\r\\n        ItAddressMap storage self_\\r\\n    ) internal view returns (uint256) {\\r\\n        return self_.keys.length;\\r\\n    }\\r\\n\\r\\n    /// @notice View addresses added to this struct\\r\\n    /// @dev This function is paginated for supporting the bulk addresses\\r\\n    function fetchItems(\\r\\n        ItAddressMap storage self_,\\r\\n        uint256 offset_,\\r\\n        uint256 count_\\r\\n    ) internal view returns (address[] memory paginatedKeys) {\\r\\n        address[] memory keys = self_.keys;\\r\\n        if (offset_ < keys.length) {\\r\\n            if (offset_ + count_ > keys.length) count_ = keys.length - offset_;\\r\\n            paginatedKeys = new address[](count_);\\r\\n            uint256 i;\\r\\n            for (; i < count_; i++) paginatedKeys[i] = keys[i + offset_];\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/v2/libs/IterableLock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nstruct ItLock {\\r\\n    // unlock time => amount\\r\\n    mapping(uint64 => uint256) data;\\r\\n    // unlock time => index\\r\\n    mapping(uint64 => uint256) indexs;\\r\\n    // array of unlock time\\r\\n    uint64[] keys;\\r\\n    // unlocked amount\\r\\n    uint256 unlockedAmount;\\r\\n    // never use it, just for keep compile success.\\r\\n    uint256 size;\\r\\n}\\r\\n\\r\\nlibrary IterableLock {\\r\\n    error InsufficientAmount();\\r\\n    error InvalidKey();\\r\\n    error NotExpired();\\r\\n    error NothingChanged();\\r\\n    error OnlyExtendable();\\r\\n    error OnlyLockable();\\r\\n    error TooMuchAmount();\\r\\n\\r\\n    ///@notice Deposit new lock to this struct\\r\\n    function deposit(\\r\\n        ItLock storage self_,\\r\\n        uint64 key_,\\r\\n        uint256 value_\\r\\n    ) internal {\\r\\n        if (value_ == 0) revert NothingChanged();\\r\\n        if (key_ <= block.timestamp) {\\r\\n            self_.unlockedAmount += value_;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 keyIndex = self_.indexs[key_];\\r\\n        self_.data[key_] += value_; // value is added to the existing unlock time\\r\\n        if (keyIndex > 0) return;\\r\\n        // When the key not exists, add it\\r\\n        self_.keys.push(key_);\\r\\n        self_.indexs[key_] = self_.keys.length;\\r\\n    }\\r\\n\\r\\n    /// @notice Lock with `key` from the `unlockedAmount`\\r\\n    function lock(ItLock storage self_, uint64 key_, uint256 value_) internal {\\r\\n        if (key_ <= block.timestamp) revert OnlyLockable();\\r\\n        uint256 availableValue = self_.unlockedAmount;\\r\\n        if (value_ > availableValue) revert TooMuchAmount();\\r\\n\\r\\n        self_.unlockedAmount -= value_;\\r\\n\\r\\n        uint256 keyIndex = self_.indexs[key_];\\r\\n        self_.data[key_] += value_; // value is added to the existing unlock time\\r\\n        if (keyIndex > 0) return;\\r\\n        // When the key not exists, add it\\r\\n        self_.keys.push(key_);\\r\\n        self_.indexs[key_] = self_.keys.length;\\r\\n    }\\r\\n\\r\\n    /// @notice Relock from `key` to `newKey`\\r\\n    function relock(\\r\\n        ItLock storage self_,\\r\\n        uint64 key_,\\r\\n        uint64 newKey_\\r\\n    ) internal {\\r\\n        if (key_ >= newKey_) revert OnlyExtendable();\\r\\n        uint256 keyIndex = self_.indexs[key_];\\r\\n        if (keyIndex == 0) revert InvalidKey();\\r\\n\\r\\n        uint256 lockedAmount = self_.data[key_];\\r\\n\\r\\n        // To remove the old key, key is swapped with last key in the key array, and then pop the `last key` which is `key` now\\r\\n        // Update index for the swapped `last key`, and then remove index and data for the `removing key`\\r\\n        uint64 lastKey = self_.keys[self_.keys.length - 1];\\r\\n        if (key_ != lastKey) {\\r\\n            self_.keys[keyIndex - 1] = lastKey;\\r\\n            self_.indexs[lastKey] = keyIndex;\\r\\n        }\\r\\n\\r\\n        delete self_.data[key_];\\r\\n        delete self_.indexs[key_];\\r\\n        self_.keys.pop();\\r\\n\\r\\n        // If new unlock time is before the current time, just add it to the unlocked amount\\r\\n        if (newKey_ <= block.timestamp) {\\r\\n            self_.unlockedAmount += lockedAmount;\\r\\n            return;\\r\\n        }\\r\\n        // If new key does not exist in the key array, add it\\r\\n        uint256 newKeyIndex = self_.indexs[newKey_];\\r\\n        if (newKeyIndex == 0) {\\r\\n            self_.keys.push(newKey_);\\r\\n            self_.indexs[newKey_] = self_.keys.length;\\r\\n        }\\r\\n        self_.data[newKey_] += lockedAmount;\\r\\n    }\\r\\n\\r\\n    /// @notice Unlock the expired lock\\r\\n    function unlock(ItLock storage self_, uint64 key_) internal {\\r\\n        if (key_ > block.timestamp) revert NotExpired();\\r\\n        uint256 keyIndex = self_.indexs[key_];\\r\\n        if (keyIndex == 0) revert InvalidKey();\\r\\n        self_.unlockedAmount += self_.data[key_];\\r\\n\\r\\n        // To remove this key, key is swapped with last key in the key array, and then pop the `last key` which is `key` now\\r\\n        // Update index for the swapped `last key`, and then remove index and data for the `removing key`\\r\\n        uint64 lastKey = self_.keys[self_.keys.length - 1];\\r\\n        if (key_ != lastKey) {\\r\\n            self_.keys[keyIndex - 1] = lastKey;\\r\\n            self_.indexs[lastKey] = keyIndex;\\r\\n        }\\r\\n\\r\\n        delete self_.data[key_];\\r\\n        delete self_.indexs[key_];\\r\\n        self_.keys.pop();\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw unlocked token\\r\\n    function withdraw(ItLock storage self_, uint256 amount_) internal {\\r\\n        if (self_.unlockedAmount < amount_) revert InsufficientAmount();\\r\\n        self_.unlockedAmount -= amount_;\\r\\n    }\\r\\n\\r\\n    /// @notice Check if there is no lock for this token\\r\\n    function empty(ItLock storage self_) internal view returns (bool) {\\r\\n        return self_.keys.length == 0 && self_.unlockedAmount == 0;\\r\\n    }\\r\\n\\r\\n    /// @notice Get available amount (unlocked)\\r\\n    function availableAmount(\\r\\n        ItLock storage self_\\r\\n    ) internal view returns (uint256) {\\r\\n        return self_.unlockedAmount;\\r\\n    }\\r\\n\\r\\n    /// @notice Fetch locks\\r\\n    /// @dev This function is pagniated for supporting the bulk locks\\r\\n    function fetchItems(\\r\\n        ItLock storage self_,\\r\\n        uint256 offset_,\\r\\n        uint256 count_\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        returns (uint64[] memory unlockDates, uint256[] memory amounts)\\r\\n    {\\r\\n        uint64[] memory keys = self_.keys;\\r\\n        if (offset_ < keys.length) {\\r\\n            if (offset_ + count_ > keys.length) count_ = keys.length - offset_;\\r\\n            unlockDates = new uint64[](count_);\\r\\n            amounts = new uint256[](count_);\\r\\n            uint256 i;\\r\\n            for (; i < count_; i++) {\\r\\n                uint64 key = keys[i + offset_];\\r\\n                unlockDates[i] = key;\\r\\n                amounts[i] = self_.data[key];\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Fetch locked amount from the key (unlock date)\\r\\n    /// @dev Actually, `key_` is same as `unlockDate`, but we return it again to keep the style\\r\\n    function fetchItem(\\r\\n        ItLock storage self_,\\r\\n        uint64 key_\\r\\n    ) internal view returns (uint64 unlockDate, uint256 amount) {\\r\\n        unlockDate = key_;\\r\\n        uint256 keyIndex = self_.indexs[key_];\\r\\n        if (keyIndex > 0) amount = self_.data[key_];\\r\\n    }\\r\\n\\r\\n    /// @notice Check if the deposited tokens exist for the key\\r\\n    function exists(\\r\\n        ItLock storage self_,\\r\\n        uint64 key_\\r\\n    ) internal view returns (bool) {\\r\\n        uint256 keyIndex = self_.indexs[key_];\\r\\n        if (keyIndex > 0) return self_.data[key_] > 0;\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/v2/libs/UniversalERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\n// File: contracts/libs/UniversalERC20.sol\\r\\n/**\\r\\n * @notice Library for wrapping ERC20 token and ETH\\r\\n * @dev It uses msg.sender directly so only use in normal contract, not in GSN-like contract\\r\\n */\\r\\nlibrary UniversalERC20 {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address payable;\\r\\n\\r\\n    IERC20 internal constant ETH_ADDRESS =\\r\\n        IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\r\\n\\r\\n    function universalTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        if (amount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        if (isETH(token)) {\\r\\n            payable(address(uint160(to))).sendValue(amount);\\r\\n            return amount;\\r\\n        }\\r\\n        uint256 balanceBefore = token.balanceOf(to);\\r\\n        token.safeTransfer(to, amount);\\r\\n        return token.balanceOf(to) - balanceBefore;\\r\\n    }\\r\\n\\r\\n    function universalTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        if (amount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        if (isETH(token)) {\\r\\n            require(msg.value >= amount, \\\"Insufficient msg.value\\\");\\r\\n            if (to != address(this))\\r\\n                payable(address(uint160(to))).sendValue(amount);\\r\\n\\r\\n            // refund redundant amount\\r\\n            if (msg.value > amount)\\r\\n                payable(address(uint160(from))).sendValue(msg.value - amount);\\r\\n\\r\\n            return amount;\\r\\n        }\\r\\n        uint256 balanceBefore = token.balanceOf(to);\\r\\n        token.safeTransferFrom(from, to, amount);\\r\\n        return token.balanceOf(to) - balanceBefore;\\r\\n    }\\r\\n\\r\\n    function universalTransferFromSenderToThis(\\r\\n        IERC20 token,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        if (amount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        if (isETH(token)) {\\r\\n            require(msg.value >= amount, \\\"Insufficient msg.value\\\");\\r\\n            // Return remainder if exist\\r\\n            if (msg.value > amount)\\r\\n                payable(msg.sender).sendValue(msg.value - amount);\\r\\n            return amount;\\r\\n        }\\r\\n        uint256 balanceBefore = token.balanceOf(address(this));\\r\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\r\\n        return token.balanceOf(address(this)) - balanceBefore;\\r\\n    }\\r\\n\\r\\n    function universalApprove(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        if (!isETH(token)) {\\r\\n            if (amount > 0 && token.allowance(address(this), to) > 0) {\\r\\n                token.safeApprove(to, 0);\\r\\n            }\\r\\n            token.safeApprove(to, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function universalBalanceOf(\\r\\n        IERC20 token,\\r\\n        address who\\r\\n    ) internal view returns (uint256) {\\r\\n        if (isETH(token)) {\\r\\n            return who.balance;\\r\\n        } else {\\r\\n            return token.balanceOf(who);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function universalDecimals(IERC20 token) internal view returns (uint256) {\\r\\n        if (isETH(token)) {\\r\\n            return 18;\\r\\n        }\\r\\n\\r\\n        (bool success, bytes memory data) = address(token).staticcall{\\r\\n            gas: 10000\\r\\n        }(abi.encodeWithSignature(\\\"decimals()\\\"));\\r\\n        if (!success || data.length == 0) {\\r\\n            (success, data) = address(token).staticcall{gas: 10000}(\\r\\n                abi.encodeWithSignature(\\\"DECIMALS()\\\")\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return (success && data.length > 0) ? abi.decode(data, (uint256)) : 18;\\r\\n    }\\r\\n\\r\\n    function isETH(IERC20 token) internal pure returns (bool) {\\r\\n        return address(token) == address(ETH_ADDRESS);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/v2/NftVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IDepositValidator.sol\\\";\\r\\nimport \\\"./interfaces/IWithdrawValidator.sol\\\";\\r\\nimport \\\"./libs/IterableAddressMap.sol\\\";\\r\\nimport \\\"./libs/IterableLock.sol\\\";\\r\\nimport \\\"./libs/UniversalERC20.sol\\\";\\r\\nimport \\\"./BaseVault.sol\\\";\\r\\n\\r\\ncontract NftVault is BaseVault, ReentrancyGuard {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using IterableLock for ItLock;\\r\\n    using IterableAddressMap for ItAddressMap;\\r\\n    using UniversalERC20 for IERC20;\\r\\n\\r\\n    /// @notice Locked tokens for the nft token address + nft token id\\r\\n    /// @dev key (bytes32) is the hash value of nft address and token id\\r\\n    mapping(bytes32 => ItAddressMap) private _lockedTokens;\\r\\n\\r\\n    /// @notice ERC20 token balance for the nft token\\r\\n    /// @dev Key (bytes32) is the hash value of nft address, nft token id and erc20 token address\\r\\n    mapping(bytes32 => ItLock) private _balances;\\r\\n\\r\\n    /// @notice total balance for each erc20 token\\r\\n    mapping(address => uint256) private _balancePerToken;\\r\\n\\r\\n    address private _trustedForwarder;\\r\\n\\r\\n    constructor(\\r\\n        address payable treasury_,\\r\\n        address depositValidator_,\\r\\n        address withdrawValidator_\\r\\n    ) {\\r\\n        if (\\r\\n            treasury_ == address(0) ||\\r\\n            depositValidator_ == address(0) ||\\r\\n            withdrawValidator_ == address(0)\\r\\n        ) revert InvalidZeroAddress();\\r\\n\\r\\n        _treasury = treasury_;\\r\\n        _depositValidator = depositValidator_;\\r\\n        _withdrawValidator = withdrawValidator_;\\r\\n\\r\\n        _depositFee = 500; // default 5%\\r\\n        _withdrawFee = 200; // default 2%\\r\\n    }\\r\\n\\r\\n    /// @notice Deposit ERC20 token with locked time for nft token + token id\\r\\n    /// @param erc20Token_ ERC20 token contract address to deposit\\r\\n    /// @param nftAddress_ key NFT contract address\\r\\n    /// @param nftTokenId_ key NFT contract token ID\\r\\n    /// @param amount_ deposit amount\\r\\n    /// @param unlockAt_ the time until the deposited token is locked\\r\\n    function deposit(\\r\\n        address erc20Token_,\\r\\n        address nftAddress_,\\r\\n        uint256 nftTokenId_,\\r\\n        uint256 amount_,\\r\\n        uint64 unlockAt_\\r\\n    ) external payable nonReentrant {\\r\\n        _deposit(erc20Token_, nftAddress_, nftTokenId_, amount_, unlockAt_);\\r\\n        _transferToken(erc20Token_, amount_);\\r\\n    }\\r\\n\\r\\n    /// @notice Batch deposit for several nft tokens + token ids\\r\\n    /// @param erc20Token_ ERC20 token contract address to deposit\\r\\n    /// @param nftAddresses_ key NFT contract addresses\\r\\n    /// @param nftTokenIds_ key NFT contract token IDs\\r\\n    /// @param amounts_ deposit amounts\\r\\n    /// @param unlockAt_ the time until the deposited tokens are locked\\r\\n    function batchDeposit(\\r\\n        address erc20Token_,\\r\\n        address[] calldata nftAddresses_,\\r\\n        uint256[] calldata nftTokenIds_,\\r\\n        uint256[] calldata amounts_,\\r\\n        uint64 unlockAt_\\r\\n    ) external payable override nonReentrant {\\r\\n        if (\\r\\n            nftAddresses_.length != nftTokenIds_.length ||\\r\\n            nftTokenIds_.length != amounts_.length\\r\\n        ) revert InvalidArraySize();\\r\\n        uint256 batchCount = nftAddresses_.length;\\r\\n        uint256 batchLimit = _batchTxLimit;\\r\\n        if (batchCount > batchLimit) revert Overflow256(batchLimit, batchCount);\\r\\n\\r\\n        uint256 sumAmount;\\r\\n        uint256 i;\\r\\n\\r\\n        for (; i < batchCount; ) {\\r\\n            _deposit(\\r\\n                erc20Token_,\\r\\n                nftAddresses_[i],\\r\\n                nftTokenIds_[i],\\r\\n                amounts_[i],\\r\\n                unlockAt_\\r\\n            );\\r\\n            sumAmount += amounts_[i];\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        _transferToken(erc20Token_, sumAmount);\\r\\n    }\\r\\n\\r\\n    /// @notice Update balance data for the deposit operation\\r\\n    function _deposit(\\r\\n        address erc20Token_,\\r\\n        address nftAddress_,\\r\\n        uint256 nftTokenId_,\\r\\n        uint256 amount_,\\r\\n        uint64 unlockAt_\\r\\n    ) internal {\\r\\n        if (unlockAt_ > block.timestamp + MAX_LOCK_TIME_BUFFER)\\r\\n            revert InvalidUnlockTime();\\r\\n        if (tokenInBlacklist(erc20Token_)) revert InvalidToken(erc20Token_);\\r\\n        if (\\r\\n            !IDepositValidator(_depositValidator).isValid(\\r\\n                _msgSender(),\\r\\n                nftAddress_,\\r\\n                nftTokenId_\\r\\n            ) ||\\r\\n            (_isUseNftWhitelist && !_nftWhitelist.contains(nftAddress_)) ||\\r\\n            tokenIdInBlacklist(nftAddress_, nftTokenId_)\\r\\n        ) revert InvalidNft();\\r\\n\\r\\n        ItLock storage itLock = _balances[\\r\\n            _hash3(nftAddress_, nftTokenId_, erc20Token_)\\r\\n        ];\\r\\n\\r\\n        // Iterate the locks and mark the expired locks as unlocked\\r\\n        itLock.deposit(unlockAt_, amount_);\\r\\n\\r\\n        ItAddressMap storage itAddressMap = _lockedTokens[\\r\\n            _hash2(nftAddress_, nftTokenId_)\\r\\n        ];\\r\\n        itAddressMap.insert(erc20Token_);\\r\\n\\r\\n        _balancePerToken[erc20Token_] += amount_;\\r\\n\\r\\n        emit Deposited(\\r\\n            erc20Token_,\\r\\n            nftAddress_,\\r\\n            nftTokenId_,\\r\\n            amount_,\\r\\n            unlockAt_\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Transfer deposited token to the nft vault, and the fee to the treasury account\\r\\n    function _transferToken(address token_, uint256 amount_) internal {\\r\\n        uint256 feeAmount = depositFee(token_, amount_);\\r\\n        amount_ += feeAmount;\\r\\n\\r\\n        // Transfer total deposit amount to the NftVault contract\\r\\n        uint256 amountTransferred = IERC20(token_).universalTransferFrom(\\r\\n            _msgSender(),\\r\\n            address(this),\\r\\n            amount_\\r\\n        );\\r\\n        // Fee token is not supported in the NftVault\\r\\n        if (amountTransferred < amount_)\\r\\n            revert InsufficientTransfer(amount_, amountTransferred);\\r\\n\\r\\n        // Transfer fee to the treasury account\\r\\n        if (feeAmount == 0) return;\\r\\n        uint256 feeTransferred = IERC20(token_).universalTransfer(\\r\\n            _treasury,\\r\\n            feeAmount\\r\\n        );\\r\\n\\r\\n        if (feeTransferred < feeAmount)\\r\\n            revert InsufficientTransfer(feeAmount, feeTransferred);\\r\\n    }\\r\\n\\r\\n    /// @notice withdraw ERC20 token from NftVault contract\\r\\n    /// _msgSender() should own key NFT\\r\\n    /// recipient is _msgSender()\\r\\n    /// @param nftAddress_ key NFT contract address\\r\\n    /// @param nftTokenId_ key NFT token ID\\r\\n    /// @param erc20Token_ withdraw token contract address\\r\\n    /// @param amount_ withdraw amount\\r\\n    function withdraw(\\r\\n        address erc20Token_,\\r\\n        address nftAddress_,\\r\\n        uint256 nftTokenId_,\\r\\n        uint256 amount_\\r\\n    ) external {\\r\\n        // Check the user who wants to withdraw owns this nft token id\\r\\n        if (\\r\\n            IERC721(nftAddress_).ownerOf(nftTokenId_) != _msgSender() ||\\r\\n            !IWithdrawValidator(_withdrawValidator).isValid(\\r\\n                _msgSender(),\\r\\n                nftAddress_,\\r\\n                nftTokenId_\\r\\n            )\\r\\n        ) revert Unpermitted();\\r\\n\\r\\n        // For the withdrwal of zero amount, it is reverted\\r\\n        if (amount_ == 0) revert InvalidZeroAmount();\\r\\n\\r\\n        _withdraw(\\r\\n            false,\\r\\n            _msgSender(),\\r\\n            erc20Token_,\\r\\n            nftAddress_,\\r\\n            nftTokenId_,\\r\\n            amount_\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw for making payment for the Slash Protocol\\r\\n    /// @param account_ Account who is going to make payment via Slash\\r\\n    /// @param nftAddress_ key NFT contract address\\r\\n    /// @param nftTokenId_ key NFT token ID\\r\\n    /// @param erc20Token_ withdraw token contract address\\r\\n    /// @param amount_ withdraw amount\\r\\n    function withdrawForPayment(\\r\\n        address account_,\\r\\n        address erc20Token_,\\r\\n        address nftAddress_,\\r\\n        uint256 nftTokenId_,\\r\\n        uint256 amount_\\r\\n    ) external override {\\r\\n        // If called via a forwarder, _msgSender() may not be a wrapper, so check with msg.sender.\\r\\n        if (!_wrapperList.contains(msg.sender)) revert Unpermitted();\\r\\n        bytes32 key = keccak256(abi.encodePacked(account_, msg.sender));\\r\\n        if (!_withdrawForPaymentApproved[key]) revert UnapprovedWrapper();\\r\\n\\r\\n        // Check the user who wants to make the slash payment owns this nft token id\\r\\n        // We check account_, not _msgSender() because _msgSender() is Payment wrapper contract\\r\\n        if (\\r\\n            IERC721(nftAddress_).ownerOf(nftTokenId_) != account_ ||\\r\\n            !IWithdrawValidator(_withdrawValidator).isValid(\\r\\n                account_,\\r\\n                nftAddress_,\\r\\n                nftTokenId_\\r\\n            )\\r\\n        ) revert Unpermitted();\\r\\n\\r\\n        _withdraw(\\r\\n            true,\\r\\n            msg.sender, // Withdraw to Payment wrapper contract\\r\\n            erc20Token_,\\r\\n            nftAddress_,\\r\\n            nftTokenId_,\\r\\n            amount_\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _withdraw(\\r\\n        bool fromWrapper,\\r\\n        address recipient_,\\r\\n        address erc20Token_,\\r\\n        address nftAddress_,\\r\\n        uint256 nftTokenId_,\\r\\n        uint256 amount_\\r\\n    ) internal nonReentrant {\\r\\n        ItLock storage itLock = _balances[\\r\\n            _hash3(nftAddress_, nftTokenId_, erc20Token_)\\r\\n        ];\\r\\n\\r\\n        // Deposited tokens in the vault for this nft + token id + erc20 token\\r\\n        uint256 tokenAmountInVault = itLock.availableAmount();\\r\\n\\r\\n        if (amount_ > tokenAmountInVault) {\\r\\n            if (fromWrapper)\\r\\n                amount_ = tokenAmountInVault; // In case of the withdrawal request for the slash payment, we just withdraw available amount in the vault\\r\\n            else revert TooMuchWithdrawals(tokenAmountInVault, amount_); // In case of the normal withdrawal, it is reverted\\r\\n        }\\r\\n\\r\\n        itLock.withdraw(amount_);\\r\\n        _balancePerToken[erc20Token_] -= amount_;\\r\\n\\r\\n        // If this token does not have amount left per this nft id, remove it from lockedTokens list\\r\\n        if (itLock.empty())\\r\\n            _lockedTokens[_hash2(nftAddress_, nftTokenId_)].remove(erc20Token_);\\r\\n\\r\\n        uint256 feeAmount;\\r\\n        if (!fromWrapper) {\\r\\n            feeAmount = withdrawFee(erc20Token_, amount_);\\r\\n            IERC20(erc20Token_).universalTransfer(_treasury, feeAmount);\\r\\n\\r\\n            amount_ -= feeAmount;\\r\\n        }\\r\\n\\r\\n        IERC20(erc20Token_).universalTransfer(recipient_, amount_);\\r\\n\\r\\n        emit Withdrawn(\\r\\n            recipient_,\\r\\n            erc20Token_,\\r\\n            nftAddress_,\\r\\n            nftTokenId_,\\r\\n            amount_,\\r\\n            feeAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Lock the unlocked tokens directly\\r\\n    /// @dev Only nft holder can relock tokens\\r\\n    function lock(\\r\\n        address erc20Token_,\\r\\n        address nftAddress_,\\r\\n        uint256 nftTokenId_,\\r\\n        uint256 amount_,\\r\\n        uint64 unlockAt_\\r\\n    ) external {\\r\\n        if (unlockAt_ > block.timestamp + MAX_LOCK_TIME_BUFFER)\\r\\n            revert InvalidUnlockTime();\\r\\n        ItLock storage itLock = _balances[\\r\\n            _hash3(nftAddress_, nftTokenId_, erc20Token_)\\r\\n        ];\\r\\n        // Check the user is the honest holder\\r\\n        if (IERC721(nftAddress_).ownerOf(nftTokenId_) != _msgSender())\\r\\n            revert Unpermitted();\\r\\n        itLock.lock(unlockAt_, amount_);\\r\\n\\r\\n        emit Locked(\\r\\n            _msgSender(),\\r\\n            erc20Token_,\\r\\n            nftAddress_,\\r\\n            nftTokenId_,\\r\\n            amount_,\\r\\n            unlockAt_\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Relock the tokens with new lock duration\\r\\n    /// @dev Only nft holder can relock tokens\\r\\n    function relock(\\r\\n        address erc20Token_,\\r\\n        address nftAddress_,\\r\\n        uint256 nftTokenId_,\\r\\n        uint64 lockId_,\\r\\n        uint64 unlockAt_\\r\\n    ) external {\\r\\n        if (unlockAt_ > block.timestamp + MAX_LOCK_TIME_BUFFER)\\r\\n            revert InvalidUnlockTime();\\r\\n        ItLock storage itLock = _balances[\\r\\n            _hash3(nftAddress_, nftTokenId_, erc20Token_)\\r\\n        ];\\r\\n        // Check the user is the honest holder\\r\\n        if (IERC721(nftAddress_).ownerOf(nftTokenId_) != _msgSender())\\r\\n            revert Unpermitted();\\r\\n        itLock.relock(lockId_, unlockAt_);\\r\\n\\r\\n        emit Relocked(\\r\\n            _msgSender(),\\r\\n            erc20Token_,\\r\\n            nftAddress_,\\r\\n            nftTokenId_,\\r\\n            lockId_,\\r\\n            unlockAt_\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Unlock expired lock for the nft token & erc20 token\\r\\n    /// @dev Only nft holder can unlock expired token\\r\\n    function unlock(\\r\\n        address erc20Token_,\\r\\n        address nftAddress_,\\r\\n        uint256 nftTokenId_,\\r\\n        uint64 lockId_\\r\\n    ) external {\\r\\n        ItLock storage itLock = _balances[\\r\\n            _hash3(nftAddress_, nftTokenId_, erc20Token_)\\r\\n        ];\\r\\n        // Check the user is the honest holder\\r\\n        if (IERC721(nftAddress_).ownerOf(nftTokenId_) != _msgSender())\\r\\n            revert Unpermitted();\\r\\n        itLock.unlock(lockId_);\\r\\n\\r\\n        emit Unlocked(\\r\\n            _msgSender(),\\r\\n            erc20Token_,\\r\\n            nftAddress_,\\r\\n            nftTokenId_,\\r\\n            lockId_\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Function for getting hash value from (address, uint256)\\r\\n    function _hash2(\\r\\n        address param1_,\\r\\n        uint256 param2_\\r\\n    ) private pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(param1_, param2_));\\r\\n    }\\r\\n\\r\\n    /// @notice Function for getting hash value from (address, uint256, address)\\r\\n    function _hash3(\\r\\n        address param1_,\\r\\n        uint256 param2_,\\r\\n        address param3_\\r\\n    ) private pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(param1_, param2_, param3_));\\r\\n    }\\r\\n\\r\\n    /// @notice Return the count of tokens lokced in this nft token id\\r\\n    function lockedTokenCount(\\r\\n        address nftAddress_,\\r\\n        uint256 nftTokenId_\\r\\n    ) external view returns (uint256) {\\r\\n        return _lockedTokens[_hash2(nftAddress_, nftTokenId_)].itemCount();\\r\\n    }\\r\\n\\r\\n    /// @notice Return tokens locked in this nft token id\\r\\n    /// @param nftAddress_ NFT contract address to fetch\\r\\n    /// @param nftTokenId_ NFT Token ID to fetch\\r\\n    /// @return tokens Token list locked in this nft token id\\r\\n    function lockedTokens(\\r\\n        address nftAddress_,\\r\\n        uint256 nftTokenId_,\\r\\n        uint256 offset_,\\r\\n        uint256 count_\\r\\n    ) external view returns (address[] memory tokens) {\\r\\n        return\\r\\n            _lockedTokens[_hash2(nftAddress_, nftTokenId_)].fetchItems(\\r\\n                offset_,\\r\\n                count_\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @notice View unlocked token amount for the nft token id\\r\\n    function unlockedAmount(\\r\\n        address erc20Token_,\\r\\n        address nftAddress_,\\r\\n        uint256 nftTokenId_\\r\\n    ) external view returns (uint256) {\\r\\n        ItLock storage itLock = _balances[\\r\\n            _hash3(nftAddress_, nftTokenId_, erc20Token_)\\r\\n        ];\\r\\n        return itLock.unlockedAmount;\\r\\n    }\\r\\n\\r\\n    /// @notice View data of the token locked for the nft token id\\r\\n    /// @param nftAddress_ NFT contract address\\r\\n    /// @param nftTokenId_ NFT token ID\\r\\n    /// @param erc20Token_ Locked token\\r\\n    /// @return unlockDates Array of lock end dates\\r\\n    /// @return amounts Array of locked amounts\\r\\n    function viewLocks(\\r\\n        address erc20Token_,\\r\\n        address nftAddress_,\\r\\n        uint256 nftTokenId_,\\r\\n        uint256 offset_,\\r\\n        uint256 count_\\r\\n    ) external view returns (uint64[] memory, uint256[] memory) {\\r\\n        ItLock storage itLock = _balances[\\r\\n            _hash3(nftAddress_, nftTokenId_, erc20Token_)\\r\\n        ];\\r\\n        return itLock.fetchItems(offset_, count_);\\r\\n    }\\r\\n\\r\\n    /// @notice View locked data of given lock id\\r\\n    /// @param nftAddress_ NFT contract address\\r\\n    /// @param nftTokenId_ NFT token ID\\r\\n    /// @param erc20Token_ Locked token\\r\\n    /// @param lockId_ Lock id, same as unlock date\\r\\n    /// @return unlockDate Lock end date\\r\\n    /// @return amount Locked amounts\\r\\n    function viewLock(\\r\\n        address erc20Token_,\\r\\n        address nftAddress_,\\r\\n        uint256 nftTokenId_,\\r\\n        uint64 lockId_\\r\\n    ) external view returns (uint64, uint256) {\\r\\n        ItLock storage itLock = _balances[\\r\\n            _hash3(nftAddress_, nftTokenId_, erc20Token_)\\r\\n        ];\\r\\n        return itLock.fetchItem(lockId_);\\r\\n    }\\r\\n\\r\\n    /// @notice Return total balance of the token deposited for nfts\\r\\n    /// @param erc20Token_ Token address\\r\\n    function balanceOf(address erc20Token_) external view returns (uint256) {\\r\\n        return _balancePerToken[erc20Token_];\\r\\n    }\\r\\n\\r\\n    /// @notice Set given `forwarder_` as trustable forwarder\\r\\n    function updateTrustedForwarder(address forwarder_) public onlyOwner {\\r\\n        _trustedForwarder = forwarder_;\\r\\n        emit UpdateTrustedForwarder(forwarder_);\\r\\n    }\\r\\n\\r\\n    function trustedForwarder() public view returns (address) {\\r\\n        return _trustedForwarder;\\r\\n    }\\r\\n\\r\\n    function isTrustedForwarder(address forwarder_) public view returns (bool) {\\r\\n        return forwarder_ == _trustedForwarder;\\r\\n    }\\r\\n\\r\\n    function _msgSender() internal view override returns (address sender) {\\r\\n        if (isTrustedForwarder(msg.sender)) {\\r\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\r\\n            }\\r\\n        } else {\\r\\n            return super._msgSender();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view override returns (bytes calldata) {\\r\\n        if (isTrustedForwarder(msg.sender)) {\\r\\n            return msg.data[:msg.data.length - 20];\\r\\n        } else {\\r\\n            return super._msgData();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Recover tokens remained in the contract except the users deposited\\r\\n    /// @dev Only owner can withdraw tokens\\r\\n    /// @param token_ withdraw token contract address\\r\\n    function recoverWrongToken(address token_) external onlyOwner {\\r\\n        uint256 balance = IERC20(token_).universalBalanceOf(address(this));\\r\\n        /// @notice It should be failed when users' deposited amount is same as total balance\\r\\n        uint256 withdrawable = balance - _balancePerToken[token_];\\r\\n\\r\\n        IERC20(token_).universalTransfer(_msgSender(), withdrawable);\\r\\n\\r\\n        emit RecoverWrongToken(token_, withdrawable);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositValidator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawValidator_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyConfigured\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"InsufficientTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArraySize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNft\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUnlockTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWrapper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingChanged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyExtendable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLockable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"Overflow256\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooMuchAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"TooMuchWithdrawals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnapprovedWrapper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unpermitted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"BatchTxLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"DepositFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"unlockAt\",\"type\":\"uint64\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"unlockAt\",\"type\":\"uint64\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"nftAddress\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"NftBlacklistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"NftWhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"nftAddress\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"NftWhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"NftWhitelistUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverWrongToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lockId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"unlockAt\",\"type\":\"uint64\"}],\"name\":\"Relocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"TokenBlacklistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"TokenExemptedFromDepositFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"TokenExemptedFromWithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"TokenIdBlacklistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lockId\",\"type\":\"uint64\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"UpdateTrustedForwarder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"WithdrawFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePaid\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"WrapperApprovedForPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"WrapperUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrapper_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag_\",\"type\":\"bool\"}],\"name\":\"approveWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Token_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Token_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"nftAddresses_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nftTokenIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint64\",\"name\":\"unlockAt_\",\"type\":\"uint64\"}],\"name\":\"batchDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchTxLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklistNftCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklistTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress_\",\"type\":\"address\"}],\"name\":\"blacklistTokenIdCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"unlockAt_\",\"type\":\"uint64\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag_\",\"type\":\"bool\"}],\"name\":\"exemptTokenFromDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag_\",\"type\":\"bool\"}],\"name\":\"exemptTokenFromWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"name\":\"getNftBlacklistPaging\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"nftAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"nextOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"name\":\"getNftWhitelistPaging\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"nftAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nftTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nextOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"name\":\"getTokenBlacklistPaging\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"nextOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"name\":\"getTokenIdBlacklistPaging\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nextOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"name\":\"getWrapperListPaging\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"wrappers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"nextOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"isTokenExemptedFromDepositFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"isTokenExemptedFromWithdrawFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder_\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUseNftWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"name\":\"isWrapper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"unlockAt_\",\"type\":\"uint64\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId_\",\"type\":\"uint256\"}],\"name\":\"lockedTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count_\",\"type\":\"uint256\"}],\"name\":\"lockedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"recoverWrongToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lockId_\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"unlockAt_\",\"type\":\"uint64\"}],\"name\":\"relock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenIdInBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenInBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lockId_\",\"type\":\"uint64\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId_\",\"type\":\"uint256\"}],\"name\":\"unlockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"name\":\"updateBatchTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"name\":\"updateDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator_\",\"type\":\"address\"}],\"name\":\"updateDepositValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag_\",\"type\":\"bool\"}],\"name\":\"updateIsUseNftWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"nftAddresses_\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"flag_\",\"type\":\"bool\"}],\"name\":\"updateNftBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"nftAddresses_\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"flag_\",\"type\":\"bool\"}],\"name\":\"updateNftWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens_\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"flag_\",\"type\":\"bool\"}],\"name\":\"updateTokenBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"flag_\",\"type\":\"bool\"}],\"name\":\"updateTokenIdBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"treasury_\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder_\",\"type\":\"address\"}],\"name\":\"updateTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator_\",\"type\":\"address\"}],\"name\":\"updateWithdrawValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrapper_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag_\",\"type\":\"bool\"}],\"name\":\"updateWrapperList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lockId_\",\"type\":\"uint64\"}],\"name\":\"viewLock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count_\",\"type\":\"uint256\"}],\"name\":\"viewLocks\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistedNftCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20Token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdrawForPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper_\",\"type\":\"address\"}],\"name\":\"wrapperApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapperCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NftVault", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b49a9f4c265038e42ecfe353c08765c64626fc50000000000000000000000000a738e88b5e065153419cf87f3f3b957060ea172b000000000000000000000000d11c2b1e293b70eb8663842e42201bbba0464e8b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}