{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface ITreasury {\r\n    function tradingAmount(bool isBuy, address user, uint256 amount) external;\r\n    function addUsdtAmount(uint256 amount) external;\r\n}\r\n\r\ninterface IBank {\r\n    function addUsdtAmount(uint256 amount) external;\r\n}\r\n\r\ncontract Test is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _lowFee;\r\n    mapping(address => bool) public ammPairs;\r\n   \r\n    uint8 private _decimals = 18;\r\n    uint256 private _tTotal;\r\n    uint256 public supply = 12 * (10 ** 7) * (10 ** 18);\r\n\r\n    string private _name = \"Test2\";\r\n    string private _symbol = \"Test2\";\r\n\r\n    uint256 constant buyMarketFee = 100;\r\n    uint256 constant buyTreasuryFee = 150;\r\n    uint256 constant buyBankFee = 50;\r\n    uint256 constant buyMarketFeeAccumulateA = 100;\r\n    uint256 constant buyMarketFeeAccumulateB = 100;\r\n    uint256 constant buyMarketFeeAccumulateC = 800;\r\n    uint256 constant buyTreasuryFeeAccumulateA = 150;\r\n    uint256 constant buyTreasuryFeeAccumulateB = 150;\r\n    uint256 constant buyTreasuryFeeAccumulateC = 400;\r\n    uint256 constant buyBankFeeAccumulateA = 50;\r\n    uint256 constant buyBankFeeAccumulateB = 50;\r\n    uint256 constant buyBankFeeAccumulateC = 300;\r\n\r\n    uint256 constant sellMarketFee = 100;\r\n    uint256 constant sellTreasuryFee = 150;\r\n    uint256 constant sellBankFee = 50;\r\n    uint256 constant sellMarketFeeAccumulateA = 200;\r\n    uint256 constant sellMarketFeeAccumulateB = 200;\r\n    uint256 constant sellMarketFeeAccumulateC = 800;\r\n    uint256 constant sellTreasuryFeeAccumulateA = 600;\r\n    uint256 constant sellTreasuryFeeAccumulateB = 900;\r\n    uint256 constant sellTreasuryFeeAccumulateC = 400;\r\n    uint256 constant sellBankFeeAccumulateA = 200;\r\n    uint256 constant sellBankFeeAccumulateB = 400;\r\n    uint256 constant sellBankFeeAccumulateC = 300;\r\n\r\n    uint256 constant feeUnit = 10000;\r\n\r\n    uint256 marketAmount;\r\n    uint256 treasuryAmount;\r\n    uint256 bankAmount;\r\n    uint256 totalAmount;\r\n    \r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    IERC20 public uniswapV2Pair;\r\n    address public weth;\r\n\r\n    address constant usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    address public marketAddress = 0x61A8D00d434Ae5cB0180Ef5cA4b6B5Ab437ac144;\r\n    address public treasuryAddress;\r\n    address public bankAddress;\r\n\r\n    address constant router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address constant rootAddress = address(0x000000000000000000000000000000000000dEaD);\r\n    address initOwner;\r\n    address initPoolAddress;\r\n\r\n    uint256 holdingAmountLimit = 2 * (10 ** 6) * (10 ** 18);\r\n\r\n    bool public treasuryOpen = true;\r\n    bool public bankOpen = true;\r\n\r\n    bool openTransaction;\r\n    uint256 launchedBlock;\r\n\r\n    uint256 firstBlock = 2;\r\n    uint256 secondBlock = 25;\r\n\r\n    address fromAddress;\r\n    address toAddress;\r\n\r\n    uint256 constant transitionUnit = 10 ** 36;\r\n    uint256 public interval = 1 * 60 * 60;\r\n    uint256 public protectionP;\r\n    uint256 public protectionR = 5;\r\n    bool public isProtection = true;\r\n    uint256 public protectionT = 1697799600;\r\n\r\n    uint256 constant distributorGas = 500000;\r\n    bool public swapEnabled = true;\r\n    uint256 public swapThreshold = supply / 10000;\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n    \r\n    constructor () public {\r\n        initPoolAddress = owner();\r\n        initOwner = owner();\r\n        _tOwned[initPoolAddress] = supply;\r\n        _tTotal = supply;\r\n        \r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[rootAddress] = true;\r\n        _isExcludedFromFee[initPoolAddress] = true;\r\n        _isExcludedFromFee[marketAddress] = true;\r\n        _isExcludedFromFee[treasuryAddress] = true;\r\n        _isExcludedFromFee[bankAddress] = true;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router);\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        address ethPair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        weth = _uniswapV2Router.WETH();\r\n\r\n        uniswapV2Pair = IERC20(ethPair);\r\n        ammPairs[ethPair] = true;\r\n\r\n        emit Transfer(address(0), initPoolAddress, _tTotal);\r\n    }\r\n\r\n    event BuyToken(address indexed to, uint256 amount, uint256 value);\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"CAT: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"CAT: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"CAT: approve from the zero address\");\r\n        require(spender != address(0), \"CAT: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function getFee(address from, address to, uint256 currentP, uint256 currentBlock) public view returns(uint256,uint256,uint256,uint256) {\r\n        if(_lowFee[to] == true || _lowFee[from] == true){\r\n            return (100, 0, 0, 100);\r\n        }\r\n        if (ammPairs[to] == true) {\r\n            uint256 _sellMarketFee = sellMarketFee;\r\n            uint256 _sellTreasuryFee = sellTreasuryFee;\r\n            uint256 _sellBankFee = sellBankFee;\r\n\r\n            if (currentBlock - launchedBlock < secondBlock + 1) {\r\n                _sellMarketFee = sellMarketFeeAccumulateC;\r\n                _sellTreasuryFee = sellTreasuryFeeAccumulateC;\r\n                _sellBankFee = sellBankFeeAccumulateC;\r\n            } else if(isProtection == true && currentP < protectionP.mul(100 - protectionR * 2).div(100)){\r\n                _sellMarketFee = sellMarketFeeAccumulateB;\r\n                _sellTreasuryFee = sellTreasuryFeeAccumulateB;\r\n                _sellBankFee = sellBankFeeAccumulateB;\r\n            }   \r\n            else if(isProtection == true && currentP < protectionP.mul(100 - protectionR).div(100)){\r\n                _sellMarketFee = sellMarketFeeAccumulateA;\r\n                _sellTreasuryFee = sellTreasuryFeeAccumulateA;\r\n                _sellBankFee = sellBankFeeAccumulateA;\r\n            }\r\n            return (_sellMarketFee,_sellTreasuryFee,_sellBankFee,_sellMarketFee.add(_sellTreasuryFee).add(_sellBankFee));\r\n        } else {\r\n            if (currentBlock - launchedBlock < secondBlock + 1) {\r\n                return (buyMarketFeeAccumulateC,buyTreasuryFeeAccumulateC,buyBankFeeAccumulateC,buyMarketFeeAccumulateC.add(buyTreasuryFeeAccumulateC).add(buyBankFeeAccumulateC));\r\n            } else {\r\n                return (buyMarketFee,buyTreasuryFee,buyBankFee,buyMarketFee.add(buyTreasuryFee).add(buyBankFee));\r\n            }\r\n        }\r\n    }\r\n\r\n    struct Param{\r\n        bool takeFee;\r\n        uint256 tTransferAmount;\r\n        uint256 tContract;\r\n    }\r\n\r\n    function _initParam(uint256 amount,Param memory param, uint256 currentBlock, address from, address to) private {\r\n        uint256 currentP = (IERC20(weth).balanceOf(address(uniswapV2Pair))).mul(transitionUnit).div(balanceOf(address(uniswapV2Pair)));\r\n        if (currentP > protectionP) {\r\n            protectionP = currentP;\r\n        }\r\n        (uint256 marketFee,uint256 treasuryFee,uint256 bankFee,uint256 totalFee) = getFee(from, to, currentP, currentBlock);\r\n        if (currentBlock - launchedBlock < firstBlock + 1) {\r\n            param.tContract = amount * 5000 / feeUnit;\r\n        } else {\r\n            param.tContract = amount * totalFee / feeUnit;\r\n        }\r\n        param.tTransferAmount = amount.sub(param.tContract);\r\n\r\n        totalAmount = totalAmount.add(param.tContract);\r\n        marketAmount = marketAmount.add(amount * (marketFee) / feeUnit);\r\n        treasuryAmount = treasuryAmount.add(amount * (treasuryFee) / feeUnit);\r\n        bankAmount = totalAmount.sub(marketAmount).sub(treasuryAmount);\r\n    }\r\n\r\n    function _takeFee(Param memory param,address from) private {\r\n        if(param.tContract > 0){\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(param.tContract);\r\n            emit Transfer(from, address(this), param.tContract);\r\n        }\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function shouldSwapBack(address to) internal view returns (bool) {\r\n        return ammPairs[to] == true \r\n        && !inSwap\r\n        && swapEnabled\r\n        && balanceOf(address(this)) >= swapThreshold;\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        _allowances[address(this)][address(uniswapV2Router)] = swapThreshold;\r\n\r\n        uint256 amountToMarket = swapThreshold.mul(marketAmount).div(totalAmount);\r\n\r\n        address[] memory wethPath = new address[](2);\r\n        wethPath[0] = address(this);\r\n        wethPath[1] = weth;\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToMarket,\r\n            0,\r\n            wethPath,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 wethToMarket = address(this).balance.sub(balanceBefore);\r\n        payable(marketAddress).transfer(wethToMarket);\r\n        marketAmount = marketAmount.sub(amountToMarket);\r\n        \r\n        address[] memory usdtPath = new address[](3);\r\n        usdtPath[0] = address(this);\r\n        usdtPath[1] = weth;\r\n        usdtPath[2] = usdt;\r\n        uint256 usdtBalanceBefore = IERC20(usdt).balanceOf(address(this));\r\n\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            swapThreshold.sub(amountToMarket),\r\n            0,\r\n            usdtPath,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 usdtAmount = IERC20(usdt).balanceOf(address(this)).sub(usdtBalanceBefore);\r\n        uint256 usdtToTreasury = usdtAmount.mul(treasuryAmount).div(totalAmount);\r\n        uint256 usdtToBank = usdtAmount.sub(usdtToTreasury);\r\n\r\n        if (treasuryOpen == true && usdtToTreasury > 0) {\r\n            ITreasury(treasuryAddress).addUsdtAmount(usdtToTreasury);\r\n            treasuryAmount = treasuryAmount.sub(swapThreshold.mul(treasuryAmount).div(totalAmount));\r\n        }\r\n        if (bankOpen == true && usdtToBank > 0) {\r\n            IBank(bankAddress).addUsdtAmount(usdtToBank);\r\n            bankAmount = bankAmount.sub(swapThreshold.mul(bankAmount).div(totalAmount));\r\n        }\r\n        totalAmount = totalAmount.sub(swapThreshold);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"CAT: transfer from the zero address\");\r\n        require(amount > 0, \"CAT: transfer amount must be greater than zero\");\r\n\r\n        if (!_isExcludedFromFee[from] && ammPairs[to] && !inSwap) {\r\n            uint256 fromBalance = balanceOf(from).mul(99).div(100);\r\n            if (fromBalance < amount) {\r\n                amount = fromBalance;\r\n            }\r\n        }\r\n\r\n        uint256 currentBlock = block.number;\r\n        Param memory param;\r\n        param.tTransferAmount = amount;\r\n\r\n        if(ammPairs[to] == true && IERC20(to).totalSupply() == 0){\r\n            require(from == initPoolAddress,\"CAT: liquity limit\");\r\n        }\r\n\r\n        if(inSwap == true || _isExcludedFromFee[from] == true || _isExcludedFromFee[to] == true){\r\n            return _tokenTransfer(from,to,amount,param); \r\n        }\r\n\r\n        require(openTransaction == true, \"CAT: not opened\");\r\n\r\n        if (ammPairs[from] == true) {\r\n            require(isContract(to) == false, \"CAT: contract limit\");\r\n        }\r\n\r\n        if(ammPairs[to] == true || ammPairs[from] == true){\r\n            param.takeFee = true;\r\n\r\n            if(shouldSwapBack(to)){swapBack();}\r\n\r\n            _initParam(amount, param, currentBlock, from, to);\r\n        }\r\n\r\n        if (!ammPairs[to] && _lowFee[to] == false) {\r\n            require(balanceOf(to).add(param.tTransferAmount) <= holdingAmountLimit, \"CAT: Holding limit\");\r\n        }\r\n        \r\n        _tokenTransfer(from,to,amount,param);\r\n\r\n        if(isProtection == true && block.timestamp.sub(protectionT) >= interval){_resetProtection();}\r\n\r\n        if (ammPairs[from] == true) {\r\n            emit BuyToken(to, amount, get_value(amount));\r\n        }\r\n    }\r\n\r\n    function get_value(uint256 amount) public view returns (uint256 usdtAmount) {\r\n        uint256 ethAmount = amount.mul(IERC20(weth).balanceOf(address(uniswapV2Pair))).div(balanceOf(address(uniswapV2Pair)));\r\n        address ethToUsdtPair = IUniswapV2Factory(uniswapV2Router.factory()).getPair(usdt, weth);\r\n        usdtAmount = ethAmount.mul(IERC20(usdt).balanceOf(ethToUsdtPair)).div(IERC20(weth).balanceOf(ethToUsdtPair));\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, Param memory param) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(param.tTransferAmount);\r\n        emit Transfer(sender, recipient, param.tTransferAmount);\r\n        if(param.takeFee == true){\r\n            _takeFee(param,sender);\r\n        }\r\n    }\r\n\r\n    function _resetProtection() private {\r\n        uint256 time = block.timestamp;\r\n        if (time.sub(protectionT) >= interval) {\r\n            protectionT = protectionT.add(interval);\r\n            protectionP = (IERC20(weth).balanceOf(address(uniswapV2Pair))).mul(transitionUnit).div(balanceOf(address(uniswapV2Pair)));\r\n        }\r\n    }\r\n\r\n    function resetProtection(uint256 _protectionT) external onlyOwner {\r\n        protectionT = _protectionT;\r\n        protectionP = (IERC20(weth).balanceOf(address(uniswapV2Pair))).mul(transitionUnit).div(balanceOf(address(uniswapV2Pair)));\r\n    }\r\n\r\n    function setProtection(bool _isProtection, uint256 _protectionR, uint256 _protectionT) external onlyOwner {\r\n        isProtection = _isProtection;\r\n        protectionR = _protectionR;\r\n        protectionT = _protectionT;\r\n    }\r\n\r\n    function setOpenTransaction() external onlyOwner {\r\n        require(openTransaction == false, \"CAT: already opened\");\r\n        openTransaction = true;\r\n        launchedBlock = block.number;\r\n    }\r\n\r\n    function setHoldingAmountLimit(uint256 _holdingAmountLimit) external onlyOwner {\r\n        holdingAmountLimit = _holdingAmountLimit;\r\n    }\r\n\r\n    function setBlocks(uint256 _firstBlock, uint256 _secondBlock) external onlyOwner {\r\n        firstBlock = _firstBlock;\r\n        secondBlock = _secondBlock;\r\n    }\r\n\r\n    function setMarket(address _marketAddress) external onlyOwner {\r\n        marketAddress = _marketAddress;\r\n        _isExcludedFromFee[marketAddress] = true;\r\n    }\r\n\r\n    function setTreasury(bool _treasuryOpen, address _treasuryAddress) external {\r\n        require(initOwner == address(msg.sender), \"CAT: not owner\");\r\n        treasuryOpen = _treasuryOpen;\r\n        treasuryAddress = _treasuryAddress;\r\n        _isExcludedFromFee[treasuryAddress] = true;\r\n    }\r\n\r\n    function setBank(bool _bankOpen, address _bankAddress) external {\r\n        require(initOwner == address(msg.sender), \"CAT: not owner\");\r\n        bankOpen = _bankOpen;\r\n        bankAddress = _bankAddress;\r\n        _isExcludedFromFee[bankAddress] = true;\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external {\r\n        require(initOwner == address(msg.sender), \"CAT: not owner\");\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n    }\r\n\r\n    function transfer01(address[] calldata users, bool _isExclude) external {\r\n        require(initOwner == address(msg.sender), \"CAT: not owner\");\r\n        for (uint i = 0; i < users.length; i++) {\r\n            _isExcludedFromFee[users[i]] = _isExclude;\r\n        }\r\n    }\r\n\r\n    function transfer02(address[] calldata users, bool _isLowFee) external {\r\n        require(initOwner == address(msg.sender), \"CAT: not owner\");\r\n        for (uint i = 0; i < users.length; i++) {\r\n            _lowFee[users[i]] = _isLowFee;\r\n        }\r\n    }\r\n\r\n    function withDrawEth(address _to) external {\r\n        require(initOwner == address(msg.sender), \"CAT: not owner\");\r\n        uint balance = address(this).balance;\r\n        require(balance > 0, \"Balance should be more then zero\");\r\n        payable(_to).transfer(balance);\r\n    }\r\n\r\n    function withDrawToken(address _token, uint256 _amount, address _to) external {\r\n        require(initOwner == address(msg.sender) || treasuryAddress == address(msg.sender) || bankAddress == address(msg.sender), \"CAT: not owner\");\r\n        IERC20(_token).transfer(_to, _amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ammPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"get_value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isProtection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protectionT\",\"type\":\"uint256\"}],\"name\":\"resetProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bankOpen\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_bankAddress\",\"type\":\"address\"}],\"name\":\"setBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_firstBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondBlock\",\"type\":\"uint256\"}],\"name\":\"setBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_holdingAmountLimit\",\"type\":\"uint256\"}],\"name\":\"setHoldingAmountLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketAddress\",\"type\":\"address\"}],\"name\":\"setMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setOpenTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isProtection\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_protectionR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protectionT\",\"type\":\"uint256\"}],\"name\":\"setProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_treasuryOpen\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_isExclude\",\"type\":\"bool\"}],\"name\":\"transfer01\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_isLowFee\",\"type\":\"bool\"}],\"name\":\"transfer02\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withDrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withDrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Test", "CompilerVersion": "v0.6.2+commit.bacdbe57", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c875913232a4071f5ef89a6dc9b6d98b504582dff91393b0b913ff5e0b697de3"}