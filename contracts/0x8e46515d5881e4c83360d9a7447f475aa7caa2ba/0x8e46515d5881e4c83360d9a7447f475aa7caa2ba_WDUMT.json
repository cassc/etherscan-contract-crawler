{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/WDUM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\n\\r\\n\\r\\ncontract WDUMT is Ownable, IERC20 {\\r\\n  \\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Token decimals\\r\\n    uint256 private _decimals;\\r\\n\\r\\n    // Token Total Supply\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    // Mapping from address to amount of Token\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    // Mapping from owner to operator's allowances\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    // Flag to check if in swap\\r\\n    bool inSwap;\\r\\n\\r\\n    // Uniswap V2 Router\\r\\n    IUniswapV2Router02 public dexRouter;\\r\\n    \\r\\n    // Buy Tax and Sell Tax when trading.\\r\\n    uint256 public buyTax = 100;\\r\\n    uint256 public sellTax = 200;\\r\\n    \\r\\n    // Tax Divisor\\r\\n    uint256 public taxDivisor = 10000;\\r\\n\\r\\n    // Max wallet size\\r\\n    uint256 private _maxWalletSize;\\r\\n\\r\\n    // Thresold to add liquidity\\r\\n    uint256 public swapThreshold = 100 * 10 ** 18;\\r\\n    uint256 public swapETHThreshold = 0.05 ether;\\r\\n\\r\\n    // Pair address with ETH on Uniswap V2\\r\\n    address public pairETH;\\r\\n\\r\\n    // Mapping from address to flag to verify if it's pair\\r\\n    mapping(address => bool) private _isPair;\\r\\n\\r\\n    // Mapping from address to flag to verify if it's fee exempt\\r\\n    mapping(address => bool) private _isFeeExempt;\\r\\n\\r\\n    // Mapping from address to flag to verify if it's fee exempt\\r\\n    mapping(address => bool) private _isLimitExempt;\\r\\n\\r\\n    // Null addresses\\r\\n    address constant private ZERO = 0x0000000000000000000000000000000000000000;\\r\\n    address constant private DEAD = 0x000000000000000000000000000000000000dEaD;\\r\\n\\r\\n    // Address list of team wallets\\r\\n    address constant public teamWallet1 = 0xC6B0486F0F298573105f311ccBA9158d1D184BFF;\\r\\n    address constant public teamWallet2 = 0x193Ef8019d0ECf92591437908E37e14874384951;\\r\\n    address constant public teamWallet3 = 0x82701b74c79269F27391D7A0d0b9Fc7Affdc607E;\\r\\n    address constant public teamWallet4 = 0x1f54ECaD6c0200d4227884745f9116c8e1EACa33;\\r\\n\\r\\n    // Marketing wallet address\\r\\n    address constant public marketingWallet = 0x256CB6490df9a4FbC1F8C176f967FFe1DD52a54A;\\r\\n\\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 ethReceived,\\r\\n        uint256 tokensAddedToLiquidity\\r\\n    );\\r\\n\\r\\n\\r\\n    /**\\r\\n    * @dev Sets the initialization values.\\r\\n    */\\r\\n    constructor() {\\r\\n\\r\\n        _name = \\\"What Do You Meme\\\";\\r\\n        _symbol = \\\"$WDUMT\\\";\\r\\n        _decimals = 18;\\r\\n        _totalSupply = 1000000000 * 10 ** 18;\\r\\n        _maxWalletSize = _totalSupply * 4 / 100;\\r\\n\\r\\n        _balances[owner()] = _totalSupply * 92 / 100;\\r\\n        _balances[teamWallet1] = _totalSupply / 50;\\r\\n        _balances[teamWallet2] = _totalSupply / 50;\\r\\n        _balances[teamWallet3] = _totalSupply / 50;\\r\\n        _balances[teamWallet4] = _totalSupply / 50;\\r\\n\\r\\n        _isFeeExempt[owner()] = true;\\r\\n        _isFeeExempt[address(this)] = true;\\r\\n        _isFeeExempt[teamWallet1] = true;\\r\\n        _isFeeExempt[teamWallet2] = true;\\r\\n        _isFeeExempt[teamWallet3] = true;\\r\\n        _isFeeExempt[teamWallet4] = true;\\r\\n\\r\\n        address router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\r\\n        dexRouter = IUniswapV2Router02(router);\\r\\n        pairETH = IUniswapV2Factory(dexRouter.factory()).createPair(dexRouter.WETH(), address(this));\\r\\n\\r\\n        _isPair[pairETH] = true;\\r\\n        _isLimitExempt[pairETH] = true;\\r\\n        _isLimitExempt[router] = true;\\r\\n        _isLimitExempt[ZERO] = true;\\r\\n        _isLimitExempt[DEAD] = true;\\r\\n\\r\\n        _approve(owner(), address(dexRouter), type(uint256).max);\\r\\n        _approve(address(this), address(dexRouter), type(uint256).max);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    modifier swapping() {\\r\\n      require(inSwap == false, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n      inSwap = true;\\r\\n      _;\\r\\n      inSwap = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the name of the token.\\r\\n    */\\r\\n    function name() public view returns(string memory) {\\r\\n      return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the symbol of the token.\\r\\n    */\\r\\n    function symbol() public view returns(string memory) {\\r\\n      return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the decimals of the token.\\r\\n    */\\r\\n    function decimals() public view returns(uint256) {\\r\\n      return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the total supply of the token.\\r\\n    */\\r\\n    function totalSupply() public view override returns(uint256) {\\r\\n      return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the total supply of the token.\\r\\n    */\\r\\n    function circulatingSupply() public view returns(uint256) {\\r\\n      return _totalSupply - balanceOf(ZERO) - balanceOf(DEAD);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the amount of tokens owned by `account`.\\r\\n    */\\r\\n    function balanceOf(address account) public view override returns(uint256) {\\r\\n      return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the max amount to hold the token.\\r\\n     */\\r\\n    function maxWalletSize() external view returns(uint256) {\\r\\n      return _maxWalletSize;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the allowances.\\r\\n    */\\r\\n    function allowance(address owner, address spender) public view override returns(uint256) {\\r\\n      return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n    */\\r\\n    function approve(address spender, uint256 amount) public override returns(bool) {\\r\\n      address owner = _msgSender();\\r\\n      _approve(owner, spender, amount);\\r\\n      return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n    */\\r\\n    function transfer(address to, uint256 amount) public override returns(bool) {\\r\\n      address owner = _msgSender();\\r\\n      _transfer(owner, to, amount);\\r\\n      return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n    * allowance mechanism. `amount` is then deducted from the caller's\\r\\n    * allowance.\\r\\n    */\\r\\n    function transferFrom(\\r\\n      address from,\\r\\n      address to,\\r\\n      uint256 amount\\r\\n    ) external override returns(bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burns the tokens from owner's account.\\r\\n     */\\r\\n    function burn(uint256 amount) external returns(bool) {\\r\\n      address owner = msg.sender;\\r\\n      require(balanceOf(owner) >= amount * 10 ** _decimals, \\\"Invalid amount\\\");\\r\\n      _balances[owner] -= amount;\\r\\n      _burn(owner, amount);\\r\\n      return true;\\r\\n    }\\r\\n\\r\\n    /*////////////////////////////////////////////////\\r\\n                    INTERNAL FUNCTIONS\\r\\n      ////////////////////////////////////////////////*/\\r\\n\\r\\n    function _spendAllowance(\\r\\n      address owner,\\r\\n      address spender,\\r\\n      uint256 amount\\r\\n    ) private {\\r\\n        uint256 currentAllowance = _allowances[owner][spender];\\r\\n        if(currentAllowance != type(uint256).max) {\\r\\n          require(currentAllowance >= amount, \\\"Insufficient allowance\\\");\\r\\n        unchecked {\\r\\n          _approve(owner, spender, currentAllowance - amount);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    \\r\\n    function _approve(\\r\\n      address owner,\\r\\n      address spender,\\r\\n      uint256 amount\\r\\n    ) private {\\r\\n        require(owner != address(0), \\\"Approval from the zero address\\\");\\r\\n        require(spender != address(0), \\\"Approval to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n      address from,\\r\\n      address to,\\r\\n      uint256 amount\\r\\n    ) private {\\r\\n      require(from != address(0), \\\"Transfer from the zero address\\\");\\r\\n      require(to != address(0), \\\"Transfer to the null address\\\");\\r\\n      require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n      require(balanceOf(from) >= amount, \\\"Transfer amount exceeds balance\\\");\\r\\n      require(_isLimitExempt[to] ||\\r\\n        (!_isLimitExempt[to] && \\r\\n        balanceOf(to) + amount <= _maxWalletSize),\\r\\n        \\\"Exceeds the max wallet size\\\"\\r\\n      );\\r\\n\\r\\n      bool buy = false;\\r\\n      bool sell = false;\\r\\n      bool other = false;\\r\\n      bool takeFee = true;\\r\\n\\r\\n      if(_isPair[from]) {\\r\\n        buy = true;\\r\\n      } else if(_isPair[to]) {\\r\\n        sell = true;\\r\\n      } else {\\r\\n        other = true;\\r\\n        uint256 ethAmount = address(this).balance;\\r\\n        if(ethAmount >= swapETHThreshold) {\\r\\n          _swapETHForTokens(ethAmount);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      if(_isFeeExempt[from] || _isFeeExempt[to] || other) {\\r\\n        takeFee = false;\\r\\n      }\\r\\n\\r\\n      _balances[from] -= amount;\\r\\n      uint256 amountReceived = takeFee ? _takeTaxes(from, buy, sell, amount) : amount;\\r\\n      _balances[to] += amountReceived;\\r\\n\\r\\n      emit Transfer(from, to, amountReceived);\\r\\n    }\\r\\n\\r\\n    function _takeTaxes(address from, bool buy, bool sell, uint256 amount) private returns(uint256) {\\r\\n      uint256 taxAmount;\\r\\n      \\r\\n      if(buy) {\\r\\n        taxAmount = amount * buyTax / taxDivisor;\\r\\n        if(taxAmount > 0) {\\r\\n          _balances[address(this)] += taxAmount;\\r\\n          emit Transfer(from, address(this), taxAmount);\\r\\n        }\\r\\n      } \\r\\n\\r\\n      else if(sell) {\\r\\n        taxAmount = amount * sellTax / taxDivisor;\\r\\n        \\r\\n        if(taxAmount > 0 ) {\\r\\n          _burn(from, taxAmount);\\r\\n        }\\r\\n\\r\\n        if(shouldAddLiquidity()) {\\r\\n          _swapAndLiquify();\\r\\n        }\\r\\n      }\\r\\n\\r\\n      return amount - taxAmount;\\r\\n    }\\r\\n\\r\\n    function shouldAddLiquidity() public view returns(bool) {\\r\\n      return \\r\\n        !inSwap && \\r\\n        balanceOf(address(this)) >= swapThreshold;\\r\\n    }\\r\\n\\r\\n    function _swapAndLiquify() private swapping {\\r\\n\\r\\n      uint256 tokensToSwap = balanceOf(address(this)) / 2;\\r\\n      uint256 tokensAddToLiquidity = balanceOf(address(this)) - tokensToSwap;\\r\\n\\r\\n      // Contract's current ETH balance.\\r\\n      uint256 initialBalance = address(this).balance;\\r\\n\\r\\n      // Swap half of the tokens to ETH.\\r\\n      _swapTokensForETH(tokensToSwap);\\r\\n\\r\\n      // Figure out the exact amount of tokens received from swapping.\\r\\n      uint256 ethAddToLiquify = address(this).balance - initialBalance;\\r\\n\\r\\n      // Add to the LP of this token and WETH pair (half ETH and half this token).\\r\\n      addLiquidity(ethAddToLiquify, tokensAddToLiquidity);\\r\\n\\r\\n      emit SwapAndLiquify(tokensToSwap, ethAddToLiquify, tokensAddToLiquidity);\\r\\n    }\\r\\n\\r\\n    function _swapTokensForETH(uint256 amount) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = dexRouter.WETH();\\r\\n\\r\\n\\r\\n        // Swap tokens to ETH\\r\\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n          amount, \\r\\n          0, \\r\\n          path, \\r\\n          address(this),  // this contract will receive the eth that were swapped from the token\\r\\n          block.timestamp + 600\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _swapETHForTokens(uint256 amount) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = dexRouter.WETH();\\r\\n        path[1] = address(this);\\r\\n\\r\\n\\r\\n        // Swap tokens to ETH\\r\\n        dexRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\\r\\n          0, \\r\\n          path, \\r\\n          address(this),  // this contract will receive the eth that were swapped from the token\\r\\n          block.timestamp + 600\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 ethAmount, uint256 tokenAmount) private {\\r\\n\\r\\n        // Add the ETH and token to LP.\\r\\n        dexRouter.addLiquidityETH{value: ethAmount}(\\r\\n            address(this), \\r\\n            tokenAmount, \\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            address(0), \\r\\n            block.timestamp + 600\\r\\n        );\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n    function _burn(address from, uint256 amount) private {\\r\\n      _totalSupply -= amount;\\r\\n      _maxWalletSize = _totalSupply * 4 / 100;\\r\\n      emit Transfer(from, address(0), amount);\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAddedToLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAddLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapETHThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet4\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WDUMT", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}