{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Fomo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport { ITransferManager } from \\\"./interfaces/ITransferManager.sol\\\";\\nimport { TokenType as TransferManagerTokenType } from \\\"./enums/TokenType.sol\\\";\\nimport { IERC20 } from \\\"./interfaces/generic/IERC20.sol\\\";\\nimport { SignatureCheckerMemory } from \\\"./SignatureCheckerMemory.sol\\\";\\nimport { ReentrancyGuard } from \\\"./ReentrancyGuard.sol\\\";\\nimport { Pausable } from \\\"./Pausable.sol\\\";\\n\\nimport { LowLevelWETH } from \\\"./lowLevelCallers/LowLevelWETH.sol\\\";\\nimport { LowLevelERC20Transfer } from \\\"./lowLevelCallers/LowLevelERC20Transfer.sol\\\";\\nimport { LowLevelERC721Transfer } from \\\"./lowLevelCallers/LowLevelERC721Transfer.sol\\\";\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { VRFCoordinatorV2Interface } from \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport { VRFConsumerBaseV2 } from \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\n\\nimport { IFomo } from \\\"./interfaces/IFomo.sol\\\";\\nimport { IPriceOracle } from \\\"./interfaces/IPriceOracle.sol\\\";\\nimport { Arrays } from \\\"./libraries/Arrays.sol\\\";\\n\\n/**\\n * @title Fomo\\n */\\ncontract Fomo is\\n    IFomo,\\n    AccessControl,\\n    VRFConsumerBaseV2,\\n    LowLevelWETH,\\n    LowLevelERC20Transfer,\\n    LowLevelERC721Transfer,\\n    ReentrancyGuard,\\n    Pausable\\n{\\n    using Arrays for uint256[];\\n\\n    /**\\n     * @notice Operators are allowed to add/remove allowed ERC-20 and ERC-721 tokens.\\n     */\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    /**\\n     * @notice The maximum protocol fee in basis points, which is 25%.\\n     */\\n    uint16 public constant MAXIMUM_PROTOCOL_FEE_BP = 2500;\\n\\n    /**\\n     * @notice Reservoir oracle's message typehash.\\n     * @dev It is used to compute the hash of the message using the (message) id, the payload, and the timestamp.\\n     */\\n    bytes32 private constant RESERVOIR_ORACLE_MESSAGE_TYPEHASH =\\n        keccak256(\\\"Message(bytes32 id,bytes payload,uint256 timestamp,uint256 chainId)\\\");\\n\\n    /**\\n     * @notice Reservoir oracle's ID typehash.\\n     * @dev It is used to compute the hash of the ID using price kind, TWAP seconds, and the contract address.\\n     */\\n    bytes32 private constant RESERVOIR_ORACLE_ID_TYPEHASH = keccak256(\\n        \\\"ContractWideCollectionPrice(uint8 kind,uint256 twapSeconds,address contract,bool onlyNonFlaggedTokens)\\\"\\n    );\\n\\n    /**\\n     * @notice Wrapped Ether address.\\n     */\\n    address private immutable WETH;\\n\\n    /**\\n     * @notice The key hash of the Chainlink VRF.\\n     */\\n    bytes32 private immutable KEY_HASH;\\n\\n    /**\\n     * @notice The subscription ID of the Chainlink VRF.\\n     */\\n    uint64 public immutable SUBSCRIPTION_ID;\\n\\n    /**\\n     * @notice The Chainlink VRF coordinator.\\n     */\\n    VRFCoordinatorV2Interface private immutable VRF_COORDINATOR;\\n\\n    /**\\n     * @notice Transfer manager faciliates token transfers.\\n     */\\n    ITransferManager private immutable transferManager;\\n\\n    /**\\n     * @notice The value of each entry in ETH.\\n     */\\n    uint256 public valuePerEntry;\\n\\n    /**\\n     * @notice The duration of each round.\\n     */\\n    uint40 public roundDuration;\\n\\n    /**\\n     * @notice The address of the protocol fee recipient.\\n     */\\n    address public protocolFeeRecipient;\\n\\n    /**\\n     * @notice The protocol fee basis points.\\n     */\\n    uint16 public protocolFeeBp;\\n\\n    /**\\n     * @notice Number of rounds that have been created.\\n     * @dev In this smart contract, roundId is an uint256 but its\\n     *      max value can only be 2^40 - 1. Realistically we will still\\n     *      not reach this number.\\n     */\\n    uint40 public roundsCount;\\n\\n    /**\\n     * @notice The maximum number of participants per round.\\n     */\\n    uint40 public maximumNumberOfParticipantsPerRound;\\n\\n    /**\\n     * @notice The maximum number of deposits per round.\\n     */\\n    uint40 public maximumNumberOfDepositsPerRound;\\n\\n    /**\\n     * @notice ERC-20 oracle address.\\n     */\\n    IPriceOracle public erc20Oracle;\\n\\n    /**\\n     * @notice Reservoir oracle address.\\n     */\\n    address public reservoirOracle;\\n\\n    /**\\n     * @notice Reservoir oracle's signature validity period.\\n     */\\n    uint40 public signatureValidityPeriod;\\n\\n    /**\\n     * @notice Randomness request waiting time.\\n     */\\n    uint40 public randomnessRequestWaitingTime;\\n\\n    /**\\n     * @notice It checks whether the currency is allowed.\\n     * @dev 0 is not allowed, 1 is allowed.\\n     */\\n    mapping(address => uint256) public isCurrencyAllowed;\\n\\n    /**\\n     * @dev roundId => Round\\n     */\\n    mapping(uint256 => Round) public rounds;\\n\\n    /**\\n     * @dev roundId => depositor => depositCount\\n     */\\n    mapping(uint256 => mapping(address => uint256)) public depositCount;\\n\\n    /**\\n     * @notice The randomness requests.\\n     * @dev The key is the request ID returned by Chainlink.\\n     */\\n    mapping(uint256 => RandomnessRequest) public randomnessRequests;\\n\\n    /**\\n     * @dev Token/collection => round ID => price.\\n     */\\n    mapping(address => mapping(uint256 => uint256)) public prices;\\n\\n    /**\\n     * @param params The constructor params.\\n     */\\n    constructor(ConstructorCalldata memory params) VRFConsumerBaseV2(params.vrfCoordinator) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, params.owner);\\n        _grantRole(OPERATOR_ROLE, params.operator);\\n        _updateRoundDuration(params.roundDuration);\\n        _updateProtocolFeeRecipient(params.protocolFeeRecipient);\\n        _updateProtocolFeeBp(params.protocolFeeBp);\\n        _updateValuePerEntry(params.valuePerEntry);\\n        _updateERC20Oracle(params.erc20Oracle);\\n        _updateMaximumNumberOfDepositsPerRound(params.maximumNumberOfDepositsPerRound);\\n        _updateMaximumNumberOfParticipantsPerRound(params.maximumNumberOfParticipantsPerRound);\\n        _updateReservoirOracle(params.reservoirOracle);\\n        _updateSignatureValidityPeriod(params.signatureValidityPeriod);\\n        _updateRandomnessRequestWaitingTime(params.randomnessRequestWaitingTime);\\n\\n        WETH = params.weth;\\n        KEY_HASH = params.keyHash;\\n        VRF_COORDINATOR = VRFCoordinatorV2Interface(params.vrfCoordinator);\\n        SUBSCRIPTION_ID = params.subscriptionId;\\n\\n        transferManager = ITransferManager(params.transferManager);\\n\\n        _startRound({ _roundsCount: 0 });\\n    }\\n\\n    /**\\n     * @inheritdoc IFomo\\n     */\\n    function cancelCurrentRoundAndDepositToTheNextRound(DepositCalldata[] calldata deposits)\\n        external\\n        payable\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        uint256 roundId = roundsCount;\\n        _cancel(roundId);\\n        _deposit(_unsafeAdd(roundId, 1), deposits);\\n    }\\n\\n    /**\\n     * @inheritdoc IFomo\\n     */\\n    function deposit(\\n        uint256 roundId,\\n        DepositCalldata[] calldata deposits\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        _deposit(roundId, deposits);\\n    }\\n\\n    /**\\n     * @inheritdoc IFomo\\n     */\\n    function getDeposits(uint256 roundId) external view returns (Deposit[] memory) {\\n        return rounds[roundId].deposits;\\n    }\\n\\n    function drawWinner() external nonReentrant whenNotPaused {\\n        uint256 roundId = roundsCount;\\n        Round storage round = rounds[roundId];\\n\\n        _validateRoundStatus(round, RoundStatus.Open);\\n\\n        if (block.timestamp < round.cutoffTime) {\\n            revert CutoffTimeNotReached();\\n        }\\n\\n        if (round.numberOfParticipants < 2) {\\n            revert InsufficientParticipants();\\n        }\\n\\n        _drawWinner(round, roundId);\\n    }\\n\\n    function cancel() external nonReentrant whenNotPaused {\\n        _cancel({ roundId: roundsCount });\\n    }\\n\\n    /**\\n     * @inheritdoc IFomo\\n     */\\n    function cancelAfterRandomnessRequest() external nonReentrant whenNotPaused {\\n        uint256 roundId = roundsCount;\\n        Round storage round = rounds[roundId];\\n\\n        _validateRoundStatus(round, RoundStatus.Drawing);\\n\\n        if (block.timestamp < round.drawnAt + randomnessRequestWaitingTime) {\\n            revert DrawExpirationTimeNotReached();\\n        }\\n\\n        round.status = RoundStatus.Cancelled;\\n\\n        emit RoundStatusUpdated(roundId, RoundStatus.Cancelled);\\n\\n        _startRound({ _roundsCount: roundId });\\n    }\\n\\n    /**\\n     * @inheritdoc IFomo\\n     */\\n    function claimPrizes(ClaimPrizesCalldata[] calldata claimPrizesCalldata)\\n        external\\n        payable\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        TransferAccumulator memory transferAccumulator;\\n        uint256 ethAmount;\\n        uint256 protocolFeeOwed;\\n\\n        for (uint256 i; i < claimPrizesCalldata.length;) {\\n            ClaimPrizesCalldata calldata perRoundClaimPrizesCalldata = claimPrizesCalldata[i];\\n\\n            Round storage round = rounds[perRoundClaimPrizesCalldata.roundId];\\n\\n            _validateRoundStatus(round, RoundStatus.Drawn);\\n\\n            if (msg.sender != round.winner) {\\n                revert NotWinner();\\n            }\\n\\n            uint256[] calldata prizeIndices = perRoundClaimPrizesCalldata.prizeIndices;\\n\\n            for (uint256 j; j < prizeIndices.length;) {\\n                uint256 index = prizeIndices[j];\\n                if (index >= round.deposits.length) {\\n                    revert InvalidIndex();\\n                }\\n\\n                Deposit storage prize = round.deposits[index];\\n\\n                if (prize.withdrawn) {\\n                    revert AlreadyWithdrawn();\\n                }\\n\\n                prize.withdrawn = true;\\n\\n                TokenType tokenType = prize.tokenType;\\n                if (tokenType == TokenType.ETH) {\\n                    ethAmount += prize.tokenAmount;\\n                } else if (tokenType == TokenType.ERC721) {\\n                    _executeERC721TransferFrom(prize.tokenAddress, address(this), msg.sender, prize.tokenId);\\n                } else if (tokenType == TokenType.ERC20) {\\n                    address prizeAddress = prize.tokenAddress;\\n                    if (prizeAddress == transferAccumulator.tokenAddress) {\\n                        transferAccumulator.amount += prize.tokenAmount;\\n                    } else {\\n                        if (transferAccumulator.amount != 0) {\\n                            _executeERC20DirectTransfer(\\n                                transferAccumulator.tokenAddress, msg.sender, transferAccumulator.amount\\n                            );\\n                        }\\n\\n                        transferAccumulator.tokenAddress = prizeAddress;\\n                        transferAccumulator.amount = prize.tokenAmount;\\n                    }\\n                }\\n\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n\\n            protocolFeeOwed += round.protocolFeeOwed;\\n            round.protocolFeeOwed = 0;\\n\\n            emit PrizesClaimed(perRoundClaimPrizesCalldata.roundId, msg.sender, prizeIndices);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (protocolFeeOwed != 0) {\\n            _transferETHAndWrapIfFailWithGasLimit(WETH, protocolFeeRecipient, protocolFeeOwed, gasleft());\\n\\n            protocolFeeOwed -= msg.value; // msg.value is the protocol fee paid\\n            if (protocolFeeOwed < ethAmount) {\\n                // ethAmount is the total prize amount, if protocolFeeOwed is less than ethAmount, then pay the protocol\\n                    // fee with ethAmount\\n                unchecked {\\n                    ethAmount -= protocolFeeOwed;\\n                }\\n                protocolFeeOwed = 0;\\n            } else {\\n                // if protocolFeeOwed is greater than ethAmount or equal to ethAmount, then protocolFeeOwed -= ethAmount\\n                unchecked {\\n                    protocolFeeOwed -= ethAmount;\\n                }\\n                ethAmount = 0;\\n            }\\n\\n            if (protocolFeeOwed != 0) {\\n                // if protocolFeeOwed is not 0, then revert. it means protocolFeeOwed is greater than the addition of\\n                    // ethAmount and msg.value\\n                revert ProtocolFeeNotPaid();\\n            }\\n        }\\n\\n        if (transferAccumulator.amount != 0) {\\n            _executeERC20DirectTransfer(transferAccumulator.tokenAddress, msg.sender, transferAccumulator.amount);\\n        }\\n\\n        if (ethAmount != 0) {\\n            _transferETHAndWrapIfFailWithGasLimit(WETH, msg.sender, ethAmount, gasleft());\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IFomo\\n     * @dev This function does not validate claimPrizesCalldata to not contain duplicate round IDs and prize indices.\\n     *      It is the responsibility of the caller to ensure that. Otherwise, the returned protocol fee owed will be\\n     * incorrect.\\n     */\\n    function getClaimPrizesPaymentRequired(ClaimPrizesCalldata[] calldata claimPrizesCalldata)\\n        external\\n        view\\n        returns (uint256 protocolFeeOwed)\\n    {\\n        uint256 ethAmount;\\n\\n        for (uint256 i; i < claimPrizesCalldata.length;) {\\n            ClaimPrizesCalldata calldata perRoundClaimPrizesCalldata = claimPrizesCalldata[i];\\n            Round storage round = rounds[perRoundClaimPrizesCalldata.roundId];\\n\\n            _validateRoundStatus(round, RoundStatus.Drawn);\\n\\n            uint256[] calldata prizeIndices = perRoundClaimPrizesCalldata.prizeIndices;\\n            uint256 numberOfPrizes = prizeIndices.length;\\n            uint256 prizesCount = round.deposits.length;\\n\\n            for (uint256 j; j < numberOfPrizes;) {\\n                uint256 index = prizeIndices[j];\\n                if (index >= prizesCount) {\\n                    revert InvalidIndex();\\n                }\\n\\n                Deposit storage prize = round.deposits[index];\\n                if (prize.tokenType == TokenType.ETH) {\\n                    ethAmount += prize.tokenAmount;\\n                }\\n\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n\\n            protocolFeeOwed += round.protocolFeeOwed;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (protocolFeeOwed < ethAmount) {\\n            protocolFeeOwed = 0;\\n        } else {\\n            unchecked {\\n                protocolFeeOwed -= ethAmount;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IFomo\\n     */\\n    function withdrawDeposits(uint256 roundId, uint256[] calldata depositIndices) external nonReentrant whenNotPaused {\\n        Round storage round = rounds[roundId];\\n\\n        _validateRoundStatus(round, RoundStatus.Cancelled);\\n\\n        uint256 numberOfDeposits = depositIndices.length;\\n        uint256 depositsCount = round.deposits.length;\\n        uint256 ethAmount;\\n\\n        for (uint256 i; i < numberOfDeposits;) {\\n            uint256 index = depositIndices[i];\\n            if (index >= depositsCount) {\\n                revert InvalidIndex();\\n            }\\n\\n            Deposit storage depositedToken = round.deposits[index];\\n            if (depositedToken.depositor != msg.sender) {\\n                revert NotDepositor();\\n            }\\n\\n            if (depositedToken.withdrawn) {\\n                revert AlreadyWithdrawn();\\n            }\\n\\n            depositedToken.withdrawn = true;\\n\\n            TokenType tokenType = depositedToken.tokenType;\\n            if (tokenType == TokenType.ETH) {\\n                ethAmount += depositedToken.tokenAmount;\\n            } else if (tokenType == TokenType.ERC721) {\\n                _executeERC721TransferFrom(\\n                    depositedToken.tokenAddress, address(this), msg.sender, depositedToken.tokenId\\n                );\\n            } else if (tokenType == TokenType.ERC20) {\\n                _executeERC20DirectTransfer(depositedToken.tokenAddress, msg.sender, depositedToken.tokenAmount);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (ethAmount != 0) {\\n            _transferETHAndWrapIfFailWithGasLimit(WETH, msg.sender, ethAmount, gasleft());\\n        }\\n\\n        emit DepositsWithdrawn(roundId, msg.sender, depositIndices);\\n    }\\n\\n    /**\\n     * @inheritdoc IFomo\\n     */\\n    function togglePaused() external {\\n        _validateIsOwner();\\n        paused() ? _unpause() : _pause();\\n    }\\n\\n    /**\\n     * @inheritdoc IFomo\\n     */\\n    function updateCurrenciesStatus(address[] calldata currencies, bool isAllowed) external {\\n        _validateIsOperator();\\n\\n        uint256 count = currencies.length;\\n        for (uint256 i; i < count;) {\\n            isCurrencyAllowed[currencies[i]] = (isAllowed ? 1 : 0);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        emit CurrenciesStatusUpdated(currencies, isAllowed);\\n    }\\n\\n    /**\\n     * @inheritdoc IFomo\\n     */\\n    function updateRoundDuration(uint40 _roundDuration) external {\\n        _validateIsOwner();\\n        _updateRoundDuration(_roundDuration);\\n    }\\n\\n    /**\\n     *  @inheritdoc IFomo\\n     */\\n    function updateRandomnessRequestWaitingTime(uint40 _randomnessRequestWaitingTime) external {\\n        _validateIsOwner();\\n        _updateRandomnessRequestWaitingTime(_randomnessRequestWaitingTime);\\n    }\\n\\n    /**\\n     * @inheritdoc IFomo\\n     */\\n    function updateSignatureValidityPeriod(uint40 _signatureValidityPeriod) external {\\n        _validateIsOwner();\\n        _updateSignatureValidityPeriod(_signatureValidityPeriod);\\n    }\\n\\n    /**\\n     * @inheritdoc IFomo\\n     */\\n    function updateValuePerEntry(uint256 _valuePerEntry) external {\\n        _validateIsOwner();\\n        _updateValuePerEntry(_valuePerEntry);\\n    }\\n\\n    /**\\n     * @inheritdoc IFomo\\n     */\\n    function updateProtocolFeeRecipient(address _protocolFeeRecipient) external {\\n        _validateIsOwner();\\n        _updateProtocolFeeRecipient(_protocolFeeRecipient);\\n    }\\n\\n    /**\\n     * @inheritdoc IFomo\\n     */\\n    function updateProtocolFeeBp(uint16 _protocolFeeBp) external {\\n        _validateIsOwner();\\n        _updateProtocolFeeBp(_protocolFeeBp);\\n    }\\n\\n    /**\\n     * @inheritdoc IFomo\\n     */\\n    function updateMaximumNumberOfDepositsPerRound(uint40 _maximumNumberOfDepositsPerRound) external {\\n        _validateIsOwner();\\n        _updateMaximumNumberOfDepositsPerRound(_maximumNumberOfDepositsPerRound);\\n    }\\n\\n    /**\\n     * @inheritdoc IFomo\\n     */\\n    function updateMaximumNumberOfParticipantsPerRound(uint40 _maximumNumberOfParticipantsPerRound) external {\\n        _validateIsOwner();\\n        _updateMaximumNumberOfParticipantsPerRound(_maximumNumberOfParticipantsPerRound);\\n    }\\n\\n    /**\\n     * @inheritdoc IFomo\\n     */\\n    function updateReservoirOracle(address _reservoirOracle) external {\\n        _validateIsOwner();\\n        _updateReservoirOracle(_reservoirOracle);\\n    }\\n\\n    /**\\n     * @inheritdoc IFomo\\n     */\\n    function updateERC20Oracle(address _erc20Oracle) external {\\n        _validateIsOwner();\\n        _updateERC20Oracle(_erc20Oracle);\\n    }\\n\\n    function _validateIsOwner() private view {\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) {\\n            revert NotOwner();\\n        }\\n    }\\n\\n    function _validateIsOperator() private view {\\n        if (!hasRole(OPERATOR_ROLE, msg.sender)) {\\n            revert NotOperator();\\n        }\\n    }\\n\\n    /**\\n     * @param _roundDuration The duration of each round.\\n     */\\n    function _updateRoundDuration(uint40 _roundDuration) private {\\n        if (_roundDuration > 1 hours) {\\n            revert InvalidRoundDuration();\\n        }\\n\\n        roundDuration = _roundDuration;\\n        emit RoundDurationUpdated(_roundDuration);\\n    }\\n\\n    /**\\n     * @param _randomnessRequestWaitingTime The randomness request waiting time of each round.\\n     */\\n    function _updateRandomnessRequestWaitingTime(uint40 _randomnessRequestWaitingTime) private {\\n        randomnessRequestWaitingTime = _randomnessRequestWaitingTime;\\n        emit RandomnessRequestWaitingTimeUpdate(_randomnessRequestWaitingTime);\\n    }\\n\\n    /**\\n     * @param _signatureValidityPeriod The validity period of a Reservoir signature.\\n     */\\n    function _updateSignatureValidityPeriod(uint40 _signatureValidityPeriod) private {\\n        signatureValidityPeriod = _signatureValidityPeriod;\\n        emit SignatureValidityPeriodUpdated(_signatureValidityPeriod);\\n    }\\n\\n    /**\\n     * @param _valuePerEntry The value of each entry in ETH.\\n     */\\n    function _updateValuePerEntry(uint256 _valuePerEntry) private {\\n        if (_valuePerEntry == 0) {\\n            revert InvalidValue();\\n        }\\n        valuePerEntry = _valuePerEntry;\\n        emit ValuePerEntryUpdated(_valuePerEntry);\\n    }\\n\\n    /**\\n     * @param _protocolFeeRecipient The new protocol fee recipient address\\n     */\\n    function _updateProtocolFeeRecipient(address _protocolFeeRecipient) private {\\n        if (_protocolFeeRecipient == address(0)) {\\n            revert InvalidValue();\\n        }\\n        protocolFeeRecipient = _protocolFeeRecipient;\\n        emit ProtocolFeeRecipientUpdated(_protocolFeeRecipient);\\n    }\\n\\n    /**\\n     * @param _protocolFeeBp The new protocol fee in basis points\\n     */\\n    function _updateProtocolFeeBp(uint16 _protocolFeeBp) private {\\n        if (_protocolFeeBp > MAXIMUM_PROTOCOL_FEE_BP) {\\n            revert InvalidValue();\\n        }\\n        protocolFeeBp = _protocolFeeBp;\\n        emit ProtocolFeeBpUpdated(_protocolFeeBp);\\n    }\\n\\n    /**\\n     * @param _maximumNumberOfDepositsPerRound The new maximum number of deposits per round\\n     */\\n    function _updateMaximumNumberOfDepositsPerRound(uint40 _maximumNumberOfDepositsPerRound) private {\\n        maximumNumberOfDepositsPerRound = _maximumNumberOfDepositsPerRound;\\n        emit MaximumNumberOfDepositsPerRoundUpdated(_maximumNumberOfDepositsPerRound);\\n    }\\n\\n    /**\\n     * @param _maximumNumberOfParticipantsPerRound The new maximum number of participants per round\\n     */\\n    function _updateMaximumNumberOfParticipantsPerRound(uint40 _maximumNumberOfParticipantsPerRound) private {\\n        if (_maximumNumberOfParticipantsPerRound < 2) {\\n            revert InvalidValue();\\n        }\\n        maximumNumberOfParticipantsPerRound = _maximumNumberOfParticipantsPerRound;\\n        emit MaximumNumberOfParticipantsPerRoundUpdated(_maximumNumberOfParticipantsPerRound);\\n    }\\n\\n    /**\\n     * @param _reservoirOracle The new Reservoir oracle address\\n     */\\n    function _updateReservoirOracle(address _reservoirOracle) private {\\n        if (_reservoirOracle == address(0)) {\\n            revert InvalidValue();\\n        }\\n        reservoirOracle = _reservoirOracle;\\n        emit ReservoirOracleUpdated(_reservoirOracle);\\n    }\\n\\n    /**\\n     * @param _erc20Oracle The new ERC-20 oracle address\\n     */\\n    function _updateERC20Oracle(address _erc20Oracle) private {\\n        if (_erc20Oracle == address(0)) {\\n            revert InvalidValue();\\n        }\\n        erc20Oracle = IPriceOracle(_erc20Oracle);\\n        emit ERC20OracleUpdated(_erc20Oracle);\\n    }\\n\\n    /**\\n     * @param _roundsCount The current rounds count\\n     */\\n    function _startRound(uint256 _roundsCount) private returns (uint256 roundId) {\\n        unchecked {\\n            roundId = _roundsCount + 1;\\n        }\\n        roundsCount = uint40(roundId);\\n        rounds[roundId].status = RoundStatus.Open;\\n        rounds[roundId].protocolFeeBp = protocolFeeBp;\\n        rounds[roundId].cutoffTime = uint40(block.timestamp) + roundDuration;\\n        rounds[roundId].maximumNumberOfDeposits = maximumNumberOfDepositsPerRound;\\n        rounds[roundId].maximumNumberOfParticipants = maximumNumberOfParticipantsPerRound;\\n        rounds[roundId].valuePerEntry = valuePerEntry;\\n\\n        emit RoundStatusUpdated(roundId, RoundStatus.Open);\\n    }\\n\\n    /**\\n     * @param round The open round.\\n     * @param roundId The open round ID.\\n     */\\n    function _drawWinner(Round storage round, uint256 roundId) private {\\n        round.status = RoundStatus.Drawing;\\n        round.drawnAt = uint40(block.timestamp);\\n\\n        uint256 requestId = VRF_COORDINATOR.requestRandomWords({\\n            keyHash: KEY_HASH,\\n            subId: SUBSCRIPTION_ID,\\n            minimumRequestConfirmations: uint16(3),\\n            callbackGasLimit: uint32(500_000),\\n            numWords: uint32(1)\\n        });\\n\\n        if (randomnessRequests[requestId].exists) {\\n            revert RandomnessRequestAlreadyExists();\\n        }\\n\\n        randomnessRequests[requestId].exists = true;\\n        randomnessRequests[requestId].roundId = uint40(roundId);\\n\\n        emit RandomnessRequested(roundId, requestId);\\n        emit RoundStatusUpdated(roundId, RoundStatus.Drawing);\\n    }\\n\\n    /**\\n     * @param roundId The open round ID.\\n     * @param deposits The ERC-20/ERC-721 deposits to be made.\\n     */\\n    function _deposit(uint256 roundId, DepositCalldata[] calldata deposits) private {\\n        Round storage round = rounds[roundId];\\n        if (round.status != RoundStatus.Open || block.timestamp >= round.cutoffTime) {\\n            revert InvalidStatus();\\n        }\\n\\n        uint256 userDepositCount = depositCount[roundId][msg.sender];\\n        if (userDepositCount == 0) {\\n            unchecked {\\n                ++round.numberOfParticipants;\\n            }\\n        }\\n        uint256 roundDepositCount = round.deposits.length;\\n        uint40 currentEntryIndex;\\n        uint256 totalEntriesCount;\\n\\n        uint256 depositsCalldataLength = deposits.length;\\n        if (msg.value == 0) {\\n            if (depositsCalldataLength == 0) {\\n                // if msg.value is 0 and depositsCalldataLength is 0, it means the user is depositing 0\\n                revert ZeroDeposits();\\n            }\\n        } else {\\n            uint256 roundValuePerEntry = round.valuePerEntry;\\n            if (msg.value % roundValuePerEntry != 0) {\\n                // if msg.value is not divisible by roundValuePerEntry, it means the user is depositing an amount that\\n                    // is not a multiple of valuePerEntry\\n                revert InvalidValue();\\n            }\\n            uint256 entriesCount = msg.value / roundValuePerEntry;\\n            totalEntriesCount += entriesCount;\\n\\n            currentEntryIndex = _getCurrentEntryIndexWithoutAccrual(round, roundDepositCount, entriesCount);\\n\\n            round.deposits.push(\\n                Deposit({\\n                    tokenType: TokenType.ETH,\\n                    tokenAddress: address(0),\\n                    tokenId: 0,\\n                    tokenAmount: msg.value,\\n                    depositor: msg.sender,\\n                    withdrawn: false,\\n                    currentEntryIndex: currentEntryIndex\\n                })\\n            );\\n\\n            unchecked {\\n                roundDepositCount += 1;\\n            }\\n        }\\n\\n        if (depositsCalldataLength != 0) {\\n            ITransferManager.BatchTransferItem[] memory batchTransferItems = new ITransferManager.BatchTransferItem[](\\n                depositsCalldataLength\\n            );\\n            for (uint256 i; i < depositsCalldataLength;) {\\n                DepositCalldata calldata singleDeposit = deposits[i];\\n                if (isCurrencyAllowed[singleDeposit.tokenAddress] != 1) {\\n                    // if the currency is not allowed, revert\\n                    revert InvalidCollection();\\n                }\\n                uint256 price = prices[singleDeposit.tokenAddress][roundId];\\n                if (singleDeposit.tokenType == TokenType.ERC721) {\\n                    if (price == 0) {\\n                        price = _getReservoirPrice(singleDeposit);\\n                        prices[singleDeposit.tokenAddress][roundId] = price;\\n                    }\\n\\n                    uint256 entriesCount = price / round.valuePerEntry;\\n                    if (entriesCount == 0) {\\n                        revert InvalidValue();\\n                    }\\n\\n                    uint256 tokenIdsLength = singleDeposit.tokenIdsOrAmounts.length;\\n                    uint256[] memory amounts = new uint256[](tokenIdsLength);\\n                    for (uint256 j; j < tokenIdsLength;) {\\n                        totalEntriesCount += entriesCount;\\n\\n                        if (currentEntryIndex != 0) {\\n                            currentEntryIndex += uint40(entriesCount);\\n                        } else {\\n                            currentEntryIndex =\\n                                _getCurrentEntryIndexWithoutAccrual(round, roundDepositCount, entriesCount);\\n                        }\\n\\n                        // tokenAmount is in reality 1, but we never use it and it is cheaper to set it as 0.\\n                        round.deposits.push(\\n                            Deposit({\\n                                tokenType: TokenType.ERC721,\\n                                tokenAddress: singleDeposit.tokenAddress,\\n                                tokenId: singleDeposit.tokenIdsOrAmounts[j],\\n                                tokenAmount: 0,\\n                                depositor: msg.sender,\\n                                withdrawn: false,\\n                                currentEntryIndex: currentEntryIndex\\n                            })\\n                        );\\n\\n                        amounts[j] = 1;\\n\\n                        unchecked {\\n                            ++j;\\n                        }\\n                    }\\n\\n                    unchecked {\\n                        roundDepositCount += tokenIdsLength;\\n                    }\\n\\n                    batchTransferItems[i].tokenAddress = singleDeposit.tokenAddress;\\n                    batchTransferItems[i].tokenType = TransferManagerTokenType.ERC721;\\n                    batchTransferItems[i].itemIds = singleDeposit.tokenIdsOrAmounts;\\n                    batchTransferItems[i].amounts = amounts;\\n                } else if (singleDeposit.tokenType == TokenType.ERC20) {\\n                    if (price == 0) {\\n                        price = erc20Oracle.getTWAP(singleDeposit.tokenAddress, uint32(3600));\\n                        prices[singleDeposit.tokenAddress][roundId] = price;\\n                    }\\n\\n                    uint256[] memory amounts = singleDeposit.tokenIdsOrAmounts;\\n                    if (amounts.length != 1) {\\n                        revert InvalidLength();\\n                    }\\n\\n                    uint256 amount = amounts[0];\\n\\n                    uint256 entriesCount =\\n                        ((price * amount) / (10 ** IERC20(singleDeposit.tokenAddress).decimals())) / round.valuePerEntry;\\n                    if (entriesCount == 0) {\\n                        revert InvalidValue();\\n                    }\\n\\n                    totalEntriesCount += entriesCount;\\n\\n                    if (currentEntryIndex != 0) {\\n                        currentEntryIndex += uint40(entriesCount);\\n                    } else {\\n                        currentEntryIndex = _getCurrentEntryIndexWithoutAccrual(round, roundDepositCount, entriesCount);\\n                    }\\n\\n                    round.deposits.push(\\n                        Deposit({\\n                            tokenType: TokenType.ERC20,\\n                            tokenAddress: singleDeposit.tokenAddress,\\n                            tokenId: 0,\\n                            tokenAmount: amount,\\n                            depositor: msg.sender,\\n                            withdrawn: false,\\n                            currentEntryIndex: currentEntryIndex\\n                        })\\n                    );\\n\\n                    unchecked {\\n                        roundDepositCount += 1;\\n                    }\\n\\n                    batchTransferItems[i].tokenAddress = singleDeposit.tokenAddress;\\n                    batchTransferItems[i].tokenType = TransferManagerTokenType.ERC20;\\n                    batchTransferItems[i].amounts = singleDeposit.tokenIdsOrAmounts;\\n                } else {\\n                    revert InvalidTokenType();\\n                }\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n\\n            transferManager.transferBatchItemsAcrossCollections(batchTransferItems, msg.sender, address(this));\\n        }\\n\\n        {\\n            uint256 maximumNumberOfDeposits = round.maximumNumberOfDeposits;\\n            if (roundDepositCount > maximumNumberOfDeposits) {\\n                revert MaximumNumberOfDepositsReached();\\n            }\\n\\n            uint256 numberOfParticipants = round.numberOfParticipants;\\n\\n            if (\\n                numberOfParticipants == round.maximumNumberOfParticipants\\n                    || (numberOfParticipants > 1 && roundDepositCount == maximumNumberOfDeposits)\\n            ) {\\n                _drawWinner(round, roundId);\\n            }\\n        }\\n\\n        unchecked {\\n            depositCount[roundId][msg.sender] = userDepositCount + 1;\\n        }\\n\\n        emit Deposited(msg.sender, roundId, totalEntriesCount);\\n    }\\n\\n    /**\\n     * @param roundId The ID of the round to be cancelled.\\n     */\\n    function _cancel(uint256 roundId) private {\\n        Round storage round = rounds[roundId];\\n\\n        _validateRoundStatus(round, RoundStatus.Open);\\n\\n        if (block.timestamp < round.cutoffTime) {\\n            revert CutoffTimeNotReached();\\n        }\\n\\n        if (round.numberOfParticipants > 1) {\\n            revert RoundCannotBeClosed();\\n        }\\n\\n        round.status = RoundStatus.Cancelled;\\n\\n        emit RoundStatusUpdated(roundId, RoundStatus.Cancelled);\\n\\n        _startRound({ _roundsCount: roundId });\\n    }\\n\\n    /**\\n     * @param requestId The ID of the request\\n     * @param randomWords The random words returned by Chainlink\\n     */\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\\n        if (randomnessRequests[requestId].exists) {\\n            uint256 roundId = randomnessRequests[requestId].roundId;\\n            Round storage round = rounds[roundId];\\n\\n            if (round.status == RoundStatus.Drawing) {\\n                round.status = RoundStatus.Drawn;\\n                uint256 randomWord = randomWords[0];\\n                randomnessRequests[requestId].randomWord = randomWord;\\n\\n                uint256 count = round.deposits.length;\\n                uint256[] memory currentEntryIndexArray = new uint256[](count);\\n                for (uint256 i; i < count;) {\\n                    currentEntryIndexArray[i] = uint256(round.deposits[i].currentEntryIndex);\\n                    unchecked {\\n                        ++i;\\n                    }\\n                }\\n\\n                uint256 currentEntryIndex = currentEntryIndexArray[_unsafeSubtract(count, 1)];\\n                uint256 entriesSold = _unsafeAdd(currentEntryIndex, 1);\\n                uint256 winningEntry = uint256(randomWord) % entriesSold;\\n                round.winner = round.deposits[currentEntryIndexArray.findUpperBound(winningEntry)].depositor;\\n                round.protocolFeeOwed = (round.valuePerEntry * entriesSold * round.protocolFeeBp) / 10_000;\\n\\n                emit RoundStatusUpdated(roundId, RoundStatus.Drawn);\\n\\n                _startRound({ _roundsCount: roundId });\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @param round The round to check the status of.\\n     * @param status The expected status of the round\\n     */\\n    function _validateRoundStatus(Round storage round, RoundStatus status) private view {\\n        if (round.status != status) {\\n            revert InvalidStatus();\\n        }\\n    }\\n\\n    /**\\n     * @param collection The collection address.\\n     * @param floorPrice The floor price response from Reservoir oracle.\\n     */\\n    function _verifyReservoirSignature(\\n        address collection,\\n        ReservoirOracleFloorPrice calldata floorPrice\\n    )\\n        private\\n        view\\n    {\\n        if (block.timestamp > floorPrice.timestamp + uint256(signatureValidityPeriod)) {\\n            revert SignatureExpired();\\n        }\\n\\n        bytes32 expectedMessageId =\\n            keccak256(abi.encode(RESERVOIR_ORACLE_ID_TYPEHASH, uint8(1), 86_400, collection, false));\\n\\n        if (expectedMessageId != floorPrice.id) {\\n            revert MessageIdInvalid();\\n        }\\n\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                keccak256(\\n                    abi.encode(\\n                        RESERVOIR_ORACLE_MESSAGE_TYPEHASH,\\n                        expectedMessageId,\\n                        keccak256(floorPrice.payload),\\n                        floorPrice.timestamp,\\n                        block.chainid\\n                    )\\n                )\\n            )\\n        );\\n\\n        SignatureCheckerMemory.verify(messageHash, reservoirOracle, floorPrice.signature);\\n    }\\n\\n    function _getReservoirPrice(DepositCalldata calldata singleDeposit) private view returns (uint256 price) {\\n        address currency;\\n        _verifyReservoirSignature(singleDeposit.tokenAddress, singleDeposit.reservoirOracleFloorPrice);\\n        (currency, price) = abi.decode(singleDeposit.reservoirOracleFloorPrice.payload, (address, uint256));\\n        if (currency != address(0)) {\\n            revert InvalidCurrency();\\n        }\\n    }\\n\\n    /**\\n     * @param round The open round.\\n     * @param roundDepositCount The number of deposits in the round.\\n     * @param entriesCount The number of entries to be added.\\n     */\\n    function _getCurrentEntryIndexWithoutAccrual(\\n        Round storage round,\\n        uint256 roundDepositCount,\\n        uint256 entriesCount\\n    )\\n        private\\n        view\\n        returns (uint40 currentEntryIndex)\\n    {\\n        if (roundDepositCount == 0) {\\n            currentEntryIndex = uint40(_unsafeSubtract(entriesCount, 1));\\n        } else {\\n            currentEntryIndex =\\n                uint40(round.deposits[_unsafeSubtract(roundDepositCount, 1)].currentEntryIndex + entriesCount);\\n        }\\n    }\\n\\n    /**\\n     * Unsafe math functions.\\n     */\\n\\n    function _unsafeAdd(uint256 a, uint256 b) private pure returns (uint256) {\\n        unchecked {\\n            return a + b;\\n        }\\n    }\\n\\n    function _unsafeSubtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        unchecked {\\n            return a - b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ITransferManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\n// Enums\\nimport { TokenType } from \\\"../enums/TokenType.sol\\\";\\n\\n/**\\n * @title ITransferManager\\n */\\ninterface ITransferManager {\\n    /**\\n     * @notice This struct is only used for transferBatchItemsAcrossCollections.\\n     * @param tokenAddress Token address\\n     * @param tokenType 0 for ERC721, 1 for ERC1155\\n     * @param itemIds Array of item ids to transfer\\n     * @param amounts Array of amounts to transfer\\n     */\\n    struct BatchTransferItem {\\n        address tokenAddress;\\n        TokenType tokenType;\\n        uint256[] itemIds;\\n        uint256[] amounts;\\n    }\\n\\n    /**\\n     * @notice It is emitted if operators' approvals to transfer NFTs are granted by a user.\\n     * @param user Address of the user\\n     * @param operators Array of operator addresses\\n     */\\n    event ApprovalsGranted(address user, address[] operators);\\n\\n    /**\\n     * @notice It is emitted if operators' approvals to transfer NFTs are revoked by a user.\\n     * @param user Address of the user\\n     * @param operators Array of operator addresses\\n     */\\n    event ApprovalsRemoved(address user, address[] operators);\\n\\n    /**\\n     * @notice It is emitted if a new operator is added to the global allowlist.\\n     * @param operator Operator address\\n     */\\n    event OperatorAllowed(address operator);\\n\\n    /**\\n     * @notice It is emitted if an operator is removed from the global allowlist.\\n     * @param operator Operator address\\n     */\\n    event OperatorRemoved(address operator);\\n\\n    /**\\n     * @notice It is returned if the operator to approve has already been approved by the user.\\n     */\\n    error OperatorAlreadyApprovedByUser();\\n\\n    /**\\n     * @notice It is returned if the operator to revoke has not been previously approved by the user.\\n     */\\n    error OperatorNotApprovedByUser();\\n\\n    /**\\n     * @notice It is returned if the transfer caller is already allowed by the owner.\\n     * @dev This error can only be returned for owner operations.\\n     */\\n    error OperatorAlreadyAllowed();\\n\\n    /**\\n     * @notice It is returned if the operator to approve is not in the global allowlist defined by the owner.\\n     * @dev This error can be returned if the user tries to grant approval to an operator address not in the\\n     *      allowlist or if the owner tries to remove the operator from the global allowlist.\\n     */\\n    error OperatorNotAllowed();\\n\\n    /**\\n     * @notice It is returned if the transfer caller is invalid.\\n     *         For a transfer called to be valid, the operator must be in the global allowlist and\\n     *         approved by the 'from' user.\\n     */\\n    error TransferCallerInvalid();\\n\\n    /**\\n     * @notice This function transfers ERC20 tokens.\\n     * @param tokenAddress Token address\\n     * @param from Sender address\\n     * @param to Recipient address\\n     * @param amount amount\\n     */\\n    function transferERC20(address tokenAddress, address from, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice This function transfers a single item for a single ERC721 collection.\\n     * @param tokenAddress Token address\\n     * @param from Sender address\\n     * @param to Recipient address\\n     * @param itemId Item ID\\n     */\\n    function transferItemERC721(address tokenAddress, address from, address to, uint256 itemId) external;\\n\\n    /**\\n     * @notice This function transfers items for a single ERC721 collection.\\n     * @param tokenAddress Token address\\n     * @param from Sender address\\n     * @param to Recipient address\\n     * @param itemIds Array of itemIds\\n     * @param amounts Array of amounts\\n     */\\n    function transferItemsERC721(\\n        address tokenAddress,\\n        address from,\\n        address to,\\n        uint256[] calldata itemIds,\\n        uint256[] calldata amounts\\n    )\\n        external;\\n\\n    /**\\n     * @notice This function transfers a single item for a single ERC1155 collection.\\n     * @param tokenAddress Token address\\n     * @param from Sender address\\n     * @param to Recipient address\\n     * @param itemId Item ID\\n     * @param amount Amount\\n     */\\n    function transferItemERC1155(\\n        address tokenAddress,\\n        address from,\\n        address to,\\n        uint256 itemId,\\n        uint256 amount\\n    )\\n        external;\\n\\n    /**\\n     * @notice This function transfers items for a single ERC1155 collection.\\n     * @param tokenAddress Token address\\n     * @param from Sender address\\n     * @param to Recipient address\\n     * @param itemIds Array of itemIds\\n     * @param amounts Array of amounts\\n     * @dev It does not allow batch transferring if from = msg.sender since native function should be used.\\n     */\\n    function transferItemsERC1155(\\n        address tokenAddress,\\n        address from,\\n        address to,\\n        uint256[] calldata itemIds,\\n        uint256[] calldata amounts\\n    )\\n        external;\\n\\n    /**\\n     * @notice This function transfers items across an array of tokens that can be ERC20, ERC721 and ERC1155.\\n     * @param items Array of BatchTransferItem\\n     * @param from Sender address\\n     * @param to Recipient address\\n     */\\n    function transferBatchItemsAcrossCollections(\\n        BatchTransferItem[] calldata items,\\n        address from,\\n        address to\\n    )\\n        external;\\n\\n    /**\\n     * @notice This function allows a user to grant approvals for an array of operators.\\n     *         Users cannot grant approvals if the operator is not allowed by this contract's owner.\\n     * @param operators Array of operator addresses\\n     * @dev Each operator address must be globally allowed to be approved.\\n     */\\n    function grantApprovals(address[] calldata operators) external;\\n\\n    /**\\n     * @notice This function allows a user to revoke existing approvals for an array of operators.\\n     * @param operators Array of operator addresses\\n     * @dev Each operator address must be approved at the user level to be revoked.\\n     */\\n    function revokeApprovals(address[] calldata operators) external;\\n\\n    /**\\n     * @notice This function allows an operator to be added for the shared transfer system.\\n     *         Once the operator is allowed, users can grant NFT approvals to this operator.\\n     * @param operator Operator address to allow\\n     * @dev Only callable by owner.\\n     */\\n    function allowOperator(address operator) external;\\n\\n    /**\\n     * @notice This function allows the user to remove an operator for the shared transfer system.\\n     * @param operator Operator address to remove\\n     * @dev Only callable by owner.\\n     */\\n    function removeOperator(address operator) external;\\n}\\n\"\r\n    },\r\n    \"src/enums/TokenType.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nenum TokenType {\\n    ERC20,\\n    ERC721,\\n    ERC1155\\n}\\n\"\r\n    },\r\n    \"src/interfaces/generic/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"src/SignatureCheckerMemory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n// Interfaces\\nimport {IERC1271} from \\\"./interfaces/generic/IERC1271.sol\\\";\\n\\n// Constants\\nimport {ERC1271_MAGIC_VALUE} from \\\"./constants/StandardConstants.sol\\\";\\n\\n// Errors\\nimport {SignatureParameterSInvalid, SignatureParameterVInvalid, SignatureERC1271Invalid, SignatureEOAInvalid, NullSignerAddress, SignatureLengthInvalid} from \\\"./errors/SignatureCheckerErrors.sol\\\";\\n\\n/**\\n * @title SignatureCheckerMemory\\n * @notice This library is used to verify signatures for EOAs (with lengths of both 65 and 64 bytes)\\n *         and contracts (ERC1271).\\n */\\nlibrary SignatureCheckerMemory {\\n    /**\\n     * @notice This function verifies whether the signer is valid for a hash and raw signature.\\n     * @param hash Data hash\\n     * @param signer Signer address (to confirm message validity)\\n     * @param signature Signature parameters encoded (v, r, s)\\n     * @dev For EIP-712 signatures, the hash must be the digest (computed with signature hash and domain separator)\\n     */\\n    function verify(bytes32 hash, address signer, bytes memory signature) internal view {\\n        if (signer.code.length == 0) {\\n            if (_recoverEOASigner(hash, signature) == signer) return;\\n            revert SignatureEOAInvalid();\\n        } else {\\n            if (IERC1271(signer).isValidSignature(hash, signature) == ERC1271_MAGIC_VALUE) return;\\n            revert SignatureERC1271Invalid();\\n        }\\n    }\\n\\n    /**\\n     * @notice This function is internal and splits a signature into r, s, v outputs.\\n     * @param signature A 64 or 65 bytes signature\\n     * @return r The r output of the signature\\n     * @return s The s output of the signature\\n     * @return v The recovery identifier, must be 27 or 28\\n     */\\n    function splitSignature(bytes memory signature) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\\n        uint256 length = signature.length;\\n\\n        if (length == 65) {\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n        } else if (length == 64) {\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                let vs := mload(add(signature, 0x40))\\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n                v := add(shr(255, vs), 27)\\n            }\\n        } else {\\n            revert SignatureLengthInvalid(length);\\n        }\\n\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            revert SignatureParameterSInvalid();\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert SignatureParameterVInvalid(v);\\n        }\\n    }\\n\\n    /**\\n     * @notice This function is private and recovers the signer of a signature (for EOA only).\\n     * @param hash Hash of the signed message\\n     * @param signature Bytes containing the signature (64 or 65 bytes)\\n     * @return signer The address that signed the signature\\n     */\\n    function _recoverEOASigner(bytes32 hash, bytes memory signature) private pure returns (address signer) {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(signature);\\n\\n        // If the signature is valid (and not malleable), return the signer's address\\n        signer = ecrecover(hash, v, r, s);\\n\\n        if (signer == address(0)) {\\n            revert NullSignerAddress();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n// Interfaces\\nimport {IReentrancyGuard} from \\\"./interfaces/IReentrancyGuard.sol\\\";\\n\\n/**\\n * @title ReentrancyGuard\\n * @notice This contract protects against reentrancy attacks.\\n *         It is adjusted from OpenZeppelin.\\n */\\nabstract contract ReentrancyGuard is IReentrancyGuard {\\n    uint256 private _status;\\n\\n    /**\\n     * @notice Modifier to wrap functions to prevent reentrancy calls.\\n     */\\n    modifier nonReentrant() {\\n        if (_status == 2) {\\n            revert ReentrancyFail();\\n        }\\n\\n        _status = 2;\\n        _;\\n        _status = 1;\\n    }\\n\\n    constructor() {\\n        _status = 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Pausable\\n * @notice This contract makes it possible to pause the contract.\\n *         It is adjusted from OpenZeppelin.\\n */\\nabstract contract Pausable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    error IsPaused();\\n    error NotPaused();\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert IsPaused();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert NotPaused();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lowLevelCallers/LowLevelWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n// Interfaces\\nimport {IWETH} from \\\"../interfaces/generic/IWETH.sol\\\";\\n\\n/**\\n * @title LowLevelWETH\\n * @notice This contract contains a function to transfer ETH with an option to wrap to WETH.\\n *         If the ETH transfer fails within a gas limit, the amount in ETH is wrapped to WETH and then transferred.\\n */\\ncontract LowLevelWETH {\\n    /**\\n     * @notice It transfers ETH to a recipient with a specified gas limit.\\n     *         If the original transfers fails, it wraps to WETH and transfers the WETH to recipient.\\n     * @param _WETH WETH address\\n     * @param _to Recipient address\\n     * @param _amount Amount to transfer\\n     * @param _gasLimit Gas limit to perform the ETH transfer\\n     */\\n    function _transferETHAndWrapIfFailWithGasLimit(\\n        address _WETH,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _gasLimit\\n    ) internal {\\n        bool status;\\n\\n        assembly {\\n            status := call(_gasLimit, _to, _amount, 0, 0, 0, 0)\\n        }\\n\\n        if (!status) {\\n            IWETH(_WETH).deposit{value: _amount}();\\n            IWETH(_WETH).transfer(_to, _amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lowLevelCallers/LowLevelERC20Transfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n// Interfaces\\nimport {IERC20} from \\\"../interfaces/generic/IERC20.sol\\\";\\n\\n// Errors\\nimport {ERC20TransferFail, ERC20TransferFromFail} from \\\"../errors/LowLevelErrors.sol\\\";\\nimport {NotAContract} from \\\"../errors/GenericErrors.sol\\\";\\n\\n/**\\n * @title LowLevelERC20Transfer\\n * @notice This contract contains low-level calls to transfer ERC20 tokens.\\n */\\ncontract LowLevelERC20Transfer {\\n    /**\\n     * @notice Execute ERC20 transferFrom\\n     * @param currency Currency address\\n     * @param from Sender address\\n     * @param to Recipient address\\n     * @param amount Amount to transfer\\n     */\\n    function _executeERC20TransferFrom(address currency, address from, address to, uint256 amount) internal {\\n        if (currency.code.length == 0) {\\n            revert NotAContract();\\n        }\\n\\n        (bool status, bytes memory data) = currency.call(abi.encodeCall(IERC20.transferFrom, (from, to, amount)));\\n\\n        if (!status) {\\n            revert ERC20TransferFromFail();\\n        }\\n\\n        if (data.length > 0) {\\n            if (!abi.decode(data, (bool))) {\\n                revert ERC20TransferFromFail();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Execute ERC20 (direct) transfer\\n     * @param currency Currency address\\n     * @param to Recipient address\\n     * @param amount Amount to transfer\\n     */\\n    function _executeERC20DirectTransfer(address currency, address to, uint256 amount) internal {\\n        if (currency.code.length == 0) {\\n            revert NotAContract();\\n        }\\n\\n        (bool status, bytes memory data) = currency.call(abi.encodeCall(IERC20.transfer, (to, amount)));\\n\\n        if (!status) {\\n            revert ERC20TransferFail();\\n        }\\n\\n        if (data.length > 0) {\\n            if (!abi.decode(data, (bool))) {\\n                revert ERC20TransferFail();\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lowLevelCallers/LowLevelERC721Transfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n// Interfaces\\nimport {IERC721} from \\\"../interfaces/generic/IERC721.sol\\\";\\n\\n// Errors\\nimport {ERC721TransferFromFail} from \\\"../errors/LowLevelErrors.sol\\\";\\nimport {NotAContract} from \\\"../errors/GenericErrors.sol\\\";\\n\\n/**\\n * @title LowLevelERC721Transfer\\n * @notice This contract contains low-level calls to transfer ERC721 tokens.\\n */\\ncontract LowLevelERC721Transfer {\\n    /**\\n     * @notice Execute ERC721 transferFrom\\n     * @param collection Address of the collection\\n     * @param from Address of the sender\\n     * @param to Address of the recipient\\n     * @param tokenId tokenId to transfer\\n     */\\n    function _executeERC721TransferFrom(address collection, address from, address to, uint256 tokenId) internal {\\n        if (collection.code.length == 0) {\\n            revert NotAContract();\\n        }\\n\\n        (bool status, ) = collection.call(abi.encodeCall(IERC721.transferFrom, (from, to, tokenId)));\\n\\n        if (!status) {\\n            revert ERC721TransferFromFail();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IFomo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IFomo {\\n    enum RoundStatus {\\n        None,\\n        Open,\\n        Drawing,\\n        Drawn,\\n        Cancelled\\n    }\\n\\n    enum TokenType {\\n        ETH,\\n        ERC20,\\n        ERC721\\n    }\\n\\n    event CurrenciesStatusUpdated(address[] currencies, bool isAllowed);\\n    event Deposited(address depositor, uint256 roundId, uint256 entriesCount);\\n    event ERC20OracleUpdated(address erc20Oracle);\\n    event MaximumNumberOfDepositsPerRoundUpdated(uint40 maximumNumberOfDepositsPerRound);\\n    event MaximumNumberOfParticipantsPerRoundUpdated(uint40 maximumNumberOfParticipantsPerRound);\\n    event PrizesClaimed(uint256 roundId, address winner, uint256[] prizeIndices);\\n    event DepositsWithdrawn(uint256 roundId, address depositor, uint256[] depositIndices);\\n    event ProtocolFeeBpUpdated(uint16 protocolFeeBp);\\n    event ProtocolFeeRecipientUpdated(address protocolFeeRecipient);\\n    event RandomnessRequested(uint256 roundId, uint256 requestId);\\n    event RandomnessRequestWaitingTimeUpdate(uint40 randomnessRequestWaitingTime);\\n    event ReservoirOracleUpdated(address reservoirOracle);\\n    event RoundDurationUpdated(uint40 roundDuration);\\n    event RoundStatusUpdated(uint256 roundId, RoundStatus status);\\n    event SignatureValidityPeriodUpdated(uint40 signatureValidityPeriod);\\n    event ValuePerEntryUpdated(uint256 valuePerEntry);\\n\\n    error AlreadyWithdrawn();\\n    error CutoffTimeNotReached();\\n    error DrawExpirationTimeNotReached();\\n    error InsufficientParticipants();\\n    error InvalidCollection();\\n    error InvalidCurrency();\\n    error InvalidIndex();\\n    error InvalidLength();\\n    error InvalidRoundDuration();\\n    error InvalidStatus();\\n    error InvalidTokenType();\\n    error InvalidValue();\\n    error MaximumNumberOfDepositsReached();\\n    error MessageIdInvalid();\\n    error NotOperator();\\n    error NotOwner();\\n    error NotWinner();\\n    error NotDepositor();\\n    error ProtocolFeeNotPaid();\\n    error RandomnessRequestAlreadyExists();\\n    error RoundCannotBeClosed();\\n    error SignatureExpired();\\n    error ZeroDeposits();\\n\\n    /**\\n     * @param owner The owner of the contract.\\n     * @param operator The operator of the contract.\\n     * @param roundDuration The duration of each round.\\n     * @param valuePerEntry The value of each entry in ETH.\\n     * @param protocolFeeRecipient The protocol fee recipient.\\n     * @param protocolFeeBp The protocol fee basis points.\\n     * @param keyHash Chainlink VRF key hash\\n     * @param subscriptionId Chainlink VRF subscription ID\\n     * @param vrfCoordinator Chainlink VRF coordinator address\\n     * @param reservoirOracle Reservoir off-chain oracle address\\n     * @param erc20Oracle ERC20 on-chain oracle address\\n     * @param transferManager Transfer manager\\n     * @param signatureValidityPeriod The validity period of a Reservoir signature.\\n     */\\n    struct ConstructorCalldata {\\n        address owner;\\n        address operator;\\n        uint40 maximumNumberOfDepositsPerRound;\\n        uint40 maximumNumberOfParticipantsPerRound;\\n        uint40 roundDuration;\\n        uint256 valuePerEntry;\\n        address protocolFeeRecipient;\\n        uint16 protocolFeeBp;\\n        bytes32 keyHash;\\n        uint64 subscriptionId;\\n        address vrfCoordinator;\\n        address reservoirOracle;\\n        address transferManager;\\n        address erc20Oracle;\\n        address weth;\\n        uint40 signatureValidityPeriod;\\n        uint40 randomnessRequestWaitingTime;\\n    }\\n\\n    /**\\n     * @param id The id of the response.\\n     * @param payload The payload of the response.\\n     * @param timestamp The timestamp of the response.\\n     * @param signature The signature of the response.\\n     */\\n    struct ReservoirOracleFloorPrice {\\n        bytes32 id;\\n        bytes payload;\\n        uint256 timestamp;\\n        bytes signature;\\n    }\\n\\n    struct DepositCalldata {\\n        TokenType tokenType;\\n        address tokenAddress;\\n        uint256[] tokenIdsOrAmounts;\\n        ReservoirOracleFloorPrice reservoirOracleFloorPrice;\\n    }\\n\\n    struct Round {\\n        RoundStatus status;\\n        address winner;\\n        uint40 cutoffTime;\\n        uint40 drawnAt;\\n        uint40 numberOfParticipants;\\n        uint40 maximumNumberOfDeposits;\\n        uint40 maximumNumberOfParticipants;\\n        uint16 protocolFeeBp;\\n        uint256 protocolFeeOwed;\\n        uint256 valuePerEntry;\\n        Deposit[] deposits;\\n    }\\n\\n    struct Deposit {\\n        TokenType tokenType;\\n        address tokenAddress;\\n        uint256 tokenId;\\n        uint256 tokenAmount;\\n        address depositor;\\n        bool withdrawn;\\n        uint40 currentEntryIndex;\\n    }\\n\\n    /**\\n     * @param exists Whether the request exists.\\n     * @param roundId The id of the round.\\n     * @param randomWord The random words returned by Chainlink VRF.\\n     *                   If randomWord == 0, then the request is still pending.\\n     */\\n    struct RandomnessRequest {\\n        bool exists;\\n        uint40 roundId;\\n        uint256 randomWord;\\n    }\\n\\n    /**\\n     * @param roundId The id of the round.\\n     * @param prizeIndices The indices of the prizes to be claimed.\\n     */\\n    struct ClaimPrizesCalldata {\\n        uint256 roundId;\\n        uint256[] prizeIndices;\\n    }\\n\\n    /**\\n     * @notice This is used to accumulate the amount of tokens to be transferred.\\n     * @param tokenAddress The address of the token.\\n     * @param amount The amount of tokens accumulated.\\n     */\\n    struct TransferAccumulator {\\n        address tokenAddress;\\n        uint256 amount;\\n    }\\n\\n    function cancel() external;\\n\\n    /**\\n     * @notice Cancels a round after randomness request if the randomness request\\n     *         does not arrive after a certain amount of time.\\n     *         Only callable by contract owner.\\n     */\\n    function cancelAfterRandomnessRequest() external;\\n\\n    /**\\n     * @param claimPrizesCalldata The rounds and the indices for the rounds for the prizes to claim.\\n     */\\n    function claimPrizes(ClaimPrizesCalldata[] calldata claimPrizesCalldata) external payable;\\n\\n    /**\\n     * @notice This function calculates the ETH payment required to claim the prizes for multiple rounds.\\n     * @param claimPrizesCalldata The rounds and the indices for the rounds for the prizes to claim.\\n     */\\n    function getClaimPrizesPaymentRequired(ClaimPrizesCalldata[] calldata claimPrizesCalldata)\\n        external\\n        view\\n        returns (uint256 protocolFeeOwed);\\n\\n    /**\\n     * @notice This function allows withdrawal of deposits from a round if the round is cancelled\\n     * @param roundId The drawn round ID.\\n     * @param depositIndices The indices of the deposits to withdraw.\\n     */\\n    function withdrawDeposits(uint256 roundId, uint256[] calldata depositIndices) external;\\n\\n    /**\\n     * @param roundId The open round ID.\\n     * @param deposits The ERC-20/ERC-721 deposits to be made.\\n     */\\n    function deposit(uint256 roundId, DepositCalldata[] calldata deposits) external payable;\\n\\n    /**\\n     * @param deposits The ERC-20/ERC-721 deposits to be made.\\n     */\\n    function cancelCurrentRoundAndDepositToTheNextRound(DepositCalldata[] calldata deposits) external payable;\\n\\n    function drawWinner() external;\\n\\n    /**\\n     * @param roundId The round ID.\\n     */\\n    function getDeposits(uint256 roundId) external view returns (Deposit[] memory);\\n\\n    /**\\n     * @notice This function allows the owner to pause/unpause the contract.\\n     */\\n    function togglePaused() external;\\n\\n    /**\\n     * @notice This function allows the owner to update currency statuses (ETH, ERC-20 and NFTs).\\n     * @param currencies Currency addresses (address(0) for ETH)\\n     * @param isAllowed Whether the currencies should be allowed in the fomos\\n     * @dev Only callable by owner.\\n     */\\n    function updateCurrenciesStatus(address[] calldata currencies, bool isAllowed) external;\\n\\n    /**\\n     * @notice This function allows the owner to update the duration of each round.\\n     * @param _roundDuration The duration of each round.\\n     */\\n    function updateRoundDuration(uint40 _roundDuration) external;\\n\\n    /**\\n     * @notice This function allows the owner to update the waiting time for the reqeust of the randomness.\\n     * @param _randomnessRequestWaitingTime The randomness request waiting time of each round.\\n     */\\n    function updateRandomnessRequestWaitingTime(uint40 _randomnessRequestWaitingTime) external;\\n\\n    /**\\n     * @notice This function allows the owner to update the signature validity period.\\n     * @param _signatureValidityPeriod The signature validity period.\\n     */\\n    function updateSignatureValidityPeriod(uint40 _signatureValidityPeriod) external;\\n\\n    /**\\n     * @notice This function allows the owner to update the value of each entry in ETH.\\n     * @param _valuePerEntry The value of each entry in ETH.\\n     */\\n    function updateValuePerEntry(uint256 _valuePerEntry) external;\\n\\n    /**\\n     * @notice This function allows the owner to update the protocol fee in basis points.\\n     * @param protocolFeeBp The protocol fee in basis points.\\n     */\\n    function updateProtocolFeeBp(uint16 protocolFeeBp) external;\\n\\n    /**\\n     * @notice This function allows the owner to update the protocol fee recipient.\\n     * @param protocolFeeRecipient The protocol fee recipient.\\n     */\\n    function updateProtocolFeeRecipient(address protocolFeeRecipient) external;\\n\\n    /**\\n     * @notice This function allows the owner to update Reservoir oracle's address.\\n     * @param reservoirOracle Reservoir oracle address.\\n     */\\n    function updateReservoirOracle(address reservoirOracle) external;\\n\\n    /**\\n     * @notice This function allows the owner to update the maximum number of participants per round.\\n     * @param _maximumNumberOfParticipantsPerRound The maximum number of participants per round.\\n     */\\n    function updateMaximumNumberOfParticipantsPerRound(uint40 _maximumNumberOfParticipantsPerRound) external;\\n\\n    /**\\n     * @notice This function allows the owner to update the maximum number of deposits per round.\\n     * @param _maximumNumberOfDepositsPerRound The maximum number of deposits per round.\\n     */\\n    function updateMaximumNumberOfDepositsPerRound(uint40 _maximumNumberOfDepositsPerRound) external;\\n\\n    /**\\n     * @notice This function allows the owner to update ERC20 oracle's address.\\n     * @param erc20Oracle ERC20 oracle address.\\n     */\\n    function updateERC20Oracle(address erc20Oracle) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IPriceOracle {\\n    error PoolNotAllowed();\\n    error PriceIsZero();\\n\\n    event PoolAdded(address token, address pool);\\n    event PoolRemoved(address token);\\n\\n    function getTWAP(address token, uint32 secondsAgo) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/libraries/Arrays.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n *      Modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Arrays.sol\\n */\\nlibrary Arrays {\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (array[mid] > element) {\\n                high = mid;\\n            } else {\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && array[low - 1] == element) {\\n            unchecked {\\n                return low - 1;\\n            }\\n        } else {\\n            return low;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/generic/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC1271 {\\n    function isValidSignature(bytes32 hash, bytes calldata signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"src/constants/StandardConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev ERC1271's magic value (bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\"))\\n */\\nbytes4 constant ERC1271_MAGIC_VALUE = 0x1626ba7e;\\n\"\r\n    },\r\n    \"src/errors/SignatureCheckerErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @notice It is emitted if the signer is null.\\n */\\nerror NullSignerAddress();\\n\\n/**\\n * @notice It is emitted if the signature is invalid for an EOA (the address recovered is not the expected one).\\n */\\nerror SignatureEOAInvalid();\\n\\n/**\\n * @notice It is emitted if the signature is invalid for a ERC1271 contract signer.\\n */\\nerror SignatureERC1271Invalid();\\n\\n/**\\n * @notice It is emitted if the signature's length is neither 64 nor 65 bytes.\\n */\\nerror SignatureLengthInvalid(uint256 length);\\n\\n/**\\n * @notice It is emitted if the signature is invalid due to S parameter.\\n */\\nerror SignatureParameterSInvalid();\\n\\n/**\\n * @notice It is emitted if the signature is invalid due to V parameter.\\n */\\nerror SignatureParameterVInvalid(uint8 v);\\n\"\r\n    },\r\n    \"src/interfaces/IReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title IReentrancyGuard\\n */\\ninterface IReentrancyGuard {\\n    /**\\n     * @notice This is returned when there is a reentrant call.\\n     */\\n    error ReentrancyFail();\\n}\\n\"\r\n    },\r\n    \"src/interfaces/generic/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"src/errors/LowLevelErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @notice It is emitted if the ETH transfer fails.\\n */\\nerror ETHTransferFail();\\n\\n/**\\n * @notice It is emitted if the ERC20 approval fails.\\n */\\nerror ERC20ApprovalFail();\\n\\n/**\\n * @notice It is emitted if the ERC20 transfer fails.\\n */\\nerror ERC20TransferFail();\\n\\n/**\\n * @notice It is emitted if the ERC20 transferFrom fails.\\n */\\nerror ERC20TransferFromFail();\\n\\n/**\\n * @notice It is emitted if the ERC721 transferFrom fails.\\n */\\nerror ERC721TransferFromFail();\\n\\n/**\\n * @notice It is emitted if the ERC1155 safeTransferFrom fails.\\n */\\nerror ERC1155SafeTransferFromFail();\\n\\n/**\\n * @notice It is emitted if the ERC1155 safeBatchTransferFrom fails.\\n */\\nerror ERC1155SafeBatchTransferFromFail();\\n\"\r\n    },\r\n    \"src/errors/GenericErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @notice It is emitted if the call recipient is not a contract.\\n */\\nerror NotAContract();\\n\"\r\n    },\r\n    \"src/interfaces/generic/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC721 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@chainlink/contracts/=lib/chainlink/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"chainlink/=lib/chainlink/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"lib/forge-std:ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts:ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts:erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"lib/openzeppelin-contracts:forge-std/=lib/openzeppelin-contracts/lib/forge-std/src/\",\r\n      \"lib/openzeppelin-contracts:openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 5000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"maximumNumberOfDepositsPerRound\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maximumNumberOfParticipantsPerRound\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"roundDuration\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"valuePerEntry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"protocolFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"protocolFeeBp\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reservoirOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transferManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20Oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"signatureValidityPeriod\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"randomnessRequestWaitingTime\",\"type\":\"uint40\"}],\"internalType\":\"struct IFomo.ConstructorCalldata\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyWithdrawn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CutoffTimeNotReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DrawExpirationTimeNotReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20TransferFail\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TransferFromFail\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientParticipants\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCollection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCurrency\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRoundDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaximumNumberOfDepositsReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MessageIdInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDepositor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWinner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullSignerAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolFeeNotPaid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RandomnessRequestAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyFail\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoundCannotBeClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureEOAInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureERC1271Invalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"SignatureLengthInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureParameterSInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"SignatureParameterVInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroDeposits\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"currencies\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"CurrenciesStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entriesCount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"depositIndices\",\"type\":\"uint256[]\"}],\"name\":\"DepositsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Oracle\",\"type\":\"address\"}],\"name\":\"ERC20OracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"maximumNumberOfDepositsPerRound\",\"type\":\"uint40\"}],\"name\":\"MaximumNumberOfDepositsPerRoundUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"maximumNumberOfParticipantsPerRound\",\"type\":\"uint40\"}],\"name\":\"MaximumNumberOfParticipantsPerRoundUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prizeIndices\",\"type\":\"uint256[]\"}],\"name\":\"PrizesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"protocolFeeBp\",\"type\":\"uint16\"}],\"name\":\"ProtocolFeeBpUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"ProtocolFeeRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"randomnessRequestWaitingTime\",\"type\":\"uint40\"}],\"name\":\"RandomnessRequestWaitingTimeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RandomnessRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reservoirOracle\",\"type\":\"address\"}],\"name\":\"ReservoirOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"roundDuration\",\"type\":\"uint40\"}],\"name\":\"RoundDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IFomo.RoundStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"RoundStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"signatureValidityPeriod\",\"type\":\"uint40\"}],\"name\":\"SignatureValidityPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valuePerEntry\",\"type\":\"uint256\"}],\"name\":\"ValuePerEntryUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_PROTOCOL_FEE_BP\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUBSCRIPTION_ID\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelAfterRandomnessRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IFomo.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIdsOrAmounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IFomo.ReservoirOracleFloorPrice\",\"name\":\"reservoirOracleFloorPrice\",\"type\":\"tuple\"}],\"internalType\":\"struct IFomo.DepositCalldata[]\",\"name\":\"deposits\",\"type\":\"tuple[]\"}],\"name\":\"cancelCurrentRoundAndDepositToTheNextRound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"prizeIndices\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IFomo.ClaimPrizesCalldata[]\",\"name\":\"claimPrizesCalldata\",\"type\":\"tuple[]\"}],\"name\":\"claimPrizes\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum IFomo.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIdsOrAmounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IFomo.ReservoirOracleFloorPrice\",\"name\":\"reservoirOracleFloorPrice\",\"type\":\"tuple\"}],\"internalType\":\"struct IFomo.DepositCalldata[]\",\"name\":\"deposits\",\"type\":\"tuple[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20Oracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"prizeIndices\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IFomo.ClaimPrizesCalldata[]\",\"name\":\"claimPrizesCalldata\",\"type\":\"tuple[]\"}],\"name\":\"getClaimPrizesPaymentRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFeeOwed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"enum IFomo.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"currentEntryIndex\",\"type\":\"uint40\"}],\"internalType\":\"struct IFomo.Deposit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCurrencyAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumNumberOfDepositsPerRound\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumNumberOfParticipantsPerRound\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeBp\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomnessRequestWaitingTime\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomnessRequests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"roundId\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"randomWord\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservoirOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundDuration\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"enum IFomo.RoundStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"cutoffTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"drawnAt\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"numberOfParticipants\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maximumNumberOfDeposits\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maximumNumberOfParticipants\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"protocolFeeBp\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"protocolFeeOwed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuePerEntry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundsCount\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signatureValidityPeriod\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"currencies\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"updateCurrenciesStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Oracle\",\"type\":\"address\"}],\"name\":\"updateERC20Oracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"_maximumNumberOfDepositsPerRound\",\"type\":\"uint40\"}],\"name\":\"updateMaximumNumberOfDepositsPerRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"_maximumNumberOfParticipantsPerRound\",\"type\":\"uint40\"}],\"name\":\"updateMaximumNumberOfParticipantsPerRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_protocolFeeBp\",\"type\":\"uint16\"}],\"name\":\"updateProtocolFeeBp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"updateProtocolFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"_randomnessRequestWaitingTime\",\"type\":\"uint40\"}],\"name\":\"updateRandomnessRequestWaitingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reservoirOracle\",\"type\":\"address\"}],\"name\":\"updateReservoirOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"_roundDuration\",\"type\":\"uint40\"}],\"name\":\"updateRoundDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"_signatureValidityPeriod\",\"type\":\"uint40\"}],\"name\":\"updateSignatureValidityPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_valuePerEntry\",\"type\":\"uint256\"}],\"name\":\"updateValuePerEntry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valuePerEntry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"depositIndices\",\"type\":\"uint256[]\"}],\"name\":\"withdrawDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Fomo", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "5000", "ConstructorArguments": "0000000000000000000000009f4c97f45df17e3723cf8f507fd8e03be69c39ac0000000000000000000000009f4c97f45df17e3723cf8f507fd8e03be69c39ac000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000168000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000009f4c97f45df17e3723cf8f507fd8e03be69c39ac00000000000000000000000000000000000000000000000000000000000001f48af398995b04c28e9951adb9721ef74c74f93e6a478f39e7e0777be13527e7ef0000000000000000000000000000000000000000000000000000000000000345000000000000000000000000271682deb8c4e0901d1a1550ad2e64d568e69909000000000000000000000000aeb1d03929bf87f69888f381e73fbf75753d75af000000000000000000000000f03da8443aa1d1abe5cdf6cb96648b76765f63010000000000000000000000009f4c97f45df17e3723cf8f507fd8e03be69c39ac000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000016800000000000000000000000000000000000000000000000000000000000002d0", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}