{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address _owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Profit is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private _totalSupply;\r\n\r\n    uint256 private constant _MULTIPLIER = 2 ** 160;\r\n\r\n    mapping(address => bool) public isExcludedFromFees;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public owner = 0x9BE2b75F93195f00BB64e667Fb1e3a29612bC01F;\r\n\r\n    address public constant DEAD = 0x0000000000000000000000000000000000000000;\r\n\r\n    address public constant DARWIN_SWAP_PAIR_ADDRESS =\r\n        0xd9145CCE52D386f254917e481eB44e9943F39138;\r\n\r\n    address public rewardsWallet = 0x71C596d928Ee6257E7d6844ee956007869f7a75f;\r\n\r\n    // Reflections\r\n    uint256 public culmulativeRewardPerToken;\r\n    address[] public excludedFromRewards;\r\n    mapping(address => uint256) private _lastCulmulativeRewards;\r\n    mapping(address => bool) private _isExcludedFromRewards;\r\n\r\n    modifier onlyDeployer() {\r\n        require(\r\n            msg.sender == owner || msg.sender == address(this),\r\n            \"ONLY_DEPLOYER\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    ////////////////////// REWARDS FUNCTIONS /////////////////////////////////////\r\n\r\n    function setRewardsWallet(address _rewardsWallet) external onlyDeployer {\r\n        rewardsWallet = _rewardsWallet;\r\n    }\r\n\r\n    function _getRewardsOwed(\r\n        uint _cumulativeRewardsPerToken,\r\n        uint _lastCumulativeRewards,\r\n        uint _balance\r\n    ) internal pure returns (uint) {\r\n        return\r\n            ((_cumulativeRewardsPerToken - _lastCumulativeRewards) * _balance) /\r\n            _MULTIPLIER;\r\n    }\r\n\r\n    function _distributeRewardToUser(\r\n        uint _culmulativeRewardsPerToken,\r\n        uint _accountsLastCulmulativeRewards,\r\n        uint _balance,\r\n        address _account\r\n    ) internal returns (uint newBalance) {\r\n        uint _rewardsOwed = _getRewardsOwed(\r\n            _culmulativeRewardsPerToken,\r\n            _accountsLastCulmulativeRewards,\r\n            _balance\r\n        );\r\n        if (_rewardsOwed > balanceOf(rewardsWallet)) {\r\n            _rewardsOwed = balanceOf(rewardsWallet);\r\n        }\r\n        _lastCulmulativeRewards[_account] = _culmulativeRewardsPerToken;\r\n        if (_rewardsOwed > 0) {\r\n            _lowGasTransfer(rewardsWallet, _account, _rewardsOwed);\r\n        }\r\n        newBalance = _balance + _rewardsOwed;\r\n    }\r\n\r\n    function distributeRewards(uint256 amount) external {\r\n        _updateBalance(msg.sender);\r\n        _lowGasTransfer(msg.sender, rewardsWallet, amount);\r\n        _distributeRewards(amount);\r\n    }\r\n\r\n    function _distributeRewards(uint256 amount) internal {\r\n        culmulativeRewardPerToken +=\r\n            (amount * _MULTIPLIER) /\r\n            (totalSupply() - _getExcludedBalances());\r\n    }\r\n\r\n    function _getExcludedBalances()\r\n        internal\r\n        view\r\n        returns (uint excludedBalances)\r\n    {\r\n        address[] memory _excludedAddresses = excludedFromRewards;\r\n        for (uint i = 0; i < _excludedAddresses.length; i++) {\r\n            excludedBalances += balanceOf(_excludedAddresses[i]);\r\n        }\r\n    }\r\n\r\n    function setExcludedFromRewards(address account) public onlyDeployer {\r\n        if (_isExcludedFromRewards[account]) return;\r\n\r\n        uint _culmulativeRewardPerToken = culmulativeRewardPerToken;\r\n        uint last = _lastCulmulativeRewards[account];\r\n        if (last < _culmulativeRewardPerToken) {\r\n            _distributeRewardToUser(\r\n                _culmulativeRewardPerToken,\r\n                last,\r\n                balanceOf(account),\r\n                account\r\n            );\r\n        }\r\n        _isExcludedFromRewards[account] = true;\r\n        excludedFromRewards.push(account);\r\n    }\r\n\r\n    function removeExcludedFromRewards(address account) public onlyDeployer {\r\n        if (!_isExcludedFromRewards[account]) return;\r\n        delete _isExcludedFromRewards[account];\r\n        address[] memory _excludedAddresses = excludedFromRewards;\r\n        for (uint i = 0; i < _excludedAddresses.length; i++) {\r\n            if (_excludedAddresses[i] == account) {\r\n                excludedFromRewards[i] = _excludedAddresses[\r\n                    _excludedAddresses.length - 1\r\n                ];\r\n                excludedFromRewards.pop();\r\n                break;\r\n            }\r\n        }\r\n        _lastCulmulativeRewards[account] = culmulativeRewardPerToken;\r\n    }\r\n\r\n    function _updateBalance(address account) internal {\r\n        if (_isExcludedFromRewards[account]) return;\r\n        uint _culmulativeRewardPerToken = culmulativeRewardPerToken;\r\n        uint _lastCulmulativeReward = _lastCulmulativeRewards[account];\r\n        if (_culmulativeRewardPerToken > _lastCulmulativeReward) {\r\n            _distributeRewardToUser(\r\n                _culmulativeRewardPerToken,\r\n                _lastCulmulativeReward,\r\n                balanceOf(account),\r\n                account\r\n            );\r\n        }\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        _name = \"PROFIT\";\r\n        _symbol = \"PROFIT\";\r\n        _totalSupply = 100_000_000 * (10 ** _decimals);\r\n\r\n        isExcludedFromFees[owner] = true;\r\n\r\n        // Add the DarwinSwap pair as an excluded address to avoid tax and have it apply on the DEX side\r\n\r\n        // exclude addresses from receiving rewards\r\n        setExcludedFromRewards(msg.sender);\r\n        setExcludedFromRewards(rewardsWallet);\r\n        setExcludedFromRewards(DEAD);\r\n\r\n        _balances[owner] = _totalSupply;\r\n\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply - _balances[DEAD];\r\n    }\r\n\r\n    function decimals() public pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(\r\n        address holder,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function approveMax(address spender) public returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        require(spender != address(0), \"NO_ZERO\");\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public returns (bool) {\r\n        require(spender != address(0), \"NO_ZERO\");\r\n        _allowances[msg.sender][spender] =\r\n            allowance(msg.sender, spender) +\r\n            addedValue;\r\n        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public returns (bool) {\r\n        require(spender != address(0), \"NO_ZERO\");\r\n        require(\r\n            allowance(msg.sender, spender) >= subtractedValue,\r\n            \"INSUFF_ALLOWANCE\"\r\n        );\r\n        _allowances[msg.sender][spender] =\r\n            allowance(msg.sender, spender) -\r\n            subtractedValue;\r\n        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            require(\r\n                _allowances[sender][msg.sender] >= amount,\r\n                \"INSUFF_ALLOWANCE\"\r\n            );\r\n            _allowances[sender][msg.sender] -= amount;\r\n            emit Approval(sender, msg.sender, _allowances[sender][msg.sender]);\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _updateBalance(sender);\r\n        _updateBalance(recipient);\r\n\r\n        if (!checkTaxFree(sender, recipient)) {\r\n            // Burn 10% of the transfer amount if the sender is not excluded from fees\r\n            _lowGasTransfer(sender, DEAD, (amount * 10) / 100);\r\n            amount = (amount * 90) / 100;\r\n        }\r\n        // Send the full amount to the recipient\r\n\r\n        _lowGasTransfer(sender, recipient, amount);\r\n\r\n        if (recipient == rewardsWallet) {\r\n            _distributeRewards(amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function checkTaxFree(\r\n        address sender,\r\n        address recipient\r\n    ) internal view returns (bool) {\r\n        if (isExcludedFromFees[sender] || isExcludedFromFees[recipient])\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    function _lowGasTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(sender != address(0), \"Can't use zero addresses here\");\r\n        require(\r\n            amount <= _balances[sender],\r\n            \"Can't transfer more than you own\"\r\n        );\r\n        if (amount == 0) return true;\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function rescueEth(uint256 amount) external onlyDeployer {\r\n        (bool success, ) = address(owner).call{value: amount}(\"\");\r\n        success = true;\r\n    }\r\n\r\n    function rescueToken(address token, uint256 amount) external onlyDeployer {\r\n        IERC20(token).transfer(owner, amount);\r\n    }\r\n\r\n    function excludeFromFees(\r\n        address excludedWallet,\r\n        bool status\r\n    ) external onlyDeployer {\r\n        isExcludedFromFees[excludedWallet] = status;\r\n    }\r\n\r\n    function renounceOwnership() external onlyDeployer {\r\n        owner = address(0);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DARWIN_SWAP_PAIR_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"culmulativeRewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"excludedWallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"excludedFromRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeExcludedFromRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setExcludedFromRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsWallet\",\"type\":\"address\"}],\"name\":\"setRewardsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Profit", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9f2e9eb9d9878ca09e0ba3b253977a132849b778cef1d99f63e78e71032823e0"}