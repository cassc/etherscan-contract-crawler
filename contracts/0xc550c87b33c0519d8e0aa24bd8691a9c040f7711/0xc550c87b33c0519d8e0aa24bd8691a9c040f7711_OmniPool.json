{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/OmniPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-upgradeable/contracts/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"openzeppelin-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"openzeppelin-upgradeable/contracts/security/PausableUpgradeable.sol\\\";\\nimport \\\"openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"./interfaces/IOmniOracle.sol\\\";\\nimport \\\"./interfaces/IOmniPool.sol\\\";\\nimport \\\"./interfaces/IOmniToken.sol\\\";\\nimport \\\"./interfaces/IOmniTokenNoBorrow.sol\\\";\\nimport \\\"./interfaces/IWithUnderlying.sol\\\";\\nimport \\\"./SubAccount.sol\\\";\\n\\n/**\\n * @title OmniPool\\n * @notice This contract implements a manager for handling loans, protocol market, mode, and account configurations, and liquidations.\\n * @dev This contract implements a lending pool with various modes and market configurations.\\n * It utilizes different structs to keep track of market, mode, account configurations, evaluations,\\n * and liquidation bonuses. It has a variety of external and public functions to manage and interact with\\n * the lending pool, along with internal utility functions. Includes AccessContral, Pausable, and ReentrancyGuardUpgradeable (includes Initializable)\\n * from OpenZeppelin.\\n */\\ncontract OmniPool is IOmniPool, AccessControlUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable {\\n    using SubAccount for address;\\n\\n    bytes32 public constant SOFT_LIQUIDATION_ROLE = keccak256(\\\"SOFT_LIQUIDATION_ROLE\\\");\\n    bytes32 public constant MARKET_CONFIGURATOR_ROLE = keccak256(\\\"MARKET_CONFIGURATOR_ROLE\\\");\\n\\n    uint256 public constant SELF_COLLATERALIZATION_FACTOR = 0.96e9; // 0.96\\n    uint256 public constant FACTOR_PRECISION_SCALE = 1e9;\\n    uint256 public constant LIQ_BONUS_PRECISION_SCALE = 1e9;\\n    uint256 public constant HEALTH_FACTOR_SCALE = 1e9;\\n    uint256 public constant MAX_BASE_SOFT_LIQUIDATION = 1.4e9;\\n    uint256 public constant MAX_LIQ_KINK = 0.2e9; // Borrow value exceeds deposit value by 20%\\n    uint256 public constant PRICE_SCALE = 1e18; // Must match up with PRICE_SCALE in OmniOracle\\n    uint256 public constant MAX_MARKETS_PER_ACCOUNT = 9; // Will be 10 including isolated collateral market\\n\\n    mapping(bytes32 => AccountInfo) public accountInfos;\\n    mapping(bytes32 => address[]) public accountMarkets;\\n\\n    uint256 public modeCount;\\n    mapping(uint256 => ModeConfiguration) public modeConfigurations;\\n    mapping(address => MarketConfiguration) public marketConfigurations;\\n    mapping(address => LiquidationBonusConfiguration) public liquidationBonusConfigurations;\\n\\n    address public oracle;\\n    uint8 public pauseTranche;\\n    bytes32 public reserveReceiver;\\n\\n    /**\\n     * @notice Initializes a new instance of the contract, setting up the oracle, reserve receiver, pause tranche, and various roles.\\n     * This constructor sets the oracle address, initializes the pause tranche to its maximum value, and sets the reserve receiver to the provided address.\\n     * It also sets up the DEFAULT_ADMIN_ROLE, SOFT_LIQUIDATION_ROLE, and MARKET_CONFIGURATOR_ROLE, assigning them to the account deploying the contract.\\n     * @param _oracle The address of the oracle contract to be used for price information.\\n     * @param _reserveReceiver The address of the reserve receiver. This address will be converted to an account with a subId of 0.\\n     * @param _admin The address of the multisig admin\\n     */\\n    function initialize(address _oracle, address _reserveReceiver, address _admin) external initializer {\\n        __ReentrancyGuard_init();\\n        __AccessControl_init();\\n        __Pausable_init();\\n        oracle = _oracle;\\n        pauseTranche = type(uint8).max;\\n        reserveReceiver = _reserveReceiver.toAccount(0);\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin); // Additionally set up other roles?\\n        _setupRole(SOFT_LIQUIDATION_ROLE, _admin);\\n        _setupRole(MARKET_CONFIGURATOR_ROLE, _admin);\\n    }\\n\\n    /**\\n     * @notice Allows a user to enter an isolated market, the market configuration must be for isolated collateral.\\n     * @dev The function checks whether the market is valid for isolation and updates the account's isolatedCollateralMarket field.\\n     * A subaccount is only allowed to have 1 isolated collateral market at a time.\\n     * @param _subId The sub-account identifier.\\n     * @param _isolatedMarket The address of the isolated market to enter.\\n     */\\n    function enterIsolatedMarket(uint96 _subId, address _isolatedMarket) external {\\n        bytes32 accountId = msg.sender.toAccount(_subId);\\n        AccountInfo memory account = accountInfos[accountId];\\n        require(account.modeId == 0, \\\"OmniPool::enterIsolatedMarket: Already in a mode.\\\");\\n        require(\\n            account.isolatedCollateralMarket == address(0),\\n            \\\"OmniPool::enterIsolatedMarket: Already has isolated collateral.\\\"\\n        );\\n        MarketConfiguration memory marketConfig = marketConfigurations[_isolatedMarket];\\n        if (marketConfig.expirationTimestamp <= block.timestamp || !marketConfig.isIsolatedCollateral) {\\n            revert(\\\"OmniPool::enterIsolatedMarket: Isolated market invalid.\\\");\\n        }\\n        Evaluation memory eval = evaluateAccount(accountId);\\n        require(eval.numBorrow == 0, \\\"OmniPool::enterIsolatedMarket: Non-zero borrow count.\\\");\\n        accountInfos[accountId].isolatedCollateralMarket = _isolatedMarket;\\n        emit EnteredIsolatedMarket(accountId, _isolatedMarket);\\n    }\\n\\n    /**\\n     * @notice Allows a user to enter multiple unique markets, none of them are isolated collateral markets.\\n     * @dev The function checks the validity of each market and updates the account's market list. Markets must not already be entered.\\n     * @param _subId The sub-account identifier.\\n     * @param _markets The addresses of the markets to enter.\\n     */\\n    function enterMarkets(uint96 _subId, address[] calldata _markets) external {\\n        bytes32 accountId = msg.sender.toAccount(_subId);\\n        require(accountInfos[accountId].modeId == 0, \\\"OmniPool::enterMarkets: Already in a mode.\\\");\\n        address[] memory existingMarkets = accountMarkets[accountId];\\n        address[] memory newMarkets = new address[](existingMarkets.length + _markets.length);\\n        require(newMarkets.length <= MAX_MARKETS_PER_ACCOUNT, \\\"OmniPool::enterMarkets: Too many markets.\\\");\\n        for (uint256 i = 0; i < existingMarkets.length; ++i) {\\n            // Copy over existing markets\\n            newMarkets[i] = existingMarkets[i];\\n        }\\n        for (uint256 i = 0; i < _markets.length; ++i) {\\n            address market = _markets[i];\\n            MarketConfiguration memory marketConfig = marketConfigurations[market];\\n            require(\\n                marketConfig.expirationTimestamp > block.timestamp && !marketConfig.isIsolatedCollateral,\\n                \\\"OmniPool::enterMarkets: Market invalid.\\\"\\n            );\\n            require(!_contains(newMarkets, market), \\\"OmniPool::enterMarkets: Already in the market.\\\");\\n            require(\\n                IOmniToken(market).getBorrowCap(0) > 0,\\n                \\\"OmniPool::enterMarkets: Market has no borrow cap for 0 tranche.\\\"\\n            );\\n            newMarkets[i + existingMarkets.length] = market;\\n        }\\n        accountMarkets[accountId] = newMarkets;\\n        emit EnteredMarkets(accountId, _markets);\\n    }\\n\\n    /**\\n     * @notice Allows a user to exit multiple markets including their isolated market. There must be no borrows active on the subaccount to exit a market.\\n     * @dev The function removes the specified markets from the account's market list after ensuring the account has no outstanding borrows.\\n     * @param _subId The sub-account identifier.\\n     * @param _market The address of the market to exit.\\n     */\\n    function exitMarket(uint96 _subId, address _market) external {\\n        bytes32 accountId = msg.sender.toAccount(_subId);\\n        AccountInfo memory account = accountInfos[accountId];\\n        require(account.modeId == 0, \\\"OmniPool::exitMarkets: In a mode, need to call exitMode.\\\");\\n        address[] memory markets_ = getAccountPoolMarkets(accountId, account);\\n        Evaluation memory eval = _evaluateAccountInternal(accountId, markets_, account);\\n        require(eval.numBorrow == 0, \\\"OmniPool::exitMarkets: Non-zero borrow count.\\\");\\n        if (_market == account.isolatedCollateralMarket) {\\n            accountInfos[accountId].isolatedCollateralMarket = address(0);\\n        } else {\\n            require(markets_.length > 0, \\\"OmniPool::exitMarkets: No markets to exit\\\");\\n            require(_contains(markets_, _market), \\\"OmniPool::exitMarkets: Market not entered\\\");\\n            uint256 newMarketsLength = markets_.length - 1;\\n            if (newMarketsLength > 0) {\\n                address[] memory newMarkets = new address[](markets_.length - 1);\\n                uint256 newIndex = 0;\\n                for (uint256 i = 0; i < markets_.length; ++i) {\\n                    if (markets_[i] != _market) {\\n                        newMarkets[newIndex] = markets_[i];\\n                        ++newIndex;\\n                    }\\n                }\\n                delete accountMarkets[accountId]; // Gas refund?\\n                accountMarkets[accountId] = newMarkets;\\n            } else {\\n                delete accountMarkets[accountId];\\n            }\\n        }\\n        emit ExitedMarket(accountId, _market);\\n    }\\n\\n    /**\\n     * @notice Clears all markets for a user including isolated collateral. The subaccount must have no active borrows to clear markets.\\n     * @dev The function checks that the account has no outstanding borrows before clearing all markets.\\n     * @param _subId The sub-account identifier.\\n     */\\n    function clearMarkets(uint96 _subId) external {\\n        bytes32 accountId = msg.sender.toAccount(_subId);\\n        AccountInfo memory account = accountInfos[accountId];\\n        require(account.modeId == 0, \\\"OmniPool::clearMarkets: Already in a mode.\\\");\\n        Evaluation memory eval = evaluateAccount(accountId);\\n        require(eval.numBorrow == 0, \\\"OmniPool::clearMarkets: Non-zero borrow count.\\\");\\n        accountInfos[accountId].isolatedCollateralMarket = address(0);\\n        delete accountMarkets[accountId];\\n        emit ClearedMarkets(accountId);\\n    }\\n\\n    /**\\n     * @notice Allows a user to enter a mode. The subaccount must not already be in a mode. The mode must not have expired.\\n     * @dev The function sets the modeId field in the account's info and emits an EnteredMode event.\\n     * @param _subId The sub-account identifier.\\n     * @param _modeId The mode identifier to enter.\\n     */\\n    function enterMode(uint96 _subId, uint8 _modeId) external {\\n        bytes32 accountId = msg.sender.toAccount(_subId);\\n        require(_modeId > 0 && _modeId <= modeCount, \\\"OmniPool::enterMode: Invalid mode ID.\\\");\\n        AccountInfo memory account = accountInfos[accountId];\\n        require(account.modeId == 0, \\\"OmniPool::enterMode: Already in a mode.\\\");\\n        require(\\n            accountMarkets[accountId].length == 0 && account.isolatedCollateralMarket == address(0),\\n            \\\"OmniPool::enterMode: Non-zero market count.\\\"\\n        );\\n        require(modeConfigurations[_modeId].expirationTimestamp > block.timestamp, \\\"OmniPool::enterMode: Mode expired.\\\");\\n        account.modeId = _modeId;\\n        accountInfos[accountId] = account;\\n        emit EnteredMode(accountId, _modeId);\\n    }\\n\\n    /**\\n     * @notice Allows a user to exit a mode. There must be no active borrows in the subaccount to exit.\\n     * @dev The function resets the modeId field in the account's info and emits an ExitedMode event.\\n     * @param _subId The sub-account identifier.\\n     */\\n    function exitMode(uint96 _subId) external {\\n        bytes32 accountId = msg.sender.toAccount(_subId);\\n        AccountInfo memory account = accountInfos[accountId];\\n        require(account.modeId != 0, \\\"OmniPool::exitMode: Not in a mode.\\\");\\n        Evaluation memory eval = evaluateAccount(accountId);\\n        require(eval.numBorrow == 0, \\\"OmniPool::exitMode: Non-zero borrow count.\\\");\\n        account.modeId = 0;\\n        accountInfos[accountId] = account;\\n        emit ExitedMode(accountId);\\n    }\\n\\n    /**\\n     * @notice Evaluates an account's deposits and borrows values.\\n     * @dev The function computes the true and adjusted values of deposits and borrows for the account.\\n     * @param _accountId The account identifier.\\n     * @return eval An Evaluation struct containing the account's financial information.\\n     */\\n    function evaluateAccount(bytes32 _accountId) public returns (Evaluation memory eval) {\\n        AccountInfo memory account = accountInfos[_accountId];\\n        address[] memory poolMarkets = getAccountPoolMarkets(_accountId, account);\\n        return _evaluateAccountInternal(_accountId, poolMarkets, account);\\n    }\\n\\n    /**\\n     * @notice Evaluates an account's financial standing within a lending pool.\\n     * @dev This function accrues interest, computes market prices, deposit and borrow balances, and calculates the adjusted values of\\n     * deposits and borrows based on the account's mode and market configurations.\\n     * @param _accountId The unique identifier of the account to be evaluated.\\n     * @param _poolMarkets An array of addresses representing the markets in which the account has activity. Excludes the isolated collateral market if it exists.\\n     * @param _account The AccountInfo struct containing the account's mode, isolated collateral market, and other relevant data.\\n     * @return eval An Evaluation struct containing data on the account's deposit and borrow balances, both true and adjusted values.\\n     */\\n    function _evaluateAccountInternal(bytes32 _accountId, address[] memory _poolMarkets, AccountInfo memory _account)\\n        internal\\n        returns (Evaluation memory eval)\\n    {\\n        ModeConfiguration memory mode;\\n        if (_account.modeId != 0) mode = modeConfigurations[_account.modeId];\\n        for (uint256 i = 0; i < _poolMarkets.length; ++i) {\\n            // Accrue interest for all borrowable markets\\n            IOmniToken(_poolMarkets[i]).accrue();\\n        }\\n        uint256 marketCount = _poolMarkets.length;\\n        if (_account.isolatedCollateralMarket != address(0)) {\\n            ++marketCount;\\n        }\\n        for (uint256 i = 0; i < marketCount; ++i) {\\n            address market;\\n            // A market is either a pool market or the isolated collateral market (last index).\\n            if (i < _poolMarkets.length) {\\n                market = _poolMarkets[i];\\n            } else {\\n                market = _account.isolatedCollateralMarket;\\n            }\\n            MarketConfiguration memory marketConfiguration_ = marketConfigurations[market];\\n            if (marketConfiguration_.expirationTimestamp <= block.timestamp) {\\n                eval.isExpired = true; // Must repay all debts and exit market to get rid of unhealthy account status if expired\\n            }\\n            address underlying = IWithUnderlying(market).underlying();\\n            uint256 price = IOmniOracle(oracle).getPrice(underlying); // Returns price in base units multiplied by 1e36\\n            uint256 depositAmount = IOmniTokenBase(market).getAccountDepositInUnderlying(_accountId);\\n            if (depositAmount != 0) {\\n                ++eval.numDeposit;\\n                uint256 depositValue = (depositAmount * price) / PRICE_SCALE; // Rounds down\\n                eval.depositTrueValue += depositValue;\\n                uint256 collateralFactor = marketCount == 1\\n                    ? SELF_COLLATERALIZATION_FACTOR\\n                    : _account.modeId == 0 ? uint256(marketConfiguration_.collateralFactor) : uint256(mode.collateralFactor);\\n                eval.depositAdjValue += (depositValue * collateralFactor) / FACTOR_PRECISION_SCALE; // Rounds down\\n            }\\n            if (i >= _poolMarkets.length) {\\n                // Isolated collateral market. No borrow.\\n                continue;\\n            }\\n            uint8 borrowTier = getAccountBorrowTier(_account);\\n            uint256 borrowAmount = IOmniToken(market).getAccountBorrowInUnderlying(_accountId, borrowTier);\\n            if (borrowAmount != 0) {\\n                ++eval.numBorrow;\\n                uint256 borrowValue = (borrowAmount * price) / PRICE_SCALE; // Rounds down\\n                eval.borrowTrueValue += borrowValue;\\n                uint256 borrowFactor = marketCount == 1\\n                    ? SELF_COLLATERALIZATION_FACTOR\\n                    : _account.modeId == 0 ? uint256(marketConfiguration_.borrowFactor) : uint256(mode.borrowFactor);\\n                eval.borrowAdjValue += (borrowValue * FACTOR_PRECISION_SCALE) / borrowFactor; // Rounds down\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows an account to borrow funds from a specified market the subaccount has entered, provided the account remains in a healthy financial standing post-borrow.\\n     * @param _subId The sub-account identifier from which to borrow.\\n     * @param _market The address of the market from which to borrow.\\n     * @param _amount The amount of funds to borrow.\\n     */\\n    function borrow(uint96 _subId, address _market, uint256 _amount) external nonReentrant whenNotPaused {\\n        bytes32 accountId = msg.sender.toAccount(_subId);\\n        AccountInfo memory account = accountInfos[accountId];\\n        address[] memory poolMarkets = getAccountPoolMarkets(accountId, account);\\n        require(_contains(poolMarkets, _market), \\\"OmniPool::borrow: Not in pool markets.\\\");\\n        uint8 borrowTier = getAccountBorrowTier(account);\\n        IOmniToken(_market).borrow(accountId, borrowTier, _amount);\\n        Evaluation memory eval = _evaluateAccountInternal(accountId, poolMarkets, account);\\n        require(\\n            eval.depositAdjValue >= eval.borrowAdjValue && !eval.isExpired,\\n            \\\"OmniPool::borrow: Not healthy after borrow.\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Allows an account to repay borrowed funds to a specified market the subaccount has entered.\\n     * @param _subId The sub-account identifier from which to repay.\\n     * @param _market The address of the market to which to repay.\\n     * @param _amount The amount of funds to repay. If _amount is 0, the contract will repay the entire borrow balance.\\n     */\\n    function repay(uint96 _subId, address _market, uint256 _amount) external {\\n        bytes32 accountId = msg.sender.toAccount(_subId);\\n        AccountInfo memory account = accountInfos[accountId];\\n        address[] memory poolMarkets = getAccountPoolMarkets(accountId, account);\\n        require(_contains(poolMarkets, _market), \\\"OmniPool::repay: Not in pool markets.\\\");\\n        uint8 borrowTier = getAccountBorrowTier(account);\\n        IOmniToken(_market).repay(accountId, msg.sender, borrowTier, _amount);\\n    }\\n\\n    /**\\n     * @notice Initiates the liquidation process on an undercollateralized or expired account, repaying some or all of the target account's borrow balance\\n     * while seizing a portion of the target's collateral. The amount of collateral seized is determined by the liquidation bonus and the price of the\\n     * assets involved. Soft liquidation is only allowed if there is no bad debt, otherwise if bad debt exists a full liquidation is bypassed.\\n     * @dev Liquidation configuration must be set for the _collateralMarket or else will revert.\\n     * The seized amount of shares is not guaranteed to compensate the value of the repayment during liquidation. Liquidators should check the returned value if they have a\\n     * minimum expectation of payout from liquidating, and perform necessary logic to revert if necessary.\\n     * @param _params The LiquidationParams struct containing the target account's identifier, the liquidator's identifier, the market to be liquidated,\\n     * @return seizedShares The amount of shares seized from the liquidated account.\\n     */\\n    function liquidate(LiquidationParams calldata _params)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n        returns (uint256[] memory seizedShares)\\n    {\\n        AccountInfo memory targetAccount = accountInfos[_params.targetAccountId];\\n        address[] memory poolMarkets = getAccountPoolMarkets(_params.targetAccountId, targetAccount);\\n        require(\\n            _contains(poolMarkets, _params.liquidateMarket), \\\"OmniPool::liquidate: LiquidateMarket not in pool markets.\\\"\\n        );\\n        require(\\n            _contains(poolMarkets, _params.collateralMarket)\\n                || targetAccount.isolatedCollateralMarket == _params.collateralMarket,\\n            \\\"OmniPool::liquidate: CollateralMarket not available to seize.\\\"\\n        );\\n        Evaluation memory evalBefore = _evaluateAccountInternal(_params.targetAccountId, poolMarkets, targetAccount);\\n        require(evalBefore.numBorrow > 0, \\\"OmniPool::liquidate: No borrow to liquidate.\\\");\\n        require(\\n            (evalBefore.depositAdjValue < evalBefore.borrowAdjValue)\\n                || marketConfigurations[_params.collateralMarket].expirationTimestamp <= block.timestamp,\\n            \\\"OmniPool::liquidate: Account still healthy.\\\"\\n        );\\n        uint8 borrowTier = getAccountBorrowTier(targetAccount);\\n        uint256 amount =\\n            IOmniToken(_params.liquidateMarket).repay(_params.targetAccountId, msg.sender, borrowTier, _params.amount);\\n        (uint256 liquidationBonus, uint256 softThreshold) = getLiquidationBonusAndThreshold(\\n            evalBefore.depositAdjValue, evalBefore.borrowAdjValue, _params.collateralMarket\\n        );\\n        {\\n            // Avoid stack too deep\\n            uint256 borrowPrice = IOmniOracle(oracle).getPrice(IWithUnderlying(_params.liquidateMarket).underlying());\\n            uint256 depositPrice = IOmniOracle(oracle).getPrice(IWithUnderlying(_params.collateralMarket).underlying());\\n            uint256 seizeAmount = Math.ceilDiv(\\n                Math.ceilDiv(amount * borrowPrice, depositPrice) * (LIQ_BONUS_PRECISION_SCALE + liquidationBonus), // Need to add base since liquidationBonus < LIQ_BONUS_PRECISION_SCALE\\n                LIQ_BONUS_PRECISION_SCALE\\n            ); // round up\\n            seizedShares = IOmniTokenBase(_params.collateralMarket).seize(\\n                _params.targetAccountId, _params.liquidatorAccountId, seizeAmount\\n            );\\n        }\\n        Evaluation memory evalAfter = _evaluateAccountInternal(_params.targetAccountId, poolMarkets, targetAccount);\\n        if (evalAfter.borrowTrueValue > evalAfter.depositTrueValue) {\\n            pauseTranche = borrowTier > pauseTranche ? pauseTranche : borrowTier;\\n            emit PausedTranche(pauseTranche);\\n        } else if (!evalAfter.isExpired) {\\n            // If expired, no liquidation threshold\\n            require(\\n                checkSoftLiquidation(evalAfter.depositAdjValue, evalAfter.borrowAdjValue, softThreshold, targetAccount),\\n                \\\"OmniPool::liquidate: Too much has been liquidated.\\\"\\n            );\\n        }\\n        emit Liquidated(\\n            msg.sender,\\n            _params.targetAccountId,\\n            _params.liquidatorAccountId,\\n            _params.liquidateMarket,\\n            _params.collateralMarket,\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Checks whether a soft liquidation condition is met based on the account's adjusted deposit and borrow values.\\n     * @param _depositAdjValue The adjusted value of the account's deposits.\\n     * @param _borrowAdjValue The adjusted value of the account's borrows.\\n     * @param _softThreshold The threshold value for soft liquidation.\\n     * @param _account The AccountInfo struct containing the account's mode, isolated collateral market, and other relevant data.\\n     * @return A boolean indicating whether a soft liquidation condition is met.\\n     */\\n    function checkSoftLiquidation(\\n        uint256 _depositAdjValue,\\n        uint256 _borrowAdjValue,\\n        uint256 _softThreshold,\\n        AccountInfo memory _account\\n    ) public pure returns (bool) {\\n        if (_borrowAdjValue == 0) {\\n            return false;\\n        }\\n        uint256 healthFactor = (_depositAdjValue * HEALTH_FACTOR_SCALE) / _borrowAdjValue; // Round down\\n        uint256 threshold = _account.softThreshold != 0 ? _account.softThreshold : _softThreshold;\\n        return healthFactor <= threshold;\\n    }\\n\\n    /**\\n     * @notice Initiates the process of socializing a fully liquidated account's remaining loss to the users of the specified market and tranche, discretion to admin.\\n     * @dev There is a separate call that must be made to unpause the tranches, discretion to admin. Due to potential problems w/ a full liquidation\\n     * allow for 0.1bps ($10 for $1M) difference in deposit and borrow values. However, it is expected that admin calls liquidate prior to calling socializeLoss in script.\\n     * @param _market The address of the market in which the loss is socialized.\\n     * @param _account The unique identifier of the fully liquidated account.\\n     */\\n    function socializeLoss(address _market, bytes32 _account) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint8 borrowTier = getAccountBorrowTier(accountInfos[_account]);\\n        Evaluation memory eval = evaluateAccount(_account);\\n        uint256 percentDiff = eval.depositTrueValue * 1e18 / eval.borrowTrueValue;\\n        require(\\n            percentDiff < 0.00001e18,\\n            \\\"OmniPool::socializeLoss: Account not fully liquidated, please call liquidate prior to fully liquidate account.\\\"\\n        );\\n        IOmniToken(_market).socializeLoss(_account, borrowTier);\\n        emit SocializedLoss(_market, borrowTier, _account);\\n    }\\n\\n    /**\\n     * @notice Determines the risk tier associated with an subaccount's borrow activity. The tier is derived from the subaccount's isolated collateral market.\\n     * @param _account The AccountInfo struct containing the subaccount's mode, isolated collateral market, and other relevant data.\\n     * @return The risk tier associated with the subaccount's borrow activity.\\n     */\\n    function getAccountBorrowTier(AccountInfo memory _account) public view returns (uint8) {\\n        address isolatedCollateralMarket = _account.isolatedCollateralMarket;\\n        if (_account.modeId == 0) {\\n            if (isolatedCollateralMarket == address(0)) {\\n                // Account has no isolated collateral market. Use tier 0 (lowest risk).\\n                return 0;\\n            } else {\\n                // Account has isolated collateral market. Use the market's risk tranche.\\n                return marketConfigurations[isolatedCollateralMarket].riskTranche;\\n            }\\n        } else {\\n            // Account is in a mode. Use the mode's risk tranche.\\n            return modeConfigurations[_account.modeId].modeTranche;\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves all markets, except for the isolated collateral market, associated with an subaccount.\\n     * @param _accountId The unique identifier of the subaccount whose markets are to be retrieved.\\n     * @param _account The AccountInfo struct containing the subaccount's mode, isolated collateral market, and other relevant data.\\n     * @return An array of addresses representing the markets associated with the subaccount.\\n     */\\n    function getAccountPoolMarkets(bytes32 _accountId, AccountInfo memory _account)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        if (_account.modeId == 0) {\\n            // Account is not in a mode. Use the account's markets.\\n            return accountMarkets[_accountId];\\n        } else {\\n            // Account is in a mode. Use the mode's markets.\\n            assert(_account.modeId <= modeCount);\\n            return modeConfigurations[_account.modeId].markets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes the liquidation bonus and soft threshold values based on the account's adjusted deposit and borrow values and the specified collateral market.\\n     * @param _depositAdjValue The adjusted value of the account's deposits.\\n     * @param _borrowAdjValue The adjusted value of the account's borrows.\\n     * @param _collateralMarket The address of the collateral market.\\n     * @return bonus The computed liquidation bonus value.\\n     * @return softThreshold The computed soft threshold value.\\n     */\\n    function getLiquidationBonusAndThreshold(\\n        uint256 _depositAdjValue,\\n        uint256 _borrowAdjValue,\\n        address _collateralMarket\\n    ) public view returns (uint256 bonus, uint256 softThreshold) {\\n        if (_borrowAdjValue > _depositAdjValue) {\\n            // Prioritize unhealthiness over expiry in case where is expired and unhealthy is true\\n            LiquidationBonusConfiguration memory liquidationBonusConfiguration_ =\\n                liquidationBonusConfigurations[_collateralMarket];\\n            softThreshold = liquidationBonusConfiguration_.softThreshold;\\n            uint256 pctDiff =\\n                Math.ceilDiv(_borrowAdjValue * LIQ_BONUS_PRECISION_SCALE, _depositAdjValue) - LIQ_BONUS_PRECISION_SCALE; // Round up\\n            if (pctDiff <= liquidationBonusConfiguration_.kink) {\\n                bonus = liquidationBonusConfiguration_.start;\\n                bonus += Math.ceilDiv(\\n                    pctDiff * (liquidationBonusConfiguration_.end - liquidationBonusConfiguration_.start),\\n                    liquidationBonusConfiguration_.kink\\n                );\\n            } else {\\n                bonus = liquidationBonusConfiguration_.end;\\n            }\\n        } else if (marketConfigurations[_collateralMarket].expirationTimestamp <= block.timestamp) {\\n            LiquidationBonusConfiguration memory liquidationBonusConfiguration_ =\\n                liquidationBonusConfigurations[_collateralMarket];\\n            softThreshold = liquidationBonusConfiguration_.softThreshold;\\n            bonus = liquidationBonusConfiguration_.expiredBonus;\\n        } else {\\n            revert(\\\"OmniPool::getLiquidationBonus: No liquidation bonus, account is not liquidatable \\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Determines if an account is healthy by comparing the factor adjusted price weighted values of deposits and borrows.\\n     * @dev The function evaluates the account and returns true if the account is healthy. Intentionally do not check expiration here.\\n     * @param _accountId The account identifier.\\n     * @return A boolean indicating whether the account is healthy.\\n     */\\n    function isAccountHealthy(bytes32 _accountId) external returns (bool) {\\n        Evaluation memory eval = evaluateAccount(_accountId);\\n        return eval.depositAdjValue >= eval.borrowAdjValue && !eval.isExpired;\\n    }\\n\\n    /**\\n     * @notice Resets the pause tranche to its default value. This function should only be called after all bad debt is resolved.\\n     * Must be called by an account with the DEFAULT_ADMIN_ROLE.\\n     */\\n    function resetPauseTranche() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        pauseTranche = type(uint8).max;\\n        emit UnpausedTranche();\\n    }\\n\\n    /**\\n     * @notice Configures a market with specific parameters. This function can only be called by an account with the MARKET_CONFIGURATOR_ROLE.\\n     * It validates the configuration provided especially focusing on isolated collateral settings, borrow factors and risk tranches.\\n     * Should never configure a IOmniTokenNoBorrow (non-borrwable) token with a borrowFactor > 0 and not as isolated, otherwise will break.\\n     * @dev Setting markets to the 0 riskTranche comes with special privileges and should be used carefully after strict risk analysis.\\n     * @param _market The address of the market to be configured.\\n     * @param _marketConfig The MarketConfiguration struct containing the market's configurations.\\n     */\\n    function setMarketConfiguration(address _market, MarketConfiguration calldata _marketConfig)\\n        external\\n        onlyRole(MARKET_CONFIGURATOR_ROLE)\\n    {\\n        // Set to block.timestamp value to have the market expire in that block for emergencies\\n        if (_marketConfig.expirationTimestamp <= block.timestamp) {\\n            revert(\\\"OmniPool::setMarketConfiguration: Bad expiration timestamp.\\\");\\n        }\\n        if (_marketConfig.isIsolatedCollateral && (_marketConfig.borrowFactor > 0 || _marketConfig.riskTranche == 0)) {\\n            revert(\\\"OmniPool::setMarketConfiguration: Bad configuration for isolated collateral.\\\");\\n        }\\n        if (\\n            _marketConfig.collateralFactor == 0\\n                && (_marketConfig.borrowFactor == 0 || _marketConfig.riskTranche != type(uint8).max)\\n        ) {\\n            revert(\\\"OmniPool::setMarketConfiguration: Invalid configuration for borrowable long tail asset.\\\");\\n        }\\n        MarketConfiguration memory currentConfig = marketConfigurations[_market];\\n        if (currentConfig.collateralFactor != 0) {\\n            require(\\n                _marketConfig.isIsolatedCollateral == currentConfig.isIsolatedCollateral,\\n                \\\"OmniPool::setMarketConfiguration: Cannot change isolated collateral status.\\\"\\n            );\\n        }\\n        marketConfigurations[_market] = _marketConfig;\\n        emit SetMarketConfiguration(_market, _marketConfig);\\n    }\\n\\n    /**\\n     * @notice Removes the market configuration for a specified market.\\n     * @dev This function can only be called by an account with the `MARKET_CONFIGURATOR_ROLE` role.\\n     * It checks if the market's underlying asset balance is zero before allowing removal.\\n     * @param _market The address of the market whose configuration is to be removed.\\n     */\\n    function removeMarketConfiguration(address _market) external onlyRole(MARKET_CONFIGURATOR_ROLE) {\\n        require(\\n            IERC20(IWithUnderlying(_market).underlying()).balanceOf(_market) == 0,\\n            \\\"OmniPool::removeMarketConfiguration: Market still has balance.\\\"\\n        );\\n        delete marketConfigurations[_market];\\n        emit RemovedMarketConfiguration(_market);\\n    }\\n\\n    /**\\n     * @notice Sets the configurations for a mode. This function can only be called by an account with the MARKET_CONFIGURATOR_ROLE.\\n     * Each mode configuration overrides all borrow and collateral factors for markets within that mode and should be used cautiously.\\n     * @dev This is a privileged function that should be used carefully after strict risk analysis, as it overrides factors for all markets in the mode.\\n     * Modes should never include markets that are considered isolated assets.\\n     * @param _modeConfiguration A ModeConfiguration struct containing the configuration for the mode.\\n     */\\n    function setModeConfiguration(ModeConfiguration calldata _modeConfiguration)\\n        external\\n        onlyRole(MARKET_CONFIGURATOR_ROLE)\\n    {\\n        if (_modeConfiguration.expirationTimestamp <= block.timestamp) {\\n            revert(\\\"OmniPool::setModeConfiguration: Bad expiration timestamp.\\\");\\n        }\\n        for (uint256 i = 0; i < _modeConfiguration.markets.length; ++i) {\\n            for (uint256 j = i + 1; j < _modeConfiguration.markets.length; j++) {\\n                if (_modeConfiguration.markets[i] == _modeConfiguration.markets[j]) {\\n                    revert(\\\"OmniPool:setModeConfiguration: No duplicate markets allowed.\\\");\\n                }\\n            }\\n        }\\n        modeCount++;\\n        modeConfigurations[modeCount] = _modeConfiguration;\\n        emit SetModeConfiguration(modeCount, _modeConfiguration);\\n    }\\n\\n    /**\\n     * @notice Sets the expiration timestamp for a specified mode. This expiration only signifies the mode can no longer be entered, but does not force exit exisitng subaccounts from the mode.\\n     * This function allows for updating the expiration timestamp of a specific mode, given its mode ID.\\n     * It reverts if the provided expiration timestamp is in the past or if the mode ID is invalid.\\n     * Only an account with the MARKET_CONFIGURATOR_ROLE can call this function.\\n     * @param _modeId The ID of the mode whose expiration timestamp is to be updated.\\n     * @param _expirationTimestamp The new expiration timestamp for the mode.\\n     */\\n    function setModeExpiration(uint256 _modeId, uint32 _expirationTimestamp)\\n        external\\n        onlyRole(MARKET_CONFIGURATOR_ROLE)\\n    {\\n        require(_expirationTimestamp > block.timestamp, \\\"OmniPool::setModeExpiration: Bad expiration timestamp.\\\");\\n        require(_modeId != 0 && _modeId <= modeCount, \\\"OmniPool::setModeExpiration: Bad mode ID.\\\");\\n        modeConfigurations[_modeId].expirationTimestamp = _expirationTimestamp;\\n    }\\n\\n    /**\\n     * @notice Sets a specific soft liquidation threshold for an account. This function can only be called by an account with the SOFT_LIQUIDATION_ROLE.\\n     * The soft liquidation threshold determines the health factor below which an account is considered for soft liquidation.\\n     * @dev The soft liquidation role should only be assigned to the admin or a smart contract that implements a strategy for why a user should receive a special soft liquidation.\\n     * @param _accountId The unique identifier of the account for which to set the soft liquidation threshold.\\n     * @param _softThreshold The soft liquidation threshold to set for the account.\\n     */\\n    function setAccountSoftLiquidation(bytes32 _accountId, uint32 _softThreshold)\\n        external\\n        onlyRole(SOFT_LIQUIDATION_ROLE)\\n    {\\n        if (_softThreshold > MAX_BASE_SOFT_LIQUIDATION || _softThreshold < HEALTH_FACTOR_SCALE) {\\n            revert(\\n                \\\"OmniPool::setSoftLiquidation: Soft liquidation health factor threshold cannot be greater than the standard max and must be greater than 1.\\\"\\n            );\\n        }\\n        accountInfos[_accountId].softThreshold = _softThreshold;\\n    }\\n\\n    /**\\n     * @notice Sets the configuration for liquidation bonuses for a specific market. This function can only be called by an account with the MARKET_CONFIGURATOR_ROLE.\\n     * The configuration includes parameters that affect the calculation of liquidation bonuses during the liquidation process.\\n     * @param _market The address of the market for which to set the liquidation bonus configuration.\\n     * @param _config The LiquidationBonusConfiguration struct containing the configuration for liquidation bonuses.\\n     */\\n    function setLiquidationBonusConfiguration(address _market, LiquidationBonusConfiguration calldata _config)\\n        external\\n        onlyRole(MARKET_CONFIGURATOR_ROLE)\\n    {\\n        require(\\n            _config.kink <= MAX_LIQ_KINK,\\n            \\\"OmniPool::setLiquidationBonusConfiguration: Bad kink for maximum liquidation.\\\"\\n        );\\n        require(\\n            _config.start <= _config.end && _config.end <= LIQ_BONUS_PRECISION_SCALE,\\n            \\\"OmniPool::setLiquidationBonusConfiguration: Bad start and end bonus values.\\\"\\n        );\\n        if (_config.expiredBonus > LIQ_BONUS_PRECISION_SCALE) {\\n            revert(\\\"OmniPool::setLiquidationBonusConfiguration: Bad expired bonus value.\\\");\\n        }\\n        if (_config.softThreshold > MAX_BASE_SOFT_LIQUIDATION || _config.softThreshold < HEALTH_FACTOR_SCALE) {\\n            revert(\\n                \\\"OmniPool::setSoftLiquidation: Soft liquidation health factor threshold cannot be greater than the standard max and must be greater than 1.\\\"\\n            );\\n        }\\n        liquidationBonusConfigurations[_market] = _config;\\n    }\\n\\n    /**\\n     * @notice Sets the tranche count for a specific market.\\n     * @dev This function allows to set the number of tranches for a given market.\\n     * It's an external function that can only be called by an account with the `MARKET_CONFIGURATOR_ROLE`.\\n     * @param _market The address of the market contract.\\n     * @param _trancheCount The number of tranches to be set for the market.\\n     */\\n    function setTrancheCount(address _market, uint8 _trancheCount) external onlyRole(MARKET_CONFIGURATOR_ROLE) {\\n        IOmniToken(_market).setTrancheCount(_trancheCount);\\n    }\\n\\n    /**\\n     * @notice Sets the borrow cap for each tranche of a specific market.\\n     * @dev This function can only be called by an account with the MARKET_CONFIGURATOR_ROLE.\\n     * It invokes the setTrancheBorrowCaps function of the IOmniToken contract associated with the specified market.\\n     * @param _market The address of the market for which to set the borrow caps.\\n     * @param _borrowCaps An array of borrow cap values, one for each tranche of the market.\\n     */\\n    function setBorrowCap(address _market, uint256[] calldata _borrowCaps)\\n        external\\n        onlyRole(MARKET_CONFIGURATOR_ROLE)\\n    {\\n        for (uint256 i = 0; i < _borrowCaps.length - 1; ++i) {\\n            require(_borrowCaps[i] >= _borrowCaps[i + 1], \\\"OmniPool::setBorrowCap: Invalid borrow cap.\\\");\\n        }\\n        IOmniToken(_market).setTrancheBorrowCaps(_borrowCaps);\\n    }\\n\\n    /**\\n     * @notice Sets the supply cap for a market that doesn't allow borrowing.\\n     * @dev This function can only be called by an account with the MARKET_CONFIGURATOR_ROLE.\\n     * It invokes the setSupplyCap function of the IOmniTokenNoBorrow contract associated with the specified market.\\n     * @param _market The address of the market for which to set the no-borrow supply cap.\\n     * @param _noBorrowSupplyCap The value of the no-borrow supply cap to set.\\n     */\\n    function setNoBorrowSupplyCap(address _market, uint256 _noBorrowSupplyCap)\\n        external\\n        onlyRole(MARKET_CONFIGURATOR_ROLE)\\n    {\\n        IOmniTokenNoBorrow(_market).setSupplyCap(_noBorrowSupplyCap);\\n    }\\n\\n    /**\\n     * @notice Sets the reserve receiver's address. This function can only be called by an account with the DEFAULT_ADMIN_ROLE.\\n     * @dev The reserve receiver's address is converted to a bytes32 account identifier using the toAccount function with a subId of 0.\\n     * @param _reserveReceiver The address of the reserve receiver to be set.\\n     */\\n    function setReserveReceiver(address _reserveReceiver) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        reserveReceiver = _reserveReceiver.toAccount(0);\\n    }\\n\\n    /**\\n     * @notice Pauses the protocol, halting certain functionalities, i.e. withdraw, borrow, repay, liquidate.\\n     * @dev This function triggers the `_pause()` internal function and sets `pauseTranche` to 0.\\n     * It's an external function that can only be called by an account with the `DEFAULT_ADMIN_ROLE`.\\n     * The function can only be executed when the contract is not already paused,\\n     * which is checked by the `whenNotPaused` modifier.\\n     */\\n    function pause() external whenNotPaused onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _pause();\\n        pauseTranche = 0;\\n        emit PausedTranche(0);\\n    }\\n\\n    /**\\n     * @notice Unpauses the protocol, re-enabling certain functionalities, i.e. withdraw, borrow, repay, liquidate.\\n     * @dev This function triggers the `_unpause()` internal function and calls `resetPauseTranche()` to reset tranche pause state.\\n     * It's an external function that can only be called by an account with the `DEFAULT_ADMIN_ROLE`.\\n     * The function can only be executed when the contract is paused,\\n     * which is checked by the `whenPaused` modifier.\\n     */\\n    function unpause() external whenPaused onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n        resetPauseTranche();\\n    }\\n\\n    /**\\n     * @dev Internal utility function to check if a specific value exists within an array of addresses.\\n     * @param _arr The array of addresses to search.\\n     * @param _value The address value to look for within the array.\\n     * @return A boolean indicating whether the value exists within the array.\\n     */\\n    function _contains(address[] memory _arr, address _value) internal pure returns (bool) {\\n        for (uint256 i = 0; i < _arr.length; ++i) {\\n            if (_arr[i] == _value) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOmniOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * @title IOmniOracle Interface\\n * @notice Interface for the OmniOracle contract.\\n */\\ninterface IOmniOracle {\\n    /// Events\\n    event SetOracle(\\n        address indexed underlying,\\n        address indexed oracle,\\n        Provider provider,\\n        uint32 delay,\\n        uint32 delayQuote,\\n        uint8 underlyingDecimals\\n    );\\n    event RemoveOracle(address indexed underlying);\\n\\n    /// Structs\\n    enum Provider {\\n        Invalid,\\n        Band,\\n        Chainlink,\\n        Other // Must implement the ICustomOmniOracle interface, use very carefully should return 1 full unit price multiplied by 1e18\\n    }\\n\\n    struct OracleConfig {\\n        // One storage slot\\n        address oracleAddress; // 160 bits\\n        Provider provider; // 8 bits\\n        uint32 delay; // 32 bits, because this is time-based in unix\\n        uint32 delayQuote; // 32 bits, for Band quote delay\\n        uint8 underlyingDecimals; // 8 bits, decimals of underlying token\\n    }\\n\\n    /**\\n     * @notice Fetches the price of the specified asset.\\n     * @param _underlying The address of the asset.\\n     * @return The price of the asset, normalized to 1e18.\\n     */\\n    function getPrice(address _underlying) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOmniPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\n/**\\n * @title IOmniPool Interface\\n * @dev This interface outlines the functions available in the OmniPool contract.\\n */\\ninterface IOmniPool {\\n    /// Events\\n    event ClearedMarkets(bytes32 indexed account);\\n    event EnteredIsolatedMarket(bytes32 indexed account, address market);\\n    event EnteredMarkets(bytes32 indexed account, address[] markets);\\n    event EnteredMode(bytes32 indexed account, uint256 modeId);\\n    event ExitedMarket(bytes32 indexed account, address market);\\n    event ExitedMode(bytes32 indexed account);\\n    event Liquidated(\\n        address indexed liquidator,\\n        bytes32 indexed targetAccount,\\n        bytes32 liquidatorAccount,\\n        address liquidateMarket,\\n        address collateralMarket,\\n        uint256 amount\\n    );\\n    event PausedTranche(uint8 trancheId);\\n    event UnpausedTranche();\\n    event SetMarketConfiguration(address indexed market, MarketConfiguration marketConfig);\\n    event RemovedMarketConfiguration(address indexed market);\\n    event SetModeConfiguration(uint256 indexed modeId, ModeConfiguration modeConfig);\\n    event SocializedLoss(address indexed market, uint8 trancheId, bytes32 account);\\n\\n    // Structs\\n    /**\\n     * @dev Structure to hold market configuration data.\\n     */\\n    struct MarketConfiguration {\\n        uint32 collateralFactor;\\n        uint32 borrowFactor; // Set to 0 if not borrowable.\\n        uint32 expirationTimestamp;\\n        uint8 riskTranche;\\n        bool isIsolatedCollateral; // If this is false, riskTranche must be 0\\n    }\\n\\n    /**\\n     * @dev Structure to hold mode configuration data.\\n     */\\n    struct ModeConfiguration {\\n        uint32 collateralFactor;\\n        uint32 borrowFactor;\\n        uint8 modeTranche;\\n        uint32 expirationTimestamp; // Only prevents people from entering a mode, does not affect users already in existing mode\\n        address[] markets;\\n    }\\n\\n    /**\\n     * @dev Structure to hold account specific data.\\n     */\\n    struct AccountInfo {\\n        uint8 modeId;\\n        address isolatedCollateralMarket;\\n        uint32 softThreshold;\\n    }\\n\\n    /**\\n     * @dev Structure to hold evaluation data for an account.\\n     */\\n    struct Evaluation {\\n        uint256 depositTrueValue;\\n        uint256 borrowTrueValue;\\n        uint256 depositAdjValue;\\n        uint256 borrowAdjValue;\\n        uint64 numDeposit; // To combine into 1 storage slot\\n        uint64 numBorrow;\\n        bool isExpired;\\n    }\\n\\n    /**\\n     * @dev Structure to hold liquidation bonus configuration data.\\n     */\\n    struct LiquidationBonusConfiguration {\\n        uint64 start; // 1e9 precision\\n        uint64 end; // 1e9 precision\\n        uint64 kink; // 1e9 precision\\n        uint32 expiredBonus; // 1e9 precision\\n        uint32 softThreshold; // 1e9 precision\\n    }\\n\\n    /**\\n     * @dev Structure to hold liquidation arguments.\\n     */\\n    struct LiquidationParams {\\n        bytes32 targetAccountId; // The unique identifier of the target account to be liquidated.\\n        bytes32 liquidatorAccountId; // The unique identifier of the account initiating the liquidation.\\n        address liquidateMarket; // The address of the market from which to repay the borrow.\\n        address collateralMarket; // The address of the market from which to seize collateral.\\n        uint256 amount; // The amount of the target account's borrow balance to repay. If _amount is 0, liquidator will repay the entire borrow balance, and will error if the repayment is too large.\\n    }\\n\\n    // Function Signatures\\n    /**\\n     * @dev Returns the address of the oracle contract.\\n     * @return The address of the oracle.\\n     */\\n    function oracle() external view returns (address);\\n\\n    /**\\n     * @dev Returns the pause tranche value.\\n     * @return The pause tranche value.\\n     */\\n    function pauseTranche() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the reserve receiver.\\n     * @return The reserve receiver identifier.\\n     */\\n    function reserveReceiver() external view returns (bytes32);\\n\\n    /**\\n     * @dev Allows a user to enter an isolated market, the market configuration must be for isolated collateral.\\n     * @param _subId The identifier of the sub-account.\\n     * @param _isolatedMarket The address of the isolated market to enter.\\n     */\\n    function enterIsolatedMarket(uint96 _subId, address _isolatedMarket) external;\\n\\n    /**\\n     * @dev Allows a user to enter multiple unique markets, none of them are isolated collateral markets.\\n     * @param _subId The identifier of the sub-account.\\n     * @param _markets The addresses of the markets to enter.\\n     */\\n    function enterMarkets(uint96 _subId, address[] calldata _markets) external;\\n\\n    /**\\n     * @dev Allows a user to exit a single market including their isolated market. There must be no borrows active on the subaccount to exit a market.\\n     * @param _subId The identifier of the sub-account.\\n     * @param _market The addresses of the markets to exit.\\n     */\\n    function exitMarket(uint96 _subId, address _market) external;\\n\\n    /**\\n     * @dev Clears all markets for a user. The subaccount must have no active borrows to clear markets.\\n     * @param _subId The identifier of the sub-account.\\n     */\\n    function clearMarkets(uint96 _subId) external;\\n\\n    /**\\n     * @dev Sets a mode for a sub-account.\\n     * @param _subId The identifier of the sub-account.\\n     * @param _modeId The identifier of the mode to enter.\\n     */\\n    function enterMode(uint96 _subId, uint8 _modeId) external;\\n\\n    /**\\n     * @dev Exits the mode currently set for a sub-account.\\n     * @param _subId The identifier of the sub-account.\\n     */\\n    function exitMode(uint96 _subId) external;\\n\\n    /**\\n     * @dev Evaluates an account's financial metrics.\\n     * @param _accountId The identifier of the account.\\n     * @return eval A struct containing the evaluated metrics of the account.\\n     */\\n    function evaluateAccount(bytes32 _accountId) external returns (Evaluation memory eval);\\n\\n    /**\\n     * @dev Allows a sub-account to borrow assets from a specified market.\\n     * @param _subId The identifier of the sub-account.\\n     * @param _market The address of the market to borrow from.\\n     * @param _amount The amount of assets to borrow.\\n     */\\n    function borrow(uint96 _subId, address _market, uint256 _amount) external;\\n\\n    /**\\n     * @dev Allows a sub-account to repay borrowed assets to a specified market.\\n     * @param _subId The identifier of the sub-account.\\n     * @param _market The address of the market to repay to.\\n     * @param _amount The amount of assets to repay.\\n     */\\n    function repay(uint96 _subId, address _market, uint256 _amount) external;\\n\\n    /**\\n     * @dev Initiates a liquidation process to recover assets from an under-collateralized account.\\n     * @param _params The liquidation parameters.\\n     * @return seizedShares The amount of shares seized from the liquidated account.\\n     */\\n    function liquidate(\\n        LiquidationParams calldata _params\\n    ) external returns (uint256[] memory seizedShares);\\n\\n    /**\\n     * @dev Distributes loss incurred in a market to a specified tranche of accounts.\\n     * @param _market The address of the market where the loss occurred.\\n     * @param _account The account identifier to record the loss.\\n     */\\n    function socializeLoss(address _market, bytes32 _account) external;\\n\\n    /**\\n     * @dev Retrieves the borrow tier of an account.\\n     * @param _account The account info struct containing the account's details.\\n     * @return The borrowing tier of the account.\\n     */\\n    function getAccountBorrowTier(AccountInfo memory _account) external view returns (uint8);\\n\\n    /**\\n     * @dev Retrieves the market addresses associated with an account.\\n     * @param _accountId The identifier of the account.\\n     * @param _account The account info struct containing the account's details.\\n     * @return A list of market addresses associated with the account.\\n     */\\n    function getAccountPoolMarkets(bytes32 _accountId, AccountInfo memory _account)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /**\\n     * @dev Retrieves the liquidation bonus and soft threshold values for a market.\\n     * @param _depositAdjValue The adjusted value of deposits in the market.\\n     * @param _borrowAdjValue The adjusted value of borrows in the market.\\n     * @param _collateralMarket The address of the collateral market.\\n     * @return bonus The liquidation bonus value.\\n     * @return softThreshold The soft liquidation threshold value.\\n     */\\n    function getLiquidationBonusAndThreshold(\\n        uint256 _depositAdjValue,\\n        uint256 _borrowAdjValue,\\n        address _collateralMarket\\n    ) external view returns (uint256 bonus, uint256 softThreshold);\\n\\n    /**\\n     * @dev Checks if an account is healthy based on its financial metrics.\\n     * @param _accountId The identifier of the account.\\n     * @return A boolean indicating whether the account is healthy.\\n     */\\n    function isAccountHealthy(bytes32 _accountId) external returns (bool);\\n\\n    /**\\n     * @dev Resets the pause tranche to its initial state.\\n     */\\n    function resetPauseTranche() external;\\n\\n    /**\\n     * @dev Updates the market configuration.\\n     * @param _market The address of the market.\\n     * @param _marketConfig The market configuration data.\\n     */\\n    function setMarketConfiguration(address _market, MarketConfiguration calldata _marketConfig) external;\\n\\n    /**\\n     * @dev Updates mode configurations one at a time.\\n     * @param _modeConfiguration An single mode configuration.\\n     */\\n    function setModeConfiguration(ModeConfiguration calldata _modeConfiguration) external;\\n\\n    /**\\n     * @dev Updates the soft liquidation threshold for an account.\\n     * @param _accountId The account identifier.\\n     * @param _softThreshold The soft liquidation threshold value.\\n     */\\n    function setAccountSoftLiquidation(bytes32 _accountId, uint32 _softThreshold) external;\\n\\n    /**\\n     * @dev Updates the liquidation bonus configuration for a market.\\n     * @param _market The address of the market.\\n     * @param _config The liquidation bonus configuration data.\\n     */\\n    function setLiquidationBonusConfiguration(address _market, LiquidationBonusConfiguration calldata _config) external;\\n\\n    /**\\n     * @notice Sets the tranche count for a specific market.\\n     * @dev This function allows to set the number of tranches for a given market.\\n     * It's an external function that can only be called by an account with the `MARKET_CONFIGURATOR_ROLE`.\\n     * @param _market The address of the market contract.\\n     * @param _trancheCount The number of tranches to be set for the market.\\n     */\\n    function setTrancheCount(address _market, uint8 _trancheCount) external;\\n\\n    /**\\n     * @dev This function can only be called by an account with the MARKET_CONFIGURATOR_ROLE.\\n     * It invokes the setTrancheBorrowCaps function of the IOmniToken contract associated with the specified market.\\n     * @param _market The address of the market for which to set the borrow caps.\\n     * @param _borrowCaps An array of borrow cap values, one for each tranche of the market.\\n     */\\n    function setBorrowCap(address _market, uint256[] calldata _borrowCaps) external;\\n\\n    /**\\n     * @dev This function can only be called by an account with the MARKET_CONFIGURATOR_ROLE.\\n     * It invokes the setSupplyCap function of the IOmniTokenNoBorrow contract associated with the specified market.\\n     * @param _market The address of the market for which to set the no-borrow supply cap.\\n     * @param _noBorrowSupplyCap The value of the no-borrow supply cap to set.\\n     */\\n    function setNoBorrowSupplyCap(address _market, uint256 _noBorrowSupplyCap) external;\\n\\n    /**\\n     * @notice Sets the reserve receiver's address. This function can only be called by an account with the DEFAULT_ADMIN_ROLE.\\n     * @dev The reserve receiver's address is converted to a bytes32 account identifier using the toAccount function with a subId of 0.\\n     * @param _reserveReceiver The address of the reserve receiver to be set.\\n     */\\n    function setReserveReceiver(address _reserveReceiver) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOmniToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IOmniTokenBase.sol\\\";\\n\\n/**\\n * @title IOmniToken\\n * @notice Interface for the OmniToken contract which manages deposits, withdrawals, borrowings, and repayments within the Omni protocol.\\n */\\ninterface IOmniToken is IOmniTokenBase {\\n    /// Events\\n    event Accrue();\\n    event Deposit(bytes32 indexed account, uint8 indexed trancheId, uint256 amount, uint256 share);\\n    event Withdraw(bytes32 indexed account, uint8 indexed trancheId, uint256 amount, uint256 share);\\n    event Borrow(bytes32 indexed account, uint8 indexed trancheId, uint256 amount, uint256 share);\\n    event Repay(bytes32 indexed account, address indexed payer, uint8 indexed trancheId, uint256 amount, uint256 share);\\n    event Seize(bytes32 indexed account, bytes32 indexed to, uint256 amount, uint256[] seizedShares);\\n    event SetTrancheCount(uint8 trancheCount);\\n    event SetTrancheBorrowCaps(uint256[] borrowCaps);\\n    event SocializedLoss(bytes32 indexed account, uint8 indexed trancheId, uint256 amount, uint256 share);\\n    event Transfer(bytes32 indexed from, bytes32 indexed to, uint8 indexed trancheId, uint256 share);\\n\\n    /**\\n     * @notice Gets the address of the OmniPool contract.\\n     * @return The address of the OmniPool contract.\\n     */\\n    function omniPool() external view returns (address);\\n\\n    /**\\n     * @notice Gets the address of the Interest Rate Model (IRM) contract.\\n     * @return The address of the IRM contract.\\n     */\\n    function irm() external view returns (address);\\n\\n    /**\\n     * @notice Gets the last accrual time.\\n     * @return The timestamp of the last accrual time.\\n     */\\n    function lastAccrualTime() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the count of tranches.\\n     * @return The total number of tranches.\\n     */\\n    function trancheCount() external view returns (uint8);\\n\\n    /**\\n     * @notice Gets the reserve receiver.\\n     * @return The bytes32 identifier of the reserve receiver.\\n     */\\n    function reserveReceiver() external view returns (bytes32);\\n\\n    /**\\n     * @notice Gets the borrow cap for a specific tranche.\\n     * @param _trancheId The ID of the tranche for which to retrieve the borrow cap.\\n     * @return The borrow cap for the specified tranche.\\n     */\\n    function getBorrowCap(uint8 _trancheId) external view returns (uint256);\\n\\n    /**\\n     * @notice Accrues interest for all tranches, calculates and distributes the interest among the depositors and updates tranche balances.\\n     * The function also handles reserve payments. This method needs to be called before any deposit, withdrawal, borrow, or repayment actions to update the state of the contract.\\n     * @dev Interest is paid out proportionately to more risky tranche deposits per tranche\\n     */\\n    function accrue() external;\\n\\n    /**\\n     * @notice Deposits a specified amount into a specified tranche.\\n     * @param _subId Sub-account identifier for the depositor.\\n     * @param _trancheId Identifier of the tranche to deposit into.\\n     * @param _amount Amount to deposit.\\n     * @return share Amount of deposit shares received in exchange for the deposit.\\n     */\\n    function deposit(uint96 _subId, uint8 _trancheId, uint256 _amount) external returns (uint256 share);\\n\\n    /**\\n     * @notice Withdraws funds from a specified tranche.\\n     * @param _subId The ID of the sub-account.\\n     * @param _trancheId The ID of the tranche.\\n     * @param _share The share of the user in the tranche.\\n     * @return amount The amount of funds withdrawn.\\n     */\\n    function withdraw(uint96 _subId, uint8 _trancheId, uint256 _share) external returns (uint256 amount);\\n\\n    /**\\n     * @notice Borrows funds from a specified tranche.\\n     * @param _account The account of the user.\\n     * @param _trancheId The ID of the tranche.\\n     * @param _amount The amount to borrow.\\n     * @return share The share of the borrowed amount in the tranche.\\n     */\\n    function borrow(bytes32 _account, uint8 _trancheId, uint256 _amount) external returns (uint256 share);\\n\\n    /**\\n     * @notice Repays borrowed funds.\\n     * @param _account The account of the user.\\n     * @param _payer The account that will pay the borrowed amount.\\n     * @param _trancheId The ID of the tranche.\\n     * @param _amount The amount to repay.\\n     * @return amount The amount of the repaid amount in the tranche.\\n     */\\n    function repay(bytes32 _account, address _payer, uint8 _trancheId, uint256 _amount)\\n        external\\n        returns (uint256 amount);\\n\\n    /**\\n     * @notice Transfers specified shares from one account to another within a specified tranche.\\n     * @param _subId The subscription ID related to the sender's account.\\n     * @param _to The account identifier to which shares are being transferred.\\n     * @param _trancheId The identifier of the tranche where the transfer is occurring.\\n     * @param _shares The amount of shares to transfer.\\n     * @return A boolean value indicating whether the transfer was successful.\\n     */\\n    function transfer(uint96 _subId, bytes32 _to, uint8 _trancheId, uint256 _shares) external returns (bool);\\n\\n    /**\\n     * @notice Distributes the bad debt loss in a tranche among all tranche members. This function should only be called by the OmniPool.\\n     * @param _account The account that incurred a loss.\\n     * @param _trancheId The ID of the tranche.\\n     */\\n    function socializeLoss(bytes32 _account, uint8 _trancheId) external;\\n\\n    /**\\n     * @notice Computes the borrowing amount of a specific account in the underlying asset for a given borrow tier.\\n     * @dev The division is ceiling division.\\n     * @param _account The account identifier for which the borrowing amount is to be computed.\\n     * @param _borrowTier The borrow tier identifier from which the borrowing amount is to be computed.\\n     * @return The borrowing amount of the account in the underlying asset for the given borrow tier.\\n     */\\n    function getAccountBorrowInUnderlying(bytes32 _account, uint8 _borrowTier) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the deposit and borrow shares for a specific account in a specific tranche.\\n     * @param _account The account identifier.\\n     * @param _trancheId The tranche identifier.\\n     * @return depositShare The deposit share.\\n     * @return borrowShare The borrow share.\\n     */\\n    function getAccountSharesByTranche(bytes32 _account, uint8 _trancheId)\\n        external\\n        view\\n        returns (uint256 depositShare, uint256 borrowShare);\\n\\n    /**\\n     * @notice Sets the borrow caps for each tranche.\\n     * @param _borrowCaps An array of borrow caps in the underlying's decimals.\\n     */\\n    function setTrancheBorrowCaps(uint256[] calldata _borrowCaps) external;\\n\\n    /**\\n     * @notice Sets the number of tranches.\\n     * @param _trancheCount The new tranche count.\\n     */\\n    function setTrancheCount(uint8 _trancheCount) external;\\n\\n    /**\\n     * @notice Fetches and updates the reserve receiver from the OmniPool contract.\\n     */\\n    function fetchReserveReceiver() external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOmniTokenNoBorrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IOmniTokenBase.sol\\\";\\n\\n/**\\n * @title IOmniTokenNoBorrow\\n * @notice Interface for the OmniTokenNoBorrow contract which provides deposit and withdrawal features, without borrowing features.\\n */\\ninterface IOmniTokenNoBorrow is IOmniTokenBase {\\n    /// Events\\n    event Deposit(bytes32 indexed account, uint256 amount);\\n    event Withdraw(bytes32 indexed account, uint256 amount);\\n    event Seize(bytes32 indexed account, bytes32 indexed to, uint256 amount, uint256[] seizeShares);\\n    event SetSupplyCap(uint256 supplyCap);\\n    event Transfer(bytes32 indexed from, bytes32 indexed to, uint256 amount);\\n    \\n    /**\\n     * @notice Deposits a specified amount to the account.\\n     * @param _subId The sub-account identifier.\\n     * @param _amount The amount to deposit.\\n     * @return amount The actual amount deposited.\\n     */\\n    function deposit(uint96 _subId, uint256 _amount) external returns (uint256 amount);\\n\\n    /**\\n     * @notice Withdraws a specified amount from the account.\\n     * @param _subId The sub-account identifier.\\n     * @param _amount The amount to withdraw.\\n     * @return amount The actual amount withdrawn.\\n     */\\n    function withdraw(uint96 _subId, uint256 _amount) external returns (uint256 amount);\\n\\n    /**\\n     * @notice Transfers a specified amount of tokens from the sender's account to another account.\\n     * @param _subId The subscription ID associated with the sender's account.\\n     * @param _to The account identifier to which the tokens are being transferred.\\n     * @param _amount The amount of tokens to transfer.\\n     * @return A boolean value indicating whether the transfer was successful.\\n     */\\n    function transfer(uint96 _subId, bytes32 _to, uint256 _amount) external returns (bool);\\n\\n    /**\\n     * @notice Sets a new supply cap for the contract.\\n     * @param _supplyCap The new supply cap amount.\\n     */\\n    function setSupplyCap(uint256 _supplyCap) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWithUnderlying.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title IWithUnderlying\\n * @notice Interface for the WithUnderlying contract to handle the inflow and outflow of ERC20 tokens.\\n */\\ninterface IWithUnderlying {\\n    /**\\n     * @notice Gets the address of the underlying ERC20 token.\\n     * @return The address of the underlying ERC20 token.\\n     */\\n    function underlying() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/SubAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\n/**\\n * @title SubAccount\\n * @notice This library provides utility functions to handle sub-accounts using bytes32 types, where id is most significant bytes.\\n */\\nlibrary SubAccount {\\n    /**\\n     * @notice Combines an address and a sub-account identifier into a bytes32 account representation.\\n     * @param _sender The address component.\\n     * @param _subId The sub-account identifier component.\\n     * @return A bytes32 representation of the account.\\n     */\\n    function toAccount(address _sender, uint96 _subId) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_sender)) | (uint256(_subId) << 160));\\n    }\\n\\n    /**\\n     * @notice Extracts the address component from a bytes32 account representation.\\n     * @param _account The bytes32 representation of the account.\\n     * @return The address component.\\n     */\\n    function toAddress(bytes32 _account) internal pure returns (address) {\\n        return address(uint160(uint256(_account)));\\n    }\\n\\n    /**\\n     * @notice Extracts the sub-account identifier component from a bytes32 account representation.\\n     * @param _account The bytes32 representation of the account.\\n     * @return The sub-account identifier component.\\n     */\\n    function toSubId(bytes32 _account) internal pure returns (uint96) {\\n        return uint96(uint256(_account) >> 160);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOmniTokenBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\n/**\\n * @title IOmniTokenBase\\n * @notice Base interface shared by the IOmniToken and IOmniTokenNoBorrow interfaces.\\n */\\ninterface IOmniTokenBase {\\n    /**\\n     * @notice Retrieves the total deposit amount for a specific account.\\n     * @param _account The account identifier.\\n     * @return The total deposit amount.\\n     */\\n    function getAccountDepositInUnderlying(bytes32 _account) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the total deposited amount for a specific owner across sub-accounts. This funciton is for wallets and Etherscan to pick up balances.\\n     * @param _owner The address of the owner.\\n     * @return The total deposited amount.\\n     */\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /**\\n     * @notice Seizes funds from a user's account in the event of a liquidation. This is a priveleged function only callable by the OmniPool and must be implemented carefully.\\n     * @param _account The account from which funds will be seized.\\n     * @param _to The account to which seized funds will be sent.\\n     * @param _amount The amount of funds to seize.\\n     * @return The shares seized from each tranche.\\n     */\\n    function seize(bytes32 _account, bytes32 _to, uint256 _amount) external returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"}],\"name\":\"ClearedMarkets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"EnteredIsolatedMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"markets\",\"type\":\"address[]\"}],\"name\":\"EnteredMarkets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"modeId\",\"type\":\"uint256\"}],\"name\":\"EnteredMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"ExitedMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"}],\"name\":\"ExitedMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"targetAccount\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"liquidatorAccount\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidateMarket\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralMarket\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"trancheId\",\"type\":\"uint8\"}],\"name\":\"PausedTranche\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"RemovedMarketConfiguration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"collateralFactor\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"borrowFactor\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expirationTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"riskTranche\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isIsolatedCollateral\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IOmniPool.MarketConfiguration\",\"name\":\"marketConfig\",\"type\":\"tuple\"}],\"name\":\"SetMarketConfiguration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"modeId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"collateralFactor\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"borrowFactor\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"modeTranche\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"expirationTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"markets\",\"type\":\"address[]\"}],\"indexed\":false,\"internalType\":\"struct IOmniPool.ModeConfiguration\",\"name\":\"modeConfig\",\"type\":\"tuple\"}],\"name\":\"SetModeConfiguration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"trancheId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"}],\"name\":\"SocializedLoss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UnpausedTranche\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTOR_PRECISION_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HEALTH_FACTOR_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQ_BONUS_PRECISION_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_CONFIGURATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BASE_SOFT_LIQUIDATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LIQ_KINK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MARKETS_PER_ACCOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SELF_COLLATERALIZATION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOFT_LIQUIDATION_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"accountInfos\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"modeId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"isolatedCollateralMarket\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"softThreshold\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountMarkets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_subId\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositAdjValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowAdjValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_softThreshold\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"modeId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"isolatedCollateralMarket\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"softThreshold\",\"type\":\"uint32\"}],\"internalType\":\"struct IOmniPool.AccountInfo\",\"name\":\"_account\",\"type\":\"tuple\"}],\"name\":\"checkSoftLiquidation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_subId\",\"type\":\"uint96\"}],\"name\":\"clearMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_subId\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_isolatedMarket\",\"type\":\"address\"}],\"name\":\"enterIsolatedMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_subId\",\"type\":\"uint96\"},{\"internalType\":\"address[]\",\"name\":\"_markets\",\"type\":\"address[]\"}],\"name\":\"enterMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_subId\",\"type\":\"uint96\"},{\"internalType\":\"uint8\",\"name\":\"_modeId\",\"type\":\"uint8\"}],\"name\":\"enterMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_accountId\",\"type\":\"bytes32\"}],\"name\":\"evaluateAccount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositTrueValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowTrueValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAdjValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAdjValue\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"numDeposit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"numBorrow\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isExpired\",\"type\":\"bool\"}],\"internalType\":\"struct IOmniPool.Evaluation\",\"name\":\"eval\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_subId\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"}],\"name\":\"exitMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_subId\",\"type\":\"uint96\"}],\"name\":\"exitMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"modeId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"isolatedCollateralMarket\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"softThreshold\",\"type\":\"uint32\"}],\"internalType\":\"struct IOmniPool.AccountInfo\",\"name\":\"_account\",\"type\":\"tuple\"}],\"name\":\"getAccountBorrowTier\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_accountId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"modeId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"isolatedCollateralMarket\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"softThreshold\",\"type\":\"uint32\"}],\"internalType\":\"struct IOmniPool.AccountInfo\",\"name\":\"_account\",\"type\":\"tuple\"}],\"name\":\"getAccountPoolMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositAdjValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowAdjValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collateralMarket\",\"type\":\"address\"}],\"name\":\"getLiquidationBonusAndThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softThreshold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserveReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_accountId\",\"type\":\"bytes32\"}],\"name\":\"isAccountHealthy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"targetAccountId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"liquidatorAccountId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"liquidateMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralMarket\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IOmniPool.LiquidationParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"seizedShares\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationBonusConfigurations\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"end\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"kink\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"expiredBonus\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"softThreshold\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketConfigurations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"collateralFactor\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"borrowFactor\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expirationTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"riskTranche\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isIsolatedCollateral\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"modeConfigurations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"collateralFactor\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"borrowFactor\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"modeTranche\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"expirationTimestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseTranche\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"}],\"name\":\"removeMarketConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_subId\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveReceiver\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetPauseTranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_accountId\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_softThreshold\",\"type\":\"uint32\"}],\"name\":\"setAccountSoftLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_borrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"setBorrowCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"end\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"kink\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"expiredBonus\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"softThreshold\",\"type\":\"uint32\"}],\"internalType\":\"struct IOmniPool.LiquidationBonusConfiguration\",\"name\":\"_config\",\"type\":\"tuple\"}],\"name\":\"setLiquidationBonusConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"collateralFactor\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"borrowFactor\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expirationTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"riskTranche\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isIsolatedCollateral\",\"type\":\"bool\"}],\"internalType\":\"struct IOmniPool.MarketConfiguration\",\"name\":\"_marketConfig\",\"type\":\"tuple\"}],\"name\":\"setMarketConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"collateralFactor\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"borrowFactor\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"modeTranche\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"expirationTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"markets\",\"type\":\"address[]\"}],\"internalType\":\"struct IOmniPool.ModeConfiguration\",\"name\":\"_modeConfiguration\",\"type\":\"tuple\"}],\"name\":\"setModeConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_modeId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_expirationTimestamp\",\"type\":\"uint32\"}],\"name\":\"setModeExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_noBorrowSupplyCap\",\"type\":\"uint256\"}],\"name\":\"setNoBorrowSupplyCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserveReceiver\",\"type\":\"address\"}],\"name\":\"setReserveReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_trancheCount\",\"type\":\"uint8\"}],\"name\":\"setTrancheCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_account\",\"type\":\"bytes32\"}],\"name\":\"socializeLoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OmniPool", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}