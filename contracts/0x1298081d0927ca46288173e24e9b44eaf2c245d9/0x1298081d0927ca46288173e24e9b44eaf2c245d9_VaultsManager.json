{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PartnerVaultsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\ninterface IVault {\\n    function start(uint256 tokenId) external payable;\\n\\n    function distributeRewards(address account, uint256 balance, uint256 totalSupply) external;\\n}\\n\\ninterface INft {\\n    function mint(address sender, uint256 tokenId, uint256 tokens) external;\\n\\n    function burn(address sender, uint256 tokenId, uint256 tokens) external;\\n\\n    function totalSupply(uint256 tokenId) view external returns (uint256);\\n\\n    function balanceOf(address account, uint256 tokenId) view external returns (uint256);\\n}\\n\\ninterface IDistributor {\\n    function snapshot() external returns (uint256);\\n\\n    function receiveFee(uint256 snapshotId) external payable;\\n}\\n\\ncontract VaultsManager is Ownable {\\n\\n    enum Status{Pending, Open, Locked, Closed, Exited}\\n    struct VaultData {\\n        Status status;\\n        uint256 price;\\n        uint256 maxSupply;\\n        address vaultContract;\\n        address partnerContract;\\n        bool publicSale;\\n        uint256 snapshotId;\\n        uint256 finalBalance;\\n    }\\n\\n    mapping(uint256 => mapping(address => uint256)) public whitelist;\\n\\n    mapping(uint256 => VaultData) public vaults;\\n    address public managementContract;\\n    INft immutable public nft;\\n    IDistributor immutable public distributor;\\n\\n    constructor(address nft_, address distributor_) {\\n        nft = INft(nft_);\\n        distributor = IDistributor(distributor_);\\n    }\\n\\n    function setManagementContract(address managementContract_) external onlyOwner {\\n        managementContract = managementContract_;\\n    }\\n\\n    function totalSupply(uint256 tokenId) view public returns (uint256) {\\n        return nft.totalSupply(tokenId);\\n    }\\n\\n    function balanceOf(address account, uint256 tokenId) view public returns (uint256){\\n        return nft.balanceOf(account, tokenId);\\n    }\\n\\n    function setWhiteList(uint256 tokenId, address[] memory accounts, uint256[] memory whitelistCounts) external onlyOwner {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            whitelist[tokenId][accounts[i]] = whitelistCounts[i];\\n        }\\n    }\\n\\n    function openPublic(uint256 tokenId) external onlyOwner {\\n        require(vaults[tokenId].status == Status.Open, \\\"Manager: not enabled\\\");\\n        vaults[tokenId].publicSale = true;\\n    }\\n\\n    function open(uint256 tokenId, uint256 price, uint256 maxSupply, bool publicSale) external onlyOwner {\\n        require(tokenId > 0, \\\"Manager: tokenId is 0\\\");\\n        VaultData memory vault = vaults[tokenId];\\n        require(vault.status == Status.Pending, \\\"Manager: not pending\\\");\\n        uint256 snapshotId = distributor.snapshot();\\n        vaults[tokenId] = VaultData({\\n            status: Status.Open,\\n            price: price,\\n            maxSupply: maxSupply,\\n            vaultContract: address(0),\\n            partnerContract: address(0),\\n            publicSale: publicSale,\\n            snapshotId: snapshotId,\\n            finalBalance: 0\\n        });\\n    }\\n\\n    function mint(uint256 tokenId, uint256 tokens) external payable {\\n        VaultData memory vault = vaults[tokenId];\\n        require(vault.status == Status.Open, \\\"Manager: not enabled\\\");\\n        require(totalSupply(tokenId) + tokens <= vault.maxSupply, \\\"Manager: exceeds max\\\");\\n        require(msg.value == vault.price * tokens, \\\"Manager: wrong amount\\\");\\n        if (!vault.publicSale) {\\n            uint256 whitelistCount = whitelist[tokenId][msg.sender];\\n            require(tokens <= whitelistCount, \\\"Manager: exceeds max\\\");\\n            whitelist[tokenId][msg.sender] = whitelistCount - tokens;\\n        }\\n        nft.mint(msg.sender, tokenId, tokens);\\n    }\\n\\n    function lock(uint256 tokenId, address vaultContract, address partnerContract) external onlyOwner {\\n        VaultData storage vault = vaults[tokenId];\\n        uint256 totalSupply_ = totalSupply(tokenId);\\n        require(totalSupply_ > 0, \\\"Manager: no tokens\\\");\\n        require(managementContract != address(0), \\\"Manager: management contract null\\\");\\n        require(partnerContract != address(0), \\\"Manager: partner contract null\\\");\\n        require(vault.status == Status.Open, \\\"Manager: contract not open\\\");\\n        uint256 balance = vault.price * totalSupply_;\\n        uint256 managementFee = (balance * 15) / 1000;\\n        uint256 distributableFee = (balance * 10) / 1000;\\n        uint256 partnerFee = (balance * 25) / 1000;\\n        uint256 operationAmount = balance - (managementFee + distributableFee + partnerFee);\\n        vault.status = Status.Locked;\\n        vault.vaultContract = vaultContract;\\n        vault.partnerContract = partnerContract;\\n\\n        distributor.receiveFee{value : distributableFee}(vault.snapshotId);\\n\\n        IVault(vaultContract).start{value : operationAmount}(tokenId);\\n\\n        (bool managementPaymentSuccess,) = payable(managementContract).call{value : managementFee}(\\\"\\\");\\n        require(managementPaymentSuccess, \\\"Manager: unsuccessful payment\\\");\\n\\n        (bool partnerPaymentSuccess,) = payable(partnerContract).call{value : partnerFee}(\\\"\\\");\\n        require(partnerPaymentSuccess, \\\"Manager: unsuccessful payment\\\");\\n    }\\n\\n    function allowExit(uint256 tokenId) external onlyOwner {\\n        VaultData storage vault = vaults[tokenId];\\n        require(vault.status == Status.Open, \\\"Manager: bad status\\\");\\n        vault.status = Status.Exited;\\n    }\\n\\n    function exit(uint256 tokenId) external {\\n        VaultData memory vault = vaults[tokenId];\\n        require(vault.status == Status.Exited, \\\"Manager: exit not possible\\\");\\n        uint256 balance = balanceOf(msg.sender, tokenId);\\n        require(balance > 0, \\\"Manager: not a holder\\\");\\n        nft.burn(msg.sender, tokenId, balance);\\n        (bool success,) = payable(msg.sender).call{value : balance * vault.price}(\\\"\\\");\\n        require(success, \\\"Manager: unsuccessful payment\\\");\\n    }\\n\\n    function close(uint256 tokenId) external payable {\\n        VaultData storage vault = vaults[tokenId];\\n        require(vault.status == Status.Locked, \\\"Manager: not locked\\\");\\n        require(msg.sender == vault.vaultContract, \\\"Manager: only vault\\\");\\n        uint256 collected = totalSupply(tokenId) * vault.price;\\n        uint256 fee;\\n        uint256 partnerFee;\\n        if (msg.value > collected) {\\n            uint256 profit = msg.value - collected;\\n            fee = (profit * 5) / 100;\\n            partnerFee = (profit * 15) / 100;\\n            distributor.receiveFee{value : fee}(vault.snapshotId);\\n        }\\n        vault.finalBalance = msg.value - (fee * 2 + partnerFee);\\n        vault.status = Status.Closed;\\n        if (fee > 0) {\\n            (bool managementPaymentSuccess,) = payable(managementContract).call{value : fee}(\\\"\\\");\\n            require(managementPaymentSuccess, \\\"Manager: unsuccessful payment\\\");\\n        }\\n        if (partnerFee > 0) {\\n            (bool partnerPaymentSuccess,) = payable(vault.partnerContract).call{value : partnerFee}(\\\"\\\");\\n            require(partnerPaymentSuccess, \\\"Manager: unsuccessful payment\\\");\\n        }\\n    }\\n\\n    function claimable(address account, uint256 tokenId) public view returns (uint256) {\\n        uint256 balance = balanceOf(account, tokenId);\\n        uint256 finalBalance = vaults[tokenId].finalBalance;\\n        uint256 totalSupply_ = totalSupply(tokenId);\\n        return (finalBalance * balance) / totalSupply_;\\n    }\\n\\n    function claim(uint256 tokenId) external {\\n        VaultData storage vault = vaults[tokenId];\\n        require(vault.status == Status.Closed, \\\"Manager: claim not available\\\");\\n        uint256 balance = balanceOf(msg.sender, tokenId);\\n        require(balance > 0, \\\"Manager: nothing to claim\\\");\\n        uint256 totalSupply_ = totalSupply(tokenId);\\n        uint256 finalBalance = vault.finalBalance;\\n        uint256 amount = (finalBalance * balance) / totalSupply_;\\n\\n        IVault(vault.vaultContract).distributeRewards(msg.sender, balance, totalSupply_);\\n\\n        vault.finalBalance = finalBalance - amount;\\n        nft.burn(msg.sender, tokenId, balance);\\n\\n        (bool success,) = payable(msg.sender).call{value : amount}(\\\"\\\");\\n        require(success, \\\"Manager: unsuccessful payment\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"distributor_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"allowExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract IDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vaultContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partnerContract\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract INft\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"publicSale\",\"type\":\"bool\"}],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"openPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"managementContract_\",\"type\":\"address\"}],\"name\":\"setManagementContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"whitelistCounts\",\"type\":\"uint256[]\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"enum VaultsManager.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vaultContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partnerContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"publicSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VaultsManager", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e8bbd0479468b0025e00269516c62119f533971f000000000000000000000000b0af8ff1089042cadfd0246ecc074a05053438ff", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}