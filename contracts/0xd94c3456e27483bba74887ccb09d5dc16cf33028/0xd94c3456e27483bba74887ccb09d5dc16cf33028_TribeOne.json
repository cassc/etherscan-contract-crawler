{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n  /**\\n   * @dev Implementation of the {IERC721Receiver} interface.\\n   *\\n   * Accepts all token transfers.\\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n   */\\ncontract ERC721Holder is IERC721Receiver {\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TribeOne.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"./interfaces/ITribeOne.sol\\\";\\r\\nimport \\\"./interfaces/IAssetManager.sol\\\";\\r\\nimport \\\"./rentAdapters/interfaces/IBaseRentAdapter.sol\\\";\\r\\nimport \\\"./libraries/Ownable.sol\\\";\\r\\nimport \\\"./libraries/TribeOneHelper.sol\\\";\\r\\nimport {DataTypes} from \\\"./libraries/DataTypes.sol\\\";\\r\\n\\r\\ncontract TribeOne is ERC721Holder, ERC1155Holder, ITribeOne, Ownable, ReentrancyGuard {\\r\\n    using Counters for Counters.Counter;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    mapping(uint256 => DataTypes.Loan) private _loans; // loanId => Loan\\r\\n    Counters.Counter public loanIds; // loanId is from No.1\\r\\n    // uint public loanLength;\\r\\n    uint256 public constant MAX_SLIPPAGE = 500; // 5%\\r\\n    uint256 public constant TENOR_UNIT = 4 weeks; // installment should be pay at least in every 4 weeks\\r\\n    uint256 public constant GRACE_PERIOD = 14 days; // 2 weeks\\r\\n\\r\\n    mapping(uint256 => address) private _loanRents; // loanId => rentAdapter\\r\\n    EnumerableSet.AddressSet rentAdaptersSet;\\r\\n\\r\\n    /**\\r\\n     * @dev It's for only testnet\\r\\n     */\\r\\n    // uint256 public TENOR_UNIT = 7 minutes;\\r\\n    // uint256 public GRACE_PERIOD = 3 minutes;\\r\\n\\r\\n    address public salesManager;\\r\\n    address public assetManager;\\r\\n    address public feeTo;\\r\\n    address public immutable feeCurrency; // stable coin such as USDC, late fee $5\\r\\n    uint256 public lateFee; // we will set it 5 USD for each tenor late\\r\\n    uint256 public penaltyFee; // we will set it 5% in the future - 1000 = 100%\\r\\n\\r\\n    constructor(\\r\\n        address _salesManager,\\r\\n        address _feeTo,\\r\\n        address _feeCurrency,\\r\\n        address _multiSigWallet,\\r\\n        address _assetManager\\r\\n    ) {\\r\\n        require(\\r\\n            _salesManager != address(0) &&\\r\\n                _feeTo != address(0) &&\\r\\n                _feeCurrency != address(0) &&\\r\\n                _multiSigWallet != address(0) &&\\r\\n                _assetManager != address(0),\\r\\n            \\\"T1: ZERO address\\\"\\r\\n        );\\r\\n        salesManager = _salesManager;\\r\\n        assetManager = _assetManager;\\r\\n        feeTo = _feeTo;\\r\\n        feeCurrency = _feeCurrency;\\r\\n\\r\\n        transferOwnership(_multiSigWallet);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function getLoans(uint256 _loanId) external view override returns (DataTypes.Loan memory) {\\r\\n        return _loans[_loanId];\\r\\n    }\\r\\n\\r\\n    function getLoanNFTItem(uint256 _loanId) external view override returns (DataTypes.NFTItem memory) {\\r\\n        return _loans[_loanId].nftItem;\\r\\n    }\\r\\n\\r\\n    function getLoanAsset(uint256 _loanId) external view override returns (uint256, address) {\\r\\n        return (_loans[_loanId].loanAsset.amount, _loans[_loanId].loanAsset.currency);\\r\\n    }\\r\\n\\r\\n    function getCollateralAsset(uint256 _loanId) external view override returns (uint256, address) {\\r\\n        return (_loans[_loanId].collateralAsset.amount, _loans[_loanId].collateralAsset.currency);\\r\\n    }\\r\\n\\r\\n    function getLoanRent(uint256 _loanId) external view override returns (address) {\\r\\n        return _loanRents[_loanId];\\r\\n    }\\r\\n\\r\\n    function addRentAdapter(address _adapter) external onlySuperOwner {\\r\\n        require(_adapter != address(0) && !rentAdaptersSet.contains(_adapter), \\\"ZERO ADDRESS or already in adapter list\\\");\\r\\n        rentAdaptersSet.add(_adapter);\\r\\n    }\\r\\n\\r\\n    function removeRentAdapter(address _adapter) external onlySuperOwner {\\r\\n        require(rentAdaptersSet.contains(_adapter), \\\"Not avaialbe adapter\\\");\\r\\n        rentAdaptersSet.remove(_adapter);\\r\\n    }\\r\\n\\r\\n    function setSettings(\\r\\n        address _feeTo,\\r\\n        uint256 _lateFee,\\r\\n        uint256 _penaltyFee,\\r\\n        address _salesManager,\\r\\n        address _assetManager\\r\\n    ) external onlySuperOwner {\\r\\n        require(_feeTo != address(0) && _salesManager != address(0) && _assetManager != address(0), \\\"TribeOne: ZERO address\\\");\\r\\n        require(_lateFee <= 5 && penaltyFee <= 50, \\\"T1: Exceeded fee limit\\\");\\r\\n        feeTo = _feeTo;\\r\\n        lateFee = _lateFee;\\r\\n        penaltyFee = _penaltyFee;\\r\\n        salesManager = _salesManager;\\r\\n        assetManager = _assetManager;\\r\\n        emit SettingsUpdate(_feeTo, _lateFee, _penaltyFee, _salesManager, assetManager);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev _fundAmount shoud be amount in loan currency, and _collateralAmount should be in collateral currency\\r\\n     */\\r\\n    function createLoan(\\r\\n        uint16[] calldata _loanRules, // tenor, LTV, interest, 10000 - 100% to use array - avoid stack too deep\\r\\n        address[] calldata _currencies, // _loanCurrency, _collateralCurrency, address(0) is native coin\\r\\n        address nftAddress,\\r\\n        bool isERC721,\\r\\n        uint256[] calldata _amounts, // _fundAmount, _collateralAmount _fundAmount is the amount of _collateral in _loanAsset such as ETH\\r\\n        uint256 nftTokenId\\r\\n    ) external payable {\\r\\n        require(_loanRules.length == 3 && _amounts.length == 2 && _currencies.length == 2, \\\"T1: Invalid parameter\\\");\\r\\n        require(_loanRules[1] > 0 && _loanRules[1] < 10000, \\\"T1: LTV should be greater than ZERO and less than 10000\\\");\\r\\n        require(_loanRules[0] > 0, \\\"T1: Loan must have at least 1 installment\\\");\\r\\n        address _collateralCurrency = _currencies[1];\\r\\n        address _loanCurrency = _currencies[0];\\r\\n        require(IAssetManager(assetManager).isAvailableLoanAsset(_loanCurrency), \\\"T1: Loan asset is not available\\\");\\r\\n        require(\\r\\n            IAssetManager(assetManager).isAvailableCollateralAsset(_collateralCurrency),\\r\\n            \\\"T1: Collateral asset is not available\\\"\\r\\n        );\\r\\n\\r\\n        loanIds.increment();\\r\\n        uint256 loanID = loanIds.current();\\r\\n\\r\\n        // Transfer Collateral from sender to contract\\r\\n        // uint256 _fundAmount = _amounts[0];\\r\\n        uint256 _collateralAmount = _amounts[1];\\r\\n\\r\\n        // Transfer collateral to TribeOne\\r\\n        if (_collateralCurrency == address(0)) {\\r\\n            require(msg.value >= _collateralAmount, \\\"T1: Insufficient collateral amount\\\");\\r\\n            if (msg.value > _collateralAmount) {\\r\\n                TribeOneHelper.safeTransferETH(msg.sender, msg.value - _collateralAmount);\\r\\n            }\\r\\n        } else {\\r\\n            require(msg.value == 0, \\\"T1: ERC20 collateral\\\");\\r\\n            TribeOneHelper.safeTransferFrom(_collateralCurrency, _msgSender(), address(this), _collateralAmount);\\r\\n        }\\r\\n\\r\\n        _loans[loanID].borrower = _msgSender();\\r\\n        _loans[loanID].loanAsset = DataTypes.Asset({currency: _loanCurrency, amount: 0});\\r\\n        // _loans[loanID].loanAsset.currency = _loanCurrency;\\r\\n        _loans[loanID].collateralAsset = DataTypes.Asset({currency: _collateralCurrency, amount: _collateralAmount});\\r\\n        _loans[loanID].loanRules = DataTypes.LoanRules({tenor: _loanRules[0], LTV: _loanRules[1], interest: _loanRules[2]});\\r\\n        _loans[loanID].fundAmount = _amounts[0];\\r\\n\\r\\n        _loans[loanID].status = DataTypes.Status.LISTED;\\r\\n        _loans[loanID].nftItem = DataTypes.NFTItem({nftAddress: nftAddress, isERC721: isERC721, nftId: nftTokenId});\\r\\n\\r\\n        emit LoanCreated(loanID, msg.sender, nftAddress, nftTokenId, isERC721);\\r\\n    }\\r\\n\\r\\n    function approveLoan(\\r\\n        uint256 _loanId,\\r\\n        uint256 _amount,\\r\\n        address _agent\\r\\n    ) external override onlyOwner nonReentrant {\\r\\n        DataTypes.Loan storage _loan = _loans[_loanId];\\r\\n        require(_loan.status == DataTypes.Status.LISTED, \\\"T1: Invalid request\\\");\\r\\n        require(_agent != address(0), \\\"T1: ZERO address\\\");\\r\\n\\r\\n        uint256 _fundAmount = _loan.fundAmount;\\r\\n        uint256 _LTV = _loan.loanRules.LTV;\\r\\n\\r\\n        uint256 expectedPrice = TribeOneHelper.getExpectedPrice(_fundAmount, 10000 - _LTV, MAX_SLIPPAGE);\\r\\n        require(_amount <= expectedPrice, \\\"T1: Invalid amount\\\");\\r\\n        // Loan should be rejected when requested loan amount is less than fund amount because of some issues such as big fluctuation in marketplace\\r\\n        if (_amount <= _fundAmount) {\\r\\n            _loan.status = DataTypes.Status.REJECTED;\\r\\n            returnColleteral(_loanId);\\r\\n            emit LoanRejected(_loanId, _agent);\\r\\n        } else {\\r\\n            if (!isAdmin(msg.sender)) {\\r\\n                require(\\r\\n                    IAssetManager(assetManager).isValidAutomaticLoan(_loan.loanAsset.currency, _amount),\\r\\n                    \\\"T1: Exceeded loan limit\\\"\\r\\n                );\\r\\n            }\\r\\n\\r\\n            _loan.status = DataTypes.Status.APPROVED;\\r\\n            address _token = _loan.loanAsset.currency;\\r\\n\\r\\n            _loan.loanAsset.amount = _amount - _loan.fundAmount;\\r\\n\\r\\n            if (_token == address(0)) {\\r\\n                IAssetManager(assetManager).requestETH(_agent, _amount);\\r\\n            } else {\\r\\n                IAssetManager(assetManager).requestToken(_agent, _token, _amount);\\r\\n            }\\r\\n\\r\\n            emit LoanApproved(_loanId, _agent, _token, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev _loanId: loanId, _accepted: order to Partner is succeeded or not\\r\\n     * loan will be back to TribeOne if accepted is false\\r\\n     */\\r\\n    function relayNFT(\\r\\n        uint256 _loanId,\\r\\n        address _agent,\\r\\n        bool _accepted\\r\\n    ) external payable override onlyOwner nonReentrant {\\r\\n        DataTypes.Loan storage _loan = _loans[_loanId];\\r\\n        require(_loan.status == DataTypes.Status.APPROVED, \\\"T1: Not approved loan\\\");\\r\\n        require(_agent != address(0), \\\"T1: ZERO address\\\");\\r\\n        if (_accepted) {\\r\\n            TribeOneHelper.safeTransferNFT(\\r\\n                _loan.nftItem.nftAddress,\\r\\n                _agent,\\r\\n                address(this),\\r\\n                _loan.nftItem.isERC721,\\r\\n                _loan.nftItem.nftId\\r\\n            );\\r\\n\\r\\n            _loan.status = DataTypes.Status.LOANACTIVED;\\r\\n            _loan.loanStart = block.timestamp;\\r\\n            // user can not get back collateral in this case, we transfer collateral to AssetManager\\r\\n            address _currency = _loan.collateralAsset.currency;\\r\\n            uint256 _amount = _loan.collateralAsset.amount;\\r\\n            if (_currency == address(0)) {\\r\\n                IAssetManager(assetManager).collectInstallment{value: _amount}(\\r\\n                    _currency,\\r\\n                    _amount,\\r\\n                    _loan.loanRules.interest,\\r\\n                    true\\r\\n                );\\r\\n            } else {\\r\\n                IAssetManager(assetManager).collectInstallment(_currency, _amount, _loan.loanRules.interest, true);\\r\\n            }\\r\\n        } else {\\r\\n            _loan.status = DataTypes.Status.FAILED;\\r\\n            // refund loan\\r\\n            // in the case when loan currency is ETH, loan amount should be fund back from agent to TribeOne AssetNanager\\r\\n            address _token = _loan.loanAsset.currency;\\r\\n            uint256 _amount = _loan.loanAsset.amount + _loan.fundAmount;\\r\\n            if (_token == address(0)) {\\r\\n                require(msg.value >= _amount, \\\"T1: Less than loan amount\\\");\\r\\n                if (msg.value > _amount) {\\r\\n                    TribeOneHelper.safeTransferETH(_agent, msg.value - _amount);\\r\\n                }\\r\\n                IAssetManager(assetManager).collectInstallment{value: _amount}(_token, _amount, _loan.loanRules.interest, true);\\r\\n            } else {\\r\\n                TribeOneHelper.safeTransferFrom(_token, _agent, address(this), _amount);\\r\\n                IAssetManager(assetManager).collectInstallment(_token, _amount, _loan.loanRules.interest, true);\\r\\n            }\\r\\n\\r\\n            returnColleteral(_loanId);\\r\\n        }\\r\\n\\r\\n        emit NFTRelayed(_loanId, _agent, _accepted);\\r\\n    }\\r\\n\\r\\n    function payInstallment(uint256 _loanId, uint256 _amount) external payable override nonReentrant {\\r\\n        DataTypes.Loan storage _loan = _loans[_loanId];\\r\\n        require(_loan.status == DataTypes.Status.LOANACTIVED || _loan.status == DataTypes.Status.DEFAULTED, \\\"T1: Invalid status\\\");\\r\\n        uint256 expectedNr = expectedNrOfPayments(_loanId);\\r\\n\\r\\n        address _loanCurrency = _loan.loanAsset.currency;\\r\\n        if (_loanCurrency == address(0)) {\\r\\n            _amount = msg.value;\\r\\n        }\\r\\n\\r\\n        uint256 paidAmount = _loan.paidAmount;\\r\\n        uint256 __totalDebt = _totalDebt(_loanId); // loan + interest\\r\\n        {\\r\\n            uint256 expectedAmount = (__totalDebt * expectedNr) / _loan.loanRules.tenor;\\r\\n            // require(paidAmount + _amount >= expectedAmount, \\\"T1: Insufficient Amount\\\");\\r\\n            // // out of rule, penalty\\r\\n            if (paidAmount + _amount >= expectedAmount) {\\r\\n                _updatePenalty(_loanId);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Transfer asset from msg.sender to AssetManager contract\\r\\n        uint256 dust;\\r\\n        if (paidAmount + _amount > __totalDebt) {\\r\\n            dust = paidAmount + _amount - __totalDebt;\\r\\n        }\\r\\n        _amount -= dust;\\r\\n        // NOTE - don't merge two conditions\\r\\n        // All user payments will go to AssetManager contract\\r\\n        if (_loanCurrency == address(0)) {\\r\\n            if (dust > 0) {\\r\\n                TribeOneHelper.safeTransferETH(_msgSender(), dust);\\r\\n            }\\r\\n            IAssetManager(assetManager).collectInstallment{value: _amount}(\\r\\n                _loanCurrency,\\r\\n                _amount,\\r\\n                _loan.loanRules.interest,\\r\\n                false\\r\\n            );\\r\\n        } else {\\r\\n            TribeOneHelper.safeTransferFrom(_loanCurrency, _msgSender(), address(this), _amount);\\r\\n            IAssetManager(assetManager).collectInstallment(_loanCurrency, _amount, _loan.loanRules.interest, false);\\r\\n        }\\r\\n\\r\\n        paidAmount += _amount;\\r\\n        _loan.paidAmount = paidAmount;\\r\\n\\r\\n        {\\r\\n            uint256 passedTenors = (paidAmount * _loan.loanRules.tenor) / __totalDebt;\\r\\n            if (passedTenors > _loan.passedTenors) {\\r\\n                _loan.passedTenors = uint8(passedTenors);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (_loan.status == DataTypes.Status.DEFAULTED) {\\r\\n            _loan.status = DataTypes.Status.LOANACTIVED;\\r\\n        }\\r\\n\\r\\n        // If user is borrower and loan is paid whole amount and he has no lateFee, give back NFT here directly\\r\\n        // else borrower should call withdraw manually himself\\r\\n        // We should check conditions first to avoid transaction failed\\r\\n        if (paidAmount == __totalDebt) {\\r\\n            _loan.status = DataTypes.Status.LOANPAID;\\r\\n            if (_loan.borrower == _msgSender() && (_loan.nrOfPenalty == 0 || lateFee == 0)) {\\r\\n                _withdrawNFT(_loanId);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit InstallmentPaid(_loanId, msg.sender, _loanCurrency, _amount);\\r\\n    }\\r\\n\\r\\n    function withdrawNFT(uint256 _loanId) external nonReentrant {\\r\\n        _withdrawNFT(_loanId);\\r\\n    }\\r\\n\\r\\n    function _withdrawNFT(uint256 _loanId) private {\\r\\n        DataTypes.Loan storage _loan = _loans[_loanId];\\r\\n        require(_loan.status == DataTypes.Status.LOANPAID, \\\"T1: Invalid status - you have still debt to pay\\\");\\r\\n        address _sender = _msgSender();\\r\\n        require(_sender == _loan.borrower, \\\"T1: Forbidden\\\");\\r\\n        _loan.status = DataTypes.Status.WITHDRAWN;\\r\\n\\r\\n        if (_loan.nrOfPenalty > 0 && lateFee > 0) {\\r\\n            uint256 _totalLateFee = _loan.nrOfPenalty * lateFee * (10**IERC20Metadata(feeCurrency).decimals());\\r\\n            TribeOneHelper.safeTransferFrom(feeCurrency, _sender, address(feeTo), _totalLateFee);\\r\\n        }\\r\\n\\r\\n        TribeOneHelper.safeTransferNFT(\\r\\n            _loan.nftItem.nftAddress,\\r\\n            address(this),\\r\\n            _sender,\\r\\n            _loan.nftItem.isERC721,\\r\\n            _loan.nftItem.nftId\\r\\n        );\\r\\n\\r\\n        emit NFTWithdrew(_loanId, _sender);\\r\\n    }\\r\\n\\r\\n    function _updatePenalty(uint256 _loanId) private {\\r\\n        DataTypes.Loan storage _loan = _loans[_loanId];\\r\\n        uint256 expectedNr = expectedNrOfPayments(_loanId);\\r\\n        uint256 passedTenors = _loan.passedTenors;\\r\\n        if (expectedNr > passedTenors) {\\r\\n            _loan.nrOfPenalty += uint8(expectedNr - passedTenors);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev shows loan + interest\\r\\n     */\\r\\n    function totalDebt(uint256 _loanId) external view override returns (uint256) {\\r\\n        return _totalDebt(_loanId);\\r\\n    }\\r\\n\\r\\n    function _totalDebt(uint256 _loanId) private view returns (uint256) {\\r\\n        DataTypes.Loan storage _loan = _loans[_loanId];\\r\\n        return (_loan.loanAsset.amount * (10000 + _loan.loanRules.interest)) / 10000;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *@dev when user in Tenor 2 (from tenor 1 to tenor 2, we expect at least one time payment)\\r\\n     */\\r\\n    function expectedNrOfPayments(uint256 _loanId) private view returns (uint256) {\\r\\n        uint256 loanStart = _loans[_loanId].loanStart;\\r\\n        uint256 _expected = (block.timestamp - loanStart) / TENOR_UNIT;\\r\\n        uint256 _tenor = _loans[_loanId].loanRules.tenor;\\r\\n        return _expected > _tenor ? _tenor : _expected;\\r\\n    }\\r\\n\\r\\n    function expectedLastPaymentTime(uint256 _loanId) public view returns (uint256) {\\r\\n        DataTypes.Loan storage _loan = _loans[_loanId];\\r\\n        return\\r\\n            _loan.passedTenors >= _loan.loanRules.tenor\\r\\n                ? _loan.loanStart + TENOR_UNIT * (_loan.loanRules.tenor)\\r\\n                : _loan.loanStart + TENOR_UNIT * (_loan.passedTenors + 1);\\r\\n    }\\r\\n\\r\\n    function setLoanDefaulted(uint256 _loanId) external nonReentrant {\\r\\n        DataTypes.Loan storage _loan = _loans[_loanId];\\r\\n        require(_loan.status == DataTypes.Status.LOANACTIVED, \\\"T1: Invalid status\\\");\\r\\n        require(expectedLastPaymentTime(_loanId) < block.timestamp, \\\"T1: Not overdued date yet\\\");\\r\\n\\r\\n        _loan.status = DataTypes.Status.DEFAULTED;\\r\\n\\r\\n        emit LoanDefaulted(_loanId);\\r\\n    }\\r\\n\\r\\n    function setLoanLiquidation(uint256 _loanId) external nonReentrant {\\r\\n        DataTypes.Loan storage _loan = _loans[_loanId];\\r\\n        require(_loan.status == DataTypes.Status.DEFAULTED, \\\"T1: Invalid status\\\");\\r\\n        require(expectedLastPaymentTime(_loanId) + GRACE_PERIOD < block.timestamp, \\\"T1: Not overdued date yet\\\");\\r\\n        _loan.status = DataTypes.Status.LIQUIDATION;\\r\\n\\r\\n        TribeOneHelper.safeTransferNFT(\\r\\n            _loan.nftItem.nftAddress,\\r\\n            address(this),\\r\\n            salesManager,\\r\\n            _loan.nftItem.isERC721,\\r\\n            _loan.nftItem.nftId\\r\\n        );\\r\\n\\r\\n        emit LoanLiquidation(_loanId, salesManager);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev after sold NFT set in market place, and give that fund back to TribeOne\\r\\n     * Only sales manager can do this\\r\\n     */\\r\\n    function postLiquidation(uint256 _loanId, uint256 _amount) external payable nonReentrant {\\r\\n        require(_msgSender() == salesManager, \\\"T1: Forbidden\\\");\\r\\n        DataTypes.Loan storage _loan = _loans[_loanId];\\r\\n        require(_loan.status == DataTypes.Status.LIQUIDATION, \\\"T1: invalid status\\\");\\r\\n\\r\\n        // We collect debts to our asset manager address\\r\\n        address _currency = _loan.loanAsset.currency;\\r\\n        _amount = _currency == address(0) ? msg.value : _amount;\\r\\n        uint256 _finalDebt = finalDebtAndPenalty(_loanId);\\r\\n        _finalDebt = _amount > _finalDebt ? _finalDebt : _amount;\\r\\n        if (_currency == address(0)) {\\r\\n            // TribeOneHelper.safeTransferETH(assetManager, _finalDebt);\\r\\n            IAssetManager(assetManager).collectInstallment{value: _finalDebt}(\\r\\n                _currency,\\r\\n                _finalDebt,\\r\\n                _loan.loanRules.interest,\\r\\n                false\\r\\n            );\\r\\n        } else {\\r\\n            TribeOneHelper.safeTransferFrom(_currency, _msgSender(), address(this), _amount);\\r\\n            IAssetManager(assetManager).collectInstallment(_currency, _finalDebt, _loan.loanRules.interest, false);\\r\\n        }\\r\\n\\r\\n        _loan.status = DataTypes.Status.POSTLIQUIDATION;\\r\\n        if (_amount > _finalDebt) {\\r\\n            _loan.restAmount = _amount - _finalDebt;\\r\\n        }\\r\\n        _loan.postTime = block.timestamp;\\r\\n        emit LoanPostLiquidation(_loanId, _amount, _finalDebt);\\r\\n    }\\r\\n\\r\\n    function _currentDebt(uint256 _loanId) private view returns (uint256) {\\r\\n        DataTypes.Loan storage _loan = _loans[_loanId];\\r\\n        uint256 paidAmount = _loan.paidAmount;\\r\\n        uint256 __totalDebt = _totalDebt(_loanId);\\r\\n        return __totalDebt - paidAmount;\\r\\n    }\\r\\n\\r\\n    function currentDebt(uint256 _loanId) external view override returns (uint256) {\\r\\n        return _currentDebt(_loanId);\\r\\n    }\\r\\n\\r\\n    function finalDebtAndPenalty(uint256 _loanId) public view returns (uint256) {\\r\\n        DataTypes.Loan storage _loan = _loans[_loanId];\\r\\n        uint256 paidAmount = _loan.paidAmount;\\r\\n        uint256 __totalDebt = _totalDebt(_loanId);\\r\\n        uint256 _penalty = ((__totalDebt - paidAmount) * penaltyFee) / 1000; // 5% penalty of loan amount\\r\\n        return __totalDebt + _penalty - paidAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev User can get back the rest money through this function, but he should pay late fee.\\r\\n     */\\r\\n    function getBackFund(uint256 _loanId) external {\\r\\n        DataTypes.Loan storage _loan = _loans[_loanId];\\r\\n        require(_msgSender() == _loan.borrower, \\\"T1: Forbidden\\\");\\r\\n        require(_loan.status == DataTypes.Status.POSTLIQUIDATION, \\\"T1: Invalid status\\\");\\r\\n        require(_loan.postTime + GRACE_PERIOD > block.timestamp, \\\"T1: Time over\\\");\\r\\n        uint256 _restAmount = _loan.restAmount;\\r\\n        require(_restAmount > 0, \\\"T1: No amount to give back\\\");\\r\\n\\r\\n        if (lateFee > 0) {\\r\\n            uint256 _amount = lateFee * (10**IERC20Metadata(feeCurrency).decimals()) * _loan.nrOfPenalty; // tenor late fee\\r\\n            TribeOneHelper.safeTransferFrom(feeCurrency, _msgSender(), address(feeTo), _amount);\\r\\n        }\\r\\n\\r\\n        _loan.status = DataTypes.Status.RESTWITHDRAWN;\\r\\n\\r\\n        address _currency = _loan.loanAsset.currency;\\r\\n\\r\\n        if (_currency == address(0)) {\\r\\n            TribeOneHelper.safeTransferETH(_msgSender(), _restAmount);\\r\\n        } else {\\r\\n            TribeOneHelper.safeTransfer(_currency, _msgSender(), _restAmount);\\r\\n        }\\r\\n\\r\\n        emit RestWithdrew(_loanId, _restAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev if user does not want to get back rest of money due to some reasons, such as gas fee...\\r\\n     * we will transfer rest money to our fee address (after 14 days notification).\\r\\n     * For saving gas fee, we will transfer once for the one kind of token.\\r\\n     */\\r\\n    function lockRestAmount(uint256[] calldata _loanIds, address _currency) external nonReentrant {\\r\\n        uint256 len = _loanIds.length;\\r\\n        uint256 _amount = 0;\\r\\n        for (uint256 ii = 0; ii < len; ii++) {\\r\\n            uint256 _loanId = _loanIds[ii];\\r\\n            DataTypes.Loan storage _loan = _loans[_loanId];\\r\\n            if (\\r\\n                _loan.loanAsset.currency == _currency &&\\r\\n                _loan.status == DataTypes.Status.POSTLIQUIDATION &&\\r\\n                _loan.postTime + GRACE_PERIOD <= block.timestamp\\r\\n            ) {\\r\\n                _amount += _loan.restAmount;\\r\\n                _loan.status = DataTypes.Status.RESTLOCKED;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        TribeOneHelper.safeTransferAsset(_currency, feeTo, _amount);\\r\\n    }\\r\\n\\r\\n    function cancelLoan(uint256 _loanId) external nonReentrant {\\r\\n        DataTypes.Loan storage _loan = _loans[_loanId];\\r\\n        require(_loan.borrower == _msgSender() && _loan.status == DataTypes.Status.LISTED, \\\"T1: Forbidden\\\");\\r\\n        _loan.status = DataTypes.Status.CANCELLED;\\r\\n        returnColleteral(_loanId);\\r\\n        emit LoanCanceled(_loanId, _msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev return back collateral to borrower due to some reasons\\r\\n     */\\r\\n    function returnColleteral(uint256 _loanId) private {\\r\\n        DataTypes.Loan storage _loan = _loans[_loanId];\\r\\n        address _currency = _loan.collateralAsset.currency;\\r\\n        uint256 _amount = _loan.collateralAsset.amount;\\r\\n        address _to = _loan.borrower;\\r\\n        TribeOneHelper.safeTransferAsset(_currency, _to, _amount);\\r\\n    }\\r\\n\\r\\n    function listNFTForRent(uint256 loanId, address borrower) external override {\\r\\n        require(rentAdaptersSet.contains(_msgSender()), \\\"T1: Invalid caller\\\");\\r\\n\\r\\n        DataTypes.Loan storage loan = _loans[loanId];\\r\\n        require(loan.borrower == borrower, \\\"T1: Only borrower can list NFT for loan\\\");\\r\\n        require(_loanRents[loanId] == address(0), \\\"T1: Already rented\\\");\\r\\n        require(loan.status == DataTypes.Status.LOANACTIVED, \\\"T1: Invalid loan status\\\");\\r\\n\\r\\n        _loanRents[loanId] = _msgSender();\\r\\n        TribeOneHelper.safeTransferNFT(\\r\\n            loan.nftItem.nftAddress,\\r\\n            address(this),\\r\\n            msg.sender,\\r\\n            loan.nftItem.isERC721,\\r\\n            loan.nftItem.nftId\\r\\n        );\\r\\n\\r\\n        emit LoanRented(loanId, msg.sender);\\r\\n    }\\r\\n\\r\\n    function withdrawNFTFromRent(uint256 loanId) external override {\\r\\n        require(_loanRents[loanId] == msg.sender, \\\"T1: Invalid caller\\\");\\r\\n\\r\\n        delete _loanRents[loanId];\\r\\n\\r\\n        TribeOneHelper.safeTransferNFT(\\r\\n            _loans[loanId].nftItem.nftAddress,\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _loans[loanId].nftItem.isERC721,\\r\\n            _loans[loanId].nftItem.nftId\\r\\n        );\\r\\n        emit LoanWithdrawFromRent(loanId, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev We will use this function to withdraw NFT when we should liquidate loaned NFT\\r\\n     */\\r\\n    function forceWithdrawCall(uint256 loanId, bytes memory withdrawCallData) external {\\r\\n        require(_loans[loanId].status == DataTypes.Status.DEFAULTED, \\\"T1: Invalid status\\\");\\r\\n        require(expectedLastPaymentTime(loanId) + GRACE_PERIOD < block.timestamp, \\\"T1: Not overdue yet\\\");\\r\\n\\r\\n        require(_loanRents[loanId] != address(0), \\\"T1: Not rented loan\\\");\\r\\n\\r\\n        (bool success, ) = address(_loanRents[loanId]).call(withdrawCallData);\\r\\n        require(success, \\\"T1: Force withdraw was failed\\\");\\r\\n    }\\r\\n\\r\\n    function isAvailableRentalAction(uint256 loanId, address user) external view override returns (bool) {\\r\\n        if (_loans[loanId].borrower != user) {\\r\\n            return false;\\r\\n        }\\r\\n        if (expectedLastPaymentTime(loanId) + GRACE_PERIOD < block.timestamp) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function grantAllowanceForAssetManager(address _token) external onlySuperOwner {\\r\\n        TribeOneHelper.safeApprove(_token, assetManager, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    function revokeAllowanceForAssetManager(address _token) external onlySuperOwner {\\r\\n        TribeOneHelper.safeApprove(_token, assetManager, 0);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IAssetManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\ninterface IAssetManager {\\r\\n    function isAvailableLoanAsset(address _asset) external returns (bool);\\r\\n\\r\\n    function isAvailableCollateralAsset(address _asset) external returns (bool);\\r\\n\\r\\n    function isValidAutomaticLoan(address _asset, uint256 _amountIn) external returns (bool);\\r\\n\\r\\n    function requestETH(address _to, uint256 _amount) external;\\r\\n\\r\\n    function requestToken(\\r\\n        address _to,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function collectInstallment(\\r\\n        address _currency,\\r\\n        uint256 _amount,\\r\\n        uint256 _interest,\\r\\n        bool _collateral\\r\\n    ) external payable;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ITribeOne.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport {DataTypes} from \\\"../libraries/DataTypes.sol\\\";\\r\\n\\r\\ninterface ITribeOne {\\r\\n    event LoanCreated(uint256 indexed loanId, address indexed owner, address nftAddress, uint256 nftTokenId, bool isERC721);\\r\\n    event LoanApproved(uint256 indexed _loanId, address indexed _to, address _fundCurreny, uint256 _fundAmount);\\r\\n    event LoanCanceled(uint256 indexed _loanId, address _sender);\\r\\n    event NFTRelayed(uint256 indexed _loanId, address indexed _sender, bool _accepted);\\r\\n    event InstallmentPaid(uint256 indexed _loanId, address _sender, address _currency, uint256 _amount);\\r\\n    event NFTWithdrew(uint256 indexed _loanId, address _to);\\r\\n    event LoanDefaulted(uint256 indexed _loandId);\\r\\n    event LoanLiquidation(uint256 indexed _loanId, address _salesManager);\\r\\n    event LoanPostLiquidation(uint256 indexed _loanId, uint256 _soldAmount, uint256 _finalDebt);\\r\\n    event RestWithdrew(uint256 indexed _loanId, uint256 _amount);\\r\\n    event SettingsUpdate(address _feeTo, uint256 _lateFee, uint256 _penaltyFee, address _salesManager, address _assetManager);\\r\\n    event LoanRejected(uint256 indexed _loanId, address _agent);\\r\\n    event LoanRented(uint256 indexed _loanId, address indexed _adapter);\\r\\n    event LoanWithdrawFromRent(uint256 indexed _loanId, address _adapter);\\r\\n\\r\\n    function approveLoan(\\r\\n        uint256 _loanId,\\r\\n        uint256 _amount,\\r\\n        address _agent\\r\\n    ) external;\\r\\n\\r\\n    function relayNFT(\\r\\n        uint256 _loanId,\\r\\n        address _agent,\\r\\n        bool _accepted\\r\\n    ) external payable;\\r\\n\\r\\n    function payInstallment(uint256 _loanId, uint256 _amount) external payable;\\r\\n\\r\\n    function getLoans(uint256 _loanId) external view returns (DataTypes.Loan memory);\\r\\n\\r\\n    function getLoanNFTItem(uint256 _loanId) external view returns (DataTypes.NFTItem memory);\\r\\n\\r\\n    function getLoanAsset(uint256 _loanId) external view returns (uint256, address);\\r\\n\\r\\n    function getCollateralAsset(uint256 _loanId) external view returns (uint256, address);\\r\\n\\r\\n    function getLoanRent(uint256 _loanId) external view returns (address);\\r\\n\\r\\n    function totalDebt(uint256 _loanId) external view returns (uint256);\\r\\n\\r\\n    function currentDebt(uint256 _loanId) external view returns (uint256);\\r\\n\\r\\n    function listNFTForRent(uint256 loanId, address borrower) external;\\r\\n\\r\\n    function withdrawNFTFromRent(uint256 loanId) external;\\r\\n\\r\\n    function isAvailableRentalAction(uint256 loanId, address user) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nlibrary DataTypes {\\r\\n    enum Status {\\r\\n        AVOID_ZERO, // just for avoid zero\\r\\n        LISTED, // after the loan has been created --> the next status will be APPROVED\\r\\n        APPROVED, // in this status the loan has a lender -- will be set after approveLoan(). loan fund => borrower\\r\\n        LOANACTIVED, // NFT was brought from opensea by agent and staked in TribeOne - relayNFT()\\r\\n        LOANPAID, // loan was paid fully but still in TribeOne\\r\\n        WITHDRAWN, // the final status, the collateral returned to the borrower or to the lender withdrawNFT()\\r\\n        FAILED, // NFT buying order was failed in partner's platform such as opensea...\\r\\n        CANCELLED, // only if loan is LISTED - cancelLoan()\\r\\n        DEFAULTED, // Grace period = 15 days were passed from the last payment schedule\\r\\n        LIQUIDATION, // NFT was put in marketplace\\r\\n        POSTLIQUIDATION, /// NFT was sold\\r\\n        RESTWITHDRAWN, // user get back the rest of money from the money which NFT set is sold in marketplace\\r\\n        RESTLOCKED, // Rest amount was forcely locked because he did not request to get back with in 2 weeks (GRACE PERIODS)\\r\\n        REJECTED // Loan should be rejected when requested loan amount is less than fund amount because of some issues such as big fluctuation in marketplace\\r\\n    }\\r\\n\\r\\n    struct Asset {\\r\\n        uint256 amount;\\r\\n        address currency; // address(0) is ETH native coin\\r\\n    }\\r\\n\\r\\n    struct LoanRules {\\r\\n        uint16 tenor;\\r\\n        uint16 LTV; // 10000 - 100%\\r\\n        uint16 interest; // 10000 - 100%\\r\\n    }\\r\\n\\r\\n    struct NFTItem {\\r\\n        address nftAddress;\\r\\n        bool isERC721;\\r\\n        uint256 nftId;\\r\\n    }\\r\\n\\r\\n    struct Loan {\\r\\n        uint256 fundAmount; // the amount which user put in TribeOne to buy NFT\\r\\n        uint256 paidAmount; // the amount that has been paid back to the lender to date\\r\\n        uint256 loanStart; // the point when the loan is approved\\r\\n        uint256 postTime; // the time when NFT set was sold in marketplace and that money was put in TribeOne\\r\\n        uint256 restAmount; // rest amount after sending loan debt(+interest) and 5% penalty\\r\\n        address borrower; // the address who receives the loan\\r\\n        uint8 nrOfPenalty;\\r\\n        uint8 passedTenors; // the number of tenors which we can consider user passed - paid tenor\\r\\n        Asset loanAsset;\\r\\n        Asset collateralAsset;\\r\\n        Status status; // the loan status\\r\\n        LoanRules loanRules;\\r\\n        NFTItem nftItem;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev this smart contract is copy of Openzeppelin Ownable.sol, but we introduced superOwner here\\n */\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n    address private _superOwner;\\n    mapping(address => bool) private admins; // These admins can approve loan manually\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event SuperOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event AddAdmin(address indexed _setter, address indexed _admin);\\n    event RemoveAdmin(address indexed _setter, address indexed _admin);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        _superOwner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    function superOwner() external view returns (address) {\\n        return _superOwner;\\n    }\\n\\n    function isAdmin(address _admin) public view returns (bool) {\\n        return admins[_admin];\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender() || admins[_msgSender()], \\\"Ownable: caller is neither the owner nor the admin\\\");\\n        _;\\n    }\\n\\n    modifier onlySuperOwner() {\\n        require(_superOwner == _msgSender(), \\\"Ownable: caller is not the super owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlySuperOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    function transferSuperOwnerShip(address newSuperOwner) public virtual onlySuperOwner {\\n        require(newSuperOwner != address(0), \\\"Ownable: new super owner is the zero address\\\");\\n        emit SuperOwnershipTransferred(_superOwner, newSuperOwner);\\n        _superOwner = newSuperOwner;\\n    }\\n\\n    function addAdmin(address _admin) external onlySuperOwner {\\n        require(!isAdmin(_admin), \\\"Already admin\\\");\\n        admins[_admin] = true;\\n        emit AddAdmin(msg.sender, _admin);\\n    }\\n\\n    function removeAdmin(address _admin) external onlySuperOwner {\\n        require(isAdmin(_admin), \\\"This address is not admin\\\");\\n        admins[_admin] = false;\\n        emit RemoveAdmin(msg.sender, _admin);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TribeOneHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\n\\r\\nlibrary TribeOneHelper {\\r\\n    function safeApprove(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransfer(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TribeOneHelper::safeTransfer: transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TribeOneHelper::transferFrom: transferFrom failed\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, \\\"TribeOneHelper::safeTransferETH: ETH transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferAsset(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        if (token == address(0)) {\\r\\n            safeTransferETH(to, value);\\r\\n        } else {\\r\\n            safeTransfer(token, to, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safeNFTApproveForAll(\\r\\n        address nft,\\r\\n        address operator,\\r\\n        bool approved\\r\\n    ) internal {\\r\\n        // bytes4(keccak256(bytes('setApprovalForAll(address,bool)')));\\r\\n        (bool success, ) = nft.call(abi.encodeWithSelector(0xa22cb465, operator, approved));\\r\\n        require(success, \\\"TribeOneHelper::safeNFTApproveForAll: Failed\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferNFT(\\r\\n        address _nft,\\r\\n        address _from,\\r\\n        address _to,\\r\\n        bool isERC721,\\r\\n        uint256 _tokenId\\r\\n    ) internal {\\r\\n        if (isERC721) {\\r\\n            IERC721(_nft).safeTransferFrom(_from, _to, _tokenId);\\r\\n        } else {\\r\\n            IERC1155(_nft).safeTransferFrom(_from, _to, _tokenId, 1, \\\"0x00\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev this function calculates expected price of NFT based on created LTV and fund amount,\\r\\n     * LTV: 10000 = 100%; _slippage: 10000 = 100%\\r\\n     */\\r\\n    function getExpectedPrice(\\r\\n        uint256 _fundAmount,\\r\\n        uint256 _percentage,\\r\\n        uint256 _slippage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(_percentage != 0, \\\"TribeOneHelper: percentage should not be 0\\\");\\r\\n        return (_fundAmount * (10000 + _slippage)) / _percentage;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/rentAdapters/interfaces/IBaseRentAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport {LibLandworks} from \\\"../libraries/LibLandworks.sol\\\";\\r\\n\\r\\ninterface IBaseRentAdapter {\\r\\n    function withdrawNFTFromRent(uint256 loanId) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/rentAdapters/libraries/LibLandworks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nlibrary LibLandworks {\\r\\n    enum AssetStatus {\\r\\n        Listed,\\r\\n        Delisted\\r\\n    }\\r\\n\\r\\n    struct Asset {\\r\\n        uint256 metaverseId;\\r\\n        address metaverseRegistry;\\r\\n        uint256 metaverseAssetId;\\r\\n        address paymentToken;\\r\\n        uint256 minPeriod;\\r\\n        uint256 maxPeriod;\\r\\n        uint256 maxFutureTime;\\r\\n        uint256 pricePerSecond;\\r\\n        uint256 totalRents;\\r\\n        AssetStatus status;\\r\\n    }\\r\\n\\r\\n    struct Rent {\\r\\n        address renter;\\r\\n        uint256 start;\\r\\n        uint256 end;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_salesManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multiSigWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_setter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"InstallmentPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_fundCurreny\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fundAmount\",\"type\":\"uint256\"}],\"name\":\"LoanApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"LoanCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"}],\"name\":\"LoanCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_loandId\",\"type\":\"uint256\"}],\"name\":\"LoanDefaulted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_salesManager\",\"type\":\"address\"}],\"name\":\"LoanLiquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_soldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_finalDebt\",\"type\":\"uint256\"}],\"name\":\"LoanPostLiquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"LoanRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"LoanRented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"LoanWithdrawFromRent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_accepted\",\"type\":\"bool\"}],\"name\":\"NFTRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"NFTWithdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_setter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"RemoveAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RestWithdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lateFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_penaltyFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_salesManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_assetManager\",\"type\":\"address\"}],\"name\":\"SettingsUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"SuperOwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GRACE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SLIPPAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TENOR_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"addRentAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"approveLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"cancelLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_loanRules\",\"type\":\"uint16[]\"},{\"internalType\":\"address[]\",\"name\":\"_currencies\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"name\":\"createLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"expectedLastPaymentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"finalDebtAndPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"withdrawCallData\",\"type\":\"bytes\"}],\"name\":\"forceWithdrawCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"getBackFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"getCollateralAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanNFTItem\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.NFTItem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanRent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"getLoans\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fundAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"restAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"nrOfPenalty\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"passedTenors\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct DataTypes.Asset\",\"name\":\"loanAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct DataTypes.Asset\",\"name\":\"collateralAsset\",\"type\":\"tuple\"},{\"internalType\":\"enum DataTypes.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"tenor\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"LTV\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"interest\",\"type\":\"uint16\"}],\"internalType\":\"struct DataTypes.LoanRules\",\"name\":\"loanRules\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.NFTItem\",\"name\":\"nftItem\",\"type\":\"tuple\"}],\"internalType\":\"struct DataTypes.Loan\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"grantAllowanceForAssetManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isAvailableRentalAction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"listNFTForRent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_loanIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"lockRestAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"payInstallment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"postLiquidation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_accepted\",\"type\":\"bool\"}],\"name\":\"relayNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"removeRentAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"revokeAllowanceForAssetManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salesManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"setLoanDefaulted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"setLoanLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lateFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penaltyFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_salesManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetManager\",\"type\":\"address\"}],\"name\":\"setSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSuperOwner\",\"type\":\"address\"}],\"name\":\"transferSuperOwnerShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"withdrawNFTFromRent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TribeOne", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000633e712e4f0e18b758e6fc7491086bebc8f38d2c0000000000000000000000005404e50f23bb42ffa126ae00f06752e01349d525000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000005404e50f23bb42ffa126ae00f06752e01349d52500000000000000000000000027e1d8acf5ec07942187f3f7c736ea2ab9817590", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}