{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function mint(address to, uint256 amount) external returns (bool);\\n    function burn(uint256 amount) external returns (bool);\\n    function transferOwnership(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    \\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    \\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/XBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\n\\n\\ncontract XBridge is OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n\\n    uint256 public listingFee;\\n    address public factory;\\n    address public tokenFeeCollector;\\n    address public listingFeeCollector;\\n    address[] public admin;\\n    address public usdt;\\n    IUniswapV2Router02 public router;\\n    uint256 public thresholdLimit;\\n\\n    struct tokenInfo {\\n        address token;\\n        uint256 chain;\\n    }\\n\\n    mapping(address => bool) public isBase;\\n    mapping(address => bool) public isWrapped;\\n    mapping(address => uint256) public tokenTax;\\n    mapping(uint256 => bool) public chainSupported;\\n    mapping(address => uint256) public feesForToken;\\n    mapping(address => uint256) public tokenChainId;\\n    mapping(address => address) public tokenToToken;\\n    mapping(address => bool) public excludeFeeFromListing;\\n    mapping(address => mapping(address => bool)) public isMintable;\\n    mapping(uint256 => mapping(address => uint256)) public inNonce;\\n    mapping(address => mapping(address => address)) public tokenOwner;\\n    mapping(address => mapping(address => uint256)) public tokenDeposited;\\n    mapping(address => mapping(address => uint256)) public tokenWithdrawn;\\n    mapping(uint256 => mapping(address => mapping(uint256 => bool))) public nonceProcessed;\\n\\n    event Locked(address indexed user, address indexed inToken, address indexed outToken, uint256 amount, uint256 feeAmount, uint256 _nonce, uint256 isWrapped, uint256 srcId, uint256 dstId);\\n    event UnLocked(address indexed user, address indexed outToken, uint256 amount, uint256 feeAmount, uint256 _nonce, uint256 srcId, uint256 dstId);\\n    event TokenListed(address indexed baseToken, uint256 baseTokenChain, address indexed correspondingToken, uint256 correspondingTokenChain, bool isMintable, address indexed user);\\n    event TokenDelisted(address indexed baseToken, uint256 baseTokenChain, address indexed correspondingToken, uint256 correspondingTokenChain);\\n    event TokenDeposited(address indexed user, uint256 amount);\\n    event TokenWithdrawn(address indexed user, address indexed receiver, uint256 amount);\\n    event SignersChanged(address[] indexed newSigners);\\n    event ChainSupported(uint256 _chain, bool _supported);\\n    event FeeExcludedFromListing(address indexed user, bool ifExcluded);\\n    event TokenFee(address indexed _token, uint256 _fee);\\n\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address[] memory _admin, uint256 _listingFee, address _tokenFeeCollector, address _listingFeeCollector, address _router, address _factory, address _usdt) external initializer {\\n        require(_admin.length >= 3, \\\"MINIMUM_SIGNERS_SHOULD_BE_3\\\");\\n        require(_listingFee > 0, \\\"LISTING_FEE_CANT_BE_ZERO\\\");\\n        require(_tokenFeeCollector != address(0) && _listingFeeCollector != address(0), \\\"CANT_PROVIDE_ZERO_ADDRESS\\\");\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        admin = _admin;\\n        listingFee = _listingFee;\\n        tokenFeeCollector = _tokenFeeCollector;\\n        listingFeeCollector = _listingFeeCollector;\\n        router = IUniswapV2Router02(_router);\\n        factory = _factory;\\n        usdt = _usdt;\\n        thresholdLimit = 100 * 10**6;\\n\\n\\n    }\\n\\n    /** \\n     * @dev cannot receive eth directly\\n     */\\n    receive() external payable {\\n        revert(\\\"DIRECT_ETH_TRANSFER_NOT_SUPPORTED\\\");\\n    }\\n\\n     /** \\n     * @dev cannot receive eth directly\\n     */\\n    fallback() external payable {\\n        revert(\\\"DIRECT_ETH_TRANSFER_NOT_SUPPORTED\\\");\\n    }\\n\\n    /**\\n     * @dev Lock the `_amount` of `inTokens` in the bridge contract for `dstId` chain.\\n     * @param inToken locking token address\\n     * @param _amount amount of token to lock\\n     * @param dstId destination chain on which user will claim token\\n     * Emits a {Locked} event.\\n     */\\n    function lock(address inToken, uint256 _amount, uint256 dstId) external payable nonReentrant {\\n        require(_amount > 0, \\\"AMOUNT_CANT_BE_ZERO\\\");    \\n        require(inToken != address(0), \\\"TOKEN_ADDRESS_CANT_BE_NULL\\\");\\n        require(inToken.code.length > 0, \\\"TOKEN_NOT_ON_THIS_CHAIN\\\");\\n        address outToken = tokenToToken[inToken];\\n        require(outToken != address(0), \\\"UNSUPPORTED_TOKEN\\\");\\n        \\n        require(chainSupported[dstId], \\\"INVALID_CHAIN\\\");\\n\\n        uint256 srcId;\\n        assembly {\\n            srcId := chainid()\\n        }\\n\\n        uint256 _isWrapped;\\n\\n        if(isWrapped[inToken]) _isWrapped = 1;\\n        else _isWrapped = 0;\\n        \\n        address _user = msg.sender;\\n        uint256 tokenAmount;\\n        uint256 fee = feesForToken[inToken];\\n        uint256 feesAmount;\\n        \\n\\n        if(_isWrapped == 0) {\\n                \\n                (tokenAmount, feesAmount) = transferAndCalcAmountAndFees(inToken, _user, _amount, fee);\\n\\n                emit Locked(_user, inToken, outToken, tokenAmount, feesAmount, inNonce[dstId][_user]++, _isWrapped, srcId, dstId);\\n\\n        } else if(_isWrapped == 1) {\\n\\n                (tokenAmount, feesAmount) = transferAndCalcAmountAndFees(inToken, _user, _amount, fee);\\n\\n                burn(inToken, tokenAmount+feesAmount);\\n\\n                emit Locked(_user, inToken, outToken, tokenAmount, feesAmount, inNonce[dstId][_user]++, _isWrapped, srcId, dstId);\\n            \\n        }\\n\\n    }\\n\\n    /**\\n     * @dev Unlock the `amount` of tokens corresponding to `inToken`\\n     * @param inToken locked token address\\n     * @param amount amount of token to unlock\\n     * @param feeAmount fee on locked amount on source chain\\n     * @param _nonce user lock nonce on source chain\\n     * @param _isWrapped 1 if inToken is mintable otherwise 0\\n     * @param srcId source chain on which user has locked token\\n     * @param r[] r part of the signature of the signers\\n     * @param s[] s part of the signature of the signers\\n     * @param v[] v part of the signature of the signers\\n     * Emits a {unLocked} event.\\n     */\\n    function unlock(address inToken, uint256 amount, uint256 feeAmount, uint256 _nonce, uint256 _isWrapped, uint256 srcId, bytes32[] memory r, bytes32[] memory s, uint8[] memory v) external payable nonReentrant {\\n        address user = msg.sender;\\n        require(inToken != address(0), \\\"TOKEN_ADDRESS_CANT_BE_NULL\\\");\\n        require(user != address(0), \\\"INVALID_RECEIVER\\\");\\n        require(amount > 0, \\\"AMOUNT_CANT_BE_ZERO\\\");\\n\\n        address outToken = tokenToToken[inToken];\\n        require(outToken != address(0), \\\"UNSUPPORTED_TOKEN\\\");\\n\\n        require(!nonceProcessed[srcId][user][_nonce], \\\"NONCE_ALREADY_PROCESSED\\\");\\n        require(chainSupported[srcId], \\\"INVALID_CHAIN\\\");\\n\\n        \\n        bool mintable = isMintable[inToken][outToken];\\n\\n        uint256 dstId;\\n        assembly {\\n            dstId := chainid()\\n        }\\n\\n        bool success = verify(address(this), user, inToken, outToken, _nonce, amount, feeAmount, _isWrapped, srcId, dstId, r, s, v);\\n        require(success, \\\"INVALID_RECOVERED_SIGNER\\\");\\n        if(!mintable) require((IERC20(outToken).balanceOf(address(this)) - tokenTax[outToken]) >= (amount + feeAmount), \\\"INSUFFICIENT_LIQUIDITY_IN_BRIDGE\\\");\\n\\n        // inToken is base token then isWrapped = 0\\n        // inToken is wrapped token then isWrapped = 1\\n\\n        nonceProcessed[srcId][user][_nonce] = true;\\n\\n        if(_isWrapped == 0) {\\n\\n            if(mintable) {\\n                if(feeAmount > 0) mint(outToken, tokenFeeCollector, feeAmount);\\n                mint(outToken, user, amount);\\n            } else {\\n                if(feeAmount > 0) {\\n                    tokenTax[outToken] += feeAmount;\\n                }\\n                success = IERC20(outToken).transfer(user, amount);\\n                if(!success) revert(\\\"TOKEN_TRANSFER_FAILED\\\");\\n            }\\n\\n            \\n        } else if(_isWrapped == 1) {\\n            if(feeAmount > 0) {\\n                tokenTax[outToken] += feeAmount;\\n            }\\n            success = IERC20(outToken).transfer(user, amount);\\n            if(!success) revert(\\\"TOKEN_TRANSFER_FAILED\\\");\\n        }\\n\\n        if(IUniswapV2Factory(router.factory()).getPair(outToken, router.WETH()) != address(0) && tokenTax[outToken] > 0) {\\n            address[] memory path = new address[](3);\\n            path[0] = outToken;\\n            path[1] = router.WETH();\\n            path[2] = usdt;\\n            uint _amount = router.getAmountsOut(tokenTax[outToken], path)[2];\\n            if(_amount >= thresholdLimit) {\\n                swapTokensForETH(outToken, tokenTax[outToken], router.WETH());\\n                tokenTax[outToken] = 0;\\n            }\\n            \\n        } else if(IUniswapV2Factory(router.factory()).getPair(outToken, usdt) != address(0) && tokenTax[outToken] > 0) {\\n            address[] memory path = new address[](2);\\n            path[0] = outToken;\\n            path[1] = usdt;\\n            uint _amount = router.getAmountsOut(tokenTax[outToken], path)[1];\\n            if(_amount >= thresholdLimit) {\\n                swapTokensForETH(outToken, tokenTax[outToken], usdt);\\n                tokenTax[outToken] = 0;\\n            }\\n        }\\n    \\n        emit UnLocked(user, outToken, amount,  feeAmount, _nonce, srcId, dstId);\\n    }\\n\\n    function swapTokensForETH(address _token, uint256 _amount, address pairToken) internal {\\n        \\n        safeApprove(_token, address(router), _amount);\\n        if(pairToken == router.WETH()) {\\n            address[] memory path = new address[](2);\\n            path[0] = _token;\\n            path[1] = pairToken;\\n            router.swapExactTokensForETHSupportingFeeOnTransferTokens(_amount, 0, path, tokenFeeCollector, block.timestamp);\\n\\n        } else {\\n                address[] memory path = new address[](3);\\n                path[0] = _token;\\n                path[1] = usdt;\\n                path[2] = router.WETH();\\n            router.swapExactTokensForETHSupportingFeeOnTransferTokens(_amount, 0, path, tokenFeeCollector, block.timestamp);\\n\\n        }\\n\\n    }\\n\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n\\n\\n\\n    /**\\n     * @dev internal function to call mint function of the token address\\n     */\\n    function mint(address token, address to, uint256 amount) internal {\\n        bytes memory init = returnHash(to, amount);\\n        if (init.length > 0) call(init, token);\\n                    \\n    }\\n\\n    /**\\n     * @dev internal function to call burn function of the token address\\n     */\\n    function burn(address token, uint256 amount) internal {\\n        bytes memory init = returnHash(amount);\\n        if (init.length > 0) call(init, token);\\n                    \\n    }\\n    \\n    /**\\n     * @dev function to calculate the fees amount and transfer token from user to this contract\\n     */\\n    function transferAndCalcAmountAndFees(address token, address _user, uint256 amount, uint256 fee) private returns(uint256 tokenAmount, uint256 feeAmount) {\\n\\n                uint256 beforeAmount = (IERC20(token).balanceOf(address(this)));\\n                bool success = IERC20(token).transferFrom(_user, address(this), amount);\\n                if(!success) revert(\\\"TRANSFER_FAILED_WHILE_LOCKING\\\");\\n                tokenAmount = (IERC20(token).balanceOf(address(this))) - beforeAmount;\\n            \\n                if(fee > 0) {\\n                    feeAmount = tokenAmount * fee / 10000;\\n                    tokenAmount -= feeAmount;\\n                }\\n    }\\n\\n    /**\\n     * @dev function to verify the authenticity of the signatures provided in form of r[], s[] and v[] \\n     */\\n\\n    function verify(address dstContract, address user, address inToken, address outToken, uint256 nonce, uint256 amount, uint256 feeAmount, uint256 _isWrapped, uint256 srcId, uint256 dstId, bytes32[] memory sigR, bytes32[] memory sigS, uint8[] memory sigV) internal view returns (bool) {\\n        uint256 len = admin.length;\\n        require(sigR.length == len && sigS.length == len && sigV.length == len, \\\"INVALID_NUMBER_OF_SIGNERS\\\");\\n        for(uint i=0; i<len; ++i) {\\n            bytes32 hash = prefixed(keccak256(abi.encodePacked(dstContract, user, inToken, outToken, nonce, amount, feeAmount, _isWrapped, srcId, dstId)));\\n            address signer = ecrecover(hash, sigV[i], sigR[i], sigS[i]);\\n            require(signer != address(0), \\\"INVALID_SIGNATURE\\\");\\n            require(admin[i] == signer, \\\"INVALID_VALIDATOR\\\");\\n        }\\n        return true;\\n    }\\n    /**\\n     * @dev making hash EIP-191 compatible\\n     */\\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev returning the encoded mint function to call\\n     */\\n    function returnHash(address to, uint256 amount) internal pure returns(bytes memory data) {\\n        data = abi.encodeWithSignature(\\\"mint(address,uint256)\\\", to, amount);\\n    }\\n\\n     /**\\n     * @dev calling the `token` contract with `callData`\\n     */\\n    function call(bytes memory callData, address token) internal {\\n        IERC20 _token = IERC20(payable(token));\\n        assembly \\n                    {\\n                        if eq(call(gas(), _token, 0, add(callData, 0x20), mload(callData), 0, 0), 0) {\\n                            revert(0, 0)\\n                        }\\n                    }\\n    }\\n\\n    /**\\n     * @dev returning the encoded mint function to call\\n     */\\n    function returnHash(uint256 amount) internal pure returns(bytes memory data) {\\n        data = abi.encodeWithSignature(\\\"burn(uint256)\\\", amount);\\n    }\\n\\n    /**\\n     * @dev token owner can list the pair of their token with their corresponding chain id\\n     * @param baseToken struct that contains token address and its corresponding chain id\\n     * @param correspondingToken struct that contains token address and its corresponding chain id\\n     * @param _isMintable if corresponding token address is mintable then its `true` otherwise `false`\\n     */\\n    function listToken(tokenInfo memory baseToken, tokenInfo memory correspondingToken, bool _isMintable) external payable {\\n        address _baseToken = baseToken.token;\\n        address _correspondingToken = correspondingToken.token;\\n        require(_baseToken != address(0), \\\"INVALID_ADDR\\\");\\n        require(_correspondingToken != address(0), \\\"INVALID_ADDR\\\");\\n        require(tokenToToken[_baseToken] == address(0) && tokenToToken[_correspondingToken] == address(0), \\\"THIS_PAIR_ALREADY_LISTED\\\");\\n\\n        isMintable[_baseToken][_correspondingToken] = _isMintable;\\n        isMintable[_correspondingToken][_baseToken] = _isMintable;\\n        tokenToToken[_baseToken] = _correspondingToken;\\n        tokenToToken[_correspondingToken] = _baseToken;\\n        isBase[_baseToken] = true;\\n        if(_isMintable) isWrapped[_correspondingToken] = true;\\n        else isWrapped[_correspondingToken] = false;\\n\\n        tokenOwner[_baseToken][_correspondingToken] = msg.sender;\\n        tokenOwner[_correspondingToken][_baseToken] = msg.sender;\\n\\n        if(!excludeFeeFromListing[msg.sender]) transferListingFee(listingFeeCollector, msg.sender, msg.value);\\n\\n        emit TokenListed(_baseToken, baseToken.chain, _correspondingToken, correspondingToken.chain, _isMintable, msg.sender);\\n\\n    }\\n\\n    /**\\n     * @dev platform owner can delist the pair of the token\\n     * @param baseToken struct that contains token address and its corresponding chain id\\n     * @param correspondingToken struct that contains token address and its corresponding chain id\\n     */\\n    function delistTokenByOwner(tokenInfo memory baseToken, tokenInfo memory correspondingToken) external onlyOwner {\\n        address _baseToken = baseToken.token;\\n        address _correspondingToken = correspondingToken.token;\\n        require(_baseToken != address(0), \\\"INVALID_ADDR\\\");\\n        require(_correspondingToken != address(0), \\\"INVALID_ADDR\\\");\\n        require(tokenToToken[_baseToken] != address(0) && tokenToToken[_correspondingToken] != address(0), \\\"ALREADY_DELISTED\\\");\\n\\n        delete tokenToToken[_baseToken];\\n        delete tokenToToken[_correspondingToken];\\n\\n        address _tokenOwner = tokenOwner[_baseToken][_correspondingToken];\\n\\n        tokenOwner[_baseToken][_correspondingToken] = address(0);\\n        tokenOwner[_correspondingToken][_baseToken] = address(0);\\n\\n        if(_baseToken.code.length > 0) tokenDeposited[_baseToken][_tokenOwner] = 0;\\n        if(_correspondingToken.code.length > 0) tokenDeposited[_correspondingToken][_tokenOwner] = 0;\\n\\n        tokenChainId[_baseToken] = 0;\\n        tokenChainId[_correspondingToken] = 0;\\n\\n        emit TokenDelisted(_baseToken, baseToken.chain, _correspondingToken, correspondingToken.chain);\\n    }\\n\\n    /**\\n     * @dev token lister can delist the pair of the token\\n     * @param baseToken struct that contains token address and its corresponding chain id\\n     * @param correspondingToken struct that contains token address and its corresponding chain id\\n     */\\n    function delistTokenByUser(tokenInfo memory baseToken, tokenInfo memory correspondingToken) external {\\n        address _baseToken = baseToken.token;\\n        address _correspondingToken = correspondingToken.token;\\n        require(tokenOwner[_baseToken][_correspondingToken] == msg.sender, \\\"NOT_TOKEN_OWNER\\\");\\n        require(tokenToToken[_baseToken] != address(0) && tokenToToken[_correspondingToken] != address(0), \\\"ALREADY_DELISTED\\\");\\n\\n        require(_baseToken != address(0), \\\"INVALID_ADDR\\\");\\n        require(_correspondingToken != address(0), \\\"INVALID_ADDR\\\");\\n\\n        delete tokenToToken[_baseToken];\\n        delete tokenToToken[_correspondingToken];\\n\\n        tokenOwner[_baseToken][_correspondingToken] = address(0);\\n        tokenOwner[_correspondingToken][_baseToken] = address(0);\\n\\n        if(_baseToken.code.length > 0) tokenDeposited[_baseToken][msg.sender] = 0;\\n        if(_correspondingToken.code.length > 0) tokenDeposited[_correspondingToken][msg.sender] = 0;\\n\\n        tokenChainId[_baseToken] = 0;\\n        tokenChainId[_correspondingToken] = 0;\\n\\n        emit TokenDelisted(_baseToken, baseToken.chain, _correspondingToken, correspondingToken.chain);\\n    }\\n\\n    /**\\n     * @dev take the listing fee while listing token\\n     */\\n    function transferListingFee(address to, address _user,  uint256 _value) private nonReentrant {\\n        require(to != address(0), \\\"CANT_SEND_TO_NULL_ADDRESS\\\");\\n        require(_value >= listingFee, \\\"INCREASE_LISTING_FEE\\\");\\n        (bool success, ) = payable(to).call{value:listingFee}(\\\"\\\");\\n        require(success, \\\"LISTING_FEE_TRANSFER_FAILED\\\");\\n        uint256 remainingEth = _value - listingFee;\\n        if (remainingEth > 0) {\\n            (success,) = payable(_user).call{value: remainingEth}(\\\"\\\");\\n            require(success, \\\"REFUND_REMAINING_ETHER_SENT_FAILED\\\");\\n        }\\n    }\\n\\n\\n    /**\\n    * @dev owner can change the listing fee\\n    */\\n    function setListingFee(uint256 newFee) external onlyOwner {\\n        require(newFee != listingFee, \\\"SAME_FEE_PROVIDED\\\");\\n        require(newFee >= 0, \\\"INVALID_FEE\\\");\\n        listingFee = newFee;\\n    }\\n\\n    /**\\n    * @dev owner can change the listing fee collector address\\n    */\\n    function setListingFeeCollector(address collector) external onlyOwner {\\n        require(collector != address(0), \\\"CANT_BE_NULL_ADDRESS\\\");\\n        listingFeeCollector = collector;\\n\\n    }\\n\\n    /**\\n    * @dev owner can exclude particular address to give the listing fee while listing token\\n    */\\n    function setExcludeFeeFromListing(address user, bool ifExcluded) external onlyOwner {\\n        require(user != address(0), \\\"CANT_BE_NULL_ADDRESS\\\");\\n        // require(!excludeFeeFromListing[user], \\\"ALREADY_EXCLUDED\\\");\\n        bool _previousState = excludeFeeFromListing[user];\\n\\n        if(_previousState == ifExcluded) revert(\\\"ALREADY_SET\\\");\\n        else excludeFeeFromListing[user] = ifExcluded;\\n\\n        emit FeeExcludedFromListing(user, ifExcluded);\\n    }\\n\\n    /**\\n    * @dev owner can change the signer addresses \\n    */\\n    function changeAdmin(address[] memory newAdmin) external onlyOwner {\\n        require(newAdmin.length >= 3, \\\"VALIDATORS_ARE_LESS_THAN_3\\\");\\n        admin = newAdmin;\\n\\n        emit SignersChanged(newAdmin);\\n    }\\n\\n    /**\\n    * @dev owner can set fee for particular token for bridging \\n    */\\n    function setFeeForToken(address token, uint256 fee) external onlyOwner {\\n        require(token != address(0), \\\"INVALID_TOKEN\\\");\\n        require(fee < 10000, \\\"FEE_CANT_BE_100%\\\");\\n        feesForToken[token] = fee;\\n\\n        emit TokenFee(token, fee);\\n    }\\n\\n    /**\\n    * @dev owner can set if particular chain is supported or not \\n    */\\n    function setChainSupported(uint256 chainId, bool supported) external onlyOwner {\\n        require(chainId != 0, \\\"INVALID_CHAIN_ID\\\");\\n        chainSupported[chainId] = supported;\\n        emit ChainSupported(chainId, supported);\\n    }\\n\\n     /**\\n    * @dev owner can change the token fee collector address\\n    */\\n    function setFeeCollector(address collector) external onlyOwner {\\n        require(collector != address(0), \\\"INVALID_OWNER\\\");\\n        tokenFeeCollector = collector;\\n    }\\n\\n     /**\\n    * @dev returns total number of signers that are verified while unlocking the tokens \\n    */\\n    function getTotalSigners() external view returns(uint256) {\\n        return admin.length;\\n    }\\n\\n    /**\\n    * @dev token lister has to deposit tokens if none of the listed token are mintable or burnable\\n    * @param token token address to deposit in bridge contract \\n    * @param amount amount of tokens to deposit in bridge contract\\n    */\\n    function depositTokens(address token, uint256 amount) external {\\n        require(token.code.length > 0, \\\"TOKEN_NOT_DEPLOYED_ON_THIS_CHAIN\\\");\\n        address _correspondingToken = tokenToToken[token];\\n        require(_correspondingToken != address(0), \\\"TOKEN_NOT_LISTED\\\");\\n        require(amount > 0, \\\"AMOUNT_CANT_BE_ZERO\\\");\\n        address user = msg.sender;\\n\\n        uint256 beforeBal = IERC20(token).balanceOf(address(this));\\n        IERC20(token).transferFrom(user, address(this), amount);\\n        uint256 actualBal = IERC20(token).balanceOf(address(this)) - beforeBal;\\n\\n        tokenDeposited[token][user] += actualBal;\\n\\n        emit TokenDeposited(user, actualBal);\\n    }\\n\\n    /**\\n    * @dev token lister can withdraw tokens \\n    * @param token token address to withdraw from bridge contract \\n    * @param receiver address to recive the withdrawn tokens\\n    * @param amount amount of tokens to deposit in bridge contract\\n    */\\n    function withdrawTokens(address token, address receiver, uint256 amount) external {\\n        require(token.code.length > 0, \\\"TOKEN_NOT_DEPLOYED_ON_THIS_CHAIN\\\");\\n        address _correspondingToken = tokenToToken[token];\\n        require(_correspondingToken != address(0), \\\"TOKEN_NOT_LISTED\\\");\\n        require(amount > 0, \\\"AMOUNT_CANT_BE_ZERO\\\");\\n        address user = msg.sender;\\n        require(amount <= tokenDeposited[token][user], \\\"NOTHING_TO_CLAIM\\\");\\n        require(amount <= (IERC20(token).balanceOf(address(this)) - tokenTax[token]), \\\"WITHDRAW_LESS\\\");\\n\\n        if(isWrapped[token]) revert(\\\"CANT_WITHDRAW_WRAPPED_TOKENS\\\");\\n\\n        // uint256 share = amount * IERC20(token).balanceOf(address(this)) / totalTokens[token];\\n        tokenDeposited[token][user] -= amount;\\n        tokenWithdrawn[token][user] += amount;\\n        // totalTokens[token] -= amount;\\n        IERC20(token).transfer(receiver, amount);\\n\\n        emit TokenWithdrawn(user, receiver, amount);\\n    }\\n\\n    function claimTax(address token, bool pairWithEth, bool withdrawAnyAmount) external onlyOwner {\\n\\n        if(pairWithEth && tokenTax[token] > 0) {\\n            address[] memory path = new address[](3);\\n            path[0] = token;\\n            path[1] = router.WETH();\\n            path[2] = usdt;\\n            uint _amount = router.getAmountsOut(tokenTax[token], path)[2];\\n            if(_amount >= thresholdLimit || withdrawAnyAmount) {\\n                swapTokensForETH(token, tokenTax[token], router.WETH());\\n                tokenTax[token] = 0;\\n            }\\n            \\n        } else if(!pairWithEth && tokenTax[token] > 0) {\\n            address[] memory path = new address[](2);\\n            path[0] = token;\\n            path[1] = usdt;\\n            uint _amount = router.getAmountsOut(tokenTax[token], path)[1];\\n            if(_amount >= thresholdLimit || withdrawAnyAmount) {\\n                swapTokensForETH(token, tokenTax[token], usdt);\\n                tokenTax[token] = 0;\\n            }\\n        }\\n    }\\n\\n    function viewTax(address token, bool pairWithEth) external view returns(uint _amount) {\\n\\n        if(pairWithEth && tokenTax[token] > 0) {\\n            address[] memory path = new address[](3);\\n            path[0] = token;\\n            path[1] = router.WETH();\\n            path[2] = usdt;\\n            _amount = router.getAmountsOut(tokenTax[token], path)[2];\\n           \\n            \\n        } else if(!pairWithEth && tokenTax[token] > 0) {\\n            address[] memory path = new address[](2);\\n            path[0] = token;\\n            path[1] = usdt;\\n            _amount = router.getAmountsOut(tokenTax[token], path)[1];\\n           \\n        } else _amount = 0;\\n    }\\n\\n    /**\\n    * @dev token lister can change their ownership of listing tokens\\n    * @param token token address to change its lister owner\\n    * @param newOwner new owner address\\n    */\\n    function changeTokenLister(address token, address newOwner) external {\\n        require(token.code.length > 0, \\\"TOKEN_NOT_DEPLOYED_ON_THIS_CHAIN\\\");\\n        require(newOwner != address(0), \\\"NEW_OWNER_CANT_BE_NULL\\\");\\n        address _correspondingToken = tokenToToken[token];\\n        require(_correspondingToken != address(0), \\\"TOKEN_NOT_LISTED\\\");\\n        address user = msg.sender;\\n        require(tokenOwner[token][_correspondingToken] == user, \\\"ONLY_TOKEN_LISTER_CAN_CHANGE\\\");\\n\\n        tokenDeposited[token][newOwner] = tokenDeposited[token][user];\\n        tokenDeposited[token][user] = 0;\\n\\n        tokenOwner[token][_correspondingToken] = newOwner;\\n        tokenOwner[_correspondingToken][token] = newOwner;\\n    }\\n\\n    /**\\n    * @dev returns the addresses of signers\\n    */\\n    function getSigners() external view returns(address[] memory ) {\\n        return admin;\\n    }\\n\\n    function setThresholdLimit(uint256 _amount) external onlyOwner {\\n        thresholdLimit = _amount;\\n    }\\n\\n    function setRouter(address _router) external onlyOwner {\\n        router = IUniswapV2Router02(_router);\\n    }\\n\\n    function setUsdt(address _usdt) external onlyOwner() {\\n        usdt = _usdt;\\n    }\\n    \\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_chain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_supported\",\"type\":\"bool\"}],\"name\":\"ChainSupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"ifExcluded\",\"type\":\"bool\"}],\"name\":\"FeeExcludedFromListing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"isWrapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstId\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"newSigners\",\"type\":\"address[]\"}],\"name\":\"SignersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"correspondingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"correspondingTokenChain\",\"type\":\"uint256\"}],\"name\":\"TokenDelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"TokenFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"correspondingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"correspondingTokenChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMintable\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"TokenListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstId\",\"type\":\"uint256\"}],\"name\":\"UnLocked\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newAdmin\",\"type\":\"address[]\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeTokenLister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"pairWithEth\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withdrawAnyAmount\",\"type\":\"bool\"}],\"name\":\"claimTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chain\",\"type\":\"uint256\"}],\"internalType\":\"struct XBridge.tokenInfo\",\"name\":\"baseToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chain\",\"type\":\"uint256\"}],\"internalType\":\"struct XBridge.tokenInfo\",\"name\":\"correspondingToken\",\"type\":\"tuple\"}],\"name\":\"delistTokenByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chain\",\"type\":\"uint256\"}],\"internalType\":\"struct XBridge.tokenInfo\",\"name\":\"baseToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chain\",\"type\":\"uint256\"}],\"internalType\":\"struct XBridge.tokenInfo\",\"name\":\"correspondingToken\",\"type\":\"tuple\"}],\"name\":\"delistTokenByUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeFeeFromListing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feesForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSigners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSigners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_admin\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_listingFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenFeeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_listingFeeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMintable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWrapped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chain\",\"type\":\"uint256\"}],\"internalType\":\"struct XBridge.tokenInfo\",\"name\":\"baseToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chain\",\"type\":\"uint256\"}],\"internalType\":\"struct XBridge.tokenInfo\",\"name\":\"correspondingToken\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_isMintable\",\"type\":\"bool\"}],\"name\":\"listToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstId\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonceProcessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"name\":\"setChainSupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"ifExcluded\",\"type\":\"bool\"}],\"name\":\"setExcludeFeeFromListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFeeForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setListingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"}],\"name\":\"setListingFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setThresholdLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"name\":\"setUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thresholdLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_isWrapped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"pairWithEth\",\"type\":\"bool\"}],\"name\":\"viewTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "XBridge", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}