{"SourceCode": "pragma solidity 0.6.7;\r\n\r\nabstract contract ChainlinkTWAPLike {\r\n    function getResultWithValidity()\r\n        external\r\n        view\r\n        virtual\r\n        returns (uint256, bool);\r\n\r\n    function timeElapsedSinceFirstObservation()\r\n        external\r\n        view\r\n        virtual\r\n        returns (uint256);\r\n}\r\n\r\nabstract contract UniV3TWAPLike {\r\n    function getMedian(uint256) external view virtual returns (uint256);\r\n}\r\n\r\n// Custom converter feed for two twaps (Chainlink + UniV3).\r\n// Will fetch the twap on chainlink TWAP, fetch a TWAP from Uni V3 of the same length and return converted value.\r\ncontract ConverterFeed {\r\n    // --- State ---\r\n    // Base feed you want to convert into another currency. ie: (RAI/ETH)\r\n    UniV3TWAPLike public immutable uniV3TWAP;\r\n    // Feed user for conversion. (i.e: Using the example above and ETH/USD willoutput RAI price in USD)\r\n    ChainlinkTWAPLike public immutable chainlinkTWAP;\r\n    // Scalling factor to accomodate for different numbers of decimal places\r\n    uint256 public immutable converterFeedScalingFactor;\r\n\r\n    constructor(\r\n        address uniV3TWAP_,\r\n        address chainlinkTWAP_,\r\n        uint256 scalingFactor\r\n    ) public {\r\n        require(uniV3TWAP_ != address(0), \"ConverterFeed/null-uni-v3-twap\");\r\n        require(\r\n            chainlinkTWAP_ != address(0),\r\n            \"ConverterFeed/null-chainlink-twap\"\r\n        );\r\n        require(scalingFactor > 0, \"ConverterFeed/invalid-scaling-factor\");\r\n\r\n        uniV3TWAP = UniV3TWAPLike(uniV3TWAP_);\r\n        chainlinkTWAP = ChainlinkTWAPLike(chainlinkTWAP_);\r\n        converterFeedScalingFactor = scalingFactor;\r\n    }\r\n\r\n    // --- SafeMath ---\r\n    function subtract(uint x, uint y) public pure returns (uint z) {\r\n        z = x - y;\r\n        require(z <= x, \"uint-uint-sub-underflow\");\r\n    }    \r\n\r\n    // --- General Utils --\r\n    function both(bool x, bool y) private pure returns (bool z) {\r\n        assembly {\r\n            z := and(x, y)\r\n        }\r\n    }\r\n\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly {\r\n            z := or(x, y)\r\n        }\r\n    }\r\n\r\n    // --- Math ---\r\n    function multiply(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    // --- Getters ---\r\n    /**\r\n     * @notice Fetch the latest medianPrice (for maxWindow) or revert if is is null\r\n     **/\r\n    function read() external view returns (uint256) {\r\n        (uint256 value, bool valid) = getResultWithValidity();\r\n        require(valid, \"ConverterFeed/invalid-price-feed\");\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * @notice Fetch the latest medianPrice and whether it is null or not\r\n     **/\r\n    function getResultWithValidity()\r\n        public\r\n        view\r\n        returns (uint256 value, bool valid)\r\n    {\r\n        (uint256 clValue, bool clValid) = chainlinkTWAP.getResultWithValidity(); // reverts if price is invalid\r\n        uint256 timeSinceFirstObservation = chainlinkTWAP\r\n            .timeElapsedSinceFirstObservation();\r\n        uint256 uniValue;\r\n        bool uniValid;\r\n        try uniV3TWAP.getMedian(subtract(block.timestamp, timeSinceFirstObservation)) returns (uint256 uniValue_) {\r\n          uniValue = uniValue_;\r\n          uniValid = true;\r\n        } catch {}\r\n        value = multiply(clValue, uniValue) / converterFeedScalingFactor;\r\n        valid = both(both(clValid, uniValid), value > 0);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniV3TWAP_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chainlinkTWAP_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scalingFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"chainlinkTWAP\",\"outputs\":[{\"internalType\":\"contract ChainlinkTWAPLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"converterFeedScalingFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getResultWithValidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"read\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"subtract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV3TWAP\",\"outputs\":[{\"internalType\":\"contract UniV3TWAPLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ConverterFeed", "CompilerVersion": "v0.6.7+commit.b8d736ae", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009ad1736e6984a8b77862b2a39e8e760081d579aa0000000000000000000000000d7b4a10dff52e85e9fb7e1b030c8c2dd96e0add0000000000000000000000000000000000000000000000000de0b6b3a7640000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0b9ba7217f3ce853c0b9415c095fceb4d058fc6666c84068d090b16767f8b8eb"}