{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity 0.8.21;\\n\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is IAccessControl, IERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `msg.sender` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == msg.sender, \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/AccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.21;\\n\\nimport \\\"../domain/BosonConstants.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\n\\n/**\\n * @title AccessController\\n *\\n * @notice Implements centralized role-based access for Boson Protocol contracts.\\n */\\ncontract AccessController is AccessControl {\\n    /**\\n     * @notice Constructor\\n     *\\n     * Grants ADMIN role to deployer.\\n     * Sets ADMIN as role admin for all other roles.\\n     */\\n    constructor() {\\n        _setupRole(ADMIN, msg.sender);\\n        _setRoleAdmin(ADMIN, ADMIN);\\n        _setRoleAdmin(PAUSER, ADMIN);\\n        _setRoleAdmin(PROTOCOL, ADMIN);\\n        _setRoleAdmin(CLIENT, ADMIN);\\n        _setRoleAdmin(UPGRADER, ADMIN);\\n        _setRoleAdmin(FEE_COLLECTOR, ADMIN);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/domain/BosonConstants.sol\": {\r\n      \"content\": \"import \\\"./BosonTypes.sol\\\";\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.21;\\n\\n// Access Control Roles\\nbytes32 constant ADMIN = keccak256(\\\"ADMIN\\\"); // Role Admin\\nbytes32 constant PAUSER = keccak256(\\\"PAUSER\\\"); // Role for pausing the protocol\\nbytes32 constant PROTOCOL = keccak256(\\\"PROTOCOL\\\"); // Role for facets of the ProtocolDiamond\\nbytes32 constant CLIENT = keccak256(\\\"CLIENT\\\"); // Role for clients of the ProtocolDiamond\\nbytes32 constant UPGRADER = keccak256(\\\"UPGRADER\\\"); // Role for performing contract and config upgrades\\nbytes32 constant FEE_COLLECTOR = keccak256(\\\"FEE_COLLECTOR\\\"); // Role for collecting fees from the protocol\\n\\n// Revert Reasons: Pause related\\nstring constant NOT_PAUSED = \\\"Protocol is not currently paused\\\";\\nstring constant REGION_PAUSED = \\\"This region of the protocol is currently paused\\\";\\n\\nuint256 constant ALL_REGIONS_MASK = (1 << (uint256(type(BosonTypes.PausableRegion).max) + 1)) - 1;\\n\\n// Revert Reasons: General\\nstring constant INVALID_ADDRESS = \\\"Invalid address\\\";\\nstring constant INVALID_STATE = \\\"Invalid state\\\";\\nstring constant ARRAY_LENGTH_MISMATCH = \\\"Array length mismatch\\\";\\n\\n// Reentrancy guard\\nstring constant REENTRANCY_GUARD = \\\"ReentrancyGuard: reentrant call\\\";\\nuint256 constant NOT_ENTERED = 1;\\nuint256 constant ENTERED = 2;\\n\\n// Revert Reasons: Protocol initialization related\\nstring constant ALREADY_INITIALIZED = \\\"Already initialized\\\";\\nstring constant PROTOCOL_INITIALIZATION_FAILED = \\\"Protocol initialization failed\\\";\\nstring constant VERSION_MUST_BE_SET = \\\"Version cannot be empty\\\";\\nstring constant ADDRESSES_AND_CALLDATA_LENGTH_MISMATCH = \\\"Addresses and calldata must be same length\\\";\\nstring constant WRONG_CURRENT_VERSION = \\\"Wrong current protocol version\\\";\\nstring constant DIRECT_INITIALIZATION_NOT_ALLOWED = \\\"Direct initializtion is not allowed\\\";\\nstring constant TWINS_ALREADY_EXIST = \\\"Should not have any twins yet\\\";\\n\\n// Revert Reasons: Access related\\nstring constant ACCESS_DENIED = \\\"Access denied, caller doesn't have role\\\";\\nstring constant NOT_ASSISTANT = \\\"Not seller's assistant\\\";\\nstring constant NOT_ADMIN = \\\"Not admin\\\";\\nstring constant CLERK_DEPRECATED = \\\"Clerk is deprecated and must be set to address 0\\\";\\nstring constant NOT_ADMIN_AND_ASSISTANT = \\\"Not admin and assistant\\\";\\nstring constant NOT_BUYER_OR_SELLER = \\\"Not buyer or seller\\\";\\nstring constant NOT_VOUCHER_HOLDER = \\\"Not current voucher holder\\\";\\nstring constant NOT_BUYER_WALLET = \\\"Not buyer's wallet address\\\";\\nstring constant NOT_AGENT_WALLET = \\\"Not agent's wallet address\\\";\\nstring constant NOT_DISPUTE_RESOLVER_ASSISTANT = \\\"Not dispute resolver's assistant address\\\";\\n\\n// Revert Reasons: Account-related\\nstring constant NO_SUCH_SELLER = \\\"No such seller\\\";\\nstring constant MUST_BE_ACTIVE = \\\"Account must be active\\\";\\nstring constant SELLER_ADDRESS_MUST_BE_UNIQUE = \\\"Seller address cannot be assigned to another seller Id\\\";\\nstring constant BUYER_ADDRESS_MUST_BE_UNIQUE = \\\"Buyer address cannot be assigned to another buyer Id\\\";\\nstring constant DISPUTE_RESOLVER_ADDRESS_MUST_BE_UNIQUE = \\\"Dispute resolver address cannot be assigned to another dispute resolver Id\\\";\\nstring constant AGENT_ADDRESS_MUST_BE_UNIQUE = \\\"Agent address cannot be assigned to another agent Id\\\";\\nstring constant NO_SUCH_BUYER = \\\"No such buyer\\\";\\nstring constant NO_SUCH_AGENT = \\\"No such agent\\\";\\nstring constant WALLET_OWNS_VOUCHERS = \\\"Wallet address owns vouchers\\\";\\nstring constant NO_SUCH_DISPUTE_RESOLVER = \\\"No such dispute resolver\\\";\\nstring constant INVALID_ESCALATION_PERIOD = \\\"Invalid escalation period\\\";\\nstring constant INEXISTENT_DISPUTE_RESOLVER_FEES = \\\"Dispute resolver fees are not present\\\";\\nstring constant DUPLICATE_DISPUTE_RESOLVER_FEES = \\\"Duplicate dispute resolver fee\\\";\\nstring constant FEE_AMOUNT_NOT_YET_SUPPORTED = \\\"Non-zero dispute resolver fees not yet supported\\\";\\nstring constant DISPUTE_RESOLVER_FEE_NOT_FOUND = \\\"Dispute resolver fee not found\\\";\\nstring constant SELLER_ALREADY_APPROVED = \\\"Seller id is approved already\\\";\\nstring constant SELLER_NOT_APPROVED = \\\"Seller id is not approved\\\";\\nstring constant INEXISTENT_ALLOWED_SELLERS_LIST = \\\"Allowed sellers are not present\\\";\\nstring constant INVALID_AUTH_TOKEN_TYPE = \\\"Invalid AuthTokenType\\\";\\nstring constant ADMIN_OR_AUTH_TOKEN = \\\"An admin address or an auth token is required\\\";\\nstring constant AUTH_TOKEN_MUST_BE_UNIQUE = \\\"Auth token cannot be assigned to another entity of the same type\\\";\\nstring constant INVALID_AGENT_FEE_PERCENTAGE = \\\"Sum of agent fee percentage and protocol fee percentage should be <= max fee percentage limit\\\";\\nstring constant NO_PENDING_UPDATE_FOR_ACCOUNT = \\\"No pending updates for the given account\\\";\\nstring constant UNAUTHORIZED_CALLER_UPDATE = \\\"Caller has no permission to approve this update\\\";\\nstring constant NO_UPDATE_APPLIED = \\\"No update applied or requested approval\\\";\\nstring constant CLONE_CREATION_FAILED = \\\"Clone creation failed\\\";\\nstring constant SELLER_SALT_NOT_UNIQUE = \\\"Seller salt not unique\\\";\\n\\n// Revert Reasons: Offer related\\nstring constant NO_SUCH_OFFER = \\\"No such offer\\\";\\nstring constant OFFER_PERIOD_INVALID = \\\"Offer period invalid\\\";\\nstring constant OFFER_PENALTY_INVALID = \\\"Offer penalty invalid\\\";\\nstring constant OFFER_MUST_BE_ACTIVE = \\\"Offer must be active\\\";\\nstring constant OFFER_MUST_BE_UNIQUE = \\\"Offer must be unique to a group\\\";\\nstring constant OFFER_HAS_BEEN_VOIDED = \\\"Offer has been voided\\\";\\nstring constant OFFER_HAS_EXPIRED = \\\"Offer has expired\\\";\\nstring constant OFFER_NOT_AVAILABLE = \\\"Offer is not yet available\\\";\\nstring constant OFFER_SOLD_OUT = \\\"Offer has sold out\\\";\\nstring constant CANNOT_COMMIT = \\\"Caller cannot commit\\\";\\nstring constant EXCHANGE_FOR_OFFER_EXISTS = \\\"Exchange for offer exists\\\";\\nstring constant AMBIGUOUS_VOUCHER_EXPIRY = \\\"Exactly one of voucherRedeemableUntil and voucherValid must be non zero\\\";\\nstring constant REDEMPTION_PERIOD_INVALID = \\\"Redemption period invalid\\\";\\nstring constant INVALID_DISPUTE_PERIOD = \\\"Invalid dispute period\\\";\\nstring constant INVALID_RESOLUTION_PERIOD = \\\"Invalid resolution period\\\";\\nstring constant INVALID_DISPUTE_RESOLVER = \\\"Invalid dispute resolver\\\";\\nstring constant INVALID_QUANTITY_AVAILABLE = \\\"Invalid quantity available\\\";\\nstring constant DR_UNSUPPORTED_FEE = \\\"Dispute resolver does not accept this token\\\";\\nstring constant AGENT_FEE_AMOUNT_TOO_HIGH = \\\"Sum of agent fee amount and protocol fee amount should be <= offer fee limit\\\";\\nstring constant NO_SUCH_COLLECTION = \\\"No such collection\\\";\\n\\n// Revert Reasons: Group related\\nstring constant NO_SUCH_GROUP = \\\"No such group\\\";\\nstring constant OFFER_NOT_IN_GROUP = \\\"Offer not part of the group\\\";\\nstring constant NOTHING_UPDATED = \\\"Nothing updated\\\";\\nstring constant INVALID_CONDITION_PARAMETERS = \\\"Invalid condition parameters\\\";\\nstring constant GROUP_HAS_NO_CONDITION = \\\"Offer belongs to a group without a condition. Use commitToOffer instead\\\";\\nstring constant GROUP_HAS_CONDITION = \\\"Offer belongs to a group with a condition. Use commitToConditionalOffer instead\\\";\\nstring constant MAX_COMMITS_REACHED = \\\"Max commits reached\\\";\\nstring constant TOKEN_ID_NOT_IN_CONDITION_RANGE = \\\"Token id not in condition range\\\";\\nstring constant INVALID_TOKEN_ID = \\\"ERC721 and ERC20 require zero tokenId\\\";\\n\\n// Revert Reasons: Exchange related\\nstring constant NO_SUCH_EXCHANGE = \\\"No such exchange\\\";\\nstring constant DISPUTE_PERIOD_NOT_ELAPSED = \\\"Dispute period has not yet elapsed\\\";\\nstring constant VOUCHER_NOT_REDEEMABLE = \\\"Voucher not yet valid or already expired\\\";\\nstring constant VOUCHER_EXTENSION_NOT_VALID = \\\"Proposed date is not later than the current one\\\";\\nstring constant VOUCHER_STILL_VALID = \\\"Voucher still valid\\\";\\nstring constant VOUCHER_HAS_EXPIRED = \\\"Voucher has expired\\\";\\nstring constant EXCHANGE_IS_NOT_IN_A_FINAL_STATE = \\\"Exchange is not in a final state\\\";\\nstring constant EXCHANGE_ALREADY_EXISTS = \\\"Exchange already exists\\\";\\nstring constant INVALID_RANGE_LENGTH = \\\"Range length is too large or zero\\\";\\n\\n// Revert Reasons: Twin related\\nuint256 constant SINGLE_TWIN_RESERVED_GAS = 160000;\\nuint256 constant MINIMAL_RESIDUAL_GAS = 230000;\\nstring constant NO_SUCH_TWIN = \\\"No such twin\\\";\\nstring constant NO_TRANSFER_APPROVED = \\\"No transfer approved\\\";\\nstring constant TWIN_TRANSFER_FAILED = \\\"Twin could not be transferred\\\";\\nstring constant UNSUPPORTED_TOKEN = \\\"Unsupported token\\\";\\nstring constant BUNDLE_FOR_TWIN_EXISTS = \\\"Bundle for twin exists\\\";\\nstring constant INVALID_SUPPLY_AVAILABLE = \\\"supplyAvailable can't be zero\\\";\\nstring constant INVALID_AMOUNT = \\\"Invalid twin amount\\\";\\nstring constant INVALID_TWIN_PROPERTY = \\\"Invalid property for selected token type\\\";\\nstring constant INVALID_TWIN_TOKEN_RANGE = \\\"Token range is already being used in another twin\\\";\\nstring constant INVALID_TOKEN_ADDRESS = \\\"Token address is a contract that doesn't implement the interface for selected token type\\\";\\n\\n// Revert Reasons: Bundle related\\nstring constant NO_SUCH_BUNDLE = \\\"No such bundle\\\";\\nstring constant TWIN_NOT_IN_BUNDLE = \\\"Twin not part of the bundle\\\";\\nstring constant OFFER_NOT_IN_BUNDLE = \\\"Offer not part of the bundle\\\";\\nstring constant BUNDLE_OFFER_MUST_BE_UNIQUE = \\\"Offer must be unique to a bundle\\\";\\nstring constant BUNDLE_TWIN_MUST_BE_UNIQUE = \\\"Twin must be unique to a bundle\\\";\\nstring constant EXCHANGE_FOR_BUNDLED_OFFERS_EXISTS = \\\"Exchange for the bundled offers exists\\\";\\nstring constant INSUFFICIENT_TWIN_SUPPLY_TO_COVER_BUNDLE_OFFERS = \\\"Insufficient twin supplyAvailable to cover total quantity of bundle offers\\\";\\nstring constant BUNDLE_REQUIRES_AT_LEAST_ONE_TWIN_AND_ONE_OFFER = \\\"Bundle must have at least one twin and one offer\\\";\\n\\n// Revert Reasons: Funds related\\nstring constant NATIVE_WRONG_ADDRESS = \\\"Native token address must be 0\\\";\\nstring constant NATIVE_WRONG_AMOUNT = \\\"Transferred value must match amount\\\";\\nstring constant TOKEN_NAME_UNSPECIFIED = \\\"Token name unavailable\\\";\\nstring constant NATIVE_CURRENCY = \\\"Native currency\\\";\\nstring constant TOKEN_AMOUNT_MISMATCH = \\\"Number of amounts should match number of tokens\\\";\\nstring constant NOTHING_TO_WITHDRAW = \\\"Nothing to withdraw\\\";\\nstring constant NOT_AUTHORIZED = \\\"Not authorized to withdraw\\\";\\nstring constant TOKEN_TRANSFER_FAILED = \\\"Token transfer failed\\\";\\nstring constant INSUFFICIENT_VALUE_RECEIVED = \\\"Insufficient value received\\\";\\nstring constant INSUFFICIENT_AVAILABLE_FUNDS = \\\"Insufficient available funds\\\";\\nstring constant NATIVE_NOT_ALLOWED = \\\"Transfer of native currency not allowed\\\";\\n\\n// Revert Reasons: Meta-Transactions related\\nstring constant NONCE_USED_ALREADY = \\\"Nonce used already\\\";\\nstring constant FUNCTION_CALL_NOT_SUCCESSFUL = \\\"Function call not successful\\\";\\nstring constant SIGNER_AND_SIGNATURE_DO_NOT_MATCH = \\\"Signer and signature do not match\\\";\\nstring constant INVALID_FUNCTION_NAME = \\\"Invalid function name\\\";\\nstring constant INVALID_SIGNATURE = \\\"Invalid signature\\\";\\nstring constant FUNCTION_NOT_ALLOWLISTED = \\\"Function can not be executed via meta transaction\\\";\\n\\n// Revert Reasons: Dispute related\\nstring constant DISPUTE_PERIOD_HAS_ELAPSED = \\\"Dispute period has already elapsed\\\";\\nstring constant DISPUTE_HAS_EXPIRED = \\\"Dispute has expired\\\";\\nstring constant INVALID_BUYER_PERCENT = \\\"Invalid buyer percent\\\";\\nstring constant DISPUTE_STILL_VALID = \\\"Dispute still valid\\\";\\nstring constant INVALID_DISPUTE_TIMEOUT = \\\"Invalid dispute timeout\\\";\\nstring constant ESCALATION_NOT_ALLOWED = \\\"Disputes without dispute resolver cannot be escalated\\\";\\n\\n// Revert Reasons: Config related\\nstring constant FEE_PERCENTAGE_INVALID = \\\"Percentage representation must be less than 10000\\\";\\nstring constant VALUE_ZERO_NOT_ALLOWED = \\\"Value must be greater than 0\\\";\\nbytes32 constant VOUCHER_PROXY_SALT = keccak256(abi.encodePacked(\\\"BosonVoucherProxy\\\"));\\n\\n// EIP712Lib\\nstring constant PROTOCOL_NAME = \\\"Boson Protocol\\\";\\nstring constant PROTOCOL_VERSION = \\\"V2\\\";\\nbytes32 constant EIP712_DOMAIN_TYPEHASH = keccak256(\\n    bytes(\\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\")\\n);\\n\\n// BosonVoucher\\nstring constant VOUCHER_NAME = \\\"Boson Voucher (rNFT)\\\";\\nstring constant VOUCHER_SYMBOL = \\\"BOSON_VOUCHER_RNFT\\\";\\nstring constant EXCHANGE_ID_IN_RESERVED_RANGE = \\\"Exchange id falls within a pre-minted offer's range\\\";\\nstring constant NO_RESERVED_RANGE_FOR_OFFER = \\\"Offer id not associated with a reserved range\\\";\\nstring constant OFFER_RANGE_ALREADY_RESERVED = \\\"Offer id already associated with a reserved range\\\";\\nstring constant INVALID_RANGE_START = \\\"Range start too low\\\";\\nstring constant INVALID_AMOUNT_TO_MINT = \\\"Amount to mint is greater than remaining un-minted in range\\\";\\nstring constant NO_SILENT_MINT_ALLOWED = \\\"Only owner's mappings can be updated without event\\\";\\nstring constant OFFER_EXPIRED_OR_VOIDED = \\\"Offer expired or voided\\\";\\nstring constant OFFER_STILL_VALID = \\\"Offer still valid\\\";\\nstring constant AMOUNT_EXCEEDS_RANGE_OR_NOTHING_TO_BURN = \\\"Amount exceeds the range or there is nothing to burn\\\";\\nstring constant OWNABLE_ZERO_ADDRESS = \\\"Ownable: new owner is the zero address\\\";\\nstring constant ROYALTY_FEE_INVALID = \\\"ERC2981: royalty fee exceeds protocol limit\\\";\\nstring constant NOT_COMMITTABLE = \\\"Token not committable\\\";\\nstring constant INVALID_TO_ADDRESS = \\\"Tokens can only be pre-mined to the contract or contract owner address\\\";\\nstring constant EXTERNAL_CALL_FAILED = \\\"External call failed\\\";\\nstring constant ERC721_INVALID_TOKEN_ID = \\\"ERC721: invalid token ID\\\";\\nstring constant INTERACTION_NOT_ALLOWED = \\\"Interaction not allowed\\\";\\n\\n// Meta Transactions - Structs\\nbytes32 constant META_TRANSACTION_TYPEHASH = keccak256(\\n    bytes(\\n        \\\"MetaTransaction(uint256 nonce,address from,address contractAddress,string functionName,bytes functionSignature)\\\"\\n    )\\n);\\nbytes32 constant OFFER_DETAILS_TYPEHASH = keccak256(\\\"MetaTxOfferDetails(address buyer,uint256 offerId)\\\");\\nbytes32 constant META_TX_COMMIT_TO_OFFER_TYPEHASH = keccak256(\\n    \\\"MetaTxCommitToOffer(uint256 nonce,address from,address contractAddress,string functionName,MetaTxOfferDetails offerDetails)MetaTxOfferDetails(address buyer,uint256 offerId)\\\"\\n);\\nbytes32 constant CONDITIONAL_OFFER_DETAILS_TYPEHASH = keccak256(\\n    \\\"MetaTxConditionalOfferDetails(address buyer,uint256 offerId,uint256 tokenId)\\\"\\n);\\nbytes32 constant META_TX_COMMIT_TO_CONDITIONAL_OFFER_TYPEHASH = keccak256(\\n    \\\"MetaTxCommitToConditionalOffer(uint256 nonce,address from,address contractAddress,string functionName,MetaTxConditionalOfferDetails offerDetails)MetaTxConditionalOfferDetails(address buyer,uint256 offerId,uint256 tokenId)\\\"\\n);\\nbytes32 constant EXCHANGE_DETAILS_TYPEHASH = keccak256(\\\"MetaTxExchangeDetails(uint256 exchangeId)\\\");\\nbytes32 constant META_TX_EXCHANGE_TYPEHASH = keccak256(\\n    \\\"MetaTxExchange(uint256 nonce,address from,address contractAddress,string functionName,MetaTxExchangeDetails exchangeDetails)MetaTxExchangeDetails(uint256 exchangeId)\\\"\\n);\\nbytes32 constant FUND_DETAILS_TYPEHASH = keccak256(\\n    \\\"MetaTxFundDetails(uint256 entityId,address[] tokenList,uint256[] tokenAmounts)\\\"\\n);\\nbytes32 constant META_TX_FUNDS_TYPEHASH = keccak256(\\n    \\\"MetaTxFund(uint256 nonce,address from,address contractAddress,string functionName,MetaTxFundDetails fundDetails)MetaTxFundDetails(uint256 entityId,address[] tokenList,uint256[] tokenAmounts)\\\"\\n);\\nbytes32 constant DISPUTE_RESOLUTION_DETAILS_TYPEHASH = keccak256(\\n    \\\"MetaTxDisputeResolutionDetails(uint256 exchangeId,uint256 buyerPercentBasisPoints,bytes32 sigR,bytes32 sigS,uint8 sigV)\\\"\\n);\\nbytes32 constant META_TX_DISPUTE_RESOLUTIONS_TYPEHASH = keccak256(\\n    \\\"MetaTxDisputeResolution(uint256 nonce,address from,address contractAddress,string functionName,MetaTxDisputeResolutionDetails disputeResolutionDetails)MetaTxDisputeResolutionDetails(uint256 exchangeId,uint256 buyerPercentBasisPoints,bytes32 sigR,bytes32 sigS,uint8 sigV)\\\"\\n);\\n\\n// Function names\\nstring constant COMMIT_TO_OFFER = \\\"commitToOffer(address,uint256)\\\";\\nstring constant COMMIT_TO_CONDITIONAL_OFFER = \\\"commitToConditionalOffer(address,uint256,uint256)\\\";\\nstring constant CANCEL_VOUCHER = \\\"cancelVoucher(uint256)\\\";\\nstring constant REDEEM_VOUCHER = \\\"redeemVoucher(uint256)\\\";\\nstring constant COMPLETE_EXCHANGE = \\\"completeExchange(uint256)\\\";\\nstring constant WITHDRAW_FUNDS = \\\"withdrawFunds(uint256,address[],uint256[])\\\";\\nstring constant RETRACT_DISPUTE = \\\"retractDispute(uint256)\\\";\\nstring constant RAISE_DISPUTE = \\\"raiseDispute(uint256)\\\";\\nstring constant ESCALATE_DISPUTE = \\\"escalateDispute(uint256)\\\";\\nstring constant RESOLVE_DISPUTE = \\\"resolveDispute(uint256,uint256,bytes32,bytes32,uint8)\\\";\\n\"\r\n    },\r\n    \"contracts/domain/BosonTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.21;\\n\\n/**\\n * @title BosonTypes\\n *\\n * @notice Enums and structs used by the Boson Protocol contract ecosystem.\\n */\\n\\ncontract BosonTypes {\\n    enum PausableRegion {\\n        Offers,\\n        Twins,\\n        Bundles,\\n        Groups,\\n        Sellers,\\n        Buyers,\\n        DisputeResolvers,\\n        Agents,\\n        Exchanges,\\n        Disputes,\\n        Funds,\\n        Orchestration,\\n        MetaTransaction\\n    }\\n\\n    enum EvaluationMethod {\\n        None, // None should always be at index 0. Never change this value.\\n        Threshold,\\n        SpecificToken\\n    }\\n\\n    enum GatingType {\\n        PerAddress,\\n        PerTokenId\\n    }\\n\\n    enum ExchangeState {\\n        Committed,\\n        Revoked,\\n        Canceled,\\n        Redeemed,\\n        Completed,\\n        Disputed\\n    }\\n\\n    enum DisputeState {\\n        Resolving,\\n        Retracted,\\n        Resolved,\\n        Escalated,\\n        Decided,\\n        Refused\\n    }\\n\\n    enum TokenType {\\n        FungibleToken,\\n        NonFungibleToken,\\n        MultiToken\\n    } // ERC20, ERC721, ERC1155\\n\\n    enum MetaTxInputType {\\n        Generic,\\n        CommitToOffer,\\n        Exchange,\\n        Funds,\\n        CommitToConditionalOffer,\\n        ResolveDispute\\n    }\\n\\n    enum AuthTokenType {\\n        None,\\n        Custom, // For future use\\n        Lens,\\n        ENS\\n    }\\n\\n    enum SellerUpdateFields {\\n        Admin,\\n        Assistant,\\n        Clerk, // Deprecated.\\n        AuthToken\\n    }\\n\\n    enum DisputeResolverUpdateFields {\\n        Admin,\\n        Assistant,\\n        Clerk // Deprecated.\\n    }\\n\\n    struct AuthToken {\\n        uint256 tokenId;\\n        AuthTokenType tokenType;\\n    }\\n\\n    struct Seller {\\n        uint256 id;\\n        address assistant;\\n        address admin;\\n        address clerk; // Deprecated. Kept for backwards compatibility.\\n        address payable treasury;\\n        bool active;\\n        string metadataUri;\\n    }\\n\\n    struct Buyer {\\n        uint256 id;\\n        address payable wallet;\\n        bool active;\\n    }\\n\\n    struct DisputeResolver {\\n        uint256 id;\\n        uint256 escalationResponsePeriod;\\n        address assistant;\\n        address admin;\\n        address clerk; // Deprecated. Kept for backwards compatibility.\\n        address payable treasury;\\n        string metadataUri;\\n        bool active;\\n    }\\n\\n    struct DisputeResolverFee {\\n        address tokenAddress;\\n        string tokenName;\\n        uint256 feeAmount;\\n    }\\n\\n    struct Agent {\\n        uint256 id;\\n        uint256 feePercentage;\\n        address payable wallet;\\n        bool active;\\n    }\\n\\n    struct DisputeResolutionTerms {\\n        uint256 disputeResolverId;\\n        uint256 escalationResponsePeriod;\\n        uint256 feeAmount;\\n        uint256 buyerEscalationDeposit;\\n    }\\n\\n    struct Offer {\\n        uint256 id;\\n        uint256 sellerId;\\n        uint256 price;\\n        uint256 sellerDeposit;\\n        uint256 buyerCancelPenalty;\\n        uint256 quantityAvailable;\\n        address exchangeToken;\\n        string metadataUri;\\n        string metadataHash;\\n        bool voided;\\n        uint256 collectionIndex;\\n    }\\n\\n    struct OfferDates {\\n        uint256 validFrom;\\n        uint256 validUntil;\\n        uint256 voucherRedeemableFrom;\\n        uint256 voucherRedeemableUntil;\\n    }\\n\\n    struct OfferDurations {\\n        uint256 disputePeriod;\\n        uint256 voucherValid;\\n        uint256 resolutionPeriod;\\n    }\\n\\n    struct Group {\\n        uint256 id;\\n        uint256 sellerId;\\n        uint256[] offerIds;\\n    }\\n\\n    struct Condition {\\n        EvaluationMethod method;\\n        TokenType tokenType;\\n        address tokenAddress;\\n        GatingType gating; // added in v2.3.0. All conditions created before that have a default value of \\\"PerAddress\\\"\\n        uint256 minTokenId;\\n        uint256 threshold;\\n        uint256 maxCommits;\\n        uint256 maxTokenId;\\n    }\\n\\n    struct Exchange {\\n        uint256 id;\\n        uint256 offerId;\\n        uint256 buyerId;\\n        uint256 finalizedDate;\\n        ExchangeState state;\\n    }\\n\\n    struct Voucher {\\n        uint256 committedDate;\\n        uint256 validUntilDate;\\n        uint256 redeemedDate;\\n        bool expired;\\n    }\\n\\n    struct Dispute {\\n        uint256 exchangeId;\\n        uint256 buyerPercent;\\n        DisputeState state;\\n    }\\n\\n    struct DisputeDates {\\n        uint256 disputed;\\n        uint256 escalated;\\n        uint256 finalized;\\n        uint256 timeout;\\n    }\\n\\n    struct Receipt {\\n        uint256 exchangeId;\\n        uint256 offerId;\\n        uint256 buyerId;\\n        uint256 sellerId;\\n        uint256 price;\\n        uint256 sellerDeposit;\\n        uint256 buyerCancelPenalty;\\n        OfferFees offerFees;\\n        uint256 agentId;\\n        address exchangeToken;\\n        uint256 finalizedDate;\\n        Condition condition;\\n        uint256 committedDate;\\n        uint256 redeemedDate;\\n        bool voucherExpired;\\n        uint256 disputeResolverId;\\n        uint256 disputedDate;\\n        uint256 escalatedDate;\\n        DisputeState disputeState;\\n        TwinReceipt[] twinReceipts;\\n    }\\n\\n    struct TokenRange {\\n        uint256 start;\\n        uint256 end;\\n        uint256 twinId;\\n    }\\n\\n    struct Twin {\\n        uint256 id;\\n        uint256 sellerId;\\n        uint256 amount; // ERC1155 / ERC20 (amount to be transferred to each buyer on redemption)\\n        uint256 supplyAvailable; // all\\n        uint256 tokenId; // ERC1155 / ERC721 (must be initialized with the initial pointer position of the ERC721 ids available range)\\n        address tokenAddress; // all\\n        TokenType tokenType;\\n    }\\n\\n    struct TwinReceipt {\\n        uint256 twinId;\\n        uint256 tokenId; // only for ERC721 and ERC1155\\n        uint256 amount; // only for ERC1155 and ERC20\\n        address tokenAddress;\\n        TokenType tokenType;\\n    }\\n\\n    struct Bundle {\\n        uint256 id;\\n        uint256 sellerId;\\n        uint256[] offerIds;\\n        uint256[] twinIds;\\n    }\\n\\n    struct Funds {\\n        address tokenAddress;\\n        string tokenName;\\n        uint256 availableAmount;\\n    }\\n\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        address contractAddress;\\n        string functionName;\\n        bytes functionSignature;\\n    }\\n\\n    struct HashInfo {\\n        bytes32 typeHash;\\n        function(bytes memory) internal pure returns (bytes32) hashFunction;\\n    }\\n\\n    struct OfferFees {\\n        uint256 protocolFee;\\n        uint256 agentFee;\\n    }\\n\\n    struct VoucherInitValues {\\n        string contractURI;\\n        uint256 royaltyPercentage;\\n        bytes32 collectionSalt;\\n    }\\n\\n    struct Collection {\\n        address collectionAddress;\\n        string externalId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AccessController", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}