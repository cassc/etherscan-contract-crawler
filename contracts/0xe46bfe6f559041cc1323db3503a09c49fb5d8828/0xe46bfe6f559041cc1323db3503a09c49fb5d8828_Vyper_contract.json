{"SourceCode": "# @version ^0.3.7\r\n\r\nMAX_DATA: constant(uint256) = 2**13\r\n\r\ninterface RocketStorageInterface:\r\n  def getAddress(_key: bytes32) -> address: view\r\n\r\ninterface RocketDepositPoolInterface:\r\n  def deposit(): payable\r\n\r\ninterface WethInterface:\r\n  def approve(_spender: address, _amount: uint256) -> bool: nonpayable\r\n  def balanceOf(_who: address) -> uint256: view\r\n  def deposit(): payable\r\n  def withdraw(_wad: uint256): nonpayable\r\n\r\ninterface ERC20:\r\n  def approve(_spender: address, _amount: uint256) -> bool: nonpayable\r\n  def balanceOf(_who: address) -> uint256: view\r\n  def transfer(_to: address, _wad: uint256) -> bool: nonpayable\r\n\r\nevent Arbitrage:\r\n  who: indexed(address)\r\n  deposit: indexed(uint256)\r\n  profit: uint256\r\n\r\nDEPOSIT_VALUE: constant(uint256) = 32_000_000_000_000_000_000\r\nrocketStorage: immutable(RocketStorageInterface)\r\nrethToken: immutable(ERC20)\r\nwethToken: immutable(WethInterface)\r\nswapRouter: immutable(address)\r\nowner: public(address)\r\nfunder: public(address)\r\n\r\n@external\r\ndef __init__(rocketStorageAddress: address, swapRouterAddress: address, wethAddress: address):\r\n  self.owner = msg.sender\r\n  rocketStorage = RocketStorageInterface(rocketStorageAddress)\r\n  rethAddress: address = rocketStorage.getAddress(keccak256(\"contract.addressrocketTokenRETH\"))\r\n  rethToken = ERC20(rethAddress)\r\n  wethToken = WethInterface(wethAddress)\r\n  swapRouter = swapRouterAddress\r\n  assert rethToken.approve(swapRouter, max_value(uint256))\r\n\r\n@external\r\ndef setOwner(newOwner: address):\r\n  assert msg.sender == self.owner, \"only owner can set owner\"\r\n  self.owner = newOwner\r\n\r\n@external\r\n@payable\r\ndef __default__():\r\n  assert msg.sender == wethToken.address, \"only WETH can send ETH\"\r\n\r\n@external\r\n@payable\r\ndef fund():\r\n  assert msg.value == DEPOSIT_VALUE, \"incorrect deposit value\"\r\n  assert self.funder == empty(address), \"deposit exists already\"\r\n  self.funder = msg.sender\r\n\r\n@external\r\ndef defund():\r\n\tbal: uint256 = self.balance\r\n\tprev_funder: address = self.funder\r\n\tassert prev_funder != empty(address)\r\n\tassert msg.sender == prev_funder, \"only funder can call\"\r\n\tself.funder = empty(address)\r\n\tsend(prev_funder, bal)\r\n\r\n@external\r\ndef sweep(token:ERC20):\r\n\tassert msg.sender == self.owner\r\n\ttoken.transfer(self.owner, token.balanceOf(self))\r\n\r\n@external\r\ndef arb(ethAmount: uint256, minProfit: uint256, swapData: Bytes[MAX_DATA]):\r\n  rocketDepositPool: RocketDepositPoolInterface = RocketDepositPoolInterface(\r\n    rocketStorage.getAddress(keccak256(\"contract.addressrocketDepositPool\")))\r\n\r\n  rocketDepositPool.deposit(value = ethAmount)\r\n  raw_call(swapRouter, swapData)\r\n  assert rethToken.balanceOf(self) == 0, \"rETH left over after swap\"\r\n  total: uint256 = wethToken.balanceOf(self)\r\n  assert total >= ethAmount, \"not enough to cover lent amount\"\r\n  profit: uint256 = total - ethAmount\r\n  assert profit >= minProfit, \"not enough profit\"\r\n  wethToken.withdraw(total)\r\n  send(msg.sender, profit)\r\n  log Arbitrage(msg.sender, ethAmount, profit)", "ABI": "[{\"name\":\"Arbitrage\",\"inputs\":[{\"name\":\"who\",\"type\":\"address\",\"indexed\":true},{\"name\":\"deposit\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"profit\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"rocketStorageAddress\",\"type\":\"address\"},{\"name\":\"swapRouterAddress\",\"type\":\"address\"},{\"name\":\"wethAddress\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setOwner\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"fund\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"defund\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"sweep\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"arb\",\"inputs\":[{\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"name\":\"minProfit\",\"type\":\"uint256\"},{\"name\":\"swapData\",\"type\":\"bytes\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"funder\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.3.7", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "0000000000000000000000001d8f8f00cfa6758d7be78336684788fb0ee0fa460000000000000000000000001111111254fb6c44bac0bed2854e76f90643097d000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}