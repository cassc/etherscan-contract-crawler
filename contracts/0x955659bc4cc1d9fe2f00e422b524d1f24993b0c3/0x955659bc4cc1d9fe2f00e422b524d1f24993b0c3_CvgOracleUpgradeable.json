{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\"\r\n    },\r\n    \"contracts/Bond/CvgOracleUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n _____\\r\\n/  __ \\\\\\r\\n| /  \\\\/ ___  _ ____   _____ _ __ __ _  ___ _ __   ___ ___\\r\\n| |    / _ \\\\| '_ \\\\ \\\\ / / _ \\\\ '__/ _` |/ _ \\\\ '_ \\\\ / __/ _ \\\\\\r\\n| \\\\__/\\\\ (_) | | | \\\\ V /  __/ | | (_| |  __/ | | | (_|  __/\\r\\n \\\\____/\\\\___/|_| |_|\\\\_/ \\\\___|_|  \\\\__, |\\\\___|_| |_|\\\\___\\\\___|\\r\\n                                 __/ |\\r\\n                                |___/\\r\\n */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\r\\nimport \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/ICrvPool.sol\\\";\\r\\nimport {IOracleStructV2 as IOracleStruct, AggregatorV3Interface} from \\\"../interfaces/IOracleStructV2.sol\\\";\\r\\n\\r\\nimport \\\"../libs/TickMath.sol\\\";\\r\\n\\r\\n/// @title Cvg-Finance - CvgOracle\\r\\n/// @notice Convergence Oracle\\r\\ncontract CvgOracleUpgradeable is Ownable2StepUpgradeable {\\r\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n    uint256 internal constant ONE_ETH = 10 ** 18;\\r\\n    uint256 internal constant TEN_36 = 10 ** 36;\\r\\n\\r\\n    /// @dev Type of pooltype for price fetching of the address\\r\\n    mapping(address => IOracleStruct.PoolType) public poolTypePerErc20; // erc20 => poolType\\r\\n\\r\\n    /// @dev Parameters of the Stablecoins in the CvgOracle\\r\\n    mapping(address => IOracleStruct.StableParams) public stableParams; // erc20 => stableParams\\r\\n\\r\\n    /// @dev Parameters of assets computed with a Curve Pool 2 assets\\r\\n    mapping(address => IOracleStruct.CurveDuoParams) public curveDuoParams; // erc20 => curveDuoParams\\r\\n\\r\\n    /// @dev Parameters of assets computed with a Curve Pool 3 assets\\r\\n    mapping(address => IOracleStruct.CurveTriParams) public curveTriParams; // erc20 => curveTriParams\\r\\n\\r\\n    /// @dev Parameters of assets computed with a UniswapV3 LP\\r\\n    mapping(address => IOracleStruct.UniV3Params) public univ3Params; // erc20 => univ3Params\\r\\n\\r\\n    /// @dev Parameters of assets computed with a UniswapV2 LP\\r\\n    mapping(address => IOracleStruct.UniV2Params) public univ2Params; // erc20 => univ2Params\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    function initialize() external initializer {\\r\\n        _transferOwnership(msg.sender);\\r\\n    }\\r\\n\\r\\n    /* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=\\r\\n                            EXTERNAL\\r\\n    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-= */\\r\\n\\r\\n    /**\\r\\n     *  @notice - Fetch the price of 1 tokens in $ under 18 decimals\\r\\n     *            OR\\r\\n     *          - Revert if 1 of the conditions is not verified\\r\\n     *  @param _erc20Address address of the token we want to fetch the price of\\r\\n     *  @return price of the token\\r\\n     */\\r\\n    function getPriceVerified(address _erc20Address) public view returns (uint256) {\\r\\n        (\\r\\n            uint256 executionPrice,\\r\\n            ,\\r\\n            bool isInLimit,\\r\\n            bool isEthVerified,\\r\\n            bool isNotStale,\\r\\n            bool isUsdRangeRespected,\\r\\n            bool areStableVerified\\r\\n        ) = getPriceAndValidationData(_erc20Address);\\r\\n\\r\\n        require(isInLimit, \\\"EXECUTION_LIMIT_DEPEG\\\");\\r\\n        require(isEthVerified, \\\"ETH_PRICE_NOT_VERIFIED\\\");\\r\\n        require(isNotStale, \\\"STALE_PRICE\\\");\\r\\n        require(isUsdRangeRespected, \\\"USD_OUT_OF_RANGE\\\");\\r\\n        require(areStableVerified, \\\"STABLE_NOT_VERIFIED\\\");\\r\\n        return executionPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice - Fetch the price of 2 tokens in $ under 18 decimals\\r\\n     *            OR\\r\\n     *          - Revert if 1 of the conditions is not verified\\r\\n     *  @param token0 address of the token we want to fetch the price of\\r\\n     *  @param token1 address of the token we want to fetch the price of\\r\\n     *  @return price of token 0 used for the execution of the order\\r\\n     *  @return price of token 1 used for the execution of the order\\r\\n     */\\r\\n    function getAndVerifyTwoPrices(address token0, address token1) external view returns (uint256, uint256) {\\r\\n        return (getPriceVerified(token0), getPriceVerified(token1));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice Return the execution price of an erc20. Doesn't verify any limits conditions. Used only for view purposes.\\r\\n     *  @param _erc20Address address of the token we want to fetch the price of\\r\\n     *  @return executionPrice price of token 0 used for the execution of the order\\r\\n     */\\r\\n    function getPriceUnverified(address _erc20Address) public view returns (uint256 executionPrice) {\\r\\n        (executionPrice, , , , , , ) = getPriceAndValidationData(_erc20Address);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice Return the price and all boolean representing limits conditions.\\r\\n     *  @param _erc20Address address of the token we want to fetch the price of\\r\\n     *  @return executionPrice Price used for the order execution.\\r\\n     *  @return limitPrice    Price compared to execution price to verify if any liquidity is occuring.\\r\\n     *  @return isInLimit     Validate if the delta between executionPrice & limitPrice is respected.\\r\\n     *  @return isEthVerified Validate that the price of ETH is computed correctly, always true if no ETH is in the price computation path.\\r\\n     *  @return isNotStale    Validate if a price is expired or not.\\r\\n     *  @return isUsdRangeRespected Validate that the price of the asset is in the USD range predefined in the parameters.\\r\\n     *  @return areStableVerified Validate that all stables used to compute the price of _erc20Address are validated.\\r\\n     */\\r\\n    function getPriceAndValidationData(\\r\\n        address _erc20Address\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256 executionPrice,\\r\\n            uint256 limitPrice,\\r\\n            bool isInLimit,\\r\\n            bool isEthVerified,\\r\\n            bool isNotStale,\\r\\n            bool isUsdRangeRespected,\\r\\n            bool areStableVerified\\r\\n        )\\r\\n    {\\r\\n        IOracleStruct.PoolType poolType = poolTypePerErc20[_erc20Address];\\r\\n        /// @dev Stable coin 1$\\r\\n        if (poolType == IOracleStruct.PoolType.STABLE) {\\r\\n            (executionPrice, limitPrice, isInLimit, isNotStale, isUsdRangeRespected) = _getStablePriceAndValidationData(\\r\\n                _erc20Address\\r\\n            );\\r\\n            areStableVerified = true;\\r\\n            isEthVerified = true;\\r\\n        }\\r\\n        /// @dev CURVE 2 ASSETS\\r\\n        else if (poolType == IOracleStruct.PoolType.CURVE_DUO) {\\r\\n            (\\r\\n                executionPrice,\\r\\n                limitPrice,\\r\\n                isInLimit,\\r\\n                isEthVerified,\\r\\n                isNotStale,\\r\\n                isUsdRangeRespected,\\r\\n                areStableVerified\\r\\n            ) = _getCurveDuoPriceAndValidationData(_erc20Address);\\r\\n        }\\r\\n        /// @dev CURVE 3 ASSETS\\r\\n        else if (poolType == IOracleStruct.PoolType.CURVE_TRI) {\\r\\n            (\\r\\n                executionPrice,\\r\\n                limitPrice,\\r\\n                isInLimit,\\r\\n                isEthVerified,\\r\\n                isNotStale,\\r\\n                isUsdRangeRespected,\\r\\n                areStableVerified\\r\\n            ) = _getCurveTriPriceAndValidationData(_erc20Address);\\r\\n        }\\r\\n        /// @dev UNI V3\\r\\n        else if (poolType == IOracleStruct.PoolType.UNI_V3) {\\r\\n            (\\r\\n                executionPrice,\\r\\n                limitPrice,\\r\\n                isInLimit,\\r\\n                isEthVerified,\\r\\n                isNotStale,\\r\\n                isUsdRangeRespected,\\r\\n                areStableVerified\\r\\n            ) = _getUniV3PriceAndValidationData(_erc20Address);\\r\\n        }\\r\\n        /// @dev UNI V2\\r\\n        else if (poolType == IOracleStruct.PoolType.UNI_V2) {\\r\\n            (\\r\\n                executionPrice,\\r\\n                limitPrice,\\r\\n                isInLimit,\\r\\n                isEthVerified,\\r\\n                isNotStale,\\r\\n                isUsdRangeRespected,\\r\\n                areStableVerified\\r\\n            ) = _getUniV2PriceAndValidationData(_erc20Address);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns 1$, the Chainlink Aggregator price & all booleans validating the price of the stable.\\r\\n     *  @param _erc20Address address of the token we want to fetch the price of\\r\\n     *  @return executionPrice Always return 1$ under 18 decimals.\\r\\n     *  @return limitPrice     Price in $ of the stable returned by Chainlink, under 18 decimals.\\r\\n     *  @return isInLimit      Validate if the delta between 1$ & the Chainlink aggregator is in range.\\r\\n     *  @return isNotStale     Validate if the price returned by Chainlink is not stale.\\r\\n     *  @return isUsdRangeRespected Validate that the price of the stable is in the USD range predefined in the parameters.\\r\\n     */\\r\\n    function _getStablePriceAndValidationData(\\r\\n        address _erc20Address\\r\\n    ) internal view returns (uint256, uint256, bool, bool, bool) {\\r\\n        IOracleStruct.StableParams memory _stableParams = stableParams[_erc20Address];\\r\\n\\r\\n        /// @dev Delta that has to be respected between 1$ and the Chainlink price.\\r\\n        uint256 delta = (uint256(_stableParams.deltaLimitOracle) * ONE_ETH) / 10_000;\\r\\n        /// @dev Get the price and the last update on the corresponding Chainlink Oracle.\\r\\n        (uint256 limitPrice, uint256 lastUpdateDate) = _getAggregatorPrice(_stableParams.aggregatorOracle);\\r\\n\\r\\n        return (\\r\\n            ONE_ETH,\\r\\n            limitPrice,\\r\\n            ONE_ETH + delta > limitPrice && ONE_ETH - delta < limitPrice,\\r\\n            lastUpdateDate + _stableParams.maxLastUpdate > block.timestamp,\\r\\n            ONE_ETH > _stableParams.minPrice && ONE_ETH < _stableParams.maxPrice\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @dev Convert the raw price under 18 decimals into the price in $ of the asset under 18 decimals.\\r\\n     *  @param executionPrice Raw price returned by the pool price fetching.\\r\\n     *  @param isReversed     Determines if we need or not to reverse the price.\\r\\n     *  @param isEthRelated   Determines if we need or not to multiply the raw price by the eth price in case of price fetching involving the ETH.\\r\\n     *  @return Modified price in $ of the asset under 18 decimals.\\r\\n     *  @return Validate if the price fetching of the ETH is validated or not.\\r\\n     */\\r\\n    function _convertToDollar(\\r\\n        uint256 executionPrice,\\r\\n        bool isReversed,\\r\\n        bool isEthRelated\\r\\n    ) internal view returns (uint256, bool) {\\r\\n        bool isEthVerified = true;\\r\\n\\r\\n        if (isReversed) {\\r\\n            executionPrice = TEN_36 / executionPrice;\\r\\n        }\\r\\n        if (isEthRelated) {\\r\\n            (\\r\\n                uint256 ethPrice,\\r\\n                ,\\r\\n                bool isInLimits,\\r\\n                ,\\r\\n                bool isNotStale,\\r\\n                bool isUsdRangeRespected,\\r\\n                bool areStableVerified\\r\\n            ) = getPriceAndValidationData(WETH);\\r\\n            isEthVerified = isInLimits && isNotStale && isUsdRangeRespected && areStableVerified;\\r\\n            executionPrice = (executionPrice * ethPrice) / ONE_ETH;\\r\\n        }\\r\\n        return (executionPrice, isEthVerified);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the executionPrice, the last_price & all booleans validating the price of the asset in a Curve Duo Pool.\\r\\n     *  @param _erc20Address address of the token we want to fetch the price of\\r\\n     *  @return executionPrice Price in dollar of the erc20, under 18 decimals, computed from the price_oracle.\\r\\n     *  @return limitPrice     Raw last_price returned by Curve LP.\\r\\n     *  @return isInLimit      Validate if the delta between the last_price & the price_oracle is in range.\\r\\n     *  @return isNotStale     Validate if the last swap timestamp in the LP is not too old.\\r\\n     *  @return isUsdRangeRespected Validate that the price of the asset is in the USD range predefined in the parameters.\\r\\n     */\\r\\n    function _getCurveDuoPriceAndValidationData(\\r\\n        address _erc20Address\\r\\n    ) internal view returns (uint256, uint256, bool, bool, bool, bool, bool) {\\r\\n        IOracleStruct.CurveDuoParams memory _curveDuoParams = curveDuoParams[_erc20Address];\\r\\n        ICrvPool poolAddress = ICrvPool(_curveDuoParams.poolAddress);\\r\\n        uint256 executionPrice = poolAddress.price_oracle();\\r\\n        /// @dev limit dollar is maybe not in dollar  (is reversed or eth related), but we can keep it like this for the comparaison with price_oracle\\r\\n        uint256 limitPrice = poolAddress.last_prices();\\r\\n\\r\\n        (uint256 usdExecutionPrice, bool isEthVerified) = _convertToDollar(\\r\\n            executionPrice,\\r\\n            _curveDuoParams.isReversed,\\r\\n            _curveDuoParams.isEthPriceRelated\\r\\n        );\\r\\n\\r\\n        uint256 delta = (_curveDuoParams.deltaLimitOracle * executionPrice) / 10_000;\\r\\n\\r\\n        uint256 last_timestamp = _curveDuoParams.isNg\\r\\n            ? poolAddress.last_timestamp() & (2 ** 128 - 1)\\r\\n            : poolAddress.last_prices_timestamp();\\r\\n\\r\\n        return (\\r\\n            usdExecutionPrice,\\r\\n            limitPrice,\\r\\n            executionPrice + delta > limitPrice && executionPrice - delta < limitPrice,\\r\\n            isEthVerified,\\r\\n            last_timestamp + _curveDuoParams.maxLastUpdate > block.timestamp,\\r\\n            usdExecutionPrice > _curveDuoParams.minPrice && usdExecutionPrice < _curveDuoParams.maxPrice,\\r\\n            _verifyStableInPath(_curveDuoParams.stablesToCheck)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the executionPrice, the last_price & all booleans validating the price of the asset in a Curve Tri Pool.\\r\\n     *  @param _erc20Address address of the token we want to fetch the price of\\r\\n     *  @return executionPrice Price in dollar of the erc20, under 18 decimals, computed from the price_oracle.\\r\\n     *  @return limitPrice     Raw last_price returned by Curve LP.\\r\\n     *  @return isInLimit      Validate if the delta between the last_price & the price_oracle is in range.\\r\\n     *  @return isNotStale     Validate if the last swap timestamp in the LP is not too old.\\r\\n     *  @return isUsdRangeRespected Validate that the price of the asset is in the USD range predefined in the parameters.\\r\\n     */\\r\\n    function _getCurveTriPriceAndValidationData(\\r\\n        address _erc20Address\\r\\n    ) internal view returns (uint256, uint256, bool, bool, bool, bool, bool) {\\r\\n        IOracleStruct.CurveTriParams memory _curveTriParams = curveTriParams[_erc20Address];\\r\\n        ITriCrvPool poolAddress = ITriCrvPool(_curveTriParams.poolAddress);\\r\\n\\r\\n        uint256 executionPrice = poolAddress.price_oracle(_curveTriParams.k);\\r\\n        /// @dev limit dollar is maybe not in dollar (is reversed or eth related), but we can keep it like this for the comparaison with price_oracle\\r\\n        uint256 limitPrice = poolAddress.last_prices(_curveTriParams.k);\\r\\n\\r\\n        (uint256 usdExecutionPrice, bool isEthVerified) = _convertToDollar(\\r\\n            executionPrice,\\r\\n            _curveTriParams.isReversed,\\r\\n            _curveTriParams.isEthPriceRelated\\r\\n        );\\r\\n\\r\\n        uint256 delta = (_curveTriParams.deltaLimitOracle * executionPrice) / 10_000;\\r\\n\\r\\n        return (\\r\\n            usdExecutionPrice,\\r\\n            limitPrice,\\r\\n            executionPrice + delta > limitPrice && executionPrice - delta < limitPrice,\\r\\n            isEthVerified,\\r\\n            poolAddress.last_prices_timestamp() + _curveTriParams.maxLastUpdate > block.timestamp,\\r\\n            usdExecutionPrice > _curveTriParams.minPrice && usdExecutionPrice < _curveTriParams.maxPrice,\\r\\n            _verifyStableInPath(_curveTriParams.stablesToCheck)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the executionPrice, the Chainlink Aggregator price & all booleans validating the price of the asset in a UniswapV3 LP.\\r\\n     *  @param _erc20Address address of the token we want to fetch the price of\\r\\n     *  @return executionPrice Price in dollar of the erc20, under 18 decimals.\\r\\n     *  @return limitPrice     Price in dollar returned by the Chainlink Aggregator.\\r\\n     *  @return isInLimit      Validate if the delta between the exectutionPrice & the limitPrice is in range.\\r\\n     *  @return isNotStale     Validate if the last Chainlink update is not too old.\\r\\n     *  @return isUsdRangeRespected Validate that the price of the asset is in the USD range predefined in the parameters.\\r\\n     */\\r\\n    function _getUniV3PriceAndValidationData(\\r\\n        address _erc20Address\\r\\n    ) internal view returns (uint256, uint256, bool, bool, bool, bool, bool) {\\r\\n        IOracleStruct.UniV3Params memory _univ3Params = univ3Params[_erc20Address];\\r\\n        IUniswapV3Pool uniswapV3Pool = IUniswapV3Pool(_univ3Params.poolAddress);\\r\\n\\r\\n        uint256 executionPrice;\\r\\n\\r\\n        (uint256 limitPrice, uint256 lastUpdateDate) = _getAggregatorPrice(_univ3Params.aggregatorOracle);\\r\\n        if (_univ3Params.twap == 0) {\\r\\n            // return the current price if twapOrK == 0\\r\\n            (executionPrice, , , , , , ) = uniswapV3Pool.slot0();\\r\\n        } else {\\r\\n            uint32[] memory secondsAgos = new uint32[](2);\\r\\n            secondsAgos[0] = _univ3Params.twap; // from (before)\\r\\n            secondsAgos[1] = 0; // to (now)\\r\\n\\r\\n            (int56[] memory tickCumulatives, ) = uniswapV3Pool.observe(secondsAgos);\\r\\n\\r\\n            // tick(imprecise as it's an integer) to price\\r\\n            executionPrice = TickMath.getSqrtRatioAtTick(\\r\\n                int24((tickCumulatives[1] - tickCumulatives[0]) / int56(int16(_univ3Params.twap)))\\r\\n            );\\r\\n        }\\r\\n        uint256 usdExecutionPrice;\\r\\n        bool isEthVerified;\\r\\n\\r\\n        {\\r\\n            uint256 token0Decimals = IERC20Metadata(uniswapV3Pool.token0()).decimals();\\r\\n            uint256 token1Decimals = IERC20Metadata(uniswapV3Pool.token1()).decimals();\\r\\n\\r\\n            (usdExecutionPrice, isEthVerified) = _convertToDollar(\\r\\n                (((executionPrice * executionPrice) / FixedPoint96.Q96) *\\r\\n                    10 **\\r\\n                        (\\r\\n                            token0Decimals <= token1Decimals\\r\\n                                ? 18 - (token1Decimals - token0Decimals)\\r\\n                                : 18 + (token0Decimals - token1Decimals)\\r\\n                        )) / FixedPoint96.Q96,\\r\\n                _univ3Params.isReversed,\\r\\n                _univ3Params.isEthPriceRelated\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 delta = (_univ3Params.deltaLimitOracle * limitPrice) / 10_000;\\r\\n        return (\\r\\n            usdExecutionPrice,\\r\\n            limitPrice,\\r\\n            limitPrice + delta > usdExecutionPrice && limitPrice - delta < usdExecutionPrice,\\r\\n            isEthVerified,\\r\\n            lastUpdateDate + _univ3Params.maxLastUpdate > block.timestamp,\\r\\n            usdExecutionPrice > _univ3Params.minPrice && usdExecutionPrice < _univ3Params.maxPrice,\\r\\n            _verifyStableInPath(_univ3Params.stablesToCheck)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the executionPrice, the Chainlink Aggregator price & all booleans validating the price of the asset in a UniswapV2 LP.\\r\\n     *  @param _erc20Address address of the token we want to fetch the price of\\r\\n     *  @return executionPrice Price in dollar of the erc20, under 18 decimals.\\r\\n     *  @return limitPrice     Price in dollar returned by the Chainlink Aggregator.\\r\\n     *  @return isInLimit      Validate if the delta between the exectutionPrice & the limitPrice is in range.\\r\\n     *  @return isNotStale     Validate if the last Chainlink update is not too old.\\r\\n     *  @return isUsdRangeRespected Validate that the price of the asset is in the USD range predefined in the parameters.\\r\\n     */\\r\\n    function _getUniV2PriceAndValidationData(\\r\\n        address _erc20Address\\r\\n    ) internal view returns (uint256, uint256, bool, bool, bool, bool, bool) {\\r\\n        IOracleStruct.UniV2Params memory _univ2Params = univ2Params[_erc20Address];\\r\\n        (uint256 limitPrice, uint256 lastUpdateDate) = _getAggregatorPrice(_univ2Params.aggregatorOracle);\\r\\n        IUniswapV2Pair uniswapPool = IUniswapV2Pair(_univ2Params.poolAddress);\\r\\n        uint256 executionPrice;\\r\\n        {\\r\\n            (uint112 reserve0, uint112 reserve1, ) = uniswapPool.getReserves();\\r\\n\\r\\n            executionPrice =\\r\\n                (reserve0 * 10 ** (36 - IERC20Metadata(uniswapPool.token0()).decimals())) /\\r\\n                (reserve1 * 10 ** (18 - IERC20Metadata(uniswapPool.token1()).decimals()));\\r\\n        }\\r\\n        (uint256 usdExecutionPrice, bool isEthVerified) = _convertToDollar(\\r\\n            executionPrice,\\r\\n            _univ2Params.isReversed,\\r\\n            _univ2Params.isEthPriceRelated\\r\\n        );\\r\\n\\r\\n        uint256 delta = (_univ2Params.deltaLimitOracle * limitPrice) / 10_000;\\r\\n\\r\\n        return (\\r\\n            usdExecutionPrice,\\r\\n            limitPrice,\\r\\n            limitPrice + delta > usdExecutionPrice && limitPrice - delta < usdExecutionPrice,\\r\\n            isEthVerified,\\r\\n            lastUpdateDate + _univ2Params.maxLastUpdate > block.timestamp,\\r\\n            usdExecutionPrice > _univ2Params.minPrice && usdExecutionPrice < _univ2Params.maxPrice,\\r\\n            _verifyStableInPath(_univ2Params.stablesToCheck)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=\\r\\n                            ONLYOWNER\\r\\n    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-= */\\r\\n\\r\\n    /**\\r\\n     *  @notice Set the type of OracleParams to fetch regarding the address of a Token.\\r\\n     *  @param _erc20Address Address of the token to link with an oracle type.\\r\\n     *  @param _poolType PoolType to link to the ERC20.\\r\\n     */\\r\\n    function setPoolTypeForToken(address _erc20Address, IOracleStruct.PoolType _poolType) external onlyOwner {\\r\\n        poolTypePerErc20[_erc20Address] = _poolType;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice Set parameters for a stable coin.\\r\\n     *  @param _erc20Address Address of the stable coin\\r\\n     *  @param _stableParams stableParams used for the stable verification\\r\\n     */\\r\\n    function setStableParams(\\r\\n        address _erc20Address,\\r\\n        IOracleStruct.StableParams calldata _stableParams\\r\\n    ) external onlyOwner {\\r\\n        stableParams[_erc20Address] = _stableParams;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice Set the parameters of a token linked to a DUO LP tokens of Curve.\\r\\n     *  @param _erc20Address Address of the erc20 in the Curve LP.\\r\\n     *  @param _curveDuoParams Parameters of the curve duo pool\\r\\n     */\\r\\n    function setCurveDuoParams(\\r\\n        address _erc20Address,\\r\\n        IOracleStruct.CurveDuoParams calldata _curveDuoParams\\r\\n    ) external onlyOwner {\\r\\n        curveDuoParams[_erc20Address] = _curveDuoParams;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice Set the parameters of a token linked to a Tri LP tokens of Curve.\\r\\n     *  @param _erc20Address Address of the erc20 in the Curve LP.\\r\\n     *  @param _curveTriParams Parameters of the curve tri pool\\r\\n     */\\r\\n    function setCurveTriParams(\\r\\n        address _erc20Address,\\r\\n        IOracleStruct.CurveTriParams calldata _curveTriParams\\r\\n    ) external onlyOwner {\\r\\n        curveTriParams[_erc20Address] = _curveTriParams;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice Set the parameters of a token linked to a Uniswap V3 LP.\\r\\n     *  @param _erc20Address Address of the token we want to fetch the price of\\r\\n     *  @param _uniV3Params Params used for the price fetching on a UniV3 LP\\r\\n     */\\r\\n    function setUniV3Params(address _erc20Address, IOracleStruct.UniV3Params calldata _uniV3Params) external onlyOwner {\\r\\n        univ3Params[_erc20Address] = _uniV3Params;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice Set the parameters of a token linked to a Uniswap V2 LP.\\r\\n     *  @param _erc20Address Address of the token we want to fetch the price of\\r\\n     *  @param _uniV2Params Params used for the price fetching on a UniV2 LP\\r\\n     */\\r\\n    function setUniV2Params(address _erc20Address, IOracleStruct.UniV2Params calldata _uniV2Params) external onlyOwner {\\r\\n        univ2Params[_erc20Address] = _uniV2Params;\\r\\n    }\\r\\n\\r\\n    /* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=\\r\\n                        INTERNAL\\r\\n    =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-= */\\r\\n\\r\\n    /**\\r\\n     *  @notice Verify that stables price are valid and don't exceed allowed delta.\\r\\n     *  @param stables addresses of stable tokens to verify\\r\\n     *  @return state of the verification\\r\\n     */\\r\\n    function _verifyStableInPath(address[] memory stables) internal view returns (bool) {\\r\\n        bool areStablesVerified = true;\\r\\n        for (uint256 i; i < stables.length; ) {\\r\\n            (, , bool isInLimit, bool isNotStale, bool isUsdRangeRespected) = _getStablePriceAndValidationData(\\r\\n                stables[i]\\r\\n            );\\r\\n            areStablesVerified = isInLimit && isNotStale && isUsdRangeRespected;\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        return areStablesVerified;\\r\\n    }\\r\\n\\r\\n    // /* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=\\r\\n    //                 FETCH LIMITS\\r\\n    // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-= */\\r\\n\\r\\n    /**\\r\\n     *  @dev Get the token price from the ChainLink aggregator in dollar and under 18 decimals\\r\\n     *  @return aggregator AggregatorV3Interface\\r\\n     */\\r\\n    function _getAggregatorPrice(AggregatorV3Interface aggregator) internal view returns (uint256, uint256) {\\r\\n        (, int256 chainlinkPrice, , uint256 lastUpdate, ) = aggregator.latestRoundData();\\r\\n        return (uint256(chainlinkPrice) * 10 ** (18 - aggregator.decimals()), lastUpdate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice View function used by the front to get the executionPrice & the validation status of 2 assets involved into a Bond.\\r\\n     *  @param token0 Address of the first erc20\\r\\n     *  @param token1 Address of the second erc20\\r\\n     *  @return usdExecutionPrice0 Execution price in dollar and under 18 decimals of the token0\\r\\n     *  @return limitPrice0        Limit price of the token0\\r\\n     *  @return isToken0Verified   Validates price fetching of the token0\\r\\n     *  @return usdExecutionPrice1 Execution price in dollar and under 18 decimals of the token1\\r\\n     *  @return limitPrice1        Limit price of the token1\\r\\n     *  @return isToken1Verified   Validates price fetching of the token1\\r\\n     */\\r\\n    function getTwoPricesAndIsValid(\\r\\n        address token0,\\r\\n        address token1\\r\\n    ) external view returns (uint256, uint256, bool, uint256, uint256, bool) {\\r\\n        bool isOracleValid0;\\r\\n        bool isOracleValid1;\\r\\n        uint256 executionPrice0;\\r\\n        uint256 executionPrice1;\\r\\n        uint256 limitPrice0;\\r\\n        uint256 limitPrice1;\\r\\n\\r\\n        {\\r\\n            address _token0 = token0;\\r\\n\\r\\n            (\\r\\n                uint256 _executionPrice0,\\r\\n                uint256 _limitPrice0,\\r\\n                bool isInLimit0,\\r\\n                bool isEthVerified0,\\r\\n                bool isNotStale0,\\r\\n                bool isUsdRangeRespected0,\\r\\n                bool areStablesVerified0\\r\\n            ) = getPriceAndValidationData(_token0);\\r\\n            isOracleValid0 = isInLimit0 && isEthVerified0 && isNotStale0 && isUsdRangeRespected0 && areStablesVerified0;\\r\\n            executionPrice0 = _executionPrice0;\\r\\n            limitPrice0 = _limitPrice0;\\r\\n        }\\r\\n\\r\\n        {\\r\\n            address _token1 = token1;\\r\\n\\r\\n            (\\r\\n                uint256 _executionPrice1,\\r\\n                uint256 _limitPrice1,\\r\\n                bool isInLimit1,\\r\\n                bool isEthVerified1,\\r\\n                bool isNotStale1,\\r\\n                bool isUsdRangeRespected1,\\r\\n                bool areStablesVerified1\\r\\n            ) = getPriceAndValidationData(_token1);\\r\\n\\r\\n            isOracleValid1 = isInLimit1 && isEthVerified1 && isNotStale1 && isUsdRangeRespected1 && areStablesVerified1;\\r\\n            executionPrice1 = _executionPrice1;\\r\\n            limitPrice1 = _limitPrice1;\\r\\n        }\\r\\n\\r\\n        return (executionPrice0, limitPrice0, isOracleValid0, executionPrice1, limitPrice1, isOracleValid1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice Returns the lp address used to compute the price of an erc20 token linked\\r\\n     *  @param erc20 Address of the erc20\\r\\n     *  @return poolAddress\\r\\n     */\\r\\n    function getPoolAddressByToken(address erc20) external view returns (address) {\\r\\n        IOracleStruct.PoolType poolType = poolTypePerErc20[erc20];\\r\\n        address poolAddress;\\r\\n        /// @dev Stable coin 1$\\r\\n        if (poolType == IOracleStruct.PoolType.STABLE) {\\r\\n            poolAddress = address(0);\\r\\n        }\\r\\n        /// @dev CURVE 2 ASSETS\\r\\n        else if (poolType == IOracleStruct.PoolType.CURVE_DUO) {\\r\\n            poolAddress = curveDuoParams[erc20].poolAddress;\\r\\n        }\\r\\n        /// @dev CURVE 3 ASSETS\\r\\n        else if (poolType == IOracleStruct.PoolType.CURVE_TRI) {\\r\\n            poolAddress = curveTriParams[erc20].poolAddress;\\r\\n        }\\r\\n        /// @dev UNI V3\\r\\n        else if (poolType == IOracleStruct.PoolType.UNI_V3) {\\r\\n            poolAddress = univ3Params[erc20].poolAddress;\\r\\n        }\\r\\n        /// @dev UNI V2\\r\\n        else if (poolType == IOracleStruct.PoolType.UNI_V2) {\\r\\n            poolAddress = univ2Params[erc20].poolAddress;\\r\\n        }\\r\\n        return poolAddress;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ICrvPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\r\\n\\r\\ninterface ICrvPool is IERC20Metadata {\\r\\n    function calc_token_amount(uint256[2] memory amounts) external view returns (uint256);\\r\\n\\r\\n    function last_prices() external view returns (uint256);\\r\\n\\r\\n    function price_oracle() external view returns (uint256);\\r\\n\\r\\n    function price_scale() external view returns (uint256);\\r\\n\\r\\n    function get_virtual_price() external view returns (uint256);\\r\\n\\r\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external payable;\\r\\n\\r\\n    function remove_liquidity(uint256 amount, uint256[2] memory min_amounts) external payable;\\r\\n\\r\\n    function remove_liquidity_one_coin(uint256 token_amount, uint256 i, uint256 min_amount) external payable;\\r\\n\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    function exchange(\\r\\n        uint256 i, //index tokenIn\\r\\n        uint256 j, //index tokenOut\\r\\n        uint256 dx, //amountIn\\r\\n        uint256 min_dy, //amountOut\\r\\n        bool use_eth\\r\\n    ) external payable;\\r\\n\\r\\n    function get_dy(uint256 i, uint256 j, uint256 dx) external view returns (uint256);\\r\\n\\r\\n    function coins(uint256 i) external view returns (address);\\r\\n\\r\\n    function last_prices_timestamp() external view returns (uint256);\\r\\n\\r\\n    //For NG Pool only: packed timestamp for price [0] and xcp [1]\\r\\n    function last_timestamp() external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface ITriCrvPool {\\r\\n    function calc_token_amount(uint256[2] memory amounts) external view returns (uint256);\\r\\n\\r\\n    function last_prices(uint256 k) external view returns (uint256);\\r\\n\\r\\n    function price_oracle(uint256 k) external view returns (uint256);\\r\\n\\r\\n    function price_scale(uint256 k) external view returns (uint256);\\r\\n\\r\\n    function get_virtual_price() external view returns (uint256);\\r\\n\\r\\n    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount, bool _use_underlying) external payable;\\r\\n\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    function exchange(\\r\\n        uint256 i, //index tokenIn\\r\\n        uint256 j, //index tokenOut\\r\\n        uint256 dx, //amountIn\\r\\n        uint256 min_dy, //amountOut\\r\\n        bool use_eth\\r\\n    ) external payable;\\r\\n\\r\\n    function get_dy(uint256 i, uint256 j, uint256 dx) external view returns (uint256);\\r\\n\\r\\n    function coins(uint256 i) external view returns (address);\\r\\n\\r\\n    function balanceOf(address arg0) external view returns (uint256);\\r\\n\\r\\n    function last_prices_timestamp() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracleStructV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ninterface IOracleStructV2 {\\r\\n    enum PoolType {\\r\\n        NOT_INIT,\\r\\n        STABLE,\\r\\n        CURVE_DUO,\\r\\n        CURVE_TRI,\\r\\n        UNI_V3,\\r\\n        UNI_V2\\r\\n    }\\r\\n\\r\\n    struct StableParams {\\r\\n        AggregatorV3Interface aggregatorOracle;\\r\\n        uint40 deltaLimitOracle; // 5 % => 500 & 100 % => 10 000\\r\\n        uint56 maxLastUpdate; // Buffer time before a not updated price is considered as stale\\r\\n        uint128 minPrice;\\r\\n        uint128 maxPrice;\\r\\n    }\\r\\n\\r\\n    struct CurveDuoParams {\\r\\n        bool isReversed;\\r\\n        bool isEthPriceRelated;\\r\\n        address poolAddress;\\r\\n        bool isNg;\\r\\n        uint32 deltaLimitOracle; // 5 % => 500 & 100 % => 10 000\\r\\n        uint40 maxLastUpdate; // Buffer time before a not updated price is considered as stale\\r\\n        uint128 minPrice;\\r\\n        uint128 maxPrice;\\r\\n        address[] stablesToCheck;\\r\\n    }\\r\\n\\r\\n    struct CurveTriParams {\\r\\n        bool isReversed;\\r\\n        bool isEthPriceRelated;\\r\\n        address poolAddress;\\r\\n        uint40 deltaLimitOracle;\\r\\n        uint40 maxLastUpdate;\\r\\n        uint8 k;\\r\\n        uint120 minPrice;\\r\\n        uint128 maxPrice;\\r\\n        address[] stablesToCheck;\\r\\n    }\\r\\n\\r\\n    struct UniV2Params {\\r\\n        bool isReversed;\\r\\n        bool isEthPriceRelated;\\r\\n        address poolAddress;\\r\\n        uint80 deltaLimitOracle;\\r\\n        uint96 maxLastUpdate;\\r\\n        AggregatorV3Interface aggregatorOracle;\\r\\n        uint128 minPrice;\\r\\n        uint128 maxPrice;\\r\\n        address[] stablesToCheck;\\r\\n    }\\r\\n\\r\\n    struct UniV3Params {\\r\\n        bool isReversed;\\r\\n        bool isEthPriceRelated;\\r\\n        address poolAddress;\\r\\n        uint80 deltaLimitOracle;\\r\\n        uint80 maxLastUpdate;\\r\\n        uint16 twap;\\r\\n        AggregatorV3Interface aggregatorOracle;\\r\\n        uint128 minPrice;\\r\\n        uint128 maxPrice;\\r\\n        address[] stablesToCheck;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libs/TickMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\r\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\r\\n/// prices between 2**-128 and 2**128\\r\\nlibrary TickMath {\\r\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\r\\n    int24 internal constant MIN_TICK = -887272;\\r\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\r\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\r\\n\\r\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\r\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\r\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\r\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\r\\n\\r\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\r\\n    /// @dev Throws if |tick| > max tick\\r\\n    /// @param tick The input tick for the above formula\\r\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\r\\n    /// at the given tick\\r\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\r\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\r\\n        require(absTick <= uint256(uint24(MAX_TICK)), \\\"T\\\");\\r\\n\\r\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\r\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\r\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\r\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\r\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\r\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\r\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\r\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\r\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\r\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\r\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\r\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\r\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\r\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\r\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\r\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\r\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\r\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\r\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\r\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\r\\n\\r\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\r\\n\\r\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\r\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\r\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\r\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\r\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\r\\n    /// ever return.\\r\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\r\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\r\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\r\\n        // second inequality must be < because the price can never reach the price at the max tick\\r\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, \\\"R\\\");\\r\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\r\\n\\r\\n        uint256 r = ratio;\\r\\n        uint256 msb = 0;\\r\\n\\r\\n        assembly {\\r\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(4, gt(r, 0xFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(3, gt(r, 0xFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(2, gt(r, 0xF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(1, gt(r, 0x3))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := gt(r, 0x1)\\r\\n            msb := or(msb, f)\\r\\n        }\\r\\n\\r\\n        if (msb >= 128) r = ratio >> (msb - 127);\\r\\n        else r = ratio << (127 - msb);\\r\\n\\r\\n        int256 log_2 = (int256(msb) - 128) << 64;\\r\\n\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(63, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(62, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(61, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(60, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(59, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(58, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(57, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(56, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(55, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(54, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(53, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(52, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(51, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(50, f))\\r\\n        }\\r\\n\\r\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\r\\n\\r\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\r\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\r\\n\\r\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 250\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"curveDuoParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isReversed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEthPriceRelated\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNg\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"deltaLimitOracle\",\"type\":\"uint32\"},{\"internalType\":\"uint40\",\"name\":\"maxLastUpdate\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"minPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxPrice\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"curveTriParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isReversed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEthPriceRelated\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"deltaLimitOracle\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maxLastUpdate\",\"type\":\"uint40\"},{\"internalType\":\"uint8\",\"name\":\"k\",\"type\":\"uint8\"},{\"internalType\":\"uint120\",\"name\":\"minPrice\",\"type\":\"uint120\"},{\"internalType\":\"uint128\",\"name\":\"maxPrice\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"getAndVerifyTwoPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"getPoolAddressByToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"getPriceAndValidationData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"executionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInLimit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEthVerified\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isNotStale\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isUsdRangeRespected\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"areStableVerified\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"getPriceUnverified\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"executionPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"getPriceVerified\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"getTwoPricesAndIsValid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolTypePerErc20\",\"outputs\":[{\"internalType\":\"enum IOracleStructV2.PoolType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isReversed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEthPriceRelated\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNg\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"deltaLimitOracle\",\"type\":\"uint32\"},{\"internalType\":\"uint40\",\"name\":\"maxLastUpdate\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"minPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxPrice\",\"type\":\"uint128\"},{\"internalType\":\"address[]\",\"name\":\"stablesToCheck\",\"type\":\"address[]\"}],\"internalType\":\"struct IOracleStructV2.CurveDuoParams\",\"name\":\"_curveDuoParams\",\"type\":\"tuple\"}],\"name\":\"setCurveDuoParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isReversed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEthPriceRelated\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"deltaLimitOracle\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maxLastUpdate\",\"type\":\"uint40\"},{\"internalType\":\"uint8\",\"name\":\"k\",\"type\":\"uint8\"},{\"internalType\":\"uint120\",\"name\":\"minPrice\",\"type\":\"uint120\"},{\"internalType\":\"uint128\",\"name\":\"maxPrice\",\"type\":\"uint128\"},{\"internalType\":\"address[]\",\"name\":\"stablesToCheck\",\"type\":\"address[]\"}],\"internalType\":\"struct IOracleStructV2.CurveTriParams\",\"name\":\"_curveTriParams\",\"type\":\"tuple\"}],\"name\":\"setCurveTriParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"},{\"internalType\":\"enum IOracleStructV2.PoolType\",\"name\":\"_poolType\",\"type\":\"uint8\"}],\"name\":\"setPoolTypeForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"aggregatorOracle\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"deltaLimitOracle\",\"type\":\"uint40\"},{\"internalType\":\"uint56\",\"name\":\"maxLastUpdate\",\"type\":\"uint56\"},{\"internalType\":\"uint128\",\"name\":\"minPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxPrice\",\"type\":\"uint128\"}],\"internalType\":\"struct IOracleStructV2.StableParams\",\"name\":\"_stableParams\",\"type\":\"tuple\"}],\"name\":\"setStableParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isReversed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEthPriceRelated\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint80\",\"name\":\"deltaLimitOracle\",\"type\":\"uint80\"},{\"internalType\":\"uint96\",\"name\":\"maxLastUpdate\",\"type\":\"uint96\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"aggregatorOracle\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxPrice\",\"type\":\"uint128\"},{\"internalType\":\"address[]\",\"name\":\"stablesToCheck\",\"type\":\"address[]\"}],\"internalType\":\"struct IOracleStructV2.UniV2Params\",\"name\":\"_uniV2Params\",\"type\":\"tuple\"}],\"name\":\"setUniV2Params\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isReversed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEthPriceRelated\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint80\",\"name\":\"deltaLimitOracle\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"maxLastUpdate\",\"type\":\"uint80\"},{\"internalType\":\"uint16\",\"name\":\"twap\",\"type\":\"uint16\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"aggregatorOracle\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxPrice\",\"type\":\"uint128\"},{\"internalType\":\"address[]\",\"name\":\"stablesToCheck\",\"type\":\"address[]\"}],\"internalType\":\"struct IOracleStructV2.UniV3Params\",\"name\":\"_uniV3Params\",\"type\":\"tuple\"}],\"name\":\"setUniV3Params\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableParams\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"aggregatorOracle\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"deltaLimitOracle\",\"type\":\"uint40\"},{\"internalType\":\"uint56\",\"name\":\"maxLastUpdate\",\"type\":\"uint56\"},{\"internalType\":\"uint128\",\"name\":\"minPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxPrice\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"univ2Params\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isReversed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEthPriceRelated\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint80\",\"name\":\"deltaLimitOracle\",\"type\":\"uint80\"},{\"internalType\":\"uint96\",\"name\":\"maxLastUpdate\",\"type\":\"uint96\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"aggregatorOracle\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxPrice\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"univ3Params\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isReversed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEthPriceRelated\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint80\",\"name\":\"deltaLimitOracle\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"maxLastUpdate\",\"type\":\"uint80\"},{\"internalType\":\"uint16\",\"name\":\"twap\",\"type\":\"uint16\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"aggregatorOracle\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxPrice\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CvgOracleUpgradeable", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "250", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}