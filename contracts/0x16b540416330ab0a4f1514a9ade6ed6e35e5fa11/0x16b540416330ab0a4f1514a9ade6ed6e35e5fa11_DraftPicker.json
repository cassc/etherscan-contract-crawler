{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DraftPicker.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@          @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n/**\\n * @title DraftPicker\\n * @author @brougkr\\n * @notice A Smart Contract To Facilitate Draft Pick Claims\\n */\\npragma solidity 0.8.19;\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { IMP } from \\\"./IMP.sol\\\";\\nimport { MerkleProof } from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\ncontract DraftPicker is Ownable, ReentrancyGuard\\n{\\n    struct DraftPick\\n    {\\n        string _Name;              // [0] -> _Name \\n        address _MintPass;         // [1] -> _MintPass (MintPass To Be Burned)\\n        address _MintedWork;       // [2] -> _MintedWork (NFT To Be Claimed)\\n        address _Operator;         // [3] -> _Operator (Address That NFTs Are Pulling From)\\n        address _ArtistAddress;    // [3] -> _ArtistAddress (Artist Address For Split Amount)\\n        uint _StartingTimestamp;   // [4] -> _StartingTimestamp (Unix Start Time)\\n        uint _SecondsPerTokenID;   // [5] -> _SecondsPerTokenID (600 = 10 Minutes For Each TokenID)\\n        uint _SecondsIntermission; // [6] -> _SecondsIntermission (eg. If You Want To Close Draft At Midnight And Resume At Noon _SecondsIntermission = 43200 Seconds)\\n        uint _MaxPerIntermission;  // [7] -> _MaxPerIntermission (Maximum TokenIDs To Claim Per _SecondsIntermission)\\n        uint _MaxTotalClaim;       // [8] -> _MaxTotalClaim (Maximum Total TokenIDs Available To Claim)\\n        uint _Price;               // [9] -> _Price (In Wei To Claim Tokens) Per Unit\\n        uint _BMSplitAmount;       // [10] -> _BMSplitAmount (Amount Of Ether To Contract Owner) (375 = 37.5%)\\n        uint _ABSplitAmount;       // [11] -> _ABSplitAmount (Amount Of Ether To ArtBlocks) (25 = 2.5%)\\n        uint _TokenIDStart;        // [12] -> _TokenIDStart (Starting TokenID)\\n        uint _TokenIDRange;        // [13] -> _TokenIDRange (How Many Tokens From TokenIDStart To Allow Claiming)\\n    }\\n\\n    struct UserClaim\\n    {\\n        address _DraftPicker; // [0] -> _DraftPicker\\n        uint _ClaimedTokenID; // [1] -> _ClaimedTokenID\\n        uint _BurnedTokenID;  // [2] -> _BurnedTokenID\\n        uint _Timestamp;      // [3] -> _Timestamp\\n    }\\n\\n    uint public _TOTAL_UNIQUE_DRAFT_PICKS = 4;\\n    address private constant _BRT_MULTISIG = 0x0BC56e3c1397e4570069e89C07936A5c6020e3BE;\\n    address private constant _ART_BLOCKS = 0x43A7D26a271F5801b8092d94DFd5b36EA5D01F5f;\\n\\n    mapping(uint=>DraftPick) public _DraftPicks;\\n    mapping(uint=>UserClaim[]) private _UserClaims;\\n    mapping(uint=>mapping(uint=>bool)) public TokenIDClaimed;\\n    mapping(address=>bool) public Admin;\\n    mapping(uint=>uint) public AmountClaimed;\\n\\n    event Claimed(uint DraftIndex, address DraftPicker, uint ClaimedTokenID, uint Timestamp);\\n    event Purchased(address Purchaser, uint[] Tokens, uint Amount);\\n    event DraftPickStarted(uint DraftIndex);\\n\\n    constructor()\\n    {\\n        _DraftPicks[0] = DraftPick( \\n            \\\"Ana Maria Direct Claim\\\",                   // Name\\n            address(0),                                 // MintPass\\n            0x7c3Ea2b7B3beFA1115aB51c09F0C9f245C500B18, // MintedWork\\n            0x5168D59eFEBF8B86513b8728EC3e2D9Aa099BD93, // Operator\\n            0xe5BBA0D5628946f1CAB23FdE1496732050435429, // Artist Address\\n            block.timestamp,                            // Starting Timestamp\\n            60,                                         // Seconds Per TokenID\\n            0,                                          // Seconds Intermission\\n            100,                                        // Max Per Intermission \\n            54,                                         // Max Total Claim\\n            0.15 ether,                                 // Price Per Unit\\n            345,                                        // BM Split Amount\\n            25,                                         // AB Split Amount\\n            20000000,                                   // Starting TokenID\\n            100                                         // TokenID Range\\n        );\\n\\n        _DraftPicks[1] = DraftPick( \\n            \\\"Ana Maria Mint Pass Claim\\\",                // Name\\n            0x7B807B46Ee5B65dD20848EE6c805C4A86d06d3Ce, // MintPass\\n            0x7c3Ea2b7B3beFA1115aB51c09F0C9f245C500B18, // MintedWork\\n            0x5168D59eFEBF8B86513b8728EC3e2D9Aa099BD93, // Operator\\n            address(0),                                 // Artist Address\\n            block.timestamp,                            // Starting Timestamp\\n            60,                                         // Seconds Per TokenID\\n            0,                                          // Seconds Intermission\\n            100,                                        // Max Per Intermission \\n            46,                                         // Max Total Claim\\n            0,                                          // Price Per Unit\\n            0,                                          // BM Split Amount\\n            0,                                          // AB Split Amount\\n            20000000,                                   // Starting TokenID\\n            100                                         // TokenID Range\\n        );\\n\\n        _DraftPicks[2] = DraftPick( \\n            \\\"Apophenies Direct Claim\\\",                  // Name\\n            address(0),                                 // MintPass\\n            0x7B807B46Ee5B65dD20848EE6c805C4A86d06d3Ce, // MintedWork\\n            0x5168D59eFEBF8B86513b8728EC3e2D9Aa099BD93, // Operator\\n            0x0BC56e3c1397e4570069e89C07936A5c6020e3BE, // Artist Address\\n            block.timestamp,                            // Starting Timestamp\\n            60,                                         // Seconds Per TokenID\\n            0,                                          // Seconds Intermission\\n            100,                                        // Max Per Intermission \\n            100,                                        // Max Total Claim\\n            1.5 ether,                                  // Price Per Unit\\n            1000,                                       // BM Split Amount\\n            0,                                          // AB Split Amount\\n            61000000,                                   // Starting TokenID\\n            100                                         // TokenID Range\\n        );\\n\\n        _DraftPicks[3] = DraftPick( \\n            \\\"Apophenies Mint Pass Claim\\\",               // Name\\n            0x4c909BfAFAe145bf53892136A056FB4B36B450b0, // MintPass\\n            0x0A1BBD57033F57E7B6743621b79fCB9Eb2CE3676, // MintedWork\\n            0x5168D59eFEBF8B86513b8728EC3e2D9Aa099BD93, // Operator\\n            address(0),                                 // Artist Address\\n            block.timestamp,                            // Starting Timestamp\\n            600,                                        // Seconds Per TokenID\\n            0,                                          // Seconds Intermission\\n            100,                                        // Max Per Intermission \\n            100,                                        // Max Total Claim\\n            0,                                          // Price Per Unit\\n            0,                                          // BM Split Amount\\n            0,                                          // AB Split Amount\\n            61000000,                                   // Starting TokenID\\n            100                                         // TokenID Range\\n        );\\n\\n        Admin[msg.sender] = true; \\n        Admin[0xe06F5FAE754e81Bc050215fF89B03d9e9FF20700] = true;\\n        Admin[0x90D98d5A1fD21B7cEa4D5c18341607ed1a8345c0] = true;\\n        Admin[0x18B7511938FBe2EE08ADf3d4A24edB00A5C9B783] = true;\\n    }\\n\\n    /**\\n     * @dev Claims And Optionally Purchases Tokens In Draft Pick With Mint Pass Timelock\\n     * @param DraftIndex The Draft Index To Claim From\\n     * @param BurnTokenIDs The TokenIDs To Burn\\n     * @param RedeemTokenIDs The TokenIDs To Redeem\\n     */\\n    function ClaimTokensMintPassBurnWithTimelock (\\n        uint DraftIndex, \\n        uint[] calldata BurnTokenIDs, \\n        uint[] calldata RedeemTokenIDs\\n    ) external payable nonReentrant {\\n        require(block.timestamp >= _DraftPicks[DraftIndex]._StartingTimestamp, \\\"DraftPicker: Claiming Has Not Started Yet\\\");\\n        require(msg.value == RedeemTokenIDs.length * _DraftPicks[DraftIndex]._Price, \\\"DraftPicker: Invalid Amount Of Ether Sent\\\");\\n        require(BurnTokenIDs.length == RedeemTokenIDs.length, \\\"DraftPicker: Invalid Array Input Length\\\");\\n        require(AmountClaimed[DraftIndex] + BurnTokenIDs.length <= _DraftPicks[DraftIndex]._MaxTotalClaim, \\\"DraftPicker: Max Claim Reached\\\");\\n        AmountClaimed[DraftIndex] += BurnTokenIDs.length;\\n        uint ValidBurnTokenID = ViewValidTokenID(DraftIndex, block.timestamp);\\n        uint Start = _DraftPicks[DraftIndex]._TokenIDStart;\\n        uint End = Start + _DraftPicks[DraftIndex]._MaxTotalClaim;\\n        __FinalizeDraftPickSale(DraftIndex, msg.value);\\n        for(uint x; x < BurnTokenIDs.length; x++)\\n        {\\n            require(BurnTokenIDs[x] <= ValidBurnTokenID, \\\"DraftPicker: MintPass TokenID Not Yet Burnable\\\");\\n            require(RedeemTokenIDs[x] >= Start && RedeemTokenIDs[x] <= End, \\\"DraftPicker: Invalid Claim TokenID\\\");\\n            require(!TokenIDClaimed[DraftIndex][RedeemTokenIDs[x]], \\\"DraftPicker: TokenID Already Claimed\\\");\\n            TokenIDClaimed[DraftIndex][RedeemTokenIDs[x]] = true;\\n            (address Recipient, ) = IMP(_DraftPicks[DraftIndex]._MintPass)._LiveMintBurn(BurnTokenIDs[x]);\\n            require(Recipient == msg.sender, \\\"DraftPicker: Msg.Sender Is Not Owner Of Input Mint Pass\\\");\\n            IERC721(_DraftPicks[DraftIndex]._MintedWork).transferFrom(_DraftPicks[DraftIndex]._Operator, Recipient, RedeemTokenIDs[x]);\\n            _UserClaims[DraftIndex].push(UserClaim(msg.sender, RedeemTokenIDs[x], BurnTokenIDs[x], block.timestamp));\\n            emit Claimed(DraftIndex, msg.sender, RedeemTokenIDs[x], block.timestamp);\\n        }\\n    }   \\n\\n    /**\\n     * @dev Claims And Optionally Purchases Tokens In Draft Pick With Token Range Of Eligible Tokens\\n     * @param DraftIndex The Draft Index To Claim From\\n     * @param BurnTokenIDs The TokenIDs To Burn\\n     * @param RedeemTokenIDs The TokenIDs To Redeem\\n     */\\n    function ClaimTokensMintPassBurnWithTokenRange (\\n        uint DraftIndex, \\n        uint[] calldata BurnTokenIDs, \\n        uint[] calldata RedeemTokenIDs\\n    ) external payable nonReentrant {\\n        require(block.timestamp >= _DraftPicks[DraftIndex]._StartingTimestamp, \\\"DraftPicker: Claiming Has Not Started Yet\\\");\\n        require(msg.value == BurnTokenIDs.length * _DraftPicks[DraftIndex]._Price, \\\"DraftPicker: Invalid Amount Of Ether Sent\\\");\\n        require(BurnTokenIDs.length == RedeemTokenIDs.length, \\\"DraftPicker: Invalid Array Input Length\\\");\\n        require(AmountClaimed[DraftIndex] + BurnTokenIDs.length <= _DraftPicks[DraftIndex]._MaxTotalClaim, \\\"DraftPicker: Max Claim Reached\\\");\\n        AmountClaimed[DraftIndex] += BurnTokenIDs.length;\\n        uint Start = _DraftPicks[DraftIndex]._TokenIDStart;\\n        uint End = Start + _DraftPicks[DraftIndex]._MaxTotalClaim;\\n        __FinalizeDraftPickSale(DraftIndex, msg.value);\\n        for(uint x; x < BurnTokenIDs.length; x++)\\n        {            \\n            require(!TokenIDClaimed[DraftIndex][RedeemTokenIDs[x]], \\\"DraftPicker: TokenID Already Claimed\\\");\\n            TokenIDClaimed[DraftIndex][RedeemTokenIDs[x]] = true;\\n            require(RedeemTokenIDs[x] >= Start && RedeemTokenIDs[x] <= End, \\\"DraftPicker: Invalid Claim TokenID\\\");\\n            (address Recipient, ) = IMP(_DraftPicks[DraftIndex]._MintPass)._LiveMintBurn(BurnTokenIDs[x]);\\n            require(Recipient == msg.sender, \\\"DraftPicker: Msg.Sender Is Not Owner Of Input Mint Pass\\\");\\n            IERC721(_DraftPicks[DraftIndex]._MintedWork).transferFrom(_DraftPicks[DraftIndex]._Operator, Recipient, RedeemTokenIDs[x]);\\n            _UserClaims[DraftIndex].push(UserClaim(msg.sender, RedeemTokenIDs[x], BurnTokenIDs[x], block.timestamp));\\n            emit Claimed(DraftIndex, msg.sender, RedeemTokenIDs[x], block.timestamp);\\n        }\\n    }\\n\\n    /**\\n     * @dev Claims Tokens In Draft Pick Directly, With An Optional Price\\n     * @param DraftIndex The Draft Index To Claim From\\n     * @param RedeemTokenIDs The TokenIDs To Redeem\\n     */\\n    function ClaimTokensDirect (\\n        uint DraftIndex, \\n        uint[] calldata RedeemTokenIDs \\n    ) external payable nonReentrant {\\n        require(block.timestamp >= _DraftPicks[DraftIndex]._StartingTimestamp, \\\"DraftPicker: Claiming Has Not Started Yet\\\");\\n        require(msg.value == RedeemTokenIDs.length * _DraftPicks[DraftIndex]._Price, \\\"DraftPicker: Invalid Amount Of Ether Sent\\\");\\n        require(AmountClaimed[DraftIndex] + RedeemTokenIDs.length <= _DraftPicks[DraftIndex]._MaxTotalClaim, \\\"DraftPicker: Max Claim Reached\\\");\\n        AmountClaimed[DraftIndex] += RedeemTokenIDs.length;\\n        uint Start = _DraftPicks[DraftIndex]._TokenIDStart;\\n        uint End = Start + _DraftPicks[DraftIndex]._MaxTotalClaim;\\n        __FinalizeDraftPickSale(DraftIndex, msg.value);\\n        for(uint x; x < RedeemTokenIDs.length; x++)\\n        {\\n            require(!TokenIDClaimed[DraftIndex][RedeemTokenIDs[x]], \\\"DraftPicker: TokenID Already Claimed\\\");\\n            TokenIDClaimed[DraftIndex][RedeemTokenIDs[x]] = true;\\n            require(RedeemTokenIDs[x] >= Start && RedeemTokenIDs[x] <= End, \\\"DraftPicker: Invalid Claim TokenID\\\");\\n            IERC721(_DraftPicks[DraftIndex]._MintedWork).transferFrom(_DraftPicks[DraftIndex]._Operator, msg.sender, RedeemTokenIDs[x]);\\n            _UserClaims[DraftIndex].push(UserClaim(msg.sender, RedeemTokenIDs[x], type(uint).max, block.timestamp));\\n            emit Claimed(DraftIndex, msg.sender, RedeemTokenIDs[x], block.timestamp);\\n        }\\n    } \\n\\n    /*------------------\\n     * ADMIN FUNCTIONS *\\n    -------------------*/\\n\\n    /**\\n     * @dev Starts A Draft Pick Claim\\n     */\\n    function _StartDraftPickClaim(DraftPick memory _DP) external onlyAdmin returns (uint DraftPickIndex)\\n    {\\n        DraftPickIndex = _TOTAL_UNIQUE_DRAFT_PICKS;\\n        require(_DP._BMSplitAmount <= 975, \\\"DraftPicker: Invalid Split Amount | Maximum = 975 = 97.5% Of Take\\\");\\n        _DraftPicks[DraftPickIndex] = _DP;\\n        emit DraftPickStarted(DraftPickIndex);\\n    }\\n\\n    /**\\n     * @dev Changes The Name Of A Draft Pick\\n     */\\n    function _ChangeName(uint DraftIndex, string calldata Name) external onlyAdmin { _DraftPicks[DraftIndex]._Name = Name; }\\n\\n    /**\\n     * @dev Changes All Addresses\\n     */\\n    function _ChangeAddresses(uint DraftIndex, address NewMintPass, address NewMintedWork, address Operator, address ArtistAddress) external onlyAdmin\\n    {\\n        _DraftPicks[DraftIndex]._MintPass = NewMintPass;\\n        _DraftPicks[DraftIndex]._MintedWork = NewMintedWork;\\n        _DraftPicks[DraftIndex]._Operator = Operator;\\n        _DraftPicks[DraftIndex]._ArtistAddress = ArtistAddress;\\n    }\\n\\n    /**\\n     * @dev Changes The Starting Timestamp For Timelocked Draft Pick Merkle Claims\\n     */\\n    function _ChangeStartingTimestamp(uint DraftIndex, uint UnixTimestamp) external onlyAdmin { _DraftPicks[DraftIndex]._StartingTimestamp = UnixTimestamp; }\\n\\n    /**\\n     * @dev Changes Unix Start Time & The Seconds Interval\\n     */\\n    function _ChangeSecondsAndStart(uint DraftIndex, uint StartingTimestamp, uint SecondsInterval) external onlyAdmin\\n    {\\n        _DraftPicks[DraftIndex]._StartingTimestamp = StartingTimestamp;\\n        _DraftPicks[DraftIndex]._SecondsPerTokenID = SecondsInterval;\\n    }\\n\\n    /**\\n     * @dev Changes The Current Mint Pass Address\\n     */\\n    function _ChangeMintPassAddress(uint DraftIndex, address NewAddress) external onlyAdmin { _DraftPicks[DraftIndex]._MintPass = NewAddress; }\\n\\n    /**\\n     * @dev Changes The Current Minted Work Address\\n     */\\n    function _ChangeMintedWorkAddress(uint DraftIndex, address NewAddress) external onlyAdmin { _DraftPicks[DraftIndex]._MintedWork = NewAddress; }\\n\\n    /**\\n     * @dev Changes The Operator Address\\n     */\\n    function _ChangeOperatorAddress(uint DraftIndex, address NewAddress) external onlyAdmin { _DraftPicks[DraftIndex]._Operator = NewAddress; }\\n\\n    /**\\n     * @dev Changes The Seconds Per TokenID Claim (600 = 10 minutes Per TokenID)\\n     */\\n    function _ChangeSecondsPerTokenID(uint DraftIndex, uint Seconds) external onlyAdmin { _DraftPicks[DraftIndex]._SecondsPerTokenID = Seconds; }\\n\\n    /**\\n     * @dev Changes The Amount Of Seconds In Each Intermission\\n     */\\n    function _ChangeSecondsIntermission(uint DraftIndex, uint Seconds) external onlyAdmin { _DraftPicks[DraftIndex]._SecondsIntermission = Seconds; }\\n\\n    /**\\n     * @dev Changes The Maximum TokenIDs Available Per Intermission Interval\\n     */\\n    function _ChangeMaxPerIntermission(uint DraftIndex, uint Max) external onlyAdmin { _DraftPicks[DraftIndex]._MaxPerIntermission = Max; }\\n    \\n    /**\\n     * @dev Changes The Max Claimable Tokens For Timelocked Draft Pick Merkle Claims\\n     */\\n    function _ChangeMaxClaim(uint DraftIndex, uint Max) external onlyAdmin { _DraftPicks[DraftIndex]._MaxTotalClaim = Max; }\\n\\n    /**\\n     * @dev Changes The Seconds Interval For Timelocked Draft Pick Merkle Claims\\n     */\\n    function _ChangeSecondsInterval(uint DraftIndex, uint SecondsInterval) external onlyAdmin { _DraftPicks[DraftIndex]._SecondsPerTokenID = SecondsInterval; }\\n\\n    /**\\n     * @dev Changes The Price In Wei To Claim Tokens\\n     */\\n    function _ChangePrice(uint DraftIndex, uint Price) external onlyAdmin { _DraftPicks[DraftIndex]._Price = Price; }\\n\\n    /**\\n     * @dev Changes The Split Amount For Recipient Split\\n     */\\n    function _ChangeBMSplitAmount(uint DraftIndex, uint SplitAmount) external onlyAdmin { _DraftPicks[DraftIndex]._BMSplitAmount = SplitAmount; }\\n\\n    /**\\n     * @dev Withdraws All ETH To Multisig\\n     */\\n    function _WithdrawETHToMultisig() external onlyAdmin { payable(_BRT_MULTISIG).transfer(address(this).balance); }\\n\\n    /*------------------\\n     * OWNER FUNCTIONS *\\n    -------------------*/\\n\\n    /**\\n     * @dev Executes Arbitrary Transaction(s)\\n     */\\n    function ____InitTransaction(address[] memory Targets, uint[] memory Values, bytes[] memory Datas) external onlyOwner\\n    {\\n        for(uint x; x < Targets.length; x++) \\n        {\\n            (bool success,) = Targets[x].call{value:(Values[x])}(Datas[x]);\\n            require(success, \\\"i have failed u anakin\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds An Admin\\n     */\\n    function ____AuthorizeAddress(address Wallet) external onlyOwner { Admin[Wallet] = true; }\\n\\n    /**\\n     * @dev Removes An Admin\\n     */\\n    function ____DeauthorizeAddress(address Wallet) external onlyOwner { Admin[Wallet] = false; }\\n\\n    /**\\n     * @dev Withdraws All ETH\\n     */\\n    function ____WithdrawETH() external onlyOwner { payable(msg.sender).transfer(address(this).balance); }\\n\\n    /**\\n     * @dev Withdraws All ETH\\n     */\\n    function ____WithdrawETHCall() external onlyOwner \\n    { \\n        (bool success,) = msg.sender.call{value:(address(this).balance)}(\\\"\\\");\\n        require(success, \\\"i have failed u anakin\\\");\\n    }\\n\\n    /*-----------------\\n     * VIEW FUNCTIONS *\\n    ------------------*/\\n\\n    /**\\n     * @dev Returns The Current Eligible TokenID For Timelocked Draft Pick Merkle Claims\\n     */\\n    function ViewFrontend(uint DraftIndex) public view returns ( \\n        UserClaim[] memory AllClaims, \\n        DraftPick memory ClaimParams, \\n        uint[] memory Timetable, \\n        uint ValidTokenID, \\n        uint ClaimedAmount \\n    ) {\\n        ValidTokenID = ViewValidTokenID(DraftIndex, block.timestamp);\\n        return (\\n            _UserClaims[DraftIndex], \\n            _DraftPicks[DraftIndex], \\n            ViewTimetable(DraftIndex), \\n            ValidTokenID, \\n            AmountClaimed[DraftIndex]\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns Multiple Draft Pick Frontends\\n     */\\n    function ViewFrontends(uint[] calldata DraftIndexes) public view returns ( \\n        UserClaim[][] memory AllClaims, \\n        DraftPick[] memory ClaimParams, \\n        uint[][] memory Timetable, \\n        uint[] memory ValidTokenIDs, \\n        uint[] memory ClaimedAmounts \\n    ) {\\n        AllClaims = new UserClaim[][](DraftIndexes.length);\\n        ClaimParams = new DraftPick[](DraftIndexes.length);\\n        Timetable = new uint[][](DraftIndexes.length);\\n        ValidTokenIDs = new uint[](DraftIndexes.length);\\n        ClaimedAmounts = new uint[](DraftIndexes.length);\\n        for(uint x; x < DraftIndexes.length; x++)\\n        {\\n            ValidTokenIDs[x] = ViewValidTokenID(DraftIndexes[x], block.timestamp);\\n            AllClaims[x] = _UserClaims[DraftIndexes[x]];\\n            ClaimParams[x] = _DraftPicks[DraftIndexes[x]];\\n            Timetable[x] = ViewTimetable(DraftIndexes[x]);\\n            ClaimedAmounts[x] = AmountClaimed[DraftIndexes[x]];\\n        }\\n        return (AllClaims, ClaimParams, Timetable, ValidTokenIDs, ClaimedAmounts);\\n    }\\n    \\n    /**\\n     * @dev Returns An Array Of Successful Claims\\n     */\\n    function ViewClaims(uint DraftIndex) public view returns ( UserClaim[] memory AllClaims ) { return _UserClaims[DraftIndex]; }\\n\\n    /**\\n     * @dev Returns The Timetable Of Unix Timestamps For Given Range Of TokenIDs\\n     */\\n    function ViewTimetable(uint DraftIndex) public view returns ( uint[] memory Timestamps ) \\n    {\\n        Timestamps = new uint[](_DraftPicks[DraftIndex]._MaxTotalClaim);\\n        for (uint x; x < _DraftPicks[DraftIndex]._MaxTotalClaim; x++) { Timestamps[x] = ViewTimestampForTokenID(DraftIndex, x); }\\n        return Timestamps;\\n    }\\n\\n    /**\\n     * @dev Calculates the Unix Timestamp for a given TokenID\\n     */\\n    function ViewTimestampForTokenID ( uint DraftIndex, uint TokenID ) public view returns ( uint ) \\n    {\\n        uint MaxPerLocalInterval = _DraftPicks[DraftIndex]._MaxPerIntermission;\\n        uint SecondsIntermission = _DraftPicks[DraftIndex]._SecondsIntermission;\\n        uint Interval = _DraftPicks[DraftIndex]._SecondsPerTokenID;\\n        uint FullIntervals = TokenID / MaxPerLocalInterval;\\n        uint CurrentIntervalIncrements = TokenID % MaxPerLocalInterval;\\n        return _DraftPicks[DraftIndex]._StartingTimestamp + (FullIntervals * SecondsIntermission) + (CurrentIntervalIncrements * Interval);\\n    }\\n\\n    /**\\n     * @dev Returns The Current Valid TokenID\\n     */\\n    function ViewValidTokenID ( uint DraftIndex, uint UnixTimestamp ) public view returns ( uint )\\n    { \\n        if(UnixTimestamp < _DraftPicks[DraftIndex]._StartingTimestamp) { return type(uint).max; }\\n        uint MaxPerLocalInterval = _DraftPicks[DraftIndex]._MaxPerIntermission;\\n        uint SecondsIntermission = _DraftPicks[DraftIndex]._SecondsIntermission;\\n        uint ElapsedTime;\\n        uint CurrentIntervalIncrements;\\n        if(SecondsIntermission == 0)\\n        {\\n            ElapsedTime = UnixTimestamp - _DraftPicks[DraftIndex]._StartingTimestamp;\\n            CurrentIntervalIncrements = ElapsedTime / _DraftPicks[DraftIndex]._SecondsPerTokenID;\\n            if(CurrentIntervalIncrements >= MaxPerLocalInterval) { CurrentIntervalIncrements = MaxPerLocalInterval - 1; }\\n            return CurrentIntervalIncrements;\\n        }\\n        else\\n        {\\n            ElapsedTime = UnixTimestamp - _DraftPicks[DraftIndex]._StartingTimestamp;\\n            uint FullIntervals = (ElapsedTime / SecondsIntermission);\\n            uint HalfLivesCompleted = ElapsedTime % SecondsIntermission;\\n            CurrentIntervalIncrements = HalfLivesCompleted / _DraftPicks[DraftIndex]._SecondsPerTokenID;\\n            if(CurrentIntervalIncrements >= MaxPerLocalInterval) { CurrentIntervalIncrements = MaxPerLocalInterval - 1; }\\n            return (FullIntervals * MaxPerLocalInterval) + CurrentIntervalIncrements;\\n        }\\n    }\\n\\n    /*---------------------\\n     * INTERNAL FUNCTIONS *\\n    ----------------------*/\\n\\n    /**\\n     * @dev Finalizes ETH Transfers \\n     */\\n    function __FinalizeDraftPickSale(uint DraftIndex, uint MessageValue) internal\\n    {\\n        if(MessageValue > 0)\\n        {\\n            require(_DraftPicks[DraftIndex]._ArtistAddress != address(0), \\\"DraftPicker: Artist Address Not Set\\\");\\n            uint BrightMomentsSplit = MessageValue * _DraftPicks[DraftIndex]._BMSplitAmount / 1000; \\n            uint ArtBlocksSplit = MessageValue * _DraftPicks[DraftIndex]._ABSplitAmount / 1000; \\n            uint ArtistAmount = MessageValue - BrightMomentsSplit - ArtBlocksSplit; // Remainder To Artist\\n            payable(_BRT_MULTISIG).transfer(BrightMomentsSplit);\\n            payable(_ART_BLOCKS).transfer(ArtBlocksSplit);\\n            payable(_DraftPicks[DraftIndex]._ArtistAddress).transfer(ArtistAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev onlyAdmin Access Modifier\\n     */\\n    modifier onlyAdmin\\n    {\\n        require(Admin[msg.sender], \\\"DraftPicker | onlyAdmin | Caller Is Not Admin\\\");\\n        _;\\n    }\\n}\\n\\ninterface IERC721 { function transferFrom(address from, address to, uint256 tokenId) external; }\"\r\n    },\r\n    \"contracts/IMP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n * @dev @brougkr\\n */\\npragma solidity 0.8.19;\\ninterface IMP \\n{ \\n    /**\\n     * @dev { For Instances Where Golden Token Or Artists Have A Bespoke Mint Pass Contract }\\n     */\\n    function _LiveMintBurn(uint TicketID) external returns (address Recipient, uint ArtistID); \\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"DraftIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"DraftPicker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ClaimedTokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Timestamp\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"DraftIndex\",\"type\":\"uint256\"}],\"name\":\"DraftPickStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Purchaser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"Tokens\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Admin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AmountClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DraftIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"RedeemTokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"ClaimTokensDirect\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DraftIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"BurnTokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"RedeemTokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"ClaimTokensMintPassBurnWithTimelock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DraftIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"BurnTokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"RedeemTokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"ClaimTokensMintPassBurnWithTokenRange\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokenIDClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DraftIndex\",\"type\":\"uint256\"}],\"name\":\"ViewClaims\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_DraftPicker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ClaimedTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BurnedTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct DraftPicker.UserClaim[]\",\"name\":\"AllClaims\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DraftIndex\",\"type\":\"uint256\"}],\"name\":\"ViewFrontend\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_DraftPicker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ClaimedTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BurnedTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct DraftPicker.UserClaim[]\",\"name\":\"AllClaims\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_MintPass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MintedWork\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ArtistAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_StartingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SecondsPerTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SecondsIntermission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MaxPerIntermission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MaxTotalClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BMSplitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ABSplitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TokenIDStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TokenIDRange\",\"type\":\"uint256\"}],\"internalType\":\"struct DraftPicker.DraftPick\",\"name\":\"ClaimParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"Timetable\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"ValidTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ClaimedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"DraftIndexes\",\"type\":\"uint256[]\"}],\"name\":\"ViewFrontends\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_DraftPicker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ClaimedTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BurnedTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct DraftPicker.UserClaim[][]\",\"name\":\"AllClaims\",\"type\":\"tuple[][]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_MintPass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MintedWork\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ArtistAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_StartingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SecondsPerTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SecondsIntermission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MaxPerIntermission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MaxTotalClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BMSplitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ABSplitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TokenIDStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TokenIDRange\",\"type\":\"uint256\"}],\"internalType\":\"struct DraftPicker.DraftPick[]\",\"name\":\"ClaimParams\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"Timetable\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"ValidTokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ClaimedAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DraftIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"}],\"name\":\"ViewTimestampForTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DraftIndex\",\"type\":\"uint256\"}],\"name\":\"ViewTimetable\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"Timestamps\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DraftIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UnixTimestamp\",\"type\":\"uint256\"}],\"name\":\"ViewValidTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DraftIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"NewMintPass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"NewMintedWork\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ArtistAddress\",\"type\":\"address\"}],\"name\":\"_ChangeAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DraftIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"SplitAmount\",\"type\":\"uint256\"}],\"name\":\"_ChangeBMSplitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DraftIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Max\",\"type\":\"uint256\"}],\"name\":\"_ChangeMaxClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DraftIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Max\",\"type\":\"uint256\"}],\"name\":\"_ChangeMaxPerIntermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DraftIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"_ChangeMintPassAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DraftIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"_ChangeMintedWorkAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DraftIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"}],\"name\":\"_ChangeName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DraftIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"_ChangeOperatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DraftIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Price\",\"type\":\"uint256\"}],\"name\":\"_ChangePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DraftIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StartingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"SecondsInterval\",\"type\":\"uint256\"}],\"name\":\"_ChangeSecondsAndStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DraftIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Seconds\",\"type\":\"uint256\"}],\"name\":\"_ChangeSecondsIntermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DraftIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"SecondsInterval\",\"type\":\"uint256\"}],\"name\":\"_ChangeSecondsInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DraftIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Seconds\",\"type\":\"uint256\"}],\"name\":\"_ChangeSecondsPerTokenID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DraftIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UnixTimestamp\",\"type\":\"uint256\"}],\"name\":\"_ChangeStartingTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_DraftPicks\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_MintPass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MintedWork\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ArtistAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_StartingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SecondsPerTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SecondsIntermission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MaxPerIntermission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MaxTotalClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BMSplitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ABSplitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TokenIDStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TokenIDRange\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_MintPass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MintedWork\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ArtistAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_StartingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SecondsPerTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SecondsIntermission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MaxPerIntermission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MaxTotalClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BMSplitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ABSplitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TokenIDStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TokenIDRange\",\"type\":\"uint256\"}],\"internalType\":\"struct DraftPicker.DraftPick\",\"name\":\"_DP\",\"type\":\"tuple\"}],\"name\":\"_StartDraftPickClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"DraftPickIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TOTAL_UNIQUE_DRAFT_PICKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_WithdrawETHToMultisig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"}],\"name\":\"____AuthorizeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"}],\"name\":\"____DeauthorizeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"Targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"Values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"Datas\",\"type\":\"bytes[]\"}],\"name\":\"____InitTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"____WithdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"____WithdrawETHCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DraftPicker", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}