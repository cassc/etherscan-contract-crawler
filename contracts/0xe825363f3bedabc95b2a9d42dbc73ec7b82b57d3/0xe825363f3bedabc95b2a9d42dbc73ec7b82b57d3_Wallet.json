{"SourceCode": "//sol Wallet\r\n// Multi-sig, daily-limited account proxy/wallet.\r\n// @authors:\r\n// Gav Wood <g@ethdev.com>\r\n// inheritable \"property\" contract that enables methods to be protected by requiring the acquiescence of either a\r\n// single, or, crucially, each of a number of, designated owners.\r\n// usage:\r\n// use modifiers onlyowner (just own owned) or onlymanyowners(hash), whereby the same hash must be provided by\r\n// some number (specified in constructor) of the set of owners (specified in the constructor, modifiable) before the\r\n// interior is executed.\r\n\r\npragma solidity ^0.4.7;\r\n\r\ncontract multiowned {\r\n\r\n\t// TYPES\r\n\r\n\t// struct for the status of a pending operation.\r\n\tstruct PendingState {\r\n\t\tuint yetNeeded;\r\n\t\tuint ownersDone;\r\n\t\tuint index;\r\n\t}\r\n\r\n\t// EVENTS\r\n\r\n\t// this contract only has six types of events: it can accept a confirmation, in which case\r\n\t// we record owner and operation (hash) alongside it.\r\n\tevent Confirmation(address owner, bytes32 operation);\r\n\tevent Revoke(address owner, bytes32 operation);\r\n\t// some others are in the case of an owner changing.\r\n\tevent OwnerChanged(address oldOwner, address newOwner);\r\n\tevent OwnerAdded(address newOwner);\r\n\tevent OwnerRemoved(address oldOwner);\r\n\t// the last one is emitted if the required signatures change\r\n\tevent RequirementChanged(uint newRequirement);\r\n\r\n\t// MODIFIERS\r\n\r\n\t// simple single-sig function modifier.\r\n\tmodifier onlyowner {\r\n\t\tif (isOwner(msg.sender))\r\n\t\t\t_;\r\n\t}\r\n\t// multi-sig function modifier: the operation must have an intrinsic hash in order\r\n\t// that later attempts can be realised as the same underlying operation and\r\n\t// thus count as confirmations.\r\n\tmodifier onlymanyowners(bytes32 _operation) {\r\n\t\tif (confirmAndCheck(_operation))\r\n\t\t\t_;\r\n\t}\r\n\r\n\t// METHODS\r\n\r\n\t// constructor is given number of sigs required to do protected \"onlymanyowners\" transactions\r\n\t// as well as the selection of addresses capable of confirming them.\r\n\tfunction multiowned(address[] _owners, uint _required) {\r\n\t\tm_numOwners = _owners.length + 1;\r\n\t\tm_owners[1] = uint(msg.sender);\r\n\t\tm_ownerIndex[uint(msg.sender)] = 1;\r\n\t\tfor (uint i = 0; i < _owners.length; ++i)\r\n\t\t{\r\n\t\t\tm_owners[2 + i] = uint(_owners[i]);\r\n\t\t\tm_ownerIndex[uint(_owners[i])] = 2 + i;\r\n\t\t}\r\n\t\tm_required = _required;\r\n\t}\r\n\r\n\t// Revokes a prior confirmation of the given operation\r\n\tfunction revoke(bytes32 _operation) external {\r\n\t\tuint ownerIndex = m_ownerIndex[uint(msg.sender)];\r\n\t\t// make sure they're an owner\r\n\t\tif (ownerIndex == 0) return;\r\n\t\tuint ownerIndexBit = 2**ownerIndex;\r\n\t\tvar pending = m_pending[_operation];\r\n\t\tif (pending.ownersDone & ownerIndexBit > 0) {\r\n\t\t\tpending.yetNeeded++;\r\n\t\t\tpending.ownersDone -= ownerIndexBit;\r\n\t\t\tRevoke(msg.sender, _operation);\r\n\t\t}\r\n\t}\r\n\r\n\t// Replaces an owner `_from` with another `_to`.\r\n\tfunction changeOwner(address _from, address _to) onlymanyowners(sha3(msg.data)) external {\r\n\t\tif (isOwner(_to)) return;\r\n\t\tuint ownerIndex = m_ownerIndex[uint(_from)];\r\n\t\tif (ownerIndex == 0) return;\r\n\r\n\t\tclearPending();\r\n\t\tm_owners[ownerIndex] = uint(_to);\r\n\t\tm_ownerIndex[uint(_from)] = 0;\r\n\t\tm_ownerIndex[uint(_to)] = ownerIndex;\r\n\t\tOwnerChanged(_from, _to);\r\n\t}\r\n\r\n\tfunction addOwner(address _owner) onlymanyowners(sha3(msg.data)) external {\r\n\t\tif (isOwner(_owner)) return;\r\n\r\n\t\tclearPending();\r\n\t\tif (m_numOwners >= c_maxOwners)\r\n\t\t\treorganizeOwners();\r\n\t\tif (m_numOwners >= c_maxOwners)\r\n\t\t\treturn;\r\n\t\tm_numOwners++;\r\n\t\tm_owners[m_numOwners] = uint(_owner);\r\n\t\tm_ownerIndex[uint(_owner)] = m_numOwners;\r\n\t\tOwnerAdded(_owner);\r\n\t}\r\n\r\n\tfunction removeOwner(address _owner) onlymanyowners(sha3(msg.data)) external {\r\n\t\tuint ownerIndex = m_ownerIndex[uint(_owner)];\r\n\t\tif (ownerIndex == 0) return;\r\n\t\tif (m_required > m_numOwners - 1) return;\r\n\r\n\t\tm_owners[ownerIndex] = 0;\r\n\t\tm_ownerIndex[uint(_owner)] = 0;\r\n\t\tclearPending();\r\n\t\treorganizeOwners(); //make sure m_numOwner is equal to the number of owners and always points to the optimal free slot\r\n\t\tOwnerRemoved(_owner);\r\n\t}\r\n\r\n\tfunction changeRequirement(uint _newRequired) onlymanyowners(sha3(msg.data)) external {\r\n\t\tif (_newRequired > m_numOwners) return;\r\n\t\tm_required = _newRequired;\r\n\t\tclearPending();\r\n\t\tRequirementChanged(_newRequired);\r\n\t}\r\n\r\n\t// Gets an owner by 0-indexed position (using numOwners as the count)\r\n\tfunction getOwner(uint ownerIndex) external constant returns (address) {\r\n\t\treturn address(m_owners[ownerIndex + 1]);\r\n\t}\r\n\r\n\tfunction isOwner(address _addr) returns (bool) {\r\n\t\treturn m_ownerIndex[uint(_addr)] > 0;\r\n\t}\r\n\r\n\tfunction hasConfirmed(bytes32 _operation, address _owner) constant returns (bool) {\r\n\t\tvar pending = m_pending[_operation];\r\n\t\tuint ownerIndex = m_ownerIndex[uint(_owner)];\r\n\r\n\t\t// make sure they're an owner\r\n\t\tif (ownerIndex == 0) return false;\r\n\r\n\t\t// determine the bit to set for this owner.\r\n\t\tuint ownerIndexBit = 2**ownerIndex;\r\n\t\treturn !(pending.ownersDone & ownerIndexBit == 0);\r\n\t}\r\n\r\n\t// INTERNAL METHODS\r\n\r\n\tfunction confirmAndCheck(bytes32 _operation) internal returns (bool) {\r\n\t\t// determine what index the present sender is:\r\n\t\tuint ownerIndex = m_ownerIndex[uint(msg.sender)];\r\n\t\t// make sure they're an owner\r\n\t\tif (ownerIndex == 0) return;\r\n\r\n\t\tvar pending = m_pending[_operation];\r\n\t\t// if we're not yet working on this operation, switch over and reset the confirmation status.\r\n\t\tif (pending.yetNeeded == 0) {\r\n\t\t\t// reset count of confirmations needed.\r\n\t\t\tpending.yetNeeded = m_required;\r\n\t\t\t// reset which owners have confirmed (none) - set our bitmap to 0.\r\n\t\t\tpending.ownersDone = 0;\r\n\t\t\tpending.index = m_pendingIndex.length++;\r\n\t\t\tm_pendingIndex[pending.index] = _operation;\r\n\t\t}\r\n\t\t// determine the bit to set for this owner.\r\n\t\tuint ownerIndexBit = 2**ownerIndex;\r\n\t\t// make sure we (the message sender) haven't confirmed this operation previously.\r\n\t\tif (pending.ownersDone & ownerIndexBit == 0) {\r\n\t\t\tConfirmation(msg.sender, _operation);\r\n\t\t\t// ok - check if count is enough to go ahead.\r\n\t\t\tif (pending.yetNeeded <= 1) {\r\n\t\t\t\t// enough confirmations: reset and run interior.\r\n\t\t\t\tdelete m_pendingIndex[m_pending[_operation].index];\r\n\t\t\t\tdelete m_pending[_operation];\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// not enough: record that this owner in particular confirmed.\r\n\t\t\t\tpending.yetNeeded--;\r\n\t\t\t\tpending.ownersDone |= ownerIndexBit;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction reorganizeOwners() private {\r\n\t\tuint free = 1;\r\n\t\twhile (free < m_numOwners)\r\n\t\t{\r\n\t\t\twhile (free < m_numOwners && m_owners[free] != 0) free++;\r\n\t\t\twhile (m_numOwners > 1 && m_owners[m_numOwners] == 0) m_numOwners--;\r\n\t\t\tif (free < m_numOwners && m_owners[m_numOwners] != 0 && m_owners[free] == 0)\r\n\t\t\t{\r\n\t\t\t\tm_owners[free] = m_owners[m_numOwners];\r\n\t\t\t\tm_ownerIndex[m_owners[free]] = free;\r\n\t\t\t\tm_owners[m_numOwners] = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction clearPending() internal {\r\n\t\tuint length = m_pendingIndex.length;\r\n\t\tfor (uint i = 0; i < length; ++i)\r\n\t\t\tif (m_pendingIndex[i] != 0)\r\n\t\t\t\tdelete m_pending[m_pendingIndex[i]];\r\n\t\tdelete m_pendingIndex;\r\n\t}\r\n\r\n\t// FIELDS\r\n\r\n\t// the number of owners that must confirm the same operation before it is run.\r\n\tuint public m_required;\r\n\t// pointer used to find a free slot in m_owners\r\n\tuint public m_numOwners;\r\n\r\n\t// list of owners\r\n\tuint[256] m_owners;\r\n\tuint constant c_maxOwners = 250;\r\n\t// index on the list of owners to allow reverse lookup\r\n\tmapping(uint => uint) m_ownerIndex;\r\n\t// the ongoing operations.\r\n\tmapping(bytes32 => PendingState) m_pending;\r\n\tbytes32[] m_pendingIndex;\r\n}\r\n\r\n// inheritable \"property\" contract that enables methods to be protected by placing a linear limit (specifiable)\r\n// on a particular resource per calendar day. is multiowned to allow the limit to be altered. resource that method\r\n// uses is specified in the modifier.\r\ncontract daylimit is multiowned {\r\n\r\n\t// METHODS\r\n\r\n\t// constructor - stores initial daily limit and records the present day's index.\r\n\tfunction daylimit(uint _limit) {\r\n\t\tm_dailyLimit = _limit;\r\n\t\tm_lastDay = today();\r\n\t}\r\n\t// (re)sets the daily limit. needs many of the owners to confirm. doesn't alter the amount already spent today.\r\n\tfunction setDailyLimit(uint _newLimit) onlymanyowners(sha3(msg.data)) external {\r\n\t\tm_dailyLimit = _newLimit;\r\n\t}\r\n\t// resets the amount already spent today. needs many of the owners to confirm.\r\n\tfunction resetSpentToday() onlymanyowners(sha3(msg.data)) external {\r\n\t\tm_spentToday = 0;\r\n\t}\r\n\r\n\t// INTERNAL METHODS\r\n\r\n\t// checks to see if there is at least `_value` left from the daily limit today. if there is, subtracts it and\r\n\t// returns true. otherwise just returns false.\r\n\tfunction underLimit(uint _value) internal onlyowner returns (bool) {\r\n\t\t// reset the spend limit if we're on a different day to last time.\r\n\t\tif (today() > m_lastDay) {\r\n\t\t\tm_spentToday = 0;\r\n\t\t\tm_lastDay = today();\r\n\t\t}\r\n\t\t// check to see if there's enough left - if so, subtract and return true.\r\n\t\t// overflow protection                    // dailyLimit check\r\n\t\tif (m_spentToday + _value >= m_spentToday && m_spentToday + _value <= m_dailyLimit) {\r\n\t\t\tm_spentToday += _value;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t// determines today's index.\r\n\tfunction today() private constant returns (uint) { return now / 1 days; }\r\n\r\n\t// FIELDS\r\n\r\n\tuint public m_dailyLimit;\r\n\tuint public m_spentToday;\r\n\tuint public m_lastDay;\r\n}\r\n\r\n// interface contract for multisig proxy contracts; see below for docs.\r\ncontract multisig {\r\n\r\n\t// EVENTS\r\n\r\n\t// logged events:\r\n\t// Funds has arrived into the wallet (record how much).\r\n\tevent Deposit(address _from, uint value);\r\n\t// Single transaction going out of the wallet (record who signed for it, how much, and to whom it's going).\r\n\tevent SingleTransact(address owner, uint value, address to, bytes data, address created);\r\n\t// Multi-sig transaction going out of the wallet (record who signed for it last, the operation hash, how much, and to whom it's going).\r\n\tevent MultiTransact(address owner, bytes32 operation, uint value, address to, bytes data, address created);\r\n\t// Confirmation still needed for a transaction.\r\n\tevent ConfirmationNeeded(bytes32 operation, address initiator, uint value, address to, bytes data);\r\n\r\n\t// FUNCTIONS\r\n\r\n\t// TODO: document\r\n\tfunction changeOwner(address _from, address _to) external;\r\n\tfunction execute(address _to, uint _value, bytes _data) external returns (bytes32 o_hash);\r\n\tfunction confirm(bytes32 _h) returns (bool o_success);\r\n}\r\n\r\n// usage:\r\n// bytes32 h = Wallet(w).from(oneOwner).execute(to, value, data);\r\n// Wallet(w).from(anotherOwner).confirm(h);\r\ncontract Wallet is multisig, multiowned, daylimit {\r\n\r\n\t// TYPES\r\n\r\n\t// Transaction structure to remember details of transaction lest it need be saved for a later call.\r\n\tstruct Transaction {\r\n\t\taddress to;\r\n\t\tuint value;\r\n\t\tbytes data;\r\n\t}\r\n\r\n\t// METHODS\r\n\r\n\t// constructor - just pass on the owner array to the multiowned and\r\n\t// the limit to daylimit\r\n\tfunction Wallet(address[] _owners, uint _required, uint _daylimit)\r\n\t\t\tmultiowned(_owners, _required) daylimit(_daylimit) {\r\n\t}\r\n\r\n\t// kills the contract sending everything to `_to`.\r\n\tfunction kill(address _to) onlymanyowners(sha3(msg.data)) external {\r\n\t\tsuicide(_to);\r\n\t}\r\n\r\n\t// gets called when no other function matches\r\n\tfunction() payable {\r\n\t\t// just being sent some cash?\r\n\t\tif (msg.value > 0)\r\n\t\t\tDeposit(msg.sender, msg.value);\r\n\t}\r\n\r\n\t// Outside-visible transact entry point. Executes transaction immediately if below daily spend limit.\r\n\t// If not, goes into multisig process. We provide a hash on return to allow the sender to provide\r\n\t// shortcuts for the other confirmations (allowing them to avoid replicating the _to, _value\r\n\t// and _data arguments). They still get the option of using them if they want, anyways.\r\n\tfunction execute(address _to, uint _value, bytes _data) external onlyowner returns (bytes32 o_hash) {\r\n\t\t// first, take the opportunity to check that we're under the daily limit.\r\n\t\tif ((_data.length == 0 && underLimit(_value)) || m_required == 1) {\r\n\t\t\t// yes - just execute the call.\r\n\t\t\taddress created;\r\n\t\t\tif (_to == 0) {\r\n\t\t\t\tcreated = create(_value, _data);\r\n\t\t\t} else {\r\n\t\t\t\tif (!_to.call.value(_value)(_data))\r\n\t\t\t\t\tthrow;\r\n\t\t\t}\r\n\t\t\tSingleTransact(msg.sender, _value, _to, _data, created);\r\n\t\t} else {\r\n\t\t\t// determine our operation hash.\r\n\t\t\to_hash = sha3(msg.data, block.number);\r\n\t\t\t// store if it's new\r\n\t\t\tif (m_txs[o_hash].to == 0 && m_txs[o_hash].value == 0 && m_txs[o_hash].data.length == 0) {\r\n\t\t\t\tm_txs[o_hash].to = _to;\r\n\t\t\t\tm_txs[o_hash].value = _value;\r\n\t\t\t\tm_txs[o_hash].data = _data;\r\n\t\t\t}\r\n\t\t\tif (!confirm(o_hash)) {\r\n\t\t\t\tConfirmationNeeded(o_hash, msg.sender, _value, _to, _data);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction create(uint _value, bytes _code) internal returns (address o_addr) {\r\n\t\tassembly {\r\n\t\t\to_addr := create(_value, add(_code, 0x20), mload(_code))\r\n\t\t\tjumpi(invalidJumpLabel, iszero(extcodesize(o_addr)))\r\n\t\t}\r\n\t}\r\n\r\n\t// confirm a transaction through just the hash. we use the previous transactions map, m_txs, in order\r\n\t// to determine the body of the transaction from the hash provided.\r\n\tfunction confirm(bytes32 _h) onlymanyowners(_h) returns (bool o_success) {\r\n\t\tif (m_txs[_h].to != 0 || m_txs[_h].value != 0 || m_txs[_h].data.length != 0) {\r\n\t\t\taddress created;\r\n\t\t\tif (m_txs[_h].to == 0) {\r\n\t\t\t\tcreated = create(m_txs[_h].value, m_txs[_h].data);\r\n\t\t\t} else {\r\n\t\t\t\tif (!m_txs[_h].to.call.value(m_txs[_h].value)(m_txs[_h].data))\r\n\t\t\t\t\tthrow;\r\n\t\t\t}\r\n\r\n\t\t\tMultiTransact(msg.sender, _h, m_txs[_h].value, m_txs[_h].to, m_txs[_h].data, created);\r\n\t\t\tdelete m_txs[_h];\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t// INTERNAL METHODS\r\n\r\n\tfunction clearPending() internal {\r\n\t\tuint length = m_pendingIndex.length;\r\n\t\tfor (uint i = 0; i < length; ++i)\r\n\t\t\tdelete m_txs[m_pendingIndex[i]];\r\n\t\tsuper.clearPending();\r\n\t}\r\n\r\n\t// FIELDS\r\n\r\n\t// pending transactions we have at present.\r\n\tmapping (bytes32 => Transaction) m_txs;\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_numOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_lastDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetSpentToday\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_spentToday\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_required\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_h\",\"type\":\"bytes32\"}],\"name\":\"confirm\",\"outputs\":[{\"name\":\"o_success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setDailyLimit\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"name\":\"o_hash\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operation\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRequired\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operation\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"hasConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ownerIndex\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_dailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_required\",\"type\":\"uint256\"},{\"name\":\"_daylimit\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newRequirement\",\"type\":\"uint256\"}],\"name\":\"RequirementChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"created\",\"type\":\"address\"}],\"name\":\"SingleTransact\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"created\",\"type\":\"address\"}],\"name\":\"MultiTransact\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ConfirmationNeeded\",\"type\":\"event\"}]", "ContractName": "Wallet", "CompilerVersion": "v0.4.10+commit.f0d539ae", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000002b5e3af16b188000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000009a6a1826c513d93093bee431d9d97eacf76384ba00000000000000000000000013adf7762bbc0a2f23bedcdac4b5a1f65307c502", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://4a1327fb8dccc28c1a3f6acb9bf799dcda39cd4ced156f63d7275aa31e7c783a"}