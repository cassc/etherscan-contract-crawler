{"SourceCode": "#pragma version 0.3.10\r\n#pragma optimize gas\r\n#pragma evm-version shanghai\r\n\"\"\"\r\n@title Offramp TWAP Bot on ETH\r\n@license Apache 2.0\r\n@author Volume.finance\r\n\"\"\"\r\n\r\nstruct SwapInfo:\r\n    route: address[11]\r\n    swap_params: uint256[5][5]\r\n    amount: uint256\r\n    expected: uint256\r\n    pools: address[5]\r\n\r\ninterface WrappedEth:\r\n    def deposit(): payable\r\n\r\ninterface CurveSwapRouter:\r\n    def exchange(\r\n        _route: address[11],\r\n        _swap_params: uint256[5][5],\r\n        _amount: uint256,\r\n        _expected: uint256,\r\n        _pools: address[5]\r\n    ) -> uint256: payable\r\n\r\ninterface ERC20:\r\n    def approve(_spender: address, _value: uint256) -> bool: nonpayable\r\n    def transferFrom(_from: address, _to: address, _value: uint256) -> bool: nonpayable\r\n\r\ninterface DaiBridge:\r\n    def relayTokens(_receiver: address, _amount: uint256): nonpayable\r\n\r\nVETH: constant(address) = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE # Virtual ETH\r\nDAI: immutable(address)\r\nBRIDGE: immutable(address)\r\nROUTER: immutable(address)\r\nMAX_SIZE: constant(uint256) = 8\r\nOPPOSITE: public(immutable(address))\r\nnext_deposit: public(uint256)\r\n\r\nevent Deposited:\r\n    deposit_id: uint256\r\n    token0: address\r\n    amount0: uint256\r\n    amount1: uint256\r\n    depositor: address\r\n    number_trades: uint256\r\n    interval: uint256\r\n\r\nevent UpdateOpposite:\r\n    old_opposite: address\r\n    new_opposite: address\r\n\r\n@external\r\ndef __init__(dai: address, bridge: address, router: address, opposite: address):\r\n    ROUTER = router\r\n    DAI = dai\r\n    BRIDGE = bridge\r\n    OPPOSITE = opposite\r\n\r\n@external\r\n@payable\r\n@nonreentrant('lock')\r\ndef deposit(swap_infos: DynArray[SwapInfo, MAX_SIZE], number_trades: uint256, interval: uint256):\r\n    _value: uint256 = msg.value\r\n    _next_deposit: uint256 = self.next_deposit\r\n    dai_amount: uint256 = 0\r\n    for swap_info in swap_infos:\r\n        last_index: uint256 = 0\r\n        for i in range(6):\r\n            last_index = unsafe_sub(10, unsafe_add(i, i))\r\n            if swap_info.route[last_index] != empty(address):\r\n                break\r\n        assert swap_info.route[last_index] == DAI\r\n        assert swap_info.amount > 0, \"Insuf deposit\"\r\n        out_amount: uint256 = 0\r\n        if swap_info.route[0] == VETH:\r\n            assert _value >= swap_info.amount, \"Insuf deposit\"\r\n            _value = unsafe_sub(_value, swap_info.amount)\r\n            out_amount = CurveSwapRouter(ROUTER).exchange(swap_info.route, swap_info.swap_params, swap_info.amount, swap_info.expected, swap_info.pools, value=swap_info.amount)\r\n        elif swap_info.route[0] == DAI:\r\n            assert ERC20(DAI).transferFrom(msg.sender, self, swap_info.amount, default_return_value=True), \"TF fail\"\r\n            out_amount = swap_info.amount\r\n        else:\r\n            assert ERC20(swap_info.route[0]).transferFrom(msg.sender, self, swap_info.amount, default_return_value=True), \"TF fail\"\r\n            assert ERC20(swap_info.route[0]).approve(ROUTER, swap_info.amount, default_return_value=True), \"Ap fail\"\r\n            out_amount = CurveSwapRouter(ROUTER).exchange(swap_info.route, swap_info.swap_params, swap_info.amount, swap_info.expected, swap_info.pools)\r\n        dai_amount += out_amount\r\n        log Deposited(_next_deposit, swap_info.route[0], swap_info.amount, out_amount, msg.sender, number_trades, interval)\r\n    assert dai_amount > 0, \"Insuf deposit\"\r\n    assert ERC20(DAI).approve(BRIDGE, dai_amount, default_return_value=True), \"Ap fail\"\r\n    DaiBridge(BRIDGE).relayTokens(OPPOSITE, dai_amount)\r\n    _next_deposit = unsafe_add(_next_deposit, 1)\r\n    self.next_deposit = _next_deposit\r\n    if _value > 0:\r\n        send(msg.sender, _value)\r\n\r\n@external\r\n@payable\r\ndef __default__():\r\n    pass", "ABI": "[{\"name\":\"Deposited\",\"inputs\":[{\"name\":\"deposit_id\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"token0\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount0\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"amount1\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"depositor\",\"type\":\"address\",\"indexed\":false},{\"name\":\"number_trades\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"interval\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateOpposite\",\"inputs\":[{\"name\":\"old_opposite\",\"type\":\"address\",\"indexed\":false},{\"name\":\"new_opposite\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"dai\",\"type\":\"address\"},{\"name\":\"bridge\",\"type\":\"address\"},{\"name\":\"router\",\"type\":\"address\"},{\"name\":\"opposite\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"swap_infos\",\"type\":\"tuple[]\",\"components\":[{\"name\":\"route\",\"type\":\"address[11]\"},{\"name\":\"swap_params\",\"type\":\"uint256[5][5]\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expected\",\"type\":\"uint256\"},{\"name\":\"pools\",\"type\":\"address[5]\"}]},{\"name\":\"number_trades\",\"type\":\"uint256\"},{\"name\":\"interval\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"OPPOSITE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"next_deposit\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]}]", "ContractName": "Offramp TWAP Bot on ETH", "CompilerVersion": "vyper:0.3.10", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000004aa42145aa6ebf72e164c9bbc74fbd3788045016000000000000000000000000f0d4c12a5768d806021f80a262b4d39d26c58b8d00000000000000000000000048afa99cd4166d89718cba46db7e1eeb99535b46", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": ""}