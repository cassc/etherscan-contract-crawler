{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/RC.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./interface/IPair.sol\\\";\\n\\ncontract RC is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct Subscription {\\n        bool active;\\n        uint256 validityPeriod;\\n        uint256 priceInQuoteToken;\\n        address paymentToken;\\n        address exchangePair;\\n        uint256 recoveryTokenLimit;\\n        uint256 penaltyBP; //penalty for late payment (without an insured event)\\n        uint256 erc20FeeBP; // commission from all erc20 balances for late payment (insured event)\\n        uint256 erc20PenaltyBP; // penalty from all erc20 balances in case of an insured event (not exist if there is a commission above)\\n    }\\n\\n    struct Insurance {\\n        bool autopayment;\\n        uint256 subscriptionID;\\n        uint256 expirationTime;\\n        uint256 voteQuorum;\\n        uint256 rcCount;\\n        address backupWallet;\\n        address[] validators;\\n    }\\n\\n    struct NFTinfo {\\n        address nftAddress;\\n        uint256[] ids;\\n    }\\n\\n    struct Propose {\\n        bool executed;\\n        address newBackupWallet;\\n        uint256 deadline;\\n        uint256 executionTime;\\n        uint256 votersBits;\\n    }\\n\\n    enum ProposalState {\\n        Unknown,\\n        Failed,\\n        Executed,\\n        Active,\\n        Succeeded,\\n        ExecutionWaiting\\n    }\\n\\n    uint256 public constant EXECUTION_LOCK_PERIOD = 1 days;\\n    uint256 public constant VOTING_PERIOD = 7 days;\\n    uint256 public constant BASE_POINT = 10000;\\n    uint256 public constant MAX_ERC20_PENALTY_BP = 2000; // 20%\\n    uint256 public constant MAX_ERC20_FEE_BP = 1000; // 10%\\n    uint256 public constant MAX_FEE_PENALTY_BP = 10000; // +100%\\n    uint256 public constant MAX_VALIDATORS = 30;\\n    uint256 public constant TRIAL_ID = 0;\\n    uint256 public constant FREEMIUM_ID = 1;\\n    address public immutable quoteTokenAddress;\\n    address public feeAddress;\\n    address public paymentAdmin;\\n\\n    //   insurance creator => Insurance\\n    mapping(address => Insurance) public insurances;\\n\\n    //   insurance creator => Propose\\n    mapping(address => Propose) public proposals;\\n\\n    Subscription[] public subscriptions;\\n\\n    modifier validSubscriptionID(uint256 _sid) {\\n        require(\\n            _sid < subscriptions.length && subscriptions[_sid].active,\\n            \\\"subscription is not valid\\\"\\n        );\\n        _;\\n    }\\n\\n    event AutopaymentChanged(address user, bool active);\\n    event BackupWalletChanged(address user, address newBackupWallet);\\n    event SubscriptionsAdded(Subscription _subscription);\\n    event SubscriptionStateChanged(uint256 subscriptionID, bool active);\\n    event ValidatorsChanged(\\n        address user,\\n        uint256 newVoteQuorum,\\n        address[] newValidators\\n    );\\n\\n    event CreateInsurance(\\n        address creator,\\n        uint256 priceInPaymentToken,\\n        Insurance userInsurance\\n    );\\n    event UpgradeInsurancePlan(\\n        address user,\\n        uint256 newSubscriptionID,\\n        uint256 expirationTime,\\n        uint256 priceInPaymentToken\\n    );\\n    event BillPayment(\\n        address payer,\\n        address insuranceOwner,\\n        uint256 amountInPaymentToken,\\n        uint256 newexpirationTime,\\n        bool withPenalty\\n    );\\n    event InsuranceEvent(\\n        address insuranceOwner,\\n        address backupWallet,\\n        uint256 recoveryTokensCount\\n    );\\n    event ProposalCreated(\\n        address insuranceOwner,\\n        address newBackupWallet,\\n        address proposer\\n    );\\n    event Vote(\\n        address insuranceOwner,\\n        address newBackupWallet,\\n        address validator\\n    );\\n    event ProposalConfirmed(address insuranceOwner, address newBackupWallet);\\n    event ProposalExecuted(address insuranceOwner, address newBackupWallet);\\n\\n    constructor(\\n        address _feeAddress,\\n        address _paymentAdmin,\\n        address _quoteTokenAddress\\n    ) {\\n        // TRIAL\\n        subscriptions.push(\\n            Subscription(\\n                true,\\n                30 days,\\n                0,\\n                address(0),\\n                address(0),\\n                0, //recoveryTokenLimit\\n                0, // penaltyBP +100%\\n                0, //erc20FeeBP 0%\\n                0 // erc20PenaltyBP 20%\\n            )\\n        );\\n        \\n        // FREEMIUM\\n        subscriptions.push(\\n            Subscription(\\n                true,\\n                300000 days,\\n                0,\\n                address(0),\\n                address(0),\\n                1, //recoveryTokenLimit\\n                0, // penaltyBP +100%\\n                200, //erc20FeeBP 2%\\n                0 // erc20PenaltyBP 20%\\n            )\\n        );\\n\\n        feeAddress = _feeAddress;\\n        paymentAdmin = _paymentAdmin;\\n        quoteTokenAddress = _quoteTokenAddress;\\n    }\\n\\n    function setFeeAddress(address _feeAddress) external onlyOwner {\\n        feeAddress = _feeAddress;\\n    }\\n\\n    /**\\n     * @param _paymentAdmin: address of the auto payment bot\\n     */\\n    function setPaymentAdminAddress(address _paymentAdmin) external onlyOwner {\\n        paymentAdmin = _paymentAdmin;\\n    }\\n\\n    /**\\n     * @notice add new payment plan\\n     */\\n    function addSubscription(\\n        Subscription calldata _subscription\\n    ) external onlyOwner {\\n        require(\\n            _subscription.paymentToken !=address(0) \\n            || _subscription.priceInQuoteToken == 0, \\n            \\\"paymentToken cannot be zero address\\\"\\n        );\\n        if (_subscription.exchangePair != address(0)) {\\n            require(\\n                _subscription.priceInQuoteToken > 0,\\n                \\\"priceInQuoteToken cannot be zero\\\"\\n            );\\n            //not free\\n            IPair pair = IPair(_subscription.exchangePair);\\n            address token0 = pair.token0();\\n            address token1 = pair.token1();\\n            require(\\n                (token0 == quoteTokenAddress &&\\n                    token1 == _subscription.paymentToken) ||\\n                    (token0 == _subscription.paymentToken &&\\n                        token1 == quoteTokenAddress),\\n                \\\"bad exchangePair address\\\"\\n            );\\n        }\\n        require(\\n            _subscription.validityPeriod > 0,\\n            \\\"validityPeriod cannot be zero\\\"\\n        );\\n        require(\\n            _subscription.erc20FeeBP <= MAX_ERC20_FEE_BP,\\n            \\\"erc20FeeBP is too large\\\"\\n        );\\n        require(\\n            _subscription.erc20PenaltyBP <= MAX_ERC20_PENALTY_BP,\\n            \\\"erc20PenaltyBP is too large\\\"\\n        );\\n        require(\\n            _subscription.penaltyBP <= MAX_FEE_PENALTY_BP,\\n            \\\"penaltyBP is too large\\\"\\n        );\\n        subscriptions.push(_subscription);\\n        emit SubscriptionsAdded(_subscription);\\n    }\\n\\n    /**\\n     * @notice activate-deactivate a subscription\\n     */\\n    function subscriptionStateChange(\\n        uint256 _sId,\\n        bool _active\\n    ) external onlyOwner {\\n        subscriptions[_sId].active = _active;\\n        emit SubscriptionStateChanged(_sId, _active);\\n    }\\n\\n    function getPriceInPaymentToken(\\n        address _pair,\\n        uint256 _priceInQuoteToken\\n    ) public view returns (uint256) {\\n\\n        if (_priceInQuoteToken > 0) {\\n            if (_pair == address(0)) {\\n                return (_priceInQuoteToken);\\n            }\\n            IPair pair = IPair(_pair);\\n            (uint112 reserves0, uint112 reserves1, ) = pair.getReserves();\\n            (uint112 reserveQuote, uint112 reserveBase) = pair.token0() ==\\n                quoteTokenAddress\\n                ? (reserves0, reserves1)\\n                : (reserves1, reserves0);\\n\\n            if (reserveQuote > 0 && reserveBase > 0) {\\n                return (_priceInQuoteToken * reserveBase) / reserveQuote + 1;\\n            } else {\\n                revert(\\\"can't determine price\\\");\\n            }\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function checkInsurance(\\n        address _insuranceOwner\\n    ) private view returns (Insurance memory) {\\n        Insurance memory userInsurance = insurances[_insuranceOwner];\\n        require(\\n            userInsurance.backupWallet != address(0),\\n            \\\"insurance not found\\\"\\n        );\\n        return userInsurance;\\n    }\\n\\n    /**\\n     * @notice the weight of the validator's vote in case of repetition of the address in _validators increases\\n     */\\n    function setValidators(\\n        address[] calldata _validators,\\n        uint256 _voteQuorum\\n    ) external {\\n        require(_validators.length <= MAX_VALIDATORS, \\\"too many validators\\\");\\n        require(_validators.length >= _voteQuorum, \\\"bad quorum value\\\");\\n        Insurance memory userInsurance = checkInsurance(msg.sender);\\n        // reset current voting state\\n        delete proposals[msg.sender];\\n        userInsurance.validators = _validators;\\n        userInsurance.voteQuorum = _voteQuorum;\\n        insurances[msg.sender] = userInsurance;\\n        emit ValidatorsChanged(msg.sender, _voteQuorum, _validators);\\n    }\\n\\n    // approve auto-renewal subscription ( auto payment )\\n    function setAutopayment(bool _autopayment) external {\\n        checkInsurance(msg.sender);\\n        insurances[msg.sender].autopayment = _autopayment;\\n        emit AutopaymentChanged(msg.sender, _autopayment);\\n    }\\n\\n    function setBackupWallet(address _backupWallet) external {\\n        checkInsurance(msg.sender);\\n        insurances[msg.sender].backupWallet = _backupWallet;\\n        emit BackupWalletChanged(msg.sender, _backupWallet);\\n    }\\n\\n    function createInsurance(\\n        address _backupWallet,\\n        address[] calldata _validators,\\n        uint256 _voteQuorum,\\n        uint256 _subscriptionID,\\n        bool _autopayment\\n    ) external validSubscriptionID(_subscriptionID) {\\n        Insurance memory userInsurance = insurances[msg.sender];\\n        Subscription memory paymentPlan = subscriptions[_subscriptionID];\\n\\n        require(\\n            userInsurance.backupWallet == address(0) || // create new\\n                (userInsurance.subscriptionID == TRIAL_ID &&\\n                    _subscriptionID != TRIAL_ID), // after trial\\n            \\\"already created\\\"\\n        );\\n        require(\\n            _backupWallet != address(0),\\n            \\\"backupWallet cannot be zero address\\\"\\n        );\\n\\n        require(_validators.length >= _voteQuorum, \\\"bad _voteQuorum value\\\");\\n        require(_validators.length <= MAX_VALIDATORS, \\\"too many validators\\\");\\n\\n        delete proposals[msg.sender];\\n\\n        uint256 priceInPaymentToken = getPriceInPaymentToken(\\n                    paymentPlan.exchangePair,\\n                    paymentPlan.priceInQuoteToken\\n                );\\n\\n        if (priceInPaymentToken > 0) {\\n            IERC20(paymentPlan.paymentToken).safeTransferFrom(\\n                msg.sender,\\n                feeAddress,\\n                priceInPaymentToken\\n            );\\n        }\\n        uint256 expirationTime = block.timestamp + paymentPlan.validityPeriod;\\n        userInsurance = Insurance({\\n            autopayment: _autopayment,\\n            subscriptionID: _subscriptionID,\\n            expirationTime: expirationTime,\\n            voteQuorum: _voteQuorum,\\n            rcCount: 0,\\n            backupWallet: _backupWallet,\\n            validators: _validators\\n        });\\n\\n        insurances[msg.sender] = userInsurance;\\n\\n        emit CreateInsurance(msg.sender, priceInPaymentToken, userInsurance);\\n    }\\n\\n    function upgradeInsurancePlan(\\n        uint256 _subscriptionID\\n    ) external validSubscriptionID(_subscriptionID) {\\n        Insurance memory userInsurance = checkInsurance(msg.sender);\\n\\n        require(_subscriptionID != TRIAL_ID, \\\"can`t up to TRIAL\\\");\\n        require(\\n            userInsurance.subscriptionID != _subscriptionID,\\n            \\\"already upgraded\\\"\\n        );\\n        \\n        require(\\n            block.timestamp <= userInsurance.expirationTime ||\\n                subscriptions[userInsurance.subscriptionID].priceInQuoteToken ==\\n                0,\\n            \\\"current insurance expired,payment require\\\"\\n        );\\n\\n        Subscription memory paymentPlan = subscriptions[_subscriptionID];\\n\\n        userInsurance.subscriptionID = _subscriptionID;\\n        userInsurance.expirationTime =\\n            block.timestamp +\\n            paymentPlan.validityPeriod;\\n\\n        uint256 priceInPaymentToken = getPriceInPaymentToken(\\n                    paymentPlan.exchangePair,\\n                    paymentPlan.priceInQuoteToken\\n                );\\n\\n        if (priceInPaymentToken > 0) {\\n            IERC20(paymentPlan.paymentToken).safeTransferFrom(\\n                msg.sender,\\n                feeAddress,\\n                priceInPaymentToken\\n            );\\n        }\\n        insurances[msg.sender] = userInsurance;\\n\\n        emit UpgradeInsurancePlan(\\n            msg.sender,\\n            _subscriptionID,\\n            userInsurance.expirationTime,\\n            priceInPaymentToken\\n        );\\n    }\\n\\n    /**\\n     * @notice auto-renewal of the insurance subscription by the payment bot(paymentAdmin)\\n     */\\n    function autoPayment(address insuranceOwner) external {\\n        require(paymentAdmin == msg.sender, \\\"paymentAdmin only\\\");\\n        Insurance memory userInsurance = checkInsurance(insuranceOwner);\\n        require(block.timestamp > userInsurance.expirationTime, \\\"too early\\\");\\n        require(userInsurance.autopayment, \\\"autopayment disabled\\\");\\n        _billPayment(insuranceOwner, insuranceOwner, userInsurance, false);\\n        insurances[insuranceOwner] = userInsurance;\\n    }\\n\\n    /**\\n     * @notice renewal of the insurance subscription by the creator\\n     */\\n    function billPayment() external {\\n        Insurance memory userInsurance = checkInsurance(msg.sender);\\n        _billPayment(msg.sender, msg.sender, userInsurance, false);\\n        insurances[msg.sender] = userInsurance;\\n    }\\n\\n    function _billPayment(\\n        address payer,\\n        address insuranceOwner,\\n        Insurance memory userInsurance,\\n        bool penalty\\n    ) private {\\n        Subscription memory userPaymentPlan = subscriptions[\\n            userInsurance.subscriptionID\\n        ];\\n        require(\\n            userPaymentPlan.priceInQuoteToken > 0,\\n            \\\"not allowed for a free subscription\\\"\\n        );\\n        uint256 paymentDebtInQuoteToken;\\n        uint256 debtPeriods;\\n        if (block.timestamp > userInsurance.expirationTime) {\\n            unchecked {\\n                debtPeriods =\\n                    (block.timestamp - userInsurance.expirationTime) /\\n                    userPaymentPlan.validityPeriod;\\n            }\\n            paymentDebtInQuoteToken =\\n                debtPeriods *\\n                userPaymentPlan.priceInQuoteToken;\\n        }\\n\\n        uint256 amountInPaymentToken = getPriceInPaymentToken(\\n                    userPaymentPlan.exchangePair,\\n                    userPaymentPlan.priceInQuoteToken\\n                ) + paymentDebtInQuoteToken;\\n\\n        if (penalty) {\\n            amountInPaymentToken += ((amountInPaymentToken *\\n                userPaymentPlan.penaltyBP) / BASE_POINT);\\n        }\\n\\n        IERC20(userPaymentPlan.paymentToken).safeTransferFrom(\\n            payer,\\n            feeAddress,\\n            amountInPaymentToken\\n        );\\n\\n        userInsurance.expirationTime +=\\n            userPaymentPlan.validityPeriod *\\n            (debtPeriods + 1);\\n\\n        emit BillPayment(\\n            payer,\\n            insuranceOwner,\\n            amountInPaymentToken,\\n            userInsurance.expirationTime,\\n            penalty\\n        );\\n    }\\n\\n    /**\\n     * @notice wallet recovery\\n     * call from backup wallet\\n     * @param insuranceOwner: recovery wallet address\\n     * withdrawal info:\\n     * @param erc20Tokens: array of erc20 tokens\\n     * @param erc721Tokens: array of {address nftAddress;uint256[] ids;} objects\\n     * @param erc1155Tokens: array of {address nftAddress;uint256[] ids;} objects\\n     */\\n    function insuranceEvent(\\n        address insuranceOwner,\\n        IERC20[] calldata erc20Tokens,\\n        NFTinfo[] calldata erc721Tokens,\\n        NFTinfo[] calldata erc1155Tokens\\n    ) external {\\n        Insurance memory userInsurance = checkInsurance(insuranceOwner);\\n        require(userInsurance.backupWallet == msg.sender, \\\"backupWallet only\\\");\\n        Subscription memory userPaymentPlan = subscriptions[\\n            userInsurance.subscriptionID\\n        ];\\n\\n        if (userPaymentPlan.recoveryTokenLimit > 0) {\\n            userInsurance.rcCount += erc20Tokens.length;\\n            for (uint256 i = 0; i < erc721Tokens.length; i++) {\\n                userInsurance.rcCount += erc721Tokens[i].ids.length;\\n            }\\n            for (uint256 i = 0; i < erc1155Tokens.length; i++) {\\n                userInsurance.rcCount += erc1155Tokens[i].ids.length;\\n            }\\n            require(\\n                userInsurance.rcCount <= userPaymentPlan.recoveryTokenLimit,\\n                \\\"recoveryTokenLimit exceeded\\\"\\n            );\\n        }\\n\\n        bool penalty;\\n\\n        if (userInsurance.subscriptionID == FREEMIUM_ID) {\\n            require(\\n                erc20Tokens.length == 1 &&\\n                    address(erc20Tokens[0]) == quoteTokenAddress &&\\n                    erc721Tokens.length == 0 &&\\n                    erc1155Tokens.length == 0,\\n                \\\"invalid tokens, the current subscription does not allow recovering these tokens\\\"\\n            );\\n        }\\n        if (block.timestamp > userInsurance.expirationTime) {\\n            require(\\n                userInsurance.subscriptionID != TRIAL_ID,\\n                \\\"trial period expired\\\"\\n            );\\n\\n            if (userPaymentPlan.priceInQuoteToken > 0) {\\n                penalty = true;\\n                // backupWallet is payer\\n                _billPayment(\\n                    msg.sender,\\n                    insuranceOwner,\\n                    userInsurance,\\n                    penalty\\n                );\\n            }\\n        }\\n\\n        insurances[insuranceOwner] = userInsurance;\\n\\n        // ERC20\\n        for (uint256 i = 0; i < erc20Tokens.length; i++) {\\n            uint256 balance = erc20Tokens[i].balanceOf(insuranceOwner);\\n            uint256 erc20PenaltyAmount;\\n\\n            if (balance > 0) {\\n                erc20PenaltyAmount =\\n                    (\\n                        penalty\\n                            ? (balance * userPaymentPlan.erc20PenaltyBP)\\n                            : (balance * userPaymentPlan.erc20FeeBP)\\n                    ) /\\n                    BASE_POINT;\\n                if (erc20PenaltyAmount > 0) {\\n                    erc20Tokens[i].safeTransferFrom(\\n                        insuranceOwner,\\n                        feeAddress,\\n                        erc20PenaltyAmount\\n                    );\\n                }\\n                erc20Tokens[i].safeTransferFrom(\\n                    insuranceOwner,\\n                    msg.sender,\\n                    balance - erc20PenaltyAmount\\n                );\\n            }\\n        }\\n\\n        // ERC721\\n        for (uint256 i = 0; i < erc721Tokens.length; i++) {\\n            NFTinfo memory nft721 = erc721Tokens[i];\\n            for (uint256 x = 0; x < nft721.ids.length; x++) {\\n                IERC721(nft721.nftAddress).safeTransferFrom(\\n                    insuranceOwner,\\n                    msg.sender,\\n                    nft721.ids[x]\\n                );\\n            }\\n        }\\n\\n        // ERC1155\\n        for (uint256 i = 0; i < erc1155Tokens.length; i++) {\\n            NFTinfo memory nft1155 = erc1155Tokens[i];\\n            uint256[] memory batchBalances = new uint256[](nft1155.ids.length);\\n            for (uint256 x = 0; x < nft1155.ids.length; ++x) {\\n                batchBalances[x] = IERC1155(nft1155.nftAddress).balanceOf(\\n                    insuranceOwner,\\n                    nft1155.ids[x]\\n                );\\n            }\\n            IERC1155(nft1155.nftAddress).safeBatchTransferFrom(\\n                insuranceOwner,\\n                msg.sender,\\n                nft1155.ids,\\n                batchBalances,\\n                \\\"\\\"\\n            );\\n        }\\n\\n        emit InsuranceEvent(insuranceOwner, msg.sender, userInsurance.rcCount);\\n    }\\n\\n    function _getVotersCount(\\n        uint256 confirmed\\n    ) private pure returns (uint256 voiceCount) {\\n        while (confirmed > 0) {\\n            voiceCount += confirmed & 1;\\n            confirmed >>= 1;\\n        }\\n    }\\n\\n    function getVotersCount(\\n        address insuranceOwner\\n    ) external view returns (uint256 voiceCount) {\\n        Propose memory proposal = proposals[insuranceOwner];\\n        voiceCount = _getVotersCount(proposal.votersBits);\\n    }\\n\\n    function getValidators(\\n        address insuranceOwner\\n    ) external view returns (address[] memory) {\\n        Insurance memory userInsurance = checkInsurance(insuranceOwner);\\n        return userInsurance.validators;\\n    }\\n\\n    function getVoters(\\n        address insuranceOwner\\n    ) external view returns (address[] memory) {\\n        Propose memory proposal = proposals[insuranceOwner];\\n        Insurance memory userInsurance = checkInsurance(insuranceOwner);\\n        address[] memory voters = new address[](\\n            userInsurance.validators.length\\n        );\\n        if (voters.length > 0 && proposal.votersBits > 0) {\\n            uint256 count;\\n            for (uint256 i = 0; i < userInsurance.validators.length; i++) {\\n                if (proposal.votersBits & (1 << i) != 0) {\\n                    voters[count] = userInsurance.validators[i];\\n                    count++;\\n                }\\n            }\\n\\n            assembly {\\n                mstore(voters, count)\\n            }\\n        }\\n        return voters;\\n    }\\n\\n    function proposeChangeBackupWallet(\\n        address insuranceOwner,\\n        address newBackupWallet\\n    ) external {\\n        Insurance memory userInsurance = checkInsurance(insuranceOwner);\\n        require(\\n            getProposalState(insuranceOwner) < ProposalState.Active,\\n            \\\"voting in progress\\\"\\n        );\\n        Propose storage proposal = proposals[insuranceOwner];\\n        bool isValidator;\\n        for (uint256 i = 0; i < userInsurance.validators.length; i++) {\\n            if (msg.sender == userInsurance.validators[i]) {\\n                if (!isValidator) {\\n                    proposal.votersBits = 0;\\n                    isValidator = true;\\n                }\\n                proposal.votersBits |= (1 << i);\\n            }\\n        }\\n        if (isValidator) {\\n            proposal.executed = false;\\n            proposal.newBackupWallet = newBackupWallet;\\n\\n            emit ProposalCreated(insuranceOwner, newBackupWallet, msg.sender);\\n\\n            if (\\n                _getVotersCount(proposal.votersBits) >= userInsurance.voteQuorum\\n            ) {\\n                proposal.deadline = block.timestamp + 1;\\n                proposal.executionTime =\\n                    block.timestamp +\\n                    EXECUTION_LOCK_PERIOD;\\n                emit ProposalConfirmed(\\n                    insuranceOwner,\\n                    proposal.newBackupWallet\\n                );\\n            } else {\\n                proposal.deadline = block.timestamp + VOTING_PERIOD;\\n                proposal.executionTime =\\n                    block.timestamp +\\n                    VOTING_PERIOD +\\n                    EXECUTION_LOCK_PERIOD;\\n            }\\n        } else {\\n            revert(\\\"validators only\\\");\\n        }\\n    }\\n\\n    function confirmProposal(address insuranceOwner) external {\\n        Insurance memory userInsurance = checkInsurance(insuranceOwner);\\n        require(\\n            getProposalState(insuranceOwner) == ProposalState.Active,\\n            \\\"voting is closed\\\"\\n        );\\n\\n        Propose storage proposal = proposals[insuranceOwner];\\n\\n        for (uint256 i = 0; i < userInsurance.validators.length; i++) {\\n            if (\\n                msg.sender == userInsurance.validators[i] &&\\n                proposal.votersBits & (1 << i) == 0\\n            ) {\\n                proposal.votersBits |= (1 << i);\\n            }\\n        }\\n\\n        if (_getVotersCount(proposal.votersBits) >= userInsurance.voteQuorum) {\\n            proposal.deadline = block.timestamp + 1;\\n            proposal.executionTime = block.timestamp + EXECUTION_LOCK_PERIOD;\\n            emit ProposalConfirmed(insuranceOwner, proposal.newBackupWallet);\\n        }\\n    }\\n\\n    function executeProposal(address insuranceOwner) external {\\n        require(\\n            getProposalState(insuranceOwner) == ProposalState.ExecutionWaiting,\\n            \\\"not yet ready for execution\\\"\\n        );\\n        Propose storage proposal = proposals[insuranceOwner];\\n        Insurance storage userInsurance = insurances[insuranceOwner];\\n        proposal.executed = true;\\n        userInsurance.backupWallet = proposal.newBackupWallet;\\n        emit ProposalExecuted(insuranceOwner, userInsurance.backupWallet);\\n    }\\n\\n    function getProposalState(\\n        address insuranceOwner\\n    ) public view returns (ProposalState) {\\n        Propose memory proposal = proposals[insuranceOwner];\\n        Insurance memory userInsurance = insurances[insuranceOwner];\\n\\n        if (proposal.newBackupWallet != address(0)) {\\n            if (\\n                _getVotersCount(proposal.votersBits) >= userInsurance.voteQuorum\\n            ) {\\n                if (proposal.executed) {\\n                    return ProposalState.Executed;\\n                }\\n\\n                if (block.timestamp < proposal.executionTime) {\\n                    return ProposalState.Succeeded;\\n                }\\n\\n                return ProposalState.ExecutionWaiting;\\n            }\\n\\n            if (block.timestamp < proposal.deadline) {\\n                return ProposalState.Active;\\n            }\\n\\n            return ProposalState.Failed;\\n        }\\n\\n        return ProposalState.Unknown;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\ninterface IPair {\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quoteTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"AutopaymentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBackupWallet\",\"type\":\"address\"}],\"name\":\"BackupWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"insuranceOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInPaymentToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newexpirationTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"withPenalty\",\"type\":\"bool\"}],\"name\":\"BillPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceInPaymentToken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"autopayment\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteQuorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rcCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"backupWallet\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"}],\"indexed\":false,\"internalType\":\"struct RC.Insurance\",\"name\":\"userInsurance\",\"type\":\"tuple\"}],\"name\":\"CreateInsurance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"insuranceOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"backupWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recoveryTokensCount\",\"type\":\"uint256\"}],\"name\":\"InsuranceEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"insuranceOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBackupWallet\",\"type\":\"address\"}],\"name\":\"ProposalConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"insuranceOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBackupWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"insuranceOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBackupWallet\",\"type\":\"address\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subscriptionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SubscriptionStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"validityPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInQuoteToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangePair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"recoveryTokenLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc20FeeBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc20PenaltyBP\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct RC.Subscription\",\"name\":\"_subscription\",\"type\":\"tuple\"}],\"name\":\"SubscriptionsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSubscriptionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceInPaymentToken\",\"type\":\"uint256\"}],\"name\":\"UpgradeInsurancePlan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVoteQuorum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newValidators\",\"type\":\"address[]\"}],\"name\":\"ValidatorsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"insuranceOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBackupWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_POINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTION_LOCK_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FREEMIUM_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ERC20_FEE_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ERC20_PENALTY_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE_PENALTY_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VALIDATORS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRIAL_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"validityPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInQuoteToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangePair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"recoveryTokenLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc20FeeBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc20PenaltyBP\",\"type\":\"uint256\"}],\"internalType\":\"struct RC.Subscription\",\"name\":\"_subscription\",\"type\":\"tuple\"}],\"name\":\"addSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"insuranceOwner\",\"type\":\"address\"}],\"name\":\"autoPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"billPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"insuranceOwner\",\"type\":\"address\"}],\"name\":\"confirmProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_backupWallet\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_voteQuorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subscriptionID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_autopayment\",\"type\":\"bool\"}],\"name\":\"createInsurance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"insuranceOwner\",\"type\":\"address\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_priceInQuoteToken\",\"type\":\"uint256\"}],\"name\":\"getPriceInPaymentToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"insuranceOwner\",\"type\":\"address\"}],\"name\":\"getProposalState\",\"outputs\":[{\"internalType\":\"enum RC.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"insuranceOwner\",\"type\":\"address\"}],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"insuranceOwner\",\"type\":\"address\"}],\"name\":\"getVoters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"insuranceOwner\",\"type\":\"address\"}],\"name\":\"getVotersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"voiceCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"insuranceOwner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"erc20Tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"internalType\":\"struct RC.NFTinfo[]\",\"name\":\"erc721Tokens\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"internalType\":\"struct RC.NFTinfo[]\",\"name\":\"erc1155Tokens\",\"type\":\"tuple[]\"}],\"name\":\"insuranceEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"insurances\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"autopayment\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteQuorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rcCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"backupWallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"newBackupWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votersBits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"insuranceOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newBackupWallet\",\"type\":\"address\"}],\"name\":\"proposeChangeBackupWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_autopayment\",\"type\":\"bool\"}],\"name\":\"setAutopayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_backupWallet\",\"type\":\"address\"}],\"name\":\"setBackupWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentAdmin\",\"type\":\"address\"}],\"name\":\"setPaymentAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_voteQuorum\",\"type\":\"uint256\"}],\"name\":\"setValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"subscriptionStateChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"subscriptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"validityPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInQuoteToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangePair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"recoveryTokenLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc20FeeBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc20PenaltyBP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionID\",\"type\":\"uint256\"}],\"name\":\"upgradeInsurancePlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RC", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ee58016403f5d8a125cd478569ef17bafbab6655000000000000000000000000ee58016403f5d8a125cd478569ef17bafbab6655000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}