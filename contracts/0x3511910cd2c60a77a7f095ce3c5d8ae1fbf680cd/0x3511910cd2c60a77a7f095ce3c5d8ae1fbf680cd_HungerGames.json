{"SourceCode": "/*\r\nhttps://www.gnomescollective.xyz/\r\n\r\nhttps://t.me/HungerGameserc20\r\n\r\nhttps://twitter.com/HungerGamesERC\r\n*/\r\n// SPDX-License-Identifier: MIT\r\n\r\n//\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\r\n//\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\r\n//\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\r\n//\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\r\n//\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\r\n//\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\r\n\r\n//\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\r\n//\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\r\n//\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u255a\u2588\u2588\u2588\u2588\u2588\u2557\u2591\r\n//\u2588\u2588\u2551\u2591\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2588\u2588\u2557\r\n//\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u255a\u2550\u255d\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\r\n//\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\r\n\r\n\r\npragma solidity 0.8.21;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Burn(address indexed account, uint256 amount);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract HungerGames is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n\r\n    mapping (uint256 => bool)    public NFTXTRABalance;\r\n    mapping (uint256 => bool)    public NFTVBalance;\r\n    mapping (uint256 => bool)    public NFTBOOSTBalance;\r\n    mapping (uint256 => bool)    public NFTSKIPBalance;\r\n\r\n    mapping (address => uint256) private _holderLastTransferTimestamp;\r\n    mapping (address => uint256) public hgmsShopBalances;\r\n    mapping (address => uint256) public ethShopBalances;\r\n    mapping (address => uint256) public XTRAShopBalances;\r\n    mapping (address => uint256) public BOOSTShopBalances;\r\n    mapping (address => uint256) public VShopBalances;\r\n    mapping (address => uint256) public SKIPShopBalances;\r\n    mapping (uint256 => uint256) public potionsUsed;\r\n\r\n    address payable public _maintenanceWallet;\r\n    address payable public _teamWallet;\r\n    address payable public _devWallet;\r\n    address payable public _marketWallet;\r\n    uint256 private _initialBuyTax=19;\r\n    uint256 private _initialSellTax=25;\r\n    uint256 private _finalBuyTax=5;\r\n    uint256 private _finalSellTax=5;\r\n    uint256 private _reduceBuyTaxAt=19;\r\n    uint256 private _reduceSellTaxAt=25;\r\n    uint256 private _preventSwapBefore=25;\r\n    uint256 private _buyCount=0;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    string private constant _name = unicode\"HungerGames\";\r\n    string private constant _symbol = unicode\"HGMS\";\r\n    uint256 private _tTotal = 1000000000 * 10**_decimals;\r\n    uint256 public _maxTxAmount = 10000000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 20000000 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold= 1000000 * 10**_decimals;\r\n    uint256 public _maxTaxSwap= 10000000 * 10**_decimals;\r\n\r\n    uint256 public totalXTRA;\r\n    uint256 public totalBOOST;\r\n    uint256 public totalV;\r\n    uint256 public totalSKIP;\r\n\r\n    uint256 public XTRAPriceHGMS=25000;\r\n    uint256 public BOOSTPriceHGMS=25000;\r\n    uint256 public VPriceHGMS=25000;\r\n    uint256 public SKIPPriceHGMS=25000;\r\n\r\n    uint256 public XTRAPriceETH = 20* 10**(_decimals - 3);\r\n    uint256 public BOOSTPriceETH= 0;\r\n    uint256 public VPriceETH = 9* 10**(_decimals - 3);\r\n    uint256 public SKIPPriceETH= 12* 10**(_decimals - 3);\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n    bool public transferDelayEnabled = true;\r\n    bool private inLiquidityAddition = false;\r\n\r\n    event PotionsRemoved();\r\n    event PotionPurchased(address indexed buyer, address indexed shopOwner, string potionName, uint256 ethAmount, uint256 hgmsAmount);\r\n    event Deposit();\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    event PayoutWinnersExecuted(address[] indexed winners, uint256 share, uint256 nonDeads);\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _devWallet = payable(_msgSender());\r\n        _marketWallet = payable(address(0xE63129686F9AE07bf4a733C41a424cB54444aBc8));\r\n        _teamWallet = payable(address(0xEe31A88b55Dc7f69DD3D9f5E0b77bd5cABD8a41F));\r\n        _maintenanceWallet = payable(address(0xBeBDD8b641965E7618A39B1B2C5b1a64625Aa84c));\r\n\r\n        _balances[address(this)] = (_tTotal);\r\n        \r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_marketWallet] = true;\r\n        _isExcludedFromFee[_teamWallet] = true;\r\n        _isExcludedFromFee[_maintenanceWallet] = true;\r\n\r\n        emit Transfer(address(0), address(this),  _balances[address(this)]);\r\n    }\r\n    function setXTRAPrice(uint256 hgmsAmount, uint256 ethAmount) public{\r\n        require(msg.sender == _maintenanceWallet);\r\n        XTRAPriceHGMS = hgmsAmount;\r\n        XTRAPriceETH = ethAmount* 10**(_decimals - 3);\r\n    }\r\n    function setBOOSTPrice(uint256 hgmsAmount, uint256 ethAmount) public{\r\n        require(msg.sender == _maintenanceWallet);\r\n        BOOSTPriceHGMS = hgmsAmount;\r\n        BOOSTPriceETH = ethAmount* 10**(_decimals - 3);\r\n    }\r\n    function setVPrice(uint256 hgmsAmount, uint256 ethAmount) public{\r\n        require(msg.sender == _maintenanceWallet);\r\n        VPriceHGMS = hgmsAmount;\r\n        VPriceETH = ethAmount* 10**(_decimals - 3);\r\n    }\r\n    function setSKIPPrice(uint256 hgmsAmount, uint256 ethAmount) public{\r\n        require(msg.sender == _maintenanceWallet);\r\n        SKIPPriceHGMS = hgmsAmount;\r\n        SKIPPriceETH = ethAmount* 10**(_decimals - 3);\r\n    }\r\n    function emergencyTaxAt() public {\r\n        require(msg.sender == _maintenanceWallet);\r\n        _reduceBuyTaxAt -= _reduceBuyTaxAt;\r\n        _reduceSellTaxAt  -= _reduceSellTaxAt;\r\n    }\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function getNFTXTRABalance(uint NFTId) external view returns(bool){\r\n        return NFTXTRABalance[NFTId];\r\n    }\r\n    function getNFTBOOSTBalance(uint NFTId) external view returns(bool){\r\n        return NFTBOOSTBalance[NFTId];\r\n    }\r\n    function getNFTVBalance(uint NFTId) external view returns(bool){\r\n        return NFTVBalance[NFTId];\r\n    }\r\n    function getNFTSKIPBalance(uint NFTId) external view returns(bool){\r\n        return NFTSKIPBalance[NFTId];\r\n    }\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if(!inLiquidityAddition){\r\n            require(tradingOpen, \"Trading not open yet\");\r\n        }\r\n        if (from != owner() && to != owner()) {\r\n            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n\r\n            if (transferDelayEnabled) {\r\n                  if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\r\n                      require(\r\n                          _holderLastTransferTimestamp[tx.origin] <\r\n                              block.number,\r\n                          \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\"\r\n                      );\r\n                      _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                  }\r\n              }\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                _buyCount++;\r\n            }\r\n\r\n            if(to == uniswapV2Pair && from!= address(this) ){\r\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to   == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\r\n                uint256 contractETHBalance = address(this).balance;\r\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\r\n                uint256 deltaETH = address(this).balance.sub(contractETHBalance);\r\n                if(deltaETH > 0) {\r\n                    sendETHToFee(deltaETH);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(taxAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this), taxAmount);\r\n        }\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function _removeLimits() internal onlyOwner {\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize = _tTotal;\r\n        transferDelayEnabled = false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n    function removeLimits() external onlyOwner {\r\n        _removeLimits();\r\n    }\r\n    function sendETHToFee(uint256 amount) private {\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n        require(address(this).balance >= amount, \"Insufficient contract balance\");\r\n\r\n        uint256 feePerWallet = amount/5;\r\n\r\n        _marketWallet.transfer(feePerWallet);\r\n        _teamWallet.transfer(feePerWallet);\r\n        _maintenanceWallet.transfer(feePerWallet);\r\n    }\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        tradingOpen = true;\r\n    }\r\n    function addLiquidity() external onlyOwner() {\r\n        inLiquidityAddition = true;\r\n        if (address(uniswapV2Router) == address(0)) {\r\n            uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        }\r\n        if (uniswapV2Pair == address(0)) {\r\n            uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        }\r\n        uint256 tokenAmount = balanceOf(address(this));\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            tokenAmount,\r\n            _tTotal,  \r\n            0,  \r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        swapEnabled = true;\r\n        inLiquidityAddition = false;\r\n    }\r\n    function withdrawTokens(address to, uint256 amount) external {\r\n        require(msg.sender == _maintenanceWallet);\r\n        require(amount <= balanceOf(address(this)), \"Not enough tokens in contract\");\r\n        _transfer(address(this), to, amount);\r\n    }\r\n    function withdrawStuckETH() public {\r\n        require(msg.sender == _maintenanceWallet);\r\n        _devWallet.transfer(address(this).balance);\r\n    }\r\n    receive() external payable {}\r\n    function manualSend() external onlyOwner() {\r\n            uint256 ethBalance=address(this).balance;\r\n            if(ethBalance>0){\r\n                sendETHToFee(ethBalance);\r\n            }\r\n    }\r\n    function ManualSwap() external {\r\n        require(_msgSender()== _devWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n    function depositToShop(uint256 hgmsAmount, uint256 ethAmount) payable external {\r\n        require(hgmsAmount > 0 || ethAmount > 0, \"Amount should be greater than 0\");\r\n        require(msg.value >= ethAmount * 10**_decimals, \"Incorrect ETH amount sent\");\r\n       \r\n        if (hgmsAmount > 0) {\r\n        require(_balances[msg.sender] >= hgmsAmount, \"Not enough HGMS tokens\");\r\n        _burn(msg.sender, hgmsAmount);  \r\n        hgmsShopBalances[msg.sender] += hgmsAmount; \r\n        }\r\n\r\n        if (ethAmount > 0) {\r\n            ethShopBalances[msg.sender] += ethAmount;  \r\n            sendETHToFee(msg.value);  \r\n        }\r\n\r\n        emit Deposit();\r\n    }\r\n    function buyPotion(string[] memory potionNames, uint256[] memory amounts, address shopOwner, uint256 bonusLength) external {\r\n        require(msg.sender == _maintenanceWallet, \"Only maintenanceWallet can call this function\");\r\n        require(potionNames.length == amounts.length, \"Mismatched potionNames and amounts arrays length\");\r\n\r\n        uint256 loopEnd = potionNames.length;\r\n\r\n        totalXTRA = 0;\r\n        totalBOOST = 0;\r\n        totalV = 0;\r\n        totalSKIP = 0;\r\n        loopEnd -= bonusLength; \r\n        \r\n        for(uint i = 0; i < loopEnd; i++) {\r\n            processPotionCounts(potionNames[i], amounts[i]);\r\n        }\r\n\r\n        for(uint i = loopEnd; i < potionNames.length; i++) {\r\n            processOrderWithoutCharges(potionNames[i], amounts[i], shopOwner);\r\n        }\r\n\r\n        if(totalXTRA > 0) processOrder(\"XTRA\", totalXTRA, shopOwner);\r\n        if(totalBOOST > 0) processOrder(\"BOOST\", totalBOOST, shopOwner);\r\n        if(totalV > 0) processOrder(\"V\", totalV, shopOwner);\r\n        if(totalSKIP > 0) processOrder(\"SKIP\", totalSKIP, shopOwner);\r\n    }\r\n    function processPotionCounts(\r\n        string memory potionName,\r\n        uint256 amount\r\n        ) internal {\r\n            if(keccak256(abi.encodePacked(potionName)) == keccak256(abi.encodePacked(\"XTRA\"))){\r\n                totalXTRA += amount;\r\n            }\r\n            else if(keccak256(abi.encodePacked(potionName)) == keccak256(abi.encodePacked(\"BOOST\"))){\r\n                totalBOOST += amount;\r\n            }\r\n            else if(keccak256(abi.encodePacked(potionName)) == keccak256(abi.encodePacked(\"V\"))){\r\n                totalV += amount;\r\n            }\r\n            else if(keccak256(abi.encodePacked(potionName)) == keccak256(abi.encodePacked(\"SKIP\"))){\r\n                totalSKIP += amount;\r\n            }\r\n    }\r\n    function processOrderWithoutCharges(string memory potionName, uint256 amount, address shopOwner) internal {\r\n        if(keccak256(abi.encodePacked(potionName)) == keccak256(abi.encodePacked(\"XTRA\"))){\r\n            XTRAShopBalances[shopOwner] += amount;\r\n        } \r\n        else if(keccak256(abi.encodePacked(potionName)) == keccak256(abi.encodePacked(\"BOOST\"))){\r\n            BOOSTShopBalances[shopOwner] += amount;\r\n        }\r\n        else if(keccak256(abi.encodePacked(potionName)) == keccak256(abi.encodePacked(\"V\"))){\r\n            VShopBalances[shopOwner] += amount;\r\n        } \r\n        else if(keccak256(abi.encodePacked(potionName)) == keccak256(abi.encodePacked(\"SKIP\"))){\r\n            SKIPShopBalances[shopOwner] += amount;\r\n        } \r\n        else {\r\n            revert(\"Invalid Potion Name\");\r\n        }\r\n        emit PotionPurchased(msg.sender, shopOwner, potionName, 0, 0);\r\n    }\r\n    function processOrder(string memory potionName, uint256 amount, address shopOwner) internal {\r\n        if(amount == 0) return;\r\n   \r\n        uint256 hgmsAmount;\r\n        uint256 ethAmount;\r\n\r\n            if(keccak256(abi.encodePacked(potionName)) == keccak256(abi.encodePacked(\"XTRA\"))){\r\n\r\n            hgmsAmount = XTRAPriceHGMS.mul(amount); \r\n            ethAmount = XTRAPriceETH.mul(amount); \r\n\r\n            require(hgmsShopBalances[shopOwner] >= hgmsAmount, \"Balance does not have enough HGMS\");\r\n            require(ethShopBalances[shopOwner] >= ethAmount, \"Balance does not have enough ETH\");\r\n\r\n            hgmsShopBalances[shopOwner] -= hgmsAmount;\r\n            ethShopBalances[shopOwner] -= ethAmount;\r\n            XTRAShopBalances[shopOwner] += amount;\r\n\r\n            emit PotionPurchased(msg.sender, shopOwner, potionName, ethAmount, hgmsAmount);\r\n            } else if(keccak256(abi.encodePacked(potionName)) == keccak256(abi.encodePacked(\"BOOST\"))){\r\n\r\n            hgmsAmount = BOOSTPriceHGMS.mul(amount); \r\n            ethAmount = BOOSTPriceETH.mul(amount); \r\n\r\n            require(hgmsShopBalances[shopOwner] >= hgmsAmount, \"Balance does not have enough HGMS\");\r\n            require(ethShopBalances[shopOwner] >= ethAmount, \"Balance does not have enough ETH\");\r\n\r\n            hgmsShopBalances[shopOwner] -= hgmsAmount;\r\n            ethShopBalances[shopOwner] -= ethAmount;\r\n            BOOSTShopBalances[shopOwner] += amount;\r\n\r\n            emit PotionPurchased(msg.sender, shopOwner, potionName, ethAmount, hgmsAmount);\r\n            } else if(keccak256(abi.encodePacked(potionName)) == keccak256(abi.encodePacked(\"V\"))){\r\n\r\n            hgmsAmount = VPriceHGMS.mul(amount); \r\n            ethAmount = VPriceETH.mul(amount); \r\n\r\n            require(hgmsShopBalances[shopOwner] >= hgmsAmount, \"Balance does not have enough HGMS\");\r\n            require(ethShopBalances[shopOwner] >= ethAmount, \"Balance does not have enough ETH\");\r\n\r\n            hgmsShopBalances[shopOwner] -= hgmsAmount;\r\n            ethShopBalances[shopOwner] -= ethAmount;\r\n            VShopBalances[shopOwner] += amount;\r\n\r\n            emit PotionPurchased(msg.sender, shopOwner, potionName, ethAmount, hgmsAmount);\r\n            }else if(keccak256(abi.encodePacked(potionName)) == keccak256(abi.encodePacked(\"SKIP\"))){\r\n\r\n            hgmsAmount = SKIPPriceHGMS.mul(amount); \r\n            ethAmount = SKIPPriceETH.mul(amount); \r\n\r\n            require(hgmsShopBalances[shopOwner] >= hgmsAmount, \"Balance does not have enough HGMS\");\r\n            require(ethShopBalances[shopOwner] >= ethAmount, \"Balance does not have enough ETH\");\r\n\r\n            hgmsShopBalances[shopOwner] -= hgmsAmount;\r\n            ethShopBalances[shopOwner] -= ethAmount;\r\n            SKIPShopBalances[shopOwner] += amount;\r\n\r\n            emit PotionPurchased(msg.sender, shopOwner, potionName, ethAmount, hgmsAmount);\r\n            } else {\r\n                revert(\"Invalid Potion Name\");\r\n            }\r\n    }\r\n    function applyPotion(address shopOwner, uint256[] memory NFTId, string memory potionName) external{\r\n        require(msg.sender == _maintenanceWallet);\r\n        if(keccak256(abi.encodePacked(potionName)) == keccak256(abi.encodePacked(\"XTRA\"))){\r\n            require(XTRAShopBalances[shopOwner] >= NFTId.length, \"Balance does not have enough Potions\");\r\n            for(uint256 i=0; i<NFTId.length;i++){\r\n                require(!NFTXTRABalance[NFTId[i]], \"Already active XTRA\");\r\n                 NFTXTRABalance[NFTId[i]] = true;\r\n                 XTRAShopBalances[shopOwner] -= 1;\r\n                 potionsUsed[NFTId[i]] += 1;\r\n             }\r\n        } else if(keccak256(abi.encodePacked(potionName)) == keccak256(abi.encodePacked(\"BOOST\"))){\r\n            require(BOOSTShopBalances[shopOwner] >= NFTId.length, \"Balance does not have enough Potions\");\r\n            for(uint256 i=0; i<NFTId.length;i++){\r\n                require(!NFTBOOSTBalance[NFTId[i]], \"Already active BOOST\");\r\n                 NFTBOOSTBalance[NFTId[i]] = true;\r\n                 BOOSTShopBalances[shopOwner] -= 1;\r\n                 potionsUsed[NFTId[i]] += 1;\r\n             }\r\n        } else if(keccak256(abi.encodePacked(potionName)) == keccak256(abi.encodePacked(\"V\"))){\r\n            require(VShopBalances[shopOwner] >= NFTId.length, \"Balance does not have enough Potions\");\r\n            for(uint256 i=0; i<NFTId.length;i++){\r\n                require(!NFTVBalance[NFTId[i]], \"Already active V\");\r\n                 NFTVBalance[NFTId[i]] = true;\r\n                 VShopBalances[shopOwner] -= 1;\r\n                 potionsUsed[NFTId[i]] += 1;\r\n             }\r\n        } else if(keccak256(abi.encodePacked(potionName)) == keccak256(abi.encodePacked(\"SKIP\"))){\r\n            require(SKIPShopBalances[shopOwner] >= NFTId.length, \"Balance does not have enough Potions\");\r\n            for(uint256 i=0; i<NFTId.length;i++){\r\n                require(!NFTSKIPBalance[NFTId[i]], \"Already active SKIP\");\r\n                 NFTSKIPBalance[NFTId[i]] = true;\r\n                 SKIPShopBalances[shopOwner] -= 1;\r\n                 potionsUsed[NFTId[i]] += 1;\r\n             }\r\n        } else {\r\n            revert(\"Wrong Potion Name\");\r\n        }\r\n\r\n    }\r\n    function removePotions(uint256 mintAmount) external {\r\n        require(msg.sender == _maintenanceWallet, \"Not authorized\");\r\n        for (uint256 i = 1; i <= mintAmount; i++) {\r\n        NFTXTRABalance[i] = false;\r\n        NFTVBalance[i] = false;\r\n        NFTBOOSTBalance[i] = false;\r\n        NFTSKIPBalance[i] = false;\r\n        }\r\n        emit PotionsRemoved();\r\n    }\r\n\r\n    function payoutWinners(address[] memory winners, uint256 share, uint256 nonDeads) external {\r\n        require(msg.sender == _maintenanceWallet, \"Not authorized\");\r\n        for (uint256 i = 0; i < nonDeads; i++) {\r\n            payable(winners[winners.length - i - 1]).transfer(share);\r\n        }\r\n        emit PayoutWinnersExecuted(winners, share, nonDeads);\r\n    }\r\n\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"Cannot burn from the zero address\");\r\n        amount = amount * 10**_decimals;\r\n        _balances[account] -= amount;\r\n        _tTotal -= amount;\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize = _tTotal;\r\n\r\n        emit Burn(account, amount);\r\n        emit Transfer(account, address(0), amount);\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonDeads\",\"type\":\"uint256\"}],\"name\":\"PayoutWinnersExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shopOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"potionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hgmsAmount\",\"type\":\"uint256\"}],\"name\":\"PotionPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PotionsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOOSTPriceETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOSTPriceHGMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BOOSTShopBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ManualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NFTBOOSTBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NFTSKIPBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NFTVBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NFTXTRABalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SKIPPriceETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SKIPPriceHGMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"SKIPShopBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VPriceETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VPriceHGMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"VShopBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XTRAPriceETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XTRAPriceHGMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"XTRAShopBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maintenanceWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_teamWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shopOwner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"NFTId\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"potionName\",\"type\":\"string\"}],\"name\":\"applyPotion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"potionNames\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"shopOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bonusLength\",\"type\":\"uint256\"}],\"name\":\"buyPotion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hgmsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"depositToShop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyTaxAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethShopBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"NFTId\",\"type\":\"uint256\"}],\"name\":\"getNFTBOOSTBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"NFTId\",\"type\":\"uint256\"}],\"name\":\"getNFTSKIPBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"NFTId\",\"type\":\"uint256\"}],\"name\":\"getNFTVBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"NFTId\",\"type\":\"uint256\"}],\"name\":\"getNFTXTRABalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hgmsShopBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonDeads\",\"type\":\"uint256\"}],\"name\":\"payoutWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"potionsUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"removePotions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hgmsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"setBOOSTPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hgmsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"setSKIPPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hgmsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"setVPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hgmsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"setXTRAPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBOOST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSKIP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalXTRA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HungerGames", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cee669f4f37d2f85b03746042bb0c0820013afa266a8b2fd7cf85fd8306fe720"}