{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/NodeOperatorRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport {EnumerableSetUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport {IAccessControlManager} from \\\"../interfaces/IAccessControlManager.sol\\\";\\r\\nimport {INodeOperatorRegistry} from \\\"../interfaces/INodeOperatorRegistry.sol\\\";\\r\\n\\r\\nimport {SwellLib} from \\\"../libraries/SwellLib.sol\\\";\\r\\nimport {EnumberableSetValidatorDetails} from \\\"../libraries/EnumberableSetValidatorDetails.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title NodeOperatorRegistry\\r\\n * @author https://github.com/max-taylor\\r\\n * @notice This contract will hold all the node operators and any associated validator details. This contract will be used when fetching the next validators to setup and allows management of node operators.\\r\\n */\\r\\ncontract NodeOperatorRegistry is INodeOperatorRegistry, Initializable {\\r\\n  using SafeERC20 for IERC20;\\r\\n  using EnumerableSetUpgradeable for EnumerableSetUpgradeable.Bytes32Set;\\r\\n  using EnumberableSetValidatorDetails for EnumberableSetValidatorDetails.ValidatorDetailsSet;\\r\\n\\r\\n  IAccessControlManager public AccessControlManager;\\r\\n\\r\\n  // ** Operators **\\r\\n\\r\\n  // Incrementing count of node operators\\r\\n  uint128 public override numOperators;\\r\\n\\r\\n  // Using a mapping of operatorId's to operators to allow for cheap fetching when we need to iterate over the operators\\r\\n  mapping(uint128 => Operator) public getOperatorForOperatorId;\\r\\n\\r\\n  // Returns operatorId for the controlling address\\r\\n  mapping(address => uint128) public override getOperatorIdForAddress;\\r\\n\\r\\n  // ** Validator details **\\r\\n\\r\\n  // Maps the operatorId to their validator details, this set allows for cheap removal from the array when needed. This set contains all the validator details to an operator, the set is divided into active and pending validators based on the activeValidators count stored in the Operator struct. From index 0 -> activeValidators count are active and the remaining are pending.\\r\\n  mapping(uint128 => EnumberableSetValidatorDetails.ValidatorDetailsSet) operatorIdToValidatorDetails;\\r\\n\\r\\n  uint256 public override numPendingValidators;\\r\\n\\r\\n  // The active validator indexes are a bytes32 object containing 2 uint128's. They are encoded together to reduce storage costs. The first uint128 is the operator's ID and the second is the index of the key in their operatorIdToValidatorDetails array\\r\\n  EnumerableSetUpgradeable.Bytes32Set activeValidatorIndexes;\\r\\n\\r\\n  // Allows efficient access to an operator Id based on a validator public key\\r\\n  mapping(bytes => uint128) public override getOperatorIdForPubKey;\\r\\n\\r\\n  // The available HEX symbols, used in converting the public key in bytes to string\\r\\n  bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n\\r\\n\\r\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n  constructor() {\\r\\n    _disableInitializers();\\r\\n  }\\r\\n\\r\\n  modifier checkRole(bytes32 role) {\\r\\n    AccessControlManager.checkRole(role, msg.sender);\\r\\n\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to check for empty addresses\\r\\n   * @param _address The address to check\\r\\n   */\\r\\n  modifier checkZeroAddress(address _address) {\\r\\n    SwellLib._checkZeroAddress(_address);\\r\\n\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  fallback() external {\\r\\n    revert SwellLib.InvalidMethodCall();\\r\\n  }\\r\\n\\r\\n  function initialize(\\r\\n    IAccessControlManager _accessControlManager\\r\\n  ) external initializer checkZeroAddress(address(_accessControlManager)) {\\r\\n    AccessControlManager = _accessControlManager;\\r\\n  }\\r\\n\\r\\n  // ************************************\\r\\n  // ***** External methods ******\\r\\n\\r\\n  function withdrawERC20(\\r\\n    IERC20 _token\\r\\n  ) external override checkRole(SwellLib.PLATFORM_ADMIN) {\\r\\n    uint256 contractBalance = _token.balanceOf(address(this));\\r\\n    if (contractBalance == 0) {\\r\\n      revert SwellLib.NoTokensToWithdraw();\\r\\n    }\\r\\n\\r\\n    _token.safeTransfer(msg.sender, contractBalance);\\r\\n  }\\r\\n\\r\\n  function getNextValidatorDetails(\\r\\n    uint256 _numNewValidators\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    override\\r\\n    returns (\\r\\n      ValidatorDetails[] memory validatorDetails,\\r\\n      uint256 foundValidators\\r\\n    )\\r\\n  {\\r\\n    validatorDetails = new ValidatorDetails[](_numNewValidators);\\r\\n\\r\\n    // Cache the amount of validator details operators have assigned in this method, this prevents accidentally only assigning from the operator with the least active validators\\r\\n    uint128[] memory operatorAssignedDetails = new uint128[](numOperators + 1);\\r\\n\\r\\n    uint128 smallestOperatorActiveKeys;\\r\\n\\r\\n    for (\\r\\n      foundValidators;\\r\\n      foundValidators < _numNewValidators;\\r\\n      foundValidators++\\r\\n    ) {\\r\\n      uint128 foundOperatorId;\\r\\n\\r\\n      // Iterate over each operator and find the operator with the least amount of active keys, starting from the first operator\\r\\n      for (uint128 operatorId = 1; operatorId <= numOperators; operatorId++) {\\r\\n        // If the operator is disabled, skip\\r\\n        if (!getOperatorForOperatorId[operatorId].enabled) {\\r\\n          continue;\\r\\n        }\\r\\n\\r\\n        // The operator's active keys is the amount of active validator details + the validator details the operator has assigned in this method\\r\\n        uint128 operatorActiveKeys = getOperatorForOperatorId[operatorId]\\r\\n          .activeValidators + operatorAssignedDetails[operatorId];\\r\\n\\r\\n        if (\\r\\n          operatorIdToValidatorDetails[operatorId].length() ==\\r\\n          operatorActiveKeys\\r\\n        ) {\\r\\n          continue;\\r\\n        }\\r\\n\\r\\n        // Early find if the given operator has no active keys and hasn't had validator details selected yet\\r\\n        if (\\r\\n          operatorActiveKeys == 0 && operatorAssignedDetails[operatorId] == 0\\r\\n        ) {\\r\\n          foundOperatorId = operatorId;\\r\\n\\r\\n          smallestOperatorActiveKeys = 0;\\r\\n\\r\\n          break;\\r\\n        } else if (foundOperatorId == 0) {\\r\\n          // If no operator has been found yet set the smallest operator active keys to the current operator\\r\\n          smallestOperatorActiveKeys = operatorActiveKeys;\\r\\n\\r\\n          foundOperatorId = operatorId;\\r\\n\\r\\n          // If the current operator has less keys than the smallest operator active keys, then we want to use this operator\\r\\n        } else if (smallestOperatorActiveKeys > operatorActiveKeys) {\\r\\n          smallestOperatorActiveKeys = operatorActiveKeys;\\r\\n\\r\\n          foundOperatorId = operatorId;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      // If an operator was found in the loop\\r\\n      if (foundOperatorId != 0) {\\r\\n        // If there was an operator found, get an un-assigned public key and add it to the return array\\r\\n        validatorDetails[foundValidators] = operatorIdToValidatorDetails[\\r\\n          foundOperatorId\\r\\n        ].at(smallestOperatorActiveKeys);\\r\\n\\r\\n        operatorAssignedDetails[foundOperatorId] += 1;\\r\\n\\r\\n        foundOperatorId = 0;\\r\\n      } else {\\r\\n        // If no eligible operator's are found exit the loop and return what exists of the array\\r\\n        break;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function usePubKeysForValidatorSetup(\\r\\n    bytes[] calldata _pubKeys\\r\\n  ) external override returns (ValidatorDetails[] memory validatorDetails) {\\r\\n    if (msg.sender != address(AccessControlManager.DepositManager())) {\\r\\n      revert InvalidPubKeySetupCaller();\\r\\n    }\\r\\n\\r\\n    validatorDetails = new ValidatorDetails[](_pubKeys.length);\\r\\n\\r\\n    for (uint256 i; i < _pubKeys.length; i++) {\\r\\n      uint128 operatorId = _getOperatorIdForPubKeySafe(_pubKeys[i]);\\r\\n\\r\\n      if (!getOperatorForOperatorId[operatorId].enabled) {\\r\\n        revert CannotUseDisabledOperator();\\r\\n      }\\r\\n\\r\\n      uint128 nextKeyIndex = getOperatorForOperatorId[operatorId]\\r\\n        .activeValidators;\\r\\n\\r\\n      if (nextKeyIndex == operatorIdToValidatorDetails[operatorId].length()) {\\r\\n        revert OperatorOutOfPendingKeys();\\r\\n      }\\r\\n\\r\\n      ValidatorDetails\\r\\n        memory deletedValidatorDetails = operatorIdToValidatorDetails[\\r\\n          operatorId\\r\\n        ].at(nextKeyIndex);\\r\\n\\r\\n      if (keccak256(deletedValidatorDetails.pubKey) != keccak256(_pubKeys[i])) {\\r\\n        revert NextOperatorPubKeyMismatch(\\r\\n          deletedValidatorDetails.pubKey,\\r\\n          _pubKeys[i]\\r\\n        );\\r\\n      }\\r\\n\\r\\n      getOperatorForOperatorId[operatorId].activeValidators += 1;\\r\\n\\r\\n      validatorDetails[i] = deletedValidatorDetails;\\r\\n\\r\\n      // Encode the operatorId and the key together so we can just store the single value\\r\\n      bytes32 encoded = _encodeOperatorIdAndKeyIndex(operatorId, nextKeyIndex);\\r\\n\\r\\n      activeValidatorIndexes.add(encoded);\\r\\n    }\\r\\n\\r\\n    numPendingValidators -= _pubKeys.length;\\r\\n\\r\\n    emit PubKeysUsedForValidatorSetup(_pubKeys);\\r\\n\\r\\n    return validatorDetails;\\r\\n  }\\r\\n\\r\\n  // ** Operator management methods **\\r\\n\\r\\n  function addNewValidatorDetails(\\r\\n    ValidatorDetails[] calldata _validatorDetails\\r\\n  ) external override {\\r\\n    if (AccessControlManager.operatorMethodsPaused()) {\\r\\n      revert SwellLib.OperatorMethodsPaused();\\r\\n    }\\r\\n\\r\\n    if (_validatorDetails.length == 0) {\\r\\n      revert InvalidArrayLengthOfZero();\\r\\n    }\\r\\n\\r\\n    uint128 operatorId = _getOperatorIdSafe(msg.sender);\\r\\n\\r\\n    if (!getOperatorForOperatorId[operatorId].enabled) {\\r\\n      revert CannotUseDisabledOperator();\\r\\n    }\\r\\n\\r\\n    // Enforcing the limit on validator details to uint128 here\\r\\n    // ! I was unable to figure out a way to test this condition, javascript cannot handle an array this size and the array size it can handle requires that the method be called 1000s of times\\r\\n    if (\\r\\n      operatorIdToValidatorDetails[operatorId].length() +\\r\\n        _validatorDetails.length >\\r\\n      type(uint128).max\\r\\n    ) {\\r\\n      revert AmountOfValidatorDetailsExceedsLimit();\\r\\n    }\\r\\n\\r\\n    for (uint128 i; i < _validatorDetails.length; i++) {\\r\\n      // NOTE that no signature verification is conducted when validator details are added, this will instead be done via an off-chain service when new validators are getting setup\\r\\n      if (_validatorDetails[i].pubKey.length != 48) {\\r\\n        revert InvalidPubKeyLength();\\r\\n      }\\r\\n\\r\\n      if (_validatorDetails[i].signature.length != 96) {\\r\\n        revert InvalidSignatureLength();\\r\\n      }\\r\\n\\r\\n      if (getOperatorIdForPubKey[_validatorDetails[i].pubKey] != 0) {\\r\\n        revert CannotAddDuplicatePubKey(_validatorDetails[i].pubKey);\\r\\n      }\\r\\n\\r\\n      operatorIdToValidatorDetails[operatorId].add(_validatorDetails[i]);\\r\\n\\r\\n      getOperatorIdForPubKey[_validatorDetails[i].pubKey] = operatorId;\\r\\n    }\\r\\n\\r\\n    numPendingValidators += _validatorDetails.length;\\r\\n\\r\\n    emit OperatorAddedValidatorDetails(msg.sender, _validatorDetails);\\r\\n  }\\r\\n\\r\\n  // ** PLATFORM_ADMIN management methods **\\r\\n\\r\\n  function addOperator(\\r\\n    string calldata _name,\\r\\n    address _operatorAddress,\\r\\n    address _rewardAddress\\r\\n  )\\r\\n    external\\r\\n    override\\r\\n    checkRole(SwellLib.PLATFORM_ADMIN)\\r\\n    checkZeroAddress(_operatorAddress)\\r\\n    checkZeroAddress(_rewardAddress)\\r\\n  {\\r\\n    if (getOperatorIdForAddress[_operatorAddress] != 0) {\\r\\n      revert OperatorAlreadyExists(_operatorAddress);\\r\\n    }\\r\\n\\r\\n    // Increment numOperators before the assignment, so that the operatorIds start from 1\\r\\n    numOperators += 1;\\r\\n\\r\\n    Operator memory operator;\\r\\n\\r\\n    operator.name = _name;\\r\\n    operator.enabled = true;\\r\\n    operator.rewardAddress = _rewardAddress;\\r\\n    operator.controllingAddress = _operatorAddress;\\r\\n\\r\\n    getOperatorIdForAddress[_operatorAddress] = numOperators;\\r\\n    getOperatorForOperatorId[numOperators] = operator;\\r\\n\\r\\n    emit OperatorAdded(_operatorAddress, _rewardAddress);\\r\\n  }\\r\\n\\r\\n  function enableOperator(\\r\\n    address _operatorAddress\\r\\n  ) external override checkRole(SwellLib.PLATFORM_ADMIN) {\\r\\n    Operator storage operator = _getOperatorSafe(_operatorAddress);\\r\\n\\r\\n    if (operator.enabled) {\\r\\n      revert OperatorAlreadyEnabled();\\r\\n    }\\r\\n\\r\\n    operator.enabled = true;\\r\\n\\r\\n    emit OperatorEnabled(_operatorAddress);\\r\\n  }\\r\\n\\r\\n  function disableOperator(\\r\\n    address _operatorAddress\\r\\n  ) external override checkRole(SwellLib.PLATFORM_ADMIN) {\\r\\n    Operator storage operator = _getOperatorSafe(_operatorAddress);\\r\\n\\r\\n    if (!operator.enabled) {\\r\\n      revert OperatorAlreadyDisabled();\\r\\n    }\\r\\n\\r\\n    operator.enabled = false;\\r\\n\\r\\n    emit OperatorDisabled(_operatorAddress);\\r\\n  }\\r\\n\\r\\n  function updateOperatorControllingAddress(\\r\\n    address _operatorAddress,\\r\\n    address _newOperatorAddress\\r\\n  )\\r\\n    external\\r\\n    override\\r\\n    checkRole(SwellLib.PLATFORM_ADMIN)\\r\\n    checkZeroAddress(_newOperatorAddress)\\r\\n  {\\r\\n    if (_operatorAddress == _newOperatorAddress) {\\r\\n      revert CannotSetOperatorControllingAddressToSameAddress();\\r\\n    }\\r\\n\\r\\n    uint128 operatorId = _getOperatorIdSafe(_operatorAddress);\\r\\n\\r\\n    getOperatorIdForAddress[_newOperatorAddress] = operatorId;\\r\\n    getOperatorForOperatorId[operatorId]\\r\\n      .controllingAddress = _newOperatorAddress;\\r\\n\\r\\n    delete getOperatorIdForAddress[_operatorAddress];\\r\\n    emit OperatorAddressUpdated(_operatorAddress, _newOperatorAddress);\\r\\n  }\\r\\n\\r\\n  function updateOperatorRewardAddress(\\r\\n    address _operatorAddress,\\r\\n    address _newRewardAddress\\r\\n  )\\r\\n    external\\r\\n    override\\r\\n    checkRole(SwellLib.PLATFORM_ADMIN)\\r\\n    checkZeroAddress(_newRewardAddress)\\r\\n  {\\r\\n    Operator storage operator = _getOperatorSafe(_operatorAddress);\\r\\n\\r\\n    operator.rewardAddress = _newRewardAddress;\\r\\n  }\\r\\n\\r\\n  function updateOperatorName(\\r\\n    address _operatorAddress,\\r\\n    string calldata _name\\r\\n  ) external override checkRole(SwellLib.PLATFORM_ADMIN) {\\r\\n    Operator storage operator = _getOperatorSafe(_operatorAddress);\\r\\n\\r\\n    operator.name = _name;\\r\\n  }\\r\\n\\r\\n  function deletePendingValidators(\\r\\n    bytes[] calldata _pubKeys\\r\\n  ) external override checkRole(SwellLib.PLATFORM_ADMIN) {\\r\\n    for (uint128 i; i < _pubKeys.length; i++) {\\r\\n      uint128 operatorId = _getOperatorIdForPubKeySafe(_pubKeys[i]);\\r\\n\\r\\n      uint128 operatorActiveValidators = getOperatorForOperatorId[operatorId]\\r\\n        .activeValidators;\\r\\n\\r\\n      bool removed = operatorIdToValidatorDetails[operatorId]\\r\\n        .removePendingDetails(_pubKeys[i], operatorActiveValidators);\\r\\n\\r\\n      if (!removed) {\\r\\n        revert MissingPendingValidatorDetails(_pubKeys[i]);\\r\\n      }\\r\\n\\r\\n      delete getOperatorIdForPubKey[_pubKeys[i]];\\r\\n    }\\r\\n\\r\\n    numPendingValidators -= _pubKeys.length;\\r\\n\\r\\n    emit PendingPubKeysDeleted(_pubKeys);\\r\\n  }\\r\\n\\r\\n  function deleteActiveValidators(\\r\\n    bytes[] calldata _pubKeys\\r\\n  ) external override checkRole(SwellLib.PLATFORM_ADMIN) {\\r\\n    for (uint256 i; i < _pubKeys.length; i++) {\\r\\n      uint128 operatorId = _getOperatorIdForPubKeySafe(_pubKeys[i]);\\r\\n\\r\\n      uint128 operatorActiveValidators = getOperatorForOperatorId[operatorId]\\r\\n        .activeValidators;\\r\\n\\r\\n      if (operatorActiveValidators == 0) {\\r\\n        revert MissingActiveValidatorDetails(_pubKeys[i]);\\r\\n      }\\r\\n\\r\\n      // Recreate the encoded value so it can be deleted, for this we use the last active validator index they have\\r\\n      bytes32 encodedValue = _encodeOperatorIdAndKeyIndex(\\r\\n        operatorId,\\r\\n        operatorActiveValidators - 1\\r\\n      );\\r\\n\\r\\n      bool activeValidatorIndexRemoved = activeValidatorIndexes.remove(\\r\\n        encodedValue\\r\\n      );\\r\\n\\r\\n      bool operatorIdRemoved = operatorIdToValidatorDetails[operatorId]\\r\\n        .removeActiveDetails(_pubKeys[i], operatorActiveValidators);\\r\\n\\r\\n      if (!operatorIdRemoved || !activeValidatorIndexRemoved) {\\r\\n        revert MissingActiveValidatorDetails(_pubKeys[i]);\\r\\n      }\\r\\n\\r\\n      getOperatorForOperatorId[operatorId].activeValidators -= 1;\\r\\n\\r\\n      delete getOperatorIdForPubKey[_pubKeys[i]];\\r\\n    }\\r\\n\\r\\n    emit ActivePubKeysDeleted(_pubKeys);\\r\\n  }\\r\\n\\r\\n  // ***** PoR Methods *****\\r\\n\\r\\n  function getPoRAddressListLength() external view override returns (uint256) {\\r\\n    return activeValidatorIndexes.length();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev This method parses a pure bytes array into it's string equivalent. We must loop through the pubKey to safely convert each byte into its string equivalent, if we cast it directly it causes the response to be corrupted\\r\\n   * @param pubKey The pubKey to parse\\r\\n   * @return The string equivalent\\r\\n   */\\r\\n  function _parsePubKeyToString(\\r\\n    bytes memory pubKey\\r\\n  ) internal pure returns (string memory) {\\r\\n    // Create the bytes that will hold the converted string\\r\\n    bytes memory buffer = new bytes(pubKey.length * 2);\\r\\n\\r\\n    bytes16 symbols = _SYMBOLS;\\r\\n\\r\\n    // This conversion relies on taking the uint8 value of each byte, the first character in the byte is the uint8 value divided by 16 and the second character is modulo of the 16 division\\r\\n    for (uint256 i; i < pubKey.length; i++) {\\r\\n      buffer[i * 2] = symbols[uint8(pubKey[i]) / symbols.length];\\r\\n      buffer[i * 2 + 1] = symbols[uint8(pubKey[i]) % symbols.length];\\r\\n    }\\r\\n\\r\\n    return string(abi.encodePacked(\\\"0x\\\", buffer));\\r\\n  }\\r\\n\\r\\n  function getPoRAddressList(\\r\\n    uint256 _startIndex,\\r\\n    uint256 _endIndex\\r\\n  ) external view override returns (string[] memory) {\\r\\n    uint256 activeValidatorLength = activeValidatorIndexes.length();\\r\\n\\r\\n    if (_endIndex < _startIndex || activeValidatorLength == 0) {\\r\\n      return new string[](0);\\r\\n    }\\r\\n\\r\\n    uint256 activeValidatorsEndIndex = activeValidatorLength - 1;\\r\\n\\r\\n    // If specifying a startIndex that is greater than the length, return an empty array as no items exist at this index\\r\\n    if (_startIndex > activeValidatorsEndIndex) {\\r\\n      return new string[](0);\\r\\n    }\\r\\n\\r\\n    // If the _endIndex is out of range, update it\\r\\n    if (_endIndex > activeValidatorsEndIndex) {\\r\\n      _endIndex = activeValidatorsEndIndex;\\r\\n    }\\r\\n\\r\\n    // Amount of addresses equal to the end - the start, adding 1 as we are inclusive of the item at the _endIndex\\r\\n    uint256 numAddresses = _endIndex - _startIndex + 1;\\r\\n\\r\\n    string[] memory addresses = new string[](numAddresses);\\r\\n\\r\\n    for (uint256 i; i < numAddresses; i++) {\\r\\n      uint256 values = uint256(activeValidatorIndexes.at(i + _startIndex));\\r\\n\\r\\n      // Split the response to get the operatorId and keyIndex values\\r\\n      uint128 operatorId = uint128(values >> 128);\\r\\n      uint128 keyIndex = uint128(values);\\r\\n\\r\\n      bytes memory pubKey = operatorIdToValidatorDetails[operatorId]\\r\\n        .at(keyIndex)\\r\\n        .pubKey;\\r\\n\\r\\n      addresses[i] = _parsePubKeyToString(pubKey);\\r\\n    }\\r\\n\\r\\n    return addresses;\\r\\n  }\\r\\n\\r\\n  // ************************************\\r\\n  // ***** Internal helpers *****\\r\\n\\r\\n  /**\\r\\n   * @dev This method safely returns an Operator struct from the provided _operatorAddress.\\r\\n   * @notice Throws if an operator cannot be found for the provided address.\\r\\n   * @param _operatorAddress The controlling address of the given operator\\r\\n   * @return operator The Operator struct\\r\\n   */\\r\\n  function _getOperatorSafe(\\r\\n    address _operatorAddress\\r\\n  ) internal view returns (Operator storage operator) {\\r\\n    uint128 operatorId = _getOperatorIdSafe(_operatorAddress);\\r\\n\\r\\n    operator = getOperatorForOperatorId[operatorId];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev This method safely returns the operatorId of the given _operatorAddress\\r\\n   * @notice Throws an error if the given _operatorAddress doesn't exist\\r\\n   * @param _operatorAddress The controlling address of the given operator\\r\\n   * @return operatorId The operator's ID\\r\\n   */\\r\\n  function _getOperatorIdSafe(\\r\\n    address _operatorAddress\\r\\n  ) internal view returns (uint128 operatorId) {\\r\\n    operatorId = getOperatorIdForAddress[_operatorAddress];\\r\\n\\r\\n    // The core reasoning behind adding +1 to operatorId's\\r\\n    if (operatorId == 0) {\\r\\n      revert NoOperatorFound(_operatorAddress);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev This method safely returns the operatorId of the given _pubKey\\r\\n   * @notice Throws if there is no found operatorId for the given _pubKey\\r\\n   * @param _pubKey The public key to find an operator with\\r\\n   * @return operatorId The operator ID that controls the given pubKey\\r\\n   */\\r\\n  function _getOperatorIdForPubKeySafe(\\r\\n    bytes calldata _pubKey\\r\\n  ) internal view returns (uint128 operatorId) {\\r\\n    operatorId = getOperatorIdForPubKey[_pubKey];\\r\\n\\r\\n    if (operatorId == 0) {\\r\\n      revert NoPubKeyFound(_pubKey);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev This method encodes the provided operatorId and nextKey into a single bytes32 variable. This is used in the activeValidatorIndexes array\\r\\n   * @param operatorId The operator id to encode\\r\\n   * @param nextKey The key index to encode\\r\\n   * @return The encoded bytes32 variable\\r\\n   */\\r\\n  function _encodeOperatorIdAndKeyIndex(\\r\\n    uint128 operatorId,\\r\\n    uint128 nextKey\\r\\n  ) internal pure returns (bytes32) {\\r\\n    return bytes32((uint256(operatorId) << 128) | (nextKey));\\r\\n  }\\r\\n\\r\\n  // ************************************\\r\\n  // ***** External view methods *****\\r\\n\\r\\n  function getOperator(\\r\\n    address _operatorAddress\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    override\\r\\n    returns (\\r\\n      Operator memory operator,\\r\\n      uint128 totalValidatorDetails,\\r\\n      uint128 operatorId\\r\\n    )\\r\\n  {\\r\\n    operatorId = _getOperatorIdSafe(_operatorAddress);\\r\\n    operator = getOperatorForOperatorId[operatorId];\\r\\n    // Safe downcast as the limit is enforced in the addNewValidatorDetails method\\r\\n    totalValidatorDetails = uint128(\\r\\n      operatorIdToValidatorDetails[operatorId].length()\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function getOperatorsPendingValidatorDetails(\\r\\n    address _operatorAddress\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    override\\r\\n    returns (ValidatorDetails[] memory validatorDetails)\\r\\n  {\\r\\n    uint128 operatorId = _getOperatorIdSafe(_operatorAddress);\\r\\n\\r\\n    if (operatorIdToValidatorDetails[operatorId].length() == 0) {\\r\\n      return validatorDetails;\\r\\n    }\\r\\n\\r\\n    validatorDetails = operatorIdToValidatorDetails[operatorId].range(\\r\\n      getOperatorForOperatorId[operatorId].activeValidators,\\r\\n      operatorIdToValidatorDetails[operatorId].length() - 1\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function getRewardDetailsForOperatorId(\\r\\n    uint128 _operatorId\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    override\\r\\n    returns (address rewardAddress, uint128 activeValidators)\\r\\n  {\\r\\n    activeValidators = getOperatorForOperatorId[_operatorId].activeValidators;\\r\\n    rewardAddress = getOperatorForOperatorId[_operatorId].rewardAddress;\\r\\n  }\\r\\n\\r\\n  function getOperatorsActiveValidatorDetails(\\r\\n    address _operatorAddress\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    override\\r\\n    returns (ValidatorDetails[] memory validatorDetails)\\r\\n  {\\r\\n    uint128 operatorId = _getOperatorIdSafe(_operatorAddress);\\r\\n\\r\\n    if (getOperatorForOperatorId[operatorId].activeValidators == 0) {\\r\\n      return validatorDetails;\\r\\n    }\\r\\n\\r\\n    validatorDetails = operatorIdToValidatorDetails[operatorId].range(\\r\\n      0,\\r\\n      getOperatorForOperatorId[operatorId].activeValidators - 1\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IAccessControlManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport {IAccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport {IDepositManager} from \\\"./IDepositManager.sol\\\";\\r\\nimport {IrswETH} from \\\"./IrswETH.sol\\\";\\r\\nimport {INodeOperatorRegistry} from \\\"./INodeOperatorRegistry.sol\\\";\\r\\n\\r\\n/**\\r\\n  @title IAccessControlManager\\r\\n  @author https://github.com/max-taylor \\r\\n  @dev The interface for the Access Control Manager, which manages roles and permissions for contracts within the Swell ecosystem\\r\\n*/\\r\\ninterface IAccessControlManager is IAccessControlEnumerableUpgradeable {\\r\\n  // ***** Structs ******\\r\\n\\r\\n  /**\\r\\n    @dev Parameters for initializing the contract.\\r\\n    @param admin The admin address\\r\\n    @param swellTreasury The swell treasury address\\r\\n  */\\r\\n  struct InitializeParams {\\r\\n    address admin;\\r\\n    address swellTreasury;\\r\\n  }\\r\\n\\r\\n  // ***** Errors ******\\r\\n\\r\\n  /**\\r\\n    @dev Error thrown when attempting to pause an already-paused boolean\\r\\n  */\\r\\n  error AlreadyPaused();\\r\\n\\r\\n  /**\\r\\n    @dev Error thrown when attempting to unpause an already-unpaused boolean\\r\\n  */\\r\\n  error AlreadyUnpaused();\\r\\n\\r\\n  // ***** Events ******\\r\\n\\r\\n  /**\\r\\n    @dev Emitted when a new DepositManager contract address is set.\\r\\n    @param newAddress The new DepositManager contract address.\\r\\n    @param oldAddress The old DepositManager contract address.\\r\\n  */\\r\\n  event UpdatedDepositManager(address newAddress, address oldAddress);\\r\\n\\r\\n  /**\\r\\n    @dev Emitted when a new NodeOperatorRegistry contract address is set.\\r\\n    @param newAddress The new NodeOperatorRegistry contract address.\\r\\n    @param oldAddress The old NodeOperatorRegistry contract address.\\r\\n  */\\r\\n  event UpdatedNodeOperatorRegistry(address newAddress, address oldAddress);\\r\\n\\r\\n  /**\\r\\n    @dev Emitted when a new SwellTreasury contract address is set.\\r\\n    @param newAddress The new SwellTreasury contract address.\\r\\n    @param oldAddress The old SwellTreasury contract address.\\r\\n  */\\r\\n  event UpdatedSwellTreasury(address newAddress, address oldAddress);\\r\\n\\r\\n  /**\\r\\n    @dev Emitted when a new RswETH contract address is set.\\r\\n    @param newAddress The new RswETH contract address.\\r\\n    @param oldAddress The old RswETH contract address.\\r\\n  */\\r\\n  event UpdatedRswETH(address newAddress, address oldAddress);\\r\\n\\r\\n  /**\\r\\n    @dev Emitted when core methods functionality is paused or unpaused.\\r\\n    @param newPausedStatus The new paused status.\\r\\n  */\\r\\n  event CoreMethodsPause(bool newPausedStatus);\\r\\n\\r\\n  /**\\r\\n    @dev Emitted when bot methods functionality is paused or unpaused.\\r\\n    @param newPausedStatus The new paused status.\\r\\n  */\\r\\n  event BotMethodsPause(bool newPausedStatus);\\r\\n\\r\\n  /**\\r\\n    @dev Emitted when operator methods functionality is paused or unpaused.\\r\\n    @param newPausedStatus The new paused status.\\r\\n  */\\r\\n  event OperatorMethodsPause(bool newPausedStatus);\\r\\n\\r\\n  /**\\r\\n    @dev Emitted when withdrawals functionality is paused or unpaused.\\r\\n    @param newPausedStatus The new paused status.\\r\\n  */\\r\\n  event WithdrawalsPause(bool newPausedStatus);\\r\\n\\r\\n  // ************************************\\r\\n  // ***** External Methods ******\\r\\n\\r\\n  /**\\r\\n   * @dev Pass-through method to call the _checkRole method on the inherited access control contract. This method is to be used by external contracts that are using this centralised access control manager, this ensures that if the check fails it reverts with the correct access control error message\\r\\n   * @param role The role to check\\r\\n   * @param account The account to check for\\r\\n   */\\r\\n  function checkRole(bytes32 role, address account) external view;\\r\\n\\r\\n  // ***** Setters ******\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the `rswETH` address to `_rswETH`.\\r\\n   * @dev This function is only callable by the `PLATFORM_ADMIN` role.\\r\\n   * @param _rswETH The address of the `rswETH` contract.\\r\\n   */\\r\\n  function setRswETH(IrswETH _rswETH) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the `DepositManager` address to `_depositManager`.\\r\\n   * @dev This function is only callable by the `PLATFORM_ADMIN` role.\\r\\n   * @param _depositManager The address of the `DepositManager` contract.\\r\\n   */\\r\\n  function setDepositManager(IDepositManager _depositManager) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the `NodeOperatorRegistry` address to `_NodeOperatorRegistry`.\\r\\n   * @dev This function is only callable by the `PLATFORM_ADMIN` role.\\r\\n   * @param _NodeOperatorRegistry The address of the `NodeOperatorRegistry` contract.\\r\\n   */\\r\\n  function setNodeOperatorRegistry(\\r\\n    INodeOperatorRegistry _NodeOperatorRegistry\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the `SwellTreasury` address to `_swellTreasury`.\\r\\n   * @dev This function is only callable by the `PLATFORM_ADMIN` role.\\r\\n   * @param _swellTreasury The new address of the `SwellTreasury` contract.\\r\\n   */\\r\\n  function setSwellTreasury(address _swellTreasury) external;\\r\\n\\r\\n  // ***** Getters ******\\r\\n\\r\\n  /**\\r\\n    @dev Returns the PLATFORM_ADMIN role.\\r\\n    @return The bytes32 representation of the PLATFORM_ADMIN role.\\r\\n  */\\r\\n  function PLATFORM_ADMIN() external pure returns (bytes32);\\r\\n\\r\\n  /**\\r\\n    @dev Returns the Swell ETH contract.\\r\\n    @return The Swell ETH contract.\\r\\n  */\\r\\n  function rswETH() external returns (IrswETH);\\r\\n\\r\\n  /**\\r\\n    @dev Returns the address of the Swell Treasury contract.\\r\\n    @return The address of the Swell Treasury contract.\\r\\n  */\\r\\n  function SwellTreasury() external returns (address);\\r\\n\\r\\n  /**\\r\\n    @dev Returns the Deposit Manager contract.\\r\\n    @return The Deposit Manager contract.\\r\\n  */\\r\\n  function DepositManager() external returns (IDepositManager);\\r\\n\\r\\n  /**\\r\\n    @dev Returns the Node Operator Registry contract.\\r\\n    @return The Node Operator Registry contract.\\r\\n  */\\r\\n  function NodeOperatorRegistry() external returns (INodeOperatorRegistry);\\r\\n\\r\\n  /**\\r\\n    @dev Returns true if core methods are currently paused.\\r\\n    @return Whether core methods are paused.\\r\\n  */\\r\\n  function coreMethodsPaused() external returns (bool);\\r\\n\\r\\n  /**\\r\\n    @dev Returns true if bot methods are currently paused.\\r\\n    @return Whether bot methods are paused.\\r\\n  */\\r\\n  function botMethodsPaused() external returns (bool);\\r\\n\\r\\n  /**\\r\\n    @dev Returns true if operator methods are currently paused.\\r\\n    @return Whether operator methods are paused.\\r\\n  */\\r\\n  function operatorMethodsPaused() external returns (bool);\\r\\n\\r\\n  /**\\r\\n    @dev Returns true if withdrawals are currently paused.\\r\\n    @dev ! Note that this is completely unused in the current implementation and is a placeholder that will be used once the withdrawals are implemented.\\r\\n    @return Whether withdrawals are paused.\\r\\n  */\\r\\n  function withdrawalsPaused() external returns (bool);\\r\\n\\r\\n  // ***** Pausable methods ******\\r\\n\\r\\n  /**\\r\\n    @dev Pauses the core methods of the Swell ecosystem, only callable by the PLATFORM_ADMIN\\r\\n  */\\r\\n  function pauseCoreMethods() external;\\r\\n\\r\\n  /**\\r\\n    @dev Unpauses the core methods of the Swell ecosystem, only callable by the PLATFORM_ADMIN\\r\\n  */\\r\\n  function unpauseCoreMethods() external;\\r\\n\\r\\n  /**\\r\\n    @dev Pauses the bot specific methods, only callable by the PLATFORM_ADMIN\\r\\n  */\\r\\n  function pauseBotMethods() external;\\r\\n\\r\\n  /**\\r\\n    @dev Unpauses the bot specific methods, only callable by the PLATFORM_ADMIN\\r\\n  */\\r\\n  function unpauseBotMethods() external;\\r\\n\\r\\n  /**\\r\\n    @dev Pauses the operator methods in the NO registry contract, only callable by the PLATFORM_ADMIN\\r\\n  */\\r\\n  function pauseOperatorMethods() external;\\r\\n\\r\\n  /**\\r\\n    @dev Unpauses the operator methods in the NO registry contract, only callable by the PLATFORM_ADMIN\\r\\n  */\\r\\n  function unpauseOperatorMethods() external;\\r\\n\\r\\n  /**\\r\\n    @dev Pauses the withdrawals of the Swell ecosystem, only callable by the PLATFORM_ADMIN\\r\\n  */\\r\\n  function pauseWithdrawals() external;\\r\\n\\r\\n  /**\\r\\n    @dev Unpauses the withdrawals of the Swell ecosystem, only callable by the PLATFORM_ADMIN\\r\\n  */\\r\\n  function unpauseWithdrawals() external;\\r\\n\\r\\n  /**\\r\\n   * @dev This method withdraws contract's _token balance to a platform admin\\r\\n   * @param _token The ERC20 token to withdraw from the contract\\r\\n   */\\r\\n  function withdrawERC20(IERC20 _token) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IDepositManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IDepositManager\\r\\n * @author https://github.com/max-taylor\\r\\n * @notice The interface for the deposit manager contract\\r\\n */\\r\\ninterface IDepositManager {\\r\\n  // ***** Errors ******\\r\\n\\r\\n  /**\\r\\n   * @dev Error thrown when delegating to an operator who is not registered correctly for EigenLayer\\r\\n   */\\r\\n  error OperatorNotVerified();\\r\\n\\r\\n  /**\\r\\n   * @dev Error thrown when calling the withdrawETH method from an account that isn't the rswETH contract\\r\\n   */\\r\\n  error InvalidETHWithdrawCaller();\\r\\n\\r\\n  /**\\r\\n   * @dev Error thrown when the depositDataRoot parameter in the setupValidators contract doesn't match the onchain deposit data root from the deposit contract\\r\\n   */\\r\\n  error InvalidDepositDataRoot();\\r\\n\\r\\n  /**\\r\\n   * @dev Error thrown when setting up new validators and the contract doesn't hold enough ETH to be able to set them up.\\r\\n   */\\r\\n  error InsufficientETHBalance();\\r\\n\\r\\n  /**\\r\\n   * @dev Error thrown when an eigen pod has already been created for a user\\r\\n   */\\r\\n  error EigenPodMaxLimitReached();\\r\\n\\r\\n  /**\\r\\n   * @dev Error thrown when an eigen pod has not already been created\\r\\n   */\\r\\n  error EigenPodNotCreated();\\r\\n\\r\\n  /**\\r\\n   * @dev Error thrown when no public keys are provided to setupValidators\\r\\n   */\\r\\n  error NoPubKeysProvided();\\r\\n\\r\\n  // ***** Events ******\\r\\n\\r\\n  /**\\r\\n   * Emitted when the new EigenLayerPod is created\\r\\n   * @param eigenPod The address of the new EigenPod\\r\\n   */\\r\\n  event EigenPodCreated(address eigenPod);\\r\\n\\r\\n  /**\\r\\n   * Emitted when new validators are setup\\r\\n   * @param pubKeys The pubKeys that have been used for validator setup\\r\\n   */\\r\\n  event ValidatorsSetup(bytes[] pubKeys);\\r\\n\\r\\n  /**\\r\\n   * @dev Event is fired when some contracts receive ETH\\r\\n   * @param from The account that sent the ETH\\r\\n   * @param amount The amount of ETH received\\r\\n   */\\r\\n  event ETHReceived(address indexed from, uint256 amount);\\r\\n\\r\\n  // ************************************\\r\\n  // ***** External methods ******\\r\\n\\r\\n  /**\\r\\n   * @dev This method withdraws contract's _token balance to a platform admin\\r\\n   * @param _token The ERC20 token to withdraw from the contract\\r\\n   */\\r\\n  function withdrawERC20(IERC20 _token) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Formats ETH1 the withdrawal credentials according to the following standard: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/validator.md#eth1_address_withdrawal_prefix\\r\\n   * @dev It doesn't outline the withdrawal prefixes, they can be found here: https://eth2book.info/altair/part3/config/constants#withdrawal-prefixes\\r\\n   * @dev As the EigenPod is going to be the withdrawal contract, we will be doing ETH1 withdrawals. The standard for this is a 32 byte response where; the first byte stores the withdrawal prefix (0x01), the following 11 bytes are empty and the last 20 bytes are the address\\r\\n   */\\r\\n  function generateWithdrawalCredentialsForEigenPod() external view returns (bytes memory);\\r\\n  \\r\\n  /**\\r\\n   * @dev This method allows setting up of new validators in the beacon deposit contract, it ensures the provided pubKeys are unused in the NO registry\\r\\n   * @notice An off-chain service provides front-running protection by validating each pubKey ensuring that it hasn't been used for a validator setup. This service snapshots the depositDataRoot of the deposit contract, then this value is re-read from the deposit contract within setupValdiators() and ensures that they match, this consistency provides the front-running protection. Read more here: https://research.lido.fi/t/mitigations-for-deposit-front-running-vulnerability/1239\\r\\n   * @param _pubKeys The pubKeys to setup\\r\\n   * @param _depositDataRoot The deposit contracts deposit root which MUST match the current beacon deposit contract deposit data root otherwise the contract will revert due to the risk of the front-running vulnerability.\\r\\n   */\\r\\n  function setupValidators(\\r\\n    bytes[] calldata _pubKeys,\\r\\n    bytes32 _depositDataRoot\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/INodeOperatorRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport {IAccessControlManager} from \\\"../interfaces/IAccessControlManager.sol\\\";\\r\\n\\r\\nimport {IPoRAddresses} from \\\"../vendors/IPoRAddresses.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title INodeOperatorRegistry\\r\\n * @author https://github.com/max-taylor\\r\\n * @notice Interface for the Node Operator Registry contract.\\r\\n */\\r\\ninterface INodeOperatorRegistry is IPoRAddresses {\\r\\n  /**\\r\\n   * @dev  Struct containing the required details to setup a validator on the beacon chain\\r\\n   * @param pubKey Public key of the validator\\r\\n   * @param signature The signature of the validator\\r\\n   */\\r\\n  struct ValidatorDetails {\\r\\n    bytes pubKey;\\r\\n    bytes signature;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev  Struct containing operator details\\r\\n   * @param enabled Flag indicating if the operator is enabled or disabled\\r\\n   * @param rewardAddress Address to sending repricing rewards to\\r\\n   * @param controllingAddress The address that can control the operator account\\r\\n   * @param name The name of the operator\\r\\n   * @param activeValidators The amount of active validators for the operator\\r\\n   */\\r\\n  struct Operator {\\r\\n    bool enabled;\\r\\n    address rewardAddress;\\r\\n    address controllingAddress;\\r\\n    string name;\\r\\n    uint128 activeValidators;\\r\\n  }\\r\\n\\r\\n  // ***** Events *****\\r\\n  /**\\r\\n   * @dev  Emitted when a new operator is added.\\r\\n   * @param operatorAddress  The address of the newly added operator.\\r\\n   * @param rewardAddress    The address associated with the reward for the operator.\\r\\n   */\\r\\n  event OperatorAdded(address operatorAddress, address rewardAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when an operator's address is updated.\\r\\n   * @param oldAddress  The address of the operator that was updated.\\r\\n   * @param newAddress  The new address of the operator.\\r\\n   */\\r\\n  event OperatorAddressUpdated(address oldAddress, address newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev  Emitted when an operator is enabled.\\r\\n   * @param operator  The address of the operator that was enabled.\\r\\n   */\\r\\n  event OperatorEnabled(address indexed operator);\\r\\n\\r\\n  /**\\r\\n   * @dev  Emitted when an operator is disabled.\\r\\n   * @param operator  The address of the operator that was disabled.\\r\\n   */\\r\\n  event OperatorDisabled(address indexed operator);\\r\\n\\r\\n  /**\\r\\n   * @dev  Emitted when the validator details for an operator are added.\\r\\n   * @param operator  The address of the operator for which the validator details were added.\\r\\n   * @param pubKeys   An array of `ValidatorDetails` for the operator.\\r\\n   */\\r\\n  event OperatorAddedValidatorDetails(\\r\\n    address indexed operator,\\r\\n    ValidatorDetails[] pubKeys\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev  Emitted when active public keys are deleted.\\r\\n   * @param pubKeys  An array of public keys that were deleted.\\r\\n   */\\r\\n  event ActivePubKeysDeleted(bytes[] pubKeys);\\r\\n\\r\\n  /**\\r\\n   * @dev  Emitted when pending public keys are deleted.\\r\\n   * @param pubKeys  An array of public keys that were deleted.\\r\\n   */\\r\\n  event PendingPubKeysDeleted(bytes[] pubKeys);\\r\\n\\r\\n  /**\\r\\n   * @dev  Emitted when public keys are used for validator setup.\\r\\n   * @param pubKeys  An array of public keys that were used for validator setup.\\r\\n   */\\r\\n  event PubKeysUsedForValidatorSetup(bytes[] pubKeys);\\r\\n\\r\\n  // ***** Errors *****\\r\\n  /**\\r\\n   * @dev Thrown when an operator is not found.\\r\\n   * @param operator  The address of the operator that was not found.\\r\\n   */\\r\\n  error NoOperatorFound(address operator);\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown when an operator already exists.\\r\\n   * @param operator The address of the operator that already exists.\\r\\n   */\\r\\n  error OperatorAlreadyExists(address operator);\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown when an operator is already enabled.\\r\\n   */\\r\\n  error OperatorAlreadyEnabled();\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown when an operator is already disabled.\\r\\n   */\\r\\n  error OperatorAlreadyDisabled();\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown when an array length of zero is invalid.\\r\\n   */\\r\\n  error InvalidArrayLengthOfZero();\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown when an operator is adding new validator details and this causes the total amount of operator's validator details to exceed uint128\\r\\n   */\\r\\n  error AmountOfValidatorDetailsExceedsLimit();\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown during setup of new validators, when comparing the next operator's public key to the provided public key they should match. This ensures consistency in the tracking of the active and pending validator details.\\r\\n   * @param foundPubKey The operator's next available public key\\r\\n   * @param providedPubKey The public key that was passed in as an argument\\r\\n   */\\r\\n  error NextOperatorPubKeyMismatch(bytes foundPubKey, bytes providedPubKey);\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown during the setup of new validators and when the operator that has no pending details left to use\\r\\n   */\\r\\n  error OperatorOutOfPendingKeys();\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown when the given pubKey hasn't been added to the registry and cannot be found\\r\\n   * @param pubKey  The public key that was not found.\\r\\n   */\\r\\n  error NoPubKeyFound(bytes pubKey);\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown when an operator tries to use the node operator registry whilst they are disabled\\r\\n   */\\r\\n  error CannotUseDisabledOperator();\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown when a duplicate public key is added.\\r\\n   * @param existingKey  The public key that already exists.\\r\\n   */\\r\\n  error CannotAddDuplicatePubKey(bytes existingKey);\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown when the given pubKey doesn't exist in the pending validator details sets\\r\\n   * @param pubKey  The missing pubKey\\r\\n   */\\r\\n  error MissingPendingValidatorDetails(bytes pubKey);\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown when the pubKey doesn't exist in the active validator details set\\r\\n   * @param pubKey  The missing pubKey\\r\\n   */\\r\\n  error MissingActiveValidatorDetails(bytes pubKey);\\r\\n\\r\\n  /**\\r\\n   * @dev Throw when the msg.sender isn't the Deposit Manager contract\\r\\n   */\\r\\n  error InvalidPubKeySetupCaller();\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown when an operator is trying to add validator details and a provided pubKey isn't the correct length\\r\\n   */\\r\\n  error InvalidPubKeyLength();\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown when an operator is trying to add validator details and a provided signature isn't the correct length\\r\\n   */\\r\\n  error InvalidSignatureLength();\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown when trying to update the controlling address for an operator and the new controlling address is the same as the current controlling address\\r\\n   */\\r\\n  error CannotSetOperatorControllingAddressToSameAddress();\\r\\n\\r\\n  // ************************************\\r\\n  // ***** External  methods ******\\r\\n\\r\\n  /**\\r\\n   * @dev This method withdraws contract's _token balance to a platform admin\\r\\n   * @param _token The ERC20 token to withdraw from the contract\\r\\n   */\\r\\n  function withdrawERC20(IERC20 _token) external;\\r\\n\\r\\n  /**\\r\\n   * @dev  Gets the next available validator details, ordered by operators with the least amount of active validators. There may be less available validators then the provided _numNewValidators amount, in that case the function will return an array of length equal to _numNewValidators but all indexes after the second return value; foundValidators, will be 0x0 values\\r\\n   * @param _numNewValidators The number of new validators to get details for.\\r\\n   * @return An array of ValidatorDetails and the length of the array of non-zero validator details\\r\\n   * @notice This method tries to return enough validator details to equal the provided _numNewValidators, but if there aren't enough validator details to find, it will simply return what it found, and the caller will need to check for empty values.\\r\\n   */\\r\\n  function getNextValidatorDetails(\\r\\n    uint256 _numNewValidators\\r\\n  ) external view returns (ValidatorDetails[] memory, uint256 foundValidators);\\r\\n\\r\\n  /**\\r\\n   * @dev  Allows the DepositManager to move provided _pubKeys from the pending validator details arrays into the active validator details array. It also returns the validator details, so that the DepositManager can pass the signature along to the ETH2 deposit contract.\\r\\n   * @param _pubKeys Array of public keys to use for validator setup.\\r\\n   * @return validatorDetails The associated validator details for the given public keys\\r\\n   * @notice This method will be called when the DepositManager is setting up new validators.\\r\\n   */\\r\\n  function usePubKeysForValidatorSetup(\\r\\n    bytes[] calldata _pubKeys\\r\\n  ) external returns (ValidatorDetails[] memory validatorDetails);\\r\\n\\r\\n  // ** Operator management methods **\\r\\n\\r\\n  /**\\r\\n   * @dev  Adds new validator details to the registry.\\r\\n  /**\\r\\n   * @dev  Callable by node operator's to add their validator details to the setup queue\\r\\n   * @param _validatorDetails Array of ValidatorDetails to add.\\r\\n  */\\r\\n  function addNewValidatorDetails(\\r\\n    ValidatorDetails[] calldata _validatorDetails\\r\\n  ) external;\\r\\n\\r\\n  // ** PLATFORM_ADMIN management methods **\\r\\n\\r\\n  /**\\r\\n   * @dev  Adds a new operator to the registry.\\r\\n   * @param _name Name of the operator.\\r\\n   * @param _operatorAddress Address of the operator.\\r\\n   * @param _rewardAddress Address of the reward recipient for this operator.\\r\\n   * @notice Throws if an operator already exists with the given _operatorAddress\\r\\n   */\\r\\n  function addOperator(\\r\\n    string calldata _name,\\r\\n    address _operatorAddress,\\r\\n    address _rewardAddress\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev  Enables an operator in the registry.\\r\\n   * @param _operatorAddress Address of the operator to enable.\\r\\n   * @notice Throws NoOperatorFound if the operator address is not found in the registry\\r\\n   */\\r\\n  function enableOperator(address _operatorAddress) external;\\r\\n\\r\\n  /**\\r\\n   * @dev  Disables an operator in the registry.\\r\\n   * @param _operatorAddress Address of the operator to disable.\\r\\n   * @notice Throws NoOperatorFound if the operator address is not found in the registry\\r\\n   */\\r\\n  function disableOperator(address _operatorAddress) external;\\r\\n\\r\\n  /**\\r\\n   * @dev  Updates the controlling address of an operator in the registry.\\r\\n   * @param _operatorAddress Current address of the operator.\\r\\n   * @param _newOperatorAddress New address of the operator.\\r\\n   * @notice Throws NoOperatorFound if the operator address is not found in the registry\\r\\n   */\\r\\n  function updateOperatorControllingAddress(\\r\\n    address _operatorAddress,\\r\\n    address _newOperatorAddress\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev  Updates the reward address of an operator in the registry.\\r\\n   * @param _operatorAddress Address of the operator to update.\\r\\n   * @param _newRewardAddress New reward address for the operator.\\r\\n   * @notice Throws NoOperatorFound if the operator address is not found in the registry\\r\\n   */\\r\\n  function updateOperatorRewardAddress(\\r\\n    address _operatorAddress,\\r\\n    address _newRewardAddress\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev  Updates the name of an operator in the registry\\r\\n   * @param _operatorAddress The address of the operator to update\\r\\n   * @param _name The new name for the operator\\r\\n   * @notice Throws NoOperatorFound if the operator address is not found in the registry\\r\\n   */\\r\\n  function updateOperatorName(\\r\\n    address _operatorAddress,\\r\\n    string calldata _name\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev  Allows the PLATFORM_ADMIN to delete validators that are pending. This is likely to be called via an admin if a public key fails the front-running checks\\r\\n   * @notice Throws InvalidArrayLengthOfZero if the length of _pubKeys is 0\\r\\n   * @notice Throws NoPubKeyFound if any of the provided pubKeys is not found in the pending validators set\\r\\n   * @param _pubKeys The public keys of the pending validators to delete\\r\\n   */\\r\\n  function deletePendingValidators(bytes[] calldata _pubKeys) external;\\r\\n\\r\\n  /**\\r\\n   * @dev  Allows the PLATFORM_ADMIN to delete validator public keys that have been used to setup a validator and that validator has now exited\\r\\n   * @notice Throws NoPubKeyFound if any of the provided pubKeys is not found in the active validators set\\r\\n   * @notice Throws InvalidArrayLengthOfZero if the length of _pubKeys is 0\\r\\n   * @param _pubKeys The public keys of the active validators to delete\\r\\n   */\\r\\n  function deleteActiveValidators(bytes[] calldata _pubKeys) external;\\r\\n\\r\\n  /**\\r\\n   * @dev  Returns the address of the AccessControlManager contract\\r\\n   */\\r\\n  function AccessControlManager() external returns (IAccessControlManager);\\r\\n\\r\\n  /**\\r\\n   * @dev  Returns the operator details for a given operator address\\r\\n   * @notice Throws NoOperatorFound if the operator address is not found in the registry\\r\\n   * @param _operatorAddress The address of the operator to retrieve\\r\\n   * @return operator The operator details, including name, reward address, and enabled status\\r\\n   * @return totalValidatorDetails The total amount of validator details for an operator\\r\\n   * @return operatorId The operator's Id\\r\\n   */\\r\\n  function getOperator(\\r\\n    address _operatorAddress\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      Operator memory operator,\\r\\n      uint128 totalValidatorDetails,\\r\\n      uint128 operatorId\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @dev  Returns the pending validator details for a given operator address\\r\\n   * @notice Throws NoOperatorFound if the operator address is not found in the registry\\r\\n   * @param _operatorAddress The address of the operator to retrieve pending validator details for\\r\\n   * @return validatorDetails The pending validator details for the given operator\\r\\n   */\\r\\n  function getOperatorsPendingValidatorDetails(\\r\\n    address _operatorAddress\\r\\n  ) external returns (ValidatorDetails[] memory);\\r\\n\\r\\n  /**\\r\\n   * @dev  Returns the active validator details for a given operator address\\r\\n   * @notice Throws NoOperatorFound if the operator address is not found in the registry\\r\\n   * @param _operatorAddress The address of the operator to retrieve active validator details for\\r\\n   * @return validatorDetails The active validator details for the given operator\\r\\n   */\\r\\n  function getOperatorsActiveValidatorDetails(\\r\\n    address _operatorAddress\\r\\n  ) external returns (ValidatorDetails[] memory validatorDetails);\\r\\n\\r\\n  /**\\r\\n   * @dev  Returns the reward details for a given operator Id, this method is used in the rswETH contract when paying rswETH rewards\\r\\n   * @param _operatorId The operator Id to get the reward details for\\r\\n   * @return rewardAddress The reward address of the operator\\r\\n   * @return activeValidators The amount of active validators for the operator\\r\\n   */\\r\\n  function getRewardDetailsForOperatorId(\\r\\n    uint128 _operatorId\\r\\n  ) external returns (address rewardAddress, uint128 activeValidators);\\r\\n\\r\\n  /**\\r\\n   * @dev  Returns the number of operators in the registry\\r\\n   */\\r\\n  function numOperators() external returns (uint128);\\r\\n\\r\\n  /**\\r\\n   * @dev  Returns the amount of pending validator keys in the registry\\r\\n   */\\r\\n  function numPendingValidators() external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev  Returns the operator ID for a given operator address\\r\\n   * @notice Throws NoOperatorFound if the operator address is not found in the registry\\r\\n   * @param _operator The address of the operator to retrieve the operator ID for\\r\\n   * @return _operatorId The operator ID for the given operator\\r\\n   */\\r\\n  function getOperatorIdForAddress(\\r\\n    address _operator\\r\\n  ) external returns (uint128 _operatorId);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the `operatorId` associated with the given `pubKey`.\\r\\n   * @param pubKey  The public key to lookup the `operatorId` for.\\r\\n   * @notice Returns 0 if no operatorId controls the pubKey\\r\\n   */\\r\\n  function getOperatorIdForPubKey(\\r\\n    bytes calldata pubKey\\r\\n  ) external returns (uint128);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IrswETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title RswETH Interface\\r\\n * @author https://github.com/max-taylor\\r\\n * @dev This interface provides the methods to interact with the RswETH contract.\\r\\n */\\r\\ninterface IrswETH is IERC20Upgradeable {\\r\\n  // ***** Errors ******\\r\\n\\r\\n  /**\\r\\n   * @dev Error thrown when attempting to reprice with zero RswETH supply.\\r\\n   */\\r\\n  error CannotRepriceWithZeroRswETHSupply();\\r\\n\\r\\n  /**\\r\\n   * @dev Error thrown when passing a preRewardETHReserves value equal to 0 into the repricing function\\r\\n   */\\r\\n  error InvalidPreRewardETHReserves();\\r\\n\\r\\n  /**\\r\\n   * @dev Error thrown when repricing the rate and distributing rewards to NOs when they are no active validators. This condition should never happen; it means that no active validators were running but we still have rewards, despite this it's still here for security\\r\\n   */\\r\\n  error NoActiveValidators();\\r\\n\\r\\n  /**\\r\\n   * @dev Error thrown when updating the reward percentage for either the NOs or the swell treasury and the update will cause the NO percentage + swell treasury percentage to exceed 100%.\\r\\n   */\\r\\n  error RewardPercentageTotalOverflow();\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown when calling the reprice function and not enough time has elapsed between the previous repriace and the current reprice.\\r\\n   * @param remainingTime Remaining time until reprice can be called\\r\\n   */\\r\\n  error NotEnoughTimeElapsedForReprice(uint256 remainingTime);\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown when repricing the rate and the difference in reserves values is greater than expected\\r\\n   * @param repriceDiff The difference between the previous rswETH rate and what would be the updated rate\\r\\n   * @param maximumRepriceDiff The maximum allowed difference in rswETH rate\\r\\n   */\\r\\n  error RepriceDifferenceTooLarge(\\r\\n    uint256 repriceDiff,\\r\\n    uint256 maximumRepriceDiff\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown during repricing when the difference in rswETH supplied to repricing compared to the actual supply is too great\\r\\n   * @param repricerswETHDiff The difference between the rswETH supplied to repricing and actual supply\\r\\n   * @param maximumrswETHRepriceDiff The maximum allowed difference in rswETH supply\\r\\n   */\\r\\n  error RepricerswETHDifferenceTooLarge(\\r\\n    uint256 repricerswETHDiff, \\r\\n    uint256 maximumrswETHRepriceDiff\\r\\n  );\\r\\n\\r\\n  // ***** Events *****\\r\\n\\r\\n  /**\\r\\n   * @dev Event emitted when a user withdraws ETH for rswETH\\r\\n   * @param to Address of the recipient.\\r\\n   * @param rswETHBurned Amount of RswETH burned in the transaction.\\r\\n   * @param ethReturned Amount of ETH returned in the transaction.\\r\\n   */\\r\\n  event ETHWithdrawn(\\r\\n    address indexed to,\\r\\n    uint256 rswETHBurned,\\r\\n    uint256 ethReturned\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Event emitted when the swell treasury reward percentage is updated.\\r\\n   * @dev Only callable by the platform admin\\r\\n   * @param oldPercentage The previous swell treasury reward percentage.\\r\\n   * @param newPercentage The new swell treasury reward percentage.\\r\\n   */\\r\\n  event SwellTreasuryRewardPercentageUpdate(\\r\\n    uint256 oldPercentage,\\r\\n    uint256 newPercentage\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Event emitted when the node operator reward percentage is updated.\\r\\n   * @dev Only callable by the platform admin\\r\\n   * @param oldPercentage The previous node operator reward percentage.\\r\\n   * @param newPercentage The new node operator reward percentage.\\r\\n   */\\r\\n  event NodeOperatorRewardPercentageUpdate(\\r\\n    uint256 oldPercentage,\\r\\n    uint256 newPercentage\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Event emitted when the rswETH - ETH rate is updated\\r\\n   * @param newEthReserves The new ETH reserves for the swell protocol\\r\\n   * @param newRswETHToETHRate The new RswETH to ETH rate.\\r\\n   * @param nodeOperatorRewards The rewards for the node operator's.\\r\\n   * @param swellTreasuryRewards The rewards for the swell treasury.\\r\\n   * @param totalETHDeposited Current total ETH staked at time of reprice.\\r\\n   */\\r\\n  event Reprice(\\r\\n    uint256 newEthReserves,\\r\\n    uint256 newRswETHToETHRate,\\r\\n    uint256 nodeOperatorRewards,\\r\\n    uint256 swellTreasuryRewards,\\r\\n    uint256 totalETHDeposited\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Event is fired when some contracts receive ETH\\r\\n   * @param from The account that sent the ETH\\r\\n   * @param rswETHMinted The amount of rswETH minted to the caller\\r\\n   * @param amount The amount of ETH received\\r\\n   * @param referral The referrer's address\\r\\n   */\\r\\n  event ETHDepositReceived(\\r\\n    address indexed from,\\r\\n    uint256 amount,\\r\\n    uint256 rswETHMinted,\\r\\n    uint256 newTotalETHDeposited,\\r\\n    address indexed referral\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Event emitted on a successful call to setMinimumRepriceTime\\r\\n   * @param _oldMinimumRepriceTime The old reprice time\\r\\n   * @param _newMinimumRepriceTime The new updated reprice time\\r\\n   */\\r\\n  event MinimumRepriceTimeUpdated(\\r\\n    uint256 _oldMinimumRepriceTime,\\r\\n    uint256 _newMinimumRepriceTime\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Event emitted on a successful call to setMaximumRepricerswETHDifferencePercentage\\r\\n   * @param _oldMaximumRepricerswETHDifferencePercentage The old maximum rswETH supply difference\\r\\n   * @param _newMaximumRepricerswETHDifferencePercentage The new updated rswETH supply difference\\r\\n   */\\r\\n  event MaximumRepricerswETHDifferencePercentageUpdated(\\r\\n    uint256 _oldMaximumRepricerswETHDifferencePercentage,\\r\\n    uint256 _newMaximumRepricerswETHDifferencePercentage\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Event emitted on a successful call to setMaximumRepriceDifferencePercentage\\r\\n   * @param _oldMaximumRepriceDifferencePercentage The old maximum reprice difference\\r\\n   * @param _newMaximumRepriceDifferencePercentage The new updated maximum reprice difference\\r\\n   */\\r\\n  event MaximumRepriceDifferencePercentageUpdated(\\r\\n    uint256 _oldMaximumRepriceDifferencePercentage,\\r\\n    uint256 _newMaximumRepriceDifferencePercentage\\r\\n  );\\r\\n\\r\\n  // ************************************\\r\\n  // ***** External Methods ******\\r\\n\\r\\n  /**\\r\\n   * @dev This method withdraws contract's _token balance to a platform admin\\r\\n   * @param _token The ERC20 token to withdraw from the contract\\r\\n   */\\r\\n  function withdrawERC20(IERC20 _token) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the ETH reserves that were provided in the most recent call to the reprice function\\r\\n   * @return The last recorded ETH reserves\\r\\n   */\\r\\n  function lastRepriceETHReserves() external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the last time the reprice method was called in UNIX\\r\\n   * @return The UNIX timestamp of the last time reprice was called\\r\\n   */\\r\\n  function lastRepriceUNIX() external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the total ETH that has been deposited over the protocols lifespan\\r\\n   * @return The current total amount of ETH that has been deposited\\r\\n   */\\r\\n  function totalETHDeposited() external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the current swell treasury reward percentage.\\r\\n   * @return The current swell treasury reward percentage.\\r\\n   */\\r\\n  function swellTreasuryRewardPercentage() external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the current node operator reward percentage.\\r\\n   * @return The current node operator reward percentage.\\r\\n   */\\r\\n  function nodeOperatorRewardPercentage() external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the current RswETH to ETH rate, returns 1:1 if no reprice has occurred otherwise it returns the rswETHToETHRateFixed rate.\\r\\n   * @return The current RswETH to ETH rate.\\r\\n   */\\r\\n  function rswETHToETHRate() external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the current ETH to RswETH rate.\\r\\n   * @return The current ETH to RswETH rate.\\r\\n   */\\r\\n  function ethToRswETHRate() external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the minimum reprice time\\r\\n   * @return The minimum reprice time\\r\\n   */\\r\\n  function minimumRepriceTime() external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the maximum percentage difference with 1e18 precision\\r\\n   * @return The maximum percentage difference\\r\\n   */\\r\\n  function maximumRepriceDifferencePercentage() external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the maximum percentage difference with 1e18 precision\\r\\n   * @return The maximum percentage difference in suppled and actual rswETH supply\\r\\n   */\\r\\n  function maximumRepricerswETHDifferencePercentage() external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the new swell treasury reward percentage.\\r\\n   * @notice Only a platform admin can call this function.\\r\\n   * @param _newSwellTreasuryRewardPercentage The new swell treasury reward percentage to set.\\r\\n   */\\r\\n  function setSwellTreasuryRewardPercentage(\\r\\n    uint256 _newSwellTreasuryRewardPercentage\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the new node operator reward percentage.\\r\\n   * @notice Only a platform admin can call this function.\\r\\n   * @param _newNodeOperatorRewardPercentage The new node operator reward percentage to set.\\r\\n   */\\r\\n  function setNodeOperatorRewardPercentage(\\r\\n    uint256 _newNodeOperatorRewardPercentage\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the minimum permitted time between successful repricing calls using the block timestamp.\\r\\n   * @notice Only a platform admin can call this function.\\r\\n   * @param _minimumRepriceTime The new minimum time between successful repricing calls\\r\\n   */\\r\\n  function setMinimumRepriceTime(uint256 _minimumRepriceTime) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the maximum percentage allowable difference in rswETH supplied to repricing compared to current rswETH supply.\\r\\n   * @notice Only a platform admin can call this function.\\r\\n   * @param _maximumRepricerswETHDifferencePercentage The new maximum percentage rswETH supply difference allowed.\\r\\n   */\\r\\n  function setMaximumRepricerswETHDifferencePercentage(\\r\\n    uint256 _maximumRepricerswETHDifferencePercentage\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the maximum percentage allowable difference in rswETH to ETH price changes for a repricing call.\\r\\n   * @notice Only a platform admin can call this function.\\r\\n   * @param _maximumRepriceDifferencePercentage The new maximum percentage difference in repricing rate.\\r\\n   */\\r\\n  function setMaximumRepriceDifferencePercentage(\\r\\n    uint256 _maximumRepriceDifferencePercentage\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Deposits ETH into the contract\\r\\n   * @notice The amount of ETH deposited will be converted to RswETH at the current RswETH to ETH rate\\r\\n   */\\r\\n  function deposit() external payable;\\r\\n\\r\\n  /**\\r\\n   * @dev Deposits ETH into the contract\\r\\n   * @param referral The referrer's address\\r\\n   * @notice The amount of ETH deposited will be converted to RswETH at the current RswETH to ETH rate\\r\\n   */\\r\\n  function depositWithReferral(address referral) external payable;\\r\\n\\r\\n  /**\\r\\n  //  * TODO: Reword\\r\\n   * @dev This method reprices the rswETH -> ETH rate, this will be called via an offchain service on a regular interval, likely ~1 day. The rswETH total supply is passed as an argument to avoid a potential race conditions between the off-chain reserve calculations and the on-chain repricing\\r\\n   * @dev This method also mints a percentage of rswETH as rewards to be claimed by NO's and the swell treasury. The formula for determining the amount of rswETH to mint is the following: swETHToMint = (swETHSupply * newETHRewards * feeRate) / (preRewardETHReserves - newETHRewards * feeRate + newETHRewards)\\r\\n   * @dev The formula is quite complicated because it needs to factor in the updated exchange rate whilst it calculates the amount of rswETH rewards to mint. This ensures the rewards aren't double-minted and are backed by ETH.\\r\\n   * @param _preRewardETHReserves The PoR value exclusive of the new ETH rewards earned\\r\\n   * @param _newETHRewards The total amount of new ETH earned over the period.\\r\\n   * @param _rswETHTotalSupply The total rswETH supply at the time of off-chain reprice calculation\\r\\n   */\\r\\n  function reprice(\\r\\n    uint256 _preRewardETHReserves,\\r\\n    uint256 _newETHRewards,\\r\\n    uint256 _rswETHTotalSupply\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/EnumberableSetValidatorDetails.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport {INodeOperatorRegistry} from \\\"../interfaces/INodeOperatorRegistry.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title EnumberableSetValidatorDetails\\r\\n * @author https://github.com/max-taylor\\r\\n * @notice This library enables the usage of an enumerable set of INodeOperatorRegistry.ValidatorDetails. We store an array of INodeOperatorRegistry.ValidatorDetails and a mapping of bytes -> uint256. The mapping uses the public key from the validator details as we only ever index for ValidatorDetails for a given pubKey\\r\\n * @notice Within the array are both the pending and active validator details. From index 0 up to the operator's active validator details count (stored inside the Operator struct) are all the active validator's for an operator. The remaining details are all pending. Validator details are only ever selected sequentially and storing it in this way prevents having to move the data around which is costly\\r\\n * @notice Heavily influenced by: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/EnumerableSet.sol\\r\\n */\\r\\nlibrary EnumberableSetValidatorDetails {\\r\\n  struct ValidatorDetailsSet {\\r\\n    INodeOperatorRegistry.ValidatorDetails[] _values;\\r\\n    // Mapping of validator public keys to indexes. Using the public keys inside the mapping as we will never use the signature directly in this way\\r\\n    mapping(bytes => uint256) _indexes;\\r\\n  }\\r\\n\\r\\n  function range(\\r\\n    ValidatorDetailsSet storage set,\\r\\n    uint256 startIndex,\\r\\n    uint256 endIndex\\r\\n  )\\r\\n    internal\\r\\n    view\\r\\n    returns (INodeOperatorRegistry.ValidatorDetails[] memory validatorDetails)\\r\\n  {\\r\\n    uint256 lastValuesIndex = set._values.length - 1;\\r\\n\\r\\n    if (startIndex > lastValuesIndex) {\\r\\n      return validatorDetails;\\r\\n    }\\r\\n\\r\\n    if (endIndex > lastValuesIndex) {\\r\\n      endIndex = lastValuesIndex;\\r\\n    }\\r\\n\\r\\n    validatorDetails = new INodeOperatorRegistry.ValidatorDetails[](\\r\\n      // Inclusive of the lastIndex, so add 1\\r\\n      endIndex - startIndex + 1\\r\\n    );\\r\\n\\r\\n    for (uint256 i; i < validatorDetails.length; i++) {\\r\\n      validatorDetails[i] = set._values[startIndex + i];\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Add a value to a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was added to the set, that is if it was not\\r\\n   * already present.\\r\\n   */\\r\\n  function add(\\r\\n    ValidatorDetailsSet storage set,\\r\\n    INodeOperatorRegistry.ValidatorDetails memory value\\r\\n  ) internal returns (bool) {\\r\\n    if (!contains(set, value.pubKey)) {\\r\\n      set._values.push(value);\\r\\n      // The value is stored at length-1, but we add 1 to all indexes\\r\\n      // and use 0 as a sentinel value\\r\\n      set._indexes[value.pubKey] = set._values.length;\\r\\n      return true;\\r\\n    } else {\\r\\n      return false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the value is in the set. O(1).\\r\\n   */\\r\\n  function contains(\\r\\n    ValidatorDetailsSet storage set,\\r\\n    bytes memory pubKey\\r\\n  ) internal view returns (bool) {\\r\\n    return set._indexes[pubKey] != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev This method deletes a given pending pubKey from the set. It also checks whether the pubKey is pending by ensuring that it's index is greater than the active validator details count.\\r\\n   * @param set The set to delete the pending details from\\r\\n   * @param pubKey The pubKey to remove from the pending details\\r\\n   * @param operatorActiveValidators The operator's active validator details count\\r\\n   */\\r\\n  function removePendingDetails(\\r\\n    ValidatorDetailsSet storage set,\\r\\n    bytes memory pubKey,\\r\\n    uint128 operatorActiveValidators\\r\\n  ) internal returns (bool) {\\r\\n    uint256 pubKeyIndex = set._indexes[pubKey];\\r\\n\\r\\n    if (pubKeyIndex != 0) {\\r\\n      uint256 toDeleteIndex = pubKeyIndex - 1;\\r\\n\\r\\n      // If the given index is within the active validators, return false\\r\\n      if (toDeleteIndex < operatorActiveValidators) {\\r\\n        return false;\\r\\n      }\\r\\n\\r\\n      uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n      // Replace the item we are deleting with the last item\\r\\n      if (lastIndex != toDeleteIndex) {\\r\\n        INodeOperatorRegistry.ValidatorDetails memory lastValue = set._values[\\r\\n          lastIndex\\r\\n        ];\\r\\n\\r\\n        set._values[toDeleteIndex] = lastValue;\\r\\n        set._indexes[lastValue.pubKey] = pubKeyIndex;\\r\\n      }\\r\\n\\r\\n      // Delete the slot where the moved value was stored\\r\\n      set._values.pop();\\r\\n\\r\\n      // Delete the index for the deleted slot\\r\\n      delete set._indexes[pubKey];\\r\\n\\r\\n      return true;\\r\\n    } else {\\r\\n      return false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev This method deletes a given pubKey from the provided validator details set, but only deletes it if the index of the item is less than the operator's active validators.\\r\\n   * @dev Due to the separation in the array of active and pending details, in order to safely handle deleting an active item we must take the last active item, place it where the active item we are deleting is, then get the last pending item and place it where the last active item is. Once we do that we can safely .pop() the last item and have kept the array separation\\r\\n   * @param set An operator's validator details set\\r\\n   * @param pubKey The pubKey to delete\\r\\n   * @param operatorActiveValidators The amount of active validator's for the operator\\r\\n   */\\r\\n  function removeActiveDetails(\\r\\n    ValidatorDetailsSet storage set,\\r\\n    bytes memory pubKey,\\r\\n    uint128 operatorActiveValidators\\r\\n  ) internal returns (bool) {\\r\\n    uint256 pubKeyIndex = set._indexes[pubKey];\\r\\n\\r\\n    if (pubKeyIndex != 0 && operatorActiveValidators != 0) {\\r\\n      uint256 toDeleteIndex = pubKeyIndex - 1;\\r\\n      uint256 lastActiveValidatorIndex = operatorActiveValidators - 1;\\r\\n      uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n      // If the given index is out of range it means it's pending and cannot be deleted\\r\\n      if (toDeleteIndex > lastActiveValidatorIndex) {\\r\\n        return false;\\r\\n      }\\r\\n\\r\\n      // If the item isn't the last active validator details for the operator, then we need to replace it with the last active validator details item\\r\\n      if (toDeleteIndex != lastActiveValidatorIndex) {\\r\\n        INodeOperatorRegistry.ValidatorDetails memory lastValue = set._values[\\r\\n          lastActiveValidatorIndex\\r\\n        ];\\r\\n\\r\\n        set._values[toDeleteIndex] = lastValue;\\r\\n        set._indexes[lastValue.pubKey] = toDeleteIndex + 1;\\r\\n      }\\r\\n\\r\\n      // If there are still pending validator details, then we need to take the last pending item and put it where the last active validator details was\\r\\n      if (lastIndex > lastActiveValidatorIndex) {\\r\\n        INodeOperatorRegistry.ValidatorDetails memory lastValue = set._values[\\r\\n          lastIndex\\r\\n        ];\\r\\n\\r\\n        set._values[lastActiveValidatorIndex] = lastValue;\\r\\n        set._indexes[lastValue.pubKey] = lastActiveValidatorIndex + 1;\\r\\n      }\\r\\n\\r\\n      // Now we can delete the last item in the array\\r\\n      set._values.pop();\\r\\n\\r\\n      // Delete the index\\r\\n      delete set._indexes[pubKey];\\r\\n\\r\\n      return true;\\r\\n    } else {\\r\\n      return false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of values on the set. O(1).\\r\\n   */\\r\\n  function length(\\r\\n    ValidatorDetailsSet storage set\\r\\n  ) internal view returns (uint256) {\\r\\n    return set._values.length;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n   *\\r\\n   * Note that there are no guarantees on the ordering of values inside the\\r\\n   * array, and it may change when more values are added or removed.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `index` must be strictly less than {length}.\\r\\n   */\\r\\n  function at(\\r\\n    ValidatorDetailsSet storage set,\\r\\n    uint256 index\\r\\n  ) internal view returns (INodeOperatorRegistry.ValidatorDetails memory) {\\r\\n    return set._values[index];\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/SwellLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.16;\\r\\n\\r\\n/**\\r\\n * @title SwellLib\\r\\n * @author https://github.com/max-taylor\\r\\n * @notice This library contains roles, errors, events and functions that are widely used throughout the protocol\\r\\n */\\r\\nlibrary SwellLib {\\r\\n  // ***** Roles *****\\r\\n  /**\\r\\n   * @dev The platform admin role\\r\\n   */\\r\\n  bytes32 public constant PLATFORM_ADMIN = keccak256(\\\"PLATFORM_ADMIN\\\");\\r\\n\\r\\n  /**\\r\\n   * @dev The bot role\\r\\n   */\\r\\n  bytes32 public constant BOT = keccak256(\\\"BOT\\\");\\r\\n\\r\\n  /**\\r\\n   * @dev The role used for the swETH.reprice method\\r\\n   */\\r\\n  bytes32 public constant REPRICER = keccak256(\\\"REPRICER\\\");\\r\\n\\r\\n  // ***** Errors *****\\r\\n  /**\\r\\n   * @dev Thrown when _checkZeroAddress is called with the zero address\\r\\n   */\\r\\n  error CannotBeZeroAddress();\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown in some contracts when the contract call is received by the fallback method\\r\\n   */\\r\\n  error InvalidMethodCall();\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown in some contracts when ETH is sent directly to the contract\\r\\n   */\\r\\n  error InvalidETHDeposit();\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown when interacting with a method on the protocol that is disabled via the coreMethodsPaused bool\\r\\n   */\\r\\n  error CoreMethodsPaused();\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown when interacting with a method on the protocol that is disabled via the botMethodsPaused bool\\r\\n   */\\r\\n  error BotMethodsPaused();\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown when interacting with a method on the protocol that is disabled via the operatorMethodsPaused bool\\r\\n   */\\r\\n  error OperatorMethodsPaused();\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown when interacting with a method on the protocol that is disabled via the withdrawalsPaused bool\\r\\n   */\\r\\n  error WithdrawalsPaused();\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown when calling the withdrawERC20 method and the contracts balance is 0\\r\\n   */\\r\\n  error NoTokensToWithdraw();\\r\\n\\r\\n  /**\\r\\n   * @dev Thrown when attempting to deposit with referrer the same all calling address\\r\\n   */\\r\\n  error CannotReferSelf();\\r\\n\\r\\n  // ************************************\\r\\n  // ***** Internal Methods *****\\r\\n  /**\\r\\n   * @dev This helper is used throughout the protocol to guard against zero addresses being passed as parameters\\r\\n   * @param _address The address to check if it is the zero address\\r\\n   */\\r\\n  function _checkZeroAddress(address _address) internal pure {\\r\\n    if (_address == address(0)) {\\r\\n      revert CannotBeZeroAddress();\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/vendors/IPoRAddresses.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.16;\\r\\n\\r\\n/**\\r\\n * @title Chainlink Proof-of-Reserve address list interface.\\r\\n * @notice This interface enables Chainlink nodes to get the list addresses to be used in a PoR feed. A single\\r\\n * contract that implements this interface can only store an address list for a single PoR feed.\\r\\n * @dev All functions in this interface are expected to be called off-chain, so gas usage is not a big concern.\\r\\n * This makes it possible to store addresses in optimized data types and convert them to human-readable strings\\r\\n * in `getPoRAddressList()`.\\r\\n */\\r\\ninterface IPoRAddresses {\\r\\n  /**\\r\\n   * @notice Get total number of addresses in the list.\\r\\n   * @return The array length\\r\\n   */\\r\\n  function getPoRAddressListLength() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get a batch of human-readable addresses from the address list.\\r\\n   * @dev Due to limitations of gas usage in off-chain calls, we need to support fetching the addresses in batches.\\r\\n   * EVM addresses need to be converted to human-readable strings. The address strings need to be in the same format\\r\\n   * that would be used when querying the balance of that address.\\r\\n   * @param startIndex The index of the first address in the batch.\\r\\n   * @param endIndex The index of the last address in the batch. If `endIndex > getPoRAddressListLength()-1`,\\r\\n   * endIndex need to default to `getPoRAddressListLength()-1`. If `endIndex < startIndex`, the result would be an\\r\\n   * empty array.\\r\\n   * @return Array of addresses as strings.\\r\\n   */\\r\\n  function getPoRAddressList(\\r\\n    uint256 startIndex,\\r\\n    uint256 endIndex\\r\\n  ) external view returns (string[] memory);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountOfValidatorDetailsExceedsLimit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"existingKey\",\"type\":\"bytes\"}],\"name\":\"CannotAddDuplicatePubKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSetOperatorControllingAddressToSameAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotUseDisabledOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLengthOfZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMethodCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPubKeyLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPubKeySetupCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"}],\"name\":\"MissingActiveValidatorDetails\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"}],\"name\":\"MissingPendingValidatorDetails\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"foundPubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"providedPubKey\",\"type\":\"bytes\"}],\"name\":\"NextOperatorPubKeyMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"NoOperatorFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"}],\"name\":\"NoPubKeyFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokensToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorAlreadyDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorAlreadyEnabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorMethodsPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorOutOfPendingKeys\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"pubKeys\",\"type\":\"bytes[]\"}],\"name\":\"ActivePubKeysDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct INodeOperatorRegistry.ValidatorDetails[]\",\"name\":\"pubKeys\",\"type\":\"tuple[]\"}],\"name\":\"OperatorAddedValidatorDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"OperatorAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"pubKeys\",\"type\":\"bytes[]\"}],\"name\":\"PendingPubKeysDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"pubKeys\",\"type\":\"bytes[]\"}],\"name\":\"PubKeysUsedForValidatorSetup\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"AccessControlManager\",\"outputs\":[{\"internalType\":\"contract IAccessControlManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct INodeOperatorRegistry.ValidatorDetails[]\",\"name\":\"_validatorDetails\",\"type\":\"tuple[]\"}],\"name\":\"addNewValidatorDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_pubKeys\",\"type\":\"bytes[]\"}],\"name\":\"deleteActiveValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_pubKeys\",\"type\":\"bytes[]\"}],\"name\":\"deletePendingValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"}],\"name\":\"disableOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"}],\"name\":\"enableOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numNewValidators\",\"type\":\"uint256\"}],\"name\":\"getNextValidatorDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct INodeOperatorRegistry.ValidatorDetails[]\",\"name\":\"validatorDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"foundValidators\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"}],\"name\":\"getOperator\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controllingAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"activeValidators\",\"type\":\"uint128\"}],\"internalType\":\"struct INodeOperatorRegistry.Operator\",\"name\":\"operator\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"totalValidatorDetails\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"operatorId\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"getOperatorForOperatorId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controllingAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"activeValidators\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getOperatorIdForAddress\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"getOperatorIdForPubKey\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"}],\"name\":\"getOperatorsActiveValidatorDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct INodeOperatorRegistry.ValidatorDetails[]\",\"name\":\"validatorDetails\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"}],\"name\":\"getOperatorsPendingValidatorDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct INodeOperatorRegistry.ValidatorDetails[]\",\"name\":\"validatorDetails\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endIndex\",\"type\":\"uint256\"}],\"name\":\"getPoRAddressList\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoRAddressListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_operatorId\",\"type\":\"uint128\"}],\"name\":\"getRewardDetailsForOperatorId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"activeValidators\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAccessControlManager\",\"name\":\"_accessControlManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numOperators\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPendingValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOperatorAddress\",\"type\":\"address\"}],\"name\":\"updateOperatorControllingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"updateOperatorName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newRewardAddress\",\"type\":\"address\"}],\"name\":\"updateOperatorRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_pubKeys\",\"type\":\"bytes[]\"}],\"name\":\"usePubKeysForValidatorSetup\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct INodeOperatorRegistry.ValidatorDetails[]\",\"name\":\"validatorDetails\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NodeOperatorRegistry", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}