{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"contracts/IndexUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\\nimport '@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol';\\nimport '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\nimport './interfaces/IDecentralizedIndex.sol';\\nimport './interfaces/IERC20Metadata.sol';\\nimport './interfaces/IStakingPoolToken.sol';\\nimport './interfaces/ITokenRewards.sol';\\nimport './interfaces/IUniswapV2Factory.sol';\\nimport './interfaces/IUniswapV3Pool.sol';\\nimport './interfaces/IUniswapV2Router02.sol';\\nimport './interfaces/IWETH.sol';\\nimport './Zapper.sol';\\n\\ncontract IndexUtils is Context, Zapper {\\n  using SafeERC20 for IERC20;\\n\\n  constructor(\\n    address _v2Router,\\n    IV3TwapUtilities _v3TwapUtilities\\n  ) Zapper(_v2Router, _v3TwapUtilities) {}\\n\\n  function bond(\\n    IDecentralizedIndex _indexFund,\\n    address _token,\\n    uint256 _amount,\\n    uint256 _amountMintMin\\n  ) external {\\n    if (_indexFund.indexType() == IDecentralizedIndex.IndexType.WEIGHTED) {\\n      IDecentralizedIndex.IndexAssetInfo[] memory _assets = _indexFund\\n        .getAllAssets();\\n      uint256[] memory _balsBefore = new uint256[](_assets.length);\\n\\n      uint256 _tokenCurSupply = IERC20(_token).balanceOf(address(_indexFund));\\n      uint256 _tokenAmtSupplyRatioX96 = _indexFund.totalSupply() == 0\\n        ? FixedPoint96.Q96\\n        : (_amount * FixedPoint96.Q96) / _tokenCurSupply;\\n      for (uint256 _i; _i < _assets.length; _i++) {\\n        uint256 _amountNeeded = _indexFund.totalSupply() == 0\\n          ? _indexFund.getInitialAmount(_token, _amount, _assets[_i].token)\\n          : (IERC20(_assets[_i].token).balanceOf(address(_indexFund)) *\\n            _tokenAmtSupplyRatioX96) / FixedPoint96.Q96;\\n        _balsBefore[_i] = IERC20(_assets[_i].token).balanceOf(address(this));\\n        IERC20(_assets[_i].token).safeTransferFrom(\\n          _msgSender(),\\n          address(this),\\n          _amountNeeded\\n        );\\n        IERC20(_assets[_i].token).safeIncreaseAllowance(\\n          address(_indexFund),\\n          _amountNeeded\\n        );\\n      }\\n      uint256 _idxBalBefore = IERC20(_indexFund).balanceOf(address(this));\\n      _indexFund.bond(_token, _amount, _amountMintMin);\\n      IERC20(_indexFund).safeTransfer(\\n        _msgSender(),\\n        IERC20(_indexFund).balanceOf(address(this)) - _idxBalBefore\\n      );\\n\\n      // refund any excess tokens to user we didn't use to bond\\n      for (uint256 _i; _i < _assets.length; _i++) {\\n        _checkAndRefundERC20(_msgSender(), _assets[_i].token, _balsBefore[_i]);\\n      }\\n    } else {\\n      require(\\n        _indexFund.indexType() == IDecentralizedIndex.IndexType.UNWEIGHTED,\\n        'UW'\\n      );\\n      IERC20(_token).safeTransferFrom(_msgSender(), address(this), _amount);\\n      IERC20(_token).safeIncreaseAllowance(address(_indexFund), _amount);\\n      uint256 _idxBalBefore = IERC20(_indexFund).balanceOf(address(this));\\n      _indexFund.bond(_token, _amount, _amountMintMin);\\n      IERC20(_indexFund).safeTransfer(\\n        _msgSender(),\\n        IERC20(_indexFund).balanceOf(address(this)) - _idxBalBefore\\n      );\\n    }\\n  }\\n\\n  function bondWeightedFromNative(\\n    IDecentralizedIndex _indexFund,\\n    uint256 _assetIdx,\\n    uint256 _amountTokensForAssetIdx,\\n    uint256 _amountMintMin,\\n    uint256 _amountPairedLpTokenMin,\\n    uint256 _slippage, // 1 == 0.1%, 10 == 1%, 1000 == 100%\\n    uint256 _deadline,\\n    bool _stakeAsWell\\n  ) external payable {\\n    require(msg.value > 0, 'NATIVE');\\n    uint256 _ethBalBefore = address(this).balance - msg.value;\\n    IDecentralizedIndex.IndexAssetInfo[] memory _assets = _indexFund\\n      .getAllAssets();\\n    (\\n      uint256[] memory _balancesBefore,\\n      uint256[] memory _amountsReceived\\n    ) = _swapNativeForTokensWeightedV2(\\n        _indexFund,\\n        _stakeAsWell ? msg.value / 2 : msg.value,\\n        _assets,\\n        _assetIdx,\\n        _amountTokensForAssetIdx\\n      );\\n\\n    // allowance for _assetIdx is increased in _bondToRecipient below,\\n    // we just need to increase allowance for any other index tokens here first\\n    for (uint256 _i; _i < _assets.length; _i++) {\\n      if (_i == _assetIdx) {\\n        continue;\\n      }\\n      IERC20(_assets[_i].token).safeIncreaseAllowance(\\n        address(_indexFund),\\n        _amountsReceived[_i]\\n      );\\n    }\\n    uint256 _idxTokensGained = _bondToRecipient(\\n      _indexFund,\\n      _assets[_assetIdx].token,\\n      _amountsReceived[_assetIdx],\\n      _amountMintMin,\\n      _stakeAsWell ? address(this) : _msgSender()\\n    );\\n\\n    if (_stakeAsWell) {\\n      _zapIndexTokensAndNative(\\n        _msgSender(),\\n        _indexFund,\\n        _idxTokensGained,\\n        msg.value / 2,\\n        _amountPairedLpTokenMin,\\n        _slippage,\\n        _deadline\\n      );\\n    }\\n\\n    // refund any excess tokens to user we didn't use to bond\\n    for (uint256 _i; _i < _assets.length; _i++) {\\n      _checkAndRefundERC20(\\n        _msgSender(),\\n        _assets[_i].token,\\n        _balancesBefore[_i]\\n      );\\n    }\\n\\n    // refund excess ETH\\n    if (address(this).balance > _ethBalBefore) {\\n      (bool _s, ) = payable(_msgSender()).call{\\n        value: address(this).balance - _ethBalBefore\\n      }('');\\n      require(_s, 'ETHREFUND');\\n    }\\n  }\\n\\n  // function bondUnweightedFromNative(\\n  //   IDecentralizedIndex _indexFund,\\n  //   uint256 _poolIdx,\\n  //   uint256 _amountPairedLpTokenMin,\\n  //   uint256 _slippage, // 1 == 0.1%, 10 == 1%, 1000 == 100%\\n  //   uint256 _deadline,\\n  //   bool _stakeAsWell\\n  // ) external payable {\\n  //   require(msg.value > 0, 'NATIVE');\\n  //   uint256 _wethBalBefore = IERC20(WETH).balanceOf(address(this));\\n  //   IWETH(WETH).deposit{ value: _stakeAsWell ? msg.value / 2 : msg.value }();\\n  //   uint256 _wethToBond = IERC20(WETH).balanceOf(address(this)) -\\n  //     _wethBalBefore;\\n  //   uint256 _idxTokensGained = _bondUnweightedFromWrappedNative(\\n  //     _indexFund,\\n  //     _stakeAsWell ? address(this) : _msgSender(),\\n  //     _poolIdx,\\n  //     _wethToBond,\\n  //     _slippage\\n  //   );\\n\\n  //   if (_stakeAsWell) {\\n  //     _zapIndexTokensAndNative(\\n  //       _msgSender(),\\n  //       _indexFund,\\n  //       _idxTokensGained,\\n  //       msg.value / 2,\\n  //       _amountPairedLpTokenMin,\\n  //       _slippage,\\n  //       _deadline\\n  //     );\\n  //   }\\n  // }\\n\\n  function addLPAndStake(\\n    IDecentralizedIndex _indexFund,\\n    uint256 _amountIdxTokens,\\n    address _pairedLpTokenProvided,\\n    uint256 _amtPairedLpTokenProvided,\\n    uint256 _amountPairedLpTokenMin,\\n    uint256 _slippage,\\n    uint256 _deadline\\n  ) external payable {\\n    address _v2Pool = IUniswapV2Factory(IUniswapV2Router02(V2_ROUTER).factory())\\n      .getPair(address(_indexFund), _indexFund.PAIRED_LP_TOKEN());\\n    uint256 _idxTokensBefore = IERC20(address(_indexFund)).balanceOf(\\n      address(this)\\n    );\\n    uint256 _pairedLpTokenBefore = IERC20(_indexFund.PAIRED_LP_TOKEN())\\n      .balanceOf(address(this));\\n    uint256 _ethBefore = address(this).balance - msg.value;\\n    uint256 _v2PoolBefore = IERC20(_v2Pool).balanceOf(address(this));\\n    IERC20(address(_indexFund)).safeTransferFrom(\\n      _msgSender(),\\n      address(this),\\n      _amountIdxTokens\\n    );\\n    if (_pairedLpTokenProvided == address(0)) {\\n      require(msg.value > 0, 'NEEDETH');\\n      _amtPairedLpTokenProvided = msg.value;\\n    } else {\\n      IERC20(_pairedLpTokenProvided).safeTransferFrom(\\n        _msgSender(),\\n        address(this),\\n        _amtPairedLpTokenProvided\\n      );\\n    }\\n    if (_pairedLpTokenProvided != _indexFund.PAIRED_LP_TOKEN()) {\\n      _zap(\\n        _pairedLpTokenProvided,\\n        _indexFund.PAIRED_LP_TOKEN(),\\n        _amtPairedLpTokenProvided,\\n        _amountPairedLpTokenMin\\n      );\\n    }\\n\\n    IERC20(_indexFund.PAIRED_LP_TOKEN()).safeIncreaseAllowance(\\n      address(_indexFund),\\n      IERC20(_indexFund.PAIRED_LP_TOKEN()).balanceOf(address(this)) -\\n        _pairedLpTokenBefore\\n    );\\n    _indexFund.addLiquidityV2(\\n      IERC20(address(_indexFund)).balanceOf(address(this)) - _idxTokensBefore,\\n      IERC20(_indexFund.PAIRED_LP_TOKEN()).balanceOf(address(this)) -\\n        _pairedLpTokenBefore,\\n      _slippage,\\n      _deadline\\n    );\\n\\n    IERC20(_v2Pool).safeIncreaseAllowance(\\n      _indexFund.lpStakingPool(),\\n      IERC20(_v2Pool).balanceOf(address(this)) - _v2PoolBefore\\n    );\\n    IStakingPoolToken(_indexFund.lpStakingPool()).stake(\\n      _msgSender(),\\n      IERC20(_v2Pool).balanceOf(address(this)) - _v2PoolBefore\\n    );\\n\\n    // refunds if needed for index tokens and pairedLpToken\\n    if (address(this).balance > _ethBefore) {\\n      (bool _s, ) = payable(_msgSender()).call{\\n        value: address(this).balance - _ethBefore\\n      }('');\\n      require(_s && address(this).balance >= _ethBefore, 'TOOMUCH');\\n    }\\n    _checkAndRefundERC20(_msgSender(), address(_indexFund), _idxTokensBefore);\\n    _checkAndRefundERC20(\\n      _msgSender(),\\n      _indexFund.PAIRED_LP_TOKEN(),\\n      _pairedLpTokenBefore\\n    );\\n  }\\n\\n  function unstakeAndRemoveLP(\\n    IDecentralizedIndex _indexFund,\\n    uint256 _amountStakedTokens,\\n    uint256 _minLPTokens,\\n    uint256 _minPairedLpToken,\\n    uint256 _deadline\\n  ) external {\\n    address _stakingPool = _indexFund.lpStakingPool();\\n    address _pairedLpToken = _indexFund.PAIRED_LP_TOKEN();\\n    uint256 _stakingBalBefore = IERC20(_stakingPool).balanceOf(address(this));\\n    uint256 _pairedLpTokenBefore = IERC20(_pairedLpToken).balanceOf(\\n      address(this)\\n    );\\n    IERC20(_stakingPool).safeTransferFrom(\\n      _msgSender(),\\n      address(this),\\n      _amountStakedTokens\\n    );\\n    uint256 _indexBalBefore = _unstakeAndRemoveLP(\\n      _indexFund,\\n      _stakingPool,\\n      IERC20(_stakingPool).balanceOf(address(this)) - _stakingBalBefore,\\n      _minLPTokens,\\n      _minPairedLpToken,\\n      _deadline\\n    );\\n    if (\\n      IERC20(address(_indexFund)).balanceOf(address(this)) > _indexBalBefore\\n    ) {\\n      IERC20(address(_indexFund)).safeTransfer(\\n        _msgSender(),\\n        IERC20(address(_indexFund)).balanceOf(address(this)) - _indexBalBefore\\n      );\\n    }\\n    if (\\n      IERC20(_pairedLpToken).balanceOf(address(this)) > _pairedLpTokenBefore\\n    ) {\\n      IERC20(_pairedLpToken).safeTransfer(\\n        _msgSender(),\\n        IERC20(_pairedLpToken).balanceOf(address(this)) - _pairedLpTokenBefore\\n      );\\n    }\\n  }\\n\\n  function claimRewardsMulti(address[] memory _rewards) external {\\n    for (uint256 _i; _i < _rewards.length; _i++) {\\n      ITokenRewards(_rewards[_i]).claimReward(_msgSender());\\n    }\\n  }\\n\\n  function _swapNativeForTokensWeightedV2(\\n    IDecentralizedIndex _indexFund,\\n    uint256 _amountNative,\\n    IDecentralizedIndex.IndexAssetInfo[] memory _assets,\\n    uint256 _poolIdx,\\n    uint256 _amountForPoolIdx\\n  ) internal returns (uint256[] memory, uint256[] memory) {\\n    uint256[] memory _amountBefore = new uint256[](_assets.length);\\n    uint256[] memory _amountReceived = new uint256[](_assets.length);\\n    uint256 _tokenCurSupply = IERC20(_assets[_poolIdx].token).balanceOf(\\n      address(_indexFund)\\n    );\\n    uint256 _tokenAmtSupplyRatioX96 = _indexFund.totalSupply() == 0\\n      ? FixedPoint96.Q96\\n      : (_amountForPoolIdx * FixedPoint96.Q96) / _tokenCurSupply;\\n    uint256 _nativeLeft = _amountNative;\\n    for (uint256 _i; _i < _assets.length; _i++) {\\n      (_nativeLeft, _amountBefore[_i], _amountReceived[_i]) = _swapForIdxToken(\\n        _indexFund,\\n        _assets[_poolIdx].token,\\n        _amountForPoolIdx,\\n        _assets[_i].token,\\n        _tokenAmtSupplyRatioX96,\\n        _nativeLeft\\n      );\\n    }\\n    return (_amountBefore, _amountReceived);\\n  }\\n\\n  function _swapForIdxToken(\\n    IDecentralizedIndex _indexFund,\\n    address _initToken,\\n    uint256 _initTokenAmount,\\n    address _outToken,\\n    uint256 _tokenAmtSupplyRatioX96,\\n    uint256 _nativeLeft\\n  )\\n    internal\\n    returns (\\n      uint256 _newNativeLeft,\\n      uint256 _amountBefore,\\n      uint256 _amountReceived\\n    )\\n  {\\n    uint256 _nativeBefore = address(this).balance;\\n    _amountBefore = IERC20(_outToken).balanceOf(address(this));\\n    uint256 _amountOut = _indexFund.totalSupply() == 0\\n      ? _indexFund.getInitialAmount(_initToken, _initTokenAmount, _outToken)\\n      : (IERC20(_outToken).balanceOf(address(_indexFund)) *\\n        _tokenAmtSupplyRatioX96) / FixedPoint96.Q96;\\n    address[] memory _path = new address[](2);\\n    _path[0] = IUniswapV2Router02(V2_ROUTER).WETH();\\n    _path[1] = _outToken;\\n    IUniswapV2Router02(V2_ROUTER).swapETHForExactTokens{ value: _nativeLeft }(\\n      _amountOut,\\n      _path,\\n      address(this),\\n      block.timestamp\\n    );\\n    _newNativeLeft = _nativeLeft - (_nativeBefore - address(this).balance);\\n    _amountReceived =\\n      IERC20(_outToken).balanceOf(address(this)) -\\n      _amountBefore;\\n  }\\n\\n  // function _bondUnweightedFromWrappedNative(\\n  //   IDecentralizedIndex _indexFund,\\n  //   address _recipient,\\n  //   uint256 _poolIdx,\\n  //   uint256 _wethToBond,\\n  //   uint256 _slippage // 1 == 0.1%, 10 == 1%, 1000 == 100%\\n  // ) internal returns (uint256) {\\n  //   IDecentralizedIndex.IndexAssetInfo[] memory _assets = _indexFund\\n  //     .getAllAssets();\\n\\n  //   uint256 _bondTokensGained;\\n  //   if (_assets[_poolIdx].token == WETH) {\\n  //     _bondTokensGained = _wethToBond;\\n  //   } else {\\n  //     uint256 _poolPriceX96 = V3_TWAP_UTILS.priceX96FromSqrtPriceX96(\\n  //       V3_TWAP_UTILS.sqrtPriceX96FromPoolAndInterval(_assets[_poolIdx].c1)\\n  //     );\\n  //     address _token0 = WETH < address(_indexFund) ? WETH : address(_indexFund);\\n  //     uint256 _amountOut = _token0 == WETH\\n  //       ? (_poolPriceX96 * _wethToBond) / FixedPoint96.Q96\\n  //       : (_wethToBond * FixedPoint96.Q96) / _poolPriceX96;\\n\\n  //     IERC20(WETH).safeIncreaseAllowance(V3_ROUTER, _wethToBond);\\n  //     _bondTokensGained = ISwapRouter(V3_ROUTER).exactInputSingle(\\n  //       ISwapRouter.ExactInputSingleParams({\\n  //         tokenIn: WETH,\\n  //         tokenOut: _assets[_poolIdx].token,\\n  //         fee: IUniswapV3Pool(_assets[_poolIdx].c1).fee(),\\n  //         recipient: address(this),\\n  //         deadline: block.timestamp,\\n  //         amountIn: _wethToBond,\\n  //         amountOutMinimum: (_amountOut * (1000 - _slippage)) / 1000,\\n  //         sqrtPriceLimitX96: 0\\n  //       })\\n  //     );\\n  //   }\\n  //   return\\n  //     _bondToRecipient(\\n  //       _indexFund,\\n  //       _assets[_poolIdx].token,\\n  //       _bondTokensGained,\\n  //       0,\\n  //       _recipient\\n  //     );\\n  // }\\n\\n  function _unstakeAndRemoveLP(\\n    IDecentralizedIndex _indexFund,\\n    address _stakingPool,\\n    uint256 _unstakeAmount,\\n    uint256 _minLPTokens,\\n    uint256 _minPairedLpTokens,\\n    uint256 _deadline\\n  ) internal returns (uint256 _fundTokensBefore) {\\n    address _pairedLpToken = _indexFund.PAIRED_LP_TOKEN();\\n    address _v2Pool = IUniswapV2Factory(IUniswapV2Router02(V2_ROUTER).factory())\\n      .getPair(address(_indexFund), _pairedLpToken);\\n    uint256 _v2TokensBefore = IERC20(_v2Pool).balanceOf(address(this));\\n    IStakingPoolToken(_stakingPool).unstake(_unstakeAmount);\\n\\n    _fundTokensBefore = _indexFund.balanceOf(address(this));\\n    IERC20(_v2Pool).safeIncreaseAllowance(\\n      address(_indexFund),\\n      IERC20(_v2Pool).balanceOf(address(this)) - _v2TokensBefore\\n    );\\n    _indexFund.removeLiquidityV2(\\n      IERC20(_v2Pool).balanceOf(address(this)) - _v2TokensBefore,\\n      _minLPTokens,\\n      _minPairedLpTokens,\\n      _deadline\\n    );\\n  }\\n\\n  function _bondToRecipient(\\n    IDecentralizedIndex _indexFund,\\n    address _indexToken,\\n    uint256 _bondTokens,\\n    uint256 _amountMintMin,\\n    address _recipient\\n  ) internal returns (uint256) {\\n    uint256 _idxTokensBefore = IERC20(address(_indexFund)).balanceOf(\\n      address(this)\\n    );\\n    IERC20(_indexToken).safeIncreaseAllowance(address(_indexFund), _bondTokens);\\n    _indexFund.bond(_indexToken, _bondTokens, _amountMintMin);\\n    uint256 _idxTokensGained = IERC20(address(_indexFund)).balanceOf(\\n      address(this)\\n    ) - _idxTokensBefore;\\n    if (_recipient != address(this)) {\\n      IERC20(address(_indexFund)).safeTransfer(_recipient, _idxTokensGained);\\n    }\\n    return _idxTokensGained;\\n  }\\n\\n  function _zapIndexTokensAndNative(\\n    address _user,\\n    IDecentralizedIndex _indexFund,\\n    uint256 _amountTokens,\\n    uint256 _amountETH,\\n    uint256 _amtPairedLpTokenMin,\\n    uint256 _slippage,\\n    uint256 _deadline\\n  ) internal {\\n    address _pairedLpToken = _indexFund.PAIRED_LP_TOKEN();\\n    uint256 _tokensBefore = IERC20(address(_indexFund)).balanceOf(\\n      address(this)\\n    ) - _amountTokens;\\n    uint256 _pairedLpTokenBefore = IERC20(_pairedLpToken).balanceOf(\\n      address(this)\\n    );\\n    address _stakingPool = _indexFund.lpStakingPool();\\n\\n    _zap(address(0), _pairedLpToken, _amountETH, _amtPairedLpTokenMin);\\n\\n    address _v2Pool = IUniswapV2Factory(IUniswapV2Router02(V2_ROUTER).factory())\\n      .getPair(address(_indexFund), _pairedLpToken);\\n    uint256 _lpTokensBefore = IERC20(_v2Pool).balanceOf(address(this));\\n    IERC20(_pairedLpToken).safeIncreaseAllowance(\\n      address(_indexFund),\\n      IERC20(_pairedLpToken).balanceOf(address(this)) - _pairedLpTokenBefore\\n    );\\n    _indexFund.addLiquidityV2(\\n      _amountTokens,\\n      IERC20(_pairedLpToken).balanceOf(address(this)) - _pairedLpTokenBefore,\\n      _slippage,\\n      _deadline\\n    );\\n    IERC20(_v2Pool).safeIncreaseAllowance(\\n      _stakingPool,\\n      IERC20(_v2Pool).balanceOf(address(this)) - _lpTokensBefore\\n    );\\n    IStakingPoolToken(_stakingPool).stake(\\n      _user,\\n      IERC20(_v2Pool).balanceOf(address(this)) - _lpTokensBefore\\n    );\\n\\n    // check & refund excess tokens from LPing as needed\\n    if (IERC20(address(_indexFund)).balanceOf(address(this)) > _tokensBefore) {\\n      IERC20(address(_indexFund)).safeTransfer(\\n        _user,\\n        IERC20(address(_indexFund)).balanceOf(address(this)) - _tokensBefore\\n      );\\n    }\\n    if (\\n      IERC20(_pairedLpToken).balanceOf(address(this)) > _pairedLpTokenBefore\\n    ) {\\n      IERC20(_pairedLpToken).safeTransfer(\\n        _user,\\n        IERC20(_pairedLpToken).balanceOf(address(this)) - _pairedLpTokenBefore\\n      );\\n    }\\n  }\\n\\n  function _checkAndRefundERC20(\\n    address _user,\\n    address _asset,\\n    uint256 _beforeBal\\n  ) internal {\\n    uint256 _curBal = IERC20(_asset).balanceOf(address(this));\\n    if (_curBal > _beforeBal) {\\n      IERC20(_asset).safeTransfer(_user, _curBal - _beforeBal);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICurvePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ICurvePool {\\n  function coins(uint256 _idx) external returns (address);\\n\\n  function exchange(\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 minDy,\\n    address receiver\\n  ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDecentralizedIndex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IDecentralizedIndex is IERC20 {\\n  enum IndexType {\\n    WEIGHTED,\\n    UNWEIGHTED\\n  }\\n\\n  // all fees: 1 == 0.01%, 10 == 0.1%, 100 == 1%\\n  struct Fees {\\n    uint256 burn;\\n    uint256 bond;\\n    uint256 debond;\\n    uint256 buy;\\n    uint256 sell;\\n    uint256 partner;\\n  }\\n\\n  struct IndexAssetInfo {\\n    address token;\\n    uint256 weighting;\\n    uint256 basePriceUSDX96;\\n    address c1; // arbitrary contract/address field we can use for an index\\n    uint256 q1; // arbitrary quantity/number field we can use for an index\\n  }\\n\\n  event Create(address indexed newIdx, address indexed wallet);\\n  event Bond(\\n    address indexed wallet,\\n    address indexed token,\\n    uint256 amountTokensBonded,\\n    uint256 amountTokensMinted\\n  );\\n  event Debond(address indexed wallet, uint256 amountDebonded);\\n  event AddLiquidity(\\n    address indexed wallet,\\n    uint256 amountTokens,\\n    uint256 amountDAI\\n  );\\n  event RemoveLiquidity(address indexed wallet, uint256 amountLiquidity);\\n\\n  function BOND_FEE() external view returns (uint256);\\n\\n  function DEBOND_FEE() external view returns (uint256);\\n\\n  function FLASH_FEE() external view returns (uint256);\\n\\n  function PAIRED_LP_TOKEN() external view returns (address);\\n\\n  function indexType() external view returns (IndexType);\\n\\n  function created() external view returns (uint256);\\n\\n  function lpStakingPool() external view returns (address);\\n\\n  function lpRewardsToken() external view returns (address);\\n\\n  function partner() external view returns (address);\\n\\n  function getIdxPriceUSDX96() external view returns (uint256, uint256);\\n\\n  function isAsset(address token) external view returns (bool);\\n\\n  function getAllAssets() external view returns (IndexAssetInfo[] memory);\\n\\n  function getInitialAmount(\\n    address sToken,\\n    uint256 sAmount,\\n    address tToken\\n  ) external view returns (uint256);\\n\\n  function getTokenPriceUSDX96(address token) external view returns (uint256);\\n\\n  function processPreSwapFeesAndSwap() external;\\n\\n  function bond(address token, uint256 amount, uint256 amountMintMin) external;\\n\\n  function debond(\\n    uint256 amount,\\n    address[] memory token,\\n    uint8[] memory percentage\\n  ) external;\\n\\n  function addLiquidityV2(\\n    uint256 idxTokens,\\n    uint256 daiTokens,\\n    uint256 slippage,\\n    uint256 deadline\\n  ) external;\\n\\n  function removeLiquidityV2(\\n    uint256 lpTokens,\\n    uint256 minTokens,\\n    uint256 minDAI,\\n    uint256 deadline\\n  ) external;\\n\\n  function flash(\\n    address recipient,\\n    address token,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IERC20Metadata {\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IERC4626 {\\n  function deposit(\\n    uint256 yETHAmount,\\n    address receiver\\n  ) external returns (uint256 styETHAmount);\\n\\n  function withdraw(\\n    uint256 styETHAmount,\\n    address receiver\\n  ) external returns (uint256 yETHAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakingPoolToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IStakingPoolToken {\\n  event Stake(address indexed executor, address indexed user, uint256 amount);\\n\\n  event Unstake(address indexed user, uint256 amount);\\n\\n  function indexFund() external view returns (address);\\n\\n  function stakingToken() external view returns (address);\\n\\n  function poolRewards() external view returns (address);\\n\\n  function stakeUserRestriction() external view returns (address);\\n\\n  function stake(address user, uint256 amount) external;\\n\\n  function unstake(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ITokenRewards {\\n  event AddShares(address indexed wallet, uint256 amount);\\n\\n  event RemoveShares(address indexed wallet, uint256 amount);\\n\\n  event ClaimReward(address indexed wallet);\\n\\n  event DistributeReward(address indexed wallet, uint256 amount);\\n\\n  event DepositRewards(address indexed wallet, uint256 amount);\\n\\n  function totalShares() external view returns (uint256);\\n\\n  function totalStakers() external view returns (uint256);\\n\\n  function rewardsToken() external view returns (address);\\n\\n  function trackingToken() external view returns (address);\\n\\n  function depositFromPairedLpToken(\\n    uint256 amount,\\n    uint256 slippageOverride\\n  ) external;\\n\\n  function depositRewards(uint256 amount) external;\\n\\n  function claimReward(address wallet) external;\\n\\n  function setShares(\\n    address wallet,\\n    uint256 amount,\\n    bool sharesRemoving\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IUniswapV2Factory {\\n  function createPair(\\n    address tokenA,\\n    address tokenB\\n  ) external returns (address pair);\\n\\n  function getPair(\\n    address tokenA,\\n    address tokenB\\n  ) external view returns (address pair);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IUniswapV2Pair {\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IUniswapV2Router02 {\\n  function factory() external view returns (address);\\n\\n  function WETH() external view returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountA, uint amountB);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IUniswapV3Pool {\\n  /// @notice The first of the two tokens of the pool, sorted by address\\n  /// @return The token contract address\\n  function token0() external view returns (address);\\n\\n  /// @notice The second of the two tokens of the pool, sorted by address\\n  /// @return The token contract address\\n  function token1() external view returns (address);\\n\\n  /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n  /// @return The fee\\n  function fee() external view returns (uint24);\\n\\n  /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n  /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n  /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n  /// you must call it with secondsAgos = [3600, 0].\\n  /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n  /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n  /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n  /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n  /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n  /// timestamp\\n  function observe(\\n    uint32[] calldata secondsAgos\\n  )\\n    external\\n    view\\n    returns (\\n      int56[] memory tickCumulatives,\\n      uint160[] memory secondsPerLiquidityCumulativeX128s\\n    );\\n\\n  /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n  /// when accessed externally.\\n  /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n  /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n  /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n  /// boundary.\\n  /// observationIndex The index of the last oracle observation that was written,\\n  /// observationCardinality The current maximum number of observations stored in the pool,\\n  /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n  /// feeProtocol The protocol fee for both tokens of the pool.\\n  /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n  /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n  /// unlocked Whether the pool is currently locked to reentrancy\\n  function slot0()\\n    external\\n    view\\n    returns (\\n      uint160 sqrtPriceX96,\\n      int24 tick,\\n      uint16 observationIndex,\\n      uint16 observationCardinality,\\n      uint16 observationCardinalityNext,\\n      uint8 feeProtocol,\\n      bool unlocked\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IV3TwapUtilities.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IV3TwapUtilities {\\n  function getV3Pool(\\n    address v3Factory,\\n    address token0,\\n    address token1,\\n    uint24 poolFee\\n  ) external view returns (address);\\n\\n  function getPoolPriceUSDX96(\\n    address pricePool,\\n    address nativeStablePool,\\n    address WETH9\\n  ) external view returns (uint256);\\n\\n  function sqrtPriceX96FromPoolAndInterval(\\n    address pool\\n  ) external view returns (uint160);\\n\\n  function priceX96FromSqrtPriceX96(\\n    uint160 sqrtPriceX96\\n  ) external pure returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IZapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IZapper {\\n  enum PoolType {\\n    CURVE,\\n    V2,\\n    V3\\n  }\\n\\n  struct Pools {\\n    PoolType poolType; // assume same for both pool1 and pool2\\n    address pool1;\\n    address pool2;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Zapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\\nimport '@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol';\\nimport '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\nimport './interfaces/ICurvePool.sol';\\nimport './interfaces/IDecentralizedIndex.sol';\\nimport './interfaces/IERC4626.sol';\\nimport './interfaces/IUniswapV2Pair.sol';\\nimport './interfaces/IUniswapV3Pool.sol';\\nimport './interfaces/IUniswapV2Router02.sol';\\nimport './interfaces/IV3TwapUtilities.sol';\\nimport './interfaces/IWETH.sol';\\nimport './interfaces/IZapper.sol';\\n\\ncontract Zapper is IZapper, Context, Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  address constant OHM = 0x64aa3364F17a4D01c6f1751Fd97C2BD3D7e7f1D5;\\n  address constant STYETH = 0x583019fF0f430721aDa9cfb4fac8F06cA104d0B4;\\n  address constant YETH = 0x1BED97CBC3c24A4fb5C069C6E311a967386131f7;\\n  address constant WETH_YETH_POOL = 0x69ACcb968B19a53790f43e57558F5E443A91aF22;\\n  address constant V3_ROUTER = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\\n  address immutable V2_ROUTER;\\n  address immutable WETH;\\n  IV3TwapUtilities immutable V3_TWAP_UTILS;\\n\\n  uint256 _slippage = 30; // 3%\\n\\n  address public pOHM;\\n\\n  // token in => token out => swap pool(s)\\n  mapping(address => mapping(address => Pools)) public zapMap;\\n  // curve pool => token => idx\\n  mapping(address => mapping(address => int128)) public curveTokenIdx;\\n\\n  constructor(address _v2Router, IV3TwapUtilities _v3TwapUtilities) {\\n    V2_ROUTER = _v2Router;\\n    V3_TWAP_UTILS = _v3TwapUtilities;\\n    WETH = IUniswapV2Router02(V2_ROUTER).WETH();\\n\\n    // WETH/YETH\\n    _setZapMapFromPoolSingle(\\n      PoolType.CURVE,\\n      0x69ACcb968B19a53790f43e57558F5E443A91aF22\\n    );\\n    // WETH/DAI\\n    _setZapMapFromPoolSingle(\\n      PoolType.V3,\\n      0x60594a405d53811d3BC4766596EFD80fd545A270\\n    );\\n    // WETH/USDC\\n    _setZapMapFromPoolSingle(\\n      PoolType.V3,\\n      0x88e6A0c2dDD26FEEb64F039a2c41296FcB3f5640\\n    );\\n    // WETH/OHM\\n    _setZapMapFromPoolSingle(\\n      PoolType.V3,\\n      0x88051B0eea095007D3bEf21aB287Be961f3d8598\\n    );\\n    // USDC/OHM\\n    _setZapMapFromPoolSingle(\\n      PoolType.V3,\\n      0x893f503FaC2Ee1e5B78665db23F9c94017Aae97D\\n    );\\n  }\\n\\n  function _zap(\\n    address _in,\\n    address _out,\\n    uint256 _amountIn,\\n    uint256 _amountOutMin\\n  ) internal returns (uint256 _amountOut) {\\n    if (_in == address(0)) {\\n      _amountIn = _ethToWETH(_amountIn);\\n      _in = WETH;\\n    }\\n    // handle pOHM separately through pod, modularize later\\n    bool _isOutPOHM;\\n    if (pOHM == _out) {\\n      _isOutPOHM = true;\\n      _out = OHM;\\n    }\\n    // handle yETH and st-yETH special through curve pool, modularize later\\n    if (_out == YETH || _out == STYETH) {\\n      require(_in == WETH, 'YETHIN');\\n      return _wethToYeth(_amountIn, _amountOutMin, _out == STYETH);\\n    } else if (_in == YETH || _in == STYETH) {\\n      require(_out == WETH, 'YETHOUT');\\n      return _styethToWeth(_amountIn, _amountOutMin, _in == YETH);\\n    }\\n    Pools memory _poolInfo = zapMap[_in][_out];\\n    // no pool so just try to swap over one path univ2\\n    if (_poolInfo.pool1 == address(0)) {\\n      address[] memory _path = new address[](2);\\n      _path[0] = _in;\\n      _path[1] = _out;\\n      _amountOut = _swapV2(_path, _amountIn, _amountOutMin);\\n    } else {\\n      bool _twoHops = _poolInfo.pool2 != address(0);\\n      if (_poolInfo.poolType == PoolType.CURVE) {\\n        // curve\\n        _amountOut = _swapCurve(\\n          _poolInfo.pool1,\\n          curveTokenIdx[_poolInfo.pool1][_in],\\n          curveTokenIdx[_poolInfo.pool1][_out],\\n          _amountIn,\\n          _amountOutMin\\n        );\\n      } else if (_poolInfo.poolType == PoolType.V2) {\\n        // univ2\\n        address _token0 = IUniswapV2Pair(_poolInfo.pool1).token0();\\n        address[] memory _path = new address[](_twoHops ? 3 : 2);\\n        _path[0] = _in;\\n        _path[1] = !_twoHops ? _out : _token0 == _in\\n          ? IUniswapV2Pair(_poolInfo.pool1).token1()\\n          : _token0;\\n        if (_twoHops) {\\n          _path[2] = _out;\\n        }\\n        _amountOut = _swapV2(_path, _amountIn, _amountOutMin);\\n      } else {\\n        // univ3\\n        if (_twoHops) {\\n          address _t0 = IUniswapV3Pool(_poolInfo.pool1).token0();\\n          _amountOut = _swapV3Multi(\\n            _in,\\n            IUniswapV3Pool(_poolInfo.pool1).fee(),\\n            _t0 == _in ? IUniswapV3Pool(_poolInfo.pool1).token0() : _t0,\\n            IUniswapV3Pool(_poolInfo.pool2).fee(),\\n            _out,\\n            _amountIn,\\n            _amountOutMin\\n          );\\n        } else {\\n          _amountOut = _swapV3Single(\\n            _in,\\n            IUniswapV3Pool(_poolInfo.pool1).fee(),\\n            _out,\\n            _amountIn,\\n            _amountOutMin\\n          );\\n        }\\n      }\\n    }\\n    if (!_isOutPOHM) {\\n      return _amountOut;\\n    }\\n    uint256 _pOHMBefore = IERC20(pOHM).balanceOf(address(this));\\n    IERC20(OHM).safeIncreaseAllowance(pOHM, _amountOut);\\n    IDecentralizedIndex(pOHM).bond(OHM, _amountOut, 0);\\n    return IERC20(pOHM).balanceOf(address(this)) - _pOHMBefore;\\n  }\\n\\n  function _ethToWETH(uint256 _amountETH) internal returns (uint256) {\\n    uint256 _wethBal = IERC20(WETH).balanceOf(address(this));\\n    IWETH(WETH).deposit{ value: _amountETH }();\\n    return IERC20(WETH).balanceOf(address(this)) - _wethBal;\\n  }\\n\\n  function _swapV3Single(\\n    address _in,\\n    uint24 _fee,\\n    address _out,\\n    uint256 _amountIn,\\n    uint256 _amountOutMin\\n  ) internal returns (uint256 _amountOut) {\\n    if (_amountOutMin == 0) {\\n      address _v3Pool = V3_TWAP_UTILS.getV3Pool(\\n        IPeripheryImmutableState(V3_ROUTER).factory(),\\n        _in,\\n        _out,\\n        _fee\\n      );\\n      address _token0 = _in < _out ? _in : _out;\\n      uint256 _poolPriceX96 = V3_TWAP_UTILS.priceX96FromSqrtPriceX96(\\n        V3_TWAP_UTILS.sqrtPriceX96FromPoolAndInterval(_v3Pool)\\n      );\\n      _amountOutMin = _in == _token0\\n        ? (_poolPriceX96 * _amountIn) / FixedPoint96.Q96\\n        : (_amountIn * FixedPoint96.Q96) / _poolPriceX96;\\n    }\\n\\n    uint256 _outBefore = IERC20(_out).balanceOf(address(this));\\n    IERC20(_in).safeIncreaseAllowance(V3_ROUTER, _amountIn);\\n    ISwapRouter(V3_ROUTER).exactInputSingle(\\n      ISwapRouter.ExactInputSingleParams({\\n        tokenIn: _in,\\n        tokenOut: _out,\\n        fee: _fee,\\n        recipient: address(this),\\n        deadline: block.timestamp,\\n        amountIn: _amountIn,\\n        amountOutMinimum: (_amountOutMin * (1000 - _slippage)) / 1000,\\n        sqrtPriceLimitX96: 0\\n      })\\n    );\\n    return IERC20(_out).balanceOf(address(this)) - _outBefore;\\n  }\\n\\n  function _swapV3Multi(\\n    address _in,\\n    uint24 _fee1,\\n    address _in2,\\n    uint24 _fee2,\\n    address _out,\\n    uint256 _amountIn,\\n    uint256 _amountOutMin\\n  ) internal returns (uint256) {\\n    uint256 _outBefore = IERC20(_out).balanceOf(address(this));\\n    IERC20(_in).safeIncreaseAllowance(V3_ROUTER, _amountIn);\\n    bytes memory _path = abi.encodePacked(_in, _fee1, _in2, _fee2, _out);\\n    ISwapRouter(V3_ROUTER).exactInput(\\n      ISwapRouter.ExactInputParams({\\n        path: _path,\\n        recipient: address(this),\\n        deadline: block.timestamp,\\n        amountIn: _amountIn,\\n        amountOutMinimum: _amountOutMin\\n      })\\n    );\\n    return IERC20(_out).balanceOf(address(this)) - _outBefore;\\n  }\\n\\n  function _swapV2(\\n    address[] memory _path,\\n    uint256 _amountIn,\\n    uint256 _amountOutMin\\n  ) internal returns (uint256) {\\n    address _out = _path.length == 3 ? _path[2] : _path[1];\\n    uint256 _outBefore = IERC20(_out).balanceOf(address(this));\\n    IERC20(_path[0]).safeIncreaseAllowance(V2_ROUTER, _amountIn);\\n    IUniswapV2Router02(V2_ROUTER)\\n      .swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        _amountIn,\\n        _amountOutMin,\\n        _path,\\n        address(this),\\n        block.timestamp\\n      );\\n    return IERC20(_out).balanceOf(address(this)) - _outBefore;\\n  }\\n\\n  function _swapCurve(\\n    address _pool,\\n    int128 _i,\\n    int128 _j,\\n    uint256 _amountIn,\\n    uint256 _amountOutMin\\n  ) internal returns (uint256) {\\n    return\\n      ICurvePool(_pool).exchange(\\n        _i,\\n        _j,\\n        _amountIn,\\n        _amountOutMin,\\n        address(this)\\n      );\\n  }\\n\\n  function _wethToYeth(\\n    uint256 _ethAmount,\\n    uint256 _minYethAmount,\\n    bool _stakeToStyeth\\n  ) internal returns (uint256 _amountOut) {\\n    uint256 _boughtYeth = _swapCurve(\\n      WETH_YETH_POOL,\\n      0,\\n      1,\\n      _ethAmount,\\n      _minYethAmount\\n    );\\n    if (_stakeToStyeth) {\\n      return IERC4626(STYETH).deposit(_boughtYeth, address(this));\\n    }\\n    return _boughtYeth;\\n  }\\n\\n  function _styethToWeth(\\n    uint256 _stYethAmount,\\n    uint256 _minWethAmount,\\n    bool _isYethOnly\\n  ) internal returns (uint256 _amountOut) {\\n    uint256 _yethAmount;\\n    if (_isYethOnly) {\\n      _yethAmount = _stYethAmount;\\n    } else {\\n      _yethAmount = IERC4626(STYETH).withdraw(_stYethAmount, address(this));\\n    }\\n    return _swapCurve(WETH_YETH_POOL, 1, 0, _yethAmount, _minWethAmount);\\n  }\\n\\n  function _setZapMapFromPoolSingle(PoolType _type, address _pool) internal {\\n    address _t0;\\n    address _t1;\\n    if (_type == PoolType.CURVE) {\\n      _t0 = ICurvePool(_pool).coins(0);\\n      _t1 = ICurvePool(_pool).coins(1);\\n      curveTokenIdx[_pool][_t0] = 0;\\n      curveTokenIdx[_pool][_t1] = 1;\\n    } else {\\n      _t0 = IUniswapV3Pool(_pool).token0();\\n      _t1 = IUniswapV3Pool(_pool).token1();\\n    }\\n    Pools memory _poolConf = Pools({\\n      poolType: _type,\\n      pool1: _pool,\\n      pool2: address(0)\\n    });\\n    zapMap[_t0][_t1] = _poolConf;\\n    zapMap[_t1][_t0] = _poolConf;\\n  }\\n\\n  function setPOHM(address _pOHM) external onlyOwner {\\n    pOHM = _pOHM;\\n  }\\n\\n  function setSlippage(uint256 _slip) external onlyOwner {\\n    _slippage = _slip;\\n  }\\n\\n  function setZapMap(\\n    address _in,\\n    address _out,\\n    Pools memory _pools\\n  ) external onlyOwner {\\n    zapMap[_in][_out] = _pools;\\n  }\\n\\n  function setZapMapFromPoolSingle(\\n    PoolType _type,\\n    address _pool\\n  ) external onlyOwner {\\n    _setZapMapFromPoolSingle(_type, _pool);\\n  }\\n\\n  function rescueETH() external onlyOwner {\\n    (bool _sent, ) = payable(owner()).call{ value: address(this).balance }('');\\n    require(_sent);\\n  }\\n\\n  function rescueERC20(IERC20 _token) external onlyOwner {\\n    require(_token.balanceOf(address(this)) > 0);\\n    _token.safeTransfer(owner(), _token.balanceOf(address(this)));\\n  }\\n\\n  receive() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_v2Router\",\"type\":\"address\"},{\"internalType\":\"contract IV3TwapUtilities\",\"name\":\"_v3TwapUtilities\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IDecentralizedIndex\",\"name\":\"_indexFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIdxTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pairedLpTokenProvided\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amtPairedLpTokenProvided\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountPairedLpTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"addLPAndStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDecentralizedIndex\",\"name\":\"_indexFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountMintMin\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDecentralizedIndex\",\"name\":\"_indexFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountTokensForAssetIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountMintMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountPairedLpTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stakeAsWell\",\"type\":\"bool\"}],\"name\":\"bondWeightedFromNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewards\",\"type\":\"address[]\"}],\"name\":\"claimRewardsMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"curveTokenIdx\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pOHM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pOHM\",\"type\":\"address\"}],\"name\":\"setPOHM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slip\",\"type\":\"uint256\"}],\"name\":\"setSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_in\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_out\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum IZapper.PoolType\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pool1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool2\",\"type\":\"address\"}],\"internalType\":\"struct IZapper.Pools\",\"name\":\"_pools\",\"type\":\"tuple\"}],\"name\":\"setZapMap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IZapper.PoolType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setZapMapFromPoolSingle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDecentralizedIndex\",\"name\":\"_indexFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountStakedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minLPTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPairedLpToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"unstakeAndRemoveLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"zapMap\",\"outputs\":[{\"internalType\":\"enum IZapper.PoolType\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pool1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool2\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "IndexUtils", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000024ff47d552cb222b265d68c7aeb26e586d5229d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}