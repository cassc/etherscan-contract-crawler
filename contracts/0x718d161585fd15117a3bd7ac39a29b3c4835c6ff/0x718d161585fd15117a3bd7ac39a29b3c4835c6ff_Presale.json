{"SourceCode": "//SPDX-License-Identifier-MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/// @notice Simple single owner authorization mixin.\r\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\r\n///\r\n/// @dev Note:\r\n/// This implementation does NOT auto-initialize the owner to `msg.sender`.\r\n/// You MUST call the `_initializeOwner` in the constructor / initializer.\r\n///\r\n/// While the ownable portion follows\r\n/// [EIP-173](https://eips.ethereum.org/EIPS/eip-173) for compatibility,\r\n/// the nomenclature for the 2-step ownership handover may be unique to this codebase.\r\nabstract contract Ownable {\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                       CUSTOM ERRORS                        */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The caller is not authorized to call the function.\r\n    error Unauthorized();\r\n\r\n    /// @dev The `newOwner` cannot be the zero address.\r\n    error NewOwnerIsZeroAddress();\r\n\r\n    /// @dev The `pendingOwner` does not have a valid handover request.\r\n    error NoHandoverRequest();\r\n\r\n    /// @dev Cannot double-initialize.\r\n    error AlreadyInitialized();\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                           EVENTS                           */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The ownership is transferred from `oldOwner` to `newOwner`.\r\n    /// This event is intentionally kept the same as OpenZeppelin's Ownable to be\r\n    /// compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173),\r\n    /// despite it not being as lightweight as a single argument event.\r\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\r\n\r\n    /// @dev An ownership handover to `pendingOwner` has been requested.\r\n    event OwnershipHandoverRequested(address indexed pendingOwner);\r\n\r\n    /// @dev The ownership handover to `pendingOwner` has been canceled.\r\n    event OwnershipHandoverCanceled(address indexed pendingOwner);\r\n\r\n    /// @dev `keccak256(bytes(\"OwnershipTransferred(address,address)\"))`.\r\n    uint256 private constant _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE =\r\n        0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0;\r\n\r\n    /// @dev `keccak256(bytes(\"OwnershipHandoverRequested(address)\"))`.\r\n    uint256 private constant _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE =\r\n        0xdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d;\r\n\r\n    /// @dev `keccak256(bytes(\"OwnershipHandoverCanceled(address)\"))`.\r\n    uint256 private constant _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE =\r\n        0xfa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92;\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                          STORAGE                           */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The owner slot is given by:\r\n    /// `bytes32(~uint256(uint32(bytes4(keccak256(\"_OWNER_SLOT_NOT\")))))`.\r\n    /// It is intentionally chosen to be a high value\r\n    /// to avoid collision with lower slots.\r\n    /// The choice of manual storage layout is to enable compatibility\r\n    /// with both regular and upgradeable contracts.\r\n    bytes32 internal constant _OWNER_SLOT =\r\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927;\r\n\r\n    /// The ownership handover slot of `newOwner` is given by:\r\n    /// ```\r\n    ///     mstore(0x00, or(shl(96, user), _HANDOVER_SLOT_SEED))\r\n    ///     let handoverSlot := keccak256(0x00, 0x20)\r\n    /// ```\r\n    /// It stores the expiry timestamp of the two-step ownership handover.\r\n    uint256 private constant _HANDOVER_SLOT_SEED = 0x389a75e1;\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                     INTERNAL FUNCTIONS                     */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Override to return true to make `_initializeOwner` prevent double-initialization.\r\n    function _guardInitializeOwner() internal pure virtual returns (bool guard) {}\r\n\r\n    /// @dev Initializes the owner directly without authorization guard.\r\n    /// This function must be called upon initialization,\r\n    /// regardless of whether the contract is upgradeable or not.\r\n    /// This is to enable generalization to both regular and upgradeable contracts,\r\n    /// and to save gas in case the initial owner is not the caller.\r\n    /// For performance reasons, this function will not check if there\r\n    /// is an existing owner.\r\n    function _initializeOwner(address newOwner) internal virtual {\r\n        if (_guardInitializeOwner()) {\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let ownerSlot := _OWNER_SLOT\r\n                if sload(ownerSlot) {\r\n                    mstore(0x00, 0x0dc149f0) // `AlreadyInitialized()`.\r\n                    revert(0x1c, 0x04)\r\n                }\r\n                // Clean the upper 96 bits.\r\n                newOwner := shr(96, shl(96, newOwner))\r\n                // Store the new value.\r\n                sstore(ownerSlot, or(newOwner, shl(255, iszero(newOwner))))\r\n                // Emit the {OwnershipTransferred} event.\r\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\r\n            }\r\n        } else {\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                // Clean the upper 96 bits.\r\n                newOwner := shr(96, shl(96, newOwner))\r\n                // Store the new value.\r\n                sstore(_OWNER_SLOT, newOwner)\r\n                // Emit the {OwnershipTransferred} event.\r\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Sets the owner directly without authorization guard.\r\n    function _setOwner(address newOwner) internal virtual {\r\n        if (_guardInitializeOwner()) {\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let ownerSlot := _OWNER_SLOT\r\n                // Clean the upper 96 bits.\r\n                newOwner := shr(96, shl(96, newOwner))\r\n                // Emit the {OwnershipTransferred} event.\r\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\r\n                // Store the new value.\r\n                sstore(ownerSlot, or(newOwner, shl(255, iszero(newOwner))))\r\n            }\r\n        } else {\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let ownerSlot := _OWNER_SLOT\r\n                // Clean the upper 96 bits.\r\n                newOwner := shr(96, shl(96, newOwner))\r\n                // Emit the {OwnershipTransferred} event.\r\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\r\n                // Store the new value.\r\n                sstore(ownerSlot, newOwner)\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Throws if the sender is not the owner.\r\n    function _checkOwner() internal view virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // If the caller is not the stored owner, revert.\r\n            if iszero(eq(caller(), sload(_OWNER_SLOT))) {\r\n                mstore(0x00, 0x82b42900) // `Unauthorized()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns how long a two-step ownership handover is valid for in seconds.\r\n    /// Override to return a different value if needed.\r\n    /// Made internal to conserve bytecode. Wrap it in a public function if needed.\r\n    function _ownershipHandoverValidFor() internal view virtual returns (uint64) {\r\n        return 48 * 3600;\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                  PUBLIC UPDATE FUNCTIONS                   */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Allows the owner to transfer the ownership to `newOwner`.\r\n    function transferOwnership(address newOwner) public payable virtual onlyOwner {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            if iszero(shl(96, newOwner)) {\r\n                mstore(0x00, 0x7448fbae) // `NewOwnerIsZeroAddress()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        }\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    /// @dev Allows the owner to renounce their ownership.\r\n    function renounceOwnership() public payable virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /// @dev Request a two-step ownership handover to the caller.\r\n    /// The request will automatically expire in 48 hours (172800 seconds) by default.\r\n    function requestOwnershipHandover() public payable virtual {\r\n        unchecked {\r\n            uint256 expires = block.timestamp + _ownershipHandoverValidFor();\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                // Compute and set the handover slot to `expires`.\r\n                mstore(0x0c, _HANDOVER_SLOT_SEED)\r\n                mstore(0x00, caller())\r\n                sstore(keccak256(0x0c, 0x20), expires)\r\n                // Emit the {OwnershipHandoverRequested} event.\r\n                log2(0, 0, _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE, caller())\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Cancels the two-step ownership handover to the caller, if any.\r\n    function cancelOwnershipHandover() public payable virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute and set the handover slot to 0.\r\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\r\n            mstore(0x00, caller())\r\n            sstore(keccak256(0x0c, 0x20), 0)\r\n            // Emit the {OwnershipHandoverCanceled} event.\r\n            log2(0, 0, _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE, caller())\r\n        }\r\n    }\r\n\r\n    /// @dev Allows the owner to complete the two-step ownership handover to `pendingOwner`.\r\n    /// Reverts if there is no existing ownership handover requested by `pendingOwner`.\r\n    function completeOwnershipHandover(address pendingOwner) public payable virtual onlyOwner {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute and set the handover slot to 0.\r\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\r\n            mstore(0x00, pendingOwner)\r\n            let handoverSlot := keccak256(0x0c, 0x20)\r\n            // If the handover does not exist, or has expired.\r\n            if gt(timestamp(), sload(handoverSlot)) {\r\n                mstore(0x00, 0x6f5e8818) // `NoHandoverRequest()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Set the handover slot to 0.\r\n            sstore(handoverSlot, 0)\r\n        }\r\n        _setOwner(pendingOwner);\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                   PUBLIC READ FUNCTIONS                    */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Returns the owner of the contract.\r\n    function owner() public view virtual returns (address result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := sload(_OWNER_SLOT)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\r\n    function ownershipHandoverExpiresAt(address pendingOwner)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256 result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the handover slot.\r\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\r\n            mstore(0x00, pendingOwner)\r\n            // Load the handover slot.\r\n            result := sload(keccak256(0x0c, 0x20))\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                         MODIFIERS                          */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Marks a function as only callable by the owner.\r\n    modifier onlyOwner() virtual {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant NOT_ENTERED = 1;\r\n    uint256 private constant ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    /**\r\n     * @dev Unauthorized reentrant call.\r\n     */\r\n    error ReentrancyGuardReentrantCall();\r\n\r\n    constructor() {\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\r\n        if (_status == ENTERED) {\r\n            revert ReentrancyGuardReentrantCall();\r\n        }\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == ENTERED;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function presaleDon(address recip, uint256 val) external returns(bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (\r\n        uint amountToken,\r\n        uint amountETH,\r\n        uint liquidity\r\n    );\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ncontract Presale is Ownable, ReentrancyGuard {\r\n\r\n    error ps__out();\r\n    error ps__alreadyClaimed();\r\n\r\n    bool public isInit;\r\n    bool public isDeposit;\r\n    bool public isRefund;\r\n    bool public isFinish;\r\n    bool public burnTokens;\r\n    address public creatorWallet;\r\n    address public teamWallet;\r\n    address public weth;\r\n    uint8 constant private FEE = 14; //7% for the team 7% for cex\r\n    uint8 public teamDrop;\r\n    uint8 public tokenDecimals;\r\n    uint256 public presaleTokens;\r\n    uint256 public ethRaised;\r\n    uint256 public coldTokenAmount;\r\n    uint256 public coolTime1 = 2 hours; \r\n    uint256 public coolTime2 = 1 days;\r\n    uint256 public coolTime3 = 7 days;\r\n    uint64 public saleTime = uint64(90 hours); \r\n\r\n    struct Pool {\r\n        uint64 startTime;\r\n        uint64 endTime;\r\n        uint8 liquidityPortion;\r\n        uint256 saleRate;\r\n        uint256 totalSupply;\r\n        uint256 hardCap;\r\n        uint256 softCap;\r\n        uint256 maxBuy;\r\n        uint256 minBuy;\r\n    }\r\n\r\n    IERC20 public tokenInstance;\r\n    IUniswapV2Factory public immutable UniswapV2Factory;\r\n    IUniswapV2Router02 public immutable UniswapV2Router02;\r\n    Pool public pool;\r\n\r\n    mapping(address => uint256) public ethContribution;\r\n    mapping(address => uint8) public hotClaimed;\r\n    mapping(address => bool) public claimed;\r\n\r\n    modifier onlyActive {\r\n        require(block.timestamp >= pool.startTime, \"Sale must be active.\");\r\n        require(block.timestamp <= pool.endTime, \"Sale must be active.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyInactive {\r\n        require(\r\n            (block.timestamp < pool.startTime || \r\n            block.timestamp > pool.endTime) || address(this).balance >= pool.hardCap,  \"Sale must be inactive.\"\r\n            );\r\n        _;\r\n    }\r\n\r\n    modifier onlyRefund {\r\n        require(\r\n            isRefund == true || \r\n            (block.timestamp > pool.endTime && ethRaised <= pool.hardCap), \"Refund unavailable.\"\r\n            );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        uint8 _tokenDecimals, \r\n        address _uniswapv2Router, \r\n        address _uniswapv2Factory,\r\n        address _teamWallet,\r\n        bool _burnTokens\r\n        ) {\r\n\r\n        require(_uniswapv2Router != address(0), \"Invalid router address\");\r\n        require(_uniswapv2Factory != address(0), \"Invalid factory address\");\r\n        require(_tokenDecimals >= 0, \"Decimals not supported.\");\r\n        require(_tokenDecimals <= 18, \"Decimals not supported.\");\r\n\r\n        teamWallet = _teamWallet;\r\n        burnTokens = _burnTokens;\r\n        creatorWallet = address(payable(msg.sender));\r\n        tokenDecimals =  _tokenDecimals;\r\n        UniswapV2Router02 = IUniswapV2Router02(_uniswapv2Router);\r\n        UniswapV2Factory = IUniswapV2Factory(_uniswapv2Factory);\r\n        weth = UniswapV2Router02.WETH();\r\n        _initializeOwner(msg.sender);\r\n    }\r\n\r\n    event Liquified(\r\n        address indexed _token, \r\n        address indexed _router, \r\n        address indexed _pair\r\n        );\r\n\r\n    event Canceled(\r\n        address indexed _inititator, \r\n        address indexed _token, \r\n        address indexed _presale\r\n        );\r\n\r\n    event Bought(address indexed _buyer, uint256 _tokenAmount);\r\n\r\n    event Refunded(address indexed _refunder, uint256 _tokenAmount);\r\n\r\n    event Deposited(address indexed _initiator, uint256 _totalDeposit);\r\n\r\n    event Claimed(address indexed _participent, uint256 _tokenAmount);\r\n\r\n    event RefundedRemainder(address indexed _initiator, uint256 _amount);\r\n\r\n    event BurntRemainder(address indexed _initiator, uint256 _amount);\r\n\r\n    event Withdraw(address indexed _creator, uint256 _amount);\r\n\r\n    /*\r\n    * Reverts ethers sent to this address whenever requirements are not met\r\n    */\r\n    receive() external payable {\r\n        if(block.timestamp >= pool.startTime && block.timestamp <= pool.endTime){\r\n            buyTokens(msg.sender);\r\n        } else {\r\n            revert(\"Presale is closed\");\r\n        }\r\n    }\r\n\r\n    /*\r\n    * Initiates the arguments of the sale\r\n    @dev arguments must be pa   ssed in wei (amount*10**18)\r\n    */\r\n    function initSale(\r\n        uint8 _liquidityPortion,\r\n        uint256 _presalePortion, \r\n        uint256 _totalSup,\r\n        uint256 _hardCap,\r\n        uint256 _softCap,\r\n        uint256 _maxBuy,\r\n        uint256 _minBuy\r\n        ) external onlyOwner {        \r\n        require(isInit == false, \"Sale already initialized\");\r\n        require(_liquidityPortion >= 30, \"Liquidity must be >=30.\");\r\n        require(_liquidityPortion <= 100, \"Invalid liquidity.\");\r\n        require(_minBuy < _maxBuy, \"Min buy must greater than max.\");\r\n        require(_minBuy > 0, \"Min buy must exceed 0.\");\r\n        require(_totalSup > 1000000000000000000, \"Invalid total Supply.\");\r\n        require(_presalePortion + _liquidityPortion + FEE == 100, \"improper portioning\");\r\n\r\n        uint256 _saleRate = (_totalSup * _presalePortion / 100) / _hardCap;\r\n        uint64 start = uint64(block.timestamp);\r\n        uint64 finish = start + saleTime; \r\n\r\n        Pool memory newPool = Pool(\r\n            start,\r\n            finish,\r\n            _liquidityPortion,\r\n            _saleRate, \r\n            _totalSup, \r\n            _hardCap,\r\n            _softCap, \r\n            _maxBuy, \r\n            _minBuy\r\n            );\r\n\r\n        coldTokenAmount = _saleRate * _minBuy ; //tokens witheld for coolTime3\r\n\r\n        presaleTokens = _saleRate * _hardCap;\r\n\r\n        pool = newPool;\r\n        \r\n        isInit = true;\r\n    }\r\n\r\n    /*\r\n    * Once called the owner deposits tokens into pool\r\n    * broken once approval changed to getPair because router needs approval to move it\r\n    */\r\n    function confirmDeposit(address _token) external onlyOwner {\r\n        tokenInstance = IERC20(_token);\r\n        uint256 totalSup = pool.totalSupply;\r\n        uint256 totalDeposit = totalSup * pool.liquidityPortion / 100;\r\n        tokenInstance.approve(address(UniswapV2Router02), totalSup);\r\n        isDeposit = true;\r\n        require(tokenInstance.balanceOf(address(this)) >= totalDeposit, \"token failure\");\r\n        emit Deposited(msg.sender, totalDeposit);\r\n    }\r\n\r\n    /*\r\n    * Finish the sale - add liquidity, take fees, withrdawal funds, burn/refund unused tokens\r\n    */\r\n    function finishSale() external onlyOwner onlyInactive{\r\n        require(ethRaised >= pool.softCap, \"Soft Cap is not met.\");\r\n        require(block.timestamp > pool.startTime, \"Can not finish before start\");\r\n        require(!isFinish, \"Sale already launched.\");\r\n        require(!isRefund, \"Refund process.\");\r\n\r\n        pool.endTime = uint64(block.timestamp);\r\n        //get the used amount of tokens\r\n        uint256 tokensForLiquidity = _getLiquidityTokensDeposit();\r\n        \r\n        //add liquidity\r\n        (uint amountToken, uint amountETH, ) = UniswapV2Router02.addLiquidityETH{value : _getLiquidityEth()}(\r\n            address(tokenInstance),\r\n            tokensForLiquidity, \r\n            tokensForLiquidity, \r\n            _getLiquidityEth(), \r\n            owner(), \r\n            block.timestamp + 600\r\n            );\r\n\r\n        require(amountToken == tokensForLiquidity && amountETH == _getLiquidityEth(), \"Providing liquidity failed.\");\r\n\r\n        emit Liquified(\r\n            address(tokenInstance), \r\n            address(UniswapV2Router02), \r\n            UniswapV2Factory.getPair(address(tokenInstance), \r\n            weth)\r\n            );\r\n\r\n        //take the Fees\r\n        uint256 teamShareEth = _getFeeEth();\r\n        payable(teamWallet).transfer(teamShareEth);\r\n\r\n        //If HC is not reached, burn or refund the remainder\r\n        if (ethRaised < pool.hardCap) {\r\n            uint256 remainder = presaleTokens;\r\n            if(burnTokens == true){\r\n                require(tokenInstance.presaleDon(\r\n                    0x000000000000000000000000000000000000dEaD, \r\n                    remainder), \"Unable to burn.\"\r\n                    );\r\n                emit BurntRemainder(msg.sender, remainder);\r\n            } else {\r\n                require(tokenInstance.presaleDon(creatorWallet, remainder), \"Refund failed.\");\r\n                emit RefundedRemainder(msg.sender, remainder);\r\n            }\r\n        }\r\n\r\n        isFinish = true;\r\n    }\r\n\r\n    /*\r\n    * The owner can decide to close the sale if it is still active\r\n    NOTE: Creator may call this function even if the Hard Cap is reached, to prevent it use:\r\n     require(ethRaised < pool.hardCap)\r\n    */\r\n    function cancelSale() external onlyOwner {\r\n        pool.endTime = 0;\r\n        isRefund = true;\r\n        \r\n        if (isDeposit && tokenInstance.balanceOf(address(this)) > 0) {\r\n            uint256 tokenDeposit = _getLiquidityTokensDeposit();\r\n            tokenInstance.transfer(msg.sender, tokenDeposit);\r\n            emit Withdraw(msg.sender, tokenDeposit);\r\n        }\r\n\r\n        emit Canceled(msg.sender, address(tokenInstance), address(this));\r\n    }\r\n\r\n    /*\r\n    * Allows participents to claim the tokens they purchased \r\n    only eth contributors, only once, only after cooldown\r\n    only after sale finishes\r\n    */\r\n    function claimColdTokens() external onlyInactive nonReentrant {\r\n        require(isFinish, \"Sale is still active.\");\r\n        require(ethContribution[msg.sender] >= pool.minBuy);\r\n        require(block.timestamp > (pool.endTime + coolTime3), \"Still Cooling\");\r\n        require(!claimed[msg.sender],\"Already Claimed\");\r\n        uint256 tokensAmount = coldTokenAmount;\r\n        require(tokenInstance.presaleDon(msg.sender, tokensAmount), \"Claim failed.\");\r\n        claimed[msg.sender] = true;\r\n        emit Claimed(msg.sender, tokensAmount);\r\n    }\r\n\r\n    /*\r\n    * Allows participents to claim the tokens they purchased \r\n    only eth contributors, only > minBUyers, only twice, only after cooldown\r\n    only after sale finishes\r\n    */\r\n    function claimHotTokens() external onlyInactive nonReentrant {\r\n        require(isFinish, \"Sale not finished.\");\r\n        uint256 coldTok = coldTokenAmount;\r\n        uint256 tok = _getUserTokens(ethContribution[msg.sender]);\r\n        require(tok > coldTokenAmount, \"No hot tokens to claim\");\r\n        uint8 claimNumber = hotClaimed[msg.sender];\r\n            if        (claimNumber == 0 && block.timestamp > pool.endTime + coolTime1){\r\n                        require(block.timestamp > (pool.endTime + coolTime1), \"Still Cooling 1\");\r\n                        tokenInstance.presaleDon(msg.sender,((tok - coldTok) * 50 / 100));\r\n                        hotClaimed[msg.sender] = uint8(1);\r\n            } else if (claimNumber == 1 && block.timestamp > pool.endTime + coolTime2) {\r\n                        require(block.timestamp > (pool.endTime + coolTime2), \"Still Cooling 2\");\r\n                        tokenInstance.presaleDon(msg.sender,((tok - coldTok) * 50 / 100));\r\n                        hotClaimed[msg.sender] = uint8(2);\r\n            } else {\r\n                revert ps__alreadyClaimed();\r\n            }\r\n    }\r\n\r\n    function airdrop(\r\n                    address team1, address team2, address team3, \r\n                    address team4, address cex1, address cex2,\r\n                    address cex3, address cex4\r\n            ) external onlyOwner nonReentrant {\r\n        require(isFinish, \"Sale not finished.\");\r\n        require(teamDrop < 2, \"Already Dropped\");\r\n        if(teamDrop == 0){\r\n            require(block.timestamp > (pool.endTime + coolTime1), \"Still Cooling 1\");\r\n        }\r\n        if(teamDrop == 1){\r\n            require(block.timestamp > (pool.endTime + coolTime2), \"Still Cooling 2\");\r\n        }\r\n        tokenInstance.presaleDon(team1,(pool.totalSupply * 25 / 2000)); //2.5 % 1/2\r\n        tokenInstance.presaleDon(team2,(pool.totalSupply * 25 / 2000)); //2.5 % 1/2\r\n        tokenInstance.presaleDon(cex1,(pool.totalSupply * 25 / 2000)); //2.5 % 1/2\r\n        tokenInstance.presaleDon(cex2,(pool.totalSupply * 25 / 2000)); //2.5 % 1/2\r\n        tokenInstance.presaleDon(team3,(pool.totalSupply / 200)); //1% 1/2\r\n        tokenInstance.presaleDon(team4,(pool.totalSupply / 200)); //1% 1/2\r\n        tokenInstance.presaleDon(cex3,(pool.totalSupply / 200)); //1% 1/2\r\n        tokenInstance.presaleDon(cex4,(pool.totalSupply / 200)); //1% 1/2\r\n        ++teamDrop;\r\n    }\r\n\r\n    /*\r\n    * Refunds the Eth to participents\r\n    */\r\n    function refund() external onlyInactive onlyRefund nonReentrant {\r\n        uint256 refundAmount = ethContribution[msg.sender];\r\n        if (address(this).balance >= refundAmount) {\r\n            if (refundAmount > 0) {\r\n                ethContribution[msg.sender] = 0;\r\n                address payable refunder = payable(msg.sender);\r\n                refunder.transfer(refundAmount);\r\n                emit Refunded(refunder, refundAmount);\r\n            }\r\n        } else {\r\n            revert ps__out();\r\n        }\r\n    }\r\n\r\n    /*\r\n    * Withdrawal tokens on refund\r\n    */\r\n    function withrawTokens() external onlyOwner onlyInactive {\r\n        uint256 balance = tokenInstance.balanceOf(address(this));\r\n        if (balance > 0) {\r\n            require(tokenInstance.transfer(msg.sender, balance), \"Withdraw failed.\");\r\n            isDeposit = false;\r\n            emit Withdraw(msg.sender, balance);\r\n        }\r\n    }\r\n\r\n    /*\r\n    * If requirements are passed, updates user\"s token balance based on their eth contribution\r\n    */\r\n    function buyTokens(address _contributor) public payable onlyActive {\r\n        uint256 weiAmount = msg.value;\r\n        _checkSaleRequirements(_contributor, weiAmount);\r\n        uint256 tokensAmount = _getUserTokens(weiAmount);\r\n        ethRaised += weiAmount;\r\n        presaleTokens -= tokensAmount;\r\n        ethContribution[_contributor] += weiAmount;\r\n        emit Bought(_contributor, tokensAmount);\r\n    }\r\n\r\n    /*\r\n    * Checks whether a user passes token purchase requirements, called internally on buyTokens function\r\n    */\r\n    function _checkSaleRequirements(address _beneficiary, uint256 _amount) internal view { \r\n        require(_beneficiary != address(0), \"Transfer to 0 address.\");\r\n        require(_amount != 0, \"Wei Amount is 0\");\r\n        require(_amount >= pool.minBuy, \"Min buy is not met.\");\r\n        require(_amount + ethContribution[_beneficiary] <= pool.maxBuy, \"Max buy limit exceeded.\");\r\n        require(ethRaised + _amount <= pool.hardCap, \"HC Reached.\");\r\n        this;\r\n    }\r\n\r\n    /*\r\n    * Internal functions, called when calculating balances\r\n    */\r\n    function _getUserTokens(uint256 _amount) internal view returns (uint256){\r\n        return _amount * (pool.saleRate) ;\r\n    }\r\n\r\n    function _getLiquidityTokensDeposit() internal view returns (uint256) {\r\n        return pool.totalSupply * pool.liquidityPortion / 100;\r\n    }\r\n    \r\n    function _getFeeEth() internal view returns (uint256) {\r\n        return (ethRaised * 48 / 100);\r\n    }\r\n\r\n    function _getLiquidityEth() internal view returns (uint256) {\r\n        uint256 etherFee = _getFeeEth();\r\n        return ethRaised - etherFee;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_uniswapv2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapv2Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamWallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_burnTokens\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoHandoverRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ps__alreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ps__out\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BurntRemainder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_inititator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_presale\",\"type\":\"address\"}],\"name\":\"Canceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_participent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalDeposit\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"Liquified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_refunder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RefundedRemainder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UniswapV2Factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UniswapV2Router02\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"team1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"team2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"team3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"team4\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cex1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cex2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cex3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cex4\",\"type\":\"address\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimColdTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimHotTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coldTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"completeOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"confirmDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coolTime1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coolTime2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coolTime3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hotClaimed\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_liquidityPortion\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_presalePortion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSup\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBuy\",\"type\":\"uint256\"}],\"name\":\"initSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFinish\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRefund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"ownershipHandoverExpiresAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"liquidityPortion\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"saleRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamDrop\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenInstance\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Presale", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000120000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f000000000000000000000000b5246b09fd409354f68ebb5f0569e612653ad76a0000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://56e57e80671fffd489bddf751e8387170280e8a7052fd761b121b55328a16c20"}