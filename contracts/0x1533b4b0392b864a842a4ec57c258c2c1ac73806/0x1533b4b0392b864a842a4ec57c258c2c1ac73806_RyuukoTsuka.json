{"SourceCode": "pragma solidity ^0.8.12;\r\n// SPDX-License-Identifier: Unlicensed\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != - 1 || a != MIN_INT256);\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? - a : a;\r\n    }\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\nlibrary SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n        int256 b = int256(a);\r\n        require(b >= 0);\r\n        return b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    //function _msgSender() internal view virtual returns (address payable) {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {codehash := extcodehash(account)}\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success,) = recipient.call{value : amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value : weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IV2SwapRouter {\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to\r\n    ) external payable returns (uint256 amountOut);\r\n}\r\n\r\n\r\ncontract RyuukoTsuka is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    IUniswapV2Router02 public uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IV2SwapRouter public v2SwapRouter = IV2SwapRouter(0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45);\r\n    address public uniswapV2PairUSDC = address(0);\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private botWallets;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isExcludedFromRewards;\r\n    string private _name = \"RYUUKO TSUKA\";\r\n    string private _symbol = \"RYUTSUKA\";\r\n    uint8 private _decimals = 9;\r\n    uint256 private _tTotal = 1000000000 * 10 ** _decimals;\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    uint256 public usdcPriceToSwap = 450000000; //450 USDC\r\n    uint256 public _maxWalletAmount = 15000100 * 10 ** _decimals;\r\n    address public devAddress = 0x78A70B1059af06beE6Df22C977803311962aA13B;\r\n    address private deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 public gasForProcessing = 50000;\r\n    address public usdcAddress = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48; \r\n    address public tsukaAddress = 0xc5fB36dd2fb59d3B98dEfF88425a3F425Ee469eD; \r\n    address public dividendContractAddress = address(0);\r\n    IERC20 usdcToken = IERC20(usdcAddress);\r\n    event ProcessedDividendTracker(uint256 iterations, uint256 claims, uint256 lastProcessedIndex, bool indexed automatic, uint256 gas, address indexed processor);\r\n    event SendDividends(uint256 EthAmount);\r\n\r\n    struct Distribution {\r\n        uint256 devTeam;\r\n        uint256 dividend;\r\n    }\r\n\r\n    struct TaxFees {\r\n        uint256 buyFee;\r\n        uint256 sellFee;\r\n    }\r\n\r\n    bool private doTakeFees;\r\n    bool private isSellTxn;\r\n    TaxFees public taxFees;\r\n    Distribution public distribution;\r\n    DividendTracker public dividendTracker;\r\n\r\n    constructor () {\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[devAddress] = true;\r\n        _isExcludedFromRewards[deadWallet] = true;\r\n        uniswapV2PairUSDC = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), usdcAddress);\r\n        _isExcludedFromRewards[uniswapV2PairUSDC] = true;\r\n        taxFees = TaxFees(98, 98);\r\n        distribution = Distribution(50, 50);\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function airDrops(address[] calldata holders, uint256[] calldata amounts, bool doUpdateDividends) external {\r\n        uint256 iterator = 0;\r\n        require(_isExcludedFromFee[_msgSender()], \"Airdrop can only be done by excluded from fee\");\r\n        require(holders.length == amounts.length, \"Holders and amount length must be the same\");\r\n        while (iterator < holders.length) {\r\n            _tokenTransfer(_msgSender(), holders[iterator], amounts[iterator] * 10 ** 9, false, false, doUpdateDividends,0);\r\n            iterator += 1;\r\n        }\r\n    }\r\n\r\n    function setMaxWalletAmount(uint256 maxWalletAmount) external onlyOwner {\r\n        _maxWalletAmount = maxWalletAmount * 10 ** 9;\r\n    }\r\n\r\n    function excludeIncludeFromFee(address[] calldata addresses, bool isExcludeFromFee) public onlyOwner {\r\n        addRemoveFee(addresses, isExcludeFromFee);\r\n    }\r\n\r\n    function excludeIncludeFromRewards(address[] calldata addresses, bool isExcluded) public onlyOwner {\r\n        addRemoveRewards(addresses, isExcluded);\r\n    }\r\n\r\n    function isExcludedFromRewards(address addr) public view returns (bool) {\r\n        return _isExcludedFromRewards[addr];\r\n    }\r\n\r\n    function addRemoveRewards(address[] calldata addresses, bool flag) private {\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            address addr = addresses[i];\r\n            _isExcludedFromRewards[addr] = flag;\r\n        }\r\n    }\r\n\r\n    function addRemoveFee(address[] calldata addresses, bool flag) private {\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            address addr = addresses[i];\r\n            _isExcludedFromFee[addr] = flag;\r\n        }\r\n    }\r\n\r\n    function setTaxFees(uint256 buyFee, uint256 sellFee) external onlyOwner {\r\n        taxFees.buyFee = buyFee;\r\n        taxFees.sellFee = sellFee;\r\n    }\r\n\r\n    function setDistribution(uint256 dividend, uint256 devTeam) external onlyOwner {\r\n        distribution.dividend = dividend;\r\n        distribution.devTeam = devTeam;\r\n    }\r\n\r\n    function setWalletAddress(address devAddr) external onlyOwner {\r\n        devAddress = devAddr;\r\n    }\r\n\r\n    function isAddressBlocked(address addr) public view returns (bool) {\r\n        return botWallets[addr];\r\n    }\r\n\r\n    function blockAddresses(address[] memory addresses) external onlyOwner() {\r\n        blockUnblockAddress(addresses, true);\r\n    }\r\n\r\n    function unblockAddresses(address[] memory addresses) external onlyOwner() {\r\n        blockUnblockAddress(addresses, false);\r\n    }\r\n\r\n    function blockUnblockAddress(address[] memory addresses, bool doBlock) private {\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            address addr = addresses[i];\r\n            if (doBlock) {\r\n                botWallets[addr] = true;\r\n            } else {\r\n                delete botWallets[addr];\r\n            }\r\n        }\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        bool isSell = false;\r\n        uint256 tsukaTokenSwapAmount = 0;\r\n        bool takeFees = !_isExcludedFromFee[from] && !_isExcludedFromFee[to] && from != owner() && to != owner();\r\n        uint256 holderBalance = balanceOf(to).add(amount);\r\n        //block the bots, but allow them to transfer to dead wallet if they are blocked\r\n        if (from != owner() && to != owner() && to != deadWallet) {\r\n            require(!botWallets[from] && !botWallets[to], \"bots are not allowed to sell or transfer tokens\");\r\n        }\r\n        if (from == uniswapV2PairUSDC) {\r\n            require(holderBalance <= _maxWalletAmount, \"Wallet cannot exceed max Wallet limit\");\r\n        }\r\n        if (from != uniswapV2PairUSDC && to == uniswapV2PairUSDC) {//if sell\r\n            //only tax if tokens are going back to Uniswap\r\n            isSell = true;\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (contractTokenBalance > 0) {\r\n                uint256 tokenAmount = getTokenAmountByUSDCPrice();\r\n                if (contractTokenBalance >= tokenAmount && !inSwapAndLiquify && swapAndLiquifyEnabled) {\r\n                    tsukaTokenSwapAmount = swapTokens(tokenAmount);\r\n                }\r\n            }\r\n        }\r\n        if (from != uniswapV2PairUSDC && to != uniswapV2PairUSDC) {\r\n            require(holderBalance <= _maxWalletAmount, \"Wallet cannot exceed max Wallet limit\");\r\n        }\r\n        _tokenTransfer(from, to, amount, takeFees, isSell, true, tsukaTokenSwapAmount);\r\n    }\r\n\r\n    function swapTokens(uint256 tokenAmount) private lockTheSwap returns(uint256) {\r\n        uint256 usdcShare = tokenAmount.mul(distribution.devTeam).div(100).div(2);\r\n        uint256 tsukaShare = tokenAmount.mul(distribution.dividend).div(100).div(2);\r\n        swapTokensForUSDC(usdcShare);\r\n        return swapTokensForTSUKA(tsukaShare);\r\n    }\r\n\r\n    function getTokenAmountByUSDCPrice() public view returns (uint256)  {\r\n        address[] memory path = new address[](2);\r\n        path[0] = usdcAddress;\r\n        path[1] = address(this);\r\n        return uniswapV2Router.getAmountsOut(usdcPriceToSwap, path)[1];\r\n    }\r\n\r\n    function setUSDCPriceToSwap(uint256 usdcPriceToSwap_) external onlyOwner {\r\n        usdcPriceToSwap = usdcPriceToSwap_;\r\n    }\r\n\r\n    function updateGasForProcessing(uint256 newValue) public onlyOwner {\r\n        require(newValue != gasForProcessing, \"Cannot update gasForProcessing to same value\");\r\n        gasForProcessing = newValue;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setDividendTracker(address dividendContractAddress_) external onlyOwner {\r\n        dividendContractAddress = dividendContractAddress_;\r\n        dividendTracker = DividendTracker(payable(dividendContractAddress));\r\n    }\r\n\r\n    function sendUSDCBack() external onlyOwner {\r\n        uint256 usdcBalance = usdcToken.balanceOf(address(this));\r\n        usdcToken.transfer(owner(), usdcBalance);\r\n    }\r\n\r\n    function swapTokensForUSDC(uint256 tokenAmount) private {\r\n        address[] memory path;\r\n        path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdcAddress;\r\n        // Approve the swap first\r\n        _approve(address(this), address(v2SwapRouter), tokenAmount);\r\n        v2SwapRouter.swapExactTokensForTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(devAddress));\r\n    }\r\n\r\n    function swapTokensForTSUKA(uint256 tokenAmount) private returns(uint256) {\r\n        address[] memory path;\r\n        path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = usdcAddress;\r\n        path[2] = tsukaAddress;\r\n        // Approve the swap first\r\n        _approve(address(this), address(v2SwapRouter), tokenAmount);\r\n        return v2SwapRouter.swapExactTokensForTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(dividendContractAddress));\r\n\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,\r\n        bool takeFees, bool isSell, bool doUpdateDividends, uint256 tsukaTokenSwapAmount) private {\r\n        uint256 taxAmount = takeFees ? amount.mul(taxFees.buyFee).div(100) : 0;\r\n        if (takeFees && isSell) {\r\n            taxAmount = amount.mul(taxFees.sellFee).div(100);\r\n        }\r\n        uint256 transferAmount = amount.sub(taxAmount);\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(transferAmount);\r\n        _balances[address(this)] = _balances[address(this)].add(taxAmount);\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        if (doUpdateDividends) {\r\n            try dividendTracker.setTokenBalance(sender) {} catch{}\r\n            try dividendTracker.setTokenBalance(recipient) {} catch{}\r\n            if(tsukaTokenSwapAmount > 0) {\r\n                try dividendTracker.calculateDividends(tsukaTokenSwapAmount) {} catch{}\r\n            }\r\n            try dividendTracker.process(gasForProcessing) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n                emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gasForProcessing, tx.origin);\r\n            }catch {}\r\n        }\r\n    }\r\n}\r\n\r\ncontract IterableMapping {\r\n    // Iterable mapping from address to uint;\r\n    struct Map {\r\n        address[] keys;\r\n        mapping(address => uint) values;\r\n        mapping(address => uint) indexOf;\r\n        mapping(address => bool) inserted;\r\n    }\r\n\r\n    Map private map;\r\n\r\n    function get(address key) public view returns (uint) {\r\n        return map.values[key];\r\n    }\r\n\r\n    function keyExists(address key) public view returns (bool) {\r\n        return (getIndexOfKey(key) != - 1);\r\n    }\r\n\r\n    function getIndexOfKey(address key) public view returns (int) {\r\n        if (!map.inserted[key]) {\r\n            return - 1;\r\n        }\r\n        return int(map.indexOf[key]);\r\n    }\r\n\r\n    function getKeyAtIndex(uint index) public view returns (address) {\r\n        return map.keys[index];\r\n    }\r\n\r\n    function size() public view returns (uint) {\r\n        return map.keys.length;\r\n    }\r\n\r\n    function set(address key, uint val) public {\r\n        if (map.inserted[key]) {\r\n            map.values[key] = val;\r\n        } else {\r\n            map.inserted[key] = true;\r\n            map.values[key] = val;\r\n            map.indexOf[key] = map.keys.length;\r\n            map.keys.push(key);\r\n        }\r\n    }\r\n\r\n    function remove(address key) public {\r\n        if (!map.inserted[key]) {\r\n            return;\r\n        }\r\n        delete map.inserted[key];\r\n        delete map.values[key];\r\n        uint index = map.indexOf[key];\r\n        uint lastIndex = map.keys.length - 1;\r\n        address lastKey = map.keys[lastIndex];\r\n        map.indexOf[lastKey] = index;\r\n        delete map.indexOf[key];\r\n        map.keys[index] = lastKey;\r\n        map.keys.pop();\r\n    }\r\n}\r\n\r\ncontract DividendTracker is IERC20, Context, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathUint for uint256;\r\n    using SafeMathInt for int256;\r\n    uint256 constant internal magnitude = 2 ** 128;\r\n    uint256 internal magnifiedDividendPerShare;\r\n    mapping(address => int256) internal magnifiedDividendCorrections;\r\n    mapping(address => uint256) internal withdrawnDividends;\r\n    mapping(address => uint256) internal claimedDividends;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name = \"RYUUKO TSUKA Tracker\";\r\n    string private _symbol = \"RYUTSUKA_TRACKER\";\r\n    uint8 private _decimals = 9;\r\n    uint256 public totalDividendsDistributed;\r\n    IterableMapping private tokenHoldersMap = new IterableMapping();\r\n    uint256 public minimumTokenBalanceForDividends = 5000000 * 10 ** _decimals;\r\n    RyuukoTsuka private ryuukoTsuka;\r\n\r\n    event updateBalance(address addr, uint256 amount);\r\n    event DividendsDistributed(address indexed from, uint256 weiAmount);\r\n    event DividendWithdrawn(address indexed to, uint256 weiAmount);\r\n\r\n    uint256 public lastProcessedIndex;\r\n    mapping(address => uint256) public lastClaimTimes;\r\n    uint256 public claimWait = 3600;\r\n\r\n    event ExcludeFromDividends(address indexed account);\r\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n\r\n    IERC20 public tsukaToken = IERC20(0xc5fB36dd2fb59d3B98dEfF88425a3F425Ee469eD);\r\n    constructor() {\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address, uint256) public pure override returns (bool) {\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address, address, uint256) public pure override returns (bool) {\r\n        require(false, \"No transfers allowed in dividend tracker\");\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function setTokenBalance(address account) public {\r\n        uint256 balance = ryuukoTsuka.balanceOf(account);\r\n        if (!ryuukoTsuka.isExcludedFromRewards(account)) {\r\n            if (balance >= minimumTokenBalanceForDividends) {\r\n                _setBalance(account, balance);\r\n                tokenHoldersMap.set(account, balance);\r\n            }\r\n            else {\r\n                _setBalance(account, 0);\r\n                tokenHoldersMap.remove(account);\r\n            }\r\n        } else {\r\n            if (balanceOf(account) > 0) {\r\n                _setBalance(account, 0);\r\n                tokenHoldersMap.remove(account);\r\n            }\r\n        }\r\n        processAccount(payable(account), true);\r\n    }\r\n\r\n    function updateTokenBalances(address[] memory accounts) external {\r\n        uint256 index = 0;\r\n        while (index < accounts.length) {\r\n            setTokenBalance(accounts[index]);\r\n            index += 1;\r\n        }\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n        .sub((magnifiedDividendPerShare.mul(amount)).toInt256Safe());\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n        .add((magnifiedDividendPerShare.mul(amount)).toInt256Safe());\r\n    }\r\n\r\n    function setERC20Contract(address contractAddr) external onlyOwner {\r\n        ryuukoTsuka = RyuukoTsuka(payable(contractAddr));\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n        _setBalance(account, 0);\r\n        tokenHoldersMap.remove(account);\r\n        emit ExcludeFromDividends(account);\r\n    }\r\n\r\n    function calculateDividends(uint256 amount) public {\r\n        if(totalSupply() > 0) {\r\n            if (amount > 0) {\r\n                magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n                    (amount).mul(magnitude) / totalSupply()\r\n                );\r\n                emit DividendsDistributed(msg.sender, amount);\r\n                totalDividendsDistributed = totalDividendsDistributed.add(amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function withdrawDividend() public virtual {\r\n        _withdrawDividendOfUser(payable(msg.sender));\r\n    }\r\n\r\n    function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n        if (_withdrawableDividend > 0) {\r\n            withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n            emit DividendWithdrawn(user, _withdrawableDividend);\r\n            tsukaToken.transfer(user, _withdrawableDividend);\r\n            return _withdrawableDividend;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function dividendOf(address _owner) public view returns (uint256) {\r\n        return withdrawableDividendOf(_owner);\r\n    }\r\n\r\n    function withdrawableDividendOf(address _owner) public view returns (uint256) {\r\n        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n    }\r\n\r\n    function withdrawnDividendOf(address _owner) public view returns (uint256) {\r\n        return withdrawnDividends[_owner];\r\n    }\r\n\r\n    function accumulativeDividendOf(address _owner) public view returns (uint256) {\r\n        return magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\r\n        .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n    }\r\n\r\n    function setMinimumTokenBalanceForDividends(uint256 newMinTokenBalForDividends) external onlyOwner {\r\n        minimumTokenBalanceForDividends = newMinTokenBalForDividends * (10 ** _decimals);\r\n    }\r\n\r\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\r\n        require(newClaimWait >= 3600 && newClaimWait <= 86400, \"ClaimWait must be updated to between 1 and 24 hours\");\r\n        require(newClaimWait != claimWait, \"Cannot update claimWait to same value\");\r\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\r\n        claimWait = newClaimWait;\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns (uint256) {\r\n        return lastProcessedIndex;\r\n    }\r\n\r\n    function minimumTokenLimit() public view returns (uint256) {\r\n        return minimumTokenBalanceForDividends;\r\n    }\r\n\r\n    function getNumberOfTokenHolders() external view returns (uint256) {\r\n        return tokenHoldersMap.size();\r\n    }\r\n\r\n    function getAccount(address _account) public view returns (address account, int256 index, int256 iterationsUntilProcessed,\r\n        uint256 withdrawableDividends, uint256 totalDividends, uint256 lastClaimTime,\r\n        uint256 nextClaimTime, uint256 secondsUntilAutoClaimAvailable) {\r\n        account = _account;\r\n        index = tokenHoldersMap.getIndexOfKey(account);\r\n        iterationsUntilProcessed = - 1;\r\n        if (index >= 0) {\r\n            if (uint256(index) > lastProcessedIndex) {\r\n                iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\r\n            }\r\n            else {\r\n                uint256 processesUntilEndOfArray = tokenHoldersMap.size() > lastProcessedIndex ?\r\n                tokenHoldersMap.size().sub(lastProcessedIndex) : 0;\r\n                iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\r\n            }\r\n        }\r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n        lastClaimTime = lastClaimTimes[account];\r\n        nextClaimTime = lastClaimTime > 0 ? lastClaimTime.add(claimWait) : 0;\r\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ? nextClaimTime.sub(block.timestamp) : 0;\r\n    }\r\n\r\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n        if (lastClaimTime > block.timestamp) {\r\n            return false;\r\n        }\r\n        return block.timestamp.sub(lastClaimTime) >= claimWait;\r\n    }\r\n\r\n    function _setBalance(address account, uint256 newBalance) internal {\r\n        uint256 currentBalance = balanceOf(account);\r\n        if (newBalance > currentBalance) {\r\n            uint256 mintAmount = newBalance.sub(currentBalance);\r\n            _mint(account, mintAmount);\r\n        } else if (newBalance < currentBalance) {\r\n            uint256 burnAmount = currentBalance.sub(newBalance);\r\n            _burn(account, burnAmount);\r\n        }\r\n    }\r\n\r\n    function process(uint256 gas) public returns (uint256, uint256, uint256) {\r\n        uint256 numberOfTokenHolders = tokenHoldersMap.size();\r\n\r\n        if (numberOfTokenHolders == 0) {\r\n            return (0, 0, lastProcessedIndex);\r\n        }\r\n        uint256 _lastProcessedIndex = lastProcessedIndex;\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = 0;\r\n        uint256 claims = 0;\r\n        while (gasUsed < gas && iterations < numberOfTokenHolders) {\r\n            _lastProcessedIndex++;\r\n            if (_lastProcessedIndex >= tokenHoldersMap.size()) {\r\n                _lastProcessedIndex = 0;\r\n            }\r\n            address account = tokenHoldersMap.getKeyAtIndex(_lastProcessedIndex);\r\n            if (canAutoClaim(lastClaimTimes[account])) {\r\n                if (processAccount(payable(account), true)) {\r\n                    claims++;\r\n                }\r\n            }\r\n            iterations++;\r\n            uint256 newGasLeft = gasleft();\r\n            if (gasLeft > newGasLeft) {\r\n                gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n            }\r\n            gasLeft = newGasLeft;\r\n        }\r\n        lastProcessedIndex = _lastProcessedIndex;\r\n        return (iterations, claims, lastProcessedIndex);\r\n    }\r\n\r\n    function processAccountByDeployer(address payable account, bool automatic) external onlyOwner {\r\n        processAccount(account, automatic);\r\n    }\r\n\r\n    function totalDividendClaimed(address account) public view returns (uint256) {\r\n        return claimedDividends[account];\r\n    }\r\n\r\n    function processAccount(address payable account, bool automatic) private returns (bool) {\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n        if (amount > 0) {\r\n            uint256 totalClaimed = claimedDividends[account];\r\n            claimedDividends[account] = amount.add(totalClaimed);\r\n            lastClaimTimes[account] = block.timestamp;\r\n            emit Claim(account, amount, automatic);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function mintDividends(address[] calldata newholders, uint256[] calldata amounts) external onlyOwner {\r\n        for (uint index = 0; index < newholders.length; index++) {\r\n            address account = newholders[index];\r\n            uint256 amount = amounts[index] * 10 ** 9;\r\n            if (amount >= minimumTokenBalanceForDividends) {\r\n                _setBalance(account, amount);\r\n                tokenHoldersMap.set(account, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    //This should never be used, but available in case of unforseen issues\r\n    function sendTsukaBack() external onlyOwner {\r\n        uint256 tsukaBalance = tsukaToken.balanceOf(address(this));\r\n        tsukaToken.transfer(owner(), tsukaBalance);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"EthAmount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"doUpdateDividends\",\"type\":\"bool\"}],\"name\":\"airDrops\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"blockAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"devTeam\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividend\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract DividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isExcludeFromFee\",\"type\":\"bool\"}],\"name\":\"excludeIncludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"excludeIncludeFromRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAmountByUSDCPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAddressBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isExcludedFromRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendUSDCBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dividend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devTeam\",\"type\":\"uint256\"}],\"name\":\"setDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dividendContractAddress_\",\"type\":\"address\"}],\"name\":\"setDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcPriceToSwap_\",\"type\":\"uint256\"}],\"name\":\"setUSDCPriceToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"devAddr\",\"type\":\"address\"}],\"name\":\"setWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tsukaAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"unblockAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2PairUSDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcPriceToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2SwapRouter\",\"outputs\":[{\"internalType\":\"contract IV2SwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RyuukoTsuka", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2b0fd53abfda2939361e5448729f352631f108214d222cc71e851175c25da3d5"}