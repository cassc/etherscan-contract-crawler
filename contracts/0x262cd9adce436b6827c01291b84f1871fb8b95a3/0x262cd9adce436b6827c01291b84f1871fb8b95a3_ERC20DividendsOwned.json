{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SignedSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC20DividendsOwned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./base/ERC20Dividends.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\n\\ncontract ERC20DividendsOwned is ERC20Dividends, Ownable {\\n  using TransferHelper for address;\\n\\n  address public immutable weth;\\n\\n  receive() external payable { return; }\\n\\n  constructor(\\n    address weth_,\\n    string memory name_,\\n    string memory symbol_\\n  ) ERC20Dividends(name_, symbol_) Ownable() {\\n    weth = weth_;\\n  }\\n\\n  function mint(address to, uint256 amount) external onlyOwner {\\n    _mint(to, amount);\\n  }\\n\\n  function burn(address from, uint256 amount) external onlyOwner {\\n    _burn(from, amount);\\n  }\\n\\n  function collect() external {\\n    uint256 amount = _prepareCollect(msg.sender);\\n    weth.safeTransfer(msg.sender, amount);\\n  }\\n\\n  function collectETH() external {\\n    uint256 amount = _prepareCollect(msg.sender);\\n    IWETH(weth).withdraw(amount);\\n    address(msg.sender).safeTransferETH(amount);\\n  }\\n\\n  function distribute(uint256 amount) external {\\n    weth.safeTransferFrom(msg.sender, address(this), amount);\\n    _distributeDividends(amount);\\n  }\\n\\n  function distribute() external payable {\\n    IWETH(weth).deposit{value: msg.value}();\\n    _distributeDividends(msg.value);\\n  }\\n}\"\r\n    },\r\n    \"contracts/base/AbstractDividends.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"../libraries/LowGasSafeMath.sol\\\";\\nimport \\\"../libraries/SafeCast.sol\\\";\\nimport \\\"../interfaces/IAbstractDividends.sol\\\";\\n\\n/**\\n * @dev Many functions in this contract were taken from this repository:\\n * https://github.com/atpar/funds-distribution-token/blob/master/contracts/FundsDistributionToken.sol\\n * which is an example implementation of ERC 2222, the draft for which can be found at\\n * https://github.com/atpar/funds-distribution-token/blob/master/EIP-DRAFT.md\\n *\\n * This contract has been substantially modified from the original and does not comply with ERC 2222.\\n * Many functions were renamed as \\\"dividends\\\" rather than \\\"funds\\\" and the core functionality was separated\\n * into this abstract contract which can be inherited by anything tracking ownership of dividend shares.\\n */\\nabstract contract AbstractDividends is IAbstractDividends {\\n  using LowGasSafeMath for uint256;\\n  using SafeCast for uint128;\\n  using SafeCast for uint256;\\n  using SafeCast for int256;\\n  using SignedSafeMath for int256;\\n\\n/* ========  Constants  ======== */\\n  uint128 internal constant POINTS_MULTIPLIER = type(uint128).max;\\n\\n/* ========  Internal Function References  ======== */\\n  function(address) view returns (uint256) private immutable getSharesOf;\\n  function() view returns (uint256) private immutable getTotalShares;\\n\\n/* ========  Storage  ======== */\\n  uint256 public pointsPerShare;\\n  mapping(address => int256) internal pointsCorrection;\\n  mapping(address => uint256) private withdrawnDividends;\\n\\n  constructor(\\n    function(address) view returns (uint256) getSharesOf_,\\n    function() view returns (uint256) getTotalShares_\\n  ) {\\n    getSharesOf = getSharesOf_;\\n    getTotalShares = getTotalShares_;\\n  }\\n\\n/* ========  Public View Functions  ======== */\\n  /**\\n   * @dev Returns the total amount of dividends a given address is able to withdraw.\\n   * @param account Address of a dividend recipient\\n   * @return A uint256 representing the dividends `account` can withdraw\\n   */\\n  function withdrawableDividendsOf(address account) public view override returns (uint256) {\\n    return cumulativeDividendsOf(account).sub(withdrawnDividends[account]);\\n  }\\n\\n  /**\\n   * @notice View the amount of dividends that an address has withdrawn.\\n   * @param account The address of a token holder.\\n   * @return The amount of dividends that `account` has withdrawn.\\n   */\\n  function withdrawnDividendsOf(address account) public view override returns (uint256) {\\n    return withdrawnDividends[account];\\n  }\\n\\n  /**\\n   * @notice View the amount of dividends that an address has earned in total.\\n   * @dev accumulativeFundsOf(account) = withdrawableDividendsOf(account) + withdrawnDividendsOf(account)\\n   * = (pointsPerShare * balanceOf(account) + pointsCorrection[account]) / POINTS_MULTIPLIER\\n   * @param account The address of a token holder.\\n   * @return The amount of dividends that `account` has earned in total.\\n   */\\n  function cumulativeDividendsOf(address account) public view override returns (uint256) {\\n    return pointsPerShare\\n      .mul(getSharesOf(account))\\n      .toInt256()\\n      .add(pointsCorrection[account])\\n      .toUint256() / POINTS_MULTIPLIER;\\n  }\\n\\n/* ========  Dividend Utility Functions  ======== */\\n\\n  /** \\n   * @notice Distributes dividends to token holders.\\n   * @dev It reverts if the total supply is 0.\\n   * It emits the `FundsDistributed` event if the amount to distribute is greater than 0.\\n   * About undistributed dividends:\\n   *   In each distribution, there is a small amount which does not get distributed,\\n   *   which is `(amount * POINTS_MULTIPLIER) % totalShares()`.\\n   *   With a well-chosen `POINTS_MULTIPLIER`, the amount of funds that are not getting\\n   *   distributed in a distribution can be less than 1 (base unit).\\n   */\\n  function _distributeDividends(uint256 amount) internal {\\n    uint256 shares = getTotalShares();\\n    require(shares > 0, \\\"SHARES\\\");\\n\\n    if (amount > 0) {\\n      pointsPerShare = pointsPerShare.add(\\n        amount.mul(POINTS_MULTIPLIER) / shares\\n      );\\n      emit DividendsDistributed(msg.sender, amount);\\n    }\\n  }\\n\\n  /**\\n   * @notice Prepares collection of owed dividends\\n   * @dev It emits a `DividendsWithdrawn` event if the amount of withdrawn dividends is\\n   * greater than 0.\\n   */\\n  function _prepareCollect(address account) internal returns (uint256) {\\n    uint256 _withdrawableDividend = withdrawableDividendsOf(account);\\n    if (_withdrawableDividend > 0) {\\n      withdrawnDividends[account] = withdrawnDividends[account].add(_withdrawableDividend);\\n      emit DividendsWithdrawn(account, _withdrawableDividend);\\n    }\\n    return _withdrawableDividend;\\n  }\\n\\n  function _correctPointsForTransfer(address from, address to, uint256 shares) internal {\\n    int256 _magCorrection = pointsPerShare.mul(shares).toInt256();\\n    pointsCorrection[from] = pointsCorrection[from].add(_magCorrection);\\n    pointsCorrection[to] = pointsCorrection[to].sub(_magCorrection);\\n  }\\n\\n  /**\\n   * @dev Increases or decreases the points correction for `account` by\\n   * `shares*pointsPerShare`.\\n   */\\n  function _correctPoints(address account, int256 shares) internal {\\n    pointsCorrection[account] = pointsCorrection[account]\\n      .add(shares.mul(int256(pointsPerShare)));\\n  }\\n}\"\r\n    },\r\n    \"contracts/base/ERC20Dividends.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\nimport \\\"./ERC20VotesComp.sol\\\";\\nimport \\\"./AbstractDividends.sol\\\";\\n\\n\\ncontract ERC20Dividends is ERC20VotesComp, AbstractDividends {\\n  constructor(string memory name, string memory symbol)\\n    ERC20VotesComp(name, symbol)\\n    AbstractDividends(balanceOf, totalSupply)\\n  {}\\n\\n\\t/**\\n\\t * @dev Internal function that transfer tokens from one address to another.\\n\\t * Update pointsCorrection to keep funds unchanged.\\n\\t * @param from The address to transfer from.\\n\\t * @param to The address to transfer to.\\n\\t * @param value The amount to be transferred.\\n\\t */\\n\\tfunction _transfer(address from, address to, uint96 value) internal virtual override {\\n\\t\\tsuper._transfer(from, to, value);\\n    _correctPointsForTransfer(from, to, value);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal function that mints tokens to an account.\\n\\t * Update pointsCorrection to keep funds unchanged.\\n\\t * @param account The account that will receive the created tokens.\\n\\t * @param amount The amount that will be created.\\n\\t */\\n\\tfunction _mint(address account, uint256 amount) internal virtual override {\\n\\t\\tsuper._mint(account, amount);\\n    _correctPoints(account, -int256(amount));\\n\\t}\\n\\t\\n\\t/** \\n\\t * @dev Internal function that burns an amount of the token of a given account.\\n\\t * Update pointsCorrection to keep funds unchanged.\\n\\t * @param account The account whose tokens will be burnt.\\n\\t * @param amount The amount that will be burnt.\\n\\t */\\n\\tfunction _burn(address account, uint256 amount) internal virtual override {\\n\\t\\tsuper._burn(account, amount);\\n    _correctPoints(account, int256(amount));\\n\\t}\\n}\"\r\n    },\r\n    \"contracts/base/ERC20VotesComp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../interfaces/IERC20VotesComp.sol\\\";\\n\\n\\ncontract ERC20VotesComp is IERC20VotesComp {\\n/** ========== Constants ==========  */\\n\\n  /** @dev The EIP-712 typehash for the contract's domain */\\n  bytes32 public constant DOMAIN_TYPEHASH =\\n    keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n  /** @dev The EIP-712 typehash for the delegation struct used by the contract */\\n  bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n  /** @dev The EIP-712 typehash for the permit struct used by the contract */\\n  bytes32 public constant PERMIT_TYPEHASH = keccak256(\\n    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n  );\\n\\n  /** @dev The EIP-712 domain separator */\\n  bytes32 public immutable domainSeparator;\\n\\n  /** @dev EIP-20 token decimals for this token */\\n  uint8 public constant decimals = 18;\\n\\n  /** @dev EIP-20 token name for this token */\\n  string public name;\\n\\n  /** @dev EIP-20 token symbol for this token */\\n  string public symbol;\\n\\n/** ========== Storage ==========  */\\n\\n  /** @dev Total number of tokens in circulation */\\n  uint96 internal _totalSupply;\\n\\n  /** @dev Allowance amounts on behalf of others */\\n  mapping(address => mapping(address => uint96)) internal allowances;\\n\\n  /** @dev Official record of token balances for each account */\\n  mapping(address => uint96) internal balances;\\n\\n  /** @dev A record of each accounts delegate */\\n  mapping(address => address) public override delegates;\\n\\n  /** @dev A record of votes checkpoints for each account, by index */\\n  mapping(address => mapping(uint32 => Checkpoint)) public override checkpoints;\\n\\n  /** @dev The number of checkpoints for each account */\\n  mapping(address => uint32) public override numCheckpoints;\\n\\n  /** @dev A record of states for signing / validating signatures */\\n  mapping(address => uint256) public override nonces;\\n\\n/** ========== Constructor ==========  */\\n\\n  constructor(string memory _name, string memory _symbol) {\\n    name = _name;\\n    symbol = _symbol;\\n    domainSeparator = keccak256(abi.encode(\\n      DOMAIN_TYPEHASH, keccak256(bytes(_name)), getChainId(), address(this)\\n    ));\\n  }\\n\\n/** ========== Queries ==========  */\\n\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev Get the number of tokens `spender` is approved to spend on behalf of `account`\\n   * @param account The address of the account holding the funds\\n   * @param spender The address of the account spending the funds\\n   * @return The number of tokens approved\\n   */\\n  function allowance(address account, address spender) public view override returns (uint256) {\\n    return allowances[account][spender];\\n  }\\n\\n  /**\\n   * @dev Get the number of tokens held by the `account`\\n   * @param account The address of the account to get the balance of\\n   * @return The number of tokens held\\n   */\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return balances[account];\\n  }\\n\\n  /**\\n   * @dev Gets the current votes balance for `account`\\n   * @param account The address to get votes balance\\n   * @return The number of current votes for `account`\\n   */\\n  function getCurrentVotes(address account) external view override returns (uint96) {\\n    uint32 nCheckpoints = numCheckpoints[account];\\n    return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n  }\\n\\n  /**\\n   * @dev Determine the prior number of votes for an account as of a block number\\n   * Block number must be a finalized block or else this function will revert to prevent misinformation.\\n   * @param account The address of the account to check\\n   * @param blockNumber The block number to get the vote balance at\\n   * @return The number of votes the account had as of the given block\\n   */\\n  function getPriorVotes(address account, uint256 blockNumber) external view override returns (uint96) {\\n    require(blockNumber < block.number, \\\"not yet determined\\\");\\n\\n    uint32 nCheckpoints = numCheckpoints[account];\\n    if (nCheckpoints == 0) {\\n      return 0;\\n    }\\n\\n    // First check most recent balance\\n    if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n      return checkpoints[account][nCheckpoints - 1].votes;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (checkpoints[account][0].fromBlock > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint32 lower = 0;\\n    uint32 upper = nCheckpoints - 1;\\n    while (upper > lower) {\\n      uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Checkpoint memory cp = checkpoints[account][center];\\n      if (cp.fromBlock == blockNumber) {\\n        return cp.votes;\\n      } else if (cp.fromBlock < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return checkpoints[account][lower].votes;\\n  }\\n\\n/** ========== ERC20 Actions ==========  */\\n\\n  /**\\n   * @dev Approve `spender` to transfer up to `amount` from `src`\\n   * This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n   * @return Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 rawAmount) external override returns (bool) {\\n    uint96 amount;\\n    if (rawAmount == uint256(-1)) {\\n      amount = uint96(-1);\\n    } else {\\n      amount = safe96(rawAmount);\\n    }\\n\\n    allowances[msg.sender][spender] = amount;\\n\\n    emit Approval(msg.sender, spender, amount);\\n    return true;\\n  }\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 rawAmount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    uint96 amount;\\n    if (rawAmount == uint256(-1)) {\\n      amount = uint96(-1);\\n    } else {\\n      amount = safe96(rawAmount);\\n    }\\n\\n    bytes32 structHash = keccak256(\\n      abi.encode(\\n        PERMIT_TYPEHASH,\\n        owner,\\n        spender,\\n        rawAmount,\\n        nonces[owner]++,\\n        deadline\\n      )\\n    );\\n    bytes32 digest = keccak256(\\n      abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\n    );\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), \\\"invalid signature\\\");\\n    require(signatory == owner, \\\"unauthorized\\\");\\n    require(block.timestamp <= deadline, \\\"signature expired\\\");\\n\\n    allowances[owner][spender] = amount;\\n\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param rawAmount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transfer(address dst, uint256 rawAmount) external override returns (bool) {\\n    uint96 amount = safe96(rawAmount);\\n    _transfer(msg.sender, dst, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param rawAmount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 rawAmount\\n  ) external override returns (bool) {\\n    address spender = msg.sender;\\n    uint96 spenderAllowance = allowances[src][spender];\\n    uint96 amount = safe96(rawAmount);\\n\\n    if (spender != src && spenderAllowance != uint96(-1)) {\\n      uint96 newAllowance =\\n        sub96(spenderAllowance, amount, \\\"transfer amount exceeds allowance\\\");\\n      allowances[src][spender] = newAllowance;\\n\\n      emit Approval(src, spender, newAllowance);\\n    }\\n\\n    _transfer(src, dst, amount);\\n    return true;\\n  }\\n\\n/** ========== Delegation Actions ==========  */\\n\\n  /**\\n   * @dev Delegate votes from `msg.sender` to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   */\\n  function delegate(address delegatee) external override {\\n    return _delegate(msg.sender, delegatee);\\n  }\\n\\n  /**\\n   * @dev Delegates votes from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override {\\n    bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), \\\"invalid signature\\\");\\n    require(nonce == nonces[signatory]++, \\\"invalid nonce\\\");\\n    require(block.timestamp <= expiry, \\\"signature expired\\\");\\n    return _delegate(signatory, delegatee);\\n  }\\n\\n/** ========== Internal Helpers ==========  */\\n\\n  function _mint(address dst, uint256 rawAmount) internal virtual {\\n    require(dst != address(0), \\\"mint to the zero address\\\");\\n    uint96 amount = safe96(rawAmount);\\n    _totalSupply = add96(_totalSupply, amount, \\\"mint amount overflows\\\");\\n    balances[dst] += amount; // add96 not needed because totalSupply does not overflow\\n    emit Transfer(address(0), dst, amount);\\n    _moveDelegates(address(0), delegates[dst], amount);\\n  }\\n\\n  function _burn(address src, uint256 rawAmount) internal virtual {\\n    require(src != address(0), \\\"burn from the zero address\\\");\\n    uint96 amount = safe96(rawAmount);\\n    balances[src] = sub96(balances[src], amount, \\\"burn amount exceeds balance\\\");\\n    _totalSupply -= amount; // add96 not needed because balance does not underflow\\n    emit Transfer(src, address(0), amount);\\n    _moveDelegates(delegates[src], address(0), amount);\\n  }\\n\\n  function _delegate(address delegator, address delegatee) internal {\\n    address currentDelegate = delegates[delegator];\\n    uint96 delegatorBalance = balances[delegator];\\n    delegates[delegator] = delegatee;\\n    emit DelegateChanged(delegator, currentDelegate, delegatee);\\n    _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n  }\\n\\n  function _transfer(\\n    address src,\\n    address dst,\\n    uint96 amount\\n  ) internal virtual {\\n    require(src != address(0), \\\"transfer from the zero address\\\");\\n    require(dst != address(0), \\\"transfer to the zero address\\\");\\n\\n    balances[src] = sub96(balances[src], amount, \\\"transfer amount exceeds balance\\\");\\n    balances[dst] = add96(balances[dst], amount, \\\"transfer amount overflows\\\");\\n    emit Transfer(src, dst, amount);\\n\\n    _moveDelegates(delegates[src], delegates[dst], amount);\\n  }\\n\\n  function _moveDelegates(\\n    address srcRep,\\n    address dstRep,\\n    uint96 amount\\n  ) internal {\\n    if (srcRep != dstRep && amount > 0) {\\n      if (srcRep != address(0)) {\\n        uint32 srcRepNum = numCheckpoints[srcRep];\\n        uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n        uint96 srcRepNew = sub96(srcRepOld, amount, \\\"vote amount underflows\\\");\\n        _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n      }\\n\\n      if (dstRep != address(0)) {\\n        uint32 dstRepNum = numCheckpoints[dstRep];\\n        uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n        uint96 dstRepNew = add96(dstRepOld, amount, \\\"vote amount overflows\\\");\\n        _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n      }\\n    }\\n  }\\n\\n  function _writeCheckpoint(\\n    address delegatee,\\n    uint32 nCheckpoints,\\n    uint96 oldVotes,\\n    uint96 newVotes\\n  ) internal {\\n    uint32 blockNumber = safe32(block.number, \\\"block number exceeds 32 bits\\\");\\n\\n    if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n      checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n    } else {\\n      checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n      numCheckpoints[delegatee] = nCheckpoints + 1;\\n    }\\n\\n    emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n  }\\n\\n  function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n    require(n < 2**32, errorMessage);\\n    return uint32(n);\\n  }\\n\\n  function safe96(uint256 n) internal pure returns (uint96) {\\n    require(n < 2**96, \\\"amount exceeds 96 bits\\\");\\n    return uint96(n);\\n  }\\n\\n  function add96(\\n    uint96 a,\\n    uint96 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint96) {\\n    uint96 c = a + b;\\n    require(c >= a, errorMessage);\\n    return c;\\n  }\\n\\n  function sub96(\\n    uint96 a,\\n    uint96 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint96) {\\n    require(b <= a, errorMessage);\\n    return a - b;\\n  }\\n\\n  function getChainId() internal pure returns (uint256) {\\n    uint256 chainId;\\n    assembly { chainId := chainid() }\\n    return chainId;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAbstractDividends.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n\\ninterface IAbstractDividends {\\n\\t/**\\n\\t * @dev Returns the total amount of dividends a given address is able to withdraw.\\n\\t * @param account Address of a dividend recipient\\n\\t * @return A uint256 representing the dividends `account` can withdraw\\n\\t */\\n\\tfunction withdrawableDividendsOf(address account) external view returns (uint256);\\n\\n  /**\\n\\t * @dev View the amount of funds that an address has withdrawn.\\n\\t * @param account The address of a token holder.\\n\\t * @return The amount of funds that `account` has withdrawn.\\n\\t */\\n\\tfunction withdrawnDividendsOf(address account) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev View the amount of funds that an address has earned in total.\\n\\t * accumulativeFundsOf(account) = withdrawableDividendsOf(account) + withdrawnDividendsOf(account)\\n\\t * = (pointsPerShare * balanceOf(account) + pointsCorrection[account]) / POINTS_MULTIPLIER\\n\\t * @param account The address of a token holder.\\n\\t * @return The amount of funds that `account` has earned in total.\\n\\t */\\n\\tfunction cumulativeDividendsOf(address account) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev This event emits when new funds are distributed\\n\\t * @param by the address of the sender who distributed funds\\n\\t * @param dividendsDistributed the amount of funds received for distribution\\n\\t */\\n\\tevent DividendsDistributed(address indexed by, uint256 dividendsDistributed);\\n\\n\\t/**\\n\\t * @dev This event emits when distributed funds are withdrawn by a token holder.\\n\\t * @param by the address of the receiver of funds\\n\\t * @param fundsWithdrawn the amount of funds that were withdrawn\\n\\t */\\n\\tevent DividendsWithdrawn(address indexed by, uint256 fundsWithdrawn);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20VotesComp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n\\ninterface IERC20VotesComp is IERC20 {\\n  event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n  event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n  struct Checkpoint {\\n    uint32 fromBlock;\\n    uint96 votes;\\n  }\\n\\n  function nonces(address) external view returns (uint256);\\n\\n  function delegates(address) external view returns (address);\\n\\n  function checkpoints(address, uint32) external view returns (uint32 fromBlock, uint96 votes);\\n\\n  function numCheckpoints(address) external view returns (uint32);\\n\\n  function getCurrentVotes(address account) external view returns (uint96);\\n\\n  function getPriorVotes(address account, uint256 blockNumber) external view returns (uint96);\\n\\n  function delegate(address delegatee) external;\\n\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n  function withdraw(uint) external;\\n}\"\r\n    },\r\n    \"contracts/libraries/LowGasSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/************************************************************************************************\\nOriginally from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/LowGasSafeMath.sol\\n\\nThis source code has been modified from the original, which was copied from the github repository\\nat commit hash b83fcf497e895ae59b97c9d04e997023f69b5e97.\\n\\nSubject to the GPL-2.0-or-later license\\n*************************************************************************************************/\\n\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y, string memory errorMessage) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, errorMessage);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y, string memory errorMessage) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, errorMessage);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y, string memory errorMessage) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y, errorMessage);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/************************************************************************************************\\nOriginally from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/SafeCast.sol\\n\\nThis source code has been modified from the original, which was copied from the github repository\\nat commit hash b83fcf497e895ae59b97c9d04e997023f69b5e97.\\n\\nSubject to the GPL-2.0-or-later license\\n*************************************************************************************************/\\n\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n  /// @notice Cast a uint256 to a uint160, revert on overflow\\n  /// @param y The uint256 to be downcasted\\n  /// @return z The downcasted integer, now type uint160\\n  function toUint160(uint256 y) internal pure returns (uint160 z) {\\n    require((z = uint160(y)) == y);\\n  }\\n\\n  /// @notice Cast a uint256 to a uint128, revert on overflow\\n  /// @param y The uint256 to be downcasted\\n  /// @return z The downcasted integer, now type uint128\\n  function toUint128(uint256 y) internal pure returns (uint128 z) {\\n    require((z = uint128(y)) == y);\\n  }\\n\\n  /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n  /// @param y The int256 to be downcasted\\n  /// @return z The downcasted integer, now type int128\\n  function toInt128(int256 y) internal pure returns (int128 z) {\\n    require((z = int128(y)) == y);\\n  }\\n\\n  /// @notice Cast a uint256 to a int256, revert on overflow\\n  /// @param y The uint256 to be casted\\n  /// @return z The casted integer, now type int256\\n  function toInt256(uint256 y) internal pure returns (int256 z) {\\n    require(y < 2**255);\\n    z = int256(y);\\n  }\\n\\n  /// @notice Cast an int256 to a uint256, revert on overflow\\n  /// @param y The uint256 to be downcasted\\n  /// @return z The downcasted integer, now type uint160\\n  function toUint256(int256 y) internal pure returns (uint256 z) {\\n    require(y >= 0);\\n    z = uint256(y);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n/************************************************************************************************\\nOriginally from https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol\\n\\nThis source code has been modified from the original, which was copied from the github repository\\nat commit hash 6a31c618fc3180a6ee945b869d1ce4449f253ee6.\\n\\nSubject to the GPL-2.0-or-later license\\n*************************************************************************************************/\\n\\n\\nlibrary TransferHelper {\\n  function safeTransferFrom(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    (bool success, bytes memory data) =\\n      token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"STF\\\");\\n  }\\n\\n  function safeTransfer(\\n    address token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"ST\\\");\\n  }\\n\\n  function safeTransferETH(address to, uint256 value) internal {\\n    (bool success, ) = to.call{value: value}(new bytes(0));\\n    require(success, \\\"STE\\\");\\n  }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dividendsDistributed\",\"type\":\"uint256\"}],\"name\":\"DividendsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundsWithdrawn\",\"type\":\"uint256\"}],\"name\":\"DividendsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"cumulativeDividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pointsPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawnDividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ERC20DividendsOwned", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000144469766964656e642d42656172696e67204e44580000000000000000000000000000000000000000000000000000000000000000000000000000000000000004644e445800000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}