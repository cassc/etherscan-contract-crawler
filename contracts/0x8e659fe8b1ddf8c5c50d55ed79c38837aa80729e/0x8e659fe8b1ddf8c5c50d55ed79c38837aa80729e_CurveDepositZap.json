{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"CurveDepositZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"Ownable.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"IVault.sol\\\";\\n\\ninterface ICurveToken {\\n    function minter() external view returns (address);\\n}\\n\\ninterface ICurvePool {\\n    function remove_liquidity_one_coin(\\n        uint256 _burn_amount,\\n        int128 i,\\n        uint256 _min_received\\n    ) external returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _burn_amount, int128 i) external view returns (uint256);\\n\\n    function coins(uint256 arg0) external view returns (address);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n}\\n\\ninterface ICurvePoolV2 {\\n    function remove_liquidity_one_coin(\\n        uint256 _burn_amount,\\n        uint256 i,\\n        uint256 _min_received\\n    ) external returns (uint256);\\n\\n    function gamma() external view returns (uint256);\\n\\n    // changed interface only appears to be used in 2-coin v2 pools\\n    function calc_token_amount(uint256[2] calldata amounts) external view returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _burn_amount, uint256 i) external view returns (uint256);\\n}\\n\\ninterface ICurvePool2 is ICurvePool {\\n    function add_liquidity(uint256[2] calldata _amounts, uint256 _min_mint_amount) external returns (uint256);\\n\\n    function remove_liquidity(uint256 _burn_amount, uint256[2] calldata _min_amounts) external;\\n\\n    function calc_token_amount(uint256[2] calldata _amounts, bool _is_deposit) external view returns (uint256);\\n}\\n\\ninterface ICurvePool3 is ICurvePool {\\n    function add_liquidity(uint256[3] calldata _amounts, uint256 _min_mint_amount) external returns (uint256);\\n\\n    function remove_liquidity(uint256 _burn_amount, uint256[3] calldata _min_amounts) external;\\n\\n    function calc_token_amount(uint256[3] calldata _amounts, bool _is_deposit) external view returns (uint256);\\n}\\n\\ninterface ICurvePool4 is ICurvePool {\\n    function add_liquidity(uint256[4] calldata _amounts, uint256 _min_mint_amount) external returns (uint256);\\n\\n    function remove_liquidity(uint256 _burn_amount, uint256[4] calldata _min_amounts) external;\\n\\n    function calc_token_amount(uint256[4] calldata _amounts, bool _is_deposit) external view returns (uint256);\\n}\\n\\ninterface IDepositToken {\\n    function emissionId() external view returns (uint256);\\n\\n    function lpToken() external view returns (address);\\n\\n    function deposit(address receiver, uint256 amount) external returns (bool);\\n\\n    function withdraw(address receiver, uint256 amount) external returns (bool);\\n}\\n\\n/**\\n    @title PRISMA Curve Deposit Zap\\n    @notice Deposits tokens into Curve and stakes LP tokens into Curve/Convex via Prisma\\n */\\ncontract CurveDepositZap is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct CurvePool {\\n        address pool;\\n        bool isMetapool;\\n        bool isCryptoswap;\\n        address[] coins;\\n    }\\n\\n    IPrismaVault public immutable vault;\\n\\n    mapping(address lpToken => CurvePool) poolData;\\n    mapping(address depositToken => address lpToken) depositTokenToLpToken;\\n\\n    constructor(IPrismaVault _vault, address[2][] memory _basePools) {\\n        vault = _vault;\\n        for (uint i = 0; i < _basePools.length; i++) {\\n            addCurvePool(_basePools[i][0], _basePools[i][1]);\\n        }\\n    }\\n\\n    /**\\n        @notice Get an array of coins used in `depositToken`\\n        @dev Arrays for `amounts` or `minReceived` correspond to the returned coins\\n     */\\n    function getCoins(address depositToken) public view returns (address[] memory coins) {\\n        address lpToken = IDepositToken(depositToken).lpToken();\\n        CurvePool memory pool = poolData[lpToken];\\n        require(pool.pool != address(0), \\\"depositToken not registered\\\");\\n\\n        if (!pool.isMetapool) {\\n            return pool.coins;\\n        }\\n        CurvePool memory basePool = poolData[pool.coins[1]];\\n        coins = new address[](basePool.coins.length + 1);\\n        coins[0] = pool.coins[0];\\n        for (uint i = 1; i < coins.length; i++) {\\n            coins[i] = basePool.coins[i - 1];\\n        }\\n        return coins;\\n    }\\n\\n    /**\\n        @notice Get the expected amount of LP tokens returned when adding\\n                liquidity to `depositToken`\\n        @dev Used to calculate `minReceived` when calling `addLiquidity`\\n     */\\n    function getAddLiquidityReceived(address depositToken, uint256[] memory amounts) external view returns (uint256) {\\n        address lpToken = depositTokenToLpToken[depositToken];\\n        CurvePool memory pool = poolData[lpToken];\\n        require(pool.pool != address(0), \\\"depositToken not registered\\\");\\n\\n        if (pool.isMetapool) {\\n            CurvePool memory basePool = poolData[pool.coins[1]];\\n            require(amounts.length == basePool.coins.length + 1, \\\"Incorrect amounts.length\\\");\\n            bool isBaseDeposit;\\n            for (uint i = 1; i < amounts.length; i++) {\\n                if (amounts[i] > 0) {\\n                    isBaseDeposit = true;\\n                    break;\\n                }\\n            }\\n            if (isBaseDeposit) {\\n                amounts[1] = _calcTokenAmount(basePool, 1, amounts);\\n            } else {\\n                amounts[1] = 0;\\n            }\\n        } else {\\n            require(amounts.length == pool.coins.length, \\\"Incorrect amounts.length\\\");\\n        }\\n        return _calcTokenAmount(pool, 0, amounts);\\n    }\\n\\n    function _calcTokenAmount(\\n        CurvePool memory pool,\\n        uint256 i,\\n        uint256[] memory amounts\\n    ) internal view returns (uint256) {\\n        uint256 numCoins = pool.coins.length;\\n\\n        if (numCoins == 2) {\\n            if (pool.isCryptoswap) {\\n                return ICurvePoolV2(pool.pool).calc_token_amount([amounts[i], amounts[i + 1]]);\\n            } else {\\n                return ICurvePool2(pool.pool).calc_token_amount([amounts[i], amounts[i + 1]], true);\\n            }\\n        }\\n        if (numCoins == 3) {\\n            return ICurvePool3(pool.pool).calc_token_amount([amounts[i], amounts[i + 1], amounts[i + 2]], true);\\n        }\\n        if (numCoins == 4) {\\n            return\\n                ICurvePool4(pool.pool).calc_token_amount(\\n                    [amounts[i], amounts[i + 1], amounts[i + 2], amounts[i + 3]],\\n                    true\\n                );\\n        }\\n    }\\n\\n    /**\\n        @notice Get the expected amount of coins returned when removing\\n                liquidity from `depositToken`\\n        @dev Used to calculate `minReceived` when calling `removeLiquidity`\\n     */\\n    function getRemoveLiquidityReceived(\\n        address depositToken,\\n        uint256 burnAmount\\n    ) external view returns (uint256[] memory received) {\\n        address lpToken = depositTokenToLpToken[depositToken];\\n        CurvePool memory pool = poolData[lpToken];\\n        require(pool.pool != address(0), \\\"depositToken not registered\\\");\\n\\n        if (pool.isMetapool) {\\n            CurvePool memory basePool = poolData[pool.coins[1]];\\n            uint256 length = basePool.coins.length;\\n            received = new uint256[](length + 1);\\n            uint256 supply = IERC20(lpToken).totalSupply();\\n            received[0] = (ICurvePool(pool.pool).balances(0) * burnAmount) / supply;\\n\\n            burnAmount = (ICurvePool(pool.pool).balances(1) * burnAmount) / supply;\\n            supply = IERC20(pool.coins[1]).totalSupply();\\n            for (uint i = 0; i < length; i++) {\\n                received[i + 1] = (ICurvePool(basePool.pool).balances(i) * burnAmount) / supply;\\n            }\\n            return received;\\n        } else {\\n            uint256 length = pool.coins.length;\\n            received = new uint256[](length);\\n            uint256 supply = IERC20(lpToken).totalSupply();\\n            for (uint i = 0; i < length; i++) {\\n                received[i] = (ICurvePool(pool.pool).balances(i) * burnAmount) / supply;\\n            }\\n            return received;\\n        }\\n    }\\n\\n    /**\\n        @notice Get the expected amount of coins returned when removing\\n                liquidity one-sided from `depositToken`\\n        @dev Used to calculate `minReceived` when calling `removeLiquidityOneCoin`\\n     */\\n    function getRemoveLiquidityOneCoinReceived(\\n        address depositToken,\\n        uint256 burnAmount,\\n        uint256 index\\n    ) external view returns (uint256) {\\n        address lpToken = depositTokenToLpToken[depositToken];\\n        CurvePool memory pool = poolData[lpToken];\\n        require(pool.pool != address(0), \\\"depositToken not registered\\\");\\n\\n        if (index != 0 && pool.isMetapool) {\\n            if (pool.isCryptoswap) {\\n                burnAmount = ICurvePoolV2(pool.pool).calc_withdraw_one_coin(burnAmount, 1);\\n            } else {\\n                burnAmount = ICurvePool(pool.pool).calc_withdraw_one_coin(burnAmount, 1);\\n            }\\n            pool = poolData[pool.coins[1]];\\n            index -= 1;\\n        }\\n        if (pool.isCryptoswap) {\\n            return ICurvePoolV2(pool.pool).calc_withdraw_one_coin(burnAmount, index);\\n        } else {\\n            return ICurvePool(pool.pool).calc_withdraw_one_coin(burnAmount, int128(int256(index)));\\n        }\\n    }\\n\\n    /**\\n        @notice For emergencies if someone accidentally sent some ERC20 tokens here\\n     */\\n    function recoverERC20(IERC20 token, uint256 amount) external onlyOwner {\\n        token.safeTransfer(msg.sender, amount);\\n    }\\n\\n    /**\\n        @notice Owner-only method to add data about a curve pool\\n        @dev Pools used as bases for metapools must be added this way prior to\\n             the metapool being added, otherwise things could break strangely.\\n     */\\n    function addCurvePool(address pool, address lpToken) public onlyOwner {\\n        _addPoolData(pool, lpToken);\\n    }\\n\\n    /**\\n        @notice Register a deposit token\\n        @dev Also called the first time liquidity is added or removed via the zap,\\n             this method is only needed to ensure the view methods work prior.\\n     */\\n    function registerDepositToken(address depositToken) external {\\n        require(depositTokenToLpToken[depositToken] == address(0), \\\"Already registered\\\");\\n        _registerDepositToken(depositToken);\\n    }\\n\\n    function _addPoolData(address pool, address lpToken) internal {\\n        poolData[lpToken].pool = pool;\\n        address[] memory coins = new address[](4);\\n        uint256 i;\\n        for (; i < 4; i++) {\\n            try ICurvePool(pool).coins(i) returns (address _coin) {\\n                coins[i] = _coin;\\n                IERC20(_coin).safeApprove(pool, type(uint256).max);\\n            } catch {\\n                assembly {\\n                    mstore(coins, i)\\n                }\\n                break;\\n            }\\n        }\\n        poolData[lpToken].coins = coins;\\n        address lastCoin = coins[i - 1];\\n        address basePool = poolData[lastCoin].pool;\\n        if (basePool != address(0)) poolData[lpToken].isMetapool = true;\\n        try ICurvePoolV2(pool).gamma() returns (uint256) {\\n            poolData[lpToken].isCryptoswap = true;\\n        } catch {\\n            poolData[lpToken].isCryptoswap = false;\\n        }\\n    }\\n\\n    function _registerDepositToken(address depositToken) internal returns (address lpToken) {\\n        lpToken = IDepositToken(depositToken).lpToken();\\n        depositTokenToLpToken[depositToken] = lpToken;\\n\\n        address pool = poolData[lpToken].pool;\\n        if (pool == address(0)) {\\n            uint256 id = IDepositToken(depositToken).emissionId();\\n            (address receiver, ) = vault.idToReceiver(id);\\n            require(receiver == depositToken, \\\"receiver != depositToken\\\");\\n\\n            try ICurveToken(lpToken).minter() returns (address _pool) {\\n                pool = _pool;\\n            } catch {\\n                pool = lpToken;\\n            }\\n            _addPoolData(pool, lpToken);\\n        }\\n        IERC20(lpToken).safeApprove(depositToken, type(uint256).max);\\n        return lpToken;\\n    }\\n\\n    /**\\n        @notice Add liquidity to Curve and stake LP tokens via `depositToken`\\n        @param depositToken Address of Prisma `CurveDepositToken` or `ConvexDepositToken` deployment\\n        @param amounts Array of coin amounts to deposit into Curve\\n        @param minReceived Minimum amount of Curve LP tokens received when adding liquidity\\n        @param receiver Address to deposit into Prisma on behalf of\\n        @return lpTokenAmount Amount of LP tokens deposited into `depositToken`\\n     */\\n    function addLiquidity(\\n        address depositToken,\\n        uint256[] memory amounts,\\n        uint256 minReceived,\\n        address receiver\\n    ) external returns (uint256 lpTokenAmount) {\\n        address lpToken = depositTokenToLpToken[depositToken];\\n        if (lpToken == address(0)) lpToken = _registerDepositToken(depositToken);\\n\\n        CurvePool memory pool = poolData[lpToken];\\n        if (amounts[0] > 0) IERC20(pool.coins[0]).safeTransferFrom(msg.sender, address(this), amounts[0]);\\n\\n        if (pool.isMetapool) {\\n            CurvePool memory basePool = poolData[pool.coins[1]];\\n            uint256 length = basePool.coins.length + 1;\\n            require(amounts.length == length, \\\"Incorrect amounts.length\\\");\\n            bool isBaseDeposit;\\n            for (uint i = 1; i < length; i++) {\\n                if (amounts[i] > 0) {\\n                    isBaseDeposit = true;\\n                    IERC20(basePool.coins[i - 1]).safeTransferFrom(msg.sender, address(this), amounts[i]);\\n                }\\n            }\\n            if (isBaseDeposit) {\\n                amounts[1] = _addLiquidity(basePool.pool, length - 1, 1, amounts, 0);\\n            } else {\\n                amounts[1] = 0;\\n            }\\n        } else {\\n            uint256 length = pool.coins.length;\\n            require(amounts.length == length, \\\"Incorrect amounts.length\\\");\\n            for (uint i = 1; i < length; i++) {\\n                if (amounts[i] > 0) {\\n                    IERC20(pool.coins[i]).safeTransferFrom(msg.sender, address(this), amounts[i]);\\n                }\\n            }\\n        }\\n        lpTokenAmount = _addLiquidity(pool.pool, pool.coins.length, 0, amounts, minReceived);\\n\\n        IDepositToken(depositToken).deposit(receiver, lpTokenAmount);\\n\\n        return lpTokenAmount;\\n    }\\n\\n    function _addLiquidity(\\n        address pool,\\n        uint256 numCoins,\\n        uint256 i,\\n        uint256[] memory amounts,\\n        uint256 minReceived\\n    ) internal returns (uint256) {\\n        if (numCoins == 2) {\\n            return ICurvePool2(pool).add_liquidity([amounts[i], amounts[i + 1]], minReceived);\\n        }\\n        if (numCoins == 3) {\\n            return ICurvePool3(pool).add_liquidity([amounts[i], amounts[i + 1], amounts[i + 2]], minReceived);\\n        }\\n        if (numCoins == 4) {\\n            return\\n                ICurvePool4(pool).add_liquidity(\\n                    [amounts[i], amounts[i + 1], amounts[i + 2], amounts[i + 3]],\\n                    minReceived\\n                );\\n        }\\n    }\\n\\n    /**\\n        @notice Withdraw LP tokens from `depositToken` and remove liquidity from Curve\\n        @param depositToken Address of Prisma `CurveDepositToken` or `ConvexDepositToken` deployment\\n        @param burnAmount Amount of Curve LP tokens to withdraw\\n        @param minReceived Minimum coin amounts received when removing liquidity\\n        @param receiver Address to send withdrawn coins to\\n        @return received Array of withdrawn coin amounts\\n     */\\n    function removeLiquidity(\\n        address depositToken,\\n        uint256 burnAmount,\\n        uint256[] calldata minReceived,\\n        address receiver\\n    ) external returns (uint256[] memory received) {\\n        address lpToken = depositTokenToLpToken[depositToken];\\n        if (lpToken == address(0)) lpToken = _registerDepositToken(depositToken);\\n\\n        IERC20(depositToken).transferFrom(msg.sender, address(this), burnAmount);\\n        IDepositToken(depositToken).withdraw(address(this), burnAmount);\\n\\n        CurvePool memory pool = poolData[lpToken];\\n        if (pool.isMetapool) return _removeLiquidityMeta(pool, burnAmount, minReceived, receiver);\\n        else return _removeLiquidityPlain(pool, burnAmount, minReceived, receiver);\\n    }\\n\\n    function _removeLiquidityMeta(\\n        CurvePool memory pool,\\n        uint256 burnAmount,\\n        uint256[] calldata minReceived,\\n        address receiver\\n    ) internal returns (uint256[] memory) {\\n        CurvePool memory basePool = poolData[pool.coins[1]];\\n        uint256 length = basePool.coins.length;\\n        require(minReceived.length == length + 1, \\\"Incorrect minReceived.length\\\");\\n        uint256[] memory received = new uint256[](length + 1);\\n\\n        _removeLiquidity(pool.pool, 2, burnAmount);\\n\\n        IERC20 coin = IERC20(pool.coins[0]);\\n        uint256 amount = coin.balanceOf(address(this));\\n        require(amount >= minReceived[0], \\\"Slippage\\\");\\n        coin.safeTransfer(receiver, amount);\\n        received[0] = amount;\\n\\n        burnAmount = IERC20(pool.coins[1]).balanceOf(address(this));\\n        _removeLiquidity(basePool.pool, length, burnAmount);\\n\\n        for (uint i = 0; i < length; i++) {\\n            coin = IERC20(basePool.coins[i]);\\n            amount = coin.balanceOf(address(this));\\n            require(amount >= minReceived[i + 1], \\\"Slippage\\\");\\n            coin.safeTransfer(receiver, amount);\\n            received[i + 1] = amount;\\n        }\\n        return received;\\n    }\\n\\n    function _removeLiquidityPlain(\\n        CurvePool memory pool,\\n        uint256 burnAmount,\\n        uint256[] calldata minReceived,\\n        address receiver\\n    ) internal returns (uint256[] memory) {\\n        uint length = pool.coins.length;\\n        require(minReceived.length == length, \\\"Incorrect minReceived.length\\\");\\n        uint256[] memory received = new uint256[](length);\\n\\n        _removeLiquidity(pool.pool, length, burnAmount);\\n\\n        for (uint i = 0; i < length; i++) {\\n            IERC20 coin = IERC20(pool.coins[i]);\\n            uint256 amount = coin.balanceOf(address(this));\\n            require(amount >= minReceived[i], \\\"Slippage\\\");\\n            coin.safeTransfer(receiver, amount);\\n            received[i] = amount;\\n        }\\n        return received;\\n    }\\n\\n    function _removeLiquidity(address pool, uint256 numCoins, uint256 burnAmount) internal {\\n        if (numCoins == 2) {\\n            ICurvePool2(pool).remove_liquidity(burnAmount, [uint256(0), uint256(0)]);\\n        } else if (numCoins == 3) {\\n            ICurvePool3(pool).remove_liquidity(burnAmount, [uint256(0), uint256(0), uint256(0)]);\\n        } else if (numCoins == 4) {\\n            ICurvePool4(pool).remove_liquidity(burnAmount, [uint256(0), uint256(0), uint256(0), uint256(0)]);\\n        }\\n    }\\n\\n    /**\\n        @notice Withdraw LP tokens from `depositToken` and remove liquidity from Curve single-sided\\n        @param depositToken Address of Prisma `CurveDepositToken` or `ConvexDepositToken` deployment\\n        @param burnAmount Amount of Curve LP tokens to withdraw\\n        @param index Index of coin to withdraw (from `getCoins`)\\n        @param minReceived Minimum amount received when removing liquidity\\n        @param receiver Address to send withdrawn coins to\\n        @return received Amount of coin received in withdrawal\\n     */\\n    function removeLiquidityOneCoin(\\n        address depositToken,\\n        uint256 burnAmount,\\n        uint256 index,\\n        uint256 minReceived,\\n        address receiver\\n    ) external returns (uint256) {\\n        address lpToken = depositTokenToLpToken[depositToken];\\n        if (lpToken == address(0)) lpToken = _registerDepositToken(depositToken);\\n\\n        IERC20(depositToken).transferFrom(msg.sender, address(this), burnAmount);\\n        IDepositToken(depositToken).withdraw(address(this), burnAmount);\\n\\n        CurvePool memory pool = poolData[lpToken];\\n        if (index != 0 && pool.isMetapool) {\\n            if (pool.isCryptoswap) {\\n                burnAmount = ICurvePoolV2(pool.pool).remove_liquidity_one_coin(burnAmount, 1, 0);\\n            } else {\\n                burnAmount = ICurvePool(pool.pool).remove_liquidity_one_coin(burnAmount, 1, 0);\\n            }\\n            pool = poolData[pool.coins[1]];\\n            index -= 1;\\n        }\\n\\n        uint256 amount;\\n        if (pool.isCryptoswap) {\\n            amount = ICurvePoolV2(pool.pool).remove_liquidity_one_coin(burnAmount, index, minReceived);\\n        } else {\\n            amount = ICurvePool(pool.pool).remove_liquidity_one_coin(burnAmount, int128(int256(index)), minReceived);\\n        }\\n        IERC20(pool.coins[index]).safeTransfer(receiver, amount);\\n\\n        return amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"draft-IERC20Permit.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPrismaVault {\\n    struct InitialAllowance {\\n        address receiver;\\n        uint256 amount;\\n    }\\n\\n    event BoostCalculatorSet(address boostCalculator);\\n    event BoostDelegationSet(address indexed boostDelegate, bool isEnabled, uint256 feePct, address callback);\\n    event EmissionScheduleSet(address emissionScheduler);\\n    event IncreasedAllocation(address indexed receiver, uint256 increasedAmount);\\n    event NewReceiverRegistered(address receiver, uint256 id);\\n    event ReceiverIsActiveStatusModified(uint256 indexed id, bool isActive);\\n    event UnallocatedSupplyIncreased(uint256 increasedAmount, uint256 unallocatedTotal);\\n    event UnallocatedSupplyReduced(uint256 reducedAmount, uint256 unallocatedTotal);\\n\\n    function allocateNewEmissions(uint256 id) external returns (uint256);\\n\\n    function batchClaimRewards(\\n        address receiver,\\n        address boostDelegate,\\n        address[] calldata rewardContracts,\\n        uint256 maxFeePct\\n    ) external returns (bool);\\n\\n    function increaseUnallocatedSupply(uint256 amount) external returns (bool);\\n\\n    function registerReceiver(address receiver, uint256 count) external returns (bool);\\n\\n    function setBoostCalculator(address _boostCalculator) external returns (bool);\\n\\n    function setBoostDelegationParams(bool isEnabled, uint256 feePct, address callback) external returns (bool);\\n\\n    function setEmissionSchedule(address _emissionSchedule) external returns (bool);\\n\\n    function setInitialParameters(\\n        address _emissionSchedule,\\n        address _boostCalculator,\\n        uint256 totalSupply,\\n        uint64 initialLockWeeks,\\n        uint128[] calldata _fixedInitialAmounts,\\n        InitialAllowance[] calldata initialAllowances\\n    ) external;\\n\\n    function setReceiverIsActive(uint256 id, bool isActive) external returns (bool);\\n\\n    function transferAllocatedTokens(address claimant, address receiver, uint256 amount) external returns (bool);\\n\\n    function transferTokens(address token, address receiver, uint256 amount) external returns (bool);\\n\\n    function PRISMA_CORE() external view returns (address);\\n\\n    function allocated(address) external view returns (uint256);\\n\\n    function boostCalculator() external view returns (address);\\n\\n    function boostDelegation(address) external view returns (bool isEnabled, uint16 feePct, address callback);\\n\\n    function claimableRewardAfterBoost(\\n        address account,\\n        address receiver,\\n        address boostDelegate,\\n        address rewardContract\\n    ) external view returns (uint256 adjustedAmount, uint256 feeToDelegate);\\n\\n    function emissionSchedule() external view returns (address);\\n\\n    function getClaimableWithBoost(address claimant) external view returns (uint256 maxBoosted, uint256 boosted);\\n\\n    function getWeek() external view returns (uint256 week);\\n\\n    function guardian() external view returns (address);\\n\\n    function idToReceiver(uint256) external view returns (address account, bool isActive);\\n\\n    function lockWeeks() external view returns (uint64);\\n\\n    function locker() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function claimableBoostDelegationFees(address claimant) external view returns (uint256 amount);\\n\\n    function prismaToken() external view returns (address);\\n\\n    function receiverUpdatedWeek(uint256) external view returns (uint16);\\n\\n    function totalUpdateWeek() external view returns (uint64);\\n\\n    function unallocatedTotal() external view returns (uint128);\\n\\n    function voter() external view returns (address);\\n\\n    function weeklyEmissions(uint256) external view returns (uint128);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"CurveDepositZap.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IPrismaVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address[2][]\",\"name\":\"_basePools\",\"type\":\"address[2][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"addCurvePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minReceived\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"getAddLiquidityReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"}],\"name\":\"getCoins\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"coins\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRemoveLiquidityOneCoinReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"getRemoveLiquidityReceived\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"received\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"}],\"name\":\"registerDepositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minReceived\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"received\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReceived\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"removeLiquidityOneCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IPrismaVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CurveDepositZap", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000006bdf212c290473dcacea9793890c5024c7eb02c00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000dcef968d416a41cdac0ed8702fac8128a64241a20000000000000000000000003175df0976dfa876431c2e9ee6bc45b65d3473cc000000000000000000000000bebc44782c7db0a1a60cb6fe97d0b483032ff1c70000000000000000000000006c3f90f043a72fa612cbac8115ee7e52bde6e490", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}