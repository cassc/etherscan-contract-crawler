{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Oracles/TellorPriceOracle.f.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface ITellor {\\n    // --- Functions ---\\n\\n    function getDataBefore(\\n        bytes32 queryId,\\n        uint256 timestamp\\n    )\\n        external\\n        view\\n        returns (bool ifRetrieve, bytes memory value, uint256 timestampRetrieved);\\n}\\n\\ninterface IPriceOracle {\\n    // --- Errors ---\\n\\n    /// @dev Contract initialized with an invalid deviation parameter.\\n    error InvalidDeviation();\\n\\n    // --- Types ---\\n\\n    struct PriceOracleResponse {\\n        bool isBrokenOrFrozen;\\n        bool priceChangeAboveMax;\\n        uint256 price;\\n    }\\n\\n    // --- Functions ---\\n\\n    /// @dev Return price oracle response which consists the following information: oracle is broken or frozen, the\\n    /// price change between two rounds is more than max, and the price.\\n    function getPriceOracleResponse() external returns (PriceOracleResponse memory);\\n\\n    /// @dev Maximum time period allowed since oracle latest round data timestamp, beyond which oracle is considered\\n    /// frozen.\\n    function timeout() external view returns (uint256);\\n\\n    /// @dev Used to convert a price answer to an 18-digit precision uint.\\n    function TARGET_DIGITS() external view returns (uint256);\\n\\n    /// @dev price deviation for the oracle in percentage.\\n    function DEVIATION() external view returns (uint256);\\n}\\n\\ninterface ITellorPriceOracle is IPriceOracle {\\n    // --- Types ---\\n\\n    struct TellorResponse {\\n        uint256 value;\\n        uint256 timestamp;\\n        bool success;\\n    }\\n\\n    // --- Errors ---\\n\\n    /// @dev Emitted when the Tellor address is invalid.\\n    error InvalidTellorAddress();\\n\\n    // --- Functions ---\\n\\n    /// @dev Wrapper contract that calls the Tellor system.\\n    function tellor() external returns (ITellor);\\n\\n    /// @dev Tellor query ID.\\n    function tellorQueryId() external returns (bytes32);\\n\\n    /// @dev Returns the last stored price from Tellor oracle\\n    function lastStoredPrice() external returns (uint256);\\n\\n    /// @dev Returns the last stored timestamp from Tellor oracle\\n    function lastStoredTimestamp() external returns (uint256);\\n}\\n\\nabstract contract BasePriceOracle is IPriceOracle {\\n    // --- Constants & immutables ---\\n\\n    uint256 public constant override TARGET_DIGITS = 18;\\n\\n    uint256 public immutable override timeout;\\n\\n    // --- Constructor ---\\n\\n    constructor(uint256 timeout_) {\\n        timeout = timeout_;\\n    }\\n\\n    // --- Functions ---\\n\\n    function _oracleIsFrozen(uint256 responseTimestamp) internal view returns (bool) {\\n        return (block.timestamp - responseTimestamp) > timeout;\\n    }\\n\\n    function _formatPrice(uint256 price, uint256 answerDigits) internal virtual returns (uint256) {\\n        /*\\n        * Convert the price returned by the oracle to an 18-digit decimal for use by Raft.\\n        */\\n        if (answerDigits > TARGET_DIGITS) {\\n            // Scale the returned price value down to Raft's target precision\\n            return price / (10 ** (answerDigits - TARGET_DIGITS));\\n        }\\n        if (answerDigits < TARGET_DIGITS) {\\n            // Scale the returned price value up to Raft's target precision\\n            return price * (10 ** (TARGET_DIGITS - answerDigits));\\n        }\\n        return price;\\n    }\\n}\\n\\ncontract TellorPriceOracle is BasePriceOracle, ITellorPriceOracle {\\n    // --- Constants & immutables ---\\n\\n    uint256 private constant _TELLOR_DIGITS = 18;\\n\\n    ITellor public immutable override tellor;\\n\\n    bytes32 public immutable override tellorQueryId;\\n\\n    uint256 public immutable override DEVIATION;\\n\\n    // --- Variables ---\\n\\n    uint256 public override lastStoredPrice;\\n\\n    uint256 public override lastStoredTimestamp;\\n\\n    // --- Constructor ---\\n\\n    constructor(\\n        ITellor tellor_,\\n        bytes32 tellorQueryId_,\\n        uint256 _deviation,\\n        uint256 timeout_\\n    )\\n        BasePriceOracle(timeout_)\\n    {\\n        if (address(tellor_) == address(0)) {\\n            revert InvalidTellorAddress();\\n        }\\n        if (_deviation >= 1e18) {\\n            revert InvalidDeviation();\\n        }\\n        tellor = ITellor(tellor_);\\n        tellorQueryId = tellorQueryId_;\\n        DEVIATION = _deviation;\\n    }\\n\\n    // --- Functions ---\\n\\n    function getPriceOracleResponse() external override returns (PriceOracleResponse memory) {\\n        TellorResponse memory tellorResponse = _getCurrentTellorResponse(tellorQueryId);\\n\\n        if (_tellorIsBroken(tellorResponse) || _oracleIsFrozen(tellorResponse.timestamp)) {\\n            return (PriceOracleResponse(true, false, 0));\\n        }\\n        return (PriceOracleResponse(false, false, _formatPrice(tellorResponse.value, _TELLOR_DIGITS)));\\n    }\\n\\n    function _tellorIsBroken(TellorResponse memory response) internal view returns (bool) {\\n        return\\n            !response.success || response.timestamp == 0 || response.timestamp > block.timestamp || response.value == 0;\\n    }\\n\\n    function _getCurrentTellorResponse(bytes32 queryId) internal returns (TellorResponse memory tellorResponse) {\\n        uint256 time;\\n        uint256 value;\\n\\n        try tellor.getDataBefore(queryId, block.timestamp - 20 minutes) returns (\\n            bool, bytes memory data, uint256 timestamp\\n        ) {\\n            value = abi.decode(data, (uint256));\\n            time = timestamp;\\n        } catch {\\n            return (tellorResponse);\\n        }\\n\\n        if (time > lastStoredTimestamp) {\\n            lastStoredPrice = value;\\n            lastStoredTimestamp = time;\\n        }\\n        return TellorResponse(lastStoredPrice, lastStoredTimestamp, true);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@balancer-labs/=node_modules/@balancer-labs/\",\r\n      \"@balancer-labs/v2-interfaces/contracts/=lib/balancer-v2-monorepo/pkg/interfaces/contracts/\",\r\n      \"@chainlink/=node_modules/@chainlink/\",\r\n      \"@eth-optimism/=node_modules/@eth-optimism/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@redstone-finance/=node_modules/@redstone-finance/\",\r\n      \"@smartcontractkit/chainlink/=lib/chainlink/contracts/src/v0.8/\",\r\n      \"@tempusfinance/=node_modules/@tempusfinance/\",\r\n      \"@tempusfinance/tempus-utils/contracts/=lib/tempus-utils/contracts/\",\r\n      \"balancer-v2-monorepo/=lib/balancer-v2-monorepo/\",\r\n      \"chainlink/=lib/chainlink/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"tempus-utils/=lib/tempus-utils/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ITellor\",\"name\":\"tellor_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tellorQueryId_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_deviation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidDeviation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTellorAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DEVIATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TARGET_DIGITS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceOracleResponse\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBrokenOrFrozen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"priceChangeAboveMax\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct IPriceOracle.PriceOracleResponse\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStoredPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStoredTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tellor\",\"outputs\":[{\"internalType\":\"contract ITellor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tellorQueryId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TellorPriceOracle", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200000", "ConstructorArguments": "000000000000000000000000d9157453e2668b2fc45b7a803d3fef3642430cc083a7f3d48786ac2667503a61e8c415438ed2922eb86a2906e4ee66d9a2ce49920000000000000000000000000000000000000000000000000011c37937e080000000000000000000000000000000000000000000000000000000000000001c20", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}