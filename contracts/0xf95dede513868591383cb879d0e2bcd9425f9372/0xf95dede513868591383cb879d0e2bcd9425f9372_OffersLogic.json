{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/eip/interface/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * [EIP](https://eips.ethereum.org/EIPS/eip-165).\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/eip/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/eip/interface/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/eip/interface/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/extension/interface/IPermissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IPermissions {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/extension/interface/IPermissionsEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./IPermissions.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IPermissionsEnumerable is IPermissions {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * [forum post](https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296)\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/extension/interface/IRoyaltyEngineV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Lookup engine interface\\n */\\ninterface IRoyaltyEngineV1 is IERC165 {\\n    /**\\n     * Get the royalty for a given token (address, id) and value amount.  Does not cache the bps/amounts.  Caches the spec for a given token address\\n     *\\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyalty(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 value\\n    ) external returns (address payable[] memory recipients, uint256[] memory amounts);\\n\\n    /**\\n     * View only version of getRoyalty\\n     *\\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyaltyView(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 value\\n    ) external view returns (address payable[] memory recipients, uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/extension/interface/IRoyaltyPayments.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Read royalty info for a token.\\n *      Supports RoyaltyEngineV1 and RoyaltyRegistry by manifold.xyz.\\n */\\ninterface IRoyaltyPayments is IERC165 {\\n    /// @dev Emitted when the address of RoyaltyEngine is set or updated.\\n    event RoyaltyEngineUpdated(address indexed previousAddress, address indexed newAddress);\\n\\n    /**\\n     * Get the royalty for a given token (address, id) and value amount.\\n     *\\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyalty(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 value\\n    ) external returns (address payable[] memory recipients, uint256[] memory amounts);\\n\\n    /**\\n     * Set or override RoyaltyEngine address\\n     *\\n     * @param _royaltyEngineAddress - RoyaltyEngineV1 address\\n     */\\n    function setRoyaltyEngine(address _royaltyEngineAddress) external;\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/extension/upgradeable/ERC2771ContextConsumer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\ninterface IERC2771Context {\\n    function isTrustedForwarder(address forwarder) external view returns (bool);\\n}\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771ContextConsumer {\\n    function _msgSender() public view virtual returns (address sender) {\\n        if (IERC2771Context(address(this)).isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() public view virtual returns (bytes calldata) {\\n        if (IERC2771Context(address(this)).isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/extension/upgradeable/Permissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../interface/IPermissions.sol\\\";\\nimport \\\"../../lib/TWStrings.sol\\\";\\n\\n/**\\n *  @title   Permissions\\n *  @dev     This contracts provides extending-contracts with role-based access control mechanisms\\n */\\n\\nlibrary PermissionsStorage {\\n    /// @custom:storage-location erc7201:permissions.storage\\n    /// @dev keccak256(abi.encode(uint256(keccak256(\\\"permissions.storage\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 public constant PERMISSIONS_STORAGE_POSITION =\\n        0x0a7b0f5c59907924802379ebe98cdc23e2ee7820f63d30126e10b3752010e500;\\n\\n    struct Data {\\n        /// @dev Map from keccak256 hash of a role => a map from address => whether address has role.\\n        mapping(bytes32 => mapping(address => bool)) _hasRole;\\n        /// @dev Map from keccak256 hash of a role to role admin. See {getRoleAdmin}.\\n        mapping(bytes32 => bytes32) _getRoleAdmin;\\n    }\\n\\n    function data() internal pure returns (Data storage data_) {\\n        bytes32 position = PERMISSIONS_STORAGE_POSITION;\\n        assembly {\\n            data_.slot := position\\n        }\\n    }\\n}\\n\\ncontract Permissions is IPermissions {\\n    /// @dev Default admin role for all roles. Only accounts with this role can grant/revoke other roles.\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @dev Modifier that checks if an account has the specified role; reverts otherwise.\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     *  @notice         Checks whether an account has a particular role.\\n     *  @dev            Returns `true` if `account` has been granted `role`.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account for which the role is being checked.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _permissionsStorage()._hasRole[role][account];\\n    }\\n\\n    /**\\n     *  @notice         Checks whether an account has a particular role;\\n     *                  role restrictions can be swtiched on and off.\\n     *\\n     *  @dev            Returns `true` if `account` has been granted `role`.\\n     *                  Role restrictions can be swtiched on and off:\\n     *                      - If address(0) has ROLE, then the ROLE restrictions\\n     *                        don't apply.\\n     *                      - If address(0) does not have ROLE, then the ROLE\\n     *                        restrictions will apply.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account for which the role is being checked.\\n     */\\n    function hasRoleWithSwitch(bytes32 role, address account) public view returns (bool) {\\n        if (!_permissionsStorage()._hasRole[role][address(0)]) {\\n            return _permissionsStorage()._hasRole[role][account];\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     *  @notice         Returns the admin role that controls the specified role.\\n     *  @dev            See {grantRole} and {revokeRole}.\\n     *                  To change a role's admin, use {_setRoleAdmin}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     */\\n    function getRoleAdmin(bytes32 role) external view override returns (bytes32) {\\n        return _permissionsStorage()._getRoleAdmin[role];\\n    }\\n\\n    /**\\n     *  @notice         Grants a role to an account, if not previously granted.\\n     *  @dev            Caller must have admin role for the `role`.\\n     *                  Emits {RoleGranted Event}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account to which the role is being granted.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        _checkRole(_permissionsStorage()._getRoleAdmin[role], _msgSender());\\n        if (_permissionsStorage()._hasRole[role][account]) {\\n            revert(\\\"Can only grant to non holders\\\");\\n        }\\n        _setupRole(role, account);\\n    }\\n\\n    /**\\n     *  @notice         Revokes role from an account.\\n     *  @dev            Caller must have admin role for the `role`.\\n     *                  Emits {RoleRevoked Event}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account from which the role is being revoked.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        _checkRole(_permissionsStorage()._getRoleAdmin[role], _msgSender());\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     *  @notice         Revokes role from the account.\\n     *  @dev            Caller must have the `role`, with caller being the same as `account`.\\n     *                  Emits {RoleRevoked Event}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account from which the role is being revoked.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        if (_msgSender() != account) {\\n            revert(\\\"Can only renounce for self\\\");\\n        }\\n        _revokeRole(role, account);\\n    }\\n\\n    /// @dev Sets `adminRole` as `role`'s admin role.\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _permissionsStorage()._getRoleAdmin[role];\\n        _permissionsStorage()._getRoleAdmin[role] = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /// @dev Sets up `role` for `account`\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _permissionsStorage()._hasRole[role][account] = true;\\n        emit RoleGranted(role, account, _msgSender());\\n    }\\n\\n    /// @dev Revokes `role` from `account`\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        _checkRole(role, account);\\n        delete _permissionsStorage()._hasRole[role][account];\\n        emit RoleRevoked(role, account, _msgSender());\\n    }\\n\\n    /// @dev Checks `role` for `account`. Reverts with a message including the required role.\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_permissionsStorage()._hasRole[role][account]) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"Permissions: account \\\",\\n                        TWStrings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        TWStrings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /// @dev Checks `role` for `account`. Reverts with a message including the required role.\\n    function _checkRoleWithSwitch(bytes32 role, address account) internal view virtual {\\n        if (!hasRoleWithSwitch(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"Permissions: account \\\",\\n                        TWStrings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        TWStrings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /// @dev Returns the Permissions storage.\\n    function _permissionsStorage() internal pure returns (PermissionsStorage.Data storage data) {\\n        data = PermissionsStorage.data();\\n    }\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/extension/upgradeable/PermissionsEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../interface/IPermissionsEnumerable.sol\\\";\\nimport \\\"./Permissions.sol\\\";\\n\\n/**\\n *  @title   PermissionsEnumerable\\n *  @dev     This contracts provides extending-contracts with role-based access control mechanisms.\\n *           Also provides interfaces to view all members with a given role, and total count of members.\\n */\\n\\nlibrary PermissionsEnumerableStorage {\\n    /// @custom:storage-location erc7201:extension.manager.storage\\n    bytes32 public constant PERMISSIONS_ENUMERABLE_STORAGE_POSITION =\\n        keccak256(abi.encode(uint256(keccak256(\\\"permissions.enumerable.storage\\\")) - 1)) & ~bytes32(uint256(0xff));\\n\\n    /**\\n     *  @notice A data structure to store data of members for a given role.\\n     *\\n     *  @param index    Current index in the list of accounts that have a role.\\n     *  @param members  map from index => address of account that has a role\\n     *  @param indexOf  map from address => index which the account has.\\n     */\\n    struct RoleMembers {\\n        uint256 index;\\n        mapping(uint256 => address) members;\\n        mapping(address => uint256) indexOf;\\n    }\\n\\n    struct Data {\\n        /// @dev map from keccak256 hash of a role to its members' data. See {RoleMembers}.\\n        mapping(bytes32 => RoleMembers) roleMembers;\\n    }\\n\\n    function data() internal pure returns (Data storage data_) {\\n        bytes32 position = PERMISSIONS_ENUMERABLE_STORAGE_POSITION;\\n        assembly {\\n            data_.slot := position\\n        }\\n    }\\n}\\n\\ncontract PermissionsEnumerable is IPermissionsEnumerable, Permissions {\\n    /**\\n     *  @notice         Returns the role-member from a list of members for a role,\\n     *                  at a given index.\\n     *  @dev            Returns `member` who has `role`, at `index` of role-members list.\\n     *                  See struct {RoleMembers}, and mapping {roleMembers}\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param index    Index in list of current members for the role.\\n     *\\n     *  @return member  Address of account that has `role`\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view override returns (address member) {\\n        uint256 currentIndex = _permissionsEnumerableStorage().roleMembers[role].index;\\n        uint256 check;\\n\\n        for (uint256 i = 0; i < currentIndex; i += 1) {\\n            if (_permissionsEnumerableStorage().roleMembers[role].members[i] != address(0)) {\\n                if (check == index) {\\n                    member = _permissionsEnumerableStorage().roleMembers[role].members[i];\\n                    return member;\\n                }\\n                check += 1;\\n            } else if (\\n                hasRole(role, address(0)) && i == _permissionsEnumerableStorage().roleMembers[role].indexOf[address(0)]\\n            ) {\\n                check += 1;\\n            }\\n        }\\n    }\\n\\n    /**\\n     *  @notice         Returns total number of accounts that have a role.\\n     *  @dev            Returns `count` of accounts that have `role`.\\n     *                  See struct {RoleMembers}, and mapping {roleMembers}\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *\\n     *  @return count   Total number of accounts that have `role`\\n     */\\n    function getRoleMemberCount(bytes32 role) external view override returns (uint256 count) {\\n        uint256 currentIndex = _permissionsEnumerableStorage().roleMembers[role].index;\\n\\n        for (uint256 i = 0; i < currentIndex; i += 1) {\\n            if (_permissionsEnumerableStorage().roleMembers[role].members[i] != address(0)) {\\n                count += 1;\\n            }\\n        }\\n        if (hasRole(role, address(0))) {\\n            count += 1;\\n        }\\n    }\\n\\n    /// @dev Revokes `role` from `account`, and removes `account` from {roleMembers}\\n    ///      See {_removeMember}\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _removeMember(role, account);\\n    }\\n\\n    /// @dev Grants `role` to `account`, and adds `account` to {roleMembers}\\n    ///      See {_addMember}\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _addMember(role, account);\\n    }\\n\\n    /// @dev adds `account` to {roleMembers}, for `role`\\n    function _addMember(bytes32 role, address account) internal {\\n        uint256 idx = _permissionsEnumerableStorage().roleMembers[role].index;\\n        _permissionsEnumerableStorage().roleMembers[role].index += 1;\\n\\n        _permissionsEnumerableStorage().roleMembers[role].members[idx] = account;\\n        _permissionsEnumerableStorage().roleMembers[role].indexOf[account] = idx;\\n    }\\n\\n    /// @dev removes `account` from {roleMembers}, for `role`\\n    function _removeMember(bytes32 role, address account) internal {\\n        uint256 idx = _permissionsEnumerableStorage().roleMembers[role].indexOf[account];\\n\\n        delete _permissionsEnumerableStorage().roleMembers[role].members[idx];\\n        delete _permissionsEnumerableStorage().roleMembers[role].indexOf[account];\\n    }\\n\\n    /// @dev Returns the PermissionsEnumerable storage.\\n    function _permissionsEnumerableStorage() internal pure returns (PermissionsEnumerableStorage.Data storage data) {\\n        data = PermissionsEnumerableStorage.data();\\n    }\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/extension/upgradeable/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ReentrancyGuardStorage {\\n    /// @custom:storage-location erc7201:reentrancy.guard.storage\\n    /// @dev keccak256(abi.encode(uint256(keccak256(\\\"reentrancy.guard.storage\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 public constant REENTRANCY_GUARD_STORAGE_POSITION =\\n        0x1d281c488dae143b6ea4122e80c65059929950b9c32f17fc57be22089d9c3b00;\\n\\n    struct Data {\\n        uint256 _status;\\n    }\\n\\n    function data() internal pure returns (Data storage data_) {\\n        bytes32 position = REENTRANCY_GUARD_STORAGE_POSITION;\\n        assembly {\\n            data_.slot := position\\n        }\\n    }\\n}\\n\\nabstract contract ReentrancyGuard {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    constructor() {\\n        _reentrancyGuardStorage()._status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentrancyGuardStorage()._status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _reentrancyGuardStorage()._status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _reentrancyGuardStorage()._status = _NOT_ENTERED;\\n    }\\n\\n    /// @dev Returns the ReentrancyGuard storage.\\n    function _reentrancyGuardStorage() internal pure returns (ReentrancyGuardStorage.Data storage data) {\\n        data = ReentrancyGuardStorage.data();\\n    }\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/extension/upgradeable/RoyaltyPayments.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../interface/IRoyaltyPayments.sol\\\";\\nimport \\\"../interface/IRoyaltyEngineV1.sol\\\";\\nimport { IERC2981 } from \\\"../../eip/interface/IERC2981.sol\\\";\\n\\nlibrary RoyaltyPaymentsStorage {\\n    /// @custom:storage-location erc7201:royalty.payments.storage\\n    /// @dev keccak256(abi.encode(uint256(keccak256(\\\"royalty.payments.storage\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 public constant ROYALTY_PAYMENTS_STORAGE_POSITION =\\n        0xc802b338f3fb784853cf3c808df5ff08335200e394ea2c687d12571a91045000;\\n\\n    struct Data {\\n        /// @dev The address of RoyaltyEngineV1, replacing the one set during construction.\\n        address royaltyEngineAddressOverride;\\n    }\\n\\n    function royaltyPaymentsStorage() internal pure returns (Data storage royaltyPaymentsData) {\\n        bytes32 position = ROYALTY_PAYMENTS_STORAGE_POSITION;\\n        assembly {\\n            royaltyPaymentsData.slot := position\\n        }\\n    }\\n}\\n\\n/**\\n *  @author  thirdweb.com\\n *\\n *  @title   Royalty Payments\\n *  @notice  Thirdweb's `RoyaltyPayments` is a contract extension to be used with a marketplace contract.\\n *           It exposes functions for fetching royalty settings for a token.\\n *           It Supports RoyaltyEngineV1 and RoyaltyRegistry by manifold.xyz.\\n */\\n\\nabstract contract RoyaltyPaymentsLogic is IRoyaltyPayments {\\n    // solhint-disable-next-line var-name-mixedcase\\n    address immutable ROYALTY_ENGINE_ADDRESS;\\n\\n    constructor(address _royaltyEngineAddress) {\\n        // allow address(0) in case RoyaltyEngineV1 not present on a network\\n        require(\\n            _royaltyEngineAddress == address(0) ||\\n                IERC165(_royaltyEngineAddress).supportsInterface(type(IRoyaltyEngineV1).interfaceId),\\n            \\\"Doesn't support IRoyaltyEngineV1 interface\\\"\\n        );\\n\\n        ROYALTY_ENGINE_ADDRESS = _royaltyEngineAddress;\\n    }\\n\\n    /**\\n     * Get the royalty for a given token (address, id) and value amount.  Does not cache the bps/amounts.  Caches the spec for a given token address\\n     *\\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyalty(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 value\\n    ) external returns (address payable[] memory recipients, uint256[] memory amounts) {\\n        address royaltyEngineAddress = getRoyaltyEngineAddress();\\n\\n        if (royaltyEngineAddress == address(0)) {\\n            try IERC2981(tokenAddress).royaltyInfo(tokenId, value) returns (address recipient, uint256 amount) {\\n                require(amount < value, \\\"Invalid royalty amount\\\");\\n\\n                recipients = new address payable[](1);\\n                amounts = new uint256[](1);\\n                recipients[0] = payable(recipient);\\n                amounts[0] = amount;\\n            } catch {}\\n        } else {\\n            (recipients, amounts) = IRoyaltyEngineV1(royaltyEngineAddress).getRoyalty(tokenAddress, tokenId, value);\\n        }\\n    }\\n\\n    /**\\n     * Set or override RoyaltyEngine address\\n     *\\n     * @param _royaltyEngineAddress - RoyaltyEngineV1 address\\n     */\\n    function setRoyaltyEngine(address _royaltyEngineAddress) external {\\n        if (!_canSetRoyaltyEngine()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n\\n        require(\\n            _royaltyEngineAddress != address(0) &&\\n                IERC165(_royaltyEngineAddress).supportsInterface(type(IRoyaltyEngineV1).interfaceId),\\n            \\\"Doesn't support IRoyaltyEngineV1 interface\\\"\\n        );\\n\\n        _setupRoyaltyEngine(_royaltyEngineAddress);\\n    }\\n\\n    /// @dev Returns original or overridden address for RoyaltyEngineV1\\n    function getRoyaltyEngineAddress() public view returns (address royaltyEngineAddress) {\\n        RoyaltyPaymentsStorage.Data storage data = RoyaltyPaymentsStorage.royaltyPaymentsStorage();\\n        address royaltyEngineOverride = data.royaltyEngineAddressOverride;\\n        royaltyEngineAddress = royaltyEngineOverride != address(0) ? royaltyEngineOverride : ROYALTY_ENGINE_ADDRESS;\\n    }\\n\\n    /// @dev Lets a contract admin update the royalty engine address\\n    function _setupRoyaltyEngine(address _royaltyEngineAddress) internal {\\n        RoyaltyPaymentsStorage.Data storage data = RoyaltyPaymentsStorage.royaltyPaymentsStorage();\\n        address currentAddress = data.royaltyEngineAddressOverride;\\n\\n        data.royaltyEngineAddressOverride = _royaltyEngineAddress;\\n\\n        emit RoyaltyEngineUpdated(currentAddress, _royaltyEngineAddress);\\n    }\\n\\n    /// @dev Returns whether royalty engine address can be set in the given execution context.\\n    function _canSetRoyaltyEngine() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/external-deps/openzeppelin/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../../../eip/interface/IERC20.sol\\\";\\nimport \\\"../../../../../lib/TWAddress.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using TWAddress for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/infra/interface/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/lib/CurrencyTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n// Helper interfaces\\nimport { IWETH } from \\\"../infra/interface/IWETH.sol\\\";\\n\\nimport \\\"../external-deps/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary CurrencyTransferLib {\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev The address interpreted as native token of the chain.\\n    address public constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @dev Transfers a given amount of currency.\\n    function transferCurrency(\\n        address _currency,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        if (_currency == NATIVE_TOKEN) {\\n            safeTransferNativeToken(_to, _amount);\\n        } else {\\n            safeTransferERC20(_currency, _from, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfers a given amount of currency. (With native token wrapping)\\n    function transferCurrencyWithWrapper(\\n        address _currency,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        address _nativeTokenWrapper\\n    ) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        if (_currency == NATIVE_TOKEN) {\\n            if (_from == address(this)) {\\n                // withdraw from weth then transfer withdrawn native token to recipient\\n                IWETH(_nativeTokenWrapper).withdraw(_amount);\\n                safeTransferNativeTokenWithWrapper(_to, _amount, _nativeTokenWrapper);\\n            } else if (_to == address(this)) {\\n                // store native currency in weth\\n                require(_amount == msg.value, \\\"msg.value != amount\\\");\\n                IWETH(_nativeTokenWrapper).deposit{ value: _amount }();\\n            } else {\\n                safeTransferNativeTokenWithWrapper(_to, _amount, _nativeTokenWrapper);\\n            }\\n        } else {\\n            safeTransferERC20(_currency, _from, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer `amount` of ERC20 token from `from` to `to`.\\n    function safeTransferERC20(\\n        address _currency,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_from == _to) {\\n            return;\\n        }\\n\\n        if (_from == address(this)) {\\n            IERC20(_currency).safeTransfer(_to, _amount);\\n        } else {\\n            IERC20(_currency).safeTransferFrom(_from, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfers `amount` of native token to `to`.\\n    function safeTransferNativeToken(address to, uint256 value) internal {\\n        // solhint-disable avoid-low-level-calls\\n        // slither-disable-next-line low-level-calls\\n        (bool success, ) = to.call{ value: value }(\\\"\\\");\\n        require(success, \\\"native token transfer failed\\\");\\n    }\\n\\n    /// @dev Transfers `amount` of native token to `to`. (With native token wrapping)\\n    function safeTransferNativeTokenWithWrapper(\\n        address to,\\n        uint256 value,\\n        address _nativeTokenWrapper\\n    ) internal {\\n        // solhint-disable avoid-low-level-calls\\n        // slither-disable-next-line low-level-calls\\n        (bool success, ) = to.call{ value: value }(\\\"\\\");\\n        if (!success) {\\n            IWETH(_nativeTokenWrapper).deposit{ value: value }();\\n            IERC20(_nativeTokenWrapper).safeTransfer(to, value);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/lib/TWAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary TWAddress {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * [EIP1884](https://eips.ethereum.org/EIPS/eip-1884) increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/lib/TWStrings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary TWStrings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IMarketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\n/// @author thirdweb\\n\\n/**\\n *  @author  thirdweb.com\\n *\\n *  The `DirectListings` extension smart contract lets you buy and sell NFTs (ERC-721 or ERC-1155) for a fixed price.\\n */\\ninterface IDirectListings {\\n    enum TokenType {\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    enum Status {\\n        UNSET,\\n        CREATED,\\n        COMPLETED,\\n        CANCELLED\\n    }\\n\\n    /**\\n     *  @notice The parameters a seller sets when creating or updating a listing.\\n     *\\n     *  @param assetContract The address of the smart contract of the NFTs being listed.\\n     *  @param tokenId The tokenId of the NFTs being listed.\\n     *  @param quantity The quantity of NFTs being listed. This must be non-zero, and is expected to\\n     *                  be `1` for ERC-721 NFTs.\\n     *  @param currency The currency in which the price must be paid when buying the listed NFTs.\\n     *  @param pricePerToken The price to pay per unit of NFTs listed.\\n     *  @param startTimestamp The UNIX timestamp at and after which NFTs can be bought from the listing.\\n     *  @param endTimestamp The UNIX timestamp at and after which NFTs cannot be bought from the listing.\\n     *  @param reserved Whether the listing is reserved to be bought from a specific set of buyers.\\n     */\\n    struct ListingParameters {\\n        address assetContract;\\n        uint256 tokenId;\\n        uint256 quantity;\\n        address currency;\\n        uint256 pricePerToken;\\n        uint128 startTimestamp;\\n        uint128 endTimestamp;\\n        bool reserved;\\n    }\\n\\n    /**\\n     *  @notice The information stored for a listing.\\n     *\\n     *  @param listingId The unique ID of the listing.\\n     *  @param listingCreator The creator of the listing.\\n     *  @param assetContract The address of the smart contract of the NFTs being listed.\\n     *  @param tokenId The tokenId of the NFTs being listed.\\n     *  @param quantity The quantity of NFTs being listed. This must be non-zero, and is expected to\\n     *                  be `1` for ERC-721 NFTs.\\n     *  @param currency The currency in which the price must be paid when buying the listed NFTs.\\n     *  @param pricePerToken The price to pay per unit of NFTs listed.\\n     *  @param startTimestamp The UNIX timestamp at and after which NFTs can be bought from the listing.\\n     *  @param endTimestamp The UNIX timestamp at and after which NFTs cannot be bought from the listing.\\n     *  @param reserved Whether the listing is reserved to be bought from a specific set of buyers.\\n     *  @param status The status of the listing (created, completed, or cancelled).\\n     *  @param tokenType The type of token listed (ERC-721 or ERC-1155)\\n     */\\n    struct Listing {\\n        uint256 listingId;\\n        uint256 tokenId;\\n        uint256 quantity;\\n        uint256 pricePerToken;\\n        uint128 startTimestamp;\\n        uint128 endTimestamp;\\n        address listingCreator;\\n        address assetContract;\\n        address currency;\\n        TokenType tokenType;\\n        Status status;\\n        bool reserved;\\n    }\\n\\n    /// @notice Emitted when a new listing is created.\\n    event NewListing(\\n        address indexed listingCreator,\\n        uint256 indexed listingId,\\n        address indexed assetContract,\\n        Listing listing\\n    );\\n\\n    /// @notice Emitted when a listing is updated.\\n    event UpdatedListing(\\n        address indexed listingCreator,\\n        uint256 indexed listingId,\\n        address indexed assetContract,\\n        Listing listing\\n    );\\n\\n    /// @notice Emitted when a listing is cancelled.\\n    event CancelledListing(address indexed listingCreator, uint256 indexed listingId);\\n\\n    /// @notice Emitted when a buyer is approved to buy from a reserved listing.\\n    event BuyerApprovedForListing(uint256 indexed listingId, address indexed buyer, bool approved);\\n\\n    /// @notice Emitted when a currency is approved as a form of payment for the listing.\\n    event CurrencyApprovedForListing(uint256 indexed listingId, address indexed currency, uint256 pricePerToken);\\n\\n    /// @notice Emitted when NFTs are bought from a listing.\\n    event NewSale(\\n        address indexed listingCreator,\\n        uint256 indexed listingId,\\n        address indexed assetContract,\\n        uint256 tokenId,\\n        address buyer,\\n        uint256 quantityBought,\\n        uint256 totalPricePaid\\n    );\\n\\n    /**\\n     *  @notice List NFTs (ERC721 or ERC1155) for sale at a fixed price.\\n     *\\n     *  @param _params The parameters of a listing a seller sets when creating a listing.\\n     *\\n     *  @return listingId The unique integer ID of the listing.\\n     */\\n    function createListing(ListingParameters memory _params) external returns (uint256 listingId);\\n\\n    /**\\n     *  @notice Update parameters of a listing of NFTs.\\n     *\\n     *  @param _listingId The ID of the listing to update.\\n     *  @param _params The parameters of a listing a seller sets when updating a listing.\\n     */\\n    function updateListing(uint256 _listingId, ListingParameters memory _params) external;\\n\\n    /**\\n     *  @notice Cancel a listing.\\n     *\\n     *  @param _listingId The ID of the listing to cancel.\\n     */\\n    function cancelListing(uint256 _listingId) external;\\n\\n    /**\\n     *  @notice Approve a buyer to buy from a reserved listing.\\n     *\\n     *  @param _listingId The ID of the listing to update.\\n     *  @param _buyer The address of the buyer to approve to buy from the listing.\\n     *  @param _toApprove Whether to approve the buyer to buy from the listing.\\n     */\\n    function approveBuyerForListing(uint256 _listingId, address _buyer, bool _toApprove) external;\\n\\n    /**\\n     *  @notice Approve a currency as a form of payment for the listing.\\n     *\\n     *  @param _listingId The ID of the listing to update.\\n     *  @param _currency The address of the currency to approve as a form of payment for the listing.\\n     *  @param _pricePerTokenInCurrency The price per token for the currency to approve.\\n     */\\n    function approveCurrencyForListing(\\n        uint256 _listingId,\\n        address _currency,\\n        uint256 _pricePerTokenInCurrency\\n    ) external;\\n\\n    /**\\n     *  @notice Buy NFTs from a listing.\\n     *\\n     *  @param _listingId The ID of the listing to update.\\n     *  @param _buyFor The recipient of the NFTs being bought.\\n     *  @param _quantity The quantity of NFTs to buy from the listing.\\n     *  @param _currency The currency to use to pay for NFTs.\\n     *  @param _expectedTotalPrice The expected total price to pay for the NFTs being bought.\\n     */\\n    function buyFromListing(\\n        uint256 _listingId,\\n        address _buyFor,\\n        uint256 _quantity,\\n        address _currency,\\n        uint256 _expectedTotalPrice\\n    ) external payable;\\n\\n    /**\\n     *  @notice Returns the total number of listings created.\\n     *  @dev At any point, the return value is the ID of the next listing created.\\n     */\\n    function totalListings() external view returns (uint256);\\n\\n    /// @notice Returns all listings between the start and end Id (both inclusive) provided.\\n    function getAllListings(uint256 _startId, uint256 _endId) external view returns (Listing[] memory listings);\\n\\n    /**\\n     *  @notice Returns all valid listings between the start and end Id (both inclusive) provided.\\n     *          A valid listing is where the listing creator still owns and has approved Marketplace\\n     *          to transfer the listed NFTs.\\n     */\\n    function getAllValidListings(uint256 _startId, uint256 _endId) external view returns (Listing[] memory listings);\\n\\n    /**\\n     *  @notice Returns a listing at the provided listing ID.\\n     *\\n     *  @param _listingId The ID of the listing to fetch.\\n     */\\n    function getListing(uint256 _listingId) external view returns (Listing memory listing);\\n}\\n\\n/**\\n *  The `EnglishAuctions` extension smart contract lets you sell NFTs (ERC-721 or ERC-1155) in an english auction.\\n */\\n\\ninterface IEnglishAuctions {\\n    enum TokenType {\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    enum Status {\\n        UNSET,\\n        CREATED,\\n        COMPLETED,\\n        CANCELLED\\n    }\\n\\n    /**\\n     *  @notice The parameters a seller sets when creating an auction listing.\\n     *\\n     *  @param assetContract The address of the smart contract of the NFTs being auctioned.\\n     *  @param tokenId The tokenId of the NFTs being auctioned.\\n     *  @param quantity The quantity of NFTs being auctioned. This must be non-zero, and is expected to\\n     *                  be `1` for ERC-721 NFTs.\\n     *  @param currency The currency in which the bid must be made when bidding for the auctioned NFTs.\\n     *  @param minimumBidAmount The minimum bid amount for the auction.\\n     *  @param buyoutBidAmount The total bid amount for which the bidder can directly purchase the auctioned items and close the auction as a result.\\n     *  @param timeBufferInSeconds This is a buffer e.g. x seconds. If a new winning bid is made less than x seconds before expirationTimestamp, the\\n     *                             expirationTimestamp is increased by x seconds.\\n     *  @param bidBufferBps This is a buffer in basis points e.g. x%. To be considered as a new winning bid, a bid must be at least x% greater than\\n     *                      the current winning bid.\\n     *  @param startTimestamp The timestamp at and after which bids can be made to the auction\\n     *  @param endTimestamp The timestamp at and after which bids cannot be made to the auction.\\n     */\\n    struct AuctionParameters {\\n        address assetContract;\\n        uint256 tokenId;\\n        uint256 quantity;\\n        address currency;\\n        uint256 minimumBidAmount;\\n        uint256 buyoutBidAmount;\\n        uint64 timeBufferInSeconds;\\n        uint64 bidBufferBps;\\n        uint64 startTimestamp;\\n        uint64 endTimestamp;\\n    }\\n\\n    /**\\n     *  @notice The information stored for an auction.\\n     *\\n     *  @param auctionId The unique ID of the auction.\\n     *  @param auctionCreator The creator of the auction.\\n     *  @param assetContract The address of the smart contract of the NFTs being auctioned.\\n     *  @param tokenId The tokenId of the NFTs being auctioned.\\n     *  @param quantity The quantity of NFTs being auctioned. This must be non-zero, and is expected to\\n     *                  be `1` for ERC-721 NFTs.\\n     *  @param currency The currency in which the bid must be made when bidding for the auctioned NFTs.\\n     *  @param minimumBidAmount The minimum bid amount for the auction.\\n     *  @param buyoutBidAmount The total bid amount for which the bidder can directly purchase the auctioned items and close the auction as a result.\\n     *  @param timeBufferInSeconds This is a buffer e.g. x seconds. If a new winning bid is made less than x seconds before expirationTimestamp, the\\n     *                             expirationTimestamp is increased by x seconds.\\n     *  @param bidBufferBps This is a buffer in basis points e.g. x%. To be considered as a new winning bid, a bid must be at least x% greater than\\n     *                      the current winning bid.\\n     *  @param startTimestamp The timestamp at and after which bids can be made to the auction\\n     *  @param endTimestamp The timestamp at and after which bids cannot be made to the auction.\\n     *  @param status The status of the auction (created, completed, or cancelled).\\n     *  @param tokenType The type of NFTs auctioned (ERC-721 or ERC-1155)\\n     */\\n    struct Auction {\\n        uint256 auctionId;\\n        uint256 tokenId;\\n        uint256 quantity;\\n        uint256 minimumBidAmount;\\n        uint256 buyoutBidAmount;\\n        uint64 timeBufferInSeconds;\\n        uint64 bidBufferBps;\\n        uint64 startTimestamp;\\n        uint64 endTimestamp;\\n        address auctionCreator;\\n        address assetContract;\\n        address currency;\\n        TokenType tokenType;\\n        Status status;\\n    }\\n\\n    /**\\n     *  @notice The information stored for a bid made in an auction.\\n     *\\n     *  @param auctionId The unique ID of the auction.\\n     *  @param bidder The address of the bidder.\\n     *  @param bidAmount The total bid amount (in the currency specified by the auction).\\n     */\\n    struct Bid {\\n        uint256 auctionId;\\n        address bidder;\\n        uint256 bidAmount;\\n    }\\n\\n    struct AuctionPayoutStatus {\\n        bool paidOutAuctionTokens;\\n        bool paidOutBidAmount;\\n    }\\n\\n    /// @dev Emitted when a new auction is created.\\n    event NewAuction(\\n        address indexed auctionCreator,\\n        uint256 indexed auctionId,\\n        address indexed assetContract,\\n        Auction auction\\n    );\\n\\n    /// @dev Emitted when a new bid is made in an auction.\\n    event NewBid(\\n        uint256 indexed auctionId,\\n        address indexed bidder,\\n        address indexed assetContract,\\n        uint256 bidAmount,\\n        Auction auction\\n    );\\n\\n    /// @notice Emitted when a auction is cancelled.\\n    event CancelledAuction(address indexed auctionCreator, uint256 indexed auctionId);\\n\\n    /// @dev Emitted when an auction is closed.\\n    event AuctionClosed(\\n        uint256 indexed auctionId,\\n        address indexed assetContract,\\n        address indexed closer,\\n        uint256 tokenId,\\n        address auctionCreator,\\n        address winningBidder\\n    );\\n\\n    /**\\n     *  @notice Put up NFTs (ERC721 or ERC1155) for an english auction.\\n     *\\n     *  @param _params The parameters of an auction a seller sets when creating an auction.\\n     *\\n     *  @return auctionId The unique integer ID of the auction.\\n     */\\n    function createAuction(AuctionParameters memory _params) external returns (uint256 auctionId);\\n\\n    /**\\n     *  @notice Cancel an auction.\\n     *\\n     *  @param _auctionId The ID of the auction to cancel.\\n     */\\n    function cancelAuction(uint256 _auctionId) external;\\n\\n    /**\\n     *  @notice Distribute the winning bid amount to the auction creator.\\n     *\\n     *  @param _auctionId The ID of an auction.\\n     */\\n    function collectAuctionPayout(uint256 _auctionId) external;\\n\\n    /**\\n     *  @notice Distribute the auctioned NFTs to the winning bidder.\\n     *\\n     *  @param _auctionId The ID of an auction.\\n     */\\n    function collectAuctionTokens(uint256 _auctionId) external;\\n\\n    /**\\n     *  @notice Bid in an active auction.\\n     *\\n     *  @param _auctionId The ID of the auction to bid in.\\n     *  @param _bidAmount The bid amount in the currency specified by the auction.\\n     */\\n    function bidInAuction(uint256 _auctionId, uint256 _bidAmount) external payable;\\n\\n    /**\\n     *  @notice Returns whether a given bid amount would make for a winning bid in an auction.\\n     *\\n     *  @param _auctionId The ID of an auction.\\n     *  @param _bidAmount The bid amount to check.\\n     */\\n    function isNewWinningBid(uint256 _auctionId, uint256 _bidAmount) external view returns (bool);\\n\\n    /// @notice Returns the auction of the provided auction ID.\\n    function getAuction(uint256 _auctionId) external view returns (Auction memory auction);\\n\\n    /// @notice Returns all non-cancelled auctions.\\n    function getAllAuctions(uint256 _startId, uint256 _endId) external view returns (Auction[] memory auctions);\\n\\n    /// @notice Returns all active auctions.\\n    function getAllValidAuctions(uint256 _startId, uint256 _endId) external view returns (Auction[] memory auctions);\\n\\n    /// @notice Returns the winning bid of an active auction.\\n    function getWinningBid(\\n        uint256 _auctionId\\n    ) external view returns (address bidder, address currency, uint256 bidAmount);\\n\\n    /// @notice Returns whether an auction is active.\\n    function isAuctionExpired(uint256 _auctionId) external view returns (bool);\\n}\\n\\n/**\\n *  The `Offers` extension smart contract lets you make and accept offers made for NFTs (ERC-721 or ERC-1155).\\n */\\n\\ninterface IOffers {\\n    enum TokenType {\\n        ERC721,\\n        ERC1155,\\n        ERC20\\n    }\\n\\n    enum Status {\\n        UNSET,\\n        CREATED,\\n        COMPLETED,\\n        CANCELLED\\n    }\\n\\n    /**\\n     *  @notice The parameters an offeror sets when making an offer for NFTs.\\n     *\\n     *  @param assetContract The contract of the NFTs for which the offer is being made.\\n     *  @param tokenId The tokenId of the NFT for which the offer is being made.\\n     *  @param quantity The quantity of NFTs wanted.\\n     *  @param currency The currency offered for the NFTs.\\n     *  @param totalPrice The total offer amount for the NFTs.\\n     *  @param expirationTimestamp The timestamp at and after which the offer cannot be accepted.\\n     */\\n    struct OfferParams {\\n        address assetContract;\\n        uint256 tokenId;\\n        uint256 quantity;\\n        address currency;\\n        uint256 totalPrice;\\n        uint256 expirationTimestamp;\\n    }\\n\\n    /**\\n     *  @notice The information stored for the offer made.\\n     *\\n     *  @param offerId The ID of the offer.\\n     *  @param offeror The address of the offeror.\\n     *  @param assetContract The contract of the NFTs for which the offer is being made.\\n     *  @param tokenId The tokenId of the NFT for which the offer is being made.\\n     *  @param quantity The quantity of NFTs wanted.\\n     *  @param currency The currency offered for the NFTs.\\n     *  @param totalPrice The total offer amount for the NFTs.\\n     *  @param expirationTimestamp The timestamp at and after which the offer cannot be accepted.\\n     *  @param status The status of the offer (created, completed, or cancelled).\\n     *  @param tokenType The type of token (ERC-721 or ERC-1155) the offer is made for.\\n     */\\n    struct Offer {\\n        uint256 offerId;\\n        uint256 tokenId;\\n        uint256 quantity;\\n        uint256 totalPrice;\\n        uint256 expirationTimestamp;\\n        address offeror;\\n        address assetContract;\\n        address currency;\\n        TokenType tokenType;\\n        Status status;\\n    }\\n\\n    /// @dev Emitted when a new offer is created.\\n    event NewOffer(address indexed offeror, uint256 indexed offerId, address indexed assetContract, Offer offer);\\n\\n    /// @dev Emitted when an offer is cancelled.\\n    event CancelledOffer(address indexed offeror, uint256 indexed offerId);\\n\\n    /// @dev Emitted when an offer is accepted.\\n    event AcceptedOffer(\\n        address indexed offeror,\\n        uint256 indexed offerId,\\n        address indexed assetContract,\\n        uint256 tokenId,\\n        address seller,\\n        uint256 quantityBought,\\n        uint256 totalPricePaid\\n    );\\n\\n    /**\\n     *  @notice Make an offer for NFTs (ERC-721 or ERC-1155)\\n     *\\n     *  @param _params The parameters of an offer.\\n     *\\n     *  @return offerId The unique integer ID assigned to the offer.\\n     */\\n    function makeOffer(OfferParams memory _params) external returns (uint256 offerId);\\n\\n    /**\\n     *  @notice Cancel an offer.\\n     *\\n     *  @param _offerId The ID of the offer to cancel.\\n     */\\n    function cancelOffer(uint256 _offerId) external;\\n\\n    /**\\n     *  @notice Accept an offer.\\n     *\\n     *  @param _offerId The ID of the offer to accept.\\n     */\\n    function acceptOffer(uint256 _offerId) external;\\n\\n    /// @notice Returns an offer for the given offer ID.\\n    function getOffer(uint256 _offerId) external view returns (Offer memory offer);\\n\\n    /// @notice Returns all active (i.e. non-expired or cancelled) offers.\\n    function getAllOffers(uint256 _startId, uint256 _endId) external view returns (Offer[] memory offers);\\n\\n    /// @notice Returns all valid offers. An offer is valid if the offeror owns and has approved Marketplace to transfer the offer amount of currency.\\n    function getAllValidOffers(uint256 _startId, uint256 _endId) external view returns (Offer[] memory offers);\\n}\"\r\n    },\r\n    \"contracts/IPlatformFee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `PlatformFee` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *  the recipient of platform fee and the platform fee basis points, and lets the inheriting contract perform conditional logic\\n *  that uses information about platform fees, if desired.\\n */\\n\\ninterface IPlatformFee {\\n    /// @dev Fee type variants: percentage fee and flat fee\\n    enum PlatformFeeType {\\n        Bps,\\n        Flat\\n    }\\n\\n    /// @dev Returns the platform fee bps and recipient.\\n    function getPlatformFeeInfo(address _currency) external view returns (address, uint16);\\n\\n    /// @dev Lets a module admin update the fees on primary sales.\\n    function setPlatformFeeInfo(address _platformFeeRecipient, uint256 _platformFeeBps, address _discountCurrency, uint256 _discountBps) external;\\n\\n    /// @dev Emitted when fee on primary sales is updated.\\n    event PlatformFeeInfoUpdated(address indexed platformFeeRecipient, uint256 platformFeeBps, address indexed discountCurrency, uint256 discountBps);\\n\\n    /// @dev Emitted when the flat platform fee is updated.\\n    event FlatPlatformFeeUpdated(address platformFeeRecipient, uint256 flatFee);\\n\\n    /// @dev Emitted when the platform fee type is updated.\\n    event PlatformFeeTypeUpdated(PlatformFeeType feeType);\\n}\"\r\n    },\r\n    \"contracts/offers/OffersLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\n/// @author thirdweb\\n\\nimport \\\"./OffersStorage.sol\\\";\\n\\n// ====== External imports ======\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@thirdweb-dev/contracts/eip/interface/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\n\\n// ====== Internal imports ======\\n\\nimport \\\"../IPlatformFee.sol\\\";\\nimport \\\"@thirdweb-dev/contracts/extension/upgradeable/ERC2771ContextConsumer.sol\\\";\\nimport \\\"@thirdweb-dev/contracts/extension/upgradeable/ReentrancyGuard.sol\\\";\\nimport \\\"@thirdweb-dev/contracts/extension/upgradeable/PermissionsEnumerable.sol\\\";\\nimport { RoyaltyPaymentsLogic } from \\\"@thirdweb-dev/contracts/extension/upgradeable/RoyaltyPayments.sol\\\";\\nimport { CurrencyTransferLib } from \\\"@thirdweb-dev/contracts/lib/CurrencyTransferLib.sol\\\";\\n\\n/**\\n * @author  thirdweb.com\\n */\\ncontract OffersLogic is IOffers, ReentrancyGuard, ERC2771ContextConsumer {\\n    /*///////////////////////////////////////////////////////////////\\n                        Constants / Immutables\\n    //////////////////////////////////////////////////////////////*/\\n    /// @dev Can create offer for only assets from NFT contracts with asset role, when offers are restricted by asset address.\\n    bytes32 private constant ASSET_ROLE = keccak256(\\\"ASSET_ROLE\\\");\\n\\n    /// @dev The max bps of the contract. So, 10_000 == 100 %\\n    uint64 private constant MAX_BPS = 10_000;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              Modifiers\\n    //////////////////////////////////////////////////////////////*/\\n\\n    modifier onlyAssetRole(address _asset) {\\n        require(Permissions(address(this)).hasRoleWithSwitch(ASSET_ROLE, _asset), \\\"!ASSET_ROLE\\\");\\n        _;\\n    }\\n\\n    /// @dev Checks whether caller is a offer creator.\\n    modifier onlyOfferor(uint256 _offerId) {\\n        require(_offersStorage().offers[_offerId].offeror == _msgSender(), \\\"!Offeror\\\");\\n        _;\\n    }\\n\\n    /// @dev Checks whether an auction exists.\\n    modifier onlyExistingOffer(uint256 _offerId) {\\n        require(_offersStorage().offers[_offerId].status == IOffers.Status.CREATED, \\\"Marketplace: invalid offer.\\\");\\n        _;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Constructor logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor() {}\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            External functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function makeOffer(\\n        OfferParams memory _params\\n    ) external onlyAssetRole(_params.assetContract) returns (uint256 _offerId) {\\n        _offerId = _getNextOfferId();\\n        address _offeror = _msgSender();\\n        TokenType _tokenType = _getTokenType(_params.assetContract);\\n\\n        _validateNewOffer(_params, _tokenType);\\n\\n        Offer memory _offer = Offer({\\n            offerId: _offerId,\\n            offeror: _offeror,\\n            assetContract: _params.assetContract,\\n            tokenId: _params.tokenId,\\n            tokenType: _tokenType,\\n            quantity: _params.quantity,\\n            currency: _params.currency,\\n            totalPrice: _params.totalPrice,\\n            expirationTimestamp: _params.expirationTimestamp,\\n            status: IOffers.Status.CREATED\\n        });\\n\\n        _offersStorage().offers[_offerId] = _offer;\\n\\n        emit NewOffer(_offeror, _offerId, _params.assetContract, _offer);\\n    }\\n\\n    function cancelOffer(uint256 _offerId) external onlyExistingOffer(_offerId) onlyOfferor(_offerId) {\\n        _offersStorage().offers[_offerId].status = IOffers.Status.CANCELLED;\\n\\n        emit CancelledOffer(_msgSender(), _offerId);\\n    }\\n\\n    function acceptOffer(uint256 _offerId) external nonReentrant onlyExistingOffer(_offerId) {\\n        Offer memory _targetOffer = _offersStorage().offers[_offerId];\\n\\n        require(_targetOffer.expirationTimestamp > block.timestamp, \\\"EXPIRED\\\");\\n\\n        require(\\n            _validateERC20BalAndAllowance(_targetOffer.offeror, _targetOffer.currency, _targetOffer.totalPrice),\\n            \\\"Marketplace: insufficient currency balance.\\\"\\n        );\\n\\n        _validateOwnershipAndApproval(\\n            _msgSender(),\\n            _targetOffer.assetContract,\\n            _targetOffer.tokenId,\\n            _targetOffer.quantity,\\n            _targetOffer.tokenType\\n        );\\n\\n        _offersStorage().offers[_offerId].status = IOffers.Status.COMPLETED;\\n\\n        _payout(_targetOffer.offeror, _msgSender(), _targetOffer.currency, _targetOffer.totalPrice, _targetOffer);\\n        _transferOfferTokens(_msgSender(), _targetOffer.offeror, _targetOffer.quantity, _targetOffer);\\n\\n        emit AcceptedOffer(\\n            _targetOffer.offeror,\\n            _targetOffer.offerId,\\n            _targetOffer.assetContract,\\n            _targetOffer.tokenId,\\n            _msgSender(),\\n            _targetOffer.quantity,\\n            _targetOffer.totalPrice\\n        );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            View functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Returns total number of offers\\n    function totalOffers() public view returns (uint256) {\\n        return _offersStorage().totalOffers;\\n    }\\n\\n    /// @dev Returns existing offer with the given uid.\\n    function getOffer(uint256 _offerId) external view returns (Offer memory _offer) {\\n        _offer = _offersStorage().offers[_offerId];\\n    }\\n\\n    /// @dev Returns all existing offers within the specified range.\\n    function getAllOffers(uint256 _startId, uint256 _endId) external view returns (Offer[] memory _allOffers) {\\n        require(_startId <= _endId && _endId < _offersStorage().totalOffers, \\\"invalid range\\\");\\n\\n        _allOffers = new Offer[](_endId - _startId + 1);\\n\\n        for (uint256 i = _startId; i <= _endId; i += 1) {\\n            _allOffers[i - _startId] = _offersStorage().offers[i];\\n        }\\n    }\\n\\n    /// @dev Returns offers within the specified range, where offeror has sufficient balance.\\n    function getAllValidOffers(uint256 _startId, uint256 _endId) external view returns (Offer[] memory _validOffers) {\\n        require(_startId <= _endId && _endId < _offersStorage().totalOffers, \\\"invalid range\\\");\\n\\n        Offer[] memory _offers = new Offer[](_endId - _startId + 1);\\n        uint256 _offerCount;\\n\\n        for (uint256 i = _startId; i <= _endId; i += 1) {\\n            uint256 j = i - _startId;\\n            _offers[j] = _offersStorage().offers[i];\\n            if (_validateExistingOffer(_offers[j])) {\\n                _offerCount += 1;\\n            }\\n        }\\n\\n        _validOffers = new Offer[](_offerCount);\\n        uint256 index = 0;\\n        uint256 count = _offers.length;\\n        for (uint256 i = 0; i < count; i += 1) {\\n            if (_validateExistingOffer(_offers[i])) {\\n                _validOffers[index++] = _offers[i];\\n            }\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Internal functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Returns the next offer Id.\\n    function _getNextOfferId() internal returns (uint256 id) {\\n        id = _offersStorage().totalOffers;\\n        _offersStorage().totalOffers += 1;\\n    }\\n\\n    /// @dev Returns the interface supported by a contract.\\n    function _getTokenType(address _assetContract) internal view returns (TokenType tokenType) {\\n        if (IERC165(_assetContract).supportsInterface(type(IERC1155).interfaceId)) {\\n            tokenType = TokenType.ERC1155;\\n        } else if (IERC165(_assetContract).supportsInterface(type(IERC721).interfaceId)) {\\n            tokenType = TokenType.ERC721;\\n        } else {\\n            revert(\\\"Marketplace: token must be ERC1155 or ERC721.\\\");\\n        }\\n    }\\n\\n    /// @dev Checks whether the auction creator owns and has approved marketplace to transfer auctioned tokens.\\n    function _validateNewOffer(OfferParams memory _params, TokenType _tokenType) internal view {\\n        require(_params.totalPrice > 0, \\\"zero price.\\\");\\n        require(_params.quantity > 0, \\\"Marketplace: wanted zero tokens.\\\");\\n        require(_params.quantity == 1 || _tokenType == TokenType.ERC1155, \\\"Marketplace: wanted invalid quantity.\\\");\\n        require(\\n            _params.expirationTimestamp + 60 minutes > block.timestamp,\\n            \\\"Marketplace: invalid expiration timestamp.\\\"\\n        );\\n\\n        require(\\n            _validateERC20BalAndAllowance(_msgSender(), _params.currency, _params.totalPrice),\\n            \\\"Marketplace: insufficient currency balance.\\\"\\n        );\\n    }\\n\\n    /// @dev Checks whether the offer exists, is active, and if the offeror has sufficient balance.\\n    function _validateExistingOffer(Offer memory _targetOffer) internal view returns (bool isValid) {\\n        isValid =\\n            _targetOffer.expirationTimestamp > block.timestamp &&\\n            _targetOffer.status == IOffers.Status.CREATED &&\\n            _validateERC20BalAndAllowance(_targetOffer.offeror, _targetOffer.currency, _targetOffer.totalPrice);\\n    }\\n\\n    /// @dev Validates that `_tokenOwner` owns and has approved Marketplace to transfer NFTs.\\n    function _validateOwnershipAndApproval(\\n        address _tokenOwner,\\n        address _assetContract,\\n        uint256 _tokenId,\\n        uint256 _quantity,\\n        TokenType _tokenType\\n    ) internal view {\\n        address market = address(this);\\n        bool isValid;\\n\\n        if (_tokenType == TokenType.ERC1155) {\\n            isValid =\\n                IERC1155(_assetContract).balanceOf(_tokenOwner, _tokenId) >= _quantity &&\\n                IERC1155(_assetContract).isApprovedForAll(_tokenOwner, market);\\n        } else if (_tokenType == TokenType.ERC721) {\\n            isValid =\\n                IERC721(_assetContract).ownerOf(_tokenId) == _tokenOwner &&\\n                (IERC721(_assetContract).getApproved(_tokenId) == market ||\\n                    IERC721(_assetContract).isApprovedForAll(_tokenOwner, market));\\n        }\\n\\n        require(isValid, \\\"Marketplace: not owner or approved tokens.\\\");\\n    }\\n\\n    /// @dev Validates that `_tokenOwner` owns and has approved Markeplace to transfer the appropriate amount of currency\\n    function _validateERC20BalAndAllowance(\\n        address _tokenOwner,\\n        address _currency,\\n        uint256 _amount\\n    ) internal view returns (bool isValid) {\\n        isValid =\\n            IERC20(_currency).balanceOf(_tokenOwner) >= _amount &&\\n            IERC20(_currency).allowance(_tokenOwner, address(this)) >= _amount;\\n    }\\n\\n    /// @dev Transfers tokens.\\n    function _transferOfferTokens(address _from, address _to, uint256 _quantity, Offer memory _offer) internal {\\n        if (_offer.tokenType == TokenType.ERC1155) {\\n            IERC1155(_offer.assetContract).safeTransferFrom(_from, _to, _offer.tokenId, _quantity, \\\"\\\");\\n        } else if (_offer.tokenType == TokenType.ERC721) {\\n            IERC721(_offer.assetContract).safeTransferFrom(_from, _to, _offer.tokenId, \\\"\\\");\\n        }\\n    }\\n\\n    /// @dev Pays out stakeholders in a sale.\\n    function _payout(\\n        address _payer,\\n        address _payee,\\n        address _currencyToUse,\\n        uint256 _totalPayoutAmount,\\n        Offer memory _offer\\n    ) internal {\\n        uint256 amountRemaining;\\n\\n        // Payout platform fee\\n        {\\n            (address platformFeeRecipient, uint16 platformFeeBps) = IPlatformFee(address(this)).getPlatformFeeInfo(\\n                _currencyToUse\\n            );\\n            uint256 platformFeeCut = (_totalPayoutAmount * platformFeeBps) / MAX_BPS;\\n\\n            // Transfer platform fee\\n            CurrencyTransferLib.transferCurrencyWithWrapper(\\n                _currencyToUse,\\n                _payer,\\n                platformFeeRecipient,\\n                platformFeeCut,\\n                address(0)\\n            );\\n\\n            amountRemaining = _totalPayoutAmount - platformFeeCut;\\n        }\\n\\n        // Payout royalties\\n        {\\n            // Get royalty recipients and amounts\\n            (address payable[] memory recipients, uint256[] memory amounts) = RoyaltyPaymentsLogic(address(this))\\n                .getRoyalty(_offer.assetContract, _offer.tokenId, _totalPayoutAmount);\\n\\n            uint256 royaltyRecipientCount = recipients.length;\\n\\n            if (royaltyRecipientCount != 0) {\\n                uint256 royaltyCut;\\n                address royaltyRecipient;\\n\\n                for (uint256 i = 0; i < royaltyRecipientCount; ) {\\n                    royaltyRecipient = recipients[i];\\n                    royaltyCut = amounts[i];\\n\\n                    // Check payout amount remaining is enough to cover royalty payment\\n                    require(amountRemaining >= royaltyCut, \\\"fees exceed the price\\\");\\n\\n                    // Transfer royalty\\n                    CurrencyTransferLib.transferCurrencyWithWrapper(\\n                        _currencyToUse,\\n                        _payer,\\n                        royaltyRecipient,\\n                        royaltyCut,\\n                        address(0)\\n                    );\\n\\n                    unchecked {\\n                        amountRemaining -= royaltyCut;\\n                        ++i;\\n                    }\\n                }\\n            }\\n        }\\n\\n        // Distribute price to token owner\\n        CurrencyTransferLib.transferCurrencyWithWrapper(_currencyToUse, _payer, _payee, amountRemaining, address(0));\\n    }\\n\\n    /// @dev Returns the Offers storage.\\n    function _offersStorage() internal pure returns (OffersStorage.Data storage data) {\\n        data = OffersStorage.data();\\n    }\\n}\"\r\n    },\r\n    \"contracts/offers/OffersStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\n/// @author thirdweb\\n\\nimport { IOffers } from \\\"../IMarketplace.sol\\\";\\n\\n/**\\n * @author  thirdweb.com\\n */\\nlibrary OffersStorage {\\n    /// @custom:storage-location erc7201:offers.storage\\n    /// @dev keccak256(abi.encode(uint256(keccak256(\\\"offers.storage\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 public constant OFFERS_STORAGE_POSITION =\\n        0x8f8effea55e8d961f30e12024b944289ed8a7f60abcf4b3989df2dc98a914300;\\n\\n    struct Data {\\n        uint256 totalOffers;\\n        mapping(uint256 => IOffers.Offer) offers;\\n    }\\n\\n    function data() internal pure returns (Data storage data_) {\\n        bytes32 position = OFFERS_STORAGE_POSITION;\\n        assembly {\\n            data_.slot := position\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"offeror\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPricePaid\",\"type\":\"uint256\"}],\"name\":\"AcceptedOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"offeror\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"CancelledOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"offeror\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"offeror\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"enum IOffers.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"enum IOffers.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IOffers.Offer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"name\":\"NewOffer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_msgData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_msgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"acceptOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endId\",\"type\":\"uint256\"}],\"name\":\"getAllOffers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"offeror\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"enum IOffers.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"enum IOffers.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IOffers.Offer[]\",\"name\":\"_allOffers\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endId\",\"type\":\"uint256\"}],\"name\":\"getAllValidOffers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"offeror\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"enum IOffers.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"enum IOffers.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IOffers.Offer[]\",\"name\":\"_validOffers\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"getOffer\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"offeror\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"enum IOffers.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"enum IOffers.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IOffers.Offer\",\"name\":\"_offer\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IOffers.OfferParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"makeOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOffers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OffersLogic", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}