{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBondedToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBondedToken {\\n    function lock(\\n        uint256 tokenId,\\n        address[] memory tokens,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    function merge(uint256 tokenIdA, uint256 tokenIdB) external;\\n\\n    function addBoostedBalance(uint256 tokenId, uint256 amount) external;\\n\\n    function getLockedOf(uint256 tokenId, address[] memory tokens)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function boostedBalance(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function mintAndLock(\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        address to\\n    ) external returns (uint256 tokenId);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMuonNodeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IMuonNodeManager {\\n    struct Node {\\n        uint64 id; // incremental ID\\n        address nodeAddress; // will be used on the node\\n        address stakerAddress;\\n        string peerId; // p2p peer ID\\n        bool active;\\n        uint8 tier;\\n        uint64[] roles;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 lastEditTime;\\n    }\\n\\n    function addNode(\\n        address _nodeAddress,\\n        address _stakerAddress,\\n        string calldata _peerId,\\n        bool _active\\n    ) external;\\n\\n    function deactiveNode(uint64 nodeId) external;\\n\\n    function stakerAddressInfo(\\n        address _addr\\n    ) external view returns (Node memory node);\\n\\n    function setTier(uint64 nodeId, uint8 tier) external;\\n}\\n\"\r\n    },\r\n    \"contracts/MuonNodeStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./utils/MuonClientBase.sol\\\";\\nimport \\\"./utils/SchnorrSECP256K1VerifierV2.sol\\\";\\nimport \\\"./interfaces/IMuonNodeManager.sol\\\";\\nimport \\\"./interfaces/IBondedToken.sol\\\";\\n\\ncontract MuonNodeStaking is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    MuonClientBase\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    struct User {\\n        uint256 balance;\\n        uint256 paidReward;\\n        uint256 paidRewardPerToken;\\n        uint256 pendingRewards;\\n        uint256 tokenId;\\n    }\\n\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n    bytes32 public constant REWARD_ROLE = keccak256(\\\"REWARD_ROLE\\\");\\n\\n    uint256 public totalStaked;\\n\\n    uint256 public notPaidRewards;\\n\\n    uint256 public exitPendingPeriod;\\n\\n    uint256 public minStakeAmount;\\n\\n    uint256 public periodFinish;\\n\\n    uint256 public rewardRate;\\n\\n    uint256 public lastUpdateTime;\\n\\n    uint256 public rewardPerTokenStored;\\n\\n    mapping(address => User) public users;\\n\\n    IMuonNodeManager public nodeManager;\\n\\n    IERC20Upgradeable public muonToken;\\n\\n    // stakerAddress => bool\\n    mapping(address => bool) public lockedStakes;\\n\\n    // address public vePion;\\n    IBondedToken public bondedToken;\\n\\n    // token address => index + 1\\n    mapping(address => uint16) public isStakingToken;\\n\\n    address[] public stakingTokens;\\n\\n    // token => multiplier * 1e18\\n    mapping(address => uint256) public stakingTokensMultiplier;\\n\\n    // tier => maxStakeAmount\\n    mapping(uint8 => uint256) public tiersMaxStakeAmount;\\n\\n    // function name => paused\\n    mapping(string => bool) public functionPauseStatus;\\n\\n    SchnorrSECP256K1VerifierV2 public verifier;\\n\\n\\n    uint256 public rewardPeriod;\\n\\n    // ======== Events ========\\n    event Staked(address indexed stakerAddress, uint256 amount);\\n    event Withdrawn(address indexed stakerAddress, uint256 tokenId);\\n    event RewardGot(bytes reqId, address indexed stakerAddress, uint256 amount);\\n    event ExitRequested(address indexed stakerAddress);\\n    event MuonNodeAdded(\\n        address indexed nodeAddress,\\n        address indexed stakerAddress,\\n        string peerId\\n    );\\n    event RewardsDistributed(\\n        uint256 reward,\\n        uint256 indexed periodStart,\\n        uint256 _rewardPeriod\\n    );\\n    event ExitPendingPeriodUpdated(uint256 exitPendingPeriod);\\n    event MinStakeAmountUpdated(uint256 minStakeAmount);\\n    event MuonAppIdUpdated(uint256 muonAppId);\\n    event MuonPublicKeyUpdated(PublicKey muonPublicKey);\\n    event StakeLockStatusChanged(address indexed stakerAddress, bool locked);\\n    event StakingTokenUpdated(address indexed token, uint256 multiplier);\\n    event TierMaxStakeUpdated(uint8 indexed tier, uint256 maxStakeAmount);\\n    event FunctionPauseStatusChanged(\\n        string indexed functionName,\\n        bool isPaused\\n    );\\n    event VerifierUpdated(address verifierAddress);\\n\\n    // ======== Modifiers ========\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenFunctionNotPaused(string memory functionName) {\\n        require(!functionPauseStatus[functionName], \\\"Function is paused.\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that updates the reward parameters\\n     * before all of the functions that can change the rewards.\\n     *\\n     * `stakerAddress` should be address(0) when new rewards are distributing.\\n     */\\n    modifier updateReward(address stakerAddress) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (stakerAddress != address(0)) {\\n            users[stakerAddress].pendingRewards = earned(stakerAddress);\\n            users[stakerAddress].paidRewardPerToken = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract.\\n     * @param _muonTokenAddress The address of the Muon token.\\n     * @param _nodeManagerAddress The address of the Muon Node Manager contract.\\n     * @param _muonAppId The Muon app ID.\\n     * @param _muonPublicKey The Muon public key.\\n     * @param _bondedTokenAddress The address of the BondedToken contract.\\n     */\\n    function initialize(\\n        address _muonTokenAddress,\\n        address _nodeManagerAddress,\\n        uint256 _muonAppId,\\n        PublicKey memory _muonPublicKey,\\n        address _bondedTokenAddress\\n    ) external initializer {\\n        __MuonNodeStakingUpgradeable_init(\\n            _muonTokenAddress,\\n            _nodeManagerAddress,\\n            _muonAppId,\\n            _muonPublicKey,\\n            _bondedTokenAddress\\n        );\\n    }\\n\\n    function __MuonNodeStakingUpgradeable_init(\\n        address _muonTokenAddress,\\n        address _nodeManagerAddress,\\n        uint256 _muonAppId,\\n        PublicKey memory _muonPublicKey,\\n        address _bondedTokenAddress\\n    ) internal initializer {\\n        __AccessControl_init();\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(DAO_ROLE, msg.sender);\\n\\n        muonToken = IERC20Upgradeable(_muonTokenAddress);\\n        nodeManager = IMuonNodeManager(_nodeManagerAddress);\\n        bondedToken = IBondedToken(_bondedTokenAddress);\\n\\n        exitPendingPeriod = 7 days;\\n        minStakeAmount = 500 ether;\\n\\n        rewardPeriod = 7 days;\\n\\n        validatePubKey(_muonPublicKey.x);\\n        muonPublicKey = _muonPublicKey;\\n        muonAppId = _muonAppId;\\n    }\\n\\n    function __MuonNodeStakingUpgradeable_init_unchained()\\n        internal\\n        initializer\\n    {}\\n\\n    /**\\n     * @dev Updates the list of staking tokens and their multipliers.\\n     * Only callable by the DAO_ROLE.\\n     * @param tokens The array of staking token addresses.\\n     * @param multipliers The array of corresponding multipliers for each token.\\n     */\\n    function updateStakingTokens(\\n        address[] calldata tokens,\\n        uint256[] calldata multipliers\\n    ) external onlyRole(DAO_ROLE) {\\n        uint256 tokensLength = tokens.length;\\n\\n        require(tokensLength == multipliers.length, \\\"Arrays length mismatch.\\\");\\n\\n        for (uint256 i = 0; i < tokensLength; i++) {\\n            address token = tokens[i];\\n            uint256 multiplier = multipliers[i];\\n\\n            if (isStakingToken[token] > 0) {\\n                if (multiplier == 0) {\\n                    uint16 tokenIndex = isStakingToken[token] - 1;\\n                    address lastToken = stakingTokens[stakingTokens.length - 1];\\n\\n                    stakingTokens[tokenIndex] = lastToken;\\n                    isStakingToken[lastToken] = isStakingToken[token];\\n                    stakingTokens.pop();\\n                    isStakingToken[token] = 0;\\n                }\\n\\n                stakingTokensMultiplier[token] = multiplier;\\n            } else {\\n                require(multiplier > 0, \\\"Invalid multiplier.\\\");\\n                stakingTokens.push(token);\\n                stakingTokensMultiplier[token] = multiplier;\\n                isStakingToken[token] = uint16(stakingTokens.length);\\n            }\\n            emit StakingTokenUpdated(token, multiplier);\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the specified tokens in the BondedToken contract for a given tokenId.\\n     * The staker must first approve the contract to transfer the tokens on their behalf.\\n     * Only the staker can call this function.\\n     * @param tokens The array of token addresses to be locked.\\n     * @param amounts The corresponding array of token amounts to be locked.\\n     */\\n    function lockToBondedToken(\\n        address[] memory tokens,\\n        uint256[] memory amounts\\n    ) external whenFunctionNotPaused(\\\"lockToBondedToken\\\") {\\n        uint256 tokensLength = tokens.length;\\n\\n        require(tokensLength == amounts.length, \\\"Arrays length mismatch.\\\");\\n\\n        uint256 tokenId = users[msg.sender].tokenId;\\n        require(tokenId != 0, \\\"No staking found.\\\");\\n        require(\\n            bondedToken.ownerOf(tokenId) == address(this),\\n            \\\"Staking contract is not the owner of the NFT.\\\"\\n        );\\n\\n        for (uint256 i = 0; i < tokensLength; i++) {\\n            uint256 balance = IERC20Upgradeable(tokens[i]).balanceOf(\\n                address(this)\\n            );\\n\\n            IERC20Upgradeable(tokens[i]).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                amounts[i]\\n            );\\n\\n            uint256 receivedAmount = IERC20Upgradeable(tokens[i]).balanceOf(\\n                address(this)\\n            ) - balance;\\n            require(\\n                amounts[i] == receivedAmount,\\n                \\\"The discrepancy between the received amount and the claimed amount.\\\"\\n            );\\n\\n            IERC20Upgradeable(tokens[i]).safeApprove(\\n                address(bondedToken),\\n                amounts[i]\\n            );\\n        }\\n\\n        bondedToken.lock(tokenId, tokens, amounts);\\n\\n        _updateStaking(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Merges two bonded tokens in the BondedToken contract.\\n     * The staker must first approve the contract to transfer the tokenIdA on their behalf.\\n     * @param tokenIdA The id of the first token to be merged.\\n     */\\n    function mergeBondedTokens(\\n        uint256 tokenIdA\\n    ) external whenFunctionNotPaused(\\\"mergeBondedTokens\\\") {\\n        require(\\n            bondedToken.ownerOf(tokenIdA) == msg.sender,\\n            \\\"Caller is not token owner.\\\"\\n        );\\n\\n        uint256 tokenIdB = users[msg.sender].tokenId;\\n        require(tokenIdB != 0, \\\"No staking found.\\\");\\n        require(\\n            bondedToken.ownerOf(tokenIdB) == address(this),\\n            \\\"Staking contract is not token owner.\\\"\\n        );\\n\\n        bondedToken.safeTransferFrom(msg.sender, address(this), tokenIdA);\\n        bondedToken.approve(address(bondedToken), tokenIdA);\\n\\n        bondedToken.merge(tokenIdA, tokenIdB);\\n\\n        _updateStaking(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Updates the staking status for the staker.\\n     * This function calculates the staked amount based on the locked tokens and their multipliers,\\n     * and updates the balance and total staked amount accordingly.\\n     * Only callable by staker.\\n     */\\n    function updateStaking() external {\\n        _updateStaking(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Allows the stakers to withdraw their rewards.\\n     * @param amount The amount of tokens to withdraw.\\n     * @param reqId The id of the withdrawal request.\\n     * @param signature A tss signature that proves the authenticity of the withdrawal request.\\n     */\\n    function getReward(\\n        uint256 amount,\\n        uint256 paidRewardPerToken,\\n        bytes calldata reqId,\\n        SchnorrSign calldata signature\\n    ) external whenFunctionNotPaused(\\\"getReward\\\") {\\n        require(amount > 0, \\\"Invalid amount.\\\");\\n\\n        IMuonNodeManager.Node memory node = nodeManager.stakerAddressInfo(\\n            msg.sender\\n        );\\n        require(node.id != 0, \\\"Node not found.\\\");\\n\\n        User memory user = users[msg.sender];\\n        require(\\n            user.paidRewardPerToken <= paidRewardPerToken &&\\n                paidRewardPerToken <= rewardPerToken(),\\n            \\\"Invalid paidRewardPerToken.\\\"\\n        );\\n\\n        // Verify the authenticity of the withdrawal request.\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                muonAppId,\\n                reqId,\\n                msg.sender,\\n                user.paidReward,\\n                paidRewardPerToken,\\n                amount\\n            )\\n        );\\n\\n        bool verified = verifier.verifySignature(\\n            muonPublicKey.x,\\n            muonPublicKey.parity,\\n            signature.signature,\\n            uint256(hash),\\n            signature.nonce\\n        );\\n        require(verified, \\\"Invalid signature.\\\");\\n\\n        uint256 maxReward = (user.balance *\\n            (paidRewardPerToken - user.paidRewardPerToken)) /\\n            1e18 +\\n            user.pendingRewards;\\n        require(amount <= maxReward, \\\"Invalid withdrawal amount.\\\");\\n        notPaidRewards += (maxReward - amount);\\n\\n        require(amount <= earned(msg.sender), \\\"Invalid withdrawal amount.\\\");\\n\\n        users[msg.sender].pendingRewards = 0;\\n        users[msg.sender].paidReward += amount;\\n        users[msg.sender].paidRewardPerToken = paidRewardPerToken;\\n        muonToken.safeTransfer(msg.sender, amount);\\n        emit RewardGot(reqId, msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Allows stakers to request to exit from the network.\\n     * Stakers can withdraw the staked amount after the exit pending period has passed.\\n     */\\n    function requestExit() external {\\n        _deactiveMuonNode(msg.sender);\\n\\n        emit ExitRequested(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Allows DAO_ROLE to deactive a node.\\n     * @param stakerAddress The address of the staker.\\n     */\\n    function deactiveMuonNode(\\n        address stakerAddress\\n    ) external onlyRole(DAO_ROLE) {\\n        _deactiveMuonNode(stakerAddress);\\n    }\\n\\n    /**\\n     * @dev Allows stakers to withdraw their staked amount after exiting the network and exit pending period has passed.\\n     */\\n    function withdraw() external whenFunctionNotPaused(\\\"withdraw\\\") {\\n        IMuonNodeManager.Node memory node = nodeManager.stakerAddressInfo(\\n            msg.sender\\n        );\\n        require(node.id != 0, \\\"Node not found.\\\");\\n\\n        require(\\n            !node.active &&\\n                (node.endTime + exitPendingPeriod) < block.timestamp,\\n            \\\"The exit time has not been reached yet.\\\"\\n        );\\n\\n        require(!lockedStakes[msg.sender], \\\"Stake is locked.\\\");\\n\\n        uint256 tokenId = users[msg.sender].tokenId;\\n        require(tokenId != 0, \\\"No staking found.\\\");\\n\\n        if (users[msg.sender].balance > 0) {\\n            totalStaked -= users[msg.sender].balance;\\n            users[msg.sender].balance = 0;\\n        }\\n\\n        users[msg.sender].tokenId = 0;\\n        bondedToken.safeTransferFrom(address(this), msg.sender, tokenId);\\n        emit Withdrawn(msg.sender, tokenId);\\n    }\\n\\n    /**\\n     * @dev Allows users to add a Muon node.\\n     * The user must have a sufficient staking amount in the BondedToken contract to run a node.\\n     * @param nodeAddress The address of the Muon node.\\n     * @param peerId The peer ID of the node.\\n     * @param tokenId The id of the staking token.\\n     */\\n    function addMuonNode(\\n        address nodeAddress,\\n        string calldata peerId,\\n        uint256 tokenId\\n    ) external whenFunctionNotPaused(\\\"addMuonNode\\\") {\\n        require(users[msg.sender].tokenId == 0, \\\"Already staked an NFT.\\\");\\n\\n        uint256 amount = valueOfBondedToken(tokenId);\\n        require(amount >= minStakeAmount, \\\"Insufficient staking.\\\");\\n\\n        users[msg.sender].tokenId = tokenId;\\n\\n        bondedToken.safeTransferFrom(msg.sender, address(this), tokenId);\\n        require(\\n            bondedToken.ownerOf(tokenId) == address(this),\\n            \\\"Not received the NFT.\\\"\\n        );\\n\\n        nodeManager.addNode(\\n            nodeAddress,\\n            msg.sender, // stakerAddress\\n            peerId,\\n            true // active\\n        );\\n        emit MuonNodeAdded(nodeAddress, msg.sender, peerId);\\n    }\\n\\n    /**\\n     * @dev Distributes the specified reward amount to the stakers.\\n     * Only callable by the REWARD_ROLE.\\n     * @param reward The reward amount to be distributed.\\n     */\\n    function distributeRewards(\\n        uint256 reward\\n    ) external updateReward(address(0)) onlyRole(REWARD_ROLE) {\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = (reward + notPaidRewards) / rewardPeriod;\\n        } else {\\n            uint256 remaining = periodFinish - block.timestamp;\\n            uint256 leftover = remaining * rewardRate;\\n            rewardRate = (reward + leftover + notPaidRewards) / rewardPeriod;\\n        }\\n\\n        notPaidRewards = 0;\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp + rewardPeriod;\\n        emit RewardsDistributed(reward, block.timestamp, rewardPeriod);\\n    }\\n\\n    /**\\n     * @dev Locks or unlocks the specified staker's stake.\\n     * Only callable by the REWARD_ROLE.\\n     * @param stakerAddress The address of the staker.\\n     * @param lockStatus Boolean indicating whether to lock (true) or unlock (false) the stake.\\n     */\\n    function setStakeLockStatus(\\n        address stakerAddress,\\n        bool lockStatus\\n    ) external onlyRole(REWARD_ROLE) {\\n        IMuonNodeManager.Node memory node = nodeManager.stakerAddressInfo(\\n            stakerAddress\\n        );\\n        require(node.id != 0, \\\"Node not found.\\\");\\n\\n        bool currentLockStatus = lockedStakes[stakerAddress];\\n        require(\\n            currentLockStatus != lockStatus,\\n            lockStatus ? \\\"Already locked.\\\" : \\\"Already unlocked.\\\"\\n        );\\n\\n        lockedStakes[stakerAddress] = lockStatus;\\n        emit StakeLockStatusChanged(stakerAddress, lockStatus);\\n    }\\n\\n    /**\\n     * @dev ERC721 token receiver function.\\n     *\\n     * @return bytes4 `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    // ======== DAO functions ========\\n\\n    function setExitPendingPeriod(\\n        uint256 _exitPendingPeriod\\n    ) external onlyRole(DAO_ROLE) {\\n        exitPendingPeriod = _exitPendingPeriod;\\n        emit ExitPendingPeriodUpdated(_exitPendingPeriod);\\n    }\\n\\n    function setRewardPeriod(\\n        uint256 period\\n    ) external updateReward(address(0)) onlyRole(DAO_ROLE) {\\n        require(\\n            block.timestamp >= periodFinish,\\n            \\\"old period is still active\\\"\\n        );\\n        rewardPeriod = period;\\n    }\\n\\n    function setMinStakeAmount(\\n        uint256 _minStakeAmount\\n    ) external onlyRole(DAO_ROLE) {\\n        minStakeAmount = _minStakeAmount;\\n        emit MinStakeAmountUpdated(_minStakeAmount);\\n    }\\n\\n    function setMuonAppId(uint256 _muonAppId) external onlyRole(DAO_ROLE) {\\n        muonAppId = _muonAppId;\\n        emit MuonAppIdUpdated(_muonAppId);\\n    }\\n\\n    function setMuonPublicKey(\\n        PublicKey memory _muonPublicKey\\n    ) external onlyRole(DAO_ROLE) {\\n        verifier.validatePubKey(_muonPublicKey.x);\\n\\n        muonPublicKey = _muonPublicKey;\\n        emit MuonPublicKeyUpdated(_muonPublicKey);\\n    }\\n\\n    function setVerifier(\\n        address _verifierAddress\\n    ) external onlyRole(DAO_ROLE) {\\n        verifier = SchnorrSECP256K1VerifierV2(_verifierAddress);\\n        emit VerifierUpdated(_verifierAddress);\\n    }\\n\\n    function setTierMaxStakeAmount(\\n        uint8 tier,\\n        uint256 maxStakeAmount\\n    ) external onlyRole(DAO_ROLE) {\\n        tiersMaxStakeAmount[tier] = maxStakeAmount;\\n        emit TierMaxStakeUpdated(tier, maxStakeAmount);\\n    }\\n\\n    function setMuonNodeTier(address stakerAddress, uint8 tier)\\n        public\\n        onlyRole(DAO_ROLE)\\n        updateReward(stakerAddress)\\n    {\\n        IMuonNodeManager.Node memory node = nodeManager.stakerAddressInfo(\\n            stakerAddress\\n        );\\n        nodeManager.setTier(node.id, tier);\\n        _updateStaking(stakerAddress);\\n    }\\n\\n    function setFunctionPauseStatus(\\n        string memory functionName,\\n        bool pauseStatus\\n    ) external onlyRole(DAO_ROLE) {\\n        bool currentStatus = functionPauseStatus[functionName];\\n        require(\\n            currentStatus != pauseStatus,\\n            pauseStatus ? \\\"Already paused.\\\" : \\\"Already unpaused.\\\"\\n        );\\n\\n        functionPauseStatus[functionName] = pauseStatus;\\n        emit FunctionPauseStatusChanged(functionName, pauseStatus);\\n    }\\n\\n    /**\\n     * @dev Calculates the total value of a bonded token in terms of the staking tokens.\\n     * @param tokenId The id of the bonded token.\\n     * @return amount The total value of the bonded token.\\n     */\\n    function valueOfBondedToken(\\n        uint256 tokenId\\n    ) public view returns (uint256 amount) {\\n        uint256[] memory lockedAmounts = bondedToken.getLockedOf(\\n            tokenId,\\n            stakingTokens\\n        );\\n\\n        amount = 0;\\n        uint256 lockedAmountsLength = lockedAmounts.length;\\n        for (uint256 i = 0; i < lockedAmountsLength; i++) {\\n            address token = stakingTokens[i];\\n            uint256 multiplier = stakingTokensMultiplier[token];\\n            amount += (multiplier * lockedAmounts[i]) / 1e18;\\n        }\\n        return amount;\\n    }\\n\\n    /**\\n     * @dev Calculates the current reward per token.\\n     * The reward per token is the amount of reward earned per staking token until now.\\n     * @return The current reward per token.\\n     */\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalStaked == 0) {\\n            return rewardPerTokenStored;\\n        } else {\\n            return\\n                rewardPerTokenStored +\\n                ((lastTimeRewardApplicable() - lastUpdateTime) *\\n                    rewardRate *\\n                    1e18) /\\n                totalStaked;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the total rewards earned by a node.\\n     * @param stakerAddress The staker address of a node.\\n     * @return The total rewards earned by a node.\\n     */\\n    function earned(address stakerAddress) public view returns (uint256) {\\n        User memory user = users[stakerAddress];\\n        return\\n            (user.balance * (rewardPerToken() - user.paidRewardPerToken)) /\\n            1e18 +\\n            user.pendingRewards;\\n    }\\n\\n    /**\\n     * @dev Returns the last time when rewards were applicable.\\n     * @return The last time when rewards were applicable.\\n     */\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\\n    }\\n\\n    function _updateStaking(\\n        address stakerAddress\\n    ) private updateReward(stakerAddress) {\\n        IMuonNodeManager.Node memory node = nodeManager.stakerAddressInfo(\\n            stakerAddress\\n        );\\n        require(node.id != 0 && node.active, \\\"No active node found.\\\");\\n\\n        uint256 tokenId = users[stakerAddress].tokenId;\\n        require(tokenId != 0, \\\"No staking found.\\\");\\n\\n        uint256 amount = valueOfBondedToken(tokenId);\\n        require(amount >= minStakeAmount, \\\"Insufficient staking.\\\");\\n\\n        uint256 maxStakeAmount = tiersMaxStakeAmount[node.tier];\\n        if (amount > maxStakeAmount) {\\n            amount = maxStakeAmount;\\n        }\\n\\n        if (users[stakerAddress].balance != amount) {\\n            totalStaked -= users[stakerAddress].balance;\\n            users[stakerAddress].balance = amount;\\n            totalStaked += amount;\\n            emit Staked(stakerAddress, amount);\\n        }\\n    }\\n\\n    function _deactiveMuonNode(\\n        address stakerAddress\\n    ) private updateReward(stakerAddress) {\\n        IMuonNodeManager.Node memory node = nodeManager.stakerAddressInfo(\\n            stakerAddress\\n        );\\n\\n        totalStaked -= users[stakerAddress].balance;\\n        users[stakerAddress].balance = 0;\\n        nodeManager.deactiveNode(node.id);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/MuonClientBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./SchnorrSECP256K1Verifier.sol\\\";\\n\\ncontract MuonClientBase is SchnorrSECP256K1Verifier{\\n\\n    struct SchnorrSign {\\n        uint256 signature;\\n        address owner;\\n        address nonce;\\n    }\\n\\n    struct PublicKey {\\n        uint256 x;\\n        uint8 parity;\\n    }\\n\\n    event MuonTX(bytes reqId, PublicKey pubKey);\\n\\n    uint256 public muonAppId;\\n    PublicKey public muonPublicKey;\\n\\n    function muonVerify(\\n        bytes calldata reqId,\\n        uint256 hash, \\n        SchnorrSign memory signature,\\n        PublicKey memory pubKey\\n    ) public returns (bool) {\\n        if(!verifySignature(pubKey.x, pubKey.parity, \\n                signature.signature, \\n                hash, signature.nonce)){\\n            return false;\\n        }\\n        emit MuonTX(reqId, pubKey);\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SchnorrSECP256K1Verifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ncontract SchnorrSECP256K1Verifier {\\n  // See https://en.bitcoin.it/wiki/Secp256k1 for this constant.\\n  uint256 constant public Q = // Group order of secp256k1\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;\\n  uint256 constant public HALF_Q = (Q >> 1) + 1;\\n\\n  /** **************************************************************************\\n      @notice verifySignature returns true iff passed a valid Schnorr signature.\\n      @dev See https://en.wikipedia.org/wiki/Schnorr_signature for reference.\\n      @dev In what follows, let d be your secret key, PK be your public key,\\n      PKx be the x ordinate of your public key, and PKyp be the parity bit for\\n      the y ordinate (i.e., 0 if PKy is even, 1 if odd.)\\n      **************************************************************************\\n      @dev TO CREATE A VALID SIGNATURE FOR THIS METHOD\\n      @dev First PKx must be less than HALF_Q. Then follow these instructions\\n           (see evm/test/schnorr_test.js, for an example of carrying them out):\\n      @dev 1. Hash the target message to a uint256, called msgHash here, using\\n              keccak256\\n      @dev 2. Pick k uniformly and cryptographically securely randomly from\\n              {0,...,Q-1}. It is critical that k remains confidential, as your\\n              private key can be reconstructed from k and the signature.\\n      @dev 3. Compute k*g in the secp256k1 group, where g is the group\\n              generator. (This is the same as computing the public key from the\\n              secret key k. But it's OK if k*g's x ordinate is greater than\\n              HALF_Q.)\\n      @dev 4. Compute the ethereum address for k*g. This is the lower 160 bits\\n              of the keccak hash of the concatenated affine coordinates of k*g,\\n              as 32-byte big-endians. (For instance, you could pass k to\\n              ethereumjs-utils's privateToAddress to compute this, though that\\n              should be strictly a development convenience, not for handling\\n              live secrets, unless you've locked your javascript environment\\n              down very carefully.) Call this address\\n              nonceTimesGeneratorAddress.\\n      @dev 5. Compute e=uint256(keccak256(PKx as a 32-byte big-endian\\n                                        \u2016 PKyp as a single byte\\n                                        \u2016 msgHash\\n                                        \u2016 nonceTimesGeneratorAddress))\\n              This value e is called \\\"msgChallenge\\\" in verifySignature's source\\n              code below. Here \\\"\u2016\\\" means concatenation of the listed byte\\n              arrays.\\n      @dev 6. Let x be your secret key. Compute s = (k - d * e) % Q. Add Q to\\n              it, if it's negative. This is your signature. (d is your secret\\n              key.)\\n      **************************************************************************\\n      @dev TO VERIFY A SIGNATURE\\n      @dev Given a signature (s, e) of msgHash, constructed as above, compute\\n      S=e*PK+s*generator in the secp256k1 group law, and then the ethereum\\n      address of S, as described in step 4. Call that\\n      nonceTimesGeneratorAddress. Then call the verifySignature method as:\\n      @dev    verifySignature(PKx, PKyp, s, msgHash,\\n                              nonceTimesGeneratorAddress)\\n      **************************************************************************\\n      @dev This signging scheme deviates slightly from the classical Schnorr\\n      signature, in that the address of k*g is used in place of k*g itself,\\n      both when calculating e and when verifying sum S as described in the\\n      verification paragraph above. This reduces the difficulty of\\n      brute-forcing a signature by trying random secp256k1 points in place of\\n      k*g in the signature verification process from 256 bits to 160 bits.\\n      However, the difficulty of cracking the public key using \\\"baby-step,\\n      giant-step\\\" is only 128 bits, so this weakening constitutes no compromise\\n      in the security of the signatures or the key.\\n      @dev The constraint signingPubKeyX < HALF_Q comes from Eq. (281), p. 24\\n      of Yellow Paper version 78d7b9a. ecrecover only accepts \\\"s\\\" inputs less\\n      than HALF_Q, to protect against a signature- malleability vulnerability in\\n      ECDSA. Schnorr does not have this vulnerability, but we must account for\\n      ecrecover's defense anyway. And since we are abusing ecrecover by putting\\n      signingPubKeyX in ecrecover's \\\"s\\\" argument the constraint applies to\\n      signingPubKeyX, even though it represents a value in the base field, and\\n      has no natural relationship to the order of the curve's cyclic group.\\n      **************************************************************************\\n      @param signingPubKeyX is the x ordinate of the public key. This must be\\n             less than HALF_Q. \\n      @param pubKeyYParity is 0 if the y ordinate of the public key is even, 1 \\n             if it's odd.\\n      @param signature is the actual signature, described as s in the above\\n             instructions.\\n      @param msgHash is a 256-bit hash of the message being signed.\\n      @param nonceTimesGeneratorAddress is the ethereum address of k*g in the\\n             above instructions\\n      **************************************************************************\\n      @return True if passed a valid signature, false otherwise. */\\n  function verifySignature(\\n    uint256 signingPubKeyX,\\n    uint8 pubKeyYParity,\\n    uint256 signature,\\n    uint256 msgHash,\\n    address nonceTimesGeneratorAddress) public pure returns (bool) {\\n    require(signingPubKeyX < HALF_Q, \\\"Public-key x >= HALF_Q\\\");\\n    // Avoid signature malleability from multiple representations for \u2124/Q\u2124 elts\\n    require(signature < Q, \\\"signature must be reduced modulo Q\\\");\\n\\n    // Forbid trivial inputs, to avoid ecrecover edge cases. The main thing to\\n    // avoid is something which causes ecrecover to return 0x0: then trivial\\n    // signatures could be constructed with the nonceTimesGeneratorAddress input\\n    // set to 0x0.\\n    //\\n    require(nonceTimesGeneratorAddress != address(0) && signingPubKeyX > 0 &&\\n      signature > 0 && msgHash > 0, \\\"no zero inputs allowed\\\");\\n\\n    uint256 msgChallenge = // \\\"e\\\"\\n      uint256(keccak256(abi.encodePacked(nonceTimesGeneratorAddress, msgHash)));\\n\\n    // Verify msgChallenge * signingPubKey + signature * generator ==\\n    //        nonce * generator\\n    //\\n    // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\\n    // The point corresponding to the address returned by\\n    // ecrecover(-s*r,v,r,e*r) is (r\u207b\u00b9 mod Q)*(e*r*R-(-s)*r*g)=e*R+s*g, where R\\n    // is the (v,r) point. See https://crypto.stackexchange.com/a/18106\\n    //\\n    address recoveredAddress = ecrecover(\\n      bytes32(Q - mulmod(signingPubKeyX, signature, Q)),\\n      // https://ethereum.github.io/yellowpaper/paper.pdf p. 24, \\\"The\\n      // value 27 represents an even y value and 28 represents an odd\\n      // y value.\\\"\\n      (pubKeyYParity == 0) ? 27 : 28,\\n      bytes32(signingPubKeyX),\\n      bytes32(mulmod(msgChallenge, signingPubKeyX, Q)));\\n    return nonceTimesGeneratorAddress == recoveredAddress;\\n  }\\n\\n  function validatePubKey (uint256 signingPubKeyX) public pure {\\n    require(signingPubKeyX < HALF_Q, \\\"Public-key x >= HALF_Q\\\");\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SchnorrSECP256K1VerifierV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ncontract SchnorrSECP256K1VerifierV2 {\\n  // See https://en.bitcoin.it/wiki/Secp256k1 for this constant.\\n  uint256 constant public Q = // Group order of secp256k1\\n    // solium-disable-next-line indentation\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;\\n  // solium-disable-next-line zeppelin/no-arithmetic-operations\\n  uint256 constant public HALF_Q = (Q >> 1) + 1;\\n\\n  /** **************************************************************************\\n      @notice verifySignature returns true iff passed a valid Schnorr signature.\\n\\n      @dev See https://en.wikipedia.org/wiki/Schnorr_signature for reference.\\n\\n      @dev In what follows, let d be your secret key, PK be your public key,\\n      PKx be the x ordinate of your public key, and PKyp be the parity bit for\\n      the y ordinate (i.e., 0 if PKy is even, 1 if odd.)\\n      **************************************************************************\\n      @dev TO CREATE A VALID SIGNATURE FOR THIS METHOD\\n\\n      @dev First PKx must be less than HALF_Q. Then follow these instructions\\n           (see evm/test/schnorr_test.js, for an example of carrying them out):\\n      @dev 1. Hash the target message to a uint256, called msgHash here, using\\n              keccak256\\n\\n      @dev 2. Pick k uniformly and cryptographically securely randomly from\\n              {0,...,Q-1}. It is critical that k remains confidential, as your\\n              private key can be reconstructed from k and the signature.\\n\\n      @dev 3. Compute k*g in the secp256k1 group, where g is the group\\n              generator. (This is the same as computing the public key from the\\n              secret key k. But it's OK if k*g's x ordinate is greater than\\n              HALF_Q.)\\n\\n      @dev 4. Compute the ethereum address for k*g. This is the lower 160 bits\\n              of the keccak hash of the concatenated affine coordinates of k*g,\\n              as 32-byte big-endians. (For instance, you could pass k to\\n              ethereumjs-utils's privateToAddress to compute this, though that\\n              should be strictly a development convenience, not for handling\\n              live secrets, unless you've locked your javascript environment\\n              down very carefully.) Call this address\\n              nonceTimesGeneratorAddress.\\n\\n      @dev 5. Compute e=uint256(keccak256(PKx as a 32-byte big-endian\\n                                        \u2016 PKyp as a single byte\\n                                        \u2016 msgHash\\n                                        \u2016 nonceTimesGeneratorAddress))\\n              This value e is called \\\"msgChallenge\\\" in verifySignature's source\\n              code below. Here \\\"\u2016\\\" means concatenation of the listed byte\\n              arrays.\\n\\n      @dev 6. Let x be your secret key. Compute s = (k - d * e) % Q. Add Q to\\n              it, if it's negative. This is your signature. (d is your secret\\n              key.)\\n      **************************************************************************\\n      @dev TO VERIFY A SIGNATURE\\n\\n      @dev Given a signature (s, e) of msgHash, constructed as above, compute\\n      S=e*PK+s*generator in the secp256k1 group law, and then the ethereum\\n      address of S, as described in step 4. Call that\\n      nonceTimesGeneratorAddress. Then call the verifySignature method as:\\n\\n      @dev    verifySignature(PKx, PKyp, s, msgHash,\\n                              nonceTimesGeneratorAddress)\\n      **************************************************************************\\n      @dev This signging scheme deviates slightly from the classical Schnorr\\n      signature, in that the address of k*g is used in place of k*g itself,\\n      both when calculating e and when verifying sum S as described in the\\n      verification paragraph above. This reduces the difficulty of\\n      brute-forcing a signature by trying random secp256k1 points in place of\\n      k*g in the signature verification process from 256 bits to 160 bits.\\n      However, the difficulty of cracking the public key using \\\"baby-step,\\n      giant-step\\\" is only 128 bits, so this weakening constitutes no compromise\\n      in the security of the signatures or the key.\\n\\n      @dev The constraint signingPubKeyX < HALF_Q comes from Eq. (281), p. 24\\n      of Yellow Paper version 78d7b9a. ecrecover only accepts \\\"s\\\" inputs less\\n      than HALF_Q, to protect against a signature- malleability vulnerability in\\n      ECDSA. Schnorr does not have this vulnerability, but we must account for\\n      ecrecover's defense anyway. And since we are abusing ecrecover by putting\\n      signingPubKeyX in ecrecover's \\\"s\\\" argument the constraint applies to\\n      signingPubKeyX, even though it represents a value in the base field, and\\n      has no natural relationship to the order of the curve's cyclic group.\\n      **************************************************************************\\n      @param signingPubKeyX is the x ordinate of the public key. This must be\\n             less than HALF_Q.\\n      @param pubKeyYParity is 0 if the y ordinate of the public key is even, 1\\n             if it's odd.\\n      @param signature is the actual signature, described as s in the above\\n             instructions.\\n      @param msgHash is a 256-bit hash of the message being signed.\\n      @param nonceTimesGeneratorAddress is the ethereum address of k*g in the\\n             above instructions\\n      **************************************************************************\\n      @return True if passed a valid signature, false otherwise. */\\n  function verifySignature(\\n    uint256 signingPubKeyX,\\n    uint8 pubKeyYParity,\\n    uint256 signature,\\n    uint256 msgHash,\\n    address nonceTimesGeneratorAddress) public pure returns (bool) {\\n    require(signingPubKeyX < HALF_Q, \\\"Public-key x >= HALF_Q\\\");\\n    // Avoid signature malleability from multiple representations for \u2124/Q\u2124 elts\\n    require(signature < Q, \\\"signature must be reduced modulo Q\\\");\\n\\n    // Forbid trivial inputs, to avoid ecrecover edge cases. The main thing to\\n    // avoid is something which causes ecrecover to return 0x0: then trivial\\n    // signatures could be constructed with the nonceTimesGeneratorAddress input\\n    // set to 0x0.\\n    //\\n    // solium-disable-next-line indentation\\n    require(nonceTimesGeneratorAddress != address(0) && signingPubKeyX > 0 &&\\n      signature > 0 && msgHash > 0, \\\"no zero inputs allowed\\\");\\n\\n    // solium-disable-next-line indentation\\n    uint256 msgChallenge = // \\\"e\\\"\\n      // solium-disable-next-line indentation\\n      uint256(keccak256(abi.encodePacked(signingPubKeyX, pubKeyYParity,\\n        msgHash, nonceTimesGeneratorAddress))\\n    );\\n\\n    // Verify msgChallenge * signingPubKey + signature * generator ==\\n    //        nonce * generator\\n    //\\n    // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\\n    // The point corresponding to the address returned by\\n    // ecrecover(-s*r,v,r,e*r) is (r\u207b\u00b9 mod Q)*(e*r*R-(-s)*r*g)=e*R+s*g, where R\\n    // is the (v,r) point. See https://crypto.stackexchange.com/a/18106\\n    //\\n    // solium-disable-next-line indentation\\n    address recoveredAddress = ecrecover(\\n      // solium-disable-next-line zeppelin/no-arithmetic-operations\\n      bytes32(Q - mulmod(signingPubKeyX, signature, Q)),\\n      // https://ethereum.github.io/yellowpaper/paper.pdf p. 24, \\\"The\\n      // value 27 represents an even y value and 28 represents an odd\\n      // y value.\\\"\\n      (pubKeyYParity == 0) ? 27 : 28,\\n      bytes32(signingPubKeyX),\\n      bytes32(mulmod(msgChallenge, signingPubKeyX, Q)));\\n    return nonceTimesGeneratorAddress == recoveredAddress;\\n  }\\n\\n  function validatePubKey (uint256 signingPubKeyX) public pure {\\n    require(signingPubKeyX < HALF_Q, \\\"Public-key x >= HALF_Q\\\");\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitPendingPeriod\",\"type\":\"uint256\"}],\"name\":\"ExitPendingPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"ExitRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"functionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"FunctionPauseStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minStakeAmount\",\"type\":\"uint256\"}],\"name\":\"MinStakeAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"muonAppId\",\"type\":\"uint256\"}],\"name\":\"MuonAppIdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"peerId\",\"type\":\"string\"}],\"name\":\"MuonNodeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"parity\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct MuonClientBase.PublicKey\",\"name\":\"muonPublicKey\",\"type\":\"tuple\"}],\"name\":\"MuonPublicKeyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reqId\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"parity\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct MuonClientBase.PublicKey\",\"name\":\"pubKey\",\"type\":\"tuple\"}],\"name\":\"MuonTX\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reqId\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardGot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"periodStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardPeriod\",\"type\":\"uint256\"}],\"name\":\"RewardsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"StakeLockStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"StakingTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxStakeAmount\",\"type\":\"uint256\"}],\"name\":\"TierMaxStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifierAddress\",\"type\":\"address\"}],\"name\":\"VerifierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HALF_Q\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Q\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"peerId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"addMuonNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondedToken\",\"outputs\":[{\"internalType\":\"contract IBondedToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"deactiveMuonNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitPendingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"functionPauseStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidRewardPerToken\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"reqId\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"signature\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nonce\",\"type\":\"address\"}],\"internalType\":\"struct MuonClientBase.SchnorrSign\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_muonTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nodeManagerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_muonAppId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"parity\",\"type\":\"uint8\"}],\"internalType\":\"struct MuonClientBase.PublicKey\",\"name\":\"_muonPublicKey\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_bondedTokenAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStakingToken\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"lockToBondedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedStakes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIdA\",\"type\":\"uint256\"}],\"name\":\"mergeBondedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"muonAppId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"muonPublicKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"parity\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"muonToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"reqId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"signature\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nonce\",\"type\":\"address\"}],\"internalType\":\"struct MuonClientBase.SchnorrSign\",\"name\":\"signature\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"parity\",\"type\":\"uint8\"}],\"internalType\":\"struct MuonClientBase.PublicKey\",\"name\":\"pubKey\",\"type\":\"tuple\"}],\"name\":\"muonVerify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeManager\",\"outputs\":[{\"internalType\":\"contract IMuonNodeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notPaidRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exitPendingPeriod\",\"type\":\"uint256\"}],\"name\":\"setExitPendingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"functionName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"pauseStatus\",\"type\":\"bool\"}],\"name\":\"setFunctionPauseStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStakeAmount\",\"type\":\"uint256\"}],\"name\":\"setMinStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_muonAppId\",\"type\":\"uint256\"}],\"name\":\"setMuonAppId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"setMuonNodeTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"parity\",\"type\":\"uint8\"}],\"internalType\":\"struct MuonClientBase.PublicKey\",\"name\":\"_muonPublicKey\",\"type\":\"tuple\"}],\"name\":\"setMuonPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setRewardPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"lockStatus\",\"type\":\"bool\"}],\"name\":\"setStakeLockStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxStakeAmount\",\"type\":\"uint256\"}],\"name\":\"setTierMaxStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierAddress\",\"type\":\"address\"}],\"name\":\"setVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingTokensMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tiersMaxStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"multipliers\",\"type\":\"uint256[]\"}],\"name\":\"updateStakingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidRewardPerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signingPubKeyX\",\"type\":\"uint256\"}],\"name\":\"validatePubKey\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"valueOfBondedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract SchnorrSECP256K1VerifierV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signingPubKeyX\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"pubKeyYParity\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"signature\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"msgHash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nonceTimesGeneratorAddress\",\"type\":\"address\"}],\"name\":\"verifySignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MuonNodeStaking", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}