{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@arbitrum/token-bridge-contracts/contracts/tokenbridge/libraries/gateway/GatewayMessageHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\n/// @notice this library manages encoding and decoding of gateway communication\\nlibrary GatewayMessageHandler {\\n    // these are for communication from L1 to L2 gateway\\n\\n    function encodeToL2GatewayMsg(bytes memory gatewayData, bytes memory callHookData)\\n        internal\\n        pure\\n        returns (bytes memory res)\\n    {\\n        res = abi.encode(gatewayData, callHookData);\\n    }\\n\\n    function parseFromL1GatewayMsg(bytes calldata _data)\\n        internal\\n        pure\\n        returns (bytes memory gatewayData, bytes memory callHookData)\\n    {\\n        // abi decode may revert, but the encoding is done by L1 gateway, so we trust it\\n        (gatewayData, callHookData) = abi.decode(_data, (bytes, bytes));\\n    }\\n\\n    // these are for communication from L2 to L1 gateway\\n\\n    function encodeFromL2GatewayMsg(uint256 exitNum, bytes memory callHookData)\\n        internal\\n        pure\\n        returns (bytes memory res)\\n    {\\n        res = abi.encode(exitNum, callHookData);\\n    }\\n\\n    function parseToL1GatewayMsg(bytes calldata _data)\\n        internal\\n        pure\\n        returns (uint256 exitNum, bytes memory callHookData)\\n    {\\n        // abi decode may revert, but the encoding is done by L1 gateway, so we trust it\\n        (exitNum, callHookData) = abi.decode(_data, (uint256, bytes));\\n    }\\n\\n    // these are for communication from router to gateway\\n\\n    function encodeFromRouterToGateway(address _from, bytes calldata _data)\\n        internal\\n        pure\\n        returns (bytes memory res)\\n    {\\n        // abi decode may revert, but the encoding is done by L1 gateway, so we trust it\\n        return abi.encode(_from, _data);\\n    }\\n\\n    function parseFromRouterToGateway(bytes calldata _data)\\n        internal\\n        pure\\n        returns (address, bytes memory res)\\n    {\\n        // abi decode may revert, but the encoding is done by L1 gateway, so we trust it\\n        return abi.decode(_data, (address, bytes));\\n    }\\n}\\n\"\r\n    },\r\n    \"@arbitrum/token-bridge-contracts/contracts/tokenbridge/libraries/gateway/IGatewayRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2020, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ProxyUtil.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./TokenGateway.sol\\\";\\nimport \\\"./GatewayMessageHandler.sol\\\";\\n\\n/**\\n * @title Common interface for L1 and L2 Gateway Routers\\n */\\ninterface IGatewayRouter is ITokenGateway {\\n    function defaultGateway() external view returns (address gateway);\\n\\n    event TransferRouted(\\n        address indexed token,\\n        address indexed _userFrom,\\n        address indexed _userTo,\\n        address gateway\\n    );\\n\\n    event GatewaySet(address indexed l1Token, address indexed gateway);\\n    event DefaultGatewayUpdated(address newDefaultGateway);\\n\\n    function getGateway(address _token) external view returns (address gateway);\\n}\\n\"\r\n    },\r\n    \"@arbitrum/token-bridge-contracts/contracts/tokenbridge/libraries/gateway/ITokenGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2020, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.6.9 <0.9.0;\\n\\ninterface ITokenGateway {\\n    /// @notice event deprecated in favor of DepositInitiated and WithdrawalInitiated\\n    // event OutboundTransferInitiated(\\n    //     address token,\\n    //     address indexed _from,\\n    //     address indexed _to,\\n    //     uint256 indexed _transferId,\\n    //     uint256 _amount,\\n    //     bytes _data\\n    // );\\n\\n    /// @notice event deprecated in favor of DepositFinalized and WithdrawalFinalized\\n    // event InboundTransferFinalized(\\n    //     address token,\\n    //     address indexed _from,\\n    //     address indexed _to,\\n    //     uint256 indexed _transferId,\\n    //     uint256 _amount,\\n    //     bytes _data\\n    // );\\n\\n    function outboundTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        bytes calldata _data\\n    ) external payable returns (bytes memory);\\n\\n    function finalizeInboundTransfer(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external payable;\\n\\n    /**\\n     * @notice Calculate the address used when bridging an ERC20 token\\n     * @dev the L1 and L2 address oracles may not always be in sync.\\n     * For example, a custom token may have been registered but not deploy or the contract self destructed.\\n     * @param l1ERC20 address of L1 token\\n     * @return L2 address of a bridged ERC20 token\\n     */\\n    function calculateL2TokenAddress(address l1ERC20) external view returns (address);\\n\\n    function getOutboundCalldata(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes memory _data\\n    ) external view returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"@arbitrum/token-bridge-contracts/contracts/tokenbridge/libraries/gateway/TokenGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2020, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ITokenGateway.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract TokenGateway is ITokenGateway {\\n    using Address for address;\\n\\n    address public counterpartGateway;\\n    address public router;\\n\\n    // This modifier is overriden in gateways to validate the message sender\\n    // For L1 to L2 messages need to be validated against the aliased counterpartGateway\\n    // For L2 to L1 messages need to be validated against the bridge and L2ToL1Sender\\n    // prettier-ignore\\n    modifier onlyCounterpartGateway() virtual;\\n\\n    function _initialize(address _counterpartGateway, address _router) internal virtual {\\n        // This initializes internal variables of the abstract contract it can be chained together with other functions.\\n        // It is virtual so subclasses can override or wrap around this logic.\\n        // An example where this is useful is different subclasses that validate the router address differently\\n        require(_counterpartGateway != address(0), \\\"INVALID_COUNTERPART\\\");\\n        require(counterpartGateway == address(0), \\\"ALREADY_INIT\\\");\\n        counterpartGateway = _counterpartGateway;\\n        router = _router;\\n    }\\n\\n    function isRouter(address _target) internal view returns (bool isTargetRouter) {\\n        return _target == router;\\n    }\\n\\n    /**\\n     * @notice Calculate the address used when bridging an ERC20 token\\n     * @dev the L1 and L2 address oracles may not always be in sync.\\n     * For example, a custom token may have been registered but not deploy or the contract self destructed.\\n     * @param l1ERC20 address of L1 token\\n     * @return L2 address of a bridged ERC20 token\\n     */\\n    function calculateL2TokenAddress(address l1ERC20)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address);\\n}\\n\"\r\n    },\r\n    \"@arbitrum/token-bridge-contracts/contracts/tokenbridge/libraries/ProxyUtil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ProxyUtil {\\n    function getProxyAdmin() internal view returns (address admin) {\\n        // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/proxy/TransparentUpgradeableProxy.sol#L48\\n        // Storage slot with the admin of the proxy contract.\\n        // This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n        bytes32 slot = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n        assembly {\\n            admin := sload(slot)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/lz-evm-sdk-v1-0.7/contracts/interfaces/ILayerZeroEndpoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint _gasLimit,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice get the inboundNonce of a receiver from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint _configType\\n    ) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/lz-evm-sdk-v1-0.7/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@solarity/solidity-lib/utils/Globals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nuint256 constant PRECISION = 10 ** 25;\\nuint256 constant DECIMAL = 10 ** 18;\\nuint256 constant PERCENTAGE_100 = 10 ** 27;\\n\"\r\n    },\r\n    \"contracts/Distribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport {PRECISION} from \\\"@solarity/solidity-lib/utils/Globals.sol\\\";\\n\\nimport {LinearDistributionIntervalDecrease} from \\\"./libs/LinearDistributionIntervalDecrease.sol\\\";\\n\\nimport {L1Sender} from \\\"./L1Sender.sol\\\";\\nimport {IDistribution} from \\\"./interfaces/IDistribution.sol\\\";\\n\\ncontract Distribution is IDistribution, OwnableUpgradeable, UUPSUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    bool public isNotUpgradeable;\\n\\n    address public depositToken;\\n    address public l1Sender;\\n\\n    // Pool storage\\n    Pool[] public pools;\\n    mapping(uint256 => PoolData) public poolsData;\\n\\n    // User storage\\n    mapping(address => mapping(uint256 => UserData)) public usersData;\\n\\n    // Total deposited storage\\n    uint256 public totalDepositedInPublicPools;\\n\\n    /**********************************************************************************************/\\n    /*** Modifiers                                                                              ***/\\n    /**********************************************************************************************/\\n    modifier poolExists(uint256 poolId_) {\\n        require(_poolExists(poolId_), \\\"DS: pool doesn't exist\\\");\\n        _;\\n    }\\n\\n    modifier poolPublic(uint256 poolId_) {\\n        require(pools[poolId_].isPublic, \\\"DS: pool isn't public\\\");\\n        _;\\n    }\\n\\n    /**********************************************************************************************/\\n    /*** Init                                                                                   ***/\\n    /**********************************************************************************************/\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function Distribution_init(\\n        address depositToken_,\\n        address l1Sender_,\\n        Pool[] calldata poolsInfo_\\n    ) external initializer {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n\\n        for (uint256 i; i < poolsInfo_.length; ++i) {\\n            createPool(poolsInfo_[i]);\\n        }\\n\\n        depositToken = depositToken_;\\n        l1Sender = l1Sender_;\\n    }\\n\\n    /**********************************************************************************************/\\n    /*** Pool managment and data retrieval                                                      ***/\\n    /**********************************************************************************************/\\n    function createPool(Pool calldata pool_) public onlyOwner {\\n        require(pool_.payoutStart > block.timestamp, \\\"DS: invalid payout start value\\\");\\n\\n        _validatePool(pool_);\\n        pools.push(pool_);\\n\\n        emit PoolCreated(pools.length - 1, pool_);\\n    }\\n\\n    function editPool(uint256 poolId_, Pool calldata pool_) external onlyOwner poolExists(poolId_) {\\n        _validatePool(pool_);\\n        require(pools[poolId_].isPublic == pool_.isPublic, \\\"DS: invalid pool type\\\");\\n\\n        PoolData storage poolData = poolsData[poolId_];\\n        uint256 currentPoolRate_ = _getCurrentPoolRate(poolId_);\\n\\n        // Update pool data\\n        poolData.rate = currentPoolRate_;\\n        poolData.lastUpdate = uint128(block.timestamp);\\n\\n        pools[poolId_] = pool_;\\n\\n        emit PoolEdited(poolId_, pool_);\\n    }\\n\\n    function getPeriodReward(uint256 poolId_, uint128 startTime_, uint128 endTime_) public view returns (uint256) {\\n        if (!_poolExists(poolId_)) {\\n            return 0;\\n        }\\n\\n        Pool storage pool = pools[poolId_];\\n\\n        return\\n            LinearDistributionIntervalDecrease.getPeriodReward(\\n                pool.initialReward,\\n                pool.rewardDecrease,\\n                pool.payoutStart,\\n                pool.decreaseInterval,\\n                startTime_,\\n                endTime_\\n            );\\n    }\\n\\n    function _validatePool(Pool calldata pool_) private pure {\\n        require(pool_.decreaseInterval > 0, \\\"DS: invalid decrease interval\\\");\\n    }\\n\\n    /**********************************************************************************************/\\n    /*** User management in private pools                                                       ***/\\n    /**********************************************************************************************/\\n    function manageUsersInPrivatePool(\\n        uint256 poolId_,\\n        address[] calldata users_,\\n        uint256[] calldata amounts_\\n    ) external onlyOwner poolExists(poolId_) {\\n        require(!pools[poolId_].isPublic, \\\"DS: pool is public\\\");\\n        require(users_.length == amounts_.length, \\\"DS: invalid length\\\");\\n\\n        uint256 currentPoolRate_ = _getCurrentPoolRate(poolId_);\\n\\n        for (uint256 i; i < users_.length; ++i) {\\n            address user_ = users_[i];\\n            uint256 amount_ = amounts_[i];\\n\\n            uint256 deposited_ = usersData[user_][poolId_].deposited;\\n\\n            if (deposited_ < amount_) {\\n                _stake(user_, poolId_, amount_ - deposited_, currentPoolRate_);\\n            } else if (deposited_ > amount_) {\\n                _withdraw(user_, poolId_, deposited_ - amount_, currentPoolRate_);\\n            }\\n        }\\n    }\\n\\n    /**********************************************************************************************/\\n    /*** Stake, claim, withdraw                                                                 ***/\\n    /**********************************************************************************************/\\n    function stake(uint256 poolId_, uint256 amount_) external poolExists(poolId_) poolPublic(poolId_) {\\n        _stake(_msgSender(), poolId_, amount_, _getCurrentPoolRate(poolId_));\\n    }\\n\\n    function claim(uint256 poolId_, address receiver_) external payable poolExists(poolId_) {\\n        address user_ = _msgSender();\\n\\n        Pool storage pool = pools[poolId_];\\n        PoolData storage poolData = poolsData[poolId_];\\n        UserData storage userData = usersData[user_][poolId_];\\n\\n        require(block.timestamp > pool.payoutStart + pool.claimLockPeriod, \\\"DS: pool claim is locked\\\");\\n\\n        uint256 currentPoolRate_ = _getCurrentPoolRate(poolId_);\\n        uint256 pendingRewards_ = _getCurrentUserReward(currentPoolRate_, userData);\\n        require(pendingRewards_ > 0, \\\"DS: nothing to claim\\\");\\n\\n        // Update pool data\\n        poolData.lastUpdate = uint128(block.timestamp);\\n        poolData.rate = currentPoolRate_;\\n\\n        // Update user data\\n        userData.rate = currentPoolRate_;\\n        userData.pendingRewards = 0;\\n\\n        // Transfer rewards\\n        L1Sender(l1Sender).sendMintMessage{value: msg.value}(receiver_, pendingRewards_, user_);\\n\\n        emit UserClaimed(poolId_, user_, receiver_, pendingRewards_);\\n    }\\n\\n    function withdraw(uint256 poolId_, uint256 amount_) external poolExists(poolId_) poolPublic(poolId_) {\\n        _withdraw(_msgSender(), poolId_, amount_, _getCurrentPoolRate(poolId_));\\n    }\\n\\n    function getCurrentUserReward(uint256 poolId_, address user_) external view returns (uint256) {\\n        if (!_poolExists(poolId_)) {\\n            return 0;\\n        }\\n\\n        UserData storage userData = usersData[user_][poolId_];\\n        uint256 currentPoolRate_ = _getCurrentPoolRate(poolId_);\\n\\n        return _getCurrentUserReward(currentPoolRate_, userData);\\n    }\\n\\n    function _stake(address user_, uint256 poolId_, uint256 amount_, uint256 currentPoolRate_) private {\\n        require(amount_ > 0, \\\"DS: nothing to stake\\\");\\n\\n        Pool storage pool = pools[poolId_];\\n        PoolData storage poolData = poolsData[poolId_];\\n        UserData storage userData = usersData[user_][poolId_];\\n\\n        if (pool.isPublic) {\\n            // https://docs.lido.fi/guides/lido-tokens-integration-guide/#steth-internals-share-mechanics\\n            uint256 balanceBefore_ = IERC20(depositToken).balanceOf(address(this));\\n            IERC20(depositToken).safeTransferFrom(_msgSender(), address(this), amount_);\\n            uint256 balanceAfter_ = IERC20(depositToken).balanceOf(address(this));\\n\\n            amount_ = balanceAfter_ - balanceBefore_;\\n\\n            require(userData.deposited + amount_ >= pool.minimalStake, \\\"DS: amount too low\\\");\\n\\n            totalDepositedInPublicPools += amount_;\\n        }\\n\\n        userData.pendingRewards = _getCurrentUserReward(currentPoolRate_, userData);\\n\\n        // Update pool data\\n        poolData.lastUpdate = uint128(block.timestamp);\\n        poolData.rate = currentPoolRate_;\\n        poolData.totalDeposited += amount_;\\n\\n        // Update user data\\n        userData.lastStake = uint128(block.timestamp);\\n        userData.rate = currentPoolRate_;\\n        userData.deposited += amount_;\\n\\n        emit UserStaked(poolId_, user_, amount_);\\n    }\\n\\n    function _withdraw(address user_, uint256 poolId_, uint256 amount_, uint256 currentPoolRate_) private {\\n        Pool storage pool = pools[poolId_];\\n        PoolData storage poolData = poolsData[poolId_];\\n        UserData storage userData = usersData[user_][poolId_];\\n\\n        uint256 deposited_ = userData.deposited;\\n        require(deposited_ > 0, \\\"DS: user isn't staked\\\");\\n\\n        if (amount_ > deposited_) {\\n            amount_ = deposited_;\\n        }\\n\\n        uint256 newDeposited_;\\n        if (pool.isPublic) {\\n            require(\\n                block.timestamp < pool.payoutStart ||\\n                    (block.timestamp > pool.payoutStart + pool.withdrawLockPeriod &&\\n                        block.timestamp > userData.lastStake + pool.withdrawLockPeriodAfterStake),\\n                \\\"DS: pool withdraw is locked\\\"\\n            );\\n\\n            uint256 depositTokenContractBalance_ = IERC20(depositToken).balanceOf(address(this));\\n            if (amount_ > depositTokenContractBalance_) {\\n                amount_ = depositTokenContractBalance_;\\n            }\\n\\n            newDeposited_ = deposited_ - amount_;\\n\\n            require(amount_ > 0, \\\"DS: nothing to withdraw\\\");\\n            require(newDeposited_ >= pool.minimalStake || newDeposited_ == 0, \\\"DS: invalid withdraw amount\\\");\\n        } else {\\n            newDeposited_ = deposited_ - amount_;\\n        }\\n\\n        uint256 pendingRewards_ = _getCurrentUserReward(currentPoolRate_, userData);\\n\\n        // Update pool data\\n        poolData.lastUpdate = uint128(block.timestamp);\\n        poolData.rate = currentPoolRate_;\\n        poolData.totalDeposited -= amount_;\\n\\n        // Update user data\\n        userData.rate = currentPoolRate_;\\n        userData.deposited = newDeposited_;\\n        userData.pendingRewards = pendingRewards_;\\n\\n        if (pool.isPublic) {\\n            totalDepositedInPublicPools -= amount_;\\n\\n            IERC20(depositToken).safeTransfer(user_, amount_);\\n        }\\n\\n        emit UserWithdrawn(poolId_, user_, amount_);\\n    }\\n\\n    function _getCurrentUserReward(uint256 currentPoolRate_, UserData memory userData_) private pure returns (uint256) {\\n        uint256 newRewards_ = ((currentPoolRate_ - userData_.rate) * userData_.deposited) / PRECISION;\\n\\n        return userData_.pendingRewards + newRewards_;\\n    }\\n\\n    function _getCurrentPoolRate(uint256 poolId_) private view returns (uint256) {\\n        PoolData storage poolData = poolsData[poolId_];\\n\\n        if (poolData.totalDeposited == 0) {\\n            return poolData.rate;\\n        }\\n\\n        uint256 rewards_ = getPeriodReward(poolId_, poolData.lastUpdate, uint128(block.timestamp));\\n\\n        return poolData.rate + (rewards_ * PRECISION) / poolData.totalDeposited;\\n    }\\n\\n    function _poolExists(uint256 poolId_) private view returns (bool) {\\n        return poolId_ < pools.length;\\n    }\\n\\n    /**********************************************************************************************/\\n    /*** Bridge                                                                                 ***/\\n    /**********************************************************************************************/\\n\\n    function overplus() public view returns (uint256) {\\n        uint256 depositTokenContractBalance_ = IERC20(depositToken).balanceOf(address(this));\\n        if (depositTokenContractBalance_ <= totalDepositedInPublicPools) {\\n            return 0;\\n        }\\n\\n        return depositTokenContractBalance_ - totalDepositedInPublicPools;\\n    }\\n\\n    function bridgeOverplus(\\n        uint256 gasLimit_,\\n        uint256 maxFeePerGas_,\\n        uint256 maxSubmissionCost_\\n    ) external payable onlyOwner returns (bytes memory) {\\n        uint256 overplus_ = overplus();\\n        require(overplus_ > 0, \\\"DS: overplus is zero\\\");\\n\\n        IERC20(depositToken).safeTransfer(l1Sender, overplus_);\\n\\n        bytes memory bridgeMessageId_ = L1Sender(l1Sender).sendDepositToken{value: msg.value}(\\n            gasLimit_,\\n            maxFeePerGas_,\\n            maxSubmissionCost_\\n        );\\n\\n        emit OverplusBridged(overplus_, bridgeMessageId_);\\n\\n        return bridgeMessageId_;\\n    }\\n\\n    /**********************************************************************************************/\\n    /*** UUPS                                                                                   ***/\\n    /**********************************************************************************************/\\n\\n    function removeUpgradeability() external onlyOwner {\\n        isNotUpgradeable = true;\\n    }\\n\\n    function _authorizeUpgrade(address) internal view override onlyOwner {\\n        require(!isNotUpgradeable, \\\"DS: upgrade isn't available\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * This is Distribution contract that stores all the pools and users data.\\n * It is used to calculate the user's rewards and operate with overpluses.\\n */\\ninterface IDistribution {\\n    /**\\n     * The structure that stores the core pool's data.\\n     * @param payoutStart The timestamp when the pool starts to pay out rewards.\\n     * @param decreaseInterval The interval in seconds between reward decreases.\\n     * @param withdrawLockPeriod The period in seconds when the user can't withdraw his stake.\\n     * @param withdrawLockPeriodAfterStake The period in seconds when the user can't withdraw his stake after staking.\\n     * @param claimLockPeriod The period in seconds when the user can't claim his rewards.\\n     * @param initialReward The initial reward per interval.\\n     * @param rewardDecrease The reward decrease per interval.\\n     * @param minimalStake The minimal stake amount.\\n     * @param isPublic The flag that indicates if the pool is public.\\n     */\\n    struct Pool {\\n        uint128 payoutStart;\\n        uint128 decreaseInterval;\\n        uint128 withdrawLockPeriod;\\n        uint128 claimLockPeriod;\\n        uint128 withdrawLockPeriodAfterStake;\\n        uint256 initialReward;\\n        uint256 rewardDecrease;\\n        uint256 minimalStake;\\n        bool isPublic;\\n    }\\n\\n    /**\\n     * The structure that stores the pool's rate data.\\n     * @param lastUpdate The timestamp when the pool was updated.\\n     * @param rate The current reward rate.\\n     * @param totalDeposited The total amount of tokens deposited in the pool.\\n     */\\n    struct PoolData {\\n        uint128 lastUpdate;\\n        uint256 rate;\\n        uint256 totalDeposited;\\n    }\\n\\n    /**\\n     * The structure that stores the user's rate data of pool.\\n     * @param lastStake The timestamp when the user last staked tokens.\\n     * @param deposited The amount of tokens deposited in the pool.\\n     * @param rate The current reward rate.\\n     * @param pendingRewards The amount of pending rewards.\\n     */\\n    struct UserData {\\n        uint128 lastStake;\\n        uint256 deposited;\\n        uint256 rate;\\n        uint256 pendingRewards;\\n    }\\n\\n    /**\\n     * The event that is emitted when the pool is created.\\n     * @param poolId The pool's id.\\n     * @param pool The pool's data.\\n     */\\n    event PoolCreated(uint256 indexed poolId, Pool pool);\\n\\n    /**\\n     * The event that is emitted when the pool is edited.\\n     * @param poolId The pool's id.\\n     * @param pool The pool's data.\\n     */\\n    event PoolEdited(uint256 indexed poolId, Pool pool);\\n\\n    /**\\n     * The event that is emitted when the user stakes tokens in the pool.\\n     * @param poolId The pool's id.\\n     * @param user The user's address.\\n     * @param amount The amount of tokens.\\n     */\\n    event UserStaked(uint256 indexed poolId, address indexed user, uint256 amount);\\n\\n    /**\\n     * The event that is emitted when the user claims rewards from the pool.\\n     * @param poolId The pool's id.\\n     * @param user The user's address.\\n     * @param receiver The receiver's address.\\n     * @param amount The amount of tokens.\\n     */\\n    event UserClaimed(uint256 indexed poolId, address indexed user, address receiver, uint256 amount);\\n\\n    /**\\n     * The event that is emitted when the user withdraws tokens from the pool.\\n     * @param poolId The pool's id.\\n     * @param user The user's address.\\n     * @param amount The amount of tokens.\\n     */\\n    event UserWithdrawn(uint256 indexed poolId, address indexed user, uint256 amount);\\n\\n    /**\\n     * The event that is emitted when the overplus of the deposit tokens is bridged.\\n     */\\n    event OverplusBridged(uint256 amount, bytes uniqueId);\\n\\n    /**\\n     * The function to initialize the contract.\\n     * @param depositToken_ The address of deposit token.\\n     * @param l1Sender_ The address of bridge contract.\\n     * @param poolsInfo_ The array of initial pools.\\n     */\\n    function Distribution_init(address depositToken_, address l1Sender_, Pool[] calldata poolsInfo_) external;\\n\\n    /**\\n     * The function to create a new pool.\\n     * @param pool_ The pool's data.\\n     */\\n    function createPool(Pool calldata pool_) external;\\n\\n    /**\\n     * The function to edit the pool's data.\\n     * @param poolId The pool's id.\\n     * @param pool_ The new pool's data.\\n     */\\n    function editPool(uint256 poolId, Pool calldata pool_) external;\\n\\n    /**\\n     * The function to calculate the total pool's reward for the specified period.\\n     * @param poolId_ The pool's id.\\n     * @param startTime_ The start timestamp.\\n     * @param endTime_ The end timestamp.\\n     * @return The total reward amount.\\n     */\\n    function getPeriodReward(uint256 poolId_, uint128 startTime_, uint128 endTime_) external view returns (uint256);\\n\\n    /**\\n     * The function to manage users and their rate in the private pool.\\n     * @param poolId_ The pool's id.\\n     * @param users_ The array of users.\\n     * @param amounts_ The array of amounts.\\n     */\\n    function manageUsersInPrivatePool(uint256 poolId_, address[] calldata users_, uint256[] calldata amounts_) external;\\n\\n    /**\\n     * The function to stake tokens in the public pool.\\n     * @param poolId_ The pool's id.\\n     * @param amount_ The amount of tokens to stake.\\n     */\\n    function stake(uint256 poolId_, uint256 amount_) external;\\n\\n    /**\\n     * The function to claim rewards from the pool.\\n     * @param poolId_ The pool's id.\\n     * @param receiver_ The receiver's address.\\n     */\\n    function claim(uint256 poolId_, address receiver_) external payable;\\n\\n    /**\\n     * The function to withdraw tokens from the pool.\\n     * @param poolId_ The pool's id.\\n     * @param amount_ The amount of tokens to withdraw.\\n     */\\n    function withdraw(uint256 poolId_, uint256 amount_) external;\\n\\n    /**\\n     * The function to get the user's reward for the specified pool.\\n     * @param poolId_ The pool's id.\\n     * @param user_ The user's address.\\n     * @return The user's reward amount.\\n     */\\n    function getCurrentUserReward(uint256 poolId_, address user_) external view returns (uint256);\\n\\n    /**\\n     * The function to calculate the total overplus of the staked deposit tokens.\\n     * @return The total overplus amount.\\n     */\\n    function overplus() external view returns (uint256);\\n\\n    /**\\n     * The function to bridge the overplus of the staked deposit tokens.\\n     * @param gasLimit_ The gas limit.\\n     * @param maxFeePerGas_ The max fee per gas.\\n     * @param maxSubmissionCost_ The max submission cost.\\n     * @return The unique identifier for withdrawal.\\n     */\\n    function bridgeOverplus(\\n        uint256 gasLimit_,\\n        uint256 maxFeePerGas_,\\n        uint256 maxSubmissionCost_\\n    ) external payable returns (bytes memory);\\n\\n    /**\\n     * The function to remove upgradeability.\\n     */\\n    function removeUpgradeability() external;\\n\\n    /**\\n     * The function to check if the contract is upgradeable.\\n     * @return The flag that indicates if the contract is upgradeable.\\n     */\\n    function isNotUpgradeable() external view returns (bool);\\n\\n    /**\\n     * The function to get the address of deposit token.\\n     * @return The address of deposit token.\\n     */\\n    function depositToken() external view returns (address);\\n\\n    /**\\n     * The function to get the address of bridge contract.\\n     * @return The address of bridge contract.\\n     */\\n    function l1Sender() external view returns (address);\\n\\n    /**\\n     * The function to get the amount of deposit tokens that are staked in all of the public pools.\\n     * @dev The value accumulates the amount amount despite the rate differences.\\n     * @return The amount of deposit tokens.\\n     */\\n    function totalDepositedInPublicPools() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IL1Sender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\ninterface IL1Sender is IERC165 {\\n    /**\\n     * The structure that stores the deposit token's data.\\n     * @param token The address of wrapped deposit token.\\n     * @param gateway The address of token's gateway.\\n     * @param receiver The address of wrapped token's receiver on L2.\\n     */\\n    struct DepositTokenConfig {\\n        address token;\\n        address gateway;\\n        address receiver;\\n    }\\n\\n    /**\\n     * The structure that stores the reward token's data.\\n     * @param gateway The address of token's gateway.\\n     * @param receiver The address of token's receiver on L2.\\n     * @param receiverChainId The chain id of receiver.\\n     * @param zroPaymentAddress The address of ZKSync payment contract.\\n     * @param adapterParams The parameters for the adapter.\\n     */\\n    struct RewardTokenConfig {\\n        address gateway;\\n        address receiver;\\n        uint16 receiverChainId;\\n        address zroPaymentAddress;\\n        bytes adapterParams;\\n    }\\n\\n    /**\\n     * The function to get the deposit token's address.\\n     */\\n    function unwrappedDepositToken() external view returns (address);\\n\\n    /**\\n     * The function to set the reward token's config.\\n     * @param newConfig_ The new reward token's config.\\n     */\\n    function setRewardTokenConfig(RewardTokenConfig calldata newConfig_) external;\\n\\n    /**\\n     * The function to set the deposit token's config.\\n     * @param newConfig_ The new deposit token's config.\\n     */\\n    function setDepositTokenConfig(DepositTokenConfig calldata newConfig_) external;\\n\\n    /**\\n     * The function to send all current balance of the deposit token to the L2.\\n     * @param gasLimit_ The gas limit for the L2 transaction.\\n     * @param maxFeePerGas_ The max fee per gas for the L2 transaction.\\n     * @param maxSubmissionCost_ The max submission cost for the L2 transaction.\\n     * @return The unique identifier for withdrawal.\\n     */\\n    function sendDepositToken(\\n        uint256 gasLimit_,\\n        uint256 maxFeePerGas_,\\n        uint256 maxSubmissionCost_\\n    ) external payable returns (bytes memory);\\n\\n    /**\\n     * The function to send the message of mint of reward token to the L2.\\n     * @param user_ The user's address to mint reward tokens.\\n     * @param amount_ The amount of reward tokens to mint.\\n     * @param refundTo_ The address to refund the overpaid gas.\\n     */\\n    function sendMintMessage(address user_, uint256 amount_, address refundTo_) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/tokens/IWStETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWStETH is IERC20 {\\n    function stETH() external returns (address);\\n\\n    function wrap(uint256 _stETHAmount) external returns (uint256);\\n\\n    function unwrap(uint256 _wstETHAmount) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/L1Sender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {ILayerZeroEndpoint} from \\\"@layerzerolabs/lz-evm-sdk-v1-0.7/contracts/interfaces/ILayerZeroEndpoint.sol\\\";\\n\\nimport {IGatewayRouter} from \\\"@arbitrum/token-bridge-contracts/contracts/tokenbridge/libraries/gateway/IGatewayRouter.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport {IL1Sender, IERC165} from \\\"./interfaces/IL1Sender.sol\\\";\\nimport {IWStETH} from \\\"./interfaces/tokens/IWStETH.sol\\\";\\n\\ncontract L1Sender is IL1Sender, OwnableUpgradeable, UUPSUpgradeable {\\n    address public unwrappedDepositToken;\\n    address public distribution;\\n\\n    DepositTokenConfig public depositTokenConfig;\\n    RewardTokenConfig public rewardTokenConfig;\\n\\n    modifier onlyDistribution() {\\n        require(_msgSender() == distribution, \\\"L1S: invalid sender\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function L1Sender__init(\\n        address distribution_,\\n        RewardTokenConfig calldata rewardTokenConfig_,\\n        DepositTokenConfig calldata depositTokenConfig_\\n    ) external initializer {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n\\n        setDistribution(distribution_);\\n        setRewardTokenConfig(rewardTokenConfig_);\\n        setDepositTokenConfig(depositTokenConfig_);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId_) external pure returns (bool) {\\n        return interfaceId_ == type(IL1Sender).interfaceId || interfaceId_ == type(IERC165).interfaceId;\\n    }\\n\\n    function setDistribution(address distribution_) public onlyOwner {\\n        distribution = distribution_;\\n    }\\n\\n    function setRewardTokenConfig(RewardTokenConfig calldata newConfig_) public onlyOwner {\\n        rewardTokenConfig = newConfig_;\\n    }\\n\\n    function setDepositTokenConfig(DepositTokenConfig calldata newConfig_) public onlyOwner {\\n        require(newConfig_.receiver != address(0), \\\"L1S: invalid receiver\\\");\\n\\n        DepositTokenConfig storage oldConfig = depositTokenConfig;\\n\\n        _replaceDepositToken(oldConfig.token, newConfig_.token);\\n        _replaceDepositTokenGateway(oldConfig.gateway, newConfig_.gateway, oldConfig.token, newConfig_.token);\\n\\n        depositTokenConfig = newConfig_;\\n    }\\n\\n    function _replaceDepositToken(address oldToken_, address newToken_) private {\\n        bool isTokenChanged_ = oldToken_ != newToken_;\\n\\n        if (oldToken_ != address(0) && isTokenChanged_) {\\n            // Remove allowance from stETH to wstETH\\n            IERC20(unwrappedDepositToken).approve(oldToken_, 0);\\n        }\\n\\n        if (isTokenChanged_) {\\n            // Get stETH from wstETH\\n            address unwrappedToken_ = IWStETH(newToken_).stETH();\\n            // Increase allowance from stETH to wstETH. To exchange stETH for wstETH\\n            IERC20(unwrappedToken_).approve(newToken_, type(uint256).max);\\n\\n            unwrappedDepositToken = unwrappedToken_;\\n        }\\n    }\\n\\n    function _replaceDepositTokenGateway(\\n        address oldGateway_,\\n        address newGateway_,\\n        address oldToken_,\\n        address newToken_\\n    ) private {\\n        bool isAllowedChanged_ = (oldToken_ != newToken_) || (oldGateway_ != newGateway_);\\n\\n        if (oldGateway_ != address(0) && isAllowedChanged_) {\\n            IERC20(oldToken_).approve(IGatewayRouter(oldGateway_).getGateway(oldToken_), 0);\\n        }\\n\\n        if (isAllowedChanged_) {\\n            IERC20(newToken_).approve(IGatewayRouter(newGateway_).getGateway(newToken_), type(uint256).max);\\n        }\\n    }\\n\\n    function sendDepositToken(\\n        uint256 gasLimit_,\\n        uint256 maxFeePerGas_,\\n        uint256 maxSubmissionCost_\\n    ) external payable onlyDistribution returns (bytes memory) {\\n        DepositTokenConfig storage config = depositTokenConfig;\\n\\n        // Get current stETH balance\\n        uint256 amountUnwrappedToken_ = IERC20(unwrappedDepositToken).balanceOf(address(this));\\n        // Wrap all stETH to wstETH\\n        uint256 amount_ = IWStETH(config.token).wrap(amountUnwrappedToken_);\\n\\n        bytes memory data_ = abi.encode(maxSubmissionCost_, \\\"\\\");\\n\\n        return\\n            IGatewayRouter(config.gateway).outboundTransfer{value: msg.value}(\\n                config.token,\\n                config.receiver,\\n                amount_,\\n                gasLimit_,\\n                maxFeePerGas_,\\n                data_\\n            );\\n    }\\n\\n    function sendMintMessage(address user_, uint256 amount_, address refundTo_) external payable onlyDistribution {\\n        RewardTokenConfig storage config = rewardTokenConfig;\\n\\n        bytes memory receiverAndSenderAddresses_ = abi.encodePacked(config.receiver, address(this));\\n        bytes memory payload_ = abi.encode(user_, amount_);\\n\\n        ILayerZeroEndpoint(config.gateway).send{value: msg.value}(\\n            config.receiverChainId, // communicator LayerZero chainId\\n            receiverAndSenderAddresses_, // send to this address to the communicator\\n            payload_, // bytes payload\\n            payable(refundTo_), // refund address\\n            config.zroPaymentAddress, // future parameter\\n            config.adapterParams // adapterParams (see \\\"Advanced Features\\\")\\n        );\\n    }\\n\\n    function _authorizeUpgrade(address) internal view override onlyOwner {}\\n}\\n\"\r\n    },\r\n    \"contracts/libs/LinearDistributionIntervalDecrease.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * This is the library that calculates the reward for the period with linear distribution and interval decrease.\\n * Supports the constant reward amount (decreaseAmount_ = 0)\\n */\\nlibrary LinearDistributionIntervalDecrease {\\n    /**\\n     * The function to calculate the reward for the period.\\n     * @param initialAmount_ The initial reward amount.\\n     * @param decreaseAmount_ The reward decrease amount.\\n     * @param payoutStart_ The timestamp when the period starts to pay out rewards.\\n     * @param interval_ The interval in seconds between reward decreases.\\n     * @param startTime_ The timestamp when the period starts.\\n     * @param endTime_ The timestamp when the period ends.\\n     * @return The reward amount.\\n     */\\n    function getPeriodReward(\\n        uint256 initialAmount_,\\n        uint256 decreaseAmount_,\\n        uint128 payoutStart_,\\n        uint128 interval_,\\n        uint128 startTime_,\\n        uint128 endTime_\\n    ) external pure returns (uint256) {\\n        if (interval_ == 0) {\\n            return 0;\\n        }\\n\\n        // 'startTime_' can't be less than 'payoutStart_'\\n        if (startTime_ < payoutStart_) {\\n            startTime_ = payoutStart_;\\n        }\\n\\n        uint128 maxEndTime_ = _calculateMaxEndTime(payoutStart_, interval_, initialAmount_, decreaseAmount_);\\n\\n        if (endTime_ > maxEndTime_) {\\n            endTime_ = maxEndTime_;\\n        }\\n\\n        // Return 0 when calculation 'startTime_' is bigger then 'endTime_'...\\n        if (startTime_ >= endTime_) {\\n            return 0;\\n        }\\n\\n        // Calculate interval that less then 'interval_' range\\n        uint256 timePassedBefore_ = startTime_ - payoutStart_;\\n        if ((timePassedBefore_ / interval_) == ((endTime_ - payoutStart_) / interval_)) {\\n            uint256 intervalsPassed_ = timePassedBefore_ / interval_;\\n            uint256 intervalFullReward_ = initialAmount_ - intervalsPassed_ * decreaseAmount_;\\n\\n            return (intervalFullReward_ * (endTime_ - startTime_)) / interval_;\\n        }\\n\\n        // Calculate interval that more then 'interval_' range\\n        uint256 firstPeriodReward_ = _calculatePartPeriodReward(\\n            payoutStart_,\\n            startTime_,\\n            interval_,\\n            initialAmount_,\\n            decreaseAmount_,\\n            true\\n        );\\n\\n        uint256 secondPeriodReward_ = _calculateFullPeriodReward(\\n            payoutStart_,\\n            startTime_,\\n            endTime_,\\n            interval_,\\n            initialAmount_,\\n            decreaseAmount_\\n        );\\n\\n        uint256 thirdPeriodReward_ = _calculatePartPeriodReward(\\n            payoutStart_,\\n            endTime_,\\n            interval_,\\n            initialAmount_,\\n            decreaseAmount_,\\n            false\\n        );\\n\\n        return firstPeriodReward_ + secondPeriodReward_ + thirdPeriodReward_;\\n    }\\n\\n    function _calculateMaxEndTime(\\n        uint128 payoutStart_,\\n        uint128 interval_,\\n        uint256 initialAmount_,\\n        uint256 decreaseAmount_\\n    ) private pure returns (uint128) {\\n        if (decreaseAmount_ == 0) {\\n            return type(uint128).max;\\n        }\\n\\n        uint256 maxIntervals_ = _divideCeil(initialAmount_, decreaseAmount_);\\n\\n        return uint128(payoutStart_ + maxIntervals_ * interval_);\\n    }\\n\\n    function _calculatePartPeriodReward(\\n        uint128 payoutStart_,\\n        uint128 startTime_,\\n        uint128 interval_,\\n        uint256 initialAmount_,\\n        uint256 decreaseAmount_,\\n        bool toEnd_\\n    ) private pure returns (uint256) {\\n        uint256 intervalsPassed_ = (startTime_ - payoutStart_) / interval_;\\n        uint256 decreaseRewardAmount_ = intervalsPassed_ * decreaseAmount_;\\n        if (decreaseRewardAmount_ >= initialAmount_) {\\n            return 0;\\n        }\\n        uint256 intervalFullReward_ = initialAmount_ - decreaseRewardAmount_;\\n\\n        uint256 intervalPart_;\\n        if (toEnd_) {\\n            intervalPart_ = interval_ * (intervalsPassed_ + 1) + payoutStart_ - startTime_;\\n        } else {\\n            intervalPart_ = startTime_ - interval_ * intervalsPassed_ - payoutStart_;\\n        }\\n\\n        if (intervalPart_ == interval_) {\\n            return 0;\\n        }\\n\\n        return (intervalFullReward_ * intervalPart_) / interval_;\\n    }\\n\\n    function _calculateFullPeriodReward(\\n        uint128 payoutStart_,\\n        uint128 startTime_,\\n        uint128 endTime_,\\n        uint128 interval_,\\n        uint256 initialAmount_,\\n        uint256 decreaseAmount_\\n    ) private pure returns (uint256) {\\n        // START calculate initial reward when period start\\n        uint256 timePassedBefore_ = startTime_ - payoutStart_;\\n        uint256 intervalsPassedBefore_ = _divideCeil(timePassedBefore_, interval_);\\n\\n        uint256 decreaseRewardAmount_ = intervalsPassedBefore_ * decreaseAmount_;\\n\\n        if (decreaseRewardAmount_ >= initialAmount_) {\\n            return 0;\\n        }\\n\\n        uint256 initialReward_ = initialAmount_ - decreaseRewardAmount_;\\n        // END\\n\\n        // Intervals passed\\n        uint256 ip_ = ((endTime_ - payoutStart_ - intervalsPassedBefore_ * interval_) / interval_);\\n        if (ip_ == 0) {\\n            return 0;\\n        }\\n\\n        return initialReward_ * ip_ - (decreaseAmount_ * (ip_ * (ip_ - 1))) / 2;\\n    }\\n\\n    function _divideCeil(uint256 a_, uint256 b_) private pure returns (uint256) {\\n        return (a_ + b_ - 1) / b_;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libs/LinearDistributionIntervalDecrease.sol\": {\r\n        \"LinearDistributionIntervalDecrease\": \"0x7431ada8a591c955a994a21710752ef9b882b8e3\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"uniqueId\",\"type\":\"bytes\"}],\"name\":\"OverplusBridged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"payoutStart\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"decreaseInterval\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withdrawLockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimLockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withdrawLockPeriodAfterStake\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"initialReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDecrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimalStake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IDistribution.Pool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"payoutStart\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"decreaseInterval\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withdrawLockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimLockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withdrawLockPeriodAfterStake\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"initialReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDecrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimalStake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IDistribution.Pool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"name\":\"PoolEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l1Sender_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"payoutStart\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"decreaseInterval\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withdrawLockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimLockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withdrawLockPeriodAfterStake\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"initialReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDecrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimalStake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"internalType\":\"struct IDistribution.Pool[]\",\"name\":\"poolsInfo_\",\"type\":\"tuple[]\"}],\"name\":\"Distribution_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSubmissionCost_\",\"type\":\"uint256\"}],\"name\":\"bridgeOverplus\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"payoutStart\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"decreaseInterval\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withdrawLockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimLockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withdrawLockPeriodAfterStake\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"initialReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDecrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimalStake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"internalType\":\"struct IDistribution.Pool\",\"name\":\"pool_\",\"type\":\"tuple\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"payoutStart\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"decreaseInterval\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withdrawLockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimLockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withdrawLockPeriodAfterStake\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"initialReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDecrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimalStake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"internalType\":\"struct IDistribution.Pool\",\"name\":\"pool_\",\"type\":\"tuple\"}],\"name\":\"editPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getCurrentUserReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId_\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"startTime_\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endTime_\",\"type\":\"uint128\"}],\"name\":\"getPeriodReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNotUpgradeable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Sender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"users_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"manageUsersInPrivatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overplus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"payoutStart\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"decreaseInterval\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withdrawLockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimLockPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withdrawLockPeriodAfterStake\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"initialReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDecrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimalStake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolsData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"lastUpdate\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeUpgradeability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositedInPublicPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usersData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"lastStake\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Distribution", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}