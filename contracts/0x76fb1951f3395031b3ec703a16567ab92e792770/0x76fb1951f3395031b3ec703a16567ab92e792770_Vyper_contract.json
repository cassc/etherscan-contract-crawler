{"SourceCode": "# @version 0.2.16\r\n\"\"\"\r\n@title Liquidity Gauge v4\r\n@author StakeDAO Protocol\r\n@license MIT\r\n\"\"\"\r\n\r\n# Original idea and credit:\r\n# Curve Finance's veCRV\r\n# https://github.com/curvefi/curve-dao-contracts/blob/master/contracts/gauges/LiquidityGaugeV4.vy\r\n# Mostly forked from Curve, except that now there is no direct link between the gauge controller\r\n# and the gauges. In this implementation, SDT rewards are like any other token rewards.\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\nimplements: ERC20\r\n\r\ninterface VotingEscrow:\r\n    def user_point_epoch(addr: address) -> uint256: view\r\n    def user_point_history__ts(addr: address, epoch: uint256) -> uint256: view\r\n\r\ninterface VotingEscrowBoost:\r\n    def adjusted_balance_of(_account: address) -> uint256: view\r\n\r\ninterface ERC20Extended:\r\n    def symbol() -> String[26]: view\r\n    def decimals() -> uint256: view\r\n\r\n\r\nevent Deposit:\r\n    provider: indexed(address)\r\n    value: uint256\r\n\r\nevent Withdraw:\r\n    provider: indexed(address)\r\n    value: uint256\r\n\r\nevent UpdateLiquidityLimit:\r\n    user: address\r\n    original_balance: uint256\r\n    original_supply: uint256\r\n    working_balance: uint256\r\n    working_supply: uint256\r\n\r\nevent CommitOwnership:\r\n    admin: address\r\n\r\nevent ApplyOwnership:\r\n    admin: address\r\n\r\nevent Transfer:\r\n    _from: indexed(address)\r\n    _to: indexed(address)\r\n    _value: uint256\r\n\r\nevent Approval:\r\n    _owner: indexed(address)\r\n    _spender: indexed(address)\r\n    _value: uint256\r\n\r\nevent RewardDataUpdate:\r\n    _token: indexed(address)\r\n    _amount: uint256\r\n\r\nstruct Reward:\r\n    token: address\r\n    distributor: address\r\n    period_finish: uint256\r\n    rate: uint256\r\n    last_update: uint256\r\n    integral: uint256\r\n\r\n\r\nMAX_REWARDS: constant(uint256) = 8\r\nTOKENLESS_PRODUCTION: constant(uint256) = 40\r\nWEEK: constant(uint256) = 604800\r\n\r\nSDT: public(address)\r\nvoting_escrow: public(address)\r\nveBoost_proxy: public(address)\r\n\r\nstaking_token: public(address)\r\ndecimal_staking_token: public(uint256)\r\n\r\nbalanceOf: public(HashMap[address, uint256])\r\ntotalSupply: public(uint256)\r\nallowance: public(HashMap[address, HashMap[address, uint256]])\r\n\r\nname: public(String[64])\r\nsymbol: public(String[40])\r\n\r\nworking_balances: public(HashMap[address, uint256])\r\nworking_supply: public(uint256)\r\n\r\nintegrate_checkpoint_of: public(HashMap[address, uint256])\r\n\r\n# For tracking external rewards\r\nreward_count: public(uint256)\r\nreward_tokens: public(address[MAX_REWARDS])\r\n\r\nreward_data: public(HashMap[address, Reward])\r\n\r\n# claimant -> default reward receiver\r\nrewards_receiver: public(HashMap[address, address])\r\n\r\n# reward token -> claiming address -> integral\r\nreward_integral_for: public(HashMap[address, HashMap[address, uint256]])\r\n\r\n# user -> [uint128 claimable amount][uint128 claimed amount]\r\nclaim_data: HashMap[address, HashMap[address, uint256]]\r\n\r\nadmin: public(address)\r\nfuture_admin: public(address)\r\nclaimer: public(address)\r\n\r\ninitialized: public(bool)\r\n\r\nvault:public(address)\r\n\r\n@external\r\ndef __init__():\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @dev The contract has an initializer to prevent the take over of the implementation\r\n    \"\"\"\r\n    assert self.initialized == False #dev: contract is already initialized\r\n    self.initialized = True\r\n\r\n@external\r\ndef initialize(_staking_token: address, _admin: address, _SDT: address, _voting_escrow: address, _veBoost_proxy: address, _distributor: address,_vault:address,symbol:String[26]):\r\n    \"\"\"\r\n    @notice Contract initializer\r\n    @param _staking_token Liquidity Pool contract address\r\n    @param _admin Admin who can kill the gauge\r\n    @param _SDT Address of the SDT token\r\n    @param _voting_escrow Address of the veSDT contract\r\n    @param _veBoost_proxy Address of the proxy contract used to query veSDT balances and taking into account potential delegations\r\n    @param _distributor Address of the contract responsible for distributing SDT tokens to this gauge\r\n    \"\"\"\r\n    assert self.initialized == False #dev: contract is already initialized\r\n    self.initialized = True\r\n\r\n    assert _admin != ZERO_ADDRESS\r\n    assert _SDT != ZERO_ADDRESS\r\n    assert _voting_escrow != ZERO_ADDRESS\r\n    assert _veBoost_proxy != ZERO_ADDRESS\r\n    assert _distributor != ZERO_ADDRESS\r\n    assert _vault != ZERO_ADDRESS\r\n\r\n    self.admin = _admin\r\n    self.staking_token = _staking_token\r\n    self.decimal_staking_token = ERC20Extended(_staking_token).decimals()\r\n\r\n    self.name = concat(\"Stake DAO \", symbol, \" Gauge\")\r\n    self.symbol = concat(\"sd\",symbol, \"-gauge\")\r\n    self.SDT = _SDT\r\n    self.voting_escrow = _voting_escrow\r\n    self.veBoost_proxy = _veBoost_proxy\r\n    self.vault = _vault\r\n\r\n    # add in all liquidityGauge the SDT reward - the distribution could be null though\r\n    self.reward_data[_SDT].distributor = _distributor\r\n    self.reward_tokens[0] = _SDT\r\n    self.reward_count = 1\r\n    \r\n\r\n@view\r\n@external\r\ndef decimals() -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of decimals for this token\r\n    @dev Implemented as a view method to reduce gas costs\r\n    @return uint256 decimal places\r\n    \"\"\"\r\n    return self.decimal_staking_token\r\n\r\n\r\n@internal\r\ndef _update_liquidity_limit(addr: address, l: uint256, L: uint256):\r\n    \"\"\"\r\n    @notice Calculate limits which depend on the amount of SDT token per-user.\r\n            Effectively it calculates working balances to apply amplification\r\n            of SDT production by SDT\r\n    @param addr User address\r\n    @param l User's amount of liquidity (LP tokens)\r\n    @param L Total amount of liquidity (LP tokens)\r\n    \"\"\"\r\n    # To be called after totalSupply is updated\r\n    voting_balance: uint256 = VotingEscrowBoost(self.veBoost_proxy).adjusted_balance_of(addr)\r\n    voting_total: uint256 = ERC20(self.voting_escrow).totalSupply()\r\n\r\n    lim: uint256 = l * TOKENLESS_PRODUCTION / 100\r\n    if voting_total > 0:\r\n        lim += L * voting_balance / voting_total * (100 - TOKENLESS_PRODUCTION) / 100\r\n\r\n    lim = min(l, lim)\r\n    old_bal: uint256 = self.working_balances[addr]\r\n    self.working_balances[addr] = lim\r\n    _working_supply: uint256 = self.working_supply + lim - old_bal\r\n    self.working_supply = _working_supply\r\n\r\n    log UpdateLiquidityLimit(addr, l, L, lim, _working_supply)\r\n\r\n\r\n@internal\r\ndef _checkpoint_reward(_user: address, token: address, _total_supply: uint256, _user_balance: uint256, _claim: bool, receiver: address):\r\n    \"\"\"\r\n    @notice Claim pending rewards and checkpoint rewards for a user\r\n    \"\"\"\r\n    total_supply: uint256 = _total_supply\r\n    user_balance: uint256 = _user_balance\r\n    if token == self.SDT : \r\n        total_supply = self.working_supply\r\n        user_balance = self.working_balances[_user]\r\n\r\n    integral: uint256 = self.reward_data[token].integral\r\n    last_update: uint256 = min(block.timestamp, self.reward_data[token].period_finish)\r\n    duration: uint256 = last_update - self.reward_data[token].last_update\r\n    if duration != 0:\r\n        self.reward_data[token].last_update = last_update\r\n        if total_supply != 0:\r\n            integral += duration * self.reward_data[token].rate * 10**18 / total_supply\r\n            self.reward_data[token].integral = integral\r\n\r\n    if _user != ZERO_ADDRESS:\r\n        integral_for: uint256 = self.reward_integral_for[token][_user]\r\n        new_claimable: uint256 = 0\r\n\r\n        if integral_for < integral:\r\n            self.reward_integral_for[token][_user] = integral\r\n            new_claimable = user_balance * (integral - integral_for) / 10**18\r\n\r\n        claim_data: uint256 = self.claim_data[_user][token]\r\n        total_claimable: uint256 = shift(claim_data, -128) + new_claimable\r\n        if total_claimable > 0:\r\n            total_claimed: uint256 = claim_data % 2**128\r\n            if _claim:\r\n                response: Bytes[32] = raw_call(\r\n                    token,\r\n                    concat(\r\n                        method_id(\"transfer(address,uint256)\"),\r\n                        convert(receiver, bytes32),\r\n                        convert(total_claimable, bytes32),\r\n                    ),\r\n                    max_outsize=32,\r\n                )\r\n                if len(response) != 0:\r\n                    assert convert(response, bool)\r\n                self.claim_data[_user][token] = total_claimed + total_claimable\r\n            elif new_claimable > 0:\r\n                self.claim_data[_user][token] = total_claimed + shift(total_claimable, 128)\r\n    \r\n    if token == self.SDT : \r\n        self.integrate_checkpoint_of[_user] = block.timestamp\r\n                \r\n@internal\r\ndef _checkpoint_rewards(_user: address, _total_supply: uint256, _claim: bool, _receiver: address, _only_checkpoint:bool = False):\r\n    \"\"\"\r\n    @notice Claim pending rewards and checkpoint rewards for a user\r\n    \"\"\"\r\n\r\n    receiver: address = _receiver\r\n    user_balance: uint256 = 0\r\n    if _user != ZERO_ADDRESS:\r\n        user_balance = self.balanceOf[_user]\r\n        if _claim and _receiver == ZERO_ADDRESS:\r\n            # if receiver is not explicitly declared, check if a default receiver is set\r\n            receiver = self.rewards_receiver[_user]\r\n            if receiver == ZERO_ADDRESS:\r\n                # if no default receiver is set, direct claims to the user\r\n                receiver = _user\r\n\r\n    if _only_checkpoint:\r\n        self._checkpoint_reward(_user, self.SDT, _total_supply, user_balance, False, receiver)\r\n    else:\r\n        reward_count: uint256 = self.reward_count\r\n        for i in range(MAX_REWARDS):\r\n            if i == reward_count:\r\n                break\r\n            token: address = self.reward_tokens[i]\r\n            self._checkpoint_reward(_user, token, _total_supply, user_balance, _claim, receiver)\r\n\r\n@external\r\ndef user_checkpoint(addr: address) -> bool:\r\n    \"\"\"\r\n    @notice Record a checkpoint for `addr`\r\n    @param addr User address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == addr  # dev: unauthorized\r\n    total_supply: uint256 = self.totalSupply\r\n    self._checkpoint_rewards(addr, total_supply, False, ZERO_ADDRESS, True)\r\n    self._update_liquidity_limit(addr, self.balanceOf[addr], total_supply)\r\n    return True\r\n\r\n@view\r\n@external\r\ndef claimed_reward(_addr: address, _token: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of already-claimed reward tokens for a user\r\n    @param _addr Account to get reward amount for\r\n    @param _token Token to get reward amount for\r\n    @return uint256 Total amount of `_token` already claimed by `_addr`\r\n    \"\"\"\r\n    return self.claim_data[_addr][_token] % 2**128\r\n\r\n\r\n@view\r\n@external\r\ndef claimable_reward(_user: address, _reward_token: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of claimable reward tokens for a user\r\n    @param _user Account to get reward amount for\r\n    @param _reward_token Token to get reward amount for\r\n    @return uint256 Claimable reward token amount\r\n    \"\"\"\r\n    integral: uint256 = self.reward_data[_reward_token].integral\r\n    total_supply: uint256 = self.totalSupply\r\n    user_balance: uint256 = self.balanceOf[_user]\r\n    if _reward_token == self.SDT: \r\n        total_supply = self.working_supply\r\n        user_balance = self.working_balances[_user]\r\n        \r\n    if total_supply != 0:\r\n        last_update: uint256 = min(block.timestamp, self.reward_data[_reward_token].period_finish)\r\n        duration: uint256 = last_update - self.reward_data[_reward_token].last_update\r\n        integral += (duration * self.reward_data[_reward_token].rate * 10**18 / total_supply)\r\n\r\n    integral_for: uint256 = self.reward_integral_for[_reward_token][_user]\r\n    new_claimable: uint256 = user_balance * (integral - integral_for) / 10**18\r\n\r\n    return shift(self.claim_data[_user][_reward_token], -128) + new_claimable\r\n\r\n\r\n@external\r\ndef set_rewards_receiver(_receiver: address):\r\n    \"\"\"\r\n    @notice Set the default reward receiver for the caller.\r\n    @dev When set to ZERO_ADDRESS, rewards are sent to the caller\r\n    @param _receiver Receiver address for any rewards claimed via `claim_rewards`\r\n    \"\"\"\r\n    self.rewards_receiver[msg.sender] = _receiver\r\n\r\n@external\r\ndef set_vault(_vault:address):\r\n    \"\"\"\r\n    @notice Set the vault contract\r\n    @param _vault Address of the new vault\r\n    \"\"\"\r\n    assert self.admin == msg.sender #dev : only admin can call this function \r\n    self.vault = _vault\r\n@external\r\n@nonreentrant('lock')\r\ndef claim_rewards(_addr: address = msg.sender, _receiver: address = ZERO_ADDRESS):\r\n    \"\"\"\r\n    @notice Claim available reward tokens for `_addr`\r\n    @param _addr Address to claim for\r\n    @param _receiver Address to transfer rewards to - if set to\r\n                     ZERO_ADDRESS, uses the default reward receiver\r\n                     for the caller\r\n    \"\"\"\r\n    if _receiver != ZERO_ADDRESS:\r\n        assert _addr == msg.sender  # dev: cannot redirect when claiming for another user\r\n    self._checkpoint_rewards(_addr, self.totalSupply, True, _receiver)\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef claim_rewards_for(_addr: address, _receiver: address):\r\n    \"\"\"\r\n    @notice Claim available reward tokens for `_addr`\r\n    @param _addr Address to claim for\r\n    @param _receiver Address to transfer rewards to - if set to\r\n                     ZERO_ADDRESS, uses the default reward receiver\r\n                     for the caller\r\n    \"\"\"\r\n    assert self.claimer == msg.sender  # dev: only the claim contract can claim for other \r\n    if _receiver != _addr:\r\n        assert _receiver == self.claimer # dev: if the receiver is not the user it needs to be the claimer\r\n    self._checkpoint_rewards(_addr, self.totalSupply, True, _receiver)\r\n\r\n\r\n@external\r\ndef kick(addr: address):\r\n    \"\"\"\r\n    @notice Kick `addr` for abusing their boost\r\n    @dev Only if either they had another voting event, or their voting escrow lock expired\r\n    @param addr Address to kick\r\n    \"\"\"\r\n    t_last: uint256 = self.integrate_checkpoint_of[addr]\r\n    t_ve: uint256 = VotingEscrow(self.voting_escrow).user_point_history__ts(\r\n        addr, VotingEscrow(self.voting_escrow).user_point_epoch(addr)\r\n    )\r\n    _balance: uint256 = self.balanceOf[addr]\r\n\r\n    assert ERC20(self.voting_escrow).balanceOf(addr) == 0 or t_ve > t_last # dev: kick not allowed\r\n    assert self.working_balances[addr] > _balance * TOKENLESS_PRODUCTION / 100  # dev: kick not needed\r\n\r\n    total_supply: uint256 = self.totalSupply\r\n    self._checkpoint_rewards(addr, total_supply, False, ZERO_ADDRESS, True)\r\n\r\n    self._update_liquidity_limit(addr, self.balanceOf[addr], total_supply)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef deposit(_value: uint256, _addr: address = msg.sender, _claim_rewards: bool = False):\r\n    \"\"\"\r\n    @notice Deposit `_value` LP tokens\r\n    @dev Depositting also claims pending reward tokens\r\n    @param _value Number of tokens to deposit\r\n    @param _addr Address to deposit for\r\n    \"\"\"\r\n    assert msg.sender == self.vault #only vault contract can deposit\r\n    total_supply: uint256 = self.totalSupply\r\n\r\n    if _value != 0:\r\n        is_rewards: bool = self.reward_count != 0\r\n        if is_rewards:\r\n            self._checkpoint_rewards(_addr, total_supply, _claim_rewards, ZERO_ADDRESS)\r\n\r\n        total_supply += _value\r\n        new_balance: uint256 = self.balanceOf[_addr] + _value\r\n        self.balanceOf[_addr] = new_balance\r\n        self.totalSupply = total_supply\r\n\r\n        self._update_liquidity_limit(_addr, new_balance, total_supply)\r\n\r\n        ERC20(self.staking_token).transferFrom(msg.sender, self, _value)\r\n    else:\r\n        self._checkpoint_rewards(_addr, total_supply, False, ZERO_ADDRESS, True)\r\n\r\n    log Deposit(_addr, _value)\r\n    log Transfer(ZERO_ADDRESS, _addr, _value)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef withdraw(_value: uint256, _addr: address, _claim_rewards: bool = False):\r\n    \"\"\"\r\n    @notice Withdraw `_value` LP tokens\r\n    @dev Withdrawing also claims pending reward tokens\r\n    @param _value Number of tokens to withdraw\r\n    \"\"\"\r\n    assert msg.sender == self.vault #only vault contract can withdraw\r\n    total_supply: uint256 = self.totalSupply\r\n\r\n    if _value != 0:\r\n        is_rewards: bool = self.reward_count != 0\r\n        if is_rewards:\r\n            self._checkpoint_rewards(_addr, total_supply, _claim_rewards, ZERO_ADDRESS)\r\n\r\n        total_supply -= _value\r\n        new_balance: uint256 = self.balanceOf[_addr] - _value\r\n        self.balanceOf[_addr] = new_balance\r\n        self.totalSupply = total_supply\r\n\r\n        self._update_liquidity_limit(_addr, new_balance, total_supply)\r\n\r\n        ERC20(self.staking_token).transfer(msg.sender, _value)\r\n    else:\r\n        self._checkpoint_rewards(_addr, total_supply, False, ZERO_ADDRESS, True)\r\n\r\n    log Withdraw(_addr, _value)\r\n    log Transfer(msg.sender, ZERO_ADDRESS, _value)\r\n\r\n\r\n@internal\r\ndef _transfer(_from: address, _to: address, _value: uint256):\r\n    total_supply: uint256 = self.totalSupply\r\n\r\n    if _value != 0:\r\n        is_rewards: bool = self.reward_count != 0\r\n        if is_rewards:\r\n            self._checkpoint_rewards(_from, total_supply, False, ZERO_ADDRESS)\r\n        new_balance: uint256 = self.balanceOf[_from] - _value\r\n        self.balanceOf[_from] = new_balance\r\n        self._update_liquidity_limit(_from, new_balance, total_supply)\r\n\r\n        if is_rewards:\r\n            self._checkpoint_rewards(_to, total_supply, False, ZERO_ADDRESS)\r\n        new_balance = self.balanceOf[_to] + _value\r\n        self.balanceOf[_to] = new_balance\r\n        self._update_liquidity_limit(_to, new_balance, total_supply)\r\n    else:\r\n        self._checkpoint_rewards(_from, total_supply, False, ZERO_ADDRESS, True)\r\n        self._checkpoint_rewards(_to, total_supply, False, ZERO_ADDRESS, True)\r\n\r\n    log Transfer(_from, _to, _value)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef transfer(_to : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n    @notice Transfer token for a specified address\r\n    @dev Transferring claims pending reward tokens for the sender and receiver\r\n    @param _to The address to transfer to.\r\n    @param _value The amount to be transferred.\r\n    \"\"\"\r\n    self._transfer(msg.sender, _to, _value)\r\n\r\n    return True\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef transferFrom(_from : address, _to : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n     @notice Transfer tokens from one address to another.\r\n     @dev Transferring claims pending reward tokens for the sender and receiver\r\n     @param _from address The address which you want to send tokens from\r\n     @param _to address The address which you want to transfer to\r\n     @param _value uint256 the amount of tokens to be transferred\r\n    \"\"\"\r\n    _allowance: uint256 = self.allowance[_from][msg.sender]\r\n    if _allowance != MAX_UINT256:\r\n        self.allowance[_from][msg.sender] = _allowance - _value\r\n\r\n    self._transfer(_from, _to, _value)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef approve(_spender : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n    @notice Approve the passed address to transfer the specified amount of\r\n            tokens on behalf of msg.sender\r\n    @dev Beware that changing an allowance via this method brings the risk\r\n         that someone may use both the old and new allowance by unfortunate\r\n         transaction ordering. This may be mitigated with the use of\r\n         {incraseAllowance} and {decreaseAllowance}.\r\n         https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    @param _spender The address which will transfer the funds\r\n    @param _value The amount of tokens that may be transferred\r\n    @return bool success\r\n    \"\"\"\r\n    self.allowance[msg.sender][_spender] = _value\r\n    log Approval(msg.sender, _spender, _value)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef increaseAllowance(_spender: address, _added_value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Increase the allowance granted to `_spender` by the caller\r\n    @dev This is alternative to {approve} that can be used as a mitigation for\r\n         the potential race condition\r\n    @param _spender The address which will transfer the funds\r\n    @param _added_value The amount of to increase the allowance\r\n    @return bool success\r\n    \"\"\"\r\n    allowance: uint256 = self.allowance[msg.sender][_spender] + _added_value\r\n    self.allowance[msg.sender][_spender] = allowance\r\n\r\n    log Approval(msg.sender, _spender, allowance)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef decreaseAllowance(_spender: address, _subtracted_value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Decrease the allowance granted to `_spender` by the caller\r\n    @dev This is alternative to {approve} that can be used as a mitigation for\r\n         the potential race condition\r\n    @param _spender The address which will transfer the funds\r\n    @param _subtracted_value The amount of to decrease the allowance\r\n    @return bool success\r\n    \"\"\"\r\n    allowance: uint256 = self.allowance[msg.sender][_spender] - _subtracted_value\r\n    self.allowance[msg.sender][_spender] = allowance\r\n\r\n    log Approval(msg.sender, _spender, allowance)\r\n\r\n    return True\r\n\r\n@external\r\ndef add_reward(_reward_token: address, _distributor: address):\r\n    \"\"\"\r\n    @notice Set the active reward contract\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: only owner\r\n\r\n    reward_count: uint256 = self.reward_count\r\n    assert reward_count < MAX_REWARDS\r\n    assert self.reward_data[_reward_token].distributor == ZERO_ADDRESS\r\n\r\n    self.reward_data[_reward_token].distributor = _distributor\r\n    self.reward_tokens[reward_count] = _reward_token\r\n    self.reward_count = reward_count + 1\r\n\r\n@external\r\ndef set_reward_distributor(_reward_token: address, _distributor: address):\r\n    current_distributor: address = self.reward_data[_reward_token].distributor\r\n\r\n    assert msg.sender == current_distributor or msg.sender == self.admin\r\n    assert current_distributor != ZERO_ADDRESS\r\n    assert _distributor != ZERO_ADDRESS\r\n\r\n    self.reward_data[_reward_token].distributor = _distributor\r\n\r\n@external\r\ndef set_claimer(_claimer: address):\r\n    assert msg.sender == self.admin\r\n    assert _claimer != ZERO_ADDRESS\r\n\r\n    self.claimer = _claimer\r\n\r\n@external\r\n@nonreentrant(\"lock\")\r\ndef deposit_reward_token(_reward_token: address, _amount: uint256):\r\n    assert msg.sender == self.reward_data[_reward_token].distributor\r\n\r\n    self._checkpoint_rewards(ZERO_ADDRESS, self.totalSupply, False, ZERO_ADDRESS)\r\n\r\n    response: Bytes[32] = raw_call(\r\n        _reward_token,\r\n        concat(\r\n            method_id(\"transferFrom(address,address,uint256)\"),\r\n            convert(msg.sender, bytes32),\r\n            convert(self, bytes32),\r\n            convert(_amount, bytes32),\r\n        ),\r\n        max_outsize=32,\r\n    )\r\n    if len(response) != 0:\r\n        assert convert(response, bool)\r\n\r\n    period_finish: uint256 = self.reward_data[_reward_token].period_finish\r\n    if block.timestamp >= period_finish:\r\n        self.reward_data[_reward_token].rate = _amount / WEEK\r\n    else:\r\n        remaining: uint256 = period_finish - block.timestamp\r\n        leftover: uint256 = remaining * self.reward_data[_reward_token].rate\r\n        self.reward_data[_reward_token].rate = (_amount + leftover) / WEEK\r\n\r\n    self.reward_data[_reward_token].last_update = block.timestamp\r\n    self.reward_data[_reward_token].period_finish = block.timestamp + WEEK\r\n\r\n    log RewardDataUpdate(_reward_token,_amount)\r\n\r\n@external\r\ndef commit_transfer_ownership(addr: address):\r\n    \"\"\"\r\n    @notice Transfer ownership of Gauge to `addr`\r\n    @param addr Address to have ownership transferred to\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin only\r\n    assert addr != ZERO_ADDRESS  # dev: future admin cannot be the 0 address\r\n\r\n    self.future_admin = addr\r\n    self.admin = addr\r\n    log CommitOwnership(addr)\r\n\r\n\r\n@external\r\ndef accept_transfer_ownership():\r\n    \"\"\"\r\n    @notice Accept a pending ownership transfer\r\n    \"\"\"\r\n    _admin: address = self.future_admin\r\n    assert msg.sender == _admin  # dev: future admin only\r\n\r\n    self.admin = _admin\r\n    log ApplyOwnership(_admin)", "ABI": "[{\"name\":\"Deposit\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Withdraw\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateLiquidityLimit\",\"inputs\":[{\"name\":\"user\",\"type\":\"address\",\"indexed\":false},{\"name\":\"original_balance\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"original_supply\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"working_balance\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"working_supply\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"CommitOwnership\",\"inputs\":[{\"name\":\"admin\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ApplyOwnership\",\"inputs\":[{\"name\":\"admin\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Transfer\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_to\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_spender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RewardDataUpdate\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_staking_token\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_SDT\",\"type\":\"address\"},{\"name\":\"_voting_escrow\",\"type\":\"address\"},{\"name\":\"_veBoost_proxy\",\"type\":\"address\"},{\"name\":\"_distributor\",\"type\":\"address\"},{\"name\":\"_vault\",\"type\":\"address\"},{\"name\":\"symbol\",\"type\":\"string\"}],\"outputs\":[],\"gas\":616542},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2418},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"user_checkpoint\",\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":3493693},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"claimed_reward\",\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2976},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"claimable_reward\",\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_reward_token\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":26704},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_rewards_receiver\",\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[],\"gas\":35613},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_vault\",\"inputs\":[{\"name\":\"_vault\",\"type\":\"address\"}],\"outputs\":[],\"gas\":37725},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim_rewards\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim_rewards\",\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim_rewards\",\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim_rewards_for\",\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[],\"gas\":3464274},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"kick\",\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"outputs\":[],\"gas\":3514517},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_claim_rewards\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_claim_rewards\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":14116426},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":14154376},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":39451},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"increaseAllowance\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_added_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":41995},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"decreaseAllowance\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtracted_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":42019},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_reward\",\"inputs\":[{\"name\":\"_reward_token\",\"type\":\"address\"},{\"name\":\"_distributor\",\"type\":\"address\"}],\"outputs\":[],\"gas\":113033},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_reward_distributor\",\"inputs\":[{\"name\":\"_reward_token\",\"type\":\"address\"},{\"name\":\"_distributor\",\"type\":\"address\"}],\"outputs\":[],\"gas\":40783},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_claimer\",\"inputs\":[{\"name\":\"_claimer\",\"type\":\"address\"}],\"outputs\":[],\"gas\":38212},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit_reward_token\",\"inputs\":[{\"name\":\"_reward_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":3585460},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"commit_transfer_ownership\",\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"outputs\":[],\"gas\":75181},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_transfer_ownership\",\"inputs\":[],\"outputs\":[],\"gas\":40020},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"SDT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3078},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"voting_escrow\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3108},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"veBoost_proxy\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3138},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"staking_token\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3168},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"decimal_staking_token\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3198},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3443},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3258},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3718},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"gas\":13548},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"gas\":13578},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"working_balances\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3593},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"working_supply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3408},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"integrate_checkpoint_of\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3653},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"reward_count\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3468},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"reward_tokens\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3543},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"reward_data\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"distributor\",\"type\":\"address\"},{\"name\":\"period_finish\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"last_update\",\"type\":\"uint256\"},{\"name\":\"integral\",\"type\":\"uint256\"}],\"gas\":14973},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewards_receiver\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3773},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"reward_integral_for\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":4018},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3618},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3648},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"claimer\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3678},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"initialized\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":3708},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vault\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3738}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.2.16", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}