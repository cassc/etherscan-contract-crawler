{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// Created by petdomaa100\r\n\r\npragma solidity 0.8.11;\r\n\r\n\r\nlibrary Strings {\r\n\tfunction toString(uint256 value) internal pure returns(string memory) {\r\n\t\tif (value == 0) return \"0\";\r\n\r\n\t\tuint256 temp = value;\r\n\t\tuint256 digits;\r\n\r\n\t\twhile (temp != 0) {\r\n\t\t\tdigits++;\r\n\t\t\ttemp /= 10;\r\n\t\t}\r\n\r\n\t\tbytes memory buffer = new bytes(digits);\r\n\r\n\t\twhile (value != 0) {\r\n\t\t\tdigits -= 1;\r\n\t\t\tbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n\t\t\tvalue /= 10;\r\n\t\t}\r\n\r\n\t\treturn string(buffer);\r\n\t}\r\n}\r\n\r\nlibrary Address {\r\n\tfunction isContract(address account) internal view returns(bool) {\r\n\t\treturn account.code.length > 0;\r\n\t}\r\n}\r\n\r\nlibrary Counters {\r\n\tstruct Counter {\r\n\t\tuint256 _value;\r\n\t}\r\n\r\n\r\n\tfunction current(Counter storage counter) internal view returns(uint256) {\r\n\t\treturn counter._value;\r\n\t}\r\n\r\n\tfunction increment(Counter storage counter) internal {\r\n\t\tunchecked {\r\n\t\t\tcounter._value += 1;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction decrement(Counter storage counter) internal {\r\n\t\tuint256 value = counter._value;\r\n\t\trequire(value > 0, \"Counter: decrement overflow\");\r\n\r\n\t\tunchecked {\r\n\t\t\tcounter._value = value - 1;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction reset(Counter storage counter) internal {\r\n\t\tcounter._value = 0;\r\n\t}\r\n}\r\n\r\n\r\ninterface IERC165 {\r\n\tfunction supportsInterface(bytes4 interfaceID) external view returns(bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenID);\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenID);\r\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n\tfunction balanceOf(address owner) external view returns(uint256 balance);\r\n\r\n\tfunction ownerOf(uint256 tokenID) external view returns(address owner);\r\n\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenID) external;\r\n\r\n\tfunction transferFrom(address from, address to, uint256 tokenID) external;\r\n\r\n\tfunction approve(address to, uint256 tokenID) external;\r\n\r\n\tfunction getApproved(uint256 tokenID) external view returns(address operator);\r\n\r\n\tfunction setApprovalForAll(address operator, bool _approved) external;\r\n\r\n\tfunction isApprovedForAll(address owner, address operator) external view returns(bool);\r\n\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenID, bytes calldata data) external;\r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n\tfunction name() external view returns(string memory);\r\n\r\n\tfunction symbol() external view returns(string memory);\r\n\r\n\tfunction tokenURI(uint256 tokenID) external view returns(string memory);\r\n}\r\n\r\ninterface IERC721Receiver {\r\n\tfunction onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns(bytes4);\r\n}\r\n\r\n\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns(address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns(bytes calldata) {\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n \r\n\tconstructor() {\r\n\t\t_transferOwnership(_msgSender());\r\n\t}\r\n\r\n\r\n\tfunction owner() public view virtual returns(address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\r\n\t\t_transferOwnership(newOwner);\r\n\t}\r\n\r\n\tfunction _transferOwnership(address newOwner) internal virtual {\r\n\t\taddress oldOwner = _owner;\r\n\r\n\t\t_owner = newOwner;\r\n\r\n\t\temit OwnershipTransferred(oldOwner, newOwner);\r\n\t}\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n\tfunction supportsInterface(bytes4 interfaceID) public view virtual override returns(bool) {\r\n\t\treturn interfaceID == type(IERC165).interfaceId;\r\n\t}\r\n}\r\n\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n\tusing Address for address;\r\n\tusing Strings for uint256;\r\n\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\r\n\tmapping(uint256 => address) private _owners;\r\n\tmapping(address => uint256) private _balances;\r\n\tmapping(uint256 => address) private _tokenApprovals;\r\n\tmapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n\tconstructor(string memory name_, string memory symbol_) {\r\n\t\t_name = name_;\r\n\t\t_symbol = symbol_;\r\n\t}\r\n\r\n\tfunction supportsInterface(bytes4 interfaceID) public view virtual override(ERC165, IERC165) returns(bool) {\r\n\t\treturn interfaceID == type(IERC721).interfaceId || interfaceID == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceID);\r\n\t}\r\n\r\n\tfunction balanceOf(address owner) public view virtual override returns(uint256) {\r\n\t\trequire(owner != address(0), \"ERC721: balance query for the zero address\");\r\n\r\n\t\treturn _balances[owner];\r\n\t}\r\n\r\n\tfunction ownerOf(uint256 tokenId) public view virtual override returns(address) {\r\n\t\taddress owner = _owners[tokenId];\r\n\r\n\t\trequire(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n\r\n\t\treturn owner;\r\n\t}\r\n\r\n\tfunction name() public view virtual override returns(string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public view virtual override returns(string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction tokenURI(uint256 tokenID) public view virtual override returns(string memory) {\r\n\t\trequire(_exists(tokenID), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n\t\tstring memory baseURI = _baseURI();\r\n\r\n\t\treturn bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenID.toString())) : \"\";\r\n\t}\r\n\r\n\tfunction _baseURI() internal view virtual returns(string memory) {\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\tfunction approve(address to, uint256 tokenID) public virtual override {\r\n\t\taddress owner = ERC721.ownerOf(tokenID);\r\n\t\trequire(to != owner, \"ERC721: approval to current owner\");\r\n\r\n\t\trequire(_msgSender() == owner || isApprovedForAll(owner, _msgSender()), \"ERC721: approve caller is not owner nor approved for all\");\r\n\r\n\t\t_approve(to, tokenID);\r\n\t}\r\n\r\n\tfunction getApproved(uint256 tokenID) public view virtual override returns(address) {\r\n\t\trequire(_exists(tokenID), \"ERC721: approved query for nonexistent token\");\r\n\r\n\t\treturn _tokenApprovals[tokenID];\r\n\t}\r\n\r\n\tfunction setApprovalForAll(address operator, bool approved) public virtual override {\r\n\t\t_setApprovalForAll(_msgSender(), operator, approved);\r\n\t}\r\n\r\n\tfunction isApprovedForAll(address owner, address operator) public view virtual override returns(bool) {\r\n\t\treturn _operatorApprovals[owner][operator];\r\n\t}\r\n\r\n\tfunction transferFrom(address from, address to, uint256 tokenID) public virtual override {\r\n\t\t//solhint-disable-next-line max-line-length\r\n\t\trequire(_isApprovedOrOwner(_msgSender(), tokenID), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n\t\t_transfer(from, to, tokenID);\r\n\t}\r\n\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenID) public virtual override {\r\n\t\tsafeTransferFrom(from, to, tokenID, \"\");\r\n\t}\r\n\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenID, bytes memory _data) public virtual override {\r\n\t\trequire(_isApprovedOrOwner(_msgSender(), tokenID), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n\t\t_safeTransfer(from, to, tokenID, _data);\r\n\t}\r\n\r\n\tfunction _safeTransfer(address from, address to, uint256 tokenID, bytes memory _data) internal virtual {\r\n\t\t_transfer(from, to, tokenID);\r\n\r\n\t\trequire(_checkOnERC721Received(from, to, tokenID, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n\t}\r\n\r\n\tfunction _exists(uint256 tokenID) internal view virtual returns(bool) {\r\n\t\treturn _owners[tokenID] != address(0);\r\n\t}\r\n\r\n\tfunction _isApprovedOrOwner(address spender, uint256 tokenID) internal view virtual returns(bool) {\r\n\t\trequire(_exists(tokenID), \"ERC721: operator query for nonexistent token\");\r\n\r\n\t\taddress owner = ERC721.ownerOf(tokenID);\r\n\r\n\t\treturn (spender == owner || getApproved(tokenID) == spender || isApprovedForAll(owner, spender));\r\n\t}\r\n\r\n\tfunction _safeMint(address to, uint256 tokenID) internal virtual {\r\n\t\t_safeMint(to, tokenID, \"\");\r\n\t}\r\n\r\n\tfunction _safeMint(address to, uint256 tokenID, bytes memory _data) internal virtual {\r\n\t\t_mint(to, tokenID);\r\n\r\n\t\trequire(_checkOnERC721Received(address(0), to, tokenID, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n\t}\r\n\r\n\tfunction _mint(address to, uint256 tokenID) internal virtual {\r\n\t\trequire(to != address(0), \"ERC721: mint to the zero address\");\r\n\t\trequire(!_exists(tokenID), \"ERC721: token already minted\");\r\n\r\n\t\t_beforeTokenTransfer(address(0), to, tokenID);\r\n\r\n\t\t_balances[to] += 1;\r\n\t\t_owners[tokenID] = to;\r\n\r\n\t\temit Transfer(address(0), to, tokenID);\r\n\r\n\t\t_afterTokenTransfer(address(0), to, tokenID);\r\n\t}\r\n\r\n\tfunction _burn(uint256 tokenID) internal virtual {\r\n\t\taddress owner = ERC721.ownerOf(tokenID);\r\n\r\n\t\t_beforeTokenTransfer(owner, address(0), tokenID);\r\n\t\t_approve(address(0), tokenID);\r\n\r\n\t\t_balances[owner] -= 1;\r\n\t\tdelete _owners[tokenID];\r\n\r\n\t\temit Transfer(owner, address(0), tokenID);\r\n\r\n\t\t_afterTokenTransfer(owner, address(0), tokenID);\r\n\t}\r\n\r\n\tfunction _transfer(address from, address to, uint256 tokenID) internal virtual {\r\n\t\trequire(ERC721.ownerOf(tokenID) == from, \"ERC721: transfer from incorrect owner\");\r\n\t\trequire(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(from, to, tokenID);\r\n\t\t_approve(address(0), tokenID);\r\n\r\n\t\t_balances[from] -= 1;\r\n\t\t_balances[to] += 1;\r\n\t\t_owners[tokenID] = to;\r\n\r\n\t\temit Transfer(from, to, tokenID);\r\n\r\n\t\t_afterTokenTransfer(from, to, tokenID);\r\n\t}\r\n\r\n\tfunction _approve(address to, uint256 tokenID) internal virtual {\r\n\t\t_tokenApprovals[tokenID] = to;\r\n\r\n\t\temit Approval(ERC721.ownerOf(tokenID), to, tokenID);\r\n\t}\r\n\r\n\tfunction _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\r\n\t\trequire(owner != operator, \"ERC721: approve to caller\");\r\n\t\t\r\n\t\t_operatorApprovals[owner][operator] = approved;\r\n\t\t\r\n\t\temit ApprovalForAll(owner, operator, approved);\r\n\t}\r\n\r\n\tfunction _checkOnERC721Received(address from, address to, uint256 tokenID, bytes memory _data) private returns(bool) {\r\n\t\tif (to.isContract()) {\r\n\t\t\ttry IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenID, _data) returns(bytes4 retval) {\r\n\t\t\t\treturn retval == IERC721Receiver.onERC721Received.selector;\r\n\t\t\t} catch (bytes memory reason) {\r\n\t\t\t\tif (reason.length == 0) revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n\t\t\t\t\r\n\t\t\t\telse {\r\n\t\t\t\t\tassembly {\r\n\t\t\t\t\t\trevert(add(32, reason), mload(reason))\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\telse return true;\r\n\t}\r\n\r\n\tfunction _beforeTokenTransfer(address from, address to, uint256 tokenID) internal virtual {}\r\n\r\n\tfunction _afterTokenTransfer(address from, address to, uint256 tokenID) internal virtual {}\r\n}\r\n\r\n\r\n\r\ncontract CyberAgentsNFT is ERC721, Ownable {\r\n\tusing Counters for Counters.Counter;\r\n\tusing Strings for uint256;\r\n\r\n\r\n\tbool public paused;\r\n\tbool public revealed;\r\n\r\n\tstring private unrevealedURI;\r\n\tstring private baseURI;\r\n\tstring private uriSuffix;\r\n\t\r\n\tuint256 public cost;\r\n\tuint256 public maxSupply;\r\n\tuint256 public freeToMintSupply;\r\n\tuint256 public maxMintAmountPerTX;\r\n\r\n\tCounters.Counter private supply;\r\n\r\n\r\n\tconstructor(string memory _initUnrevealedURI) ERC721(\"Cyber Agents\", \"CA\") {\r\n\t\tpaused = true;\r\n\t\trevealed = false;\r\n\r\n\t\tcost = 0;\r\n\t\tmaxSupply = 5555;\r\n\t\tfreeToMintSupply = 555;\r\n\t\tmaxMintAmountPerTX = 5;\r\n\r\n\t\tsetURIsuffix(\".json\");\r\n\t\tsetUnrevealedURI(_initUnrevealedURI);\r\n\t}\r\n\r\n\r\n\tfunction mint(uint256 amount) public payable {\r\n\t\tuint256 newSupply = supply.current() + amount;\r\n\r\n\t\trequire(amount > 0 && amount <= maxMintAmountPerTX, \"Invalid mint amount\");\r\n\t\trequire(newSupply <= maxSupply, \"Max token supply exceeded\");\r\n\t\trequire(!paused, \"Minting is paused\");\r\n\t\trequire(msg.value >= cost * amount, \"Insufficient funds\");\r\n\r\n\r\n\t\t_mintLoop(_msgSender(), amount);\r\n\r\n\r\n\t\tif (cost == 0 && newSupply >= freeToMintSupply) cost = 0.05 ether;\r\n\t}\r\n\r\n\tfunction airDrop(address[] calldata addresses, uint8[] calldata amounts) public onlyOwner {\r\n\t\tassert(addresses.length == amounts.length);\r\n\t\tassert(addresses.length > 0 && amounts.length > 0);\r\n\r\n\r\n\t\tuint256 totalAmount;\r\n\t\tfor (uint256 i = 0; i < amounts.length; i++) totalAmount += amounts[0];\r\n\r\n\t\tuint256 newSupply = supply.current() + totalAmount;\r\n\t\trequire(newSupply <= maxSupply, \"Max token supply exceeded\");\r\n\r\n\r\n\t\tfor (uint256 i = 0; i < addresses.length; i++) {\r\n\t\t\t_mintLoop(addresses[i], amounts[i]);\r\n\t\t}\r\n\r\n\r\n\t\tif (cost == 0 && newSupply >= freeToMintSupply) cost = 0.07 ether;\r\n\t}\r\n\r\n\tfunction flipPausedState() public onlyOwner {\r\n\t\tpaused = !paused;\r\n\t}\r\n\r\n\tfunction reveal(string memory _initBaseURI) public onlyOwner {\r\n\t\trevealed = true;\r\n\r\n\t\tsetBaseURI(_initBaseURI);\r\n\t}\r\n\r\n\tfunction withdraw() public onlyOwner {\r\n\t\t(bool success, ) = payable(owner()).call{ value: address(this).balance }(\"\");\r\n\t\trequire(success);\r\n\t}\r\n\r\n\r\n\tfunction totalSupply() public view returns(uint256) {\r\n\t\treturn supply.current();\r\n\t}\r\n\r\n\tfunction tokenURI(uint256 tokenID) public view override returns(string memory) {\r\n\t\trequire(_exists(tokenID), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n\t\tif (!revealed) return unrevealedURI;\r\n\r\n\r\n\t\tstring memory currentBaseURI = _baseURI();\r\n\r\n\t\treturn bytes(currentBaseURI).length > 0 ? string( abi.encodePacked(currentBaseURI, tokenID.toString(), uriSuffix) ) : \"\";\r\n\t}\r\n\r\n\tfunction walletOfOwner(address _address) public view returns(uint256[] memory) {\r\n\t\tuint256 ownerTokenCount = balanceOf(_address);\r\n\r\n\t\tuint256[] memory ownedTokenIDs = new uint256[](ownerTokenCount);\r\n\r\n\r\n\t\tuint256 tokenIndex = 1;\r\n\t\tuint256 ownedTokenIndex = 0;\r\n\r\n\t\twhile (ownedTokenIndex < ownerTokenCount && tokenIndex <= maxSupply) {\r\n\t\t\taddress owner = ownerOf(tokenIndex);\r\n\r\n\t\t\tif (owner == _address) {\r\n\t\t\t\townedTokenIDs[ownedTokenIndex] = tokenIndex;\r\n\r\n\t\t\t\townedTokenIndex++;\r\n\t\t\t}\r\n\r\n\t\t\ttokenIndex++;\r\n\t\t}\r\n\r\n\r\n\t\treturn ownedTokenIDs;\r\n\t}\r\n\r\n\r\n\tfunction setBaseURI(string memory newBaseURI) public onlyOwner {\r\n\t\tbaseURI = newBaseURI;\r\n\t}\r\n\r\n\tfunction setUnrevealedURI(string memory newUnrevealedURI) public onlyOwner {\r\n\t\tunrevealedURI = newUnrevealedURI;\r\n\t}\r\n\r\n\tfunction setURIsuffix(string memory newSuffix) public onlyOwner {\r\n\t\turiSuffix = newSuffix;\r\n\t}\r\n\r\n\tfunction setMaxSupply(uint256 newAmount) public onlyOwner {\r\n\t\tmaxSupply = newAmount;\r\n\t}\r\n\r\n\tfunction setFreeToMintSupply(uint256 newAmount) public onlyOwner {\r\n\t\tfreeToMintSupply = newAmount;\r\n\t}\r\n\r\n\tfunction setMaxMintAmountPerTX(uint256 newAmount) public onlyOwner {\r\n\t\tmaxMintAmountPerTX = newAmount;\r\n\t}\r\n\r\n\tfunction setCost(uint256 newCost) public onlyOwner {\r\n\t\tcost = newCost;\r\n\t}\r\n\r\n\r\n\tfunction _baseURI() internal view override returns(string memory) {\r\n\t\treturn baseURI;\r\n\t}\r\n\r\n\tfunction _mintLoop(address to, uint256 amount) internal {\r\n\t\tfor (uint256 i = 0; i < amount; i++) {\r\n\t\t\tsupply.increment();\r\n\r\n\t\t\t_safeMint(to, supply.current());\r\n\t\t}\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_initUnrevealedURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"amounts\",\"type\":\"uint8[]\"}],\"name\":\"airDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipPausedState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeToMintSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintAmountPerTX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_initBaseURI\",\"type\":\"string\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setFreeToMintSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxMintAmountPerTX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newSuffix\",\"type\":\"string\"}],\"name\":\"setURIsuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUnrevealedURI\",\"type\":\"string\"}],\"name\":\"setUnrevealedURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CyberAgentsNFT", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b06df1e16e2b0980a3c1aad6cdd5838fb72f75895d3a9209d73a85bb8c073b12"}