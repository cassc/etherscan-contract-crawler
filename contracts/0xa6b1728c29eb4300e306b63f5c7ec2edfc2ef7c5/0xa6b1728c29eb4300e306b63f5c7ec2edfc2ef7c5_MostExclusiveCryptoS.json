{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Most.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.18; // solhint-disable-line\\n\\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\\ncontract ERC721 {\\n    // Required methods\\n    function approve(address _to, uint256 _tokenId) public;\\n\\n    function balanceOf(address _owner) public view returns (uint256 balance);\\n\\n    function implementsERC721() public pure returns (bool);\\n\\n    function ownerOf(uint256 _tokenId) public view returns (address addr);\\n\\n    function takeOwnership(uint256 _tokenId) public;\\n\\n    function totalSupply() public view returns (uint256 total);\\n\\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\\n\\n    function transfer(address _to, uint256 _tokenId) public;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 tokenId);\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 tokenId\\n    );\\n\\n    // Optional\\n    // function name() public view returns (string name);\\n    // function symbol() public view returns (string symbol);\\n    // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\\n    // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\\n}\\n\\ncontract MostExclusiveCryptoSite is ERC721 {\\n    /*** EVENTS ***/\\n\\n    /// @dev The TokenSold event is fired whenever a token is sold.\\n    event TokenSold(\\n        uint256 tokenId,\\n        uint256 oldPrice,\\n        uint256 newPrice,\\n        address prevOwner,\\n        address winner,\\n        string name\\n    );\\n\\n    /// @dev Transfer event as defined in current draft of ERC721.\\n    ///  ownership is assigned, including births.\\n    event Transfer(address from, address to, uint256 tokenId);\\n\\n    /*** CONSTANTS ***/\\n\\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\\n    string public constant NAME = \\\"MostExclusiveCryptoSite\\\"; // solhint-disable-line\\n    string public constant SYMBOL = \\\"MostExclusiveCryptoSite\\\"; // solhint-disable-line\\n\\n    /*** STORAGE ***/\\n\\n    /// @dev A mapping from token IDs to the address that owns them. All persons have\\n    ///  some valid owner address.\\n    mapping(uint256 => address) public tokenIndexToOwner;\\n\\n    // @dev A mapping from owner address to count of tokens that address owns.\\n    //  Used internally inside balanceOf() to resolve ownership count.\\n    mapping(address => uint256) private ownershipTokenCount;\\n\\n    /// @dev A mapping from tokenIds to an address that has been approved to call\\n    ///  transferFrom(). Each Person can only have one approved address for transfer\\n    ///  at any time. A zero value means no approval is outstanding.\\n    mapping(uint256 => address) public tokenIndexToApproved;\\n\\n    // @dev A mapping from tokenIds to the price of the token.\\n    mapping(uint256 => uint256) private tokenIndexToPrice;\\n\\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\\n    address public owner;\\n\\n    /*** DATATYPES ***/\\n    struct Token {\\n        string name;\\n    }\\n\\n    Token[] public tokens;\\n\\n    /*** ACCESS MODIFIERS ***/\\n    /// @dev Access modifier for CEO-only functionality\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /*** CONSTRUCTOR ***/\\n    function MostExclusiveCryptoSite(string _name, uint256 _price) public {\\n        owner = msg.sender;\\n        _createToken(_name, msg.sender, _price);\\n    }\\n\\n    /*** PUBLIC FUNCTIONS ***/\\n    /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\\n    ///  clear all approvals.\\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\\n    /// @dev Required for ERC-721 compliance.\\n    function approve(address _to, uint256 _tokenId) public {\\n        // Caller must own token.\\n        require(_owns(msg.sender, _tokenId));\\n\\n        tokenIndexToApproved[_tokenId] = _to;\\n\\n        Approval(msg.sender, _to, _tokenId);\\n    }\\n\\n    /// For querying balance of a particular account\\n    /// @param _owner The address for balance query\\n    /// @dev Required for ERC-721 compliance.\\n    function balanceOf(address _owner) public view returns (uint256 balance) {\\n        return ownershipTokenCount[_owner];\\n    }\\n\\n    function implementsERC721() public pure returns (bool) {\\n        return true;\\n    }\\n\\n    /// @dev Required for ERC-721 compliance.\\n    function name() public pure returns (string) {\\n        return NAME;\\n    }\\n\\n    /// For querying owner of token\\n    /// @param _tokenId The tokenID for owner inquiry\\n    /// @dev Required for ERC-721 compliance.\\n    function ownerOf(uint256 _tokenId) public view returns (address _owner) {\\n        _owner = tokenIndexToOwner[_tokenId];\\n        require(owner != address(0));\\n    }\\n\\n    function payout(address _to) public onlyOwner {\\n        _payout(_to);\\n    }\\n\\n    // Allows someone to send ether and obtain the token\\n    function purchase(uint256 _tokenId) public payable {\\n        address oldOwner = tokenIndexToOwner[_tokenId];\\n        address newOwner = msg.sender;\\n\\n        uint256 sellingPrice = tokenIndexToPrice[_tokenId];\\n\\n        // Making sure token owner is not sending to self\\n        require(oldOwner != newOwner);\\n\\n        // Safety check to prevent against an unexpected 0x0 default.\\n        require(_addressNotNull(newOwner));\\n\\n        // Making sure sent amount is greater than or equal to the sellingPrice\\n        require(msg.value >= sellingPrice);\\n\\n        uint256 payment = uint256(\\n            SafeMath.div(SafeMath.mul(sellingPrice, 95), 100)\\n        );\\n        uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\\n\\n        // Update prices\\n\\n        tokenIndexToPrice[_tokenId] = SafeMath.mul(sellingPrice, 2);\\n        _transfer(oldOwner, newOwner, _tokenId);\\n\\n        // Pay previous tokenOwner if owner is not contract\\n        if (oldOwner != address(this)) {\\n            oldOwner.transfer(payment); //(1-0.06)\\n        }\\n\\n        TokenSold(\\n            _tokenId,\\n            sellingPrice,\\n            tokenIndexToPrice[_tokenId],\\n            oldOwner,\\n            newOwner,\\n            tokens[_tokenId].name\\n        );\\n\\n        msg.sender.transfer(purchaseExcess);\\n    }\\n\\n    function priceOf(uint256 _tokenId) public view returns (uint256 price) {\\n        return tokenIndexToPrice[_tokenId];\\n    }\\n\\n    /// @dev Assigns a new address to act as the Owner. Only available to the current CEO.\\n    /// @param _newOwner The address of the new Owner\\n    function setOwner(address _newOwner) public onlyOwner {\\n        require(_newOwner != address(0));\\n\\n        owner = _newOwner;\\n    }\\n\\n    /// @dev Required for ERC-721 compliance.\\n    function symbol() public pure returns (string) {\\n        return SYMBOL;\\n    }\\n\\n    /// @notice Allow pre-approved user to take ownership of a token\\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\\n    /// @dev Required for ERC-721 compliance.\\n    function takeOwnership(uint256 _tokenId) public {\\n        address newOwner = msg.sender;\\n        address oldOwner = tokenIndexToOwner[_tokenId];\\n\\n        // Safety check to prevent against an unexpected 0x0 default.\\n        require(_addressNotNull(newOwner));\\n\\n        // Making sure transfer is approved\\n        require(_approved(newOwner, _tokenId));\\n\\n        _transfer(oldOwner, newOwner, _tokenId);\\n    }\\n\\n    /// For querying totalSupply of token\\n    /// @dev Required for ERC-721 compliance.\\n    function totalSupply() public view returns (uint256 total) {\\n        return tokens.length;\\n    }\\n\\n    /// Owner initates the transfer of the token to another account\\n    /// @param _to The address for the token to be transferred to.\\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\\n    /// @dev Required for ERC-721 compliance.\\n    function transfer(address _to, uint256 _tokenId) public {\\n        require(_owns(msg.sender, _tokenId));\\n        require(_addressNotNull(_to));\\n\\n        _transfer(msg.sender, _to, _tokenId);\\n    }\\n\\n    /// Third-party initiates transfer of token from address _from to address _to\\n    /// @param _from The address for the token to be transferred from.\\n    /// @param _to The address for the token to be transferred to.\\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\\n    /// @dev Required for ERC-721 compliance.\\n    function transferFrom(address _from, address _to, uint256 _tokenId) public {\\n        require(_owns(_from, _tokenId));\\n        require(_approved(_to, _tokenId));\\n        require(_addressNotNull(_to));\\n\\n        _transfer(_from, _to, _tokenId);\\n    }\\n\\n    /*** PRIVATE FUNCTIONS ***/\\n    /// Safety check on _to address to prevent against an unexpected 0x0 default.\\n    function _addressNotNull(address _to) private pure returns (bool) {\\n        return _to != address(0);\\n    }\\n\\n    /// For checking approval of transfer for address _to\\n    function _approved(\\n        address _to,\\n        uint256 _tokenId\\n    ) private view returns (bool) {\\n        return tokenIndexToApproved[_tokenId] == _to;\\n    }\\n\\n    /// Check for token ownership\\n    function _owns(\\n        address claimant,\\n        uint256 _tokenId\\n    ) private view returns (bool) {\\n        return claimant == tokenIndexToOwner[_tokenId];\\n    }\\n\\n    /// For paying out balance on contract\\n    function _payout(address _to) private {\\n        if (_to == address(0)) {\\n            owner.transfer(this.balance);\\n        } else {\\n            _to.transfer(this.balance);\\n        }\\n    }\\n\\n    /// @dev Assigns ownership of a specific Token to an address.\\n    function _transfer(address _from, address _to, uint256 _tokenId) private {\\n        // Since the number of persons is capped to 2^32 we can't overflow this\\n        ownershipTokenCount[_to]++;\\n        //transfer ownership\\n        tokenIndexToOwner[_tokenId] = _to;\\n\\n        // When creating new tokens _from is 0x0, but we can't account that address.\\n        if (_from != address(0)) {\\n            ownershipTokenCount[_from]--;\\n            // clear any previously approved ownership exchange\\n            delete tokenIndexToApproved[_tokenId];\\n        }\\n\\n        // Emit the transfer event.\\n        Transfer(_from, _to, _tokenId);\\n    }\\n\\n    function _createToken(\\n        string _name,\\n        address _owner,\\n        uint256 _price\\n    ) private {\\n        Token memory _token = Token({name: _name});\\n        uint256 newTokenId = tokens.push(_token) - 1;\\n\\n        tokenIndexToPrice[newTokenId] = _price;\\n\\n        // This will assign ownership, and also emit the Transfer event as\\n        // per ERC721 draft\\n        _transfer(address(0), _owner, newTokenId);\\n    }\\n}\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Multiplies two numbers, throws on overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, throws on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "MostExclusiveCryptoSite", "CompilerVersion": "v0.4.18+commit.9cf6e910", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000000000000000144c75636b79205468652043727970746f20436174000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}