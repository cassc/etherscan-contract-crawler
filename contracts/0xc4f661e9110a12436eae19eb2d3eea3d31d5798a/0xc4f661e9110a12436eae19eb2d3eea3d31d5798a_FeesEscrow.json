{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/pool/FeesEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"../interfaces/IPool.sol\\\";\\nimport \\\"../interfaces/IFeesEscrow.sol\\\";\\n\\n/**\\n * @title FeesEscrow\\n *\\n * @dev FeesEscrow contract is used to receive tips from validators and transfer\\n * them to the Pool contract via calling transferToPool method by RewardEthToken contract.\\n */\\ncontract FeesEscrow is IFeesEscrow {\\n    // @dev Pool contract's address.\\n    IPool private immutable pool;\\n\\n    // @dev RewardEthToken contract's address.\\n    address private immutable rewardEthToken;\\n\\n    constructor(IPool _pool, address _rewardEthToken) {\\n        pool = _pool;\\n        rewardEthToken = _rewardEthToken;\\n    }\\n\\n    /**\\n     * @dev See {IFeesEscrow-transferToPool}.\\n     */\\n    function transferToPool() external override returns (uint256) {\\n        require(msg.sender == rewardEthToken, \\\"FeesEscrow: invalid caller\\\");\\n\\n        uint256 balance = address(this).balance;\\n\\n        if (balance == 0) {\\n            return balance;\\n        }\\n\\n        pool.receiveFees{value: balance}();\\n\\n        emit FeesTransferred(balance);\\n\\n        return balance;\\n    }\\n\\n    /**\\n     * @dev Allows FeesEscrow contract to receive MEV rewards and priority fees. Later these rewards will be transferred\\n     * to the `Pool` contract by `FeesEscrow.transferToPool` method which is called by the `RewardEthToken` contract.\\n     */\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"./IDepositContract.sol\\\";\\nimport \\\"./IPoolValidators.sol\\\";\\n\\n/**\\n * @dev Interface of the Pool contract.\\n */\\ninterface IPool {\\n    /**\\n    * @dev Event for tracking registered validators.\\n    * @param publicKey - validator public key.\\n    * @param operator - address of the validator operator.\\n    */\\n    event ValidatorRegistered(bytes publicKey, address operator);\\n\\n    /**\\n    * @dev Event for tracking scheduled deposit activation.\\n    * @param sender - address of the deposit sender.\\n    * @param validatorIndex - index of the activated validator.\\n    * @param value - deposit amount to be activated.\\n    */\\n    event ActivationScheduled(address indexed sender, uint256 validatorIndex, uint256 value);\\n\\n    /**\\n    * @dev Event for tracking activated deposits.\\n    * @param account - account the deposit was activated for.\\n    * @param validatorIndex - index of the activated validator.\\n    * @param value - amount activated.\\n    * @param sender - address of the transaction sender.\\n    */\\n    event Activated(address indexed account, uint256 validatorIndex, uint256 value, address indexed sender);\\n\\n    /**\\n    * @dev Event for tracking activated validators updates.\\n    * @param activatedValidators - new total amount of activated validators.\\n    * @param sender - address of the transaction sender.\\n    */\\n    event ActivatedValidatorsUpdated(uint256 activatedValidators, address sender);\\n\\n    /**\\n    * @dev Event for tracking updates to the minimal deposit amount considered for the activation period.\\n    * @param minActivatingDeposit - new minimal deposit amount considered for the activation.\\n    * @param sender - address of the transaction sender.\\n    */\\n    event MinActivatingDepositUpdated(uint256 minActivatingDeposit, address sender);\\n\\n    /**\\n    * @dev Event for tracking pending validators limit.\\n    * When it's exceeded, the deposits will be set for the activation.\\n    * @param pendingValidatorsLimit - pending validators percent limit.\\n    * @param sender - address of the transaction sender.\\n    */\\n    event PendingValidatorsLimitUpdated(uint256 pendingValidatorsLimit, address sender);\\n\\n    /**\\n    * @dev Event for tracking added deposits with partner.\\n    * @param partner - address of the partner.\\n    * @param amount - the amount added.\\n    */\\n    event StakedWithPartner(address indexed partner, uint256 amount);\\n\\n    /**\\n    * @dev Event for tracking added deposits with referrer.\\n    * @param referrer - address of the referrer.\\n    * @param amount - the amount added.\\n    */\\n    event StakedWithReferrer(address indexed referrer, uint256 amount);\\n\\n    /**\\n    * @dev Function for getting the total validator deposit.\\n    */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function VALIDATOR_TOTAL_DEPOSIT() external view returns (uint256);\\n\\n    /**\\n    * @dev Function for retrieving the total amount of pending validators.\\n    */\\n    function pendingValidators() external view returns (uint256);\\n\\n    /**\\n    * @dev Function for retrieving the total amount of activated validators.\\n    */\\n    function activatedValidators() external view returns (uint256);\\n\\n    /**\\n    * @dev Function for retrieving the withdrawal credentials used to\\n    * initiate pool validators withdrawal from the beacon chain.\\n    */\\n    function withdrawalCredentials() external view returns (bytes32);\\n\\n    /**\\n    * @dev Function for getting the minimal deposit amount considered for the activation.\\n    */\\n    function minActivatingDeposit() external view returns (uint256);\\n\\n    /**\\n    * @dev Function for getting the pending validators percent limit.\\n    * When it's exceeded, the deposits will be set for the activation.\\n    */\\n    function pendingValidatorsLimit() external view returns (uint256);\\n\\n    /**\\n    * @dev Function for getting the amount of activating deposits.\\n    * @param account - address of the account to get the amount for.\\n    * @param validatorIndex - index of the activated validator.\\n    */\\n    function activations(address account, uint256 validatorIndex) external view returns (uint256);\\n\\n    /**\\n    * @dev Function for setting minimal deposit amount considered for the activation period.\\n    * @param newMinActivatingDeposit - new minimal deposit amount considered for the activation.\\n    */\\n    function setMinActivatingDeposit(uint256 newMinActivatingDeposit) external;\\n\\n    /**\\n    * @dev Function for changing the total amount of activated validators.\\n    * @param newActivatedValidators - new total amount of activated validators.\\n    */\\n    function setActivatedValidators(uint256 newActivatedValidators) external;\\n\\n    /**\\n    * @dev Function for changing pending validators limit.\\n    * @param newPendingValidatorsLimit - new pending validators limit. When it's exceeded, the deposits will be set for the activation.\\n    */\\n    function setPendingValidatorsLimit(uint256 newPendingValidatorsLimit) external;\\n\\n    /**\\n    * @dev Function for checking whether validator index can be activated.\\n    * @param validatorIndex - index of the validator to check.\\n    */\\n    function canActivate(uint256 validatorIndex) external view returns (bool);\\n\\n    /**\\n    * @dev Function for retrieving the validator registration contract address.\\n    */\\n    function validatorRegistration() external view returns (IDepositContract);\\n\\n    /**\\n    * @dev Function for receiving native tokens without minting sETH.\\n    */\\n    function receiveFees() external payable;\\n\\n    /**\\n    * @dev Function for staking ether to the pool to the different tokens' recipient.\\n    * @param recipient - address of the tokens recipient.\\n    */\\n    function stakeOnBehalf(address recipient) external payable;\\n\\n    /**\\n    * @dev Function for staking ether to the pool.\\n    */\\n    function stake() external payable;\\n\\n    /**\\n    * @dev Function for staking ether with the partner that will receive the revenue share from the protocol fee.\\n    * @param partner - address of partner who will get the revenue share.\\n    */\\n    function stakeWithPartner(address partner) external payable;\\n\\n    /**\\n    * @dev Function for staking ether with the partner that will receive the revenue share from the protocol fee\\n    * and the different tokens' recipient.\\n    * @param partner - address of partner who will get the revenue share.\\n    * @param recipient - address of the tokens recipient.\\n    */\\n    function stakeWithPartnerOnBehalf(address partner, address recipient) external payable;\\n\\n    /**\\n    * @dev Function for staking ether with the referrer who will receive the one time bonus.\\n    * @param referrer - address of referrer who will get its referral bonus.\\n    */\\n    function stakeWithReferrer(address referrer) external payable;\\n\\n    /**\\n    * @dev Function for staking ether with the referrer who will receive the one time bonus\\n    * and the different tokens' recipient.\\n    * @param referrer - address of referrer who will get its referral bonus.\\n    * @param recipient - address of the tokens recipient.\\n    */\\n    function stakeWithReferrerOnBehalf(address referrer, address recipient) external payable;\\n\\n    /**\\n    * @dev Function for minting account's tokens for the specific validator index.\\n    * @param account - account address to activate the tokens for.\\n    * @param validatorIndex - index of the activated validator.\\n    */\\n    function activate(address account, uint256 validatorIndex) external;\\n\\n    /**\\n    * @dev Function for minting account's tokens for the specific validator indexes.\\n    * @param account - account address to activate the tokens for.\\n    * @param validatorIndexes - list of activated validator indexes.\\n    */\\n    function activateMultiple(address account, uint256[] calldata validatorIndexes) external;\\n\\n    /**\\n    * @dev Function for registering new pool validator registration.\\n    * @param depositData - the deposit data to submit for the validator.\\n    */\\n    function registerValidator(IPoolValidators.DepositData calldata depositData) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeesEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Interface of the FeesEscrow contract.\\n */\\ninterface IFeesEscrow {\\n    /**\\n    * @dev Event for tracking fees withdrawals to Pool contract.\\n    * @param amount - the number of fees.\\n    */\\n    event FeesTransferred(uint256 amount);\\n\\n    /**\\n    * @dev Function is used to transfer accumulated rewards to Pool contract.\\n    * Can only be executed by the RewardEthToken contract.\\n    */\\n    function transferToPool() external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDepositContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.7.5;\\n\\n// This interface is designed to be compatible with the Vyper version.\\n/// @notice This is the Ethereum 2.0 deposit contract interface.\\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\\n/// https://github.com/ethereum/eth2.0-specs/blob/dev/solidity_deposit_contract/deposit_contract.sol\\ninterface IDepositContract {\\n    /// @notice A processed deposit event.\\n    event DepositEvent(\\n        bytes pubkey,\\n        bytes withdrawal_credentials,\\n        bytes amount,\\n        bytes signature,\\n        bytes index\\n    );\\n\\n    /// @notice Submit a Phase 0 DepositData object.\\n    /// @param pubkey A BLS12-381 public key.\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\n    /// @param signature A BLS12-381 signature.\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n    /// Used as a protection against malformed input.\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n    /// @notice Query the current deposit root hash.\\n    /// @return The deposit root hash.\\n    function get_deposit_root() external view returns (bytes32);\\n\\n    /// @notice Query the current deposit count.\\n    /// @return The deposit count encoded as a little endian 64-bit number.\\n    function get_deposit_count() external view returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolValidators.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\n/**\\n * @dev Interface of the PoolValidators contract.\\n */\\ninterface IPoolValidators {\\n    /**\\n    * @dev Structure for storing operator data.\\n    * @param depositDataMerkleRoot - validators deposit data merkle root.\\n    * @param committed - defines whether operator has committed its readiness to host validators.\\n    */\\n    struct Operator {\\n        bytes32 depositDataMerkleRoot;\\n        bool committed;\\n    }\\n\\n    /**\\n    * @dev Structure for passing information about the validator deposit data.\\n    * @param operator - address of the operator.\\n    * @param withdrawalCredentials - withdrawal credentials used for generating the deposit data.\\n    * @param depositDataRoot - hash tree root of the deposit data, generated by the operator.\\n    * @param publicKey - BLS public key of the validator, generated by the operator.\\n    * @param signature - BLS signature of the validator, generated by the operator.\\n    */\\n    struct DepositData {\\n        address operator;\\n        bytes32 withdrawalCredentials;\\n        bytes32 depositDataRoot;\\n        bytes publicKey;\\n        bytes signature;\\n    }\\n\\n    /**\\n    * @dev Event for tracking new operators.\\n    * @param operator - address of the operator.\\n    * @param depositDataMerkleRoot - validators deposit data merkle root.\\n    * @param depositDataMerkleProofs - validators deposit data merkle proofs.\\n    */\\n    event OperatorAdded(\\n        address indexed operator,\\n        bytes32 indexed depositDataMerkleRoot,\\n        string depositDataMerkleProofs\\n    );\\n\\n    /**\\n    * @dev Event for tracking operator's commitments.\\n    * @param operator - address of the operator that expressed its readiness to host validators.\\n    */\\n    event OperatorCommitted(address indexed operator);\\n\\n    /**\\n    * @dev Event for tracking operators' removals.\\n    * @param sender - address of the transaction sender.\\n    * @param operator - address of the operator.\\n    */\\n    event OperatorRemoved(\\n        address indexed sender,\\n        address indexed operator\\n    );\\n\\n    /**\\n    * @dev Constructor for initializing the PoolValidators contract.\\n    * @param _admin - address of the contract admin.\\n    * @param _pool - address of the Pool contract.\\n    * @param _oracles - address of the Oracles contract.\\n    */\\n    function initialize(address _admin, address _pool, address _oracles) external;\\n\\n    /**\\n    * @dev Function for retrieving the operator.\\n    * @param _operator - address of the operator to retrieve the data for.\\n    */\\n    function getOperator(address _operator) external view returns (bytes32, bool);\\n\\n    /**\\n    * @dev Function for checking whether validator is registered.\\n    * @param validatorId - hash of the validator public key to receive the status for.\\n    */\\n    function isValidatorRegistered(bytes32 validatorId) external view returns (bool);\\n\\n    /**\\n    * @dev Function for adding new operator.\\n    * @param _operator - address of the operator to add or update.\\n    * @param depositDataMerkleRoot - validators deposit data merkle root.\\n    * @param depositDataMerkleProofs - validators deposit data merkle proofs.\\n    */\\n    function addOperator(\\n        address _operator,\\n        bytes32 depositDataMerkleRoot,\\n        string calldata depositDataMerkleProofs\\n    ) external;\\n\\n    /**\\n    * @dev Function for committing operator. Must be called by the operator address\\n    * specified through the `addOperator` function call.\\n    */\\n    function commitOperator() external;\\n\\n    /**\\n    * @dev Function for removing operator. Can be called either by operator or admin.\\n    * @param _operator - address of the operator to remove.\\n    */\\n    function removeOperator(address _operator) external;\\n\\n    /**\\n    * @dev Function for registering the validator.\\n    * @param depositData - deposit data of the validator.\\n    * @param merkleProof - an array of hashes to verify whether the deposit data is part of the merkle root.\\n    */\\n    function registerValidator(DepositData calldata depositData, bytes32[] calldata merkleProof) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 5000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardEthToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"transferToPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FeesEscrow", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "5000000", "ConstructorArguments": "000000000000000000000000c874b064f465bdd6411d45734b56fac750cda29a00000000000000000000000020bc832ca081b91433ff6c17f85701b6e92486c5", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}