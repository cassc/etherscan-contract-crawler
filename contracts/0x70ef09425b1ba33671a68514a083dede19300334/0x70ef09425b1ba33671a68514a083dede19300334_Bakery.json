{"SourceCode": "{\"Bakery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./Token.sol\\\";\\n\\ncontract Bakery {\\n\\n\\tstruct Info {\\n\\t\\tToken[] tokens;\\n\\t\\tmapping(address =\\u003e uint256) nonce;\\n\\t\\taddress template;\\n\\t\\taddress team;\\n\\t}\\n\\tInfo private info;\\n\\n\\n\\tevent NewToken(address indexed creator, address indexed token, bool proxy, string name, string symbol, uint256 totalSupply, uint256 initialMarketCap, uint256 upperMarketCap, uint256 creatorFee, uint256 transferLimit, uint256 transferLimitTime, uint256 value, uint256 launchTime);\\n\\n\\n\\tconstructor() {\\n\\t\\tToken _template = new Token();\\n\\t\\t_template.lock();\\n\\t\\tinfo.template = address(_template);\\n\\t\\tTeam _team = new Team();\\n\\t\\t_team.initialize(msg.sender);\\n\\t\\tinfo.team = address(_team);\\n\\t}\\n\\t\\n\\tfunction salt() public returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(msg.sender, info.nonce[msg.sender]++));\\n\\t}\\n\\n\\tfunction launch(bool _deployProxy, string memory _name, string memory _symbol, uint256 _totalSupply, uint256 _initialMarketCap, uint256 _upperMarketCap, uint256 _creatorFee, uint256 _transferLimit, uint256 _transferLimitTime) external payable returns (address) {\\n\\t\\tToken _token;\\n\\t\\t{\\n\\t\\t\\tbytes32 _salt = salt();\\n\\t\\t\\tif (_deployProxy) {\\n\\t\\t\\t\\taddress _proxy;\\n\\t\\t\\t\\tbytes20 _template = bytes20(info.template);\\n\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\tlet _clone := mload(0x40)\\n\\t\\t\\t\\t\\tmstore(_clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n\\t\\t\\t\\t\\tmstore(add(_clone, 0x14), _template)\\n\\t\\t\\t\\t\\tmstore(add(_clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n\\t\\t\\t\\t\\t_proxy := create2(0, _clone, 0x37, _salt)\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t_token = Token(_proxy);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t_token = new Token{salt:_salt}();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t_token.initialize{value:msg.value}(msg.sender, _name, _symbol, _totalSupply, _initialMarketCap, _upperMarketCap, _creatorFee, _transferLimit, _transferLimitTime);\\n\\t\\tinfo.tokens.push(_token);\\n\\t\\temit NewToken(msg.sender, address(_token), _deployProxy, _name, _symbol, _totalSupply, _initialMarketCap, _upperMarketCap, _creatorFee, _transferLimit, _transferLimitTime, msg.value, block.timestamp);\\n\\t\\treturn address(_token);\\n\\t}\\n\\n\\n\\tfunction template() public view returns (address) {\\n\\t\\treturn info.template;\\n\\t}\\n\\n\\tfunction teamTemplate() public view returns (address) {\\n\\t\\treturn info.team;\\n\\t}\\n\\t\\n\\tfunction totalTokens() public view returns (uint256) {\\n\\t\\treturn info.tokens.length;\\n\\t}\\n\\n\\tfunction tokenAtIndex(uint256 _index) public view returns (Token) {\\n\\t\\treturn info.tokens[_index];\\n\\t}\\n\\n\\tfunction allTokens() public view returns (Token[] memory) {\\n\\t\\treturn info.tokens;\\n\\t}\\n}\"},\"Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n// Created with Bossman\\u0027s Bakery (bakery.mullet.capital)!\\n\\ninterface Callable {\\n\\tfunction tokenCallback(address _from, uint256 _tokens, bytes calldata _data) external returns (bool);\\n}\\n\\ninterface Router {\\n\\tstruct ExactInputSingleParams {\\n\\t\\taddress tokenIn;\\n\\t\\taddress tokenOut;\\n\\t\\tuint24 fee;\\n\\t\\taddress recipient;\\n\\t\\tuint256 amountIn;\\n\\t\\tuint256 amountOutMinimum;\\n\\t\\tuint160 sqrtPriceLimitX96;\\n\\t}\\n\\tfunction factory() external view returns (address);\\n\\tfunction positionManager() external view returns (address);\\n\\tfunction WETH9() external view returns (address);\\n\\tfunction exactInputSingle(ExactInputSingleParams calldata) external payable returns (uint256);\\n}\\n\\ninterface Factory {\\n\\tfunction createPool(address _tokenA, address _tokenB, uint24 _fee) external returns (address);\\n}\\n\\ninterface Pool {\\n\\tfunction initialize(uint160 _sqrtPriceX96) external;\\n}\\n\\ninterface PositionManager {\\n\\tstruct MintParams {\\n\\t\\taddress token0;\\n\\t\\taddress token1;\\n\\t\\tuint24 fee;\\n\\t\\tint24 tickLower;\\n\\t\\tint24 tickUpper;\\n\\t\\tuint256 amount0Desired;\\n\\t\\tuint256 amount1Desired;\\n\\t\\tuint256 amount0Min;\\n\\t\\tuint256 amount1Min;\\n\\t\\taddress recipient;\\n\\t\\tuint256 deadline;\\n\\t}\\n\\tstruct CollectParams {\\n\\t\\tuint256 tokenId;\\n\\t\\taddress recipient;\\n\\t\\tuint128 amount0Max;\\n\\t\\tuint128 amount1Max;\\n\\t}\\n\\tfunction mint(MintParams calldata) external payable returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n\\tfunction collect(CollectParams calldata) external payable returns (uint256 amount0, uint256 amount1);\\n}\\n\\ninterface ERC20 {\\n\\tfunction balanceOf(address) external view returns (uint256);\\n\\tfunction transfer(address, uint256) external returns (bool);\\n}\\n\\ninterface WETH is ERC20 {\\n\\tfunction withdraw(uint256) external;\\n}\\n\\n\\ncontract Team {\\n\\n\\tRouter constant private ROUTER = Router(0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45);\\n\\n\\tstruct Share {\\n\\t\\taddress payable user;\\n\\t\\tuint256 shares;\\n\\t}\\n\\tShare[] public shares;\\n\\tuint256 public totalShares;\\n\\tERC20 public token;\\n\\n\\n\\tfunction initialize(address _creator) external {\\n\\t\\trequire(totalShares == 0);\\n\\t\\ttoken = ERC20(msg.sender);\\n\\t\\t_addShare(_creator, 10);\\n\\t\\t_addShare(0xe6c791FBd46dB3f4EdA5f7Bb76474F4FA530733E, 6);\\n\\t\\t_addShare(0x12fe289b7588dE4ee1f1392Ce086be100f7165ed, 3);\\n\\t\\t_addShare(0xc28C9da0F8a500DFfC16Ff09a3DD1Cc4c530D346, 1);\\n\\t}\\n\\n\\treceive() external payable {}\\n\\n\\tfunction withdrawETH() public {\\n\\t\\tuint256 _balance = address(this).balance;\\n\\t\\tif (_balance \\u003e 0) {\\n\\t\\t\\tfor (uint256 i = 0; i \\u003c shares.length; i++) {\\n\\t\\t\\t\\tShare memory _share = shares[i];\\n\\t\\t\\t\\t!_share.user.send(_balance * _share.shares / totalShares);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction withdrawToken(ERC20 _token) public {\\n\\t\\tWETH _weth = WETH(ROUTER.WETH9());\\n\\t\\tif (address(_token) == address(_weth)) {\\n\\t\\t\\t_weth.withdraw(_weth.balanceOf(address(this)));\\n\\t\\t\\twithdrawETH();\\n\\t\\t} else {\\n\\t\\t\\tuint256 _balance = _token.balanceOf(address(this));\\n\\t\\t\\tif (_balance \\u003e 0) {\\n\\t\\t\\t\\tfor (uint256 i = 0; i \\u003c shares.length; i++) {\\n\\t\\t\\t\\t\\tShare memory _share = shares[i];\\n\\t\\t\\t\\t\\t_token.transfer(_share.user, _balance * _share.shares / totalShares);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction withdrawWETH() public {\\n\\t\\twithdrawToken(ERC20(ROUTER.WETH9()));\\n\\t}\\n\\n\\tfunction withdrawFees() external {\\n\\t\\twithdrawWETH();\\n\\t\\twithdrawToken(token);\\n\\t}\\n\\n\\n\\tfunction _addShare(address _user, uint256 _shares) internal {\\n\\t\\tshares.push(Share(payable(_user), _shares));\\n\\t\\ttotalShares += _shares;\\n\\t}\\n}\\n\\n\\ncontract Token {\\n\\n\\tuint256 constant private UINT_MAX = type(uint256).max;\\n\\tuint128 constant private UINT128_MAX = type(uint128).max;\\n\\tuint256 constant private MAX_NAME_LENGTH = 32;\\n\\tuint256 constant private MIN_SUPPLY = 1e16; // 0.01 tokens\\n\\tuint256 constant private MAX_SUPPLY = 1e33; // 1 quadrillion tokens\\n\\tuint256 constant private PERCENT_PRECISION = 1000; // 1 = 0.1%\\n\\tuint256 constant private MAX_TIME_LIMIT = 24 hours;\\n\\tRouter constant private ROUTER = Router(0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45);\\n\\n\\tint24 constant internal MIN_TICK = -887272;\\n\\tint24 constant internal MAX_TICK = -MIN_TICK;\\n\\tuint160 constant internal MIN_SQRT_RATIO = 4295128739;\\n\\tuint160 constant internal MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n\\tstring public name;\\n\\tstring public symbol;\\n\\tuint8 constant public decimals = 18;\\n\\n\\tstring constant public source = \\\"Created with Bossman\\u0027s Bakery (bakery.mullet.capital)!\\\";\\n\\n\\n\\tstruct User {\\n\\t\\tuint256 balance;\\n\\t\\tmapping(address =\\u003e uint256) allowance;\\n\\t}\\n\\n\\tstruct Info {\\n\\t\\tbool locked;\\n\\t\\tTeam team;\\n\\t\\taddress pool;\\n\\t\\taddress creator;\\n\\t\\tuint256 totalSupply;\\n\\t\\tuint256 initialMarketCap;\\n\\t\\tuint256 upperMarketCap;\\n\\t\\tuint256 concentratedPercent;\\n\\t\\tuint256 creatorFee;\\n\\t\\tuint256 transferLimit;\\n\\t\\tuint256 transferLimitEnd;\\n\\t\\tmapping(address =\\u003e User) users;\\n\\t\\tuint256 positionId;\\n\\t\\tstring website;\\n\\t\\tstring twitter;\\n\\t\\tstring telegram;\\n\\t\\tstring discord;\\n\\t\\tstring additionalInfo;\\n\\t}\\n\\tInfo private info;\\n\\n\\n\\tevent Transfer(address indexed from, address indexed to, uint256 tokens);\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 tokens);\\n\\n\\n\\tmodifier _onlyCreator() {\\n\\t\\trequire(msg.sender == creator());\\n\\t\\t_;\\n\\t}\\n\\n\\t\\n\\tfunction lock() external {\\n\\t\\trequire(!info.locked);\\n\\t\\trequire(totalSupply() == 0);\\n\\t\\tinfo.locked = true;\\n\\t}\\n\\t\\n\\tfunction initialize(address _creator, string memory _name, string memory _symbol, uint256 _totalSupply, uint256 _initialMarketCap, uint256 _upperMarketCap, uint256 _creatorFee, uint256 _transferLimit, uint256 _transferLimitTime) external payable {\\n\\t\\trequire(!info.locked);\\n\\t\\trequire(totalSupply() == 0);\\n\\t\\trequire(bytes(_name).length \\u003e 0 \\u0026\\u0026 bytes(_name).length \\u003c= MAX_NAME_LENGTH);\\n\\t\\trequire(bytes(_symbol).length \\u003e 0 \\u0026\\u0026 bytes(_symbol).length \\u003c= MAX_NAME_LENGTH);\\n\\t\\trequire(_totalSupply \\u003e= MIN_SUPPLY \\u0026\\u0026 _totalSupply \\u003c= MAX_SUPPLY);\\n\\t\\trequire(_initialMarketCap \\u003e 0 \\u0026\\u0026 _upperMarketCap \\u003e _initialMarketCap);\\n\\t\\trequire(_creatorFee \\u003c= PERCENT_PRECISION / 10);\\n\\t\\trequire(_transferLimitTime \\u003c= MAX_TIME_LIMIT);\\n\\t\\tinfo.team = new Team();\\n\\t\\tinfo.team.initialize(_creator);\\n\\t\\tinfo.creator = _creator;\\n\\t\\tname = _name;\\n\\t\\tsymbol = _symbol;\\n\\t\\tinfo.totalSupply = _totalSupply;\\n\\t\\tinfo.users[address(this)].balance = _totalSupply;\\n\\t\\temit Transfer(address(0x0), address(this), _totalSupply);\\n\\t\\tinfo.initialMarketCap = _initialMarketCap;\\n\\t\\tinfo.upperMarketCap = _upperMarketCap;\\n\\t\\tinfo.creatorFee = _creatorFee;\\n\\t\\t_createLP(_initialMarketCap, _upperMarketCap, _creatorFee);\\n\\t\\tinfo.transferLimit = _transferLimit;\\n\\t\\tinfo.transferLimitEnd = block.timestamp + _transferLimitTime;\\n\\t}\\n\\n\\tfunction updateAll(string memory _website, string memory _twitter, string memory _telegram, string memory _discord, string memory _info) external _onlyCreator {\\n\\t\\tinfo.website = _website;\\n\\t\\tinfo.twitter = _twitter;\\n\\t\\tinfo.telegram = _telegram;\\n\\t\\tinfo.discord = _discord;\\n\\t\\tinfo.additionalInfo = _info;\\n\\t}\\n\\n\\tfunction updateWebsite(string memory _website) external _onlyCreator {\\n\\t\\tinfo.website = _website;\\n\\t}\\n\\n\\tfunction updateTwitter(string memory _twitter) external _onlyCreator {\\n\\t\\tinfo.twitter = _twitter;\\n\\t}\\n\\n\\tfunction updateTelegram(string memory _telegram) external _onlyCreator {\\n\\t\\tinfo.telegram = _telegram;\\n\\t}\\n\\n\\tfunction updateDiscord(string memory _discord) external _onlyCreator {\\n\\t\\tinfo.discord = _discord;\\n\\t}\\n\\n\\tfunction updateInfo(string memory _info) external _onlyCreator {\\n\\t\\tinfo.additionalInfo = _info;\\n\\t}\\n\\n\\tfunction collectTradingFees() external {\\n\\t\\tPositionManager _pm = PositionManager(ROUTER.positionManager());\\n\\t\\t_pm.collect(PositionManager.CollectParams({\\n\\t\\t\\ttokenId: info.positionId,\\n\\t\\t\\trecipient: team(),\\n\\t\\t\\tamount0Max: UINT128_MAX,\\n\\t\\t\\tamount1Max: UINT128_MAX\\n\\t\\t}));\\n\\t\\tinfo.team.withdrawFees();\\n\\t}\\n\\n\\tfunction transfer(address _to, uint256 _tokens) external returns (bool) {\\n\\t\\treturn _transfer(msg.sender, _to, _tokens);\\n\\t}\\n\\n\\tfunction approve(address _spender, uint256 _tokens) external returns (bool) {\\n\\t\\treturn _approve(msg.sender, _spender, _tokens);\\n\\t}\\n\\n\\tfunction transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {\\n\\t\\tunchecked {\\n\\t\\t\\tuint256 _allowance = allowance(_from, msg.sender);\\n\\t\\t\\trequire(_allowance \\u003e= _tokens);\\n\\t\\t\\tif (_allowance != UINT_MAX) {\\n\\t\\t\\t\\tinfo.users[_from].allowance[msg.sender] -= _tokens;\\n\\t\\t\\t}\\n\\t\\t\\treturn _transfer(_from, _to, _tokens);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction transferAndCall(address _to, uint256 _tokens, bytes calldata _data) external returns (bool) {\\n\\t\\t_transfer(msg.sender, _to, _tokens);\\n\\t\\tuint32 _size;\\n\\t\\tassembly {\\n\\t\\t\\t_size := extcodesize(_to)\\n\\t\\t}\\n\\t\\tif (_size \\u003e 0) {\\n\\t\\t\\trequire(Callable(_to).tokenCallback(msg.sender, _tokens, _data));\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n\\t\\n\\n\\tfunction creator() public view returns (address) {\\n\\t\\treturn info.creator;\\n\\t}\\n\\t\\n\\tfunction team() public view returns (address) {\\n\\t\\treturn address(info.team);\\n\\t}\\n\\n\\tfunction pool() public view returns (address) {\\n\\t\\treturn info.pool;\\n\\t}\\n\\n\\tfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn info.totalSupply;\\n\\t}\\n\\n\\tfunction balanceOf(address _user) public view returns (uint256) {\\n\\t\\treturn info.users[_user].balance;\\n\\t}\\n\\n\\tfunction allowance(address _user, address _spender) public view returns (uint256) {\\n\\t\\treturn info.users[_user].allowance[_spender];\\n\\t}\\n\\n\\tfunction position() external view returns (uint256) {\\n\\t\\treturn info.positionId;\\n\\t}\\n\\n\\tfunction initialMarketCap() external view returns (string memory) {\\n\\t\\treturn string(abi.encodePacked(_uint2str(info.initialMarketCap, 18, 5), \\\" ETH\\\"));\\n\\t}\\n\\n\\tfunction upperMarketCap() external view returns (string memory) {\\n\\t\\treturn string(abi.encodePacked(_uint2str(info.upperMarketCap, 18, 5), \\\" ETH\\\"));\\n\\t}\\n\\n\\tfunction creatorFee() external view returns (string memory) {\\n\\t\\treturn string(abi.encodePacked(_uint2str(info.creatorFee * 100, 3, 3), \\\"%\\\"));\\n\\t}\\n\\n\\tfunction transferLimit() public view returns (uint256 limit, uint256 until, bool active) {\\n\\t\\tlimit = info.transferLimit;\\n\\t\\tuntil = info.transferLimitEnd;\\n\\t\\tactive = limit \\u003e 0 \\u0026\\u0026 block.timestamp \\u003c until;\\n\\t}\\n\\n\\tfunction website() external view returns (string memory) {\\n\\t\\treturn info.website;\\n\\t}\\n\\n\\tfunction twitter() external view returns (string memory) {\\n\\t\\treturn info.twitter;\\n\\t}\\n\\n\\tfunction telegram() external view returns (string memory) {\\n\\t\\treturn info.telegram;\\n\\t}\\n\\n\\tfunction discord() external view returns (string memory) {\\n\\t\\treturn info.discord;\\n\\t}\\n\\n\\tfunction additionalInfo() external view returns (string memory) {\\n\\t\\treturn info.additionalInfo;\\n\\t}\\n\\n\\n\\tfunction _createLP(uint256 _initialMarketCap, uint256 _upperMarketCap, uint256 _creatorFee) internal {\\n\\t\\tunchecked {\\n\\t\\t\\taddress _this = address(this);\\n\\t\\t\\taddress _weth = ROUTER.WETH9();\\n\\t\\t\\tbool _weth0 = _weth \\u003c _this;\\n\\t\\t\\t(uint160 _initialSqrtPrice, ) = _getPriceAndTickFromValues(_weth0, totalSupply(), _initialMarketCap);\\n\\t\\t\\tinfo.pool = Factory(ROUTER.factory()).createPool(_this, _weth, 10000);\\n\\t\\t\\tPool(pool()).initialize(_initialSqrtPrice);\\n\\t\\t\\tPositionManager _pm = PositionManager(ROUTER.positionManager());\\n\\t\\t\\t_approve(_this, address(_pm), totalSupply());\\n\\t\\t\\t( , int24 _minTick) = _getPriceAndTickFromValues(_weth0, totalSupply(), _initialMarketCap);\\n\\t\\t\\t( , int24 _maxTick) = _getPriceAndTickFromValues(_weth0, totalSupply(), _upperMarketCap);\\n\\t\\t\\t(info.positionId, , , ) = _pm.mint(PositionManager.MintParams({\\n\\t\\t\\t\\ttoken0: _weth0 ? _weth : _this,\\n\\t\\t\\t\\ttoken1: !_weth0 ? _weth : _this,\\n\\t\\t\\t\\tfee: 10000,\\n\\t\\t\\t\\ttickLower: _weth0 ? _maxTick : _minTick,\\n\\t\\t\\t\\ttickUpper: !_weth0 ? _maxTick : _minTick,\\n\\t\\t\\t\\tamount0Desired: _weth0 ? 0 :  totalSupply() * (PERCENT_PRECISION - _creatorFee) / PERCENT_PRECISION,\\n\\t\\t\\t\\tamount1Desired: !_weth0 ? 0 : totalSupply() * (PERCENT_PRECISION - _creatorFee) / PERCENT_PRECISION,\\n\\t\\t\\t\\tamount0Min: 0,\\n\\t\\t\\t\\tamount1Min: 0,\\n\\t\\t\\t\\trecipient: _this,\\n\\t\\t\\t\\tdeadline: block.timestamp\\n\\t\\t\\t}));\\n\\t\\t\\tif (_this.balance \\u003e 0) {\\n\\t\\t\\t\\tROUTER.exactInputSingle{value:_this.balance}(Router.ExactInputSingleParams({\\n\\t\\t\\t\\t\\ttokenIn: _weth,\\n\\t\\t\\t\\t\\ttokenOut: _this,\\n\\t\\t\\t\\t\\tfee: 10000,\\n\\t\\t\\t\\t\\trecipient: creator(),\\n\\t\\t\\t\\t\\tamountIn: _this.balance,\\n\\t\\t\\t\\t\\tamountOutMinimum: 0,\\n\\t\\t\\t\\t\\tsqrtPriceLimitX96: 0\\n\\t\\t\\t\\t}));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t\\n\\tfunction _approve(address _owner, address _spender, uint256 _tokens) internal returns (bool) {\\n\\t\\tinfo.users[_owner].allowance[_spender] = _tokens;\\n\\t\\temit Approval(_owner, _spender, _tokens);\\n\\t\\treturn true;\\n\\t}\\n\\t\\n\\tfunction _transfer(address _from, address _to, uint256 _tokens) internal returns (bool) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(_tokens \\u003e 0);\\n\\t\\t\\t(uint256 _limit, , bool _active) = transferLimit();\\n\\t\\t\\tif (_active) {\\n\\t\\t\\t\\trequire(_tokens \\u003c= _limit);\\n\\t\\t\\t}\\n\\t\\t\\trequire(balanceOf(_from) \\u003e= _tokens);\\n\\t\\t\\tinfo.users[_from].balance -= _tokens;\\n\\t\\t\\tinfo.users[_to].balance += _tokens;\\n\\t\\t\\temit Transfer(_from, _to, _tokens);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\n\\n\\tfunction _getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n\\t\\tunchecked {\\n\\t\\t\\tuint256 absTick = tick \\u003c 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n\\t\\t\\trequire(absTick \\u003c= uint256(int256(MAX_TICK)), \\u0027T\\u0027);\\n\\n\\t\\t\\tuint256 ratio = absTick \\u0026 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n\\t\\t\\tif (absTick \\u0026 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) \\u003e\\u003e 128;\\n\\t\\t\\tif (absTick \\u0026 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) \\u003e\\u003e 128;\\n\\t\\t\\tif (absTick \\u0026 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) \\u003e\\u003e 128;\\n\\t\\t\\tif (absTick \\u0026 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) \\u003e\\u003e 128;\\n\\t\\t\\tif (absTick \\u0026 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) \\u003e\\u003e 128;\\n\\t\\t\\tif (absTick \\u0026 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) \\u003e\\u003e 128;\\n\\t\\t\\tif (absTick \\u0026 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) \\u003e\\u003e 128;\\n\\t\\t\\tif (absTick \\u0026 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) \\u003e\\u003e 128;\\n\\t\\t\\tif (absTick \\u0026 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) \\u003e\\u003e 128;\\n\\t\\t\\tif (absTick \\u0026 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) \\u003e\\u003e 128;\\n\\t\\t\\tif (absTick \\u0026 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) \\u003e\\u003e 128;\\n\\t\\t\\tif (absTick \\u0026 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) \\u003e\\u003e 128;\\n\\t\\t\\tif (absTick \\u0026 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) \\u003e\\u003e 128;\\n\\t\\t\\tif (absTick \\u0026 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) \\u003e\\u003e 128;\\n\\t\\t\\tif (absTick \\u0026 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) \\u003e\\u003e 128;\\n\\t\\t\\tif (absTick \\u0026 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) \\u003e\\u003e 128;\\n\\t\\t\\tif (absTick \\u0026 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) \\u003e\\u003e 128;\\n\\t\\t\\tif (absTick \\u0026 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) \\u003e\\u003e 128;\\n\\t\\t\\tif (absTick \\u0026 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) \\u003e\\u003e 128;\\n\\n\\t\\t\\tif (tick \\u003e 0) ratio = type(uint256).max / ratio;\\n\\n\\t\\t\\tsqrtPriceX96 = uint160((ratio \\u003e\\u003e 32) + (ratio % (1 \\u003c\\u003c 32) == 0 ? 0 : 1));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(sqrtPriceX96 \\u003e= MIN_SQRT_RATIO \\u0026\\u0026 sqrtPriceX96 \\u003c MAX_SQRT_RATIO, \\u0027R\\u0027);\\n\\t\\t\\tuint256 ratio = uint256(sqrtPriceX96) \\u003c\\u003c 32;\\n\\n\\t\\t\\tuint256 r = ratio;\\n\\t\\t\\tuint256 msb = 0;\\n\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n\\t\\t\\t\\tmsb := or(msb, f)\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n\\t\\t\\t\\tmsb := or(msb, f)\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet f := shl(5, gt(r, 0xFFFFFFFF))\\n\\t\\t\\t\\tmsb := or(msb, f)\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet f := shl(4, gt(r, 0xFFFF))\\n\\t\\t\\t\\tmsb := or(msb, f)\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet f := shl(3, gt(r, 0xFF))\\n\\t\\t\\t\\tmsb := or(msb, f)\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet f := shl(2, gt(r, 0xF))\\n\\t\\t\\t\\tmsb := or(msb, f)\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet f := shl(1, gt(r, 0x3))\\n\\t\\t\\t\\tmsb := or(msb, f)\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet f := gt(r, 0x1)\\n\\t\\t\\t\\tmsb := or(msb, f)\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (msb \\u003e= 128) r = ratio \\u003e\\u003e (msb - 127);\\n\\t\\t\\telse r = ratio \\u003c\\u003c (127 - msb);\\n\\n\\t\\t\\tint256 log_2 = (int256(msb) - 128) \\u003c\\u003c 64;\\n\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(63, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(62, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(61, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(60, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(59, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(58, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(57, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(56, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(55, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(54, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(53, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(52, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(51, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(50, f))\\n\\t\\t\\t}\\n\\n\\t\\t\\tint256 log_sqrt10001 = log_2 * 255738958999603826347141;\\n\\n\\t\\t\\tint24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) \\u003e\\u003e 128);\\n\\t\\t\\tint24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) \\u003e\\u003e 128);\\n\\n\\t\\t\\ttick = tickLow == tickHi ? tickLow : _getSqrtRatioAtTick(tickHi) \\u003c= sqrtPriceX96 ? tickHi : tickLow;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _sqrt(uint256 _n) internal pure returns (uint256 result) {\\n\\t\\tunchecked {\\n\\t\\t\\tuint256 _tmp = (_n + 1) / 2;\\n\\t\\t\\tresult = _n;\\n\\t\\t\\twhile (_tmp \\u003c result) {\\n\\t\\t\\t\\tresult = _tmp;\\n\\t\\t\\t\\t_tmp = (_n / _tmp + _tmp) / 2;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _getPriceAndTickFromValues(bool _weth0, uint256 _tokens, uint256 _weth) internal pure returns (uint160 price, int24 tick) {\\n\\t\\tuint160 _tmpPrice = uint160(_sqrt(2**192 / (!_weth0 ? _tokens : _weth) * (_weth0 ? _tokens : _weth)));\\n\\t\\ttick = _getTickAtSqrtRatio(_tmpPrice);\\n\\t\\ttick = tick - (tick % 200);\\n\\t\\tprice = _getSqrtRatioAtTick(tick);\\n\\t}\\n\\n\\tfunction _uint2str(uint256 _value, uint256 _scale, uint256 _maxDecimals) internal pure returns (string memory str) {\\n\\t\\tuint256 _d = _scale \\u003e _maxDecimals ? _maxDecimals : _scale;\\n\\t\\tuint256 _n = _value / 10**(_scale \\u003e _d ? _scale - _d : 0);\\n\\t\\tif (_n == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\t\\tuint256 _digits = 1;\\n\\t\\tuint256 _tmp = _n;\\n\\t\\twhile (_tmp \\u003e 9) {\\n\\t\\t\\t_tmp /= 10;\\n\\t\\t\\t_digits++;\\n\\t\\t}\\n\\t\\t_tmp = _digits \\u003e _d ? _digits : _d + 1;\\n\\t\\tuint256 _offset = (_tmp \\u003e _d + 1 ? _tmp - _d - 1 \\u003e _d ? _d : _tmp - _d - 1 : 0);\\n\\t\\tfor (uint256 i = 0; i \\u003c _tmp - _offset; i++) {\\n\\t\\t\\tuint256 _dec = i \\u003c _tmp - _digits ? 0 : (_n / (10**(_tmp - i - 1))) % 10;\\n\\t\\t\\tbytes memory _char = new bytes(1);\\n\\t\\t\\t_char[0] = bytes1(uint8(_dec) + 48);\\n\\t\\t\\tstr = string(abi.encodePacked(str, string(_char)));\\n\\t\\t\\tif (i \\u003c _tmp - _d - 1) {\\n\\t\\t\\t\\tif ((i + 1) % 3 == (_tmp - _d) % 3) {\\n\\t\\t\\t\\t\\tstr = string(abi.encodePacked(str, \\\",\\\"));\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif ((_n / 10**_offset) % 10**(_tmp - _offset - i - 1) == 0) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t} else if (i == _tmp - _d - 1) {\\n\\t\\t\\t\\t\\tstr = string(abi.encodePacked(str, \\\".\\\"));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"proxy\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialMarketCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upperMarketCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creatorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferLimitTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"launchTime\",\"type\":\"uint256\"}],\"name\":\"NewToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allTokens\",\"outputs\":[{\"internalType\":\"contract Token[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_deployProxy\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialMarketCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_upperMarketCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_creatorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferLimitTime\",\"type\":\"uint256\"}],\"name\":\"launch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTemplate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"template\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenAtIndex\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Bakery", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://be611567e38659c4618099278709c6212c8bc0adfaa2dea0b5bc0c8df8136055"}