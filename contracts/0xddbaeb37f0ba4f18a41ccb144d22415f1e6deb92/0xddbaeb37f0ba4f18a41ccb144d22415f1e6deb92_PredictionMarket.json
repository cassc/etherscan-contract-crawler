{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PredictionMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./RefProgramCodeGenerator.sol\\\";\\nimport \\\"./Gelato/AutomateTaskCreator.sol\\\";\\nimport \\\"./IUniswapV2Factory.sol\\\";\\nimport \\\"./IUniswapV2Router.sol\\\";\\n\\ninterface IERC20Balance {\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface IPredictionFactory {\\n    function addEthPayout(uint256 value) external;\\n\\n    function owner() external view returns (address);\\n}\\n\\ninterface INonce {\\n    function generatedNonce(\\n        address user,\\n        uint256 roundID\\n    ) external pure returns (uint256);\\n}\\n\\ncontract PredictionMarket is Ownable, ReentrancyGuard, AutomateTaskCreator {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    event BetBear(address indexed user, uint256 indexed round, uint256 amount);\\n    event BetBull(address indexed user, uint256 indexed round, uint256 amount);\\n    event BullClaimed(\\n        address indexed user,\\n        uint256 roundId,\\n        uint256 amountClaimed\\n    );\\n    event BearClaimed(\\n        address indexed user,\\n        uint256 roundId,\\n        uint256 amountClaimed\\n    );\\n    event CounterTaskCreated(bytes32 taskId);\\n\\n    receive() external payable {}\\n\\n    address public predictionFactory;\\n\\n    AggregatorV3Interface internal dataFeed;\\n\\n    bytes32 public taskId;\\n\\n    address private _refProgramCodeGenerator;\\n    bool public isRefProgramOpen;\\n\\n    mapping(address => EnumerableSet.UintSet) private _userActivatedCodes;\\n    mapping(address => EnumerableSet.UintSet) private _userGeneratedCodes;\\n    mapping(uint256 => EnumerableSet.AddressSet) private _CodeClaimedAddresses;\\n    uint256 public totalCodesUsed;\\n\\n    address public router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    address public treasuryWallet;\\n    address public token;\\n    address public pair;\\n\\n    uint256 public roundID;\\n    uint256 public roundPeriod = 30 minutes;\\n    uint256 public bufferTime = 40;\\n\\n    uint256 public minimumBet = 0.01 ether;\\n    uint256 public poolFee = 500;\\n    bool public isStopped;\\n\\n    struct Round {\\n        uint256 startTimestamp;\\n        uint256 expireTimestamp;\\n        uint256 openPrice;\\n        uint256 closePrice;\\n        uint256 bearBetsAmount;\\n        uint256 bullBetsAmount;\\n        uint256 totalEthBets;\\n        bool roundClose;\\n    }\\n\\n    mapping(uint256 => Round) private rounds;\\n\\n    struct UserEntries {\\n        uint256 bullEntries;\\n        uint256 bearEntries;\\n        uint256 totalEthBetted;\\n        uint256 totalEthWon;\\n        bool bullClaimed;\\n        bool bearClaimed;\\n    }\\n\\n    mapping(address => mapping(uint256 => UserEntries)) private userEntries;\\n    mapping(address => EnumerableSet.UintSet) private _userBetRounds;\\n\\n    uint256 public totalEthPayoutsMade;\\n\\n    constructor(\\n        address _token,\\n        address _automate,\\n        address _fundsOwner\\n    ) payable AutomateTaskCreator(_automate, _fundsOwner) {\\n        require(hasEthLiquidity(_token), \\\"Pair has no liquidity\\\");\\n        dataFeed = AggregatorV3Interface(\\n            0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\\n        );\\n\\n        token = _token;\\n        pair = getPair(_token);\\n        treasuryWallet = _fundsOwner;\\n        predictionFactory = msg.sender;\\n        require(pair != address(0), \\\"No pair found\\\");\\n\\n        depositFunds(msg.value, 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n        createTask();\\n    }\\n\\n    // Ref programm\\n\\n    function getUserActivatedCodes(\\n        address user\\n    ) public view returns (uint256[] memory) {\\n        return _userActivatedCodes[user].values();\\n    }\\n\\n    function getUserGeneratedCodes(\\n        address user\\n    ) public view returns (uint256[] memory) {\\n        return _userGeneratedCodes[user].values();\\n    }\\n\\n    function getCodesUsedAddresses(\\n        uint256 code\\n    ) public view returns (address[] memory) {\\n        return _CodeClaimedAddresses[code].values();\\n    }\\n\\n    function getCodesUsedCount(uint256 code) public view returns (uint256) {\\n        return _CodeClaimedAddresses[code].length();\\n    }\\n\\n    function getUserGeneratedCodesCount(\\n        address user\\n    ) public view returns (uint256) {\\n        return _userGeneratedCodes[user].length();\\n    }\\n\\n    function getUserActivatedCodesCount(\\n        address user\\n    ) public view returns (uint256) {\\n        return _userActivatedCodes[user].length();\\n    }\\n\\n    function isCodeUsable(\\n        uint256 code,\\n        address user\\n    ) public view returns (bool) {\\n        address sharer = _CodeClaimedAddresses[code].at(0);\\n        if (_CodeClaimedAddresses[code].length() != 1 || user == sharer) {\\n            return false;\\n        }\\n\\n        if (sharer == address(0)) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    function updateRefProgrammStatus() public onlyOwner {\\n        if (!isRefProgramOpen && _refProgramCodeGenerator == address(0)) {\\n            RefProgramCodeGenerator refProgramCodeGenerator = new RefProgramCodeGenerator();\\n            _refProgramCodeGenerator = address(refProgramCodeGenerator);\\n        }\\n        isRefProgramOpen = !isRefProgramOpen;\\n    }\\n\\n    function setPoolFee(uint256 _newFee) external onlyOwner {\\n        require(_newFee <= 2_000, \\\"Fee too high\\\");\\n        poolFee = _newFee;\\n    }\\n\\n    function setRoundPeriod(uint256 _newRoundPeriod) public onlyOwner {\\n        roundPeriod = _newRoundPeriod;\\n    }\\n\\n    // End ref program\\n\\n    function depositFunds(uint256 _amount, address _token) public payable {\\n        uint256 ethValue = _token == ETH ? _amount : 0;\\n        taskTreasury.depositFunds{value: ethValue}(\\n            address(this),\\n            _token,\\n            _amount\\n        );\\n    }\\n\\n    function createTask() public {\\n        require(taskId == bytes32(\\\"\\\"), \\\"Already started task\\\");\\n\\n        ModuleData memory moduleData = ModuleData({\\n            modules: new Module[](2),\\n            args: new bytes[](2)\\n        });\\n\\n        moduleData.modules[0] = Module.RESOLVER;\\n        moduleData.modules[1] = Module.PROXY;\\n\\n        moduleData.args[0] = _resolverModuleArg(\\n            address(this),\\n            abi.encodeCall(this.checker, ())\\n        );\\n        moduleData.args[1] = _proxyModuleArg();\\n\\n        bytes32 id = _createTask(\\n            address(this),\\n            abi.encode(this.startNewRound.selector),\\n            moduleData,\\n            address(0)\\n        );\\n\\n        taskId = id;\\n        emit CounterTaskCreated(id);\\n    }\\n\\n    function getRoundInfo(\\n        uint256 roundId\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 startTimestamp,\\n            uint256 expireTimestamp,\\n            uint256 openPrice,\\n            uint256 closePrice,\\n            uint256 bearBetsAmount,\\n            uint256 bullBetsAmount,\\n            uint256 totalEthBets,\\n            bool roundClose\\n        )\\n    {\\n        Round storage round = rounds[roundId];\\n        return (\\n            round.startTimestamp,\\n            round.expireTimestamp,\\n            round.openPrice,\\n            round.closePrice,\\n            round.bearBetsAmount,\\n            round.bullBetsAmount,\\n            round.totalEthBets,\\n            round.roundClose\\n        );\\n    }\\n\\n    function getUserEntries(\\n        address user,\\n        uint256 roundId\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 bullEntries,\\n            uint256 bearEntries,\\n            uint256 totalEthBetted,\\n            uint256 totalEthWon,\\n            bool bullClaimed,\\n            bool bearClaimed\\n        )\\n    {\\n        UserEntries storage entries = userEntries[user][roundId];\\n        return (\\n            entries.bullEntries,\\n            entries.bearEntries,\\n            entries.totalEthBetted,\\n            entries.totalEthWon,\\n            entries.bullClaimed,\\n            entries.bearClaimed\\n        );\\n    }\\n\\n    function getUserRounds(\\n        address user\\n    ) public view returns (uint256[] memory) {\\n        return _userBetRounds[user].values();\\n    }\\n\\n    function getTokenPriceEth() internal view returns (uint256) {\\n        uint256 totalEth = IERC20(IUniswapV2Router01(router).WETH()).balanceOf(\\n            pair\\n        ) * 10 ** IERC20Balance(token).decimals();\\n        uint256 tokenBalance = IERC20(token).balanceOf(pair);\\n        return totalEth / tokenBalance;\\n    }\\n\\n    function getChainlinkDataFeedLatestAnswer() internal view returns (int) {\\n        // prettier-ignore\\n        (\\n            /* uint80 roundID */,\\n            int answer,\\n            /*uint startedAt*/,\\n            /*uint timeStamp*/,\\n            /*uint80 answeredInRound*/\\n        ) = dataFeed.latestRoundData();\\n        return answer;\\n    }\\n\\n    function getTokenPriceUSD() public view returns (uint256) {\\n        uint256 ethPrice = uint256(getChainlinkDataFeedLatestAnswer());\\n        uint256 tokenEthPrice = getTokenPriceEth();\\n\\n        return ethPrice * tokenEthPrice;\\n    }\\n\\n    function getPair(address _token) internal view returns (address) {\\n        address _pair;\\n        address factory = IUniswapV2Router01(router).factory();\\n        address wEth = IUniswapV2Router01(router).WETH();\\n        _pair = IUniswapV2Factory(factory).getPair(_token, wEth);\\n        return _pair;\\n    }\\n\\n    function checker()\\n        public\\n        view\\n        returns (bool canExec, bytes memory execPayload)\\n    {\\n        Round storage roundData = rounds[roundID];\\n\\n        if (roundID == 0 && roundData.startTimestamp == 0) {\\n            canExec = true;\\n        } else if (!isStopped) {\\n            canExec = roundData.expireTimestamp < block.timestamp;\\n        }\\n\\n        execPayload = abi.encodeCall(this.startNewRound, ());\\n    }\\n\\n    function stop() public {\\n        require(\\n            msg.sender == owner() ||\\n                msg.sender == IPredictionFactory(predictionFactory).owner()\\n        );\\n        isStopped = !isStopped;\\n    }\\n\\n    function newRoundStartable() public view returns (bool canExec) {\\n        Round storage roundData = rounds[roundID];\\n\\n        if (roundID == 0 && roundData.startTimestamp == 0) {\\n            canExec = true;\\n        } else if (!isStopped) {\\n            canExec = roundData.expireTimestamp < block.timestamp;\\n        }\\n    }\\n\\n    function startNewRound() public {\\n        require(newRoundStartable(), \\\"Round not ended\\\");\\n        Round storage currentRound = rounds[roundID];\\n        Round storage nextRound = rounds[roundID + 1];\\n\\n        if (roundID == 0 && currentRound.startTimestamp == 0) {\\n            currentRound.startTimestamp = block.timestamp;\\n            currentRound.expireTimestamp = block.timestamp + roundPeriod;\\n            currentRound.openPrice = getTokenPriceUSD();\\n        } else {\\n            currentRound.closePrice = getTokenPriceUSD();\\n            currentRound.roundClose = true;\\n\\n            nextRound.startTimestamp = block.timestamp;\\n            nextRound.expireTimestamp = block.timestamp + roundPeriod;\\n            nextRound.openPrice = getTokenPriceUSD();\\n            roundID++;\\n        }\\n    }\\n\\n    function roundResult(uint256 _roundID) public view returns (bool isBull) {\\n        Round storage roundData = rounds[_roundID];\\n        return (roundData.openPrice < roundData.closePrice);\\n    }\\n\\n    function isEven(uint256 _roundID) public view returns (bool) {\\n        Round storage roundData = rounds[_roundID];\\n        return (roundData.openPrice == roundData.closePrice);\\n    }\\n\\n    function bettingOpen() public view returns (bool) {\\n        Round storage roundData = rounds[roundID];\\n        return roundData.expireTimestamp - bufferTime > block.timestamp;\\n    }\\n\\n    function enterBull(uint256 amount, uint256 refCode) public payable {\\n        require(amount == msg.value, \\\"Amount incorrect\\\");\\n        require(msg.value >= minimumBet, \\\"Bet more\\\");\\n        UserEntries storage userData = userEntries[msg.sender][roundID + 1];\\n        require(\\n            userData.bearEntries == 0 && userData.bullEntries == 0,\\n            \\\"Already entered\\\"\\n        );\\n        bool canBet = bettingOpen();\\n        require(canBet);\\n\\n        if (isRefProgramOpen) {\\n            uint256 userNonce = INonce(_refProgramCodeGenerator).generatedNonce(\\n                _msgSender(),\\n                roundID\\n            ) % 9999999;\\n\\n            _userGeneratedCodes[msg.sender].add(userNonce);\\n            _userActivatedCodes[msg.sender].add(userNonce);\\n            _CodeClaimedAddresses[userNonce].add(msg.sender);\\n            totalCodesUsed++;\\n\\n            if (refCode != 0) {\\n                require(\\n                    isCodeUsable(refCode, msg.sender),\\n                    \\\"Code does not exist or used\\\"\\n                );\\n                address sharer = _CodeClaimedAddresses[refCode].at(0);\\n                uint256 newCode = refCode % 9999;\\n\\n                _userActivatedCodes[sharer].add(newCode);\\n                _userActivatedCodes[msg.sender].add(refCode);\\n                _CodeClaimedAddresses[refCode].add(msg.sender);\\n                totalCodesUsed++;\\n            }\\n        }\\n\\n        Round storage roundData = rounds[roundID + 1];\\n        uint256 fee = (amount * poolFee) / 10_000;\\n        bool success;\\n\\n        (success, ) = address(treasuryWallet).call{value: fee}(\\\"\\\");\\n\\n        amount -= fee;\\n        roundData.bullBetsAmount += amount;\\n        roundData.totalEthBets += amount;\\n\\n        userData.bullEntries += amount;\\n        userData.totalEthBetted += amount;\\n        _userBetRounds[msg.sender].add(roundID + 1);\\n\\n        emit BetBull(msg.sender, roundID + 1, amount);\\n    }\\n\\n    function enterBear(uint256 amount, uint256 refCode) public payable {\\n        require(amount == msg.value, \\\"Amount incorrect\\\");\\n        require(msg.value >= minimumBet, \\\"Bet more\\\");\\n        UserEntries storage userData = userEntries[msg.sender][roundID + 1];\\n        require(\\n            userData.bullEntries == 0 || userData.bearEntries == 0,\\n            \\\"Already entered\\\"\\n        );\\n        bool canBet = bettingOpen();\\n        require(canBet);\\n\\n        if (isRefProgramOpen) {\\n            uint256 userNonce = INonce(_refProgramCodeGenerator).generatedNonce(\\n                _msgSender(),\\n                roundID\\n            ) % 9999999;\\n\\n            _userGeneratedCodes[msg.sender].add(userNonce);\\n            _userActivatedCodes[msg.sender].add(userNonce);\\n            _CodeClaimedAddresses[userNonce].add(msg.sender);\\n            totalCodesUsed++;\\n\\n            if (refCode != 0) {\\n                require(\\n                    isCodeUsable(refCode, msg.sender),\\n                    \\\"Code does not exist or used\\\"\\n                );\\n                address sharer = _CodeClaimedAddresses[refCode].at(0);\\n                uint256 newCode = refCode % 9999;\\n\\n                _userActivatedCodes[sharer].add(newCode);\\n                _userActivatedCodes[msg.sender].add(refCode);\\n                _CodeClaimedAddresses[refCode].add(msg.sender);\\n                totalCodesUsed++;\\n            }\\n        }\\n\\n        Round storage roundData = rounds[roundID + 1];\\n        uint256 fee = (amount * poolFee) / 10_000;\\n        bool success;\\n\\n        (success, ) = address(treasuryWallet).call{value: fee}(\\\"\\\");\\n\\n        amount -= fee;\\n        roundData.bearBetsAmount += amount;\\n        roundData.totalEthBets += amount;\\n\\n        userData.bearEntries += amount;\\n        userData.totalEthBetted += amount;\\n        _userBetRounds[msg.sender].add(roundID + 1);\\n\\n        emit BetBear(msg.sender, roundID + 1, amount);\\n    }\\n\\n    function bullShare(\\n        address user,\\n        uint256 _roundID\\n    ) public view returns (uint256 share) {\\n        Round storage roundData = rounds[_roundID];\\n        UserEntries storage userData = userEntries[user][_roundID];\\n\\n        uint256 bullAmnt = roundData.bullBetsAmount;\\n        uint256 betAmnt = userData.bullEntries;\\n\\n        if (betAmnt > 0) {\\n            share = (betAmnt * 10_000) / bullAmnt;\\n        } else {\\n            share = 0;\\n        }\\n    }\\n\\n    function bearShare(\\n        address user,\\n        uint256 _roundID\\n    ) public view returns (uint256 share) {\\n        Round storage roundData = rounds[_roundID];\\n        UserEntries storage userData = userEntries[user][_roundID];\\n\\n        uint256 bearAmnt = roundData.bearBetsAmount;\\n        uint256 betAmnt = userData.bearEntries;\\n\\n        if (betAmnt > 0) {\\n            share = (betAmnt * 10_000) / bearAmnt;\\n        } else {\\n            share = 0;\\n        }\\n    }\\n\\n    function bullMutiplier(uint256 _roundID) public view returns (uint256) {\\n        Round storage roundData = rounds[_roundID];\\n        uint256 bulls = roundData.bullBetsAmount;\\n        uint256 bears = roundData.bearBetsAmount;\\n        uint256 multipiler;\\n\\n        if (bulls > 0 && bears > 0) {\\n            multipiler = 10_000 + ((bears * 10_000) / bulls);\\n        } else if (bears > 0 && bulls == 0) {\\n            multipiler = 10_000 + ((bears * 10_000) / minimumBet);\\n        } else {\\n            multipiler = 10_000;\\n        }\\n\\n        return multipiler;\\n    }\\n\\n    function bearMutiplier(uint256 _roundID) public view returns (uint256) {\\n        Round storage roundData = rounds[_roundID];\\n        uint256 bulls = roundData.bullBetsAmount;\\n        uint256 bears = roundData.bearBetsAmount;\\n        uint256 multipiler;\\n\\n        if (bears > 0 && bulls > 0) {\\n            multipiler = 10_000 + ((bulls * 10_000) / bears);\\n        } else if (bulls > 0 && bears == 0) {\\n            multipiler = 10_000 + ((bulls * 10_000) / minimumBet);\\n        } else {\\n            multipiler = 10_000;\\n        }\\n\\n        return multipiler;\\n    }\\n\\n    function rewardBullsClaimableAmntsView(\\n        address user,\\n        uint256 _roundID\\n    ) public view returns (uint256 amountClaimable) {\\n        Round storage roundData = rounds[_roundID];\\n        UserEntries storage userData = userEntries[user][_roundID];\\n        uint256 userShare = bullShare(user, _roundID);\\n        uint256 totalEthPot = roundData.totalEthBets;\\n        bool isClaimable = totalEthPot > 0 &&\\n            userShare > 0 &&\\n            roundData.roundClose &&\\n            roundResult(_roundID);\\n\\n        amountClaimable = 0;\\n\\n        if (isClaimable) {\\n            amountClaimable = (totalEthPot * userShare) / 10_000;\\n        } else if (\\n            !roundResult(_roundID) &&\\n            roundData.bearBetsAmount == 0 &&\\n            userShare > 0\\n        ) {\\n            amountClaimable = userData.bullEntries;\\n        }\\n    }\\n\\n    function rewardBearsClaimableAmntsView(\\n        address user,\\n        uint256 _roundID\\n    ) public view returns (uint256 amountClaimable) {\\n        Round storage roundData = rounds[_roundID];\\n        UserEntries storage userData = userEntries[user][_roundID];\\n        uint256 userShare = bearShare(user, _roundID);\\n        uint256 totalEthPot = roundData.totalEthBets;\\n        bool isClaimable = totalEthPot > 0 &&\\n            userShare > 0 &&\\n            roundData.roundClose &&\\n            !roundResult(_roundID);\\n\\n        amountClaimable = 0;\\n\\n        if (isClaimable) {\\n            amountClaimable = (totalEthPot * userShare) / 10_000;\\n        } else if (\\n            roundResult(_roundID) &&\\n            roundData.bullBetsAmount == 0 &&\\n            roundData.roundClose &&\\n            userShare > 0\\n        ) {\\n            amountClaimable = userData.bearEntries;\\n        }\\n    }\\n\\n    function rewardBullsClaimableAmnts(\\n        address user,\\n        uint256 _roundID\\n    ) public view returns (uint256 amountClaimable) {\\n        Round storage roundData = rounds[_roundID];\\n        UserEntries storage userData = userEntries[user][_roundID];\\n        uint256 userShare = bullShare(user, _roundID);\\n        uint256 totalEthPot = roundData.totalEthBets;\\n        bool isClaimable = totalEthPot > 0 &&\\n            userShare > 0 &&\\n            roundData.roundClose &&\\n            roundResult(_roundID) &&\\n            !userData.bullClaimed;\\n\\n        if (isClaimable) {\\n            amountClaimable = (totalEthPot * userShare) / 10_000;\\n        } else if (\\n            !roundResult(_roundID) &&\\n            roundData.bearBetsAmount == 0 &&\\n            userShare > 0 &&\\n            roundData.roundClose &&\\n            !userData.bullClaimed\\n        ) {\\n            amountClaimable = userData.bullEntries;\\n        }\\n    }\\n\\n    function rewardBearsClaimableAmnts(\\n        address user,\\n        uint256 _roundID\\n    ) public view returns (uint256 amountClaimable) {\\n        Round storage roundData = rounds[_roundID];\\n        UserEntries storage userData = userEntries[user][_roundID];\\n        uint256 userShare = bearShare(user, _roundID);\\n        uint256 totalEthPot = roundData.totalEthBets;\\n        bool isClaimable = totalEthPot > 0 &&\\n            userShare > 0 &&\\n            roundData.roundClose &&\\n            !roundResult(_roundID) &&\\n            !userData.bearClaimed;\\n\\n        if (isClaimable) {\\n            amountClaimable = (totalEthPot * userShare) / 10_000;\\n        } else if (\\n            roundResult(_roundID) &&\\n            roundData.bullBetsAmount == 0 &&\\n            userShare > 0 &&\\n            !userData.bearClaimed\\n        ) {\\n            amountClaimable = userData.bearEntries;\\n        }\\n    }\\n\\n    function claimBull(\\n        address user,\\n        uint256 _roundID\\n    ) internal returns (uint256 amntClaimed) {\\n        UserEntries storage userData = userEntries[user][_roundID];\\n        uint256 userShare = bullShare(user, _roundID);\\n        require(userShare > 0, \\\"No claims\\\");\\n        require(!userData.bullClaimed, \\\"already claimed\\\");\\n        require(!isEven(_roundID));\\n\\n        uint256 totalAmntWon = rewardBullsClaimableAmnts(user, _roundID);\\n\\n        bool success;\\n\\n        (success, ) = address(user).call{value: totalAmntWon}(\\\"\\\");\\n\\n        userData.totalEthWon += totalAmntWon;\\n        userData.bullClaimed = true;\\n        IPredictionFactory(predictionFactory).addEthPayout(totalAmntWon);\\n\\n        amntClaimed = totalAmntWon;\\n\\n        emit BullClaimed(user, _roundID, totalAmntWon);\\n    }\\n\\n    function claimBear(\\n        address user,\\n        uint256 _roundID\\n    ) internal returns (uint256 amntClaimed) {\\n        UserEntries storage userData = userEntries[user][_roundID];\\n        uint256 userShare = bearShare(user, _roundID);\\n        require(userShare > 0, \\\"No claims\\\");\\n        require(!userData.bearClaimed, \\\"already claimed\\\");\\n        require(!isEven(_roundID));\\n\\n        uint256 totalAmntWon = rewardBearsClaimableAmnts(user, _roundID);\\n\\n        bool success;\\n\\n        (success, ) = address(user).call{value: totalAmntWon}(\\\"\\\");\\n\\n        userData.totalEthWon += totalAmntWon;\\n        userData.bearClaimed = true;\\n        IPredictionFactory(predictionFactory).addEthPayout(totalAmntWon);\\n\\n        amntClaimed = totalAmntWon;\\n\\n        emit BearClaimed(user, _roundID, totalAmntWon);\\n    }\\n\\n    function claimWinnings(address user, uint256 _roundID) public nonReentrant {\\n        Round storage roundData = rounds[_roundID];\\n        UserEntries storage userData = userEntries[user][_roundID];\\n        uint256 userBullShare = bullShare(user, _roundID);\\n        uint256 userBearShare = bearShare(user, _roundID);\\n\\n        require(roundData.roundClose, \\\"Round is not closed\\\");\\n        require(userBullShare > 0 || userBearShare > 0, \\\"Nothing to claim\\\");\\n\\n        if (roundResult(_roundID) && !isEven(_roundID) && userBullShare > 0) {\\n            totalEthPayoutsMade += claimBull(user, _roundID);\\n        } else if (\\n            !roundResult(_roundID) && !isEven(_roundID) && userBearShare > 0\\n        ) {\\n            totalEthPayoutsMade += claimBear(user, _roundID);\\n        } else if (isEven(_roundID)) {\\n            if (userBullShare > 0) {\\n                bool success;\\n                (success, ) = address(user).call{value: userData.bullEntries}(\\n                    \\\"\\\"\\n                );\\n                totalEthPayoutsMade += userData.bullEntries;\\n                userData.totalEthWon += userData.bullEntries;\\n                userData.bullClaimed = true;\\n\\n                emit BullClaimed(user, _roundID, userData.bullEntries);\\n            } else if (userBearShare > 0) {\\n                bool success;\\n                (success, ) = address(user).call{value: userData.bearEntries}(\\n                    \\\"\\\"\\n                );\\n\\n                totalEthPayoutsMade += userData.bearEntries;\\n                userData.totalEthWon += userData.bearEntries;\\n                userData.bearClaimed = true;\\n\\n                emit BearClaimed(user, _roundID, userData.bullEntries);\\n            }\\n        }\\n\\n        if (\\n            userBullShare > 0 &&\\n            roundData.bearBetsAmount == 0 &&\\n            !roundResult(_roundID) &&\\n            !userData.bullClaimed\\n        ) {\\n            totalEthPayoutsMade += claimBull(user, _roundID);\\n        }\\n\\n        if (\\n            userBearShare > 0 &&\\n            roundData.bullBetsAmount == 0 &&\\n            roundResult(_roundID) &&\\n            !userData.bearClaimed\\n        ) {\\n            totalEthPayoutsMade += claimBear(user, _roundID);\\n        }\\n    }\\n\\n    function hasEthLiquidity(address tokenAddress) public view returns (bool) {\\n        address[] memory path = new address[](2);\\n        path[0] = tokenAddress;\\n        path[1] = IUniswapV2Router01(router).WETH();\\n\\n        try IUniswapV2Router01(router).getAmountsOut(0.01 ether, path) returns (\\n            uint256[] memory amounts\\n        ) {\\n            return amounts[1] > 0;\\n        } catch {\\n            return false;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/IUniswapV2Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        payable\\n        returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function quote(\\n        uint amountA,\\n        uint reserveA,\\n        uint reserveB\\n    ) external pure returns (uint amountB);\\n\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] memory path\\n    ) external view returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Gelato/AutomateTaskCreator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.14;\\n\\nimport \\\"./AutomateReady.sol\\\";\\n\\n/**\\n * @dev Inherit this contract to allow your smart contract\\n * to be a task creator and create tasks.\\n */\\nabstract contract AutomateTaskCreator is AutomateReady {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable fundsOwner;\\n    ITaskTreasuryUpgradable public immutable taskTreasury;\\n\\n    constructor(\\n        address _automate,\\n        address _fundsOwner\\n    ) AutomateReady(_automate, address(this)) {\\n        fundsOwner = _fundsOwner;\\n        taskTreasury = automate.taskTreasury();\\n    }\\n\\n    /**\\n     * @dev\\n     * Withdraw funds from this contract's Gelato balance to fundsOwner.\\n     */\\n    function withdrawFunds(uint256 _amount) external {\\n        require(\\n            msg.sender == fundsOwner,\\n            \\\"Only funds owner can withdraw funds\\\"\\n        );\\n\\n        taskTreasury.withdrawFunds(\\n            payable(fundsOwner),\\n            0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE,\\n            _amount\\n        );\\n    }\\n\\n    function _depositFunds(uint256 _amount, address _token) internal {\\n        uint256 ethValue = _token == ETH ? _amount : 0;\\n        taskTreasury.depositFunds{value: ethValue}(\\n            address(this),\\n            _token,\\n            _amount\\n        );\\n    }\\n\\n    function _createTask(\\n        address _execAddress,\\n        bytes memory _execDataOrSelector,\\n        ModuleData memory _moduleData,\\n        address _feeToken\\n    ) internal returns (bytes32) {\\n        return\\n            automate.createTask(\\n                _execAddress,\\n                _execDataOrSelector,\\n                _moduleData,\\n                _feeToken\\n            );\\n    }\\n\\n    function _cancelTask(bytes32 _taskId) internal {\\n        automate.cancelTask(_taskId);\\n    }\\n\\n    function _resolverModuleArg(\\n        address _resolverAddress,\\n        bytes memory _resolverData\\n    ) internal pure returns (bytes memory) {\\n        return abi.encode(_resolverAddress, _resolverData);\\n    }\\n\\n    function _timeModuleArg(\\n        uint256 _startTime,\\n        uint256 _interval\\n    ) internal pure returns (bytes memory) {\\n        return abi.encode(uint128(_startTime), uint128(_interval));\\n    }\\n\\n    function _proxyModuleArg() internal pure returns (bytes memory) {\\n        return bytes(\\\"\\\");\\n    }\\n\\n    function _singleExecModuleArg() internal pure returns (bytes memory) {\\n        return bytes(\\\"\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/RefProgramCodeGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.2 <0.9.0;\\n\\ncontract RefProgramCodeGenerator {\\n    function generatedNonce(\\n        address user,\\n        uint256 roundID\\n    ) public pure returns (uint256) {\\n        uint256 id = uint256(\\n            keccak256(abi.encodePacked(user, roundID))\\n        ) % 9999;\\n        uint256 randomNumber = uint256(keccak256(abi.encodePacked(id, user)));\\n        return randomNumber;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Gelato/AutomateReady.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Types.sol\\\";\\n\\n/**\\n * @dev Inherit this contract to allow your smart contract to\\n * - Make synchronous fee payments.\\n * - Have call restrictions for functions to be automated.\\n */\\n// solhint-disable private-vars-leading-underscore\\nabstract contract AutomateReady {\\n    IAutomate public immutable automate;\\n    address public immutable dedicatedMsgSender;\\n    address private immutable feeCollector;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address private constant OPS_PROXY_FACTORY =\\n        0xC815dB16D4be6ddf2685C201937905aBf338F5D7;\\n\\n    /**\\n     * @dev\\n     * Only tasks created by _taskCreator defined in constructor can call\\n     * the functions with this modifier.\\n     */\\n    modifier onlyDedicatedMsgSender() {\\n        require(msg.sender == dedicatedMsgSender, \\\"Only dedicated msg.sender\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev\\n     * _taskCreator is the address which will create tasks for this contract.\\n     */\\n    constructor(address _automate, address _taskCreator) {\\n        automate = IAutomate(_automate);\\n        IGelato gelato = IGelato(IAutomate(_automate).gelato());\\n\\n        feeCollector = gelato.feeCollector();\\n\\n        (dedicatedMsgSender, ) = IOpsProxyFactory(OPS_PROXY_FACTORY).getProxyOf(\\n            _taskCreator\\n        );\\n    }\\n\\n    /**\\n     * @dev\\n     * Transfers fee to gelato for synchronous fee payments.\\n     *\\n     * _fee & _feeToken should be queried from IAutomate.getFeeDetails()\\n     */\\n    function _transfer(uint256 _fee, address _feeToken) internal {\\n        if (_feeToken == ETH) {\\n            (bool success, ) = feeCollector.call{value: _fee}(\\\"\\\");\\n            require(success, \\\"_transfer: ETH transfer failed\\\");\\n        } else {\\n            SafeERC20.safeTransfer(IERC20(_feeToken), feeCollector, _fee);\\n        }\\n    }\\n\\n    function _getFeeDetails()\\n        internal\\n        view\\n        returns (uint256 fee, address feeToken)\\n    {\\n        (fee, feeToken) = automate.getFeeDetails();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Gelato/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nenum Module {\\n    RESOLVER,\\n    TIME,\\n    PROXY,\\n    SINGLE_EXEC\\n}\\n\\nstruct ModuleData {\\n    Module[] modules;\\n    bytes[] args;\\n}\\n\\ninterface IAutomate {\\n    function createTask(\\n        address execAddress,\\n        bytes calldata execDataOrSelector,\\n        ModuleData calldata moduleData,\\n        address feeToken\\n    ) external returns (bytes32 taskId);\\n\\n    function cancelTask(bytes32 taskId) external;\\n\\n    function getFeeDetails() external view returns (uint256, address);\\n\\n    function gelato() external view returns (address payable);\\n\\n    function taskTreasury() external view returns (ITaskTreasuryUpgradable);\\n}\\n\\ninterface ITaskTreasuryUpgradable {\\n    function depositFunds(\\n        address receiver,\\n        address token,\\n        uint256 amount\\n    ) external payable;\\n\\n    function withdrawFunds(\\n        address payable receiver,\\n        address token,\\n        uint256 amount\\n    ) external;\\n}\\n\\ninterface IOpsProxyFactory {\\n    function getProxyOf(address account) external view returns (address, bool);\\n}\\n\\ninterface IGelato {\\n    function feeCollector() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_automate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundsOwner\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"BearClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetBear\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetBull\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"BullClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"}],\"name\":\"CounterTaskCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"automate\",\"outputs\":[{\"internalType\":\"contract IAutomate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"bearMutiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"bearShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bettingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bufferTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"bullMutiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"bullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canExec\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"execPayload\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"claimWinnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dedicatedMsgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"depositFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refCode\",\"type\":\"uint256\"}],\"name\":\"enterBear\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refCode\",\"type\":\"uint256\"}],\"name\":\"enterBull\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"}],\"name\":\"getCodesUsedAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"}],\"name\":\"getCodesUsedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getRoundInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bearBetsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bullBetsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEthBets\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"roundClose\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPriceUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserActivatedCodes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserActivatedCodesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getUserEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bullEntries\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bearEntries\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEthBetted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEthWon\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bullClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"bearClaimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserGeneratedCodes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserGeneratedCodesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserRounds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"hasEthLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isCodeUsable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"isEven\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRefProgramOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newRoundStartable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canExec\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"predictionFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"rewardBearsClaimableAmnts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountClaimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"rewardBearsClaimableAmntsView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountClaimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"rewardBullsClaimableAmnts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountClaimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"rewardBullsClaimableAmntsView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountClaimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"roundResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isBull\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setPoolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRoundPeriod\",\"type\":\"uint256\"}],\"name\":\"setRoundPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startNewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskTreasury\",\"outputs\":[{\"internalType\":\"contract ITaskTreasuryUpgradable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCodesUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEthPayoutsMade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRefProgrammStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PredictionMarket", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000fa3e941d1f6b7b10ed84a0c211bfa8aee907965e000000000000000000000000b3f5503f93d5ef84b06993a1975b9d21b962892f000000000000000000000000bd47235a36f2e1462ac9cdaf70170137d05ebd07", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}