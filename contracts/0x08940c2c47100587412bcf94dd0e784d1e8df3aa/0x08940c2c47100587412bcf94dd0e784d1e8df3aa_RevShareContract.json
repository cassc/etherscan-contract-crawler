{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract RevShareContract {\r\n    address public owner;\r\n    address public incentivesAddress;\r\n\r\n    uint256 public currentRound = 0; // Keeps track of the current round\r\n\r\n    struct Round {\r\n        uint256 revenueForBB;\r\n        uint256 revenueForBettingVolume;\r\n        uint256 revenueForReferrals;\r\n        uint256 totalBBTokens;\r\n        uint256 totalBettingVolume;\r\n        uint256 totalReferrals;\r\n        bool isSnapshotUploaded;\r\n        mapping(address => uint256) snapshotBBBalances;\r\n        mapping(address => uint256) snapshotBettingVolume;\r\n        mapping(address => uint256) snapshotReferrals;\r\n        mapping(address => bool) hasClaimed;\r\n    }\r\n\r\n    mapping(uint256 => Round) public rounds;\r\n\r\n    event EthClaim(address indexed claimer, uint256 amount, uint256 round);\r\n    event AdminWithdraw(uint256 amount, uint256 round);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _incentivesAddress) {\r\n        owner = msg.sender;\r\n        incentivesAddress = _incentivesAddress;\r\n    }\r\n\r\n    function depositRevenue(uint256 bbRevenue, uint256 bettingVolumeRevenue, uint256 referralsRevenue, uint256 incentivesRevenue) external payable onlyOwner {\r\n    require(msg.value == bbRevenue + bettingVolumeRevenue + referralsRevenue + incentivesRevenue, \"Mismatch in sent value and declared revenue distribution.\");\r\n    currentRound += 1;\r\n    \r\n    rounds[currentRound].revenueForBB = bbRevenue;\r\n    rounds[currentRound].revenueForBettingVolume = bettingVolumeRevenue;\r\n    rounds[currentRound].revenueForReferrals = referralsRevenue;\r\n\r\n    payable(incentivesAddress).transfer(incentivesRevenue); // send specified amount to the incentives address immediately\r\n}\r\n\r\n\r\n    function uploadBBBalances(address[] calldata bbHolders, uint256[] calldata bbBalances) external onlyOwner {\r\n    require(currentRound > 0, \"Deposit revenue first\");\r\n    Round storage r = rounds[currentRound];\r\n    require(!r.isSnapshotUploaded, \"Snapshot already uploaded for this round\");\r\n\r\n    for (uint256 i = 0; i < bbHolders.length; i++) {\r\n        r.snapshotBBBalances[bbHolders[i]] = bbBalances[i];\r\n        r.totalBBTokens += bbBalances[i];\r\n    }\r\n}\r\n\r\nfunction uploadBettingVolumes(address[] calldata betters, uint256[] calldata bettingVolumes) external onlyOwner {\r\n    require(currentRound > 0, \"Deposit revenue first\");\r\n    Round storage r = rounds[currentRound];\r\n    require(!r.isSnapshotUploaded, \"Snapshot already uploaded for this round\");\r\n\r\n    for (uint256 i = 0; i < betters.length; i++) {\r\n        r.snapshotBettingVolume[betters[i]] = bettingVolumes[i];\r\n        r.totalBettingVolume += bettingVolumes[i];\r\n    }\r\n}\r\n\r\nfunction uploadReferrals(address[] calldata referrers, uint256[] calldata referralAmounts) external onlyOwner {\r\n    require(currentRound > 0, \"Deposit revenue first\");\r\n    Round storage r = rounds[currentRound];\r\n    require(!r.isSnapshotUploaded, \"Snapshot already uploaded for this round\");\r\n\r\n    for (uint256 i = 0; i < referrers.length; i++) {\r\n        r.snapshotReferrals[referrers[i]] = referralAmounts[i];\r\n        r.totalReferrals += referralAmounts[i];\r\n    }\r\n}\r\n\r\nfunction lockSnapshot() external onlyOwner {\r\n    require(currentRound > 0, \"Deposit revenue first\");\r\n    Round storage r = rounds[currentRound];\r\n    require(!r.isSnapshotUploaded, \"Snapshot already uploaded for this round\");\r\n\r\n    r.isSnapshotUploaded = true;\r\n}\r\n\r\n   function claim(uint256 roundNumber) external {\r\n    require(roundNumber > 0 && roundNumber <= currentRound, \"Invalid round number\");\r\n    Round storage r = rounds[roundNumber];\r\n    require(r.isSnapshotUploaded, \"Snapshot not uploaded for this round\");\r\n    require(!r.hasClaimed[msg.sender], \"You have already claimed for this round\");\r\n\r\n    uint256 totalClaim = 0;\r\n\r\n    if (r.snapshotBBBalances[msg.sender] > 0) {\r\n        totalClaim += (r.revenueForBB * r.snapshotBBBalances[msg.sender]) / r.totalBBTokens;\r\n    }\r\n    \r\n    if (r.snapshotBettingVolume[msg.sender] > 0) {\r\n        totalClaim += (r.revenueForBettingVolume * r.snapshotBettingVolume[msg.sender]) / r.totalBettingVolume;\r\n    }\r\n    \r\n    if (r.snapshotReferrals[msg.sender] > 0) {\r\n        totalClaim += (r.revenueForReferrals * r.snapshotReferrals[msg.sender]) / r.totalReferrals;\r\n    }\r\n    \r\n    require(totalClaim > 0, \"No amount available to claim\");\r\n    r.hasClaimed[msg.sender] = true;\r\n\r\n    (bool success,) = msg.sender.call{value: totalClaim}(\"\");\r\n    require(success, \"Claim transfer failed\");\r\n\r\n    emit EthClaim(msg.sender, totalClaim, roundNumber);\r\n}\r\n\r\n\r\n   function getClaimableAmount(address userAddress, uint256 roundNumber) external view returns (\r\n    uint256 bbClaim,\r\n    uint256 bettingVolumeClaim,\r\n    uint256 referralClaim,\r\n    uint256 totalClaim\r\n) {\r\n    require(roundNumber > 0 && roundNumber <= currentRound, \"Invalid round number\");\r\n    Round storage r = rounds[roundNumber];\r\n    require(r.isSnapshotUploaded, \"Snapshot not uploaded for this round\");\r\n\r\n    if (r.snapshotBBBalances[userAddress] > 0) {\r\n        bbClaim = (r.revenueForBB * r.snapshotBBBalances[userAddress]) / r.totalBBTokens;\r\n    }\r\n    \r\n    if (r.snapshotBettingVolume[userAddress] > 0) {\r\n        bettingVolumeClaim = (r.revenueForBettingVolume * r.snapshotBettingVolume[userAddress]) / r.totalBettingVolume;\r\n    }\r\n    \r\n    if (r.snapshotReferrals[userAddress] > 0) {\r\n        referralClaim = (r.revenueForReferrals * r.snapshotReferrals[userAddress]) / r.totalReferrals;\r\n    }\r\n    \r\n    totalClaim = bbClaim + bettingVolumeClaim + referralClaim;\r\n\r\n    return (bbClaim, bettingVolumeClaim, referralClaim, totalClaim);\r\n}\r\n\r\n\r\n\r\n    function setIncentivesAddress(address _newIncentivesAddress) external onlyOwner {\r\n        incentivesAddress = _newIncentivesAddress;\r\n    }\r\n\r\n    function withdrawUnclaimed() public onlyOwner {\r\n        require(currentRound > 0, \"No rounds available for withdrawal\");\r\n        Round storage r = rounds[currentRound];\r\n        \r\n        uint256 unclaimedBB = r.revenueForBB;\r\n        uint256 unclaimedBetting = r.revenueForBettingVolume;\r\n        uint256 unclaimedReferrals = r.revenueForReferrals;\r\n        \r\n        r.revenueForBB = 0;\r\n        r.revenueForBettingVolume = 0;\r\n        r.revenueForReferrals = 0;\r\n        \r\n        (bool success,) = msg.sender.call{value: unclaimedBB + unclaimedBetting + unclaimedReferrals}(\"\");\r\n        require(success, \"Withdraw failed\");\r\n\r\n        emit AdminWithdraw(unclaimedBB + unclaimedBetting + unclaimedReferrals, currentRound);\r\n    }\r\n\r\n    receive() external payable {\r\n        revert(\"Send ETH using depositRevenue function\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_incentivesAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"AdminWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"EthClaim\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundNumber\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bbRevenue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bettingVolumeRevenue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralsRevenue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incentivesRevenue\",\"type\":\"uint256\"}],\"name\":\"depositRevenue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roundNumber\",\"type\":\"uint256\"}],\"name\":\"getClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bbClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bettingVolumeClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaim\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentivesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"revenueForBB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revenueForBettingVolume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revenueForReferrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBBTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBettingVolume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReferrals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSnapshotUploaded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newIncentivesAddress\",\"type\":\"address\"}],\"name\":\"setIncentivesAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bbHolders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bbBalances\",\"type\":\"uint256[]\"}],\"name\":\"uploadBBBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"betters\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bettingVolumes\",\"type\":\"uint256[]\"}],\"name\":\"uploadBettingVolumes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"referrers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"referralAmounts\",\"type\":\"uint256[]\"}],\"name\":\"uploadReferrals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUnclaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RevShareContract", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000098ccfe6069ef95606bc214ceec9efd52969990e4", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://00539f52459074765a135ab182288f1e052794f53c8cd8f5b074479feaac6061"}