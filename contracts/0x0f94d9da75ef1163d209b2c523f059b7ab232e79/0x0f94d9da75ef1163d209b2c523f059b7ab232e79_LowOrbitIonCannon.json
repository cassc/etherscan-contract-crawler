{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Hi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\n/*\\nhttps://twitter.com/LOICoin\\nhttps://t.me/LOICeth\\n*/\\n\\npragma solidity ^0.8.18;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n    address private _previousOwner;\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n}  \\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\\n\\ncontract LowOrbitIonCannon is Context, IERC20, Ownable {\\n    using SafeMath for uint256;\\n    mapping (address => uint256) private _rOwned;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n    mapping (address => bool) private _isExcludedFromFee;\\n    mapping (address => bool) private bots;\\n    mapping (address => uint) private cooldown;\\n    uint256 private constant _tTotal = 1e10 * 10**9;\\n    \\n    uint256 private _buyProjectFee = 1;\\n    uint256 private _previousBuyProjectFee = _buyProjectFee;\\n    uint256 private _buyLiquidityFee = 0;\\n    uint256 private _previousBuyLiquidityFee = _buyLiquidityFee;\\n    uint256 private _buyRewardFee = 0;\\n    uint256 private _previousBuyRewardFee = _buyRewardFee;\\n    \\n    uint256 private _sellProjectFee = 1;\\n    uint256 private _previousSellProjectFee = _sellProjectFee;\\n    uint256 private _sellLiquidityFee = 0;\\n    uint256 private _previousSellLiquidityFee = _sellLiquidityFee;\\n    uint256 private _sellRewardFee = 0;\\n    uint256 private _previousSellRewardFee = _sellRewardFee;\\n\\n    uint256 private tokensForReward;\\n    uint256 private tokensForProject;\\n    uint256 private tokensForLiquidity;\\n\\n    address payable private _rewardWallet;\\n    address payable private _projectWallet;\\n    address payable private _liquidityWallet;\\n    \\n    string private constant _name = \\\"Low Orbit Ion Cannon\\\";\\n    string private constant _symbol = \\\"LOIC\\\";\\n    uint8 private constant _decimals = 9;\\n    \\n    IUniswapV2Router02 private uniswapV2Router;\\n    address private uniswapV2Pair;\\n    bool private tradingOpen;\\n    bool private swapping;\\n    bool private inSwap = false;\\n    bool private swapEnabled = false;\\n    bool private cooldownEnabled = false;\\n    uint256 private tradingActiveBlock = 0; // 0 means trading is not active\\n    uint256 private blocksToBlacklist = 4;\\n    uint256 private _maxBuyAmount = _tTotal;\\n    uint256 private _maxSellAmount = _tTotal;\\n    uint256 private _maxWalletAmount = _tTotal;\\n    uint256 private swapTokensAtAmount = 0;\\n    \\n    event MaxBuyAmountUpdated(uint _maxBuyAmount);\\n    event MaxSellAmountUpdated(uint _maxSellAmount);\\n    event SwapAndLiquify(\\n        uint256 tokensSwapped,\\n        uint256 ethReceived,\\n        uint256 tokensIntoLiquidity\\n    );\\n    modifier lockTheSwap {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n    constructor () {\\n        _projectWallet = payable(0x4688e5aAec5642F5A0eC06ab5cc199e642c15646);\\n        _liquidityWallet = payable(address(0xdead));\\n        _rewardWallet = payable(0x4688e5aAec5642F5A0eC06ab5cc199e642c15646);\\n        _rOwned[_msgSender()] = _tTotal;\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[_projectWallet] = true;\\n        _isExcludedFromFee[_liquidityWallet] = true;\\n        _isExcludedFromFee[_rewardWallet] = true;\\n        emit Transfer(address(0x63e11117ea4148afCAcFa4e5174d82Cbf9515768), _msgSender(), _tTotal);\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public pure override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _rOwned[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function setCooldownEnabled(bool onoff) external onlyOwner() {\\n        cooldownEnabled = onoff;\\n    }\\n\\n    function setSwapEnabled(bool onoff) external onlyOwner(){\\n        swapEnabled = onoff;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        bool takeFee = false;\\n        bool shouldSwap = false;\\n        if (from != owner() && to != owner() && to != address(0) && to != address(0xdead) && !swapping) {\\n            require(!bots[from] && !bots[to]);\\n\\n            takeFee = true;\\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to] && cooldownEnabled) {\\n                require(amount <= _maxBuyAmount, \\\"Transfer amount exceeds the maxBuyAmount.\\\");\\n                require(balanceOf(to) + amount <= _maxWalletAmount, \\\"Exceeds maximum wallet token amount.\\\");\\n                require(cooldown[to] < block.timestamp);\\n                cooldown[to] = block.timestamp + (30 seconds);\\n            }\\n            \\n            if (to == uniswapV2Pair && from != address(uniswapV2Router) && !_isExcludedFromFee[from] && cooldownEnabled) {\\n                require(amount <= _maxSellAmount, \\\"Transfer amount exceeds the maxSellAmount.\\\");\\n                shouldSwap = true;\\n            }\\n        }\\n\\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\n            takeFee = false;\\n        }\\n\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        bool canSwap = (contractTokenBalance > swapTokensAtAmount) && shouldSwap;\\n\\n        if (canSwap && swapEnabled && !swapping && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\\n            swapping = true;\\n            swapBack();\\n            swapping = false;\\n        }\\n\\n        _tokenTransfer(from,to,amount,takeFee, shouldSwap);\\n    }\\n\\n    function swapBack() private {\\n        uint256 contractBalance = balanceOf(address(this));\\n        uint256 totalTokensToSwap = tokensForLiquidity + tokensForReward + tokensForProject;\\n        bool success;\\n        \\n        if(contractBalance == 0 || totalTokensToSwap == 0) {return;}\\n\\n        if(contractBalance > swapTokensAtAmount * 10) {\\n            contractBalance = swapTokensAtAmount * 10;\\n        }\\n        \\n        // Halve the amount of liquidity tokens\\n        uint256 liquidityTokens = contractBalance * tokensForLiquidity / totalTokensToSwap / 2;\\n        uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens);\\n        \\n        uint256 initialETHBalance = address(this).balance;\\n\\n        swapTokensForEth(amountToSwapForETH); \\n        \\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\\n        \\n        uint256 ethForReward = ethBalance.mul(tokensForReward).div(totalTokensToSwap);\\n        uint256 ethForProject = ethBalance.mul(tokensForProject).div(totalTokensToSwap);\\n        \\n        \\n        uint256 ethForLiquidity = ethBalance - ethForReward - ethForProject;\\n        \\n        \\n        tokensForLiquidity = 0;\\n        tokensForReward = 0;\\n        tokensForProject = 0;\\n        \\n        (success,) = address(_rewardWallet).call{value: ethForReward}(\\\"\\\");\\n        \\n        if(liquidityTokens > 0 && ethForLiquidity > 0){\\n            addLiquidity(liquidityTokens, ethForLiquidity);\\n            emit SwapAndLiquify(amountToSwapForETH, ethForLiquidity, tokensForLiquidity);\\n        }\\n        \\n        \\n        (success,) = address(_projectWallet).call{value: address(this).balance}(\\\"\\\");\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\\n            address(this),\\n            tokenAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            _liquidityWallet,\\n            block.timestamp\\n        );\\n    }\\n        \\n    function sendETHToFee(uint256 amount) private {\\n        _projectWallet.transfer(amount);\\n    }\\n    \\n    function openTrading() external onlyOwner() {\\n        require(!tradingOpen,\\\"trading is already open\\\");\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        uniswapV2Router = _uniswapV2Router;\\n        _approve(address(this), address(uniswapV2Router), _tTotal);\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\\n        swapEnabled = true;\\n        cooldownEnabled = true;\\n        _maxBuyAmount = 5e7 * 10**9;\\n        _maxSellAmount = 5e7 * 10**9;\\n        _maxWalletAmount = 1e8 * 10**9;\\n        swapTokensAtAmount = 5e6 * 10**9;\\n        tradingOpen = true;\\n        tradingActiveBlock = block.number;\\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\\n    }\\n\\n    function setMaxBuyAmount(uint256 maxBuy) public onlyOwner {\\n        _maxBuyAmount = maxBuy;\\n    }\\n\\n    function setMaxSellAmount(uint256 maxSell) public onlyOwner {\\n        _maxSellAmount = maxSell;\\n    }\\n    \\n    function setMaxWalletAmount(uint256 maxToken) public onlyOwner {\\n        _maxWalletAmount = maxToken;\\n    }\\n    \\n    function setSwapTokensAtAmount(uint256 newAmount) public onlyOwner {\\n        require(newAmount >= 1e3 * 10**9, \\\"Swap amount cannot be lower than 0.001% total supply.\\\");\\n        require(newAmount <= 5e6 * 10**9, \\\"Swap amount cannot be higher than 0.5% total supply.\\\");\\n        swapTokensAtAmount = newAmount;\\n    }\\n\\n    function setProjectWallet(address projectWallet) public onlyOwner() {\\n        require(projectWallet != address(0), \\\"projectWallet address cannot be 0\\\");\\n        _isExcludedFromFee[_projectWallet] = false;\\n        _projectWallet = payable(projectWallet);\\n        _isExcludedFromFee[_projectWallet] = true;\\n    }\\n\\n    function setRewardWallet(address rewardWallet) public onlyOwner() {\\n        require(rewardWallet != address(0), \\\"rewardWallet address cannot be 0\\\");\\n        _isExcludedFromFee[_rewardWallet] = false;\\n        _rewardWallet = payable(rewardWallet);\\n        _isExcludedFromFee[_rewardWallet] = true;\\n    }\\n\\n    function setLiquidityWallet(address liquidityWallet) public onlyOwner() {\\n        require(liquidityWallet != address(0), \\\"liquidityWallet address cannot be 0\\\");\\n        _isExcludedFromFee[_liquidityWallet] = false;\\n        _liquidityWallet = payable(liquidityWallet);\\n        _isExcludedFromFee[_liquidityWallet] = true;\\n    }\\n\\n    function excludeFromFee(address account) public onlyOwner {\\n        _isExcludedFromFee[account] = true;\\n    }\\n    \\n    function includeInFee(address account) public onlyOwner {\\n        _isExcludedFromFee[account] = false;\\n    }\\n\\n    function setBuyFee(uint256 buyProjectFee, uint256 buyLiquidityFee, uint256 buyRewardFee) external onlyOwner {\\n        require(buyProjectFee + buyLiquidityFee + buyRewardFee <= 1, \\\"Must keep buy taxes below 1%\\\");\\n        _buyProjectFee = buyProjectFee;\\n        _buyLiquidityFee = buyLiquidityFee;\\n        _buyRewardFee = buyRewardFee;\\n    }\\n\\n    function setSellFee(uint256 sellProjectFee, uint256 sellLiquidityFee, uint256 sellRewardFee) external onlyOwner {\\n        require(sellProjectFee + sellLiquidityFee + sellRewardFee <= 1, \\\"Must keep sell taxes below 1%\\\");\\n        _sellProjectFee = sellProjectFee;\\n        _sellLiquidityFee = sellLiquidityFee;\\n        _sellRewardFee = sellRewardFee;\\n    }\\n\\n    function setBlocksToBlacklist(uint256 blocks) public onlyOwner {\\n        blocksToBlacklist = blocks;\\n    }\\n\\n    function removeAllFee() public onlyOwner {\\n        if(_buyProjectFee == 0 && _buyLiquidityFee == 0 && _buyRewardFee == 0 && _sellProjectFee == 0 && _sellLiquidityFee == 0 && _sellRewardFee == 0) return;\\n        \\n        _previousBuyProjectFee = _buyProjectFee;\\n        _previousBuyLiquidityFee = _buyLiquidityFee;\\n        _previousBuyRewardFee = _buyRewardFee;\\n        _previousSellProjectFee = _sellProjectFee;\\n        _previousSellLiquidityFee = _sellLiquidityFee;\\n        _previousSellRewardFee = _sellRewardFee;\\n        \\n        _buyProjectFee = 0;\\n        _buyLiquidityFee = 0;\\n        _buyRewardFee = 0;\\n        _sellProjectFee = 0;\\n        _sellLiquidityFee = 0;\\n        _sellRewardFee = 0;\\n    }\\n    \\n    function restoreAllFee() public onlyOwner {\\n        _buyProjectFee = _previousBuyProjectFee;\\n        _buyLiquidityFee = _previousBuyLiquidityFee;\\n        _buyRewardFee = _previousBuyRewardFee;\\n        _sellProjectFee = _previousSellProjectFee;\\n        _sellLiquidityFee = _previousSellLiquidityFee;\\n        _sellRewardFee = _previousSellRewardFee;\\n    }\\n        \\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee, bool isSell) private {\\n        if(!takeFee) {\\n            removeAllFee();\\n        } else {\\n            amount = _takeFees(sender, amount, isSell);\\n        }\\n\\n        _transferStandard(sender, recipient, amount);\\n        \\n        if(!takeFee) {\\n            restoreAllFee();\\n        }\\n    }\\n\\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\\n        _rOwned[sender] = _rOwned[sender].sub(tAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(tAmount);\\n        emit Transfer(sender, recipient, tAmount);\\n    }\\n\\n    function _takeFees(address sender, uint256 amount, bool isSell) private returns (uint256) {\\n        uint256 _totalFees;\\n        uint256 pjctFee;\\n        uint256 liqFee;\\n        uint256 rwrdFee;\\n        if(tradingActiveBlock + blocksToBlacklist >= block.number){\\n            _totalFees = 99;\\n            liqFee = 92;\\n        } else {\\n            _totalFees = _getTotalFees(isSell);\\n            if (isSell) {\\n                pjctFee = _sellProjectFee;\\n                liqFee = _sellLiquidityFee;\\n                rwrdFee = _sellRewardFee;\\n            } else {\\n                pjctFee = _buyProjectFee;\\n                liqFee = _buyLiquidityFee;\\n                rwrdFee = _buyRewardFee;\\n            }\\n        }\\n\\n        uint256 fees = amount.mul(_totalFees).div(100);\\n        tokensForReward += fees * rwrdFee / _totalFees;\\n        tokensForProject += fees * pjctFee / _totalFees;\\n        tokensForLiquidity += fees * liqFee / _totalFees;\\n            \\n        if(fees > 0) {\\n            _transferStandard(sender, address(this), fees);\\n        }\\n            \\n        return amount -= fees;\\n    }\\n\\n    receive() external payable {}\\n    \\n    function manualswap() public onlyOwner() {\\n        uint256 contractBalance = balanceOf(address(this));\\n        swapTokensForEth(contractBalance);\\n    }\\n    \\n    function manualsend() public onlyOwner() {\\n        uint256 contractETHBalance = address(this).balance;\\n        sendETHToFee(contractETHBalance);\\n    }\\n\\n    function withdrawStuckETH() external onlyOwner {\\n        require(!tradingOpen, \\\"Can only withdraw if trading hasn't started\\\");\\n        bool success;\\n        (success,) = address(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n    }\\n\\n    function _getTotalFees(bool isSell) private view returns(uint256) {\\n        if (isSell) {\\n            return _sellProjectFee + _sellLiquidityFee + _sellRewardFee;\\n        }\\n        return _buyProjectFee + _buyLiquidityFee + _buyRewardFee;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxBuyAmount\",\"type\":\"uint256\"}],\"name\":\"MaxBuyAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxSellAmount\",\"type\":\"uint256\"}],\"name\":\"MaxSellAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restoreAllFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"setBlocksToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyProjectFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyRewardFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setCooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityWallet\",\"type\":\"address\"}],\"name\":\"setLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSell\",\"type\":\"uint256\"}],\"name\":\"setMaxSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxToken\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectWallet\",\"type\":\"address\"}],\"name\":\"setProjectWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardWallet\",\"type\":\"address\"}],\"name\":\"setRewardWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellProjectFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellRewardFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LowOrbitIonCannon", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}