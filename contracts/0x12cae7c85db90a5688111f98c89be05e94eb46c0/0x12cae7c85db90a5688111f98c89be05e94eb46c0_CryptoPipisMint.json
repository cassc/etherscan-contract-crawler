{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface  INFT {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function mintSeaDrop(address minter, uint256 quantity) external;\r\n}\r\n\r\n/**\r\n * @title Token mining manager administrator contract.\r\n */\r\ncontract Ownable {\r\n    address public owner_;\r\n\r\n    /// @dev Only admins can execute.\r\n    modifier onlyOwner() {\r\n        require(owner_ == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0) && owner_ != _newOwner);\r\n        owner_ = _newOwner;\r\n    }\r\n}\r\n\r\ncontract CryptoPipisMint is Ownable {\r\n\r\n    // Floor price per token\r\n    uint256 public price_ = 0.0044e18;\r\n    // The address of pipis NFT\r\n    address public nft = 0xfb9DE29EE5406BDDC27A1413Ef2c47c66C78f097;\r\n    // Mint event\r\n    event Minted(address indexed wallet, uint amount);  \r\n\r\n    // =============================================================\r\n    //                          CONSTRUCTOR\r\n    // =============================================================\r\n\r\n    constructor() {\r\n        owner_ = msg.sender;\r\n    }\r\n\r\n    function setPrice(uint256 _price) external onlyOwner {\r\n        price_ = _price;\r\n    }\r\n\r\n    // =============================================================\r\n    //                       PUPLIC FUNCTIONS\r\n    // =============================================================\r\n    \r\n    function getMintable() public view returns(uint) {\r\n        return (uint(10000) - INFT(nft).totalSupply());\r\n    }\r\n\r\n    // Maximum tokens to mint is 10,000\r\n    function mint(uint256 _amount) public payable {\r\n\r\n        uint256 _price = _amount * price_;\r\n        uint256 _mintable = uint(10000) - INFT(nft).totalSupply();\r\n\r\n        require(_amount <= _mintable, \"Mint: quantity exceeds available tokens for mint\");\r\n        require(_amount <= 10, \"Mint: quantity exceeds maximum allowed per transaction\");\r\n\r\n        // For contract owner to mass mint the remaining tokens if any\r\n        // to be then sold on open marketplaces\r\n        if (msg.sender == owner_) {\r\n            _price = 0;\r\n        } else {\r\n            require(INFT(nft).balanceOf(msg.sender) + _amount <= 100, 'Exceeds max mint per wallet reached');\r\n        }\r\n\r\n        require(msg.value >= _price, \"Insufficient payment\");\r\n\r\n        INFT(nft).mintSeaDrop(msg.sender, _amount);\r\n\r\n        // Transfer excess amount of ether\r\n        if (msg.value > _price) {\r\n            payable(msg.sender).transfer(msg.value - _price);\r\n        }\r\n\r\n        emit Minted(msg.sender, _amount);        \r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        uint _amount = address(this).balance;\r\n        payable(owner_).transfer(_amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getMintable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CryptoPipisMint", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2ac944ecc53b38b7ba6fa0a09b83825d94e46f04913552607053934355a53e0d"}