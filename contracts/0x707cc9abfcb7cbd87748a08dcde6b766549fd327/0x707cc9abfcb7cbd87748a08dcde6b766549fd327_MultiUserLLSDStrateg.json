{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/BaseAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { CoreAccessControl, CoreAccessControlConfig } from \\\"../core/CoreAccessControl/v1/CoreAccessControl.sol\\\";\\nimport { CoreStopGuardian } from \\\"../core/CoreStopGuardian/v1/CoreStopGuardian.sol\\\";\\n\\nabstract contract BaseAccessControl is CoreAccessControl, CoreStopGuardian {\\n    /**\\n     * @dev\\n     * Modifiers inherited from CoreAccessControl:\\n     * onlyDefinitive\\n     * onlyClients\\n     * onlyWhitelisted\\n     * onlyClientAdmin\\n     * onlyDefinitiveAdmin\\n     *\\n     * Modifiers inherited from CoreStopGuardian:\\n     * stopGuarded\\n     */\\n\\n    constructor(CoreAccessControlConfig memory coreAccessControlConfig) CoreAccessControl(coreAccessControlConfig) {}\\n\\n    /**\\n     * @dev Inherited from CoreStopGuardian\\n     */\\n    function enableStopGuardian() public override onlyAdmins {\\n        return _enableStopGuardian();\\n    }\\n\\n    /**\\n     * @dev Inherited from CoreStopGuardian\\n     */\\n    function disableStopGuardian() public override onlyClientAdmin {\\n        return _disableStopGuardian();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/BaseFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { BaseAccessControl } from \\\"./BaseAccessControl.sol\\\";\\nimport { CoreFees, CoreFeesConfig } from \\\"../core/CoreFees/v1/CoreFees.sol\\\";\\nimport { DefinitiveAssets, IERC20 } from \\\"../core/libraries/DefinitiveAssets.sol\\\";\\nimport { DefinitiveConstants } from \\\"../core/libraries/DefinitiveConstants.sol\\\";\\nimport { InvalidFeePercent } from \\\"../core/libraries/DefinitiveErrors.sol\\\";\\n\\nabstract contract BaseFees is BaseAccessControl, CoreFees {\\n    using DefinitiveAssets for IERC20;\\n\\n    constructor(CoreFeesConfig memory coreFeesConfig) CoreFees(coreFeesConfig) {}\\n\\n    function updateFeeAccount(address payable _feeAccount) public override onlyDefinitiveAdmin {\\n        _updateFeeAccount(_feeAccount);\\n    }\\n\\n    function _handleFeesOnAmount(address token, uint256 amount, uint256 feePct) internal returns (uint256 feeAmount) {\\n        uint256 mMaxFeePCT = DefinitiveConstants.MAX_FEE_PCT;\\n        if (feePct > mMaxFeePCT) {\\n            revert InvalidFeePercent();\\n        }\\n\\n        feeAmount = (amount * feePct) / mMaxFeePCT;\\n        if (feeAmount > 0) {\\n            if (token == DefinitiveConstants.NATIVE_ASSET_ADDRESS) {\\n                DefinitiveAssets.safeTransferETH(FEE_ACCOUNT, feeAmount);\\n            } else {\\n                IERC20(token).safeTransfer(FEE_ACCOUNT, feeAmount);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/BaseMultiUserFees/v1/BaseMultiUserFeesUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { StorageSlotUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\\\";\\nimport { IBaseMultiUserFeesUpgradeableV1 } from \\\"./IBaseMultiUserFeesUpgradeableV1.sol\\\";\\nimport { InvalidInputs } from \\\"../../../core/libraries/DefinitiveErrors.sol\\\";\\nimport { ContextUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport { DefinitiveAssets, IERC20 } from \\\"../../../core/libraries/DefinitiveAssets.sol\\\";\\n\\nabstract contract BaseMultiUserFeesUpgradeable is IBaseMultiUserFeesUpgradeableV1, Initializable, ContextUpgradeable {\\n    using DefinitiveAssets for IERC20;\\n\\n    uint256 private constant _MAX_FEE_PERCENTAGE = 10_000;\\n\\n    /* solhint-disable max-line-length */\\n    /**\\n     * @dev Storage slot with the current fee charged upon redemption.\\n     * This is the keccak-256 hash of \\\"Definitive.BaseMultiUserFeesUpgradeableV1._REDEMPTION_FEE_PERCENTAGE_SLOT\\\" subtracted by 1\\n     * bytes32(uint256(keccak256(\\\"Definitive.BaseMultiUserFeesUpgradeableV1._REDEMPTION_FEE_PERCENTAGE_SLOT\\\")) - 1)\\n     */\\n    /* solhint-enable max-line-length */\\n    bytes32 internal constant _REDEMPTION_FEE_PERCENTAGE_SLOT =\\n        0x14aa58a89d3f94ea99187ab98e735eb8f742cc801507b0f8968576d3fdc3c8cc;\\n\\n    /**\\n     * @dev Storage slot with the current fee charged upon redemption.\\n     * This is the keccak-256 hash of \\\"Definitive.BaseMultiUserFeesUpgradeableV1._FEES_ACCOUNT_SLOT\\\" subtracted by 1\\n     * bytes32(uint256(keccak256(\\\"Definitive.BaseMultiUserFeesUpgradeableV1._FEES_ACCOUNT_SLOT\\\")) - 1)\\n     */\\n    bytes32 internal constant _FEES_ACCOUNT_SLOT = 0x68433f9d83ac21ac7a279e7d087229a9129597a360563c499bb398b5664b27c1;\\n\\n    function __BaseMultiUserFees_init(address _feesAccount) internal initializer {\\n        __BaseMultiUserFees_init_unchained(_feesAccount);\\n    }\\n\\n    function __BaseMultiUserFees_init_unchained(address _feesAccount) internal initializer {\\n        _setFeesAccount(_feesAccount);\\n    }\\n\\n    function getFeesAccount() public view returns (address) {\\n        return address(StorageSlotUpgradeable.getAddressSlot(_FEES_ACCOUNT_SLOT).value);\\n    }\\n\\n    function getRedemptionFee() public view returns (uint256) {\\n        return uint256(StorageSlotUpgradeable.getUint256Slot(_REDEMPTION_FEE_PERCENTAGE_SLOT).value);\\n    }\\n\\n    function getRedemptionFeeAmount(uint256 amount) public view returns (uint256 feeAmount) {\\n        feeAmount = _getFeeAmount(amount, getRedemptionFee());\\n    }\\n\\n    function _getFeeAmount(uint256 amount, uint256 fee) private pure returns (uint256) {\\n        return (amount * fee) / _MAX_FEE_PERCENTAGE;\\n    }\\n\\n    function _handleRedemptionFeesOnShares(\\n        address owner,\\n        address asset,\\n        uint256 amount,\\n        uint256 additionalFeePct\\n    ) internal returns (uint256 feeAmount) {\\n        uint256 baseFee = getRedemptionFee();\\n        if ((baseFee + additionalFeePct) > _MAX_FEE_PERCENTAGE) {\\n            revert InvalidInputs();\\n        }\\n\\n        address feesAccount = getFeesAccount();\\n        uint256 baseFeeAmount = _getFeeAmount(amount, baseFee);\\n        uint256 additionalFeeAmount = _getFeeAmount(amount, additionalFeePct);\\n        feeAmount = baseFeeAmount + additionalFeeAmount;\\n\\n        if (feeAmount > 0 && feesAccount != address(0)) {\\n            _transferShares(owner, feesAccount, feeAmount);\\n            emit RedemptionFee(_msgSender(), asset, amount, baseFeeAmount, additionalFeeAmount);\\n        }\\n    }\\n\\n    function _setFeesAccount(address value) internal {\\n        if (value == address(0)) {\\n            revert InvalidInputs();\\n        }\\n\\n        StorageSlotUpgradeable.getAddressSlot(_FEES_ACCOUNT_SLOT).value = value;\\n        emit FeeAccountUpdated(_msgSender(), value);\\n    }\\n\\n    function _setRedemptionFee(uint256 value) internal {\\n        if (value >= _MAX_FEE_PERCENTAGE) {\\n            revert InvalidInputs();\\n        }\\n        StorageSlotUpgradeable.getUint256Slot(_REDEMPTION_FEE_PERCENTAGE_SLOT).value = value;\\n        emit RedemptionFeeUpdated(_msgSender(), value);\\n    }\\n\\n    function _transferShares(address from, address to, uint256 amount) internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/base/BaseMultiUserFees/v1/IBaseMultiUserFeesUpgradeableV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\ninterface IBaseMultiUserFeesUpgradeableV1 {\\n    event FeeAccountUpdated(address actor, address feeAccount);\\n\\n    event RedemptionFee(address actor, address asset, uint256 amount, uint256 feeAmount, uint256 additionalFeeAmount);\\n\\n    event RedemptionFeeUpdated(address actor, uint256 redemptionFee);\\n\\n    function getFeesAccount() external view returns (address);\\n\\n    function getRedemptionFeeAmount(uint256 amount) external view returns (uint256 feeAmount);\\n\\n    function getRedemptionFee() external view returns (uint256 percent4);\\n\\n    function setFeesAccount(address) external;\\n\\n    function setRedemptionFee(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/BaseMultiUserStrategy/BaseMultiUserStrategyV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { ERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { IBaseMultiUserStrategyV1 } from \\\"./IBaseMultiUserStrategyV1.sol\\\";\\nimport { ICoreAccessControlV1 } from \\\"../../core/CoreAccessControl/v1/ICoreAccessControlV1.sol\\\";\\nimport { AccountNotAdmin, SafeHarborModeEnabled } from \\\"../../core/libraries/DefinitiveErrors.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { CoreMulticall } from \\\"../../core/CoreMulticall/v1/CoreMulticall.sol\\\";\\nimport { BaseMultiUserFeesUpgradeable } from \\\"../../base/BaseMultiUserFees/v1/BaseMultiUserFeesUpgradeable.sol\\\";\\nimport { CoreTransfersNativeUpgradeable } from \\\"../../core/CoreTransfersNative/v1/CoreTransfersNativeUpgradeable.sol\\\";\\nimport { BaseNativeWrapperUpgradeable } from \\\"../../base/BaseNativeWrapperUpgradeable/BaseNativeWrapperUpgradeable.sol\\\";\\nimport { IBaseSafeHarborMode } from \\\"../../base/BaseSafeHarborMode/IBaseSafeHarborMode.sol\\\";\\nimport { StorageSlotUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\\\";\\n\\ninterface IDefinitiveVault is ICoreAccessControlV1, IBaseSafeHarborMode {\\n    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);\\n}\\n\\nabstract contract BaseMultiUserStrategyV1 is\\n    IBaseMultiUserStrategyV1,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    ERC20Upgradeable,\\n    UUPSUpgradeable,\\n    CoreMulticall,\\n    BaseMultiUserFeesUpgradeable,\\n    CoreTransfersNativeUpgradeable,\\n    BaseNativeWrapperUpgradeable\\n{\\n    address payable public VAULT;\\n\\n    /* solhint-disable max-line-length */\\n    /**\\n     * @dev Storage slot with flag allowing redemptions during safe harbor.\\n     * This is the keccak-256 hash of \\\"Definitive.BaseMultiUserStrategyV1._ENABLE_SAFE_HARBOR_REDEMPTIONS_SLOT\\\" subtracted by 1\\n     * bytes32(uint256(keccak256(\\\"Definitive.BaseMultiUserStrategyV1._ENABLE_SAFE_HARBOR_REDEMPTIONS_SLOT\\\")) - 1)\\n     */\\n    /* solhint-enable max-line-length */\\n    bytes32 internal constant _ENABLE_SAFE_HARBOR_REDEMPTIONS_SLOT =\\n        0xd8e383845db7ecbb6065c22cc5d1320931e4ef39a73fc10e0587d5257ff50379;\\n\\n    modifier onlyDefinitiveVaultAdmins() {\\n        _validateOnlyDefinitiveVaultAdmins();\\n\\n        _;\\n    }\\n\\n    /// @notice Revert if safe harbor mode is enabled\\n    modifier revertIfSafeHarborModeEnabled() {\\n        if (getSafeHarborModeEnabled()) {\\n            revert SafeHarborModeEnabled();\\n        }\\n        _;\\n    }\\n\\n    function __BaseMultiUserStrategy_init(\\n        address _vault,\\n        string memory _name,\\n        string memory _symbol,\\n        address _feesAccount\\n    ) internal onlyInitializing {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        __ERC20_init(_name, _symbol);\\n        __BaseMultiUserFees_init(_feesAccount);\\n        __BaseMultiUserStrategy_init_unchained(_vault);\\n    }\\n\\n    function __BaseMultiUserStrategy_init_unchained(address _vault) internal onlyInitializing {\\n        VAULT = payable(_vault);\\n        StorageSlotUpgradeable.getBooleanSlot(_ENABLE_SAFE_HARBOR_REDEMPTIONS_SLOT).value = false;\\n    }\\n\\n    function getVersion() external view returns (uint256) {\\n        return _getInitializedVersion();\\n    }\\n\\n    function setFeesAccount(address _value) external onlyDefinitiveVaultAdmins {\\n        _setFeesAccount(_value);\\n    }\\n\\n    function setRedemptionFee(uint256 _value) external onlyDefinitiveVaultAdmins {\\n        _setRedemptionFee(_value);\\n    }\\n\\n    function setSafeHarborRedemptions(bool allow) external onlyDefinitiveVaultAdmins {\\n        StorageSlotUpgradeable.getBooleanSlot(_ENABLE_SAFE_HARBOR_REDEMPTIONS_SLOT).value = allow;\\n    }\\n\\n    function getSafeHarborModeEnabled() public view returns (bool) {\\n        return IDefinitiveVault(VAULT).SAFE_HARBOR_MODE_ENABLED();\\n    }\\n\\n    /// @dev Required by UUPSUpgradeable, used by `upgradeTo()` and `upgradeToAndCall()`\\n    /// @dev https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable-_authorizeUpgrade-address-\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    /// @notice Revert if caller is not definitive admin on underlying vault\\n    function _validateOnlyDefinitiveVaultAdmins() private {\\n        IDefinitiveVault mVault = IDefinitiveVault(VAULT);\\n\\n        if (\\n            !mVault.hasRole(mVault.ROLE_DEFINITIVE_ADMIN(), _msgSender()) &&\\n            !mVault.hasRole(mVault.DEFAULT_ADMIN_ROLE(), _msgSender())\\n        ) {\\n            revert AccountNotAdmin(_msgSender());\\n        }\\n    }\\n\\n    function _transferShares(address from, address to, uint256 amount) internal override {\\n        return _transfer(from, to, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/BaseMultiUserStrategy/IBaseMultiUserStrategyV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { ICoreUUPS_ABIVersionAware } from \\\"../../core_upgradeable/ICoreUUPS_ABIVersionAware.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {\\n    IERC20MetadataUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\ninterface IBaseMultiUserStrategyV1 is IERC20Upgradeable, IERC20MetadataUpgradeable, ICoreUUPS_ABIVersionAware {}\\n\"\r\n    },\r\n    \"contracts/base/BaseNativeWrapperUpgradeable/BaseNativeWrapperUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { DefinitiveAssets } from \\\"../../core/libraries/DefinitiveAssets.sol\\\";\\nimport { IWETH9 } from \\\"../../vendor/interfaces/IWETH9.sol\\\";\\n\\nabstract contract BaseNativeWrapperUpgradeable is Initializable {\\n    address payable public WRAPPED_NATIVE_ASSET_ADDRESS;\\n\\n    function __BaseNativeWrapper_init(address wrappedNativeAssetAddress) internal onlyInitializing {\\n        __BaseNativeWrapper_init_unchained(wrappedNativeAssetAddress);\\n    }\\n\\n    function __BaseNativeWrapper_init_unchained(address wrappedNativeAssetAddress) internal onlyInitializing {\\n        WRAPPED_NATIVE_ASSET_ADDRESS = payable(wrappedNativeAssetAddress);\\n    }\\n\\n    function _wrap(uint256 amount) internal {\\n        // slither-disable-next-line arbitrary-send-eth\\n        IWETH9(WRAPPED_NATIVE_ASSET_ADDRESS).deposit{ value: amount }();\\n    }\\n\\n    function _unwrap(uint256 amount) internal {\\n        IWETH9(WRAPPED_NATIVE_ASSET_ADDRESS).withdraw(amount);\\n    }\\n\\n    function _wrapAll() internal {\\n        return _wrap(address(this).balance);\\n    }\\n\\n    function _unwrapAll() internal {\\n        return _unwrap(DefinitiveAssets.getBalance(WRAPPED_NATIVE_ASSET_ADDRESS));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/BasePermissionedExecution/IBasePermissionedExecution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { ICoreAccessControlV1 } from \\\"../../core/CoreAccessControl/v1/ICoreAccessControlV1.sol\\\";\\n\\ninterface IBasePermissionedExecution is ICoreAccessControlV1 {\\n    function executeOperation(address target, bytes calldata payload) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/base/BaseSafeHarborMode/IBaseSafeHarborMode.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\n// solhint-disable-next-line contract-name-camelcase\\ninterface IBaseSafeHarborMode {\\n    event SafeHarborModeUpdate(address indexed actor, bool indexed isEnabled);\\n\\n    function SAFE_HARBOR_MODE_ENABLED() external view returns (bool);\\n\\n    function enableSafeHarborMode() external;\\n\\n    function disableSafeHarborMode() external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/BaseSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { BaseFees } from \\\"./BaseFees.sol\\\";\\nimport { CoreSwap, CoreSwapConfig, SwapPayload } from \\\"../core/CoreSwap/v1/CoreSwap.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { DefinitiveConstants } from \\\"../core/libraries/DefinitiveConstants.sol\\\";\\nimport { InvalidFeePercent, InvalidSwapPayload, SlippageExceeded } from \\\"../core/libraries/DefinitiveErrors.sol\\\";\\nimport { ICoreSwapHandlerV1 } from \\\"../core/CoreSwapHandler/ICoreSwapHandlerV1.sol\\\";\\n\\nabstract contract BaseSwap is BaseFees, CoreSwap, ReentrancyGuard {\\n    constructor(CoreSwapConfig memory coreSwapConfig) CoreSwap(coreSwapConfig) {}\\n\\n    function enableSwapTokens(address[] memory swapTokens) public override onlyClientAdmin stopGuarded {\\n        return _updateSwapTokens(swapTokens, true);\\n    }\\n\\n    function disableSwapTokens(address[] memory swapTokens) public override onlyAdmins {\\n        return _updateSwapTokens(swapTokens, false);\\n    }\\n\\n    function enableSwapOutputTokens(address[] memory swapOutputTokens) public override onlyClientAdmin stopGuarded {\\n        return _updateSwapOutputTokens(swapOutputTokens, true);\\n    }\\n\\n    function disableSwapOutputTokens(address[] memory swapOutputTokens) public override onlyAdmins {\\n        return _updateSwapOutputTokens(swapOutputTokens, false);\\n    }\\n\\n    function enableSwapHandlers(address[] memory swapHandlers) public override onlyClientAdmin stopGuarded {\\n        _updateSwapHandlers(swapHandlers, true);\\n    }\\n\\n    function disableSwapHandlers(address[] memory swapHandlers) public override onlyAdmins {\\n        _updateSwapHandlers(swapHandlers, false);\\n    }\\n\\n    function swap(\\n        SwapPayload[] memory payloads,\\n        address outputToken,\\n        uint256 amountOutMin,\\n        uint256 feePct\\n    ) external override onlyWhitelisted nonReentrant stopGuarded returns (uint256) {\\n        if (feePct > DefinitiveConstants.MAX_FEE_PCT) {\\n            revert InvalidFeePercent();\\n        }\\n\\n        (uint256[] memory inputAmounts, uint256 outputAmount) = _swap(payloads, outputToken);\\n        if (outputAmount < amountOutMin) {\\n            revert SlippageExceeded(outputAmount, amountOutMin);\\n        }\\n\\n        address[] memory swapTokens = new address[](payloads.length);\\n        uint256 swapTokensLength = swapTokens.length;\\n        for (uint256 i; i < swapTokensLength; ) {\\n            swapTokens[i] = payloads[i].swapToken;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint256 feeAmount;\\n        if (FEE_ACCOUNT != address(0) && outputAmount > 0 && feePct > 0) {\\n            feeAmount = _handleFeesOnAmount(outputToken, outputAmount, feePct);\\n        }\\n        emit SwapHandled(swapTokens, inputAmounts, outputToken, outputAmount, feeAmount);\\n\\n        return outputAmount;\\n    }\\n\\n    function _getEncodedSwapHandlerCalldata(\\n        SwapPayload memory payload,\\n        address expectedOutputToken,\\n        bool isPrincipalAssetSwap,\\n        bool isDelegateCall\\n    ) internal pure override returns (bytes memory) {\\n        // Principal Swaps\\n        if (isPrincipalAssetSwap && isDelegateCall) {\\n            revert InvalidSwapPayload();\\n        }\\n\\n        bytes4 selector;\\n        if (isPrincipalAssetSwap) {\\n            selector = ICoreSwapHandlerV1.swapUsingValidatedPathCall.selector;\\n        } else {\\n            selector = isDelegateCall ? ICoreSwapHandlerV1.swapDelegate.selector : ICoreSwapHandlerV1.swapCall.selector;\\n        }\\n\\n        ICoreSwapHandlerV1.SwapParams memory _params = ICoreSwapHandlerV1.SwapParams({\\n            inputAssetAddress: payload.swapToken,\\n            inputAmount: payload.amount,\\n            outputAssetAddress: expectedOutputToken,\\n            minOutputAmount: payload.amountOutMin,\\n            data: payload.handlerCalldata,\\n            signature: payload.signature\\n        });\\n\\n        return abi.encodeWithSelector(selector, _params);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/BaseTransfers/v1/IBaseTransfersV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { ICoreAccessControlV1 } from \\\"../../../core/CoreAccessControl/v1/ICoreAccessControlV1.sol\\\";\\nimport { ICoreDepositV1 } from \\\"../../../core/CoreDeposit/v1/ICoreDepositV1.sol\\\";\\nimport { ICoreStopGuardianV1 } from \\\"../../../core/CoreStopGuardian/v1/ICoreStopGuardianV1.sol\\\";\\nimport { ICoreWithdrawV1 } from \\\"../../../core/CoreWithdraw/v1/CoreWithdraw.sol\\\";\\n\\n// This interface cannot be implemented on BaseTransfers.sol, but it's accurate\\n// since BaseTransfers.sol only inherits and overrides methods, and does not define\\n// additional public/external methods.\\n\\ninterface IBaseTransfersV1 is ICoreDepositV1, ICoreWithdrawV1, ICoreAccessControlV1, ICoreStopGuardianV1 {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/core_upgradeable/ICoreUUPS_ABIVersionAware.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\n// solhint-disable-next-line contract-name-camelcase\\ninterface ICoreUUPS_ABIVersionAware {\\n    /// @notice Define this with a `constant`\\n    /// @dev EG: `uint256 public constant ABI_VERSION = 1;`\\n    function ABI_VERSION() external view returns (uint256);\\n\\n    /// @notice This method should return `Initializable._getInitializedVersion()`\\n    function getVersion() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreAccessControl/v1/CoreAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { AccessControl as OZAccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { ICoreAccessControlV1 } from \\\"./ICoreAccessControlV1.sol\\\";\\nimport { AccountNotAdmin, AccountNotWhitelisted, AccountMissingRole } from \\\"../../libraries/DefinitiveErrors.sol\\\";\\n\\nstruct CoreAccessControlConfig {\\n    address admin;\\n    address definitiveAdmin;\\n    address[] definitive;\\n    address[] client;\\n}\\n\\nabstract contract CoreAccessControl is ICoreAccessControlV1, OZAccessControl {\\n    // roles\\n    bytes32 public constant ROLE_DEFINITIVE = keccak256(\\\"DEFINITIVE\\\");\\n    bytes32 public constant ROLE_DEFINITIVE_ADMIN = keccak256(\\\"DEFINITIVE_ADMIN\\\");\\n    bytes32 public constant ROLE_CLIENT = keccak256(\\\"CLIENT\\\");\\n\\n    modifier onlyDefinitive() {\\n        _checkRole(ROLE_DEFINITIVE);\\n        _;\\n    }\\n    modifier onlyDefinitiveAdmin() {\\n        _checkRole(ROLE_DEFINITIVE_ADMIN);\\n        _;\\n    }\\n    modifier onlyClients() {\\n        _checkRole(ROLE_CLIENT);\\n        _;\\n    }\\n    modifier onlyClientAdmin() {\\n        _checkRole(DEFAULT_ADMIN_ROLE);\\n        _;\\n    }\\n    // default admin + definitive admin\\n    modifier onlyAdmins() {\\n        bool isAdmins = (hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) || hasRole(ROLE_DEFINITIVE_ADMIN, _msgSender()));\\n\\n        if (!isAdmins) {\\n            revert AccountNotAdmin(_msgSender());\\n        }\\n        _;\\n    }\\n    // client + definitive\\n    modifier onlyWhitelisted() {\\n        bool isWhitelisted = (hasRole(ROLE_CLIENT, _msgSender()) || hasRole(ROLE_DEFINITIVE, _msgSender()));\\n\\n        if (!isWhitelisted) {\\n            revert AccountNotWhitelisted(_msgSender());\\n        }\\n        _;\\n    }\\n\\n    constructor(CoreAccessControlConfig memory cfg) {\\n        // admin\\n        _setupRole(DEFAULT_ADMIN_ROLE, cfg.admin);\\n\\n        // definitive admin\\n        _setupRole(ROLE_DEFINITIVE_ADMIN, cfg.definitiveAdmin);\\n        _setRoleAdmin(ROLE_DEFINITIVE_ADMIN, ROLE_DEFINITIVE_ADMIN);\\n\\n        // definitive\\n        uint256 cfgDefinitiveLength = cfg.definitive.length;\\n        for (uint256 i; i < cfgDefinitiveLength; ) {\\n            _setupRole(ROLE_DEFINITIVE, cfg.definitive[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        _setRoleAdmin(ROLE_DEFINITIVE, ROLE_DEFINITIVE_ADMIN);\\n\\n        // clients - implicit role admin is DEFAULT_ADMIN_ROLE\\n        uint256 cfgClientLength = cfg.client.length;\\n        for (uint256 i; i < cfgClientLength; ) {\\n            _setupRole(ROLE_CLIENT, cfg.client[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _checkRole(bytes32 role, address account) internal view virtual override {\\n        if (!hasRole(role, account)) {\\n            revert AccountMissingRole(account, role);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreAccessControl/v1/ICoreAccessControlV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { IAccessControl } from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface ICoreAccessControlV1 is IAccessControl {\\n    function ROLE_CLIENT() external returns (bytes32);\\n\\n    function ROLE_DEFINITIVE() external returns (bytes32);\\n\\n    function ROLE_DEFINITIVE_ADMIN() external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreDeposit/v1/ICoreDepositV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\ninterface ICoreDepositV1 {\\n    event Deposit(address indexed actor, address[] assetAddresses, uint256[] amounts);\\n\\n    function deposit(uint256[] calldata amounts, address[] calldata assetAddresses) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreFees/v1/CoreFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { ICoreFeesV1 } from \\\"./ICoreFeesV1.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nstruct CoreFeesConfig {\\n    address payable feeAccount;\\n}\\n\\nabstract contract CoreFees is ICoreFeesV1, Context {\\n    address payable public FEE_ACCOUNT;\\n\\n    constructor(CoreFeesConfig memory coreFeesConfig) {\\n        FEE_ACCOUNT = coreFeesConfig.feeAccount;\\n    }\\n\\n    function _updateFeeAccount(address payable feeAccount) internal {\\n        FEE_ACCOUNT = feeAccount;\\n        emit FeeAccountUpdated(_msgSender(), feeAccount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreFees/v1/ICoreFeesV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\ninterface ICoreFeesV1 {\\n    event FeeAccountUpdated(address actor, address feeAccount);\\n\\n    function FEE_ACCOUNT() external returns (address payable);\\n\\n    function updateFeeAccount(address payable feeAccount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreMulticall/v1/CoreMulticall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { ICoreMulticallV1 } from \\\"./ICoreMulticallV1.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { DefinitiveAssets } from \\\"../../libraries/DefinitiveAssets.sol\\\";\\n\\n/* solhint-disable max-line-length */\\n/**\\n * @notice Implements openzeppelin/contracts/utils/Multicall.sol\\n * Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/5b027e517e6aee69f4b4b2f5e78274ac8ee53513/contracts/utils/Multicall.sol solhint-disable max-line-length\\n */\\n/* solhint-enable max-line-length */\\nabstract contract CoreMulticall is ICoreMulticallV1 {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\\n        uint256 dataLength = data.length;\\n        results = new bytes[](dataLength);\\n        for (uint256 i; i < dataLength; ) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function getBalance(address assetAddress) public view returns (uint256) {\\n        return DefinitiveAssets.getBalance(assetAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreMulticall/v1/ICoreMulticallV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\ninterface ICoreMulticallV1 {\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results);\\n\\n    function getBalance(address assetAddress) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreSignatureVerification/v1/CoreSignatureVerification.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { ICoreSignatureVerificationV1 } from \\\"./ICoreSignatureVerificationV1.sol\\\";\\nimport { ContextUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {\\n    InvalidSignature,\\n    InvalidSignatureLength,\\n    NoSignatureVerificationSignerSet\\n} from \\\"../../libraries/DefinitiveErrors.sol\\\";\\n\\n/*\\n    To encode a bytes32 messageHash for signature verification):\\n        keccak256(abi.encodePacked(...))\\n*/\\nabstract contract CoreSignatureVerification is ICoreSignatureVerificationV1, ContextUpgradeable, OwnableUpgradeable {\\n    address public _signatureVerificationSigner;\\n\\n    function __CoreSignatureVerification_init(address signer) internal onlyInitializing {\\n        __Context_init();\\n        __Ownable_init();\\n        __CoreSignatureVerification_init_unchained(signer);\\n    }\\n\\n    function __CoreSignatureVerification_init_unchained(address signer) internal onlyInitializing {\\n        _signatureVerificationSigner = signer;\\n    }\\n\\n    function _verifySignature(bytes32 messageHash, bytes memory signature) internal view {\\n        if (_signatureVerificationSigner == address(0)) {\\n            revert NoSignatureVerificationSignerSet();\\n        }\\n\\n        bytes32 ethSignedMessageHash = _getEthSignedMessageHash(messageHash);\\n        if (!_verifySignedBy(_signatureVerificationSigner, ethSignedMessageHash, signature)) {\\n            revert InvalidSignature();\\n        }\\n    }\\n\\n    /* cSpell:disable */\\n    function _getEthSignedMessageHash(bytes32 _messageHash) public pure returns (bytes32) {\\n        /*\\n            Signature is produced by signing a keccak256 hash with the following format:\\n            \\\"\\\\x19Ethereum Signed Message\\\\n\\\" + len(msg) + msg\\n        */\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash));\\n    }\\n\\n    /* cSpell:enable */\\n\\n    function _verifySignedBy(\\n        address signer,\\n        bytes32 ethSignedMessageHash,\\n        bytes memory signature\\n    ) private pure returns (bool) {\\n        (bytes32 r, bytes32 s, uint8 v) = _splitSignature(signature);\\n        return ecrecover(ethSignedMessageHash, v, r, s) == signer;\\n    }\\n\\n    // https://solidity-by-example.org/signature\\n    function _splitSignature(bytes memory sig) private pure returns (bytes32 r, bytes32 s, uint8 v) {\\n        if (sig.length != 65) {\\n            revert InvalidSignatureLength();\\n        }\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            /*\\n            First 32 bytes stores the length of the signature\\n\\n            add(sig, 32) = pointer of sig + 32\\n            effectively, skips first 32 bytes of signature\\n\\n            mload(p) loads next 32 bytes starting at the memory address p into memory\\n            */\\n\\n            // first 32 bytes, after the length prefix\\n            r := mload(add(sig, 32))\\n            // second 32 bytes\\n            s := mload(add(sig, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        // implicitly return (r, s, v)\\n    }\\n\\n    function setSignatureVerificationSigner(address signer) external onlyOwner {\\n        _signatureVerificationSigner = signer;\\n        emit SignatureVerificationSignerUpdate(signer, _msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreSignatureVerification/v1/ICoreSignatureVerificationV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\ninterface ICoreSignatureVerificationV1 {\\n    event SignatureVerificationSignerUpdate(address signer, address updatedBy);\\n\\n    function setSignatureVerificationSigner(address signer) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreStopGuardian/v1/CoreStopGuardian.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { ICoreStopGuardianV1 } from \\\"./ICoreStopGuardianV1.sol\\\";\\n\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport { StopGuardianEnabled } from \\\"../../libraries/DefinitiveErrors.sol\\\";\\n\\nabstract contract CoreStopGuardian is ICoreStopGuardianV1, Context {\\n    bool public STOP_GUARDIAN_ENABLED;\\n\\n    // recommended for every public/external function\\n    modifier stopGuarded() {\\n        if (STOP_GUARDIAN_ENABLED) {\\n            revert StopGuardianEnabled();\\n        }\\n\\n        _;\\n    }\\n\\n    function enableStopGuardian() public virtual;\\n\\n    function disableStopGuardian() public virtual;\\n\\n    function _enableStopGuardian() internal {\\n        STOP_GUARDIAN_ENABLED = true;\\n        emit StopGuardianUpdate(_msgSender(), true);\\n    }\\n\\n    function _disableStopGuardian() internal {\\n        STOP_GUARDIAN_ENABLED = false;\\n        emit StopGuardianUpdate(_msgSender(), false);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreStopGuardian/v1/ICoreStopGuardianV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\ninterface ICoreStopGuardianV1 {\\n    event StopGuardianUpdate(address indexed actor, bool indexed isEnabled);\\n\\n    function STOP_GUARDIAN_ENABLED() external view returns (bool);\\n\\n    function enableStopGuardian() external;\\n\\n    function disableStopGuardian() external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreSwap/v1/CoreSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { ICoreSwapV1 } from \\\"./ICoreSwapV1.sol\\\";\\nimport { DefinitiveAssets, IERC20 } from \\\"../../libraries/DefinitiveAssets.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport { CallUtils } from \\\"../../../tools/BubbleReverts/BubbleReverts.sol\\\";\\nimport { DefinitiveConstants } from \\\"../../libraries/DefinitiveConstants.sol\\\";\\nimport {\\n    InvalidSwapOutputToken,\\n    InvalidSwapHandler,\\n    InsufficientSwapTokenBalance,\\n    SwapTokenIsOutputToken,\\n    InvalidOutputToken,\\n    InvalidReportedOutputAmount,\\n    InvalidExecutedOutputAmount,\\n    SwapLimitExceeded\\n} from \\\"../../libraries/DefinitiveErrors.sol\\\";\\n\\nstruct CoreSwapConfig {\\n    address[] swapTokens;\\n    address[] swapOutputTokens;\\n    address[] swapHandlers;\\n}\\n\\nstruct SwapPayload {\\n    address handler;\\n    uint256 amount; // set 0 for maximum available balance\\n    address swapToken;\\n    uint256 amountOutMin;\\n    bool isDelegate;\\n    bytes handlerCalldata;\\n    bytes signature;\\n}\\n\\nabstract contract CoreSwap is ICoreSwapV1, Context {\\n    using DefinitiveAssets for IERC20;\\n\\n    uint256 internal swapsThisBlock;\\n    uint256 internal latestBlockNumber;\\n    uint256 public immutable MAX_SWAPS_PER_BLOCK;\\n\\n    /**\\n     * @notice Maintains mapping for reward tokens\\n     * @notice Tokens _not_ in this list will be treated as principal assets\\n     * @dev erc20 token => valid\\n     */\\n    mapping(address => bool) public _swapTokens;\\n\\n    /// @dev erc20 token => valid\\n    mapping(address => bool) public _swapOutputTokens;\\n\\n    /// @dev handler contract => enabled\\n    mapping(address => bool) public _swapHandlers;\\n\\n    modifier enforceSwapLimit(SwapPayload[] memory payloads) {\\n        if (block.number != latestBlockNumber) {\\n            latestBlockNumber = block.number;\\n            delete swapsThisBlock;\\n        }\\n        swapsThisBlock += payloads.length;\\n        if (swapsThisBlock > MAX_SWAPS_PER_BLOCK) {\\n            revert SwapLimitExceeded();\\n        }\\n        _;\\n    }\\n\\n    constructor(CoreSwapConfig memory coreSwapConfig) {\\n        uint256 coreswapConfigSwapTokensLength = coreSwapConfig.swapTokens.length;\\n        MAX_SWAPS_PER_BLOCK = DefinitiveConstants.MAX_SWAPS_PER_BLOCK;\\n        for (uint256 i; i < coreswapConfigSwapTokensLength; ) {\\n            _swapTokens[coreSwapConfig.swapTokens[i]] = true;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        uint256 coreSwapConfigSwapOutputTokensLength = coreSwapConfig.swapOutputTokens.length;\\n        for (uint256 i; i < coreSwapConfigSwapOutputTokensLength; ) {\\n            _swapOutputTokens[coreSwapConfig.swapOutputTokens[i]] = true;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        uint256 coreSwapConfigSwapHandlersLength = coreSwapConfig.swapHandlers.length;\\n        for (uint256 i; i < coreSwapConfigSwapHandlersLength; ) {\\n            _swapHandlers[coreSwapConfig.swapHandlers[i]] = true;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function enableSwapTokens(address[] memory swapTokens) public virtual;\\n\\n    function disableSwapTokens(address[] memory swapTokens) public virtual;\\n\\n    function _updateSwapTokens(address[] memory swapTokens, bool enabled) internal {\\n        uint256 swapTokensLength = swapTokens.length;\\n        for (uint256 i; i < swapTokensLength; ) {\\n            _swapTokens[swapTokens[i]] = enabled;\\n            emit SwapTokenUpdate(_msgSender(), swapTokens[i], enabled);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function enableSwapOutputTokens(address[] memory swapOutputTokens) public virtual;\\n\\n    function disableSwapOutputTokens(address[] memory swapOutputTokens) public virtual;\\n\\n    function _updateSwapOutputTokens(address[] memory swapOutputTokens, bool enabled) internal {\\n        uint256 swapOutputTokensLength = swapOutputTokens.length;\\n        for (uint256 i; i < swapOutputTokensLength; ) {\\n            _swapOutputTokens[swapOutputTokens[i]] = enabled;\\n            emit SwapOutputTokenUpdate(_msgSender(), swapOutputTokens[i], enabled);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function enableSwapHandlers(address[] memory swapHandlers) public virtual;\\n\\n    function disableSwapHandlers(address[] memory swapHandlers) public virtual;\\n\\n    function _updateSwapHandlers(address[] memory swapHandlers, bool enabled) internal {\\n        uint256 swapHandlersLength = swapHandlers.length;\\n        for (uint256 i; i < swapHandlersLength; ) {\\n            _swapHandlers[swapHandlers[i]] = enabled;\\n            emit SwapHandlerUpdate(_msgSender(), swapHandlers[i], enabled);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function swap(\\n        SwapPayload[] memory payloads,\\n        address outputToken,\\n        uint256 amountOutMin,\\n        uint256 feePct\\n    ) external virtual returns (uint256 outputAmount);\\n\\n    function _swap(\\n        SwapPayload[] memory payloads,\\n        address expectedOutputToken\\n    ) internal enforceSwapLimit(payloads) returns (uint256[] memory inputTokenAmounts, uint256 outputTokenAmount) {\\n        if (!_swapOutputTokens[expectedOutputToken]) {\\n            revert InvalidSwapOutputToken();\\n        }\\n        uint256 payloadsLength = payloads.length;\\n        inputTokenAmounts = new uint256[](payloadsLength);\\n        uint256 outputTokenBalanceStart = DefinitiveAssets.getBalance(expectedOutputToken);\\n\\n        for (uint256 i; i < payloadsLength; ) {\\n            SwapPayload memory payload = payloads[i];\\n\\n            if (!_swapHandlers[payload.handler]) {\\n                revert InvalidSwapHandler();\\n            }\\n\\n            if (expectedOutputToken == payload.swapToken) {\\n                revert SwapTokenIsOutputToken();\\n            }\\n\\n            uint256 outputTokenBalanceBefore = DefinitiveAssets.getBalance(expectedOutputToken);\\n            inputTokenAmounts[i] = DefinitiveAssets.getBalance(payload.swapToken);\\n\\n            (uint256 _outputAmount, address _outputToken) = _processSwap(payload, expectedOutputToken);\\n\\n            if (_outputToken != expectedOutputToken) {\\n                revert InvalidOutputToken();\\n            }\\n            if (_outputAmount < payload.amountOutMin) {\\n                revert InvalidReportedOutputAmount();\\n            }\\n            uint256 outputTokenBalanceAfter = DefinitiveAssets.getBalance(expectedOutputToken);\\n\\n            if ((outputTokenBalanceAfter - outputTokenBalanceBefore) < payload.amountOutMin) {\\n                revert InvalidExecutedOutputAmount();\\n            }\\n\\n            // Update `inputTokenAmounts` to reflect the amount of tokens actually swapped\\n            inputTokenAmounts[i] -= DefinitiveAssets.getBalance(payload.swapToken);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        outputTokenAmount = DefinitiveAssets.getBalance(expectedOutputToken) - outputTokenBalanceStart;\\n    }\\n\\n    function _processSwap(SwapPayload memory payload, address expectedOutputToken) private returns (uint256, address) {\\n        // Override payload.amount with validated amount\\n        payload.amount = _getValidatedPayloadAmount(payload);\\n\\n        /// @dev if asset is in _swapTokens, then it is a reward token\\n        bool isPrincipalAssetSwap = !_swapTokens[payload.swapToken];\\n\\n        bytes memory _calldata = _getEncodedSwapHandlerCalldata(\\n            payload,\\n            expectedOutputToken,\\n            isPrincipalAssetSwap,\\n            payload.isDelegate\\n        );\\n\\n        bool _success;\\n        bytes memory _returnBytes;\\n        if (payload.isDelegate) {\\n            // slither-disable-next-line controlled-delegatecall\\n            (_success, _returnBytes) = payload.handler.delegatecall(_calldata);\\n        } else {\\n            _prepareAssetsForNonDelegateHandlerCall(payload, payload.amount);\\n            (_success, _returnBytes) = payload.handler.call(_calldata);\\n        }\\n\\n        if (!_success) {\\n            CallUtils.revertFromReturnedData(_returnBytes);\\n        }\\n\\n        return abi.decode(_returnBytes, (uint256, address));\\n    }\\n\\n    function _getEncodedSwapHandlerCalldata(\\n        SwapPayload memory payload,\\n        address expectedOutputToken,\\n        bool isPrincipalAssetSwap,\\n        bool isDelegateCall\\n    ) internal pure virtual returns (bytes memory);\\n\\n    function _getValidatedPayloadAmount(SwapPayload memory payload) private view returns (uint256 amount) {\\n        uint256 balance = DefinitiveAssets.getBalance(payload.swapToken);\\n\\n        // Ensure balance > 0\\n        DefinitiveAssets.validateAmount(balance);\\n\\n        amount = payload.amount;\\n\\n        if (amount != 0 && balance < amount) {\\n            revert InsufficientSwapTokenBalance();\\n        }\\n\\n        // maximum available balance if amount == 0\\n        if (amount == 0) {\\n            return balance;\\n        }\\n    }\\n\\n    function _prepareAssetsForNonDelegateHandlerCall(SwapPayload memory payload, uint256 amount) private {\\n        if (payload.swapToken == DefinitiveConstants.NATIVE_ASSET_ADDRESS) {\\n            // Send ETH to handler\\n            DefinitiveAssets.safeTransferETH(payable(payload.handler), amount);\\n        } else {\\n            IERC20(payload.swapToken).resetAndSafeIncreaseAllowance(address(this), payload.handler, amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreSwap/v1/ICoreSwapV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { SwapPayload } from \\\"./CoreSwap.sol\\\";\\n\\ninterface ICoreSwapV1 {\\n    event SwapHandlerUpdate(address actor, address swapHandler, bool isEnabled);\\n    event SwapTokenUpdate(address actor, address swapToken, bool isEnabled);\\n    event SwapOutputTokenUpdate(address actor, address swapOutputToken, bool isEnabled);\\n    event SwapHandled(\\n        address[] swapTokens,\\n        uint256[] swapAmounts,\\n        address outputToken,\\n        uint256 outputAmount,\\n        uint256 feeAmount\\n    );\\n\\n    function enableSwapTokens(address[] memory swapTokens) external;\\n\\n    function disableSwapTokens(address[] memory swapTokens) external;\\n\\n    function enableSwapOutputTokens(address[] memory swapOutputTokens) external;\\n\\n    function disableSwapOutputTokens(address[] memory swapOutputTokens) external;\\n\\n    function enableSwapHandlers(address[] memory swapHandlers) external;\\n\\n    function disableSwapHandlers(address[] memory swapHandlers) external;\\n\\n    function swap(\\n        SwapPayload[] memory payloads,\\n        address outputToken,\\n        uint256 amountOutMin,\\n        uint256 feePct\\n    ) external returns (uint256 outputAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreSwapHandler/ICoreSwapHandlerV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\ninterface ICoreSwapHandlerV1 {\\n    event Swap(\\n        address indexed actor,\\n        address indexed inputToken,\\n        uint256 inputAmount,\\n        address indexed outputToken,\\n        uint256 outputAmount\\n    );\\n\\n    struct SwapParams {\\n        address inputAssetAddress;\\n        uint256 inputAmount;\\n        address outputAssetAddress;\\n        uint256 minOutputAmount;\\n        bytes data;\\n        bytes signature;\\n    }\\n\\n    function swapCall(SwapParams calldata params) external payable returns (uint256 amountOut, address outputAsset);\\n\\n    function swapDelegate(SwapParams calldata params) external payable returns (uint256 amountOut, address outputAsset);\\n\\n    function swapUsingValidatedPathCall(\\n        SwapParams calldata params\\n    ) external payable returns (uint256 amountOut, address outputAsset);\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreTransfersNative/v1/CoreTransfersNativeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { ContextUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport { ICoreTransfersNativeV1 } from \\\"./ICoreTransfersNativeV1.sol\\\";\\n\\nimport { DefinitiveAssets, IERC20 } from \\\"../../libraries/DefinitiveAssets.sol\\\";\\nimport { DefinitiveConstants } from \\\"../../libraries/DefinitiveConstants.sol\\\";\\nimport { InvalidInputs, InvalidMsgValue } from \\\"../../libraries/DefinitiveErrors.sol\\\";\\n\\n/// @notice Copied from CoreTransfersNative/v1/CoreTransfersNative.sol\\nabstract contract CoreTransfersNativeUpgradeable is ICoreTransfersNativeV1, ContextUpgradeable {\\n    using DefinitiveAssets for IERC20;\\n\\n    /**\\n     * @notice Allows contract to receive native assets\\n     */\\n    receive() external payable virtual {}\\n\\n    /**\\n     * @notice This function is executed if none of the other functions\\n     * match the call data.  `bytes calldata` will contain the full data sent\\n     * to the contract (equal to msg.data) and can return data in output.\\n     * The returned data will not be ABI-encoded, and will be returned without\\n     * modifications (not even padding).\\n     * https://docs.soliditylang.org/en/v0.8.17/contracts.html#fallback-function\\n     */\\n    fallback(bytes calldata) external payable virtual returns (bytes memory) {}\\n\\n    function __CoreTransfersNative_init() internal onlyInitializing {\\n        __Context_init();\\n        __CoreTransfersNative_init_unchained();\\n    }\\n\\n    function __CoreTransfersNative_init_unchained() internal onlyInitializing {}\\n\\n    function _depositNativeAndERC20(DefinitiveConstants.Assets memory depositAssets) internal virtual {\\n        uint256 assetAddressesLength = depositAssets.addresses.length;\\n        if (depositAssets.amounts.length != assetAddressesLength) {\\n            revert InvalidInputs();\\n        }\\n\\n        uint256 nativeAssetIndex = type(uint256).max;\\n\\n        for (uint256 i; i < assetAddressesLength; ) {\\n            if (depositAssets.addresses[i] == DefinitiveConstants.NATIVE_ASSET_ADDRESS) {\\n                nativeAssetIndex = i;\\n                unchecked {\\n                    ++i;\\n                }\\n                continue;\\n            }\\n            // ERC20 tokens\\n            IERC20(depositAssets.addresses[i]).safeTransferFrom(_msgSender(), address(this), depositAssets.amounts[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        // Revert if NATIVE_ASSET_ADDRESS is not in assetAddresses and msg.value is not zero\\n        if (nativeAssetIndex == type(uint256).max && msg.value != 0) {\\n            revert InvalidMsgValue();\\n        }\\n\\n        // Revert if depositing native asset and amount != msg.value\\n        if (nativeAssetIndex != type(uint256).max && msg.value != depositAssets.amounts[nativeAssetIndex]) {\\n            revert InvalidMsgValue();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreTransfersNative/v1/ICoreTransfersNativeV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\ninterface ICoreTransfersNativeV1 {\\n    receive() external payable;\\n\\n    fallback(bytes calldata) external payable returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreWithdraw/v1/CoreWithdraw.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { ICoreWithdrawV1 } from \\\"./ICoreWithdrawV1.sol\\\";\\nimport { DefinitiveAssets, IERC20 } from \\\"../../libraries/DefinitiveAssets.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport { DefinitiveConstants } from \\\"../../libraries/DefinitiveConstants.sol\\\";\\n\\nabstract contract CoreWithdraw is ICoreWithdrawV1, Context {\\n    using DefinitiveAssets for IERC20;\\n\\n    function supportsNativeAssets() public pure virtual returns (bool);\\n\\n    function withdraw(uint256 amount, address erc20Token) public virtual returns (bool);\\n\\n    function withdrawTo(uint256 amount, address erc20Token, address to) public virtual returns (bool);\\n\\n    function _withdraw(uint256 amount, address erc20Token) internal returns (bool) {\\n        return _withdrawTo(amount, erc20Token, _msgSender());\\n    }\\n\\n    function _withdrawTo(uint256 amount, address erc20Token, address to) internal returns (bool success) {\\n        if (erc20Token == DefinitiveConstants.NATIVE_ASSET_ADDRESS) {\\n            DefinitiveAssets.safeTransferETH(payable(to), amount);\\n        } else {\\n            IERC20(erc20Token).safeTransfer(to, amount);\\n        }\\n\\n        emit Withdrawal(erc20Token, amount, to);\\n\\n        success = true;\\n    }\\n\\n    function withdrawAll(address[] calldata tokens) public virtual returns (bool);\\n\\n    function withdrawAllTo(address[] calldata tokens, address to) public virtual returns (bool);\\n\\n    function _withdrawAll(address[] calldata tokens) internal returns (bool) {\\n        return _withdrawAllTo(tokens, _msgSender());\\n    }\\n\\n    function _withdrawAllTo(address[] calldata tokens, address to) internal returns (bool success) {\\n        uint256 tokenLength = tokens.length;\\n        for (uint256 i; i < tokenLength; ) {\\n            uint256 tokenBalance = DefinitiveAssets.getBalance(tokens[i]);\\n            if (tokenBalance > 0) {\\n                _withdrawTo(tokenBalance, tokens[i], to);\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreWithdraw/v1/ICoreWithdrawV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\ninterface ICoreWithdrawV1 {\\n    event Withdrawal(address indexed erc20Token, uint256 amount, address indexed recipient);\\n\\n    function withdrawAll(address[] calldata tokens) external returns (bool);\\n\\n    function withdrawAllTo(address[] calldata tokens, address to) external returns (bool);\\n\\n    function supportsNativeAssets() external pure returns (bool);\\n\\n    function withdraw(uint256 amount, address erc20Token) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/DefinitiveAssets.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { IERC20, SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport { DefinitiveConstants } from \\\"./DefinitiveConstants.sol\\\";\\n\\nimport { InsufficientBalance, InvalidAmount, InvalidAmounts, InvalidERC20Address } from \\\"./DefinitiveErrors.sol\\\";\\n\\n/**\\n * @notice Contains methods used throughout the Definitive contracts\\n * @dev This file should only be used as an internal library.\\n */\\nlibrary DefinitiveAssets {\\n    /**\\n     * @dev Checks if an address is a valid ERC20 token\\n     */\\n    modifier onlyValidERC20(address erc20Token) {\\n        if (address(erc20Token) == DefinitiveConstants.NATIVE_ASSET_ADDRESS) {\\n            revert InvalidERC20Address();\\n        }\\n        _;\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////////////////////////////////////////\\n    // \u2193 ERC20 and Native Asset Methods \u2193\\n    //////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Gets the balance of an ERC20 token or native asset\\n     */\\n    function getBalance(address assetAddress) internal view returns (uint256) {\\n        if (assetAddress == DefinitiveConstants.NATIVE_ASSET_ADDRESS) {\\n            return address(this).balance;\\n        } else {\\n            return IERC20(assetAddress).balanceOf(address(this));\\n        }\\n    }\\n\\n    /**\\n     * @dev internal function to validate balance is higher than a given amount for ERC20 and native assets\\n     */\\n    function validateBalance(address token, uint256 amount) internal view {\\n        if (token == DefinitiveConstants.NATIVE_ASSET_ADDRESS) {\\n            validateNativeBalance(amount);\\n        } else {\\n            validateERC20Balance(token, amount);\\n        }\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////////////////////////////////////////\\n    // \u2193 Native Asset Methods \u2193\\n    //////////////////////////////////////////////////\\n\\n    /**\\n     * @dev validates amount and balance, then uses SafeTransferLib to transfer native asset\\n     */\\n    function safeTransferETH(address recipient, uint256 amount) internal {\\n        if (amount > 0) {\\n            SafeTransferLib.safeTransferETH(payable(recipient), amount);\\n        }\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////////////////////////////////////////\\n    // \u2193 ERC20 Methods \u2193\\n    //////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Resets and increases the allowance of a spender for an ERC20 token\\n     */\\n    function resetAndSafeIncreaseAllowance(\\n        IERC20 token,\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal onlyValidERC20(address(token)) {\\n        if (token.allowance(owner, spender) > 0) {\\n            SafeERC20.safeApprove(token, spender, 0);\\n        }\\n\\n        return SafeERC20.safeIncreaseAllowance(token, spender, amount);\\n    }\\n\\n    function safeTransfer(IERC20 token, address to, uint256 amount) internal onlyValidERC20(address(token)) {\\n        if (amount > 0) {\\n            SafeERC20.safeTransfer(token, to, amount);\\n        }\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal onlyValidERC20(address(token)) {\\n        if (amount > 0) {\\n            //slither-disable-next-line arbitrary-send-erc20\\n            SafeERC20.safeTransferFrom(token, from, to, amount);\\n        }\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////////////////////////////////////////\\n    // \u2193 Asset Amount Helper Methods \u2193\\n    //////////////////////////////////////////////////\\n\\n    /**\\n     * @dev internal function to validate that amounts contains a value greater than zero\\n     */\\n    function validateAmounts(uint256[] calldata amounts) internal pure {\\n        bool hasValidAmounts;\\n        uint256 amountsLength = amounts.length;\\n        for (uint256 i; i < amountsLength; ) {\\n            if (amounts[i] > 0) {\\n                hasValidAmounts = true;\\n                break;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (!hasValidAmounts) {\\n            revert InvalidAmounts();\\n        }\\n    }\\n\\n    /**\\n     * @dev internal function to validate if native asset balance is higher than the amount requested\\n     */\\n    function validateNativeBalance(uint256 amount) internal view {\\n        if (getBalance(DefinitiveConstants.NATIVE_ASSET_ADDRESS) < amount) {\\n            revert InsufficientBalance();\\n        }\\n    }\\n\\n    /**\\n     * @dev internal function to validate balance is higher than the amount requested for a token\\n     */\\n    function validateERC20Balance(address token, uint256 amount) internal view onlyValidERC20(token) {\\n        if (getBalance(token) < amount) {\\n            revert InsufficientBalance();\\n        }\\n    }\\n\\n    function validateAmount(uint256 _amount) internal pure {\\n        if (_amount == 0) {\\n            revert InvalidAmount();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/DefinitiveConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\n/**\\n * @notice Contains constants used throughout the Definitive contracts\\n * @dev This file should only be used as an internal library.\\n */\\nlibrary DefinitiveConstants {\\n    /**\\n     * @notice Maximum fee percentage\\n     */\\n    uint256 internal constant MAX_FEE_PCT = 10000;\\n\\n    /**\\n     * @notice Address to signify native assets\\n     */\\n    address internal constant NATIVE_ASSET_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /**\\n     * @notice Maximum number of swaps allowed per block\\n     */\\n    uint8 internal constant MAX_SWAPS_PER_BLOCK = 25;\\n\\n    struct Assets {\\n        uint256[] amounts;\\n        address[] addresses;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/DefinitiveErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\n/**\\n * @notice Contains all errors used throughout the Definitive contracts\\n * @dev This file should only be used as an internal library.\\n * @dev When adding a new error, add alphabetically\\n */\\n\\nerror AccountMissingRole(address _account, bytes32 _role);\\nerror AccountNotAdmin(address);\\nerror AccountNotWhitelisted(address);\\nerror AddLiquidityFailed();\\nerror DeadlineExceeded();\\nerror BorrowFailed(uint256 errorCode);\\nerror DecollateralizeFailed(uint256 errorCode);\\nerror DepositMoreThanMax();\\nerror EnterAllFailed();\\nerror EnforcedSafeLTV(uint256 invalidLTV);\\nerror ExceededMaxDelta();\\nerror ExceededMaxLTV();\\nerror ExceededShareToAssetRatioDeltaThreshold();\\nerror ExitAllFailed();\\nerror ExitOneCoinFailed();\\nerror InitializeMarketsFailed();\\nerror InputGreaterThanStaked();\\nerror InsufficientBalance();\\nerror InsufficientSwapTokenBalance();\\nerror InvalidAddress();\\nerror InvalidAmount();\\nerror InvalidAmounts();\\nerror InvalidCalldata();\\nerror InvalidDestinationSwapper();\\nerror InvalidERC20Address();\\nerror InvalidExecutedOutputAmount();\\nerror InvalidFeePercent();\\nerror InvalidHandler();\\nerror InvalidInputs();\\nerror InvalidMsgValue();\\nerror InvalidSingleHopSwap();\\nerror InvalidMultiHopSwap();\\nerror InvalidOutputToken();\\nerror InvalidRedemptionRecipient(); // Used in cross-chain redeptions\\nerror InvalidReportedOutputAmount();\\nerror InvalidRewardsClaim();\\nerror InvalidSignature();\\nerror InvalidSignatureLength();\\nerror InvalidSwapHandler();\\nerror InvalidSwapInputAmount();\\nerror InvalidSwapOutputToken();\\nerror InvalidSwapPath();\\nerror InvalidSwapPayload();\\nerror InvalidSwapToken();\\nerror MintMoreThanMax();\\nerror NativeAssetWrapFailed(bool wrappingToNative);\\nerror NoSignatureVerificationSignerSet();\\nerror RedeemMoreThanMax();\\nerror RemoveLiquidityFailed();\\nerror RepayDebtFailed();\\nerror SafeHarborModeEnabled();\\nerror SafeHarborRedemptionDisabled();\\nerror SlippageExceeded(uint256 _outputAmount, uint256 _outputAmountMin);\\nerror StakeFailed();\\nerror SupplyFailed();\\nerror StopGuardianEnabled();\\nerror SwapDeadlineExceeded();\\nerror SwapLimitExceeded();\\nerror SwapTokenIsOutputToken();\\nerror TransfersLimitExceeded();\\nerror UnstakeFailed();\\nerror UnauthenticatedFlashloan();\\nerror UntrustedFlashLoanSender(address);\\nerror WithdrawMoreThanMax();\\nerror ZeroShares();\\n\"\r\n    },\r\n    \"contracts/modules/LLSDStrategy/v1/ILLSDStrategyV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { ICoreMulticallV1 } from \\\"../../../core/CoreMulticall/v1/ICoreMulticallV1.sol\\\";\\nimport { SwapPayload } from \\\"../../../base/BaseSwap.sol\\\";\\nimport { IBasePermissionedExecution } from \\\"../../../base/BasePermissionedExecution/IBasePermissionedExecution.sol\\\";\\n\\ninterface ILLSDStrategyV1 is ICoreMulticallV1, IBasePermissionedExecution {\\n    event Enter(\\n        uint256 collateral,\\n        uint256 collateralDelta,\\n        uint256 debt,\\n        uint256 debtDelta,\\n        address[] dryAssets,\\n        int256[] dryBalanceDeltas,\\n        uint256 ltv\\n    );\\n\\n    event Exit(\\n        uint256 collateral,\\n        uint256 collateralDelta,\\n        uint256 debt,\\n        uint256 debtDelta,\\n        address[] dryAssets,\\n        int256[] dryBalanceDeltas,\\n        uint256 ltv\\n    );\\n\\n    event SweepDust(uint256 collateral, uint256 collateralDelta, uint256 debt, uint256 debtDelta, uint256 ltv);\\n\\n    struct EnterContext {\\n        uint256 flashloanAmount;\\n        SwapPayload swapPayload;\\n        uint256 maxLTV;\\n    }\\n\\n    struct ExitContext {\\n        uint256 flashloanAmount;\\n        uint256 repayAmount;\\n        uint256 decollateralizeAmount;\\n        SwapPayload swapPayload;\\n        uint256 maxLTV;\\n    }\\n\\n    enum FlashLoanContextType {\\n        ENTER,\\n        EXIT\\n    }\\n\\n    function STAKED_TOKEN() external view returns (address);\\n\\n    function STAKING_TOKEN() external view returns (address);\\n\\n    /**\\n     * @notice  Enter or increase leverage using a flashloan.\\n     *     Steps:\\n     *     1.   Flashloan `flashloanAmount` of the staking asset (eg: WETH)\\n     *     2a.  On chains that support staking, stake the entire dry balance of the staking token (eg: WETH)\\n     *     2b.  All other chains, the `swapPayload` will swap `flashloanAmount` to the staked asset\\n     *     3.   Collateralize strategy balance of `dry` staked token (eg: wstETH)\\n     *     4.   Borrow `flashloanAmount`\\n     *     5.   Repay flashloan\\n     *     6.   Verify LTV is below inputted threshold\\n     * @dev Swapping is only initiated if `SwapPayload.amount` > 0.\\n     * @dev 2b: `SwapPayload.amount` determines the amount of staking asset to swap\\n     * @param flashloanAmount   Amount to flashloan\\n     * @param swapPayload       Swaps to staked asset when native staking is not possible.\\n     *                          Not used on chains that support native staking.\\n     * @param maxLTV            Verify LTV at the end of the operation\\n     */\\n    function enter(uint256 flashloanAmount, SwapPayload calldata swapPayload, uint256 maxLTV) external;\\n\\n    /**\\n     * @notice  Enter or increase leverage using multicall looping.\\n     *     Steps:\\n     *     1.   Collateralize strategy balance of `dry` staked asset (eg: wstETH)\\n     *     2.   Borrow staking asset\\n     *     3a.  On chains that support staking, stake the entire dry balance of the staking token (eg: WETH)\\n     *     3b.  All other chains, the `swapPayload` will swap `flashloanAmount` to the staked asset\\n     *     4.   Verify LTV is below inputted threshold\\n     * @dev Swapping is only initiated if `SwapPayload.amount` > 0.\\n     *      This can occur to allow users to withdraw the staked asset.\\n     * @param borrowAmount      Amount to borrow\\n     * @param swapPayload       Swaps in to staked asset when native staking is not possible.\\n     * *                        Not used on chains that support native staking.\\n     * @param maxLTV            Verify LTV at the end of the operation\\n     */\\n    function enterMulticall(uint256 borrowAmount, SwapPayload calldata swapPayload, uint256 maxLTV) external;\\n\\n    /**\\n     * @notice Exit or decrease leverage using a flashloan.\\n     *     Steps:\\n     *     1.   Flashloan `flashloanAmount` of the staking asset (eg: WETH)\\n     *     2.   Repay `repayAmount`\\n     *     3.   Decollateralize `flashloanAmount`\\n     *     4a.  On chains that support unstaking, unstake `flashloanAmount`\\n     *     4b.  All other chains, `swapPayload` will swap `decollateralizeAmount` out of the staked asset\\n     *     5.   Repay `flashloanAmount`\\n     *     6.   Verify LTV is below inputted threshold\\n     * @dev `flashloanAmount` less `repayAmount` is the amount of the staking asset to leave dry.\\n     * @dev Swapping is only initiated if `SwapPayload.amount` > 0.\\n     *      This can occur to allow users to withdraw the staked asset.\\n     * @param flashloanAmount   Amount to flashloan\\n     * @param repayAmount       Amount of `flashloanAmount` to repay\\n     * @param decollateralizeAmount       Amount of staked asset to remove as collateral\\n     * @param swapPayload       Swaps to staking asset when native unstaking is not possible\\n     *                          On chains that support unstaking, `SwapPayload.amount` is used to unstake\\n     * @param maxLTV            Verify LTV at the end of the operation\\n     */\\n    function exit(\\n        uint256 flashloanAmount,\\n        uint256 repayAmount,\\n        uint256 decollateralizeAmount,\\n        SwapPayload calldata swapPayload,\\n        uint256 maxLTV\\n    ) external;\\n\\n    /**\\n     * @notice Exit or decrease leverage using multicall looping.\\n     *     Steps:\\n     *     1.   Decollateralize `decollateralizeAmount`\\n     *     2a.  On chains that support unstaking, unstake `decollateralizeAmount`\\n     *     2b.  All other chains, `swapPayload` will swap `decollateralizeAmount` out of the staked asset\\n     *     3.   If `repayDebt` is `true`, repay using the min(output of swap from step 2, outstanding debt)\\n     *          Minimum amount is used to allow users to withdraw the staked asset.\\n     *          If `repayDebt` is `false`, no repayment will be made.\\n     *     4.   Verify LTV is below inputted threshold\\n     * @dev Swapping is only initiated if `SwapPayload.amount` > 0.\\n     *      This can occur to allow users to withdraw the staked asset.\\n     * @dev `repayDebt` can be set to `true` to allow users to withdraw the staking asset.\\n     * @param decollateralizeAmount Amount of staked asset to remove as collateral\\n     * @param swapPayload       Swaps to staking asset when native unstaking is not possible\\n     *                          On chains that support unstaking, `SwapPayload.amount` is used to unstake\\n     * @param repayDebt         Flag to repay decollateralized asset\\n     * @param maxLTV            Verify LTV at the end of the operation\\n     */\\n    function exitMulticall(\\n        uint256 decollateralizeAmount,\\n        SwapPayload calldata swapPayload,\\n        bool repayDebt,\\n        uint256 maxLTV\\n    ) external;\\n\\n    /**\\n     * @notice  Vault balances of supplyable assets are supplied;\\n     *          vault balances of repayable assets are repaid\\n     */\\n    function sweepDust() external;\\n\\n    // view functions\\n\\n    function getDebtAmount() external view returns (uint256);\\n\\n    function getCollateralAmount() external view returns (uint256);\\n\\n    /// @notice Returns the oracle price of the debt asset in terms of the collateral asset\\n    function getCollateralToDebtPrice() external view returns (uint256 price, uint256 precision);\\n\\n    function getLTV() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/modules/LLSDStrategy/v1/IMultiUserLLSDStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { DefinitiveConstants } from \\\"../../../core/libraries/DefinitiveConstants.sol\\\";\\nimport { ILLSDStrategyV1 } from \\\"../../LLSDStrategy/v1/ILLSDStrategyV1.sol\\\";\\n\\nimport { IBaseMultiUserStrategyV1 } from \\\"../../../base/BaseMultiUserStrategy/BaseMultiUserStrategyV1.sol\\\";\\n\\n/// @notice Uses selected methods from IERC4626\\ninterface IMultiUserLLSDStrategy is IBaseMultiUserStrategyV1 {\\n    struct RedeemEventData {\\n        address sender;\\n        address receiver;\\n        address owner;\\n        DefinitiveConstants.Assets tokensRemoved;\\n        uint256 assetsRemoved;\\n        uint256 shares;\\n    }\\n\\n    struct MintEventData {\\n        address sender;\\n        address owner;\\n        DefinitiveConstants.Assets tokensAdded;\\n        uint256 assetsAdded;\\n        uint256 shares;\\n    }\\n\\n    struct DepositParams {\\n        uint256 deadline;\\n        uint256 chainId;\\n        DefinitiveConstants.Assets depositTokens;\\n        ILLSDStrategyV1.EnterContext enterCtx;\\n    }\\n\\n    struct RedeemParams {\\n        uint256 deadline;\\n        uint256 chainId;\\n        uint256 sharesBurned;\\n        uint256 sharesFees;\\n        uint256 sharesFeesAdditional;\\n        ILLSDStrategyV1.ExitContext exitCtx;\\n    }\\n\\n    event Mint(MintEventData mintEvent);\\n\\n    event NativeAssetWrap(address actor, uint256 amount, bool indexed wrappingToNative);\\n\\n    event Redeem(RedeemEventData redeemEvent);\\n\\n    event UpdateSafeLTVThreshold(address sender, uint256 threshold);\\n\\n    event UpdateSharesToAssetsRatioThreshold(address sender, uint256 threshold);\\n\\n    function deposit(\\n        address receiver,\\n        DepositParams calldata depositParams,\\n        bytes memory depositParamsSignature\\n    ) external payable returns (uint256 shares, uint256 assetsAdded);\\n\\n    function redeem(\\n        address receiver,\\n        address owner,\\n        RedeemParams calldata redeemParams,\\n        bytes memory redeemParamsSignature\\n    ) external returns (DefinitiveConstants.Assets memory tokensRemoved);\\n\\n    function setSafeLTVThreshold(uint256) external;\\n\\n    function setSharesToAssetRatioThreshold(uint256) external;\\n\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n}\\n\"\r\n    },\r\n    \"contracts/modules/LLSDStrategy/v1/MultiUserLLSDStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { MathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport { DefinitiveConstants } from \\\"../../../core/libraries/DefinitiveConstants.sol\\\";\\nimport { DefinitiveAssets, IERC20 } from \\\"../../../core/libraries/DefinitiveAssets.sol\\\";\\nimport { ILLSDStrategyV1 } from \\\"../../LLSDStrategy/v1/ILLSDStrategyV1.sol\\\";\\nimport { IBaseTransfersV1 } from \\\"../../../base/BaseTransfers/v1/IBaseTransfersV1.sol\\\";\\nimport { IBaseSafeHarborMode } from \\\"../../../base/BaseSafeHarborMode/IBaseSafeHarborMode.sol\\\";\\nimport { CoreSignatureVerification } from \\\"../../../core/CoreSignatureVerification/v1/CoreSignatureVerification.sol\\\";\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { IMultiUserLLSDStrategy } from \\\"./IMultiUserLLSDStrategy.sol\\\";\\nimport {\\n    IERC20MetadataUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport { ERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport {\\n    DeadlineExceeded,\\n    EnforcedSafeLTV,\\n    InvalidInputs,\\n    TransfersLimitExceeded,\\n    ExceededShareToAssetRatioDeltaThreshold\\n} from \\\"../../../core/libraries/DefinitiveErrors.sol\\\";\\n\\nimport { BaseMultiUserStrategyV1 } from \\\"../../../base/BaseMultiUserStrategy/BaseMultiUserStrategyV1.sol\\\";\\n\\ninterface ILLSDStrategy is ILLSDStrategyV1, IBaseTransfersV1, IBaseSafeHarborMode {\\n    function DEFAULT_ADMIN_ROLE() external returns (bytes32);\\n}\\n\\n/// @notice Uses selected methods from ERC4626\\ncontract MultiUserLLSDStrategy is BaseMultiUserStrategyV1, IMultiUserLLSDStrategy, CoreSignatureVerification {\\n    using MathUpgradeable for uint256;\\n    using DefinitiveAssets for IERC20;\\n\\n    IERC20Upgradeable private ASSET;\\n    uint8 private ASSET_DECIMALS;\\n\\n    /// @notice Initializes the safe LTV range to \u00b1 5% in basis points (1e4 precision)\\n    /// @notice Enforces an increase/decrease in LTV per transaction\\n    /// @dev If LTV is 70%, a value of `500` will enforce \u00b15% of the existing LTV (73.5% <= New LTV >= 66.5%)\\n    /// @dev **NOT** \u00b1 500bps of the existing LTV: (75% <= New LTV >= 65%)\\n    uint256 internal SAFE_LTV_THRESHOLD;\\n\\n    /// @notice Value of threshold allowed when comparing the initial vs final ratio of `totalAssets`:`totalSupply`\\n    /// @notice when minting or burning shares.\\n    /// @dev Examples for an initial ratio of 1e18:\\n    /// @dev 1e4: (more strict) ratio after operation must equal 1e18 \u00b1 1e4\\n    /// @dev 1e8: (less strict) ratio after operation must equal 1e18 \u00b1 1e8\\n    uint256 internal SHARES_TO_ASSETS_RATIO_THRESHOLD;\\n\\n    // transfers throttling\\n    uint256 internal _transfersThisBlock;\\n    uint256 internal _latestTransfersBlockNumber;\\n    uint256 internal MAX_TRANSFERS_PER_BLOCK;\\n\\n    /// @notice Defines the ABI version of MultiUserLPStakingStrategy\\n    uint256 public constant ABI_VERSION = 1;\\n\\n    event MaxTransfersPerBlockUpdate(uint256 maxTransfers);\\n\\n    modifier enforceValidations(uint256 deadline) {\\n        // Enforce deadline validation prior to method execution\\n        _enforceDeadline(deadline);\\n\\n        (uint256 initialAssets, uint256 initialSupply, uint256 initialLTV) = (\\n            totalAssets(),\\n            totalSupply(),\\n            ILLSDStrategy(VAULT).getLTV()\\n        );\\n\\n        _;\\n\\n        _validateSafeLTVThreshold(initialAssets, initialSupply, initialLTV);\\n        _validateSharesToAssetRatio(initialAssets, initialSupply);\\n    }\\n\\n    /// @notice Constructor on the implementation contract should call _disableInitializers()\\n    /// @dev https://forum.openzeppelin.com/t/what-does-disableinitializers-function-mean/28730/2\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @dev ALWAYS INCLUDE VAULT: To maintain MU_* and Vault relationship during upgrades\\n    function initialize(\\n        address payable _vault,\\n        address __asset,\\n        string memory _name,\\n        string memory _symbol,\\n        address _wrappedNativeAssetAddress,\\n        address _strategyAdmin,\\n        address _sigVerificationSigner,\\n        address _feeAccount\\n    ) public initializer {\\n        if (ILLSDStrategy(_vault).STAKING_TOKEN() != __asset) {\\n            revert InvalidInputs();\\n        }\\n\\n        __BaseMultiUserStrategy_init(_vault, _name, _symbol, _feeAccount);\\n        __CoreSignatureVerification_init(_sigVerificationSigner);\\n        __CoreTransfersNative_init();\\n        __BaseNativeWrapper_init(_wrappedNativeAssetAddress);\\n\\n        IERC20Upgradeable mAsset = IERC20Upgradeable(__asset);\\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(mAsset);\\n        ASSET_DECIMALS = success ? assetDecimals : 18;\\n        ASSET = mAsset;\\n        SAFE_LTV_THRESHOLD = 500;\\n        SHARES_TO_ASSETS_RATIO_THRESHOLD = 1e12;\\n        MAX_TRANSFERS_PER_BLOCK = 1;\\n        _transferOwnership(_strategyAdmin);\\n    }\\n\\n    function _enforceTransferLimits() private {\\n        if (block.number != _latestTransfersBlockNumber) {\\n            _latestTransfersBlockNumber = block.number;\\n            delete _transfersThisBlock;\\n        }\\n        _transfersThisBlock += 1;\\n        if (_transfersThisBlock > MAX_TRANSFERS_PER_BLOCK) {\\n            revert TransfersLimitExceeded();\\n        }\\n    }\\n\\n    /// @dev Ratio Precision: 1e18\\n    /// @dev Calculation Precision: 1e36 (or 1e18 ** 2)\\n    function _getSharesToAssetsRatio(uint256 _totalSupply, uint256 _totalAssets) internal pure returns (uint256 ratio) {\\n        if (_totalSupply > 0) {\\n            ratio = _totalAssets.mulDiv(1e36, _totalSupply * 1e18);\\n        }\\n    }\\n\\n    function setSharesToAssetRatioThreshold(uint256 threshold) external onlyDefinitiveVaultAdmins {\\n        SHARES_TO_ASSETS_RATIO_THRESHOLD = threshold;\\n        emit UpdateSharesToAssetsRatioThreshold(_msgSender(), threshold);\\n    }\\n\\n    function setSafeLTVThreshold(uint256 threshold) external onlyDefinitiveVaultAdmins {\\n        if (threshold > 10_000 || threshold == 0) {\\n            revert InvalidInputs();\\n        }\\n\\n        SAFE_LTV_THRESHOLD = threshold;\\n        emit UpdateSafeLTVThreshold(_msgSender(), threshold);\\n    }\\n\\n    function setMaxTransfersPerBlock(uint256 maxTransfers) external onlyDefinitiveVaultAdmins {\\n        MAX_TRANSFERS_PER_BLOCK = maxTransfers;\\n        emit MaxTransfersPerBlockUpdate(maxTransfers);\\n    }\\n\\n    /**\\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\\n     * \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\\n     *\\n     * See {IERC20Metadata-decimals}.\\n     */\\n    function decimals() public view virtual override(IERC20MetadataUpgradeable, ERC20Upgradeable) returns (uint8) {\\n        return ASSET_DECIMALS + _decimalsOffset();\\n    }\\n\\n    /** @dev See {IERC4626-asset}. */\\n    function asset() public view virtual override returns (address) {\\n        return address(ASSET);\\n    }\\n\\n    /// @notice Shows total assets of the underlying vault in terms of the underlying vault's debt asset\\n    function totalAssets() public view override returns (uint256 totalAssetsAmount) {\\n        address mVAULT = (VAULT);\\n        address mSTAKED_TOKEN = ILLSDStrategy(VAULT).STAKED_TOKEN();\\n        address mSTAKING_TOKEN = ILLSDStrategy(VAULT).STAKING_TOKEN();\\n        uint256 collateralAmount = ILLSDStrategy(VAULT).getCollateralAmount();\\n        uint256 debtAmount = ILLSDStrategy(VAULT).getDebtAmount();\\n        uint256 dryCollateral = IERC20(mSTAKED_TOKEN).balanceOf(mVAULT);\\n        uint256 dryDebt = IERC20(mSTAKING_TOKEN).balanceOf(mVAULT);\\n        (uint256 collateralToDebtPriceRatio, uint256 collateralToDebtPriceRatioPrecision) = ILLSDStrategy(VAULT)\\n            .getCollateralToDebtPrice();\\n\\n        // Add dry collateral in terms of debt\\n        totalAssetsAmount += dryCollateral.mulDiv(collateralToDebtPriceRatioPrecision, collateralToDebtPriceRatio);\\n\\n        // Add dry debt\\n        totalAssetsAmount += dryDebt;\\n\\n        // If collateral is 0, debt must be 0\\n        if (collateralAmount > 0) {\\n            // Add supplied collateral in terms of debt\\n            totalAssetsAmount += collateralAmount.mulDiv(\\n                collateralToDebtPriceRatioPrecision,\\n                collateralToDebtPriceRatio\\n            );\\n\\n            // Subtract debt\\n            totalAssetsAmount -= debtAmount;\\n        }\\n    }\\n\\n    /// @notice External method to preview deposit of this contract's underlying deposit\\n    /// @dev Should not be used for internal calculations.  See `_getSharesFromDepositedAmount`\\n    function previewDeposit(uint256 assets) external view returns (uint256) {\\n        return assets.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), MathUpgradeable.Rounding.Down);\\n    }\\n\\n    function encodeDepositParams(DepositParams calldata depositParams) public pure returns (bytes32) {\\n        return keccak256(abi.encode(depositParams));\\n    }\\n\\n    function encodeRedeemParams(RedeemParams calldata redeemParams) public pure returns (bytes32) {\\n        return keccak256(abi.encode(redeemParams));\\n    }\\n\\n    function deposit(\\n        address receiver,\\n        DepositParams calldata depositParams,\\n        bytes calldata depositParamsSignature\\n    )\\n        external\\n        payable\\n        revertIfSafeHarborModeEnabled\\n        enforceValidations(depositParams.deadline)\\n        nonReentrant\\n        returns (uint256 shares, uint256 assetsAdded)\\n    {\\n        _enforceTransferLimits();\\n        _verifySignature(encodeDepositParams(depositParams), depositParamsSignature);\\n\\n        // If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transferred and before the shares are minted, which is a valid state.\\n\\n        // Handle deposited assets\\n        _depositNativeAndERC20(depositParams.depositTokens);\\n\\n        // Wrap native asset (if necessary)\\n        DefinitiveConstants.Assets memory depositTokens = _wrapDepositedNativeAsset(depositParams.depositTokens);\\n\\n        uint256 initialTotalAssets = totalAssets();\\n\\n        _approveAssetsForDeposit(depositTokens);\\n\\n        ILLSDStrategy(VAULT).deposit(depositTokens.amounts, depositTokens.addresses);\\n\\n        ILLSDStrategy(VAULT).enter(\\n            depositParams.enterCtx.flashloanAmount,\\n            depositParams.enterCtx.swapPayload,\\n            depositParams.enterCtx.maxLTV\\n        );\\n\\n        ILLSDStrategy(VAULT).sweepDust();\\n\\n        // `assetsAdded` is the amount of value provided to the underlying LLSDStrategy\\n        // The depositor pays for fees/slippage associated with entering the vault\\n        assetsAdded = totalAssets() - initialTotalAssets;\\n\\n        shares = _getSharesFromDepositedAmount(assetsAdded);\\n\\n        _mint(receiver, shares);\\n\\n        emit Mint(IMultiUserLLSDStrategy.MintEventData(_msgSender(), receiver, depositTokens, assetsAdded, shares));\\n    }\\n\\n    function _decimalsOffset() internal view virtual returns (uint8) {\\n        return 0;\\n    }\\n\\n    // Asset and AssetAmount are provided by the consumer\\n    // Contract calculates the shares based on the net effect to the underlying vault\\n    // The owner must have the allowance/shares to afford the decrease in value of the underlying vault\\n    function redeem(\\n        address receiver,\\n        address _owner,\\n        RedeemParams calldata redeemParams,\\n        bytes calldata redeemParamsSignature\\n    )\\n        external\\n        revertIfSafeHarborModeEnabled\\n        enforceValidations(redeemParams.deadline)\\n        nonReentrant\\n        returns (DefinitiveConstants.Assets memory tokensRemoved)\\n    {\\n        _enforceTransferLimits();\\n        _verifySignature(encodeRedeemParams(redeemParams), redeemParamsSignature);\\n\\n        tokensRemoved = _getVaultDryBalances();\\n\\n        uint256 assetsRemoved = totalAssets();\\n\\n        ILLSDStrategy(VAULT).exit(\\n            redeemParams.exitCtx.flashloanAmount,\\n            redeemParams.exitCtx.repayAmount,\\n            redeemParams.exitCtx.decollateralizeAmount,\\n            redeemParams.exitCtx.swapPayload,\\n            redeemParams.exitCtx.maxLTV\\n        );\\n\\n        {\\n            uint256 i = 0;\\n            while (i < tokensRemoved.addresses.length) {\\n                // Withdrawal amount is the increase in dry balance\\n                // If there's no increase, then the withdrawal amount is 0\\n                uint256 balanceAfter = IERC20(tokensRemoved.addresses[i]).balanceOf((VAULT));\\n                if (balanceAfter > tokensRemoved.amounts[i]) {\\n                    tokensRemoved.amounts[i] = balanceAfter - tokensRemoved.amounts[i];\\n                } else {\\n                    tokensRemoved.amounts[i] = 0;\\n                }\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n\\n        // Handle fees\\n        uint256 redeemSharesTotal = redeemParams.sharesBurned +\\n            redeemParams.sharesFees +\\n            redeemParams.sharesFeesAdditional;\\n        if (_msgSender() != _owner) {\\n            _spendAllowance(_owner, _msgSender(), redeemSharesTotal);\\n        }\\n        uint256 sharesFeesTotal = redeemSharesTotal - redeemParams.sharesBurned;\\n        if (sharesFeesTotal > 0) {\\n            // transfer fee shares\\n            _transferShares(_owner, getFeesAccount(), sharesFeesTotal);\\n            emit RedemptionFee(\\n                _msgSender(),\\n                address(this),\\n                redeemSharesTotal,\\n                redeemParams.sharesFees,\\n                redeemParams.sharesFeesAdditional\\n            );\\n        }\\n\\n        _burn(_owner, redeemParams.sharesBurned);\\n\\n        _withdrawAndTransfer(receiver, tokensRemoved);\\n\\n        // `assetsRemoved` is the amount of value withdrawn from the underlying LLSDStrategy\\n        // The depositor pays for fees/slippage associated with exiting the vault\\n        assetsRemoved = assetsRemoved - totalAssets();\\n\\n        emit Redeem(\\n            IMultiUserLLSDStrategy.RedeemEventData(\\n                _msgSender(),\\n                receiver,\\n                _owner,\\n                tokensRemoved,\\n                assetsRemoved,\\n                redeemSharesTotal\\n            )\\n        );\\n    }\\n\\n    function _getVaultDryBalances() private view returns (DefinitiveConstants.Assets memory tokensRemoved) {\\n        (tokensRemoved.amounts, tokensRemoved.addresses) = (new uint256[](2), new address[](2));\\n\\n        tokensRemoved.addresses[0] = ILLSDStrategy(VAULT).STAKED_TOKEN();\\n        tokensRemoved.addresses[1] = ILLSDStrategy(VAULT).STAKING_TOKEN();\\n\\n        uint256 i;\\n\\n        {\\n            // Initialize `tokensRemoved` array to the vault's dry balances\\n            i = 0;\\n            uint256 length = tokensRemoved.addresses.length;\\n            while (i < length) {\\n                tokensRemoved.amounts[i] = IERC20(tokensRemoved.addresses[i]).balanceOf((VAULT));\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getSharesFromDepositedAmount(uint256 assets) internal view returns (uint256) {\\n        uint256 _totalAssets = totalAssets();\\n        uint256 totalAssetsBeforeDeposit = _totalAssets > assets ? _totalAssets - assets : 0;\\n        return\\n            assets.mulDiv(\\n                totalSupply() + 10 ** _decimalsOffset(),\\n                totalAssetsBeforeDeposit + 1,\\n                MathUpgradeable.Rounding.Down\\n            );\\n    }\\n\\n    /**\\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\\n     */\\n    function _tryGetAssetDecimals(IERC20Upgradeable asset_) private view returns (bool, uint8) {\\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n        );\\n        if (success && encodedDecimals.length >= 32) {\\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\\n            if (returnedDecimals <= type(uint8).max) {\\n                return (true, uint8(returnedDecimals));\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function _validateSafeLTVThreshold(\\n        uint256 initialTotalAssets,\\n        uint256 initialTotalSupply,\\n        uint256 initialLTV\\n    ) private view {\\n        (uint256 mSAFE_LTV_THRESHOLD, uint256 totalAssetsAfter, uint256 totalSupplyAfter, uint256 ltvAfter) = (\\n            SAFE_LTV_THRESHOLD,\\n            totalAssets(),\\n            totalSupply(),\\n            ILLSDStrategy(VAULT).getLTV()\\n        );\\n\\n        {\\n            // Ignore if the vault is minting initial shares\\n            bool isMintingInitialShares = initialTotalAssets == 0 && initialTotalSupply == 0;\\n\\n            // Ignore if the vault is burning all outstanding shares\\n            bool isBurningAllOutstandingShares = totalAssetsAfter == 0 && totalSupplyAfter == 0;\\n            if (isMintingInitialShares || isBurningAllOutstandingShares) {\\n                return;\\n            }\\n        }\\n\\n        {\\n            // 1e4 is the max LTV\\n            uint256 deltaFromInitialLTV = mSAFE_LTV_THRESHOLD.mulDiv(initialLTV, 1e4);\\n            uint256 upperLimit = MathUpgradeable.min(initialLTV + deltaFromInitialLTV, 1e4);\\n            uint256 lowerLimit = deltaFromInitialLTV < initialLTV ? initialLTV - deltaFromInitialLTV : 0;\\n\\n            if (ltvAfter > upperLimit || ltvAfter < lowerLimit) {\\n                revert EnforcedSafeLTV(ltvAfter);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Ensures the ratio of `totalAssets`:`totalSupply` (A:S) does\\n     * @notice     not deviate by more than `SHARES_TO_ASSETS_RATIO_THRESHOLD`\\n     * @dev Compares the initial A:S ratio against the ratio used when minting/burning\\n     * @dev Validation should run in 2 cases for mint, and 2 cases for burn:\\n     * @dev    Mint: Initial mints (`S` == 0) and  subsequent mints (`S` > 0)\\n     * @dev    Burn: Burning some OR all outstanding shares (resulting in S == 0 or S > 0)\\n     * @dev Comparing the operation ratio delta rather than the final state ratio delta is superior because\\n     * @dev  final state ratio delta cannot validate when all outstanding shares are burned\\n     */\\n    function _validateSharesToAssetRatio(uint256 initialAssets, uint256 initialSupply) private view {\\n        (uint256 finalAssets, uint256 finalSupply) = (totalAssets(), totalSupply());\\n\\n        // Assets:Shares ratio should be 1:1 for initial mint\\n        if (initialSupply == 0 && finalSupply > 0 && finalAssets * 10 ** _decimalsOffset() != finalSupply) {\\n            revert ExceededShareToAssetRatioDeltaThreshold();\\n        }\\n\\n        // Assets should remain unchanged if shares are unchanged\\n        if (initialSupply == finalSupply && initialAssets != finalAssets) {\\n            revert ExceededShareToAssetRatioDeltaThreshold();\\n        }\\n\\n        // Ignore if the vault is minting initial shares\\n        if (initialSupply > 0) {\\n            uint256 initialRatio = _getSharesToAssetsRatio(initialSupply, initialAssets);\\n            uint256 ratioDelta;\\n\\n            {\\n                (uint256 supplyDelta, uint256 assetsDelta) = (initialSupply < finalSupply)\\n                    ? (finalSupply - initialSupply, finalAssets - initialAssets) // Mint\\n                    : (initialSupply - finalSupply, initialAssets - finalAssets); // Burn\\n\\n                uint256 operationRatio = _getSharesToAssetsRatio(supplyDelta, assetsDelta);\\n                ratioDelta =\\n                    MathUpgradeable.max(initialRatio, operationRatio) -\\n                    MathUpgradeable.min(initialRatio, operationRatio);\\n            }\\n\\n            if (ratioDelta > SHARES_TO_ASSETS_RATIO_THRESHOLD) {\\n                revert ExceededShareToAssetRatioDeltaThreshold();\\n            }\\n        }\\n    }\\n\\n    function _enforceDeadline(uint256 deadline) private view {\\n        if (block.timestamp > deadline) {\\n            revert DeadlineExceeded();\\n        }\\n    }\\n\\n    /// @dev Created separate method to avoid stack too deep error\\n    function _approveAssetsForDeposit(DefinitiveConstants.Assets memory depositAssets) private {\\n        address mVAULT = (VAULT);\\n        uint256 i;\\n        uint256 length = depositAssets.amounts.length;\\n        while (i < length) {\\n            IERC20(depositAssets.addresses[i]).resetAndSafeIncreaseAllowance(\\n                address(this),\\n                mVAULT,\\n                depositAssets.amounts[i]\\n            );\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /// @dev Created separate method to avoid stack too deep error\\n    function _withdrawAndTransfer(address receiver, DefinitiveConstants.Assets memory withdrawnAssets) private {\\n        // Withdraw `withdrawTokens` from the vault to the MultiUserLLSDStrategy\\n        // Transfer `withdrawTokens` from the MultiUserLLSDStrategy to the receiver\\n        uint256 i;\\n        while (i < withdrawnAssets.addresses.length) {\\n            ILLSDStrategy(VAULT).withdraw(withdrawnAssets.amounts[i], withdrawnAssets.addresses[i]);\\n\\n            IERC20(withdrawnAssets.addresses[i]).safeTransfer(receiver, withdrawnAssets.amounts[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _wrapDepositedNativeAsset(\\n        DefinitiveConstants.Assets memory assets\\n    ) private returns (DefinitiveConstants.Assets memory) {\\n        uint256 nativeAssetIndex = type(uint256).max;\\n\\n        {\\n            uint256 i;\\n            while (i < assets.addresses.length) {\\n                if (assets.addresses[i] == DefinitiveConstants.NATIVE_ASSET_ADDRESS) {\\n                    nativeAssetIndex = i;\\n                    break;\\n                }\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n\\n        if (nativeAssetIndex != type(uint256).max) {\\n            _wrap(assets.amounts[nativeAssetIndex]);\\n            // Replace the native asset with the wrapped native asset\\n            assets.addresses[nativeAssetIndex] = WRAPPED_NATIVE_ASSET_ADDRESS;\\n            emit NativeAssetWrap(address(this), assets.amounts[nativeAssetIndex], true /* wrappingToNative */);\\n        }\\n\\n        return assets;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/BubbleReverts/BubbleReverts.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPLv3\\npragma solidity >=0.8.18;\\n\\nimport { InvalidCalldata } from \\\"../../core/libraries/DefinitiveErrors.sol\\\";\\n\\n/**\\n * @title Call utilities library that is absent from the OpenZeppelin\\n * @author Superfluid\\n * Forked from\\n * https://github.com/superfluid-finance/protocol-monorepo/blob\\n * /d473b4876a689efb3bbb05552040bafde364a8b2/packages/ethereum-contracts/contracts/libs/CallUtils.sol\\n * (Separated by 2 lines to prevent going over 120 character per line limit)\\n */\\nlibrary CallUtils {\\n    /// @dev Bubble up the revert from the returnedData (supports Panic, Error & Custom Errors)\\n    /// @notice This is needed in order to provide some human-readable revert message from a call\\n    /// @param returnedData Response of the call\\n    function revertFromReturnedData(bytes memory returnedData) internal pure {\\n        if (returnedData.length < 4) {\\n            // case 1: catch all\\n            revert(\\\"CallUtils: target revert()\\\"); // solhint-disable-line custom-errors\\n        } else {\\n            bytes4 errorSelector;\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                errorSelector := mload(add(returnedData, 0x20))\\n            }\\n            if (errorSelector == bytes4(0x4e487b71) /* `seth sig \\\"Panic(uint256)\\\"` */) {\\n                // case 2: Panic(uint256) (Defined since 0.8.0)\\n                // solhint-disable-next-line max-line-length\\n                // ref: https://docs.soliditylang.org/en/v0.8.0/control-structures.html#panic-via-assert-and-error-via-require)\\n                string memory reason = \\\"CallUtils: target panicked: 0x__\\\";\\n                uint256 errorCode;\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    errorCode := mload(add(returnedData, 0x24))\\n                    let reasonWord := mload(add(reason, 0x20))\\n                    // [0..9] is converted to ['0'..'9']\\n                    // [0xa..0xf] is not correctly converted to ['a'..'f']\\n                    // but since panic code doesn't have those cases, we will ignore them for now!\\n                    let e1 := add(and(errorCode, 0xf), 0x30)\\n                    let e2 := shl(8, add(shr(4, and(errorCode, 0xf0)), 0x30))\\n                    reasonWord := or(\\n                        and(reasonWord, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000),\\n                        or(e2, e1)\\n                    )\\n                    mstore(add(reason, 0x20), reasonWord)\\n                }\\n                revert(reason);\\n            } else {\\n                // case 3: Error(string) (Defined at least since 0.7.0)\\n                // case 4: Custom errors (Defined since 0.8.0)\\n                uint256 len = returnedData.length;\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    revert(add(returnedData, 32), len)\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper method to parse data and extract the method signature (selector).\\n     *\\n     * Copied from: https://github.com/argentlabs/argent-contracts/\\n     * blob/master/contracts/modules/common/Utils.sol#L54-L60\\n     */\\n    function parseSelector(bytes memory callData) internal pure returns (bytes4 selector) {\\n        if (callData.length < 4) {\\n            revert InvalidCalldata();\\n        }\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            selector := mload(add(callData, 0x20))\\n        }\\n    }\\n\\n    /**\\n     * @dev Pad length to 32 bytes word boundary\\n     */\\n    function padLength32(uint256 len) internal pure returns (uint256 paddedLen) {\\n        return ((len / 32) + (((len & 31) > 0) /* rounding? */ ? 1 : 0)) * 32;\\n    }\\n\\n    /**\\n     * @dev Validate if the data is encoded correctly with abi.encode(bytesData)\\n     *\\n     * Expected ABI Encode Layout:\\n     * | word 1      | word 2           | word 3           | the rest...\\n     * | data length | bytesData offset | bytesData length | bytesData + padLength32 zeros |\\n     */\\n    function isValidAbiEncodedBytes(bytes memory data) internal pure returns (bool) {\\n        if (data.length < 64) return false;\\n        uint256 bytesOffset;\\n        uint256 bytesLen;\\n        // bytes offset is always expected to be 32\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            bytesOffset := mload(add(data, 32))\\n        }\\n        if (bytesOffset != 32) return false;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            bytesLen := mload(add(data, 64))\\n        }\\n        // the data length should be bytesData.length + 64 + padded bytes length\\n        return data.length == 64 + padLength32(bytesLen);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/vendor/interfaces/IWETH9.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.18;\\n\\ninterface IWETH9 {\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"solmate/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 850\r\n    },\r\n    \"viaIR\": false,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AccountNotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeadlineExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invalidLTV\",\"type\":\"uint256\"}],\"name\":\"EnforcedSafeLTV\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceededShareToAssetRatioDeltaThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidERC20Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInputs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMsgValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSignatureVerificationSignerSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeHarborModeEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransfersLimitExceeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeAccount\",\"type\":\"address\"}],\"name\":\"FeeAccountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTransfers\",\"type\":\"uint256\"}],\"name\":\"MaxTransfersPerBlockUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"internalType\":\"struct DefinitiveConstants.Assets\",\"name\":\"tokensAdded\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"assetsAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IMultiUserLLSDStrategy.MintEventData\",\"name\":\"mintEvent\",\"type\":\"tuple\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"wrappingToNative\",\"type\":\"bool\"}],\"name\":\"NativeAssetWrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"internalType\":\"struct DefinitiveConstants.Assets\",\"name\":\"tokensRemoved\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"assetsRemoved\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IMultiUserLLSDStrategy.RedeemEventData\",\"name\":\"redeemEvent\",\"type\":\"tuple\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"additionalFeeAmount\",\"type\":\"uint256\"}],\"name\":\"RedemptionFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redemptionFee\",\"type\":\"uint256\"}],\"name\":\"RedemptionFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"}],\"name\":\"SignatureVerificationSignerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"UpdateSafeLTVThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"UpdateSharesToAssetsRatioThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ABI_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WRAPPED_NATIVE_ASSET_ADDRESS\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"}],\"name\":\"_getEthSignedMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_signatureVerificationSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"internalType\":\"struct DefinitiveConstants.Assets\",\"name\":\"depositTokens\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"flashloanAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDelegate\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"handlerCalldata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapPayload\",\"name\":\"swapPayload\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxLTV\",\"type\":\"uint256\"}],\"internalType\":\"struct ILLSDStrategyV1.EnterContext\",\"name\":\"enterCtx\",\"type\":\"tuple\"}],\"internalType\":\"struct IMultiUserLLSDStrategy.DepositParams\",\"name\":\"depositParams\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"depositParamsSignature\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetsAdded\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"internalType\":\"struct DefinitiveConstants.Assets\",\"name\":\"depositTokens\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"flashloanAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDelegate\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"handlerCalldata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapPayload\",\"name\":\"swapPayload\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxLTV\",\"type\":\"uint256\"}],\"internalType\":\"struct ILLSDStrategyV1.EnterContext\",\"name\":\"enterCtx\",\"type\":\"tuple\"}],\"internalType\":\"struct IMultiUserLLSDStrategy.DepositParams\",\"name\":\"depositParams\",\"type\":\"tuple\"}],\"name\":\"encodeDepositParams\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesBurned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesFeesAdditional\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"flashloanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decollateralizeAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDelegate\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"handlerCalldata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapPayload\",\"name\":\"swapPayload\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxLTV\",\"type\":\"uint256\"}],\"internalType\":\"struct ILLSDStrategyV1.ExitContext\",\"name\":\"exitCtx\",\"type\":\"tuple\"}],\"internalType\":\"struct IMultiUserLLSDStrategy.RedeemParams\",\"name\":\"redeemParams\",\"type\":\"tuple\"}],\"name\":\"encodeRedeemParams\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeesAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getRedemptionFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSafeHarborModeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_wrappedNativeAssetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategyAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sigVerificationSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAccount\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesBurned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesFeesAdditional\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"flashloanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decollateralizeAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDelegate\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"handlerCalldata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapPayload\",\"name\":\"swapPayload\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxLTV\",\"type\":\"uint256\"}],\"internalType\":\"struct ILLSDStrategyV1.ExitContext\",\"name\":\"exitCtx\",\"type\":\"tuple\"}],\"internalType\":\"struct IMultiUserLLSDStrategy.RedeemParams\",\"name\":\"redeemParams\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"redeemParamsSignature\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"internalType\":\"struct DefinitiveConstants.Assets\",\"name\":\"tokensRemoved\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setFeesAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTransfers\",\"type\":\"uint256\"}],\"name\":\"setMaxTransfersPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setRedemptionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"setSafeHarborRedemptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setSafeLTVThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setSharesToAssetRatioThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"setSignatureVerificationSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAssetsAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MultiUserLLSDStrategy", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "850", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}