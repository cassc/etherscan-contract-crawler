{"SourceCode": "{\"dsrAaveLoop.sol\":{\"content\":\"// SPDX-License-Identifier: BSL-1.1\\n// Business Source License 1.1\\n\\n// License text copyright (c) 2017 MariaDB Corporation Ab, All Rights Reserved.\\n// \\\"Business Source License\\\" is a trademark of MariaDB Corporation Ab.\\n\\n// -----------------------------------------------------------------------------\\n\\n// Parameters\\n\\n// Licensor:             TheRealHedgeLord\\n\\n// Licensed Work:        dsr-aave-loop\\n//                       The Licensed Work is (c) 2023 TheRealHedgeLord\\n\\n// Additional Use Grant: You may make production use of the licensed Work in a\\n//                       non commercial setting\\n\\n\\n// Change Date:          2027-09-14\\n\\n\\n// Change License:       GNU General Public License v2.0 or later\\n\\n// -----------------------------------------------------------------------------\\n\\n// Terms\\n\\n// The Licensor hereby grants you the right to copy, modify, create derivative\\n// works, redistribute, and make non-production use of the Licensed Work. The\\n// Licensor may make an Additional Use Grant, above, permitting limited\\n// production use.\\n\\n// Effective on the Change Date, or the fourth anniversary of the first publicly\\n// available distribution of a specific version of the Licensed Work under this\\n// License, whichever comes first, the Licensor hereby grants you rights under\\n// the terms of the Change License, and the rights granted in the paragraph\\n// above terminate.\\n\\n// If your use of the Licensed Work does not comply with the requirements\\n// currently in effect as described in this License, you must purchase a\\n// commercial license from the Licensor, its affiliated entities, or authorized\\n// resellers, or you must refrain from using the Licensed Work.\\n\\n// All copies of the original and modified Licensed Work, and derivative works\\n// of the Licensed Work, are subject to this License. This License applies\\n// separately for each version of the Licensed Work and the Change Date may vary\\n// for each version of the Licensed Work released by Licensor.\\n\\n// You must conspicuously display this License on each original or modified copy\\n// of the Licensed Work. If you receive the Licensed Work in original or\\n// modified form from a third party, the terms and conditions set forth in this\\n// License apply to your use of that work.\\n\\n// Any use of the Licensed Work in violation of this License will automatically\\n// terminate your rights under this License for the current and all other\\n// versions of the Licensed Work.\\n\\n// This License does not grant you any right in any trademark or logo of\\n// Licensor or its affiliates (provided that you may use a trademark or logo of\\n// Licensor as expressly required by this License).\\n\\n// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON\\n// AN \\\"AS IS\\\" BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,\\n// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF\\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND\\n// TITLE.\\n\\n// MariaDB hereby grants you permission to use this License\u2019s text to license\\n// your works, and to refer to it using the trademark \\\"Business Source License\\\",\\n// as long as you comply with the Covenants of Licensor below.\\n\\n// -----------------------------------------------------------------------------\\n\\n// Covenants of Licensor\\n\\n// In consideration of the right to use this License\u2019s text and the \\\"Business\\n// Source License\\\" name and trademark, Licensor covenants to MariaDB, and to all\\n// other recipients of the licensed work to be provided by Licensor:\\n\\n// 1. To specify as the Change License the GPL Version 2.0 or any later version,\\n//    or a license that is compatible with GPL Version 2.0 or a later version,\\n//    where \\\"compatible\\\" means that software provided under the Change License can\\n//    be included in a program with software provided under GPL Version 2.0 or a\\n//    later version. Licensor may specify additional Change Licenses without\\n//    limitation.\\n\\n// 2. To either: (a) specify an additional grant of rights to use that does not\\n//    impose any additional restriction on the right granted in this License, as\\n//    the Additional Use Grant; or (b) insert the text \\\"None\\\".\\n\\n// 3. To specify a Change Date.\\n\\n// 4. Not to modify this License in any other way.\\n\\n// -----------------------------------------------------------------------------\\n\\n// Notice\\n\\n// The Business Source License (this document, or the \\\"License\\\") is not an Open\\n// Source license. However, the Licensed Work will eventually be made available\\n// under an Open Source License, as stated in this License.\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\nimport \\\"./IERC3156FlashLender.sol\\\";\\nimport \\\"./IsDAI.sol\\\";\\nimport \\\"./IDssPsm.sol\\\";\\nimport \\\"./IAavePool.sol\\\";\\nimport \\\"./governance.sol\\\";\\n\\ncontract DSRAAVELoop is IERC3156FlashBorrower, Governance {\\n    enum Action {OPEN, CLOSE}\\n\\n    address public immutable DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address public immutable SDAI = 0x83F20F44975D03b1b09e64809B757c47f942BEeA;\\n    address public immutable USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address public immutable DSS_FLASH = 0x60744434d6339a6B27d73d9Eda62b6F66a0a04FA;\\n    address public immutable DSS_PSM = 0x89B78CfA322F6C5dE0aBcEecab66Aee45393cC5A;\\n    address public immutable DSS_PSM_EXEC = 0x0A59649758aa4d66E25f08Dd01271e891fe52199;\\n    address public immutable AAVE_POOL = 0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2;\\n    address public immutable SDAI_A_TOKEN = 0x4C612E3B15b96Ff9A6faED838F8d07d479a8dD4c;\\n    address public immutable USDC_VARIABLE_DEBT_TOKEN = 0x72E95b8931767C79bA4EeE721354d6E99a61D004;\\n    uint256 public immutable DAI_USDC_FACTOR = 1000000000000;\\n\\n    function _openPosition(\\n        uint256 positionAmount,\\n        uint256 flashLoanAmount,\\n        address sender\\n    ) internal {\\n        IsDAI(SDAI).transferFrom(sender, address(this), positionAmount);\\n        IERC20(DAI).approve(SDAI, flashLoanAmount);\\n        uint256 mintedAmount = IsDAI(SDAI).deposit(flashLoanAmount, address(this));\\n        uint256 feeAmount = (positionAmount/10000)*getFee(sender);\\n        uint256 collateralAmount = positionAmount+mintedAmount-feeAmount;\\n        uint256 debtAmount = flashLoanAmount/DAI_USDC_FACTOR;\\n        IERC20(SDAI).approve(AAVE_POOL, collateralAmount);\\n        IAavePool(AAVE_POOL).supply(SDAI, collateralAmount, sender, 0);\\n        IAavePool(AAVE_POOL).borrow(USDC, debtAmount, 2, 0, sender);\\n        IERC20(USDC).approve(DSS_PSM_EXEC, debtAmount);\\n        IDssPsm(DSS_PSM).sellGem(address(this), debtAmount);\\n    }\\n\\n    function _closePosition(\\n        uint256 withdrawAmount,\\n        uint256 flashLoanAmount,\\n        address sender\\n    ) internal {\\n        IERC20(DAI).approve(DSS_PSM, flashLoanAmount);\\n        uint256 repayAmount = flashLoanAmount/DAI_USDC_FACTOR;\\n        IDssPsm(DSS_PSM).buyGem(address(this), repayAmount);\\n        IERC20(USDC).approve(AAVE_POOL, repayAmount);\\n        IAavePool(AAVE_POOL).repay(USDC, repayAmount, 2, sender);\\n        IERC20(SDAI_A_TOKEN).transferFrom(sender, address(this), withdrawAmount);\\n        IERC20(SDAI_A_TOKEN).approve(AAVE_POOL, withdrawAmount);\\n        IAavePool(AAVE_POOL).withdraw(SDAI, withdrawAmount, address(this));\\n        uint256 burntAmount = IsDAI(SDAI).withdraw(flashLoanAmount, address(this), address(this));\\n        uint256 returnAmount = withdrawAmount-burntAmount;\\n        uint256 feeAmount = (returnAmount/10000)*getFee(sender);\\n        IERC20(SDAI).transfer(sender, returnAmount-feeAmount);\\n    }\\n\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external override returns (bytes32) {\\n        require(\\n            msg.sender == DSS_FLASH,\\n            \\\"FlashBorrower: Untrusted lender\\\"\\n        );\\n        require(\\n            initiator == address(this),\\n            \\\"FlashBorrower: Untrusted loan initiator\\\"\\n        );\\n        require(\\n            IERC20(token).balanceOf(address(this)) \\u003e= amount,\\n            \\\"CustomBorrower: Loan not recieved\\\"\\n        );\\n        require(\\n            fee == 0,\\n            \\\"CustomBorrower: Non zero fee\\\"\\n        );\\n        require(\\n            token == DAI,\\n            \\\"CustomBorrower: Incorrect dai address\\\"\\n        );\\n        (Action action, uint256 userAmount, address sender) = abi.decode(data, (Action, uint256, address));\\n        if (action == Action.OPEN) {\\n            _openPosition(userAmount, amount, sender);\\n        } else if (action == Action.CLOSE) {\\n            _closePosition(userAmount, amount, sender);\\n        }\\n        IERC20(DAI).approve(DSS_FLASH, amount);\\n        return keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n    }\\n\\n    function openPosition(\\n        uint256 positionAmount,\\n        uint256 flashLoanAmount,\\n        uint256 maxFee\\n    ) public whitelistedOnly {\\n        require(\\n            getFee(msg.sender) \\u003c= maxFee,\\n            \\\"DSRAAVELoop: Max fee exceeded\\\"\\n        );\\n        bytes memory data = abi.encode(Action.OPEN, positionAmount, msg.sender);\\n        IERC3156FlashLender(DSS_FLASH).flashLoan(this, DAI, flashLoanAmount, data);\\n    }\\n\\n    function closePosition(\\n        uint256 withdrawAmount,\\n        uint256 repayAmount,\\n        uint256 maxFee\\n    ) public whitelistedOnly {\\n        require(\\n            getFee(msg.sender) \\u003c= maxFee,\\n            \\\"DSRAAVELoop: Max fee exceeded\\\"\\n        );\\n        uint256 flashLoanAmount;\\n        if (withdrawAmount == 0) {\\n            withdrawAmount = IERC20(SDAI_A_TOKEN).balanceOf(msg.sender);\\n        }\\n        if (repayAmount == 0) {\\n            flashLoanAmount = IERC20(USDC_VARIABLE_DEBT_TOKEN).balanceOf(msg.sender)*DAI_USDC_FACTOR;\\n        } else {\\n            flashLoanAmount = repayAmount*DAI_USDC_FACTOR;\\n        }\\n        bytes memory data = abi.encode(Action.CLOSE, withdrawAmount, msg.sender);\\n        IERC3156FlashLender(DSS_FLASH).flashLoan(this, DAI, flashLoanAmount, data);\\n    }\\n}\"},\"governance.sol\":{\"content\":\"// SPDX-License-Identifier: BSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract Governance {\\n\\n\\taddress public owner;\\n\\tuint256 private fee = 5;\\n\\tmapping(address =\\u003e bool) private whitelist;\\n\\tmapping(address =\\u003e uint256) private specialFee;\\n\\n\\tconstructor() {\\n\\t\\towner = msg.sender;\\n\\t}\\n\\n\\tmodifier ownerOnly {\\n\\t\\trequire(msg.sender == owner, \\\"Governance: Access denied\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier whitelistedOnly {\\n\\t\\trequire(isWhitelisted(msg.sender), \\\"Governance: Access denied\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction isWhitelisted(address user) public view returns(bool) {\\n\\t\\tif (user == owner) {\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn whitelist[user];\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getFee(address user) public view returns(uint256) {\\n\\t\\tif (user == owner) {\\n\\t\\t\\treturn 0;\\n\\t\\t} else if (specialFee[user] == 0) {\\n\\t\\t\\treturn fee;\\n\\t\\t} else {\\n\\t\\t\\treturn specialFee[user];\\n\\t\\t}\\n\\t}\\n\\n\\tfunction transferOwnership(address newOwner) public ownerOnly {\\n\\t\\towner = newOwner;\\n\\t}\\n\\n\\tfunction addToWhitelist(address user) public ownerOnly {\\n\\t\\twhitelist[user] = true;\\n\\t}\\n\\n\\tfunction removeFromWhitelist(address user) public ownerOnly {\\n\\t\\twhitelist[user] = false;\\n\\t}\\n\\n\\tfunction setFee(uint256 newFee) public ownerOnly {\\n\\t\\tfee = newFee;\\n\\t}\\n\\n\\tfunction setSpecialFee(address user, uint256 newSpecialFee) public ownerOnly {\\n\\t\\tspecialFee[user] = newSpecialFee;\\n\\t}\\n\\n\\tfunction rescueToken(address token) public ownerOnly {\\n\\t\\tuint256 amount = IERC20(token).balanceOf(address(this));\\n\\t\\trequire(amount \\u003e 0, \\\"Governance: Nothing to collect\\\");\\n\\t\\tIERC20(token).transfer(owner, amount);\\n\\t}\\n\\n}\"},\"IAavePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\ninterface IAavePool {\\n\\n\\tfunction supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\tfunction withdraw(address asset, uint256 amount, address to) external returns(uint256);\\n\\n\\tfunction borrow(address asset, uint256 amount, uint256 interestRateMode, uint16 referralCode, address onBehalfOf) external;\\n\\t// onBehalfOf must have deligated credit towards msg.sender\\n\\n\\tfunction repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) external returns (uint256);\\n\\t\\n}\\n\\n\\n\"},\"IDssPsm.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IDssPsm {\\n\\n\\tfunction sellGem(address usr, uint256 gemAmt) external;\\n\\t// USDC to DAI\\n\\n\\tfunction buyGem(address usr, uint256 gemAmt) external;\\n\\t// DAI to USDC\\n\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\"},\"IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2021 Dai Foundation\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see \\u003chttps://www.gnu.org/licenses/\\u003e.\\n\\npragma solidity \\u003e=0.6.12;\\n\\ninterface IERC3156FlashBorrower {\\n\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\"},\"IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2021 Dai Foundation\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see \\u003chttps://www.gnu.org/licenses/\\u003e.\\n\\npragma solidity \\u003e=0.6.12;\\n\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\ninterface IERC3156FlashLender {\\n\\n    /**\\n     * @dev The amount of currency available to be lent.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(\\n        address token\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\"},\"IsDAI.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IsDAI is IERC20 {\\n\\n\\tfunction deposit(uint256 assets, address receiver) external returns (uint256);\\n\\t// DAI to sDAI\\n\\n\\tfunction withdraw(uint256 assets, address receiver, address owner) external returns (uint256);\\n\\t// sDAI to DAI\\n\\n}\"}}", "ABI": "[{\"inputs\":[],\"name\":\"AAVE_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI_USDC_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DSS_FLASH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DSS_PSM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DSS_PSM_EXEC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SDAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SDAI_A_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_VARIABLE_DEBT_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"closePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flashLoanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"openPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newSpecialFee\",\"type\":\"uint256\"}],\"name\":\"setSpecialFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DSRAAVELoop", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "BSL 1.1", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a5b0c420f563a586600323cbc50dd5d2f5c644f9519f0fe8851a798e430b8413"}