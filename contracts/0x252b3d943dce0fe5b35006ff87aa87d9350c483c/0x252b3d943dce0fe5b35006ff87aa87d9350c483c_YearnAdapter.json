{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/adapters/YearnV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport {ICreditFilter} from \\\"../interfaces/ICreditFilter.sol\\\";\\nimport {ICreditManager} from \\\"../interfaces/ICreditManager.sol\\\";\\nimport {IYVault} from \\\"../integrations/yearn/IYVault.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {CreditAccount} from \\\"../credit/CreditAccount.sol\\\";\\nimport {CreditManager} from \\\"../credit/CreditManager.sol\\\";\\n\\nimport {Constants} from \\\"../libraries/helpers/Constants.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\n\\n\\n/// @title Yearn adapter\\ncontract YearnAdapter is IYVault, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    address public yVault;\\n    address public override token;\\n\\n    ICreditManager public creditManager;\\n    ICreditFilter public creditFilter;\\n\\n    /// @dev Constructor\\n    /// @param _creditManager Address Credit manager\\n    /// @param _yVault Address of yVault\\n    constructor(address _creditManager, address _yVault) {\\n        require(\\n            _creditManager != address(0) && _yVault != address(0),\\n            Errors.ZERO_ADDRESS_IS_NOT_ALLOWED\\n        );\\n        creditManager = ICreditManager(_creditManager);\\n        creditFilter = ICreditFilter(creditManager.creditFilter());\\n\\n        yVault = _yVault;\\n\\n        // Check that we have token connected with this yearn pool\\n        token = IYVault(yVault).token();\\n        creditFilter.revertIfTokenNotAllowed(token);\\n    }\\n\\n    /// @dev Deposit credit account tokens to Yearn\\n    function deposit() external override nonReentrant returns (uint256) {\\n        // bytes4(0xd0e30db0) = deposit()\\n        return _deposit(abi.encodeWithSelector(bytes4(0xd0e30db0))); // M:[YA-1]\\n    }\\n\\n    /// @dev Deposit credit account tokens to Yearn\\n    /// @param amount in tokens\\n    function deposit(uint256 amount)\\n        external\\n        override\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        // bytes4(0xb6b55f25) = deposit\\n        return _deposit(abi.encodeWithSelector(bytes4(0xb6b55f25), amount)); // M:[YA-2]\\n    }\\n\\n    /// @dev Deposit credit account tokens to Yearn\\n    /// @param amount in tokens\\n    function deposit(uint256 amount, address)\\n        external\\n        override\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        // bytes4(0xb6b55f25) = deposit\\n        return _deposit(abi.encodeWithSelector(bytes4(0xb6b55f25), amount)); // M:[YA-2]\\n    }\\n\\n    function _deposit(bytes memory data) internal returns (uint256 shares) {\\n        address creditAccount = creditManager.getCreditAccountOrRevert(\\n            msg.sender\\n        ); // M:[YA-1,2]\\n\\n        creditManager.provideCreditAccountAllowance(\\n            creditAccount,\\n            yVault,\\n            token\\n        ); // M:[YA-1,2]\\n\\n        uint256 balanceInBefore = IERC20(token).balanceOf(creditAccount); // M:[YA-1,2]\\n        uint256 balanceOutBefore = IERC20(yVault).balanceOf(creditAccount); // M:[YA-1,2]\\n\\n        shares = abi.decode(\\n            creditManager.executeOrder(msg.sender, yVault, data),\\n            (uint256)\\n        ); // M:[YA-1,2]\\n\\n        creditFilter.checkCollateralChange(\\n            creditAccount,\\n            token,\\n            yVault,\\n            balanceInBefore.sub(IERC20(token).balanceOf(creditAccount)),\\n            IERC20(yVault).balanceOf(creditAccount).sub(balanceOutBefore)\\n        ); // M:[YA-1,2]\\n    }\\n\\n    function withdraw() external override nonReentrant returns (uint256) {\\n        // bytes4(0x3ccfd60b) = withdraw()\\n        return _withdraw(abi.encodeWithSelector(bytes4(0x3ccfd60b))); // M:[YA-3]\\n    }\\n\\n    function withdraw(uint256 maxShares)\\n        external\\n        override\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        // bytes4(0x2e1a7d4d) = withdraw(uint256)\\n        return _withdraw(abi.encodeWithSelector(bytes4(0x2e1a7d4d), maxShares));\\n    }\\n\\n    function withdraw(uint256 maxShares, address)\\n        external\\n        override\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        // Call the function with MaxShares only, cause recepient doesn't make sense here\\n        // bytes4(0x2e1a7d4d) = withdraw(uint256)\\n        return _withdraw(abi.encodeWithSelector(bytes4(0x2e1a7d4d), maxShares));\\n    }\\n\\n    /// @dev Withdraw yVaults from credit account\\n    /// @param maxShares How many shares to try and redeem for tokens, defaults to all.\\n    //  @param recipient The address to issue the shares in this Vault to. Defaults to the caller's address.\\n    //  @param maxLoss The maximum acceptable loss to sustain on withdrawal. Defaults to 0.01%.\\n    //                 If a loss is specified, up to that amount of shares may be burnt to cover losses on withdrawal.\\n    //  @return The quantity of tokens redeemed for `_shares`.\\n    function withdraw(\\n        uint256 maxShares,\\n        address,\\n        uint256 maxLoss\\n    ) public override nonReentrant returns (uint256 shares) {\\n        address creditAccount = creditManager.getCreditAccountOrRevert(\\n            msg.sender\\n        ); // M:[YA-3]\\n        return\\n            _withdraw(\\n                abi.encodeWithSelector(\\n                    bytes4(0xe63697c8), //\\\"withdraw(uint256,address,uint256)\\\",\\n                    maxShares,\\n                    creditAccount,\\n                    maxLoss\\n                )\\n            ); // M:[YA-3])\\n    }\\n\\n    function _withdraw(bytes memory data) internal returns (uint256 shares) {\\n        address creditAccount = creditManager.getCreditAccountOrRevert(\\n            msg.sender\\n        ); // M:[YA-3]\\n\\n        uint256 balanceInBefore = IERC20(yVault).balanceOf(creditAccount); // M:[YA-3]\\n        uint256 balanceOutBefore = IERC20(token).balanceOf(creditAccount); // M:[YA-3]\\n\\n        shares = abi.decode(\\n            creditManager.executeOrder(msg.sender, yVault, data),\\n            (uint256)\\n        ); // M:[YA-3]\\n\\n        creditFilter.checkCollateralChange(\\n            creditAccount,\\n            yVault,\\n            token,\\n            balanceInBefore.sub(IERC20(yVault).balanceOf(creditAccount)),\\n            IERC20(token).balanceOf(creditAccount).sub(balanceOutBefore)\\n        ); // M:[YA-3]\\n    }\\n\\n    function pricePerShare() external view override returns (uint256) {\\n        return IYVault(yVault).pricePerShare();\\n    }\\n\\n    function name() external view override returns (string memory) {\\n        return IYVault(yVault).name();\\n    }\\n\\n    function symbol() external view override returns (string memory) {\\n        return IYVault(yVault).symbol();\\n    }\\n\\n    function decimals() external view override returns (uint8) {\\n        return IYVault(yVault).decimals();\\n    }\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return IYVault(yVault).allowance(owner, spender);\\n    }\\n\\n    function approve(address, uint256) external pure override returns (bool) {\\n        return true;\\n    }\\n\\n    function balanceOf(address account)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return IYVault(yVault).balanceOf(account);\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return IYVault(yVault).totalSupply();\\n    }\\n\\n    function transfer(address, uint256) external pure override returns (bool) {\\n        revert(Errors.NOT_IMPLEMENTED);\\n    }\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external pure override returns (bool) {\\n        revert(Errors.NOT_IMPLEMENTED);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICreditFilter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\ninterface ICreditFilter {\\n    // Emits each time token is allowed or liquidtion threshold changed\\n    event TokenAllowed(address indexed token, uint256 liquidityThreshold);\\n\\n   // Emits each time token is allowed or liquidtion threshold changed\\n    event TokenForbidden(address indexed token);\\n\\n    // Emits each time contract is allowed or adapter changed\\n    event ContractAllowed(address indexed protocol, address indexed adapter);\\n\\n    // Emits each time contract is forbidden\\n    event ContractForbidden(address indexed protocol);\\n\\n    // Emits each time when fast check parameters are updated\\n    event NewFastCheckParameters(uint256 chiThreshold, uint256 fastCheckDelay);\\n\\n    event TransferAccountAllowed(\\n        address indexed from,\\n        address indexed to,\\n        bool state\\n    );\\n\\n    event TransferPluginAllowed(\\n        address indexed pugin,\\n        bool state\\n    );\\n\\n    event PriceOracleUpdated(address indexed newPriceOracle);\\n\\n    //\\n    // STATE-CHANGING FUNCTIONS\\n    //\\n\\n    /// @dev Adds token to the list of allowed tokens\\n    /// @param token Address of allowed token\\n    /// @param liquidationThreshold The constant showing the maximum allowable ratio of Loan-To-Value for the i-th asset.\\n    function allowToken(address token, uint256 liquidationThreshold) external;\\n\\n    /// @dev Adds contract to the list of allowed contracts\\n    /// @param targetContract Address of contract to be allowed\\n    /// @param adapter Adapter contract address\\n    function allowContract(address targetContract, address adapter) external;\\n\\n    /// @dev Forbids contract and removes it from the list of allowed contracts\\n    /// @param targetContract Address of allowed contract\\n    function forbidContract(address targetContract) external;\\n\\n    /// @dev Checks financial order and reverts if tokens aren't in list or collateral protection alerts\\n    /// @param creditAccount Address of credit account\\n    /// @param tokenIn Address of token In in swap operation\\n    /// @param tokenOut Address of token Out in swap operation\\n    /// @param amountIn Amount of tokens in\\n    /// @param amountOut Amount of tokens out\\n    function checkCollateralChange(\\n        address creditAccount,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    ) external;\\n\\n    function checkMultiTokenCollateral(\\n        address creditAccount,\\n        uint256[] memory amountIn,\\n        uint256[] memory amountOut,\\n        address[] memory tokenIn,\\n        address[] memory tokenOut\\n    ) external;\\n\\n    /// @dev Connects credit managaer, hecks that all needed price feeds exists and finalize config\\n    function connectCreditManager(address poolService) external;\\n\\n    /// @dev Sets collateral protection for new credit accounts\\n    function initEnabledTokens(address creditAccount) external;\\n\\n    function checkAndEnableToken(address creditAccount, address token) external;\\n\\n    //\\n    // GETTERS\\n    //\\n\\n    /// @dev Returns quantity of contracts in allowed list\\n    function allowedContractsCount() external view returns (uint256);\\n\\n    /// @dev Returns of contract address from the allowed list by its id\\n    function allowedContracts(uint256 id) external view returns (address);\\n\\n    /// @dev Reverts if token isn't in token allowed list\\n    function revertIfTokenNotAllowed(address token) external view;\\n\\n    /// @dev Returns true if token is in allowed list otherwise false\\n    function isTokenAllowed(address token) external view returns (bool);\\n\\n    /// @dev Returns quantity of tokens in allowed list\\n    function allowedTokensCount() external view returns (uint256);\\n\\n    /// @dev Returns of token address from allowed list by its id\\n    function allowedTokens(uint256 id) external view returns (address);\\n\\n    /// @dev Calculates total value for provided address\\n    /// More: https://dev.gearbox.fi/developers/credit/economy#total-value\\n    ///\\n    /// @param creditAccount Token creditAccount address\\n    function calcTotalValue(address creditAccount)\\n        external\\n        view\\n        returns (uint256 total);\\n\\n    /// @dev Calculates Threshold Weighted Total Value\\n    /// More: https://dev.gearbox.fi/developers/credit/economy#threshold-weighted-value\\n    ///\\n    ///@param creditAccount Credit account address\\n    function calcThresholdWeightedValue(address creditAccount)\\n        external\\n        view\\n        returns (uint256 total);\\n\\n    function contractToAdapter(address allowedContract)\\n        external\\n        view\\n        returns (address);\\n\\n    /// @dev Returns address of underlying token\\n    function underlyingToken() external view returns (address);\\n\\n    /// @dev Returns address & balance of token by the id of allowed token in the list\\n    /// @param creditAccount Credit account address\\n    /// @param id Id of token in allowed list\\n    /// @return token Address of token\\n    /// @return balance Token balance\\n    function getCreditAccountTokenById(address creditAccount, uint256 id)\\n        external\\n        view\\n        returns (\\n            address token,\\n            uint256 balance,\\n            uint256 tv,\\n            uint256 twv\\n        );\\n\\n    /**\\n     * @dev Calculates health factor for the credit account\\n     *\\n     *         sum(asset[i] * liquidation threshold[i])\\n     *   Hf = --------------------------------------------\\n     *             borrowed amount + interest accrued\\n     *\\n     *\\n     * More info: https://dev.gearbox.fi/developers/credit/economy#health-factor\\n     *\\n     * @param creditAccount Credit account address\\n     * @return Health factor in percents (see PERCENTAGE FACTOR in PercentageMath.sol)\\n     */\\n    function calcCreditAccountHealthFactor(address creditAccount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Calculates credit account interest accrued\\n    /// More: https://dev.gearbox.fi/developers/credit/economy#interest-rate-accrued\\n    ///\\n    /// @param creditAccount Credit account address\\n    function calcCreditAccountAccruedInterest(address creditAccount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Return enabled tokens - token masks where each bit is \\\"1\\\" is token is enabled\\n    function enabledTokens(address creditAccount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function liquidationThresholds(address token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function updateUnderlyingTokenLiquidationThreshold() external;\\n\\n    function revertIfCantIncreaseBorrowing(\\n        address creditAccount,\\n        uint256 minHealthFactor\\n    ) external view;\\n\\n    function revertIfAccountTransferIsNotAllowed(\\n        address onwer,\\n        address creditAccount\\n    ) external view;\\n\\n    function approveAccountTransfers(address from, bool state) external;\\n\\n    function allowanceForAccountTransfers(address from, address to)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICreditManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\npragma abicoder v2;\\n\\nimport {ICreditFilter} from \\\"../interfaces/ICreditFilter.sol\\\";\\nimport {IAppCreditManager} from \\\"./app/IAppCreditManager.sol\\\";\\nimport {DataTypes} from \\\"../libraries/data/Types.sol\\\";\\n\\n\\n/// @title Credit Manager interface\\n/// @notice It encapsulates business logic for managing credit accounts\\n///\\n/// More info: https://dev.gearbox.fi/developers/credit/credit_manager\\ninterface ICreditManager is IAppCreditManager {\\n    // Emits each time when the credit account is opened\\n    event OpenCreditAccount(\\n        address indexed sender,\\n        address indexed onBehalfOf,\\n        address indexed creditAccount,\\n        uint256 amount,\\n        uint256 borrowAmount,\\n        uint256 referralCode\\n    );\\n\\n    // Emits each time when the credit account is closed\\n    event CloseCreditAccount(\\n        address indexed owner,\\n        address indexed to,\\n        uint256 remainingFunds\\n    );\\n\\n    // Emits each time when the credit account is liquidated\\n    event LiquidateCreditAccount(\\n        address indexed owner,\\n        address indexed liquidator,\\n        uint256 remainingFunds\\n    );\\n\\n    // Emits each time when borrower increases borrowed amount\\n    event IncreaseBorrowedAmount(address indexed borrower, uint256 amount);\\n\\n    // Emits each time when borrower adds collateral\\n    event AddCollateral(\\n        address indexed onBehalfOf,\\n        address indexed token,\\n        uint256 value\\n    );\\n\\n    // Emits each time when the credit account is repaid\\n    event RepayCreditAccount(address indexed owner, address indexed to);\\n\\n    // Emit each time when financial order is executed\\n    event ExecuteOrder(address indexed borrower, address indexed target);\\n\\n    // Emits each time when new fees are set\\n    event NewParameters(\\n        uint256 minAmount,\\n        uint256 maxAmount,\\n        uint256 maxLeverage,\\n        uint256 feeInterest,\\n        uint256 feeLiquidation,\\n        uint256 liquidationDiscount\\n    );\\n\\n    event TransferAccount(address indexed oldOwner, address indexed newOwner);\\n\\n    //\\n    // CREDIT ACCOUNT MANAGEMENT\\n    //\\n\\n    /**\\n     * @dev Opens credit account and provides credit funds.\\n     * - Opens credit account (take it from account factory)\\n     * - Transfers trader /farmers initial funds to credit account\\n     * - Transfers borrowed leveraged amount from pool (= amount x leverageFactor) calling lendCreditAccount() on connected Pool contract.\\n     * - Emits OpenCreditAccount event\\n     * Function reverts if user has already opened position\\n     *\\n     * More info: https://dev.gearbox.fi/developers/credit/credit_manager#open-credit-account\\n     *\\n     * @param amount Borrowers own funds\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param leverageFactor Multiplier to borrowers own funds\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function openCreditAccount(\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint256 leverageFactor,\\n        uint256 referralCode\\n    ) external override;\\n\\n    /**\\n     * @dev Closes credit account\\n     * - Swaps all assets to underlying one using default swap protocol\\n     * - Pays borrowed amount + interest accrued + fees back to the pool by calling repayCreditAccount\\n     * - Transfers remaining funds to the trader / farmer\\n     * - Closes the credit account and return it to account factory\\n     * - Emits CloseCreditAccount event\\n     *\\n     * More info: https://dev.gearbox.fi/developers/credit/credit_manager#close-credit-account\\n     *\\n     * @param to Address to send remaining funds\\n     * @param paths Exchange type data which provides paths + amountMinOut\\n     */\\n    function closeCreditAccount(address to, DataTypes.Exchange[] calldata paths)\\n        external\\n        override;\\n\\n    /**\\n     * @dev Liquidates credit account\\n     * - Transfers discounted total credit account value from liquidators account\\n     * - Pays borrowed funds + interest + fees back to pool, than transfers remaining funds to credit account owner\\n     * - Transfer all assets from credit account to liquidator (\\\"to\\\") account\\n     * - Returns credit account to factory\\n     * - Emits LiquidateCreditAccount event\\n     *\\n     * More info: https://dev.gearbox.fi/developers/credit/credit_manager#liquidate-credit-account\\n     *\\n     * @param borrower Borrower address\\n     * @param to Address to transfer all assets from credit account\\n     * @param force If true, use transfer function for transferring tokens instead of safeTransfer\\n     */\\n    function liquidateCreditAccount(\\n        address borrower,\\n        address to,\\n        bool force\\n    ) external;\\n\\n    /// @dev Repays credit account\\n    /// More info: https://dev.gearbox.fi/developers/credit/credit_manager#repay-credit-account\\n    ///\\n    /// @param to Address to send credit account assets\\n    function repayCreditAccount(address to) external override;\\n\\n    /// @dev Repays credit account with ETH. Restricted to be called by WETH Gateway only\\n    ///\\n    /// @param borrower Address of borrower\\n    /// @param to Address to send credit account assets\\n    function repayCreditAccountETH(address borrower, address to)\\n        external\\n        returns (uint256);\\n\\n    /// @dev Increases borrowed amount by transferring additional funds from\\n    /// the pool if after that HealthFactor > minHealth\\n    /// More info: https://dev.gearbox.fi/developers/credit/credit_manager#increase-borrowed-amount\\n    ///\\n    /// @param amount Amount to increase borrowed amount\\n    function increaseBorrowedAmount(uint256 amount) external override;\\n\\n    /// @dev Adds collateral to borrower's credit account\\n    /// @param onBehalfOf Address of borrower to add funds\\n    /// @param token Token address\\n    /// @param amount Amount to add\\n    function addCollateral(\\n        address onBehalfOf,\\n        address token,\\n        uint256 amount\\n    ) external override;\\n\\n    /// @dev Returns true if the borrower has opened a credit account\\n    /// @param borrower Borrower account\\n    function hasOpenedCreditAccount(address borrower)\\n        external\\n        view\\n        override\\n        returns (bool);\\n\\n    /// @dev Calculates Repay amount = borrow amount + interest accrued + fee\\n    ///\\n    /// More info: https://dev.gearbox.fi/developers/credit/economy#repay\\n    ///           https://dev.gearbox.fi/developers/credit/economy#liquidate\\n    ///\\n    /// @param borrower Borrower address\\n    /// @param isLiquidated True if calculated repay amount for liquidator\\n    function calcRepayAmount(address borrower, bool isLiquidated)\\n        external\\n        view\\n        override\\n        returns (uint256);\\n\\n    /// @dev Returns minimal amount for open credit account\\n    function minAmount() external view returns (uint256);\\n\\n    /// @dev Returns maximum amount for open credit account\\n    function maxAmount() external view returns (uint256);\\n\\n    /// @dev Returns maximum leveraged factor allowed for this pool\\n    function maxLeverageFactor() external view returns (uint256);\\n\\n    /// @dev Returns underlying token address\\n    function underlyingToken() external view returns (address);\\n\\n    /// @dev Returns address of connected pool\\n    function poolService() external view returns (address);\\n\\n    /// @dev Returns address of CreditFilter\\n    function creditFilter() external view returns (ICreditFilter);\\n\\n    /// @dev Returns address of CreditFilter\\n    function creditAccounts(address borrower) external view returns (address);\\n\\n    /// @dev Executes filtered order on credit account which is connected with particular borrowers\\n    /// @param borrower Borrower address\\n    /// @param target Target smart-contract\\n    /// @param data Call data for call\\n    function executeOrder(\\n        address borrower,\\n        address target,\\n        bytes memory data\\n    ) external returns (bytes memory);\\n\\n    /// @dev Approves token for msg.sender's credit account\\n    function approve(address targetContract, address token) external;\\n\\n    /// @dev Approve tokens for credit accounts. Restricted for adapters only\\n    function provideCreditAccountAllowance(\\n        address creditAccount,\\n        address toContract,\\n        address token\\n    ) external;\\n\\n    function transferAccountOwnership(address newOwner) external;\\n\\n    /// @dev Returns address of borrower's credit account and reverts of borrower has no one.\\n    /// @param borrower Borrower address\\n    function getCreditAccountOrRevert(address borrower)\\n        external\\n        view\\n        override\\n        returns (address);\\n\\n//    function feeSuccess() external view returns (uint256);\\n\\n    function feeInterest() external view returns (uint256);\\n\\n    function feeLiquidation() external view returns (uint256);\\n\\n    function liquidationDiscount() external view returns (uint256);\\n\\n    function minHealthFactor() external view returns (uint256);\\n\\n    function defaultSwapContract() external view override returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/integrations/yearn/IYVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.7.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IYVault is IERC20 {\\n    function token() external view returns (address);\\n\\n    function deposit() external returns (uint256);\\n\\n    function deposit(uint256 _amount) external returns (uint256);\\n\\n    function deposit(uint256 _amount, address recipient)\\n        external\\n        returns (uint256);\\n\\n    function withdraw() external returns (uint256);\\n\\n    function withdraw(uint256 maxShares) external returns (uint256);\\n\\n    function withdraw(uint256 maxShares, address recipient)\\n        external\\n        returns (uint256);\\n\\n    function withdraw(\\n        uint256 maxShares,\\n        address recipient,\\n        uint256 maxLoss\\n    ) external returns (uint256);\\n\\n    function pricePerShare() external view  returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/credit/CreditAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {ICreditAccount} from \\\"../interfaces/ICreditAccount.sol\\\";\\nimport {Constants} from \\\"../libraries/helpers/Constants.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\n\\n\\n/// @title Credit Account\\n/// @notice Implements generic credit account logic:\\n///   - Keeps token balances\\n///   - Stores general parameters: borrowed amount, cumulative index at open and block when it was initialized\\n///   - Approves tokens for 3rd party contracts\\n///   - Transfers assets\\n///   - Execute financial orders\\n///\\n///  More: https://dev.gearbox.fi/developers/credit/credit_account\\ncontract CreditAccount is ICreditAccount, Initializable {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    address public override factory;\\n\\n    // Keeps address of current credit Manager\\n    address public override creditManager;\\n\\n    // Amount borrowed to this account\\n    uint256 public override borrowedAmount;\\n\\n    // Cumulative index at credit account opening\\n    uint256 public override cumulativeIndexAtOpen;\\n\\n    // Block number when it was initialised last time\\n    uint256 public override since;\\n\\n    // Contract version\\n    uint constant public version = 1;\\n\\n    /// @dev Restricts operation for current credit manager only\\n    modifier creditManagerOnly {\\n        require(msg.sender == creditManager, Errors.CA_CONNECTED_CREDIT_MANAGER_ONLY);\\n        _;\\n    }\\n\\n    /// @dev Initialise used instead of constructor cause we use contract cloning\\n    function initialize() external override initializer {\\n        factory = msg.sender;\\n    }\\n\\n    /// @dev Connects credit account to credit account address. Restricted to account factory (owner) only\\n    /// @param _creditManager Credit manager address\\n    function connectTo(\\n        address _creditManager,\\n        uint256 _borrowedAmount,\\n        uint256 _cumulativeIndexAtOpen\\n    ) external override {\\n        require(msg.sender == factory, Errors.CA_FACTORY_ONLY);\\n        creditManager = _creditManager; // T:[CA-7]\\n        borrowedAmount = _borrowedAmount; // T:[CA-3,7]\\n        cumulativeIndexAtOpen = _cumulativeIndexAtOpen; //  T:[CA-3,7]\\n        since = block.number; // T:[CA-7]\\n    }\\n\\n    /// @dev Updates borrowed amount. Restricted for current credit manager only\\n    /// @param _borrowedAmount Amount which pool lent to credit account\\n    function updateParameters(uint256 _borrowedAmount, uint256 _cumulativeIndexAtOpen)\\n        external\\n        override\\n        creditManagerOnly // T:[CA-2]\\n    {\\n        borrowedAmount = _borrowedAmount; // T:[CA-4]\\n        cumulativeIndexAtOpen = _cumulativeIndexAtOpen;\\n    }\\n\\n    /// @dev Approves token for 3rd party contract. Restricted for current credit manager only\\n    /// @param token ERC20 token for allowance\\n    /// @param swapContract Swap contract address\\n    function approveToken(address token, address swapContract)\\n        external\\n        override\\n        creditManagerOnly // T:[CA-2]\\n    {\\n        IERC20(token).safeApprove(swapContract, 0); // T:[CA-5]\\n        IERC20(token).safeApprove(swapContract, Constants.MAX_INT); // T:[CA-5]\\n    }\\n\\n    /// @dev Removes allowance token for 3rd party contract. Restricted for factory only\\n    /// @param token ERC20 token for allowance\\n    /// @param targetContract Swap contract address\\n    function cancelAllowance(address token, address targetContract)\\n        external\\n        override\\n    {\\n        require(msg.sender == factory, Errors.CA_FACTORY_ONLY);\\n        IERC20(token).safeApprove(targetContract, 0);\\n    }\\n\\n    /// @dev Transfers tokens from credit account to provided address. Restricted for current credit manager only\\n    /// @param token Token which should be transferred from credit account\\n    /// @param to Address of recipient\\n    /// @param amount Amount to be transferred\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    )\\n        external\\n        override\\n        creditManagerOnly // T:[CA-2]\\n    {\\n        IERC20(token).safeTransfer(to, amount); // T:[CA-6]\\n    }\\n\\n    /// @dev Executes financial order on 3rd party service. Restricted for current credit manager only\\n    /// @param destination Contract address which should be called\\n    /// @param data Call data which should be sent\\n    function execute(address destination, bytes memory data)\\n        external\\n        override\\n        creditManagerOnly\\n        returns (bytes memory)\\n    {\\n        return destination.functionCall(data); // T: [CM-48]\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/credit/CreditManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\npragma abicoder v2;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {PercentageMath} from \\\"../libraries/math/PercentageMath.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport {IAccountFactory} from \\\"../interfaces/IAccountFactory.sol\\\";\\nimport {ICreditAccount} from \\\"../interfaces/ICreditAccount.sol\\\";\\nimport {IPoolService} from \\\"../interfaces/IPoolService.sol\\\";\\nimport {IWETHGateway} from \\\"../interfaces/IWETHGateway.sol\\\";\\nimport {ICreditManager} from \\\"../interfaces/ICreditManager.sol\\\";\\nimport {ICreditFilter} from \\\"../interfaces/ICreditFilter.sol\\\";\\nimport {AddressProvider} from \\\"../core/AddressProvider.sol\\\";\\nimport {ACLTrait} from \\\"../core/ACLTrait.sol\\\";\\n\\nimport {Constants} from \\\"../libraries/helpers/Constants.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport {DataTypes} from \\\"../libraries/data/Types.sol\\\";\\n\\n\\n/// @title Credit Manager\\n/// @notice It encapsulates business logic for managing credit accounts\\n///\\n/// More info: https://dev.gearbox.fi/developers/credit/credit_manager\\n///\\n/// #define roughEq(uint256 a, uint256 b) bool =\\n///     a == b || a + 1 == b || a == b + 1;\\n///\\n/// #define borrowedPlusInterest(address creditAccount) uint =\\n///     let borrowedAmount, cumIndexAtOpen := getCreditAccountParameters(creditAccount) in\\n///     let curCumulativeIndex := IPoolService(poolService).calcLinearCumulative_RAY() in\\n///         borrowedAmount.mul(curCumulativeIndex).div(cumIndexAtOpen);\\ncontract CreditManager is ICreditManager, ACLTrait, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using PercentageMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    // Minimal amount for open credit account\\n    uint256 public override minAmount;\\n\\n    //  Maximum amount for open credit account\\n    uint256 public override maxAmount;\\n\\n    // Maximum leveraged factor allowed for this pool\\n    uint256 public override maxLeverageFactor;\\n\\n    // Minimal allowed Hf after increasing borrow amount\\n    uint256 public override minHealthFactor;\\n\\n    // Mapping between borrowers'/farmers' address and credit account\\n    mapping(address => address) public override creditAccounts;\\n\\n    // Account manager - provides credit accounts to pool\\n    IAccountFactory internal _accountFactory;\\n\\n    // Credit Manager filter\\n    ICreditFilter public override creditFilter;\\n\\n    // Underlying token address\\n    address public override underlyingToken;\\n\\n    // Address of connected pool\\n    address public override poolService;\\n\\n    // Address of WETH token\\n    address public wethAddress;\\n\\n    // Address of WETH Gateway\\n    address public wethGateway;\\n\\n    // Default swap contracts - uses for automatic close\\n    address public override defaultSwapContract;\\n\\n    uint256 public override feeInterest;\\n\\n    uint256 public override feeLiquidation;\\n\\n    uint256 public override liquidationDiscount;\\n\\n    // Contract version\\n    uint constant public version = 1;\\n\\n    //\\n    // MODIFIERS\\n    //\\n\\n    /// @dev Restricts actions for users with opened credit accounts only\\n    modifier allowedAdaptersOnly(address targetContract) {\\n        require(\\n            creditFilter.contractToAdapter(targetContract) == msg.sender,\\n            Errors.CM_TARGET_CONTRACT_iS_NOT_ALLOWED\\n        );\\n        _;\\n    }\\n\\n    /// @dev Constructor\\n    /// @param _addressProvider Address Repository for upgradable contract model\\n    /// @param _minAmount Minimal amount for open credit account\\n    /// @param _maxAmount Maximum amount for open credit account\\n    /// @param _maxLeverage Maximum allowed leverage factor\\n    /// @param _poolService Address of pool service\\n    /// @param _creditFilterAddress CreditFilter address. It should be finalised\\n    /// @param _defaultSwapContract Default IUniswapV2Router02 contract to change assets in case of closing account\\n    constructor(\\n        address _addressProvider,\\n        uint256 _minAmount,\\n        uint256 _maxAmount,\\n        uint256 _maxLeverage,\\n        address _poolService,\\n        address _creditFilterAddress,\\n        address _defaultSwapContract\\n    ) ACLTrait(_addressProvider) {\\n        require(\\n            _addressProvider != address(0) &&\\n                _poolService != address(0) &&\\n                _creditFilterAddress != address(0) &&\\n                _defaultSwapContract != address(0),\\n            Errors.ZERO_ADDRESS_IS_NOT_ALLOWED\\n        );\\n        AddressProvider addressProvider = AddressProvider(_addressProvider); // T:[CM-1]\\n        poolService = _poolService; // T:[CM-1]\\n        underlyingToken = IPoolService(_poolService).underlyingToken(); // T:[CM-1]\\n\\n        wethAddress = addressProvider.getWethToken(); // T:[CM-1]\\n        wethGateway = addressProvider.getWETHGateway(); // T:[CM-1]\\n        defaultSwapContract = _defaultSwapContract; // T:[CM-1]\\n        _accountFactory = IAccountFactory(addressProvider.getAccountFactory()); // T:[CM-1]\\n\\n        _setParams(\\n            _minAmount,\\n            _maxAmount,\\n            _maxLeverage,\\n            Constants.FEE_INTEREST,\\n            Constants.FEE_LIQUIDATION,\\n            Constants.LIQUIDATION_DISCOUNTED_SUM\\n        ); // T:[CM-1]\\n\\n        creditFilter = ICreditFilter(_creditFilterAddress); // T:[CM-1]\\n    }\\n\\n    //\\n    // CREDIT ACCOUNT MANAGEMENT\\n    //\\n\\n    /**\\n     * @dev Opens credit account and provides credit funds.\\n     * - Opens credit account (take it from account factory^1)\\n     * - Transfers trader /farmers initial funds to credit account\\n     * - Transfers borrowed leveraged amount from pool (= amount x leverageFactor) calling lendCreditAccount() on connected Pool contract.\\n     * - Emits OpenCreditAccount event\\n     * Function reverts if user has already opened position\\n     *\\n     * More info: https://dev.gearbox.fi/developers/credit/credit_manager#open-credit-account\\n     *\\n     * @param amount Borrowers own funds\\n     * @param onBehalfOf The address that we open credit account. Same as msg.sender if the user wants to open it for  his own wallet,\\n     *  or a different address if the beneficiary is a different wallet\\n     * @param leverageFactor Multiplier to borrowers own funds\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     *\\n     * #if_succeeds {:msg \\\"A credit account with the correct balance is opened.\\\"}\\n     *      let newAccount := creditAccounts[onBehalfOf] in\\n     *      newAccount != address(0) &&\\n     *          IERC20(underlyingToken).balanceOf(newAccount) >=\\n     *          amount.add(amount.mul(leverageFactor).div(Constants.LEVERAGE_DECIMALS));\\n     *\\n     * #if_succeeds {:msg \\\"Sender looses amount tokens.\\\" }\\n     *      IERC20(underlyingToken).balanceOf(msg.sender) == old(IERC20(underlyingToken).balanceOf(msg.sender)) - amount;\\n     *\\n     * #if_succeeds {:msg \\\"Pool provides correct leverage (amount x leverageFactor).\\\" }\\n     *      IERC20(underlyingToken).balanceOf(poolService) == old(IERC20(underlyingToken).balanceOf(poolService)) - amount.mul(leverageFactor).div(Constants.LEVERAGE_DECIMALS);\\n     *\\n     * #if_succeeds {:msg \\\"The new account is healthy.\\\"}\\n     *      creditFilter.calcCreditAccountHealthFactor(creditAccounts[onBehalfOf]) >= PercentageMath.PERCENTAGE_FACTOR;\\n     *\\n     * #if_succeeds {:msg \\\"The new account has balance <= 1 for all tokens other than the underlying token.\\\"}\\n     *     let newAccount := creditAccounts[onBehalfOf] in\\n     *         forall (uint i in 1...creditFilter.allowedTokensCount())\\n     *             IERC20(creditFilter.allowedTokens(i)).balanceOf(newAccount) <= 1;\\n     */\\n    function openCreditAccount(\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint256 leverageFactor,\\n        uint256 referralCode\\n    )\\n        external\\n        override\\n        whenNotPaused // T:[CM-39]\\n        nonReentrant\\n    {\\n        // Checks that amount is in limits\\n        require(\\n            amount >= minAmount &&\\n                amount <= maxAmount &&\\n                leverageFactor > 0 &&\\n                leverageFactor <= maxLeverageFactor,\\n            Errors.CM_INCORRECT_PARAMS\\n        ); // T:[CM-2]\\n\\n        // Checks that user \\\"onBehalfOf\\\" has no opened accounts\\n        //        require(\\n        //            !hasOpenedCreditAccount(onBehalfOf) && onBehalfOf != address(0),\\n        //            Errors.CM_ZERO_ADDRESS_OR_USER_HAVE_ALREADY_OPEN_CREDIT_ACCOUNT\\n        //        ); // T:[CM-3]\\n\\n        _checkAccountTransfer(onBehalfOf);\\n\\n        // borrowedAmount = amount * leverageFactor\\n        uint256 borrowedAmount = amount.mul(leverageFactor).div(\\n            Constants.LEVERAGE_DECIMALS\\n        ); // T:[CM-7]\\n\\n        // Get Reusable Credit account creditAccount\\n        address creditAccount = _accountFactory.takeCreditAccount(\\n            borrowedAmount,\\n            IPoolService(poolService).calcLinearCumulative_RAY()\\n        ); // T:[CM-5]\\n\\n        // Initializes enabled tokens for the account. Enabled tokens is a bit mask which\\n        // holds information which tokens were used by user\\n        creditFilter.initEnabledTokens(creditAccount); // T:[CM-5]\\n\\n        // Transfer pool tokens to new credit account\\n        IPoolService(poolService).lendCreditAccount(\\n            borrowedAmount,\\n            creditAccount\\n        ); // T:[CM-7]\\n\\n        // Transfer borrower own fund to credit account\\n        IERC20(underlyingToken).safeTransferFrom(\\n            msg.sender,\\n            creditAccount,\\n            amount\\n        ); // T:[CM-6]\\n\\n        // link credit account address with borrower address\\n        creditAccounts[onBehalfOf] = creditAccount; // T:[CM-5]\\n\\n        // emit new event\\n        emit OpenCreditAccount(\\n            msg.sender,\\n            onBehalfOf,\\n            creditAccount,\\n            amount,\\n            borrowedAmount,\\n            referralCode\\n        ); // T:[CM-8]\\n    }\\n\\n    /**\\n     * @dev Closes credit account\\n     * - Swaps all assets to underlying one using default swap protocol\\n     * - Pays borrowed amount + interest accrued + fees back to the pool by calling repayCreditAccount\\n     * - Transfers remaining funds to the trader / farmer\\n     * - Closes the credit account and return it to account factory\\n     * - Emits CloseCreditAccount event\\n     *\\n     * More info: https://dev.gearbox.fi/developers/credit/credit_manager#close-credit-account\\n     *\\n     * @param to Address to send remaining funds\\n     * @param paths Exchange type data which provides paths + amountMinOut\\n     *\\n     * #if_succeeds {:msg \\\"Can only be called by account holder\\\"} old(creditAccounts[msg.sender]) != address(0x0);\\n     * #if_succeeds {:msg \\\"Can only close healthy accounts\\\" } old(creditFilter.calcCreditAccountHealthFactor(creditAccounts[msg.sender])) > PercentageMath.PERCENTAGE_FACTOR;\\n     * #if_succeeds {:msg \\\"If this succeeded the pool gets paid at least borrowed + interest\\\"}\\n     *    let minAmountOwedToPool := old(borrowedPlusInterest(creditAccounts[msg.sender])) in\\n     *        IERC20(underlyingToken).balanceOf(poolService) >= old(IERC20(underlyingToken).balanceOf(poolService)).add(minAmountOwedToPool);\\n     */\\n    function closeCreditAccount(address to, DataTypes.Exchange[] calldata paths)\\n        external\\n        override\\n        whenNotPaused // T:[CM-39]\\n        nonReentrant\\n    {\\n        address creditAccount = getCreditAccountOrRevert(msg.sender); // T: [CM-9, 44]\\n\\n        // Converts all assets to underlying one. _convertAllAssetsToUnderlying is virtual\\n        _convertAllAssetsToUnderlying(creditAccount, paths); // T: [CM-44]\\n\\n        // total value equals underlying assets after converting all assets\\n        uint256 totalValue = IERC20(underlyingToken).balanceOf(creditAccount); // T: [CM-44]\\n\\n        (, uint256 remainingFunds) = _closeCreditAccountImpl(\\n            creditAccount,\\n            Constants.OPERATION_CLOSURE,\\n            totalValue,\\n            msg.sender,\\n            address(0),\\n            to\\n        ); // T: [CM-44]\\n\\n        emit CloseCreditAccount(msg.sender, to, remainingFunds); // T: [CM-44]\\n    }\\n\\n    /**\\n     * @dev Liquidates credit account\\n     * - Transfers discounted total credit account value from liquidators account\\n     * - Pays borrowed funds + interest + fees back to pool, than transfers remaining funds to credit account owner\\n     * - Transfer all assets from credit account to liquidator (\\\"to\\\") account\\n     * - Returns credit account to factory\\n     * - Emits LiquidateCreditAccount event\\n     *\\n     * More info: https://dev.gearbox.fi/developers/credit/credit_manager#liquidate-credit-account\\n     *\\n     * @param borrower Borrower address\\n     * @param to Address to transfer all assets from credit account\\n     *\\n     * #if_succeeds {:msg \\\"Can only be called by account holder\\\"} old(creditAccounts[msg.sender]) != address(0x0);\\n     * #if_succeeds {:msg \\\"Can only liquidate an un-healthy accounts\\\" } old(creditFilter.calcCreditAccountHealthFactor(creditAccounts[msg.sender])) < PercentageMath.PERCENTAGE_FACTOR;\\n     */\\n    function liquidateCreditAccount(\\n        address borrower,\\n        address to,\\n        bool force\\n    )\\n        external\\n        override\\n        whenNotPaused // T:[CM-39]\\n        nonReentrant\\n    {\\n        address creditAccount = getCreditAccountOrRevert(borrower); // T: [CM-9]\\n\\n        // transfers assets to \\\"to\\\" address and compute total value (tv) & threshold weighted value (twv)\\n        (uint256 totalValue, uint256 tvw) = _transferAssetsTo(\\n            creditAccount,\\n            to,\\n            force\\n        ); // T:[CM-13, 16, 17]\\n\\n        // Checks that current Hf < 1\\n        require(\\n            tvw <\\n                creditFilter\\n                .calcCreditAccountAccruedInterest(creditAccount)\\n                .mul(PercentageMath.PERCENTAGE_FACTOR),\\n            Errors.CM_CAN_LIQUIDATE_WITH_SUCH_HEALTH_FACTOR\\n        ); // T:[CM-13, 16, 17]\\n\\n        // Liquidate credit account\\n        (, uint256 remainingFunds) = _closeCreditAccountImpl(\\n            creditAccount,\\n            Constants.OPERATION_LIQUIDATION,\\n            totalValue,\\n            borrower,\\n            msg.sender,\\n            to\\n        ); // T:[CM-13]\\n\\n        emit LiquidateCreditAccount(borrower, msg.sender, remainingFunds); // T:[CM-13]\\n    }\\n\\n    /// @dev Repays credit account\\n    /// More info: https://dev.gearbox.fi/developers/credit/credit_manager#repay-credit-account\\n    ///\\n    /// @param to Address to send credit account assets\\n    /// #if_succeeds {:msg \\\"Can only be called by account holder\\\"} old(creditAccounts[msg.sender]) != address(0x0);\\n    /// #if_succeeds {:msg \\\"If this succeeded the pool gets paid at least borrowed + interest\\\"}\\n    ///     let minAmountOwedToPool := old(borrowedPlusInterest(creditAccounts[msg.sender])) in\\n    ///         IERC20(underlyingToken).balanceOf(poolService) >= old(IERC20(underlyingToken).balanceOf(poolService)).add(minAmountOwedToPool);\\n    function repayCreditAccount(address to)\\n        external\\n        override\\n        whenNotPaused // T:[CM-39]\\n        nonReentrant\\n    {\\n        _repayCreditAccountImpl(msg.sender, to); // T:[CM-17]\\n    }\\n\\n    /// @dev Repay credit account with ETH. Restricted to be called by WETH Gateway only\\n    ///\\n    /// @param borrower Address of borrower\\n    /// @param to Address to send credit account assets\\n    /// #if_succeeds {:msg \\\"If this succeeded the pool gets paid at least borrowed + interest\\\"}\\n    ///     let minAmountOwedToPool := old(borrowedPlusInterest(creditAccounts[borrower])) in\\n    ///         IERC20(underlyingToken).balanceOf(poolService) >= old(IERC20(underlyingToken).balanceOf(poolService)).add(minAmountOwedToPool);\\n    function repayCreditAccountETH(address borrower, address to)\\n        external\\n        override\\n        whenNotPaused // T:[CM-39]\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        // Checks that msg.sender is WETH Gateway\\n        require(msg.sender == wethGateway, Errors.CM_WETH_GATEWAY_ONLY); // T:[CM-38]\\n\\n        // Difference with usual Repay is that there is borrower in repay implementation call\\n        return _repayCreditAccountImpl(borrower, to); // T:[WG-11]\\n    }\\n\\n    /// @dev Implements logic for repay credit accounts\\n    ///\\n    /// @param borrower Borrower address\\n    /// @param to Address to transfer assets from credit account\\n    function _repayCreditAccountImpl(address borrower, address to)\\n        internal\\n        returns (uint256)\\n    {\\n        address creditAccount = getCreditAccountOrRevert(borrower);\\n        (uint256 totalValue, ) = _transferAssetsTo(creditAccount, to, false); // T:[CM-17, 23]\\n\\n        (uint256 amountToPool, ) = _closeCreditAccountImpl(\\n            creditAccount,\\n            Constants.OPERATION_REPAY,\\n            totalValue,\\n            borrower,\\n            borrower,\\n            to\\n        ); // T:[CM-17]\\n\\n        emit RepayCreditAccount(borrower, to); // T:[CM-18]\\n        return amountToPool;\\n    }\\n\\n    /// @dev Implementation for all closing account procedures\\n    /// #if_succeeds {:msg \\\"Credit account balances should be <= 1 for all allowed tokens after closing\\\"}\\n    ///     forall (uint i in 0...creditFilter.allowedTokensCount())\\n    ///         IERC20(creditFilter.allowedTokens(i)).balanceOf(creditAccount) <= 1;\\n    function _closeCreditAccountImpl(\\n        address creditAccount,\\n        uint8 operation,\\n        uint256 totalValue,\\n        address borrower,\\n        address liquidator,\\n        address to\\n    ) internal returns (uint256, uint256) {\\n        bool isLiquidated = operation == Constants.OPERATION_LIQUIDATION;\\n\\n        (\\n            uint256 borrowedAmount,\\n            uint256 amountToPool,\\n            uint256 remainingFunds,\\n            uint256 profit,\\n            uint256 loss\\n        ) = _calcClosePayments(creditAccount, totalValue, isLiquidated); // T:[CM-11, 15, 17]\\n\\n        if (operation == Constants.OPERATION_CLOSURE) {\\n            ICreditAccount(creditAccount).safeTransfer(\\n                underlyingToken,\\n                poolService,\\n                amountToPool\\n            ); // T:[CM-11]\\n\\n            // close operation with loss is not allowed\\n            require(remainingFunds > 0, Errors.CM_CANT_CLOSE_WITH_LOSS); // T:[CM-42]\\n\\n            // transfer remaining funds to borrower\\n            _safeTokenTransfer(\\n                creditAccount,\\n                underlyingToken,\\n                to,\\n                remainingFunds,\\n                false\\n            ); // T:[CM-11]\\n        }\\n        // LIQUIDATION\\n        else if (operation == Constants.OPERATION_LIQUIDATION) {\\n            // repay amount to pool\\n            IERC20(underlyingToken).safeTransferFrom(\\n                liquidator,\\n                poolService,\\n                amountToPool\\n            ); // T:[CM-14]\\n\\n            // transfer remaining funds to borrower\\n            if (remainingFunds > 0) {\\n                IERC20(underlyingToken).safeTransferFrom(\\n                    liquidator,\\n                    borrower,\\n                    remainingFunds\\n                ); //T:[CM-14]\\n            }\\n        }\\n        // REPAY\\n        else {\\n            // repay amount to pool\\n            IERC20(underlyingToken).safeTransferFrom(\\n                msg.sender, // msg.sender in case of WETH Gateway\\n                poolService,\\n                amountToPool\\n            ); // T:[CM-17]\\n        }\\n\\n        // Return creditAccount\\n        _accountFactory.returnCreditAccount(creditAccount); // T:[CM-21]\\n\\n        // Release memory\\n        delete creditAccounts[borrower]; // T:[CM-27]\\n\\n        // Transfer pool tokens to new credit account\\n        IPoolService(poolService).repayCreditAccount(\\n            borrowedAmount,\\n            profit,\\n            loss\\n        ); // T:[CM-11, 15]\\n\\n        return (amountToPool, remainingFunds); // T:[CM-11]\\n    }\\n\\n    /// @dev Collects data and call calc payments pure function during closure procedures\\n    /// @param creditAccount Credit account address\\n    /// @param totalValue Credit account total value\\n    /// @param isLiquidated True if calculations needed for liquidation\\n    function _calcClosePayments(\\n        address creditAccount,\\n        uint256 totalValue,\\n        bool isLiquidated\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 _borrowedAmount,\\n            uint256 amountToPool,\\n            uint256 remainingFunds,\\n            uint256 profit,\\n            uint256 loss\\n        )\\n    {\\n        // Gets credit account parameters\\n        (\\n            uint256 borrowedAmount,\\n            uint256 cumulativeIndexAtCreditAccountOpen_RAY\\n        ) = getCreditAccountParameters(creditAccount); // T:[CM-13]\\n\\n        return\\n            _calcClosePaymentsPure(\\n                totalValue,\\n                isLiquidated,\\n                borrowedAmount,\\n                cumulativeIndexAtCreditAccountOpen_RAY,\\n                IPoolService(poolService).calcLinearCumulative_RAY()\\n            );\\n    }\\n\\n    /// @dev Computes all close parameters based on data\\n    /// @param totalValue Credit account total value\\n    /// @param isLiquidated True if calculations needed for liquidation\\n    /// @param borrowedAmount Credit account borrow amount\\n    /// @param cumulativeIndexAtCreditAccountOpen_RAY Cumulative index at opening credit account in RAY format\\n    /// @param cumulativeIndexNow_RAY Current value of cumulative index in RAY format\\n    function _calcClosePaymentsPure(\\n        uint256 totalValue,\\n        bool isLiquidated,\\n        uint256 borrowedAmount,\\n        uint256 cumulativeIndexAtCreditAccountOpen_RAY,\\n        uint256 cumulativeIndexNow_RAY\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 _borrowedAmount,\\n            uint256 amountToPool,\\n            uint256 remainingFunds,\\n            uint256 profit,\\n            uint256 loss\\n        )\\n    {\\n        uint256 totalFunds = isLiquidated\\n            ? totalValue.mul(liquidationDiscount).div(\\n                PercentageMath.PERCENTAGE_FACTOR\\n            )\\n            : totalValue; // T:[CM-45]\\n\\n        _borrowedAmount = borrowedAmount; // T:[CM-45]\\n\\n        uint256 borrowedAmountWithInterest = borrowedAmount\\n        .mul(cumulativeIndexNow_RAY)\\n        .div(cumulativeIndexAtCreditAccountOpen_RAY); // T:[CM-45]\\n\\n        if (totalFunds < borrowedAmountWithInterest) {\\n            amountToPool = totalFunds.sub(1); // T:[CM-45]\\n            loss = borrowedAmountWithInterest.sub(amountToPool); // T:[CM-45]\\n        } else {\\n            amountToPool = isLiquidated\\n                ? totalFunds.percentMul(feeLiquidation).add(\\n                    borrowedAmountWithInterest\\n                )\\n                : borrowedAmountWithInterest.add(\\n                    borrowedAmountWithInterest.sub(borrowedAmount).percentMul(\\n                        feeInterest\\n                    )\\n                ); // T:[CM-45]\\n\\n            if (totalFunds > amountToPool) {\\n                remainingFunds = totalFunds.sub(amountToPool).sub(1); // T:[CM-45]\\n            } else {\\n                amountToPool = totalFunds.sub(1); // T:[CM-45]\\n            }\\n\\n            profit = amountToPool.sub(borrowedAmountWithInterest); // T:[CM-45]\\n        }\\n    }\\n\\n    /// @dev Transfers all assets from borrower credit account to \\\"to\\\" account and converts WETH => ETH if applicable\\n    /// @param creditAccount  Credit account address\\n    /// @param to Address to transfer all assets to\\n    function _transferAssetsTo(\\n        address creditAccount,\\n        address to,\\n        bool force\\n    ) internal returns (uint256 totalValue, uint256 totalWeightedValue) {\\n        uint256 tokenMask;\\n        uint256 enabledTokens = creditFilter.enabledTokens(creditAccount);\\n        require(to != address(0), Errors.ZERO_ADDRESS_IS_NOT_ALLOWED);\\n\\n        for (uint256 i = 0; i < creditFilter.allowedTokensCount(); i++) {\\n            tokenMask = 1 << i;\\n            if (enabledTokens & tokenMask > 0) {\\n                (\\n                    address token,\\n                    uint256 amount,\\n                    uint256 tv,\\n                    uint256 tvw\\n                ) = creditFilter.getCreditAccountTokenById(creditAccount, i); // T:[CM-14, 17, 22, 23]\\n                if (amount > 1) {\\n                    if (\\n                        _safeTokenTransfer(\\n                            creditAccount,\\n                            token,\\n                            to,\\n                            amount.sub(1), // Michael Egorov gas efficiency trick\\n                            force\\n                        )\\n                    ) {\\n                        totalValue = totalValue.add(tv); // T:[CM-14, 17, 22, 23]\\n                        totalWeightedValue = totalWeightedValue.add(tvw); // T:[CM-14, 17, 22, 23]\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Transfers token to particular address from credit account and converts WETH => ETH if applicable\\n    /// @param creditAccount Address of credit account\\n    /// @param token Token address\\n    /// @param to Address to transfer asset\\n    /// @param amount Amount to be transferred\\n    /// @param force If true it will skip reverts of safeTransfer function. Used for force liquidation if there is\\n    /// a blocked token on creditAccount\\n    /// @return true if transfer were successful otherwise false\\n    function _safeTokenTransfer(\\n        address creditAccount,\\n        address token,\\n        address to,\\n        uint256 amount,\\n        bool force\\n    ) internal returns (bool) {\\n        if (token != wethAddress) {\\n            try\\n                ICreditAccount(creditAccount).safeTransfer(token, to, amount) // T:[CM-14, 17]\\n            {} catch {\\n                require(force, Errors.CM_TRANSFER_FAILED); // T:[CM-50]\\n                return false;\\n            }\\n        } else {\\n            ICreditAccount(creditAccount).safeTransfer(\\n                token,\\n                wethGateway,\\n                amount\\n            ); // T:[CM-22, 23]\\n            IWETHGateway(wethGateway).unwrapWETH(to, amount); // T:[CM-22, 23]\\n        }\\n        return true;\\n    }\\n\\n    /// @dev Increases borrowed amount by transferring additional funds from\\n    /// the pool if after that HealthFactor > minHealth\\n    /// More info: https://dev.gearbox.fi/developers/credit/credit_manager#increase-borrowed-amount\\n    ///\\n    /// @param amount Amount to increase borrowed amount\\n    function increaseBorrowedAmount(uint256 amount)\\n        external\\n        override\\n        whenNotPaused // T:[CM-39]\\n        nonReentrant\\n    {\\n        address creditAccount = getCreditAccountOrRevert(msg.sender); // T: [CM-9, 30]\\n\\n        (\\n            uint256 borrowedAmount,\\n            uint256 cumulativeIndexAtOpen\\n        ) = getCreditAccountParameters(creditAccount); // T:[CM-30]\\n\\n        //\\n        uint256 newBorrowedAmount = borrowedAmount.add(amount);\\n        uint256 newCumulativeIndex = IPoolService(poolService)\\n        .calcCumulativeIndexAtBorrowMore(\\n            borrowedAmount,\\n            amount,\\n            cumulativeIndexAtOpen\\n        ); // T:[CM-30]\\n\\n        require(\\n            newBorrowedAmount.mul(Constants.LEVERAGE_DECIMALS) <\\n                maxAmount.mul(maxLeverageFactor),\\n            Errors.CM_INCORRECT_AMOUNT\\n        ); // T:[CM-51]\\n\\n        //\\n        // Increase _totalBorrowed, it used to compute forecasted interest\\n        IPoolService(poolService).lendCreditAccount(amount, creditAccount); // T:[CM-29]\\n        //\\n        // Set parameters for new credit account\\n        ICreditAccount(creditAccount).updateParameters(\\n            newBorrowedAmount,\\n            newCumulativeIndex\\n        ); // T:[CM-30]\\n\\n        //\\n        creditFilter.revertIfCantIncreaseBorrowing(\\n            creditAccount,\\n            minHealthFactor\\n        ); // T:[CM-28]\\n\\n        emit IncreaseBorrowedAmount(msg.sender, amount); // T:[CM-29]\\n    }\\n\\n    /// @dev Adds collateral to borrower's credit account\\n    /// @param onBehalfOf Address of borrower to add funds\\n    /// @param token Token address\\n    /// @param amount Amount to add\\n    function addCollateral(\\n        address onBehalfOf,\\n        address token,\\n        uint256 amount\\n    )\\n        external\\n        override\\n        whenNotPaused // T:[CM-39]\\n        nonReentrant\\n    {\\n        address creditAccount = getCreditAccountOrRevert(onBehalfOf); // T: [CM-9]\\n        creditFilter.checkAndEnableToken(creditAccount, token); // T:[CM-48]\\n        IERC20(token).safeTransferFrom(msg.sender, creditAccount, amount); // T:[CM-48]\\n        emit AddCollateral(onBehalfOf, token, amount); // T: [CM-48]\\n    }\\n\\n    /// @dev Sets fees. Restricted for configurator role only\\n    /// @param _minAmount Minimum amount to open account\\n    /// @param _maxAmount Maximum amount to open account\\n    /// @param _maxLeverageFactor Maximum leverage factor\\n    /// @param _feeInterest Interest fee multiplier\\n    /// @param _feeLiquidation Liquidation fee multiplier (for totalValue)\\n    /// @param _liquidationDiscount Liquidation premium multiplier (= PERCENTAGE_FACTOR - premium)\\n    function setParams(\\n        uint256 _minAmount,\\n        uint256 _maxAmount,\\n        uint256 _maxLeverageFactor,\\n        uint256 _feeInterest,\\n        uint256 _feeLiquidation,\\n        uint256 _liquidationDiscount\\n    )\\n        public\\n        configuratorOnly // T:[CM-36]\\n    {\\n        _setParams(\\n            _minAmount,\\n            _maxAmount,\\n            _maxLeverageFactor,\\n            _feeInterest,\\n            _feeLiquidation,\\n            _liquidationDiscount\\n        );\\n    }\\n\\n    function _setParams(\\n        uint256 _minAmount,\\n        uint256 _maxAmount,\\n        uint256 _maxLeverageFactor,\\n        uint256 _feeInterest,\\n        uint256 _feeLiquidation,\\n        uint256 _liquidationDiscount\\n    ) internal {\\n        require(\\n            _minAmount <= _maxAmount && _maxLeverageFactor > 0,\\n            Errors.CM_INCORRECT_PARAMS\\n        ); // T:[CM-34]\\n\\n        minAmount = _minAmount; // T:[CM-32]\\n        maxAmount = _maxAmount; // T:[CM-32]\\n\\n        maxLeverageFactor = _maxLeverageFactor;\\n\\n        feeInterest = _feeInterest; // T:[CM-37]\\n        feeLiquidation = _feeLiquidation; // T:[CM-37]\\n        liquidationDiscount = _liquidationDiscount; // T:[CM-37]\\n\\n        // Compute minHealthFactor: https://dev.gearbox.fi/developers/credit/credit_manager#increase-borrow-amount\\n        // LT_U = liquidationDiscount - feeLiquidation\\n        minHealthFactor = liquidationDiscount\\n        .sub(feeLiquidation)\\n        .mul(maxLeverageFactor.add(Constants.LEVERAGE_DECIMALS))\\n        .div(maxLeverageFactor); // T:[CM-41]\\n\\n        if (address(creditFilter) != address(0)) {\\n            creditFilter.updateUnderlyingTokenLiquidationThreshold(); // T:[CM-49]\\n        }\\n\\n        emit NewParameters(\\n            minAmount,\\n            maxAmount,\\n            maxLeverageFactor,\\n            feeInterest,\\n            feeLiquidation,\\n            liquidationDiscount\\n        ); // T:[CM-37]\\n    }\\n\\n    /// @dev Approves credit account for 3rd party contract\\n    /// @param targetContract Contract to check allowance\\n    /// @param token Token address of contract\\n    function approve(address targetContract, address token)\\n        external\\n        override\\n        whenNotPaused // T:[CM-39]\\n        nonReentrant\\n    {\\n        address creditAccount = getCreditAccountOrRevert(msg.sender);\\n\\n        // Checks that targetContract is allowed - it has non-zero address adapter\\n        require(\\n            creditFilter.contractToAdapter(targetContract) != address(0),\\n            Errors.CM_TARGET_CONTRACT_iS_NOT_ALLOWED\\n        );\\n\\n        creditFilter.revertIfTokenNotAllowed(token); // ToDo: add test\\n        _provideCreditAccountAllowance(creditAccount, targetContract, token);\\n    }\\n\\n    /// @dev Approve tokens for credit accounts. Restricted for adapters only\\n    /// @param creditAccount Credit account address\\n    /// @param targetContract Contract to check allowance\\n    /// @param token Token address of contract\\n    function provideCreditAccountAllowance(\\n        address creditAccount,\\n        address targetContract,\\n        address token\\n    )\\n        external\\n        override\\n        allowedAdaptersOnly(targetContract) // T:[CM-46]\\n        whenNotPaused // T:[CM-39]\\n        nonReentrant\\n    {\\n        _provideCreditAccountAllowance(creditAccount, targetContract, token); // T:[CM-35]\\n    }\\n\\n    /// @dev Checks that credit account has enough allowance for operation by comparing existing one with x10 times more than needed\\n    /// @param creditAccount Credit account address\\n    /// @param toContract Contract to check allowance\\n    /// @param token Token address of contract\\n    function _provideCreditAccountAllowance(\\n        address creditAccount,\\n        address toContract,\\n        address token\\n    ) internal {\\n        // Get 10x reserve in allowance\\n        if (\\n            IERC20(token).allowance(creditAccount, toContract) <\\n            Constants.MAX_INT_4\\n        ) {\\n            ICreditAccount(creditAccount).approveToken(token, toContract); // T:[CM-35]\\n        }\\n    }\\n\\n    /// @dev Converts all assets to underlying one using uniswap V2 protocol\\n    /// @param creditAccount Credit Account address\\n    /// @param paths Exchange type data which provides paths + amountMinOut\\n    function _convertAllAssetsToUnderlying(\\n        address creditAccount,\\n        DataTypes.Exchange[] calldata paths\\n    ) internal {\\n        uint256 tokenMask;\\n        uint256 enabledTokens = creditFilter.enabledTokens(creditAccount); // T: [CM-44]\\n\\n        require(\\n            paths.length == creditFilter.allowedTokensCount(),\\n            Errors.INCORRECT_PATH_LENGTH\\n        ); // ToDo: check\\n\\n        for (uint256 i = 1; i < paths.length; i++) {\\n            tokenMask = 1 << i;\\n            if (enabledTokens & tokenMask > 0) {\\n                (address tokenAddr, uint256 amount, , ) = creditFilter\\n                .getCreditAccountTokenById(creditAccount, i); // T: [CM-44]\\n\\n                if (amount > 1) {\\n                    _provideCreditAccountAllowance(\\n                        creditAccount,\\n                        defaultSwapContract,\\n                        tokenAddr\\n                    ); // T: [CM-44]\\n\\n                    address[] memory currentPath = paths[i].path;\\n                    currentPath[0] = tokenAddr;\\n                    currentPath[paths[i].path.length - 1] = underlyingToken;\\n\\n                    bytes memory data = abi.encodeWithSelector(\\n                        bytes4(0x38ed1739), // \\\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\\\",\\n                        amount.sub(1),\\n                        paths[i].amountOutMin, // T: [CM-45]\\n                        currentPath,\\n                        creditAccount,\\n                        block.timestamp\\n                    ); // T: [CM-44]\\n\\n                    ICreditAccount(creditAccount).execute(\\n                        defaultSwapContract,\\n                        data\\n                    ); // T: [CM-44]\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Executes filtered order on credit account which is connected with particular borrower\\n    /// @param borrower Borrower address\\n    /// @param target Target smart-contract\\n    /// @param data Call data for call\\n    function executeOrder(\\n        address borrower,\\n        address target,\\n        bytes memory data\\n    )\\n        external\\n        override\\n        allowedAdaptersOnly(target) // T:[CM-46]\\n        whenNotPaused // T:[CM-39]\\n        nonReentrant\\n        returns (bytes memory)\\n    {\\n        address creditAccount = getCreditAccountOrRevert(borrower); // T:[CM-9]\\n        emit ExecuteOrder(borrower, target);\\n        return ICreditAccount(creditAccount).execute(target, data); // : [CM-47]\\n    }\\n\\n    //\\n    // GETTERS\\n    //\\n\\n    /// @dev Returns true if the borrower has opened a credit account\\n    /// @param borrower Borrower account\\n    function hasOpenedCreditAccount(address borrower)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return creditAccounts[borrower] != address(0); // T:[CM-26]\\n    }\\n\\n    /// @dev Returns address of borrower's credit account and reverts of borrower has no one.\\n    /// @param borrower Borrower address\\n    function getCreditAccountOrRevert(address borrower)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        address result = creditAccounts[borrower]; // T: [CM-9]\\n        require(result != address(0), Errors.CM_NO_OPEN_ACCOUNT); // T: [CM-9]\\n        return result;\\n    }\\n\\n    /// @dev Calculates repay / liquidation amount\\n    /// repay amount = borrow amount + interest accrued + fee amount\\n    ///\\n    /// More info: https://dev.gearbox.fi/developers/credit/economy#repay\\n    /// https://dev.gearbox.fi/developers/credit/economy#liquidate\\n    /// @param borrower Borrower address\\n    /// @param isLiquidated True if calculated repay amount for liquidator\\n    function calcRepayAmount(address borrower, bool isLiquidated)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        address creditAccount = getCreditAccountOrRevert(borrower);\\n        uint256 totalValue = creditFilter.calcTotalValue(creditAccount);\\n\\n        (\\n            ,\\n            uint256 amountToPool,\\n            uint256 remainingFunds,\\n            ,\\n\\n        ) = _calcClosePayments(creditAccount, totalValue, isLiquidated); // T:[CM-14, 17, 31]\\n\\n        return isLiquidated ? amountToPool.add(remainingFunds) : amountToPool; // T:[CM-14, 17, 31]\\n    }\\n\\n    /// @dev Gets credit account generic parameters\\n    /// @param creditAccount Credit account address\\n    /// @return borrowedAmount Amount which pool lent to credit account\\n    /// @return cumulativeIndexAtOpen Cumulative index at open. Used for interest calculation\\n    function getCreditAccountParameters(address creditAccount)\\n        internal\\n        view\\n        returns (uint256 borrowedAmount, uint256 cumulativeIndexAtOpen)\\n    {\\n        borrowedAmount = ICreditAccount(creditAccount).borrowedAmount();\\n        cumulativeIndexAtOpen = ICreditAccount(creditAccount)\\n        .cumulativeIndexAtOpen();\\n    }\\n\\n    /// @dev Transfers account ownership to another account\\n    /// @param newOwner Address of new owner\\n    function transferAccountOwnership(address newOwner)\\n        external\\n        override\\n        whenNotPaused // T: [CM-39]\\n        nonReentrant\\n    {\\n        address creditAccount = getCreditAccountOrRevert(msg.sender); // M:[LA-1,2,3,4,5,6,7,8] // T:[CM-52,53, 54]\\n        _checkAccountTransfer(newOwner);\\n        delete creditAccounts[msg.sender]; // T:[CM-54], M:[LA-1,2,3,4,5,6,7,8]\\n        creditAccounts[newOwner] = creditAccount; // T:[CM-54], M:[LA-1,2,3,4,5,6,7,8]\\n        emit TransferAccount(msg.sender, newOwner); // T:[CM-54]\\n    }\\n\\n    function _checkAccountTransfer(address newOwner) internal view {\\n        require(\\n            newOwner != address(0) && !hasOpenedCreditAccount(newOwner),\\n            Errors.CM_ZERO_ADDRESS_OR_USER_HAVE_ALREADY_OPEN_CREDIT_ACCOUNT\\n        ); // T:[CM-52,53]\\n        if (msg.sender != newOwner) {\\n            creditFilter.revertIfAccountTransferIsNotAllowed(\\n                msg.sender,\\n                newOwner\\n            ); // T:[54,55]\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/helpers/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\nimport {PercentageMath} from \\\"../math/PercentageMath.sol\\\";\\n\\nlibrary Constants {\\n    uint256 constant MAX_INT =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    // 25% of MAX_INT\\n    uint256 constant MAX_INT_4 =\\n        0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    // REWARD FOR LEAN DEPLOYMENT MINING\\n    uint256 constant ACCOUNT_CREATION_REWARD = 1e5;\\n    uint256 constant DEPLOYMENT_COST = 1e17;\\n\\n    // FEE = 10%\\n    uint256 constant FEE_INTEREST = 1000; // 10%\\n\\n    // FEE + LIQUIDATION_FEE 2%\\n    uint256 constant FEE_LIQUIDATION = 200;\\n\\n    // Liquidation premium 5%\\n    uint256 constant LIQUIDATION_DISCOUNTED_SUM = 9500;\\n\\n    // 100% - LIQUIDATION_FEE - LIQUIDATION_PREMIUM\\n    uint256 constant UNDERLYING_TOKEN_LIQUIDATION_THRESHOLD =\\n        LIQUIDATION_DISCOUNTED_SUM - FEE_LIQUIDATION;\\n\\n    // Seconds in a year\\n    uint256 constant SECONDS_PER_YEAR = 365 days;\\n    uint256 constant SECONDS_PER_ONE_AND_HALF_YEAR = SECONDS_PER_YEAR * 3 /2;\\n\\n    // 1e18\\n    uint256 constant RAY = 1e27;\\n    uint256 constant WAD = 1e18;\\n\\n    // OPERATIONS\\n    uint8 constant OPERATION_CLOSURE = 1;\\n    uint8 constant OPERATION_REPAY = 2;\\n    uint8 constant OPERATION_LIQUIDATION = 3;\\n\\n    // Decimals for leverage, so x4 = 4*LEVERAGE_DECIMALS for openCreditAccount function\\n    uint8 constant LEVERAGE_DECIMALS = 100;\\n\\n    // Maximum withdraw fee for pool in percentage math format. 100 = 1%\\n    uint8 constant MAX_WITHDRAW_FEE = 100;\\n\\n    uint256 constant CHI_THRESHOLD = 9950;\\n    uint256 constant HF_CHECK_INTERVAL_DEFAULT = 4;\\n\\n    uint256 constant NO_SWAP = 0;\\n    uint256 constant UNISWAP_V2 = 1;\\n    uint256 constant UNISWAP_V3 = 2;\\n    uint256 constant CURVE_V1 = 3;\\n    uint256 constant LP_YEARN = 4;\\n\\n    uint256 constant EXACT_INPUT = 1;\\n    uint256 constant EXACT_OUTPUT = 2;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/helpers/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\n\\n/// @title Errors library\\nlibrary Errors {\\n    //\\n    // COMMON\\n    //\\n\\n    string public constant ZERO_ADDRESS_IS_NOT_ALLOWED = \\\"Z0\\\";\\n    string public constant NOT_IMPLEMENTED = \\\"NI\\\";\\n    string public constant INCORRECT_PATH_LENGTH = \\\"PL\\\";\\n    string public constant INCORRECT_ARRAY_LENGTH = \\\"CR\\\";\\n    string public constant REGISTERED_CREDIT_ACCOUNT_MANAGERS_ONLY = \\\"CP\\\";\\n    string public constant REGISTERED_POOLS_ONLY = \\\"RP\\\";\\n    string public constant INCORRECT_PARAMETER = \\\"IP\\\";\\n\\n    //\\n    // MATH\\n    //\\n\\n    string public constant MATH_MULTIPLICATION_OVERFLOW = \\\"M1\\\";\\n    string public constant MATH_ADDITION_OVERFLOW = \\\"M2\\\";\\n    string public constant MATH_DIVISION_BY_ZERO = \\\"M3\\\";\\n\\n    //\\n    // POOL\\n    //\\n\\n    string public constant POOL_CONNECTED_CREDIT_MANAGERS_ONLY = \\\"PS0\\\";\\n    string public constant POOL_INCOMPATIBLE_CREDIT_ACCOUNT_MANAGER = \\\"PS1\\\";\\n    string public constant POOL_MORE_THAN_EXPECTED_LIQUIDITY_LIMIT = \\\"PS2\\\";\\n    string public constant POOL_INCORRECT_WITHDRAW_FEE = \\\"PS3\\\";\\n    string public constant POOL_CANT_ADD_CREDIT_MANAGER_TWICE = \\\"PS4\\\";\\n\\n    //\\n    // CREDIT MANAGER\\n    //\\n\\n    string public constant CM_NO_OPEN_ACCOUNT = \\\"CM1\\\";\\n    string\\n        public constant CM_ZERO_ADDRESS_OR_USER_HAVE_ALREADY_OPEN_CREDIT_ACCOUNT =\\n        \\\"CM2\\\";\\n\\n    string public constant CM_INCORRECT_AMOUNT = \\\"CM3\\\";\\n    string public constant CM_CAN_LIQUIDATE_WITH_SUCH_HEALTH_FACTOR = \\\"CM4\\\";\\n    string public constant CM_CAN_UPDATE_WITH_SUCH_HEALTH_FACTOR = \\\"CM5\\\";\\n    string public constant CM_WETH_GATEWAY_ONLY = \\\"CM6\\\";\\n    string public constant CM_INCORRECT_PARAMS = \\\"CM7\\\";\\n    string public constant CM_INCORRECT_FEES = \\\"CM8\\\";\\n    string public constant CM_MAX_LEVERAGE_IS_TOO_HIGH = \\\"CM9\\\";\\n    string public constant CM_CANT_CLOSE_WITH_LOSS = \\\"CMA\\\";\\n    string public constant CM_TARGET_CONTRACT_iS_NOT_ALLOWED = \\\"CMB\\\";\\n    string public constant CM_TRANSFER_FAILED = \\\"CMC\\\";\\n    string public constant CM_INCORRECT_NEW_OWNER = \\\"CME\\\";\\n\\n    //\\n    // ACCOUNT FACTORY\\n    //\\n\\n    string public constant AF_CANT_CLOSE_CREDIT_ACCOUNT_IN_THE_SAME_BLOCK =\\n        \\\"AF1\\\";\\n    string public constant AF_MINING_IS_FINISHED = \\\"AF2\\\";\\n    string public constant AF_CREDIT_ACCOUNT_NOT_IN_STOCK = \\\"AF3\\\";\\n    string public constant AF_EXTERNAL_ACCOUNTS_ARE_FORBIDDEN = \\\"AF4\\\";\\n\\n    //\\n    // ADDRESS PROVIDER\\n    //\\n\\n    string public constant AS_ADDRESS_NOT_FOUND = \\\"AP1\\\";\\n\\n    //\\n    // CONTRACTS REGISTER\\n    //\\n\\n    string public constant CR_POOL_ALREADY_ADDED = \\\"CR1\\\";\\n    string public constant CR_CREDIT_MANAGER_ALREADY_ADDED = \\\"CR2\\\";\\n\\n    //\\n    // CREDIT_FILTER\\n    //\\n\\n    string public constant CF_UNDERLYING_TOKEN_FILTER_CONFLICT = \\\"CF0\\\";\\n    string public constant CF_INCORRECT_LIQUIDATION_THRESHOLD = \\\"CF1\\\";\\n    string public constant CF_TOKEN_IS_NOT_ALLOWED = \\\"CF2\\\";\\n    string public constant CF_CREDIT_MANAGERS_ONLY = \\\"CF3\\\";\\n    string public constant CF_ADAPTERS_ONLY = \\\"CF4\\\";\\n    string public constant CF_OPERATION_LOW_HEALTH_FACTOR = \\\"CF5\\\";\\n    string public constant CF_TOO_MUCH_ALLOWED_TOKENS = \\\"CF6\\\";\\n    string public constant CF_INCORRECT_CHI_THRESHOLD = \\\"CF7\\\";\\n    string public constant CF_INCORRECT_FAST_CHECK = \\\"CF8\\\";\\n    string public constant CF_NON_TOKEN_CONTRACT = \\\"CF9\\\";\\n    string public constant CF_CONTRACT_IS_NOT_IN_ALLOWED_LIST = \\\"CFA\\\";\\n    string public constant CF_FAST_CHECK_NOT_COVERED_COLLATERAL_DROP = \\\"CFB\\\";\\n    string public constant CF_SOME_LIQUIDATION_THRESHOLD_MORE_THAN_NEW_ONE =\\n        \\\"CFC\\\";\\n    string public constant CF_ADAPTER_CAN_BE_USED_ONLY_ONCE = \\\"CFD\\\";\\n    string public constant CF_INCORRECT_PRICEFEED = \\\"CFE\\\";\\n    string public constant CF_TRANSFER_IS_NOT_ALLOWED = \\\"CFF\\\";\\n    string public constant CF_CREDIT_MANAGER_IS_ALREADY_SET = \\\"CFG\\\";\\n\\n    //\\n    // CREDIT ACCOUNT\\n    //\\n\\n    string public constant CA_CONNECTED_CREDIT_MANAGER_ONLY = \\\"CA1\\\";\\n    string public constant CA_FACTORY_ONLY = \\\"CA2\\\";\\n\\n    //\\n    // PRICE ORACLE\\n    //\\n\\n    string public constant PO_PRICE_FEED_DOESNT_EXIST = \\\"PO0\\\";\\n    string public constant PO_TOKENS_WITH_DECIMALS_MORE_18_ISNT_ALLOWED = \\\"PO1\\\";\\n    string public constant PO_AGGREGATOR_DECIMALS_SHOULD_BE_18 = \\\"PO2\\\";\\n\\n    //\\n    // ACL\\n    //\\n\\n    string public constant ACL_CALLER_NOT_PAUSABLE_ADMIN = \\\"ACL1\\\";\\n    string public constant ACL_CALLER_NOT_CONFIGURATOR = \\\"ACL2\\\";\\n\\n    //\\n    // WETH GATEWAY\\n    //\\n\\n    string public constant WG_DESTINATION_IS_NOT_WETH_COMPATIBLE = \\\"WG1\\\";\\n    string public constant WG_RECEIVE_IS_NOT_ALLOWED = \\\"WG2\\\";\\n    string public constant WG_NOT_ENOUGH_FUNDS = \\\"WG3\\\";\\n\\n    //\\n    // LEVERAGED ACTIONS\\n    //\\n\\n    string public constant LA_INCORRECT_VALUE = \\\"LA1\\\";\\n    string public constant LA_HAS_VALUE_WITH_TOKEN_TRANSFER = \\\"LA2\\\";\\n    string public constant LA_UNKNOWN_SWAP_INTERFACE = \\\"LA3\\\";\\n    string public constant LA_UNKNOWN_LP_INTERFACE = \\\"LA4\\\";\\n    string public constant LA_LOWER_THAN_AMOUNT_MIN = \\\"LA5\\\";\\n    string public constant LA_TOKEN_OUT_IS_NOT_COLLATERAL = \\\"LA6\\\";\\n\\n    //\\n    // YEARN PRICE FEED\\n    //\\n    string public constant YPF_PRICE_PER_SHARE_OUT_OF_RANGE = \\\"YP1\\\";\\n    string public constant YPF_INCORRECT_LIMITER_PARAMETERS = \\\"YP2\\\";\\n\\n    //\\n    // TOKEN DISTRIBUTOR\\n    //\\n    string public constant TD_WALLET_IS_ALREADY_CONNECTED_TO_VC = \\\"TD1\\\";\\n    string public constant TD_INCORRECT_WEIGHTS = \\\"TD2\\\";\\n    string public constant TD_NON_ZERO_BALANCE_AFTER_DISTRIBUTION = \\\"TD3\\\";\\n    string public constant TD_CONTRIBUTOR_IS_NOT_REGISTERED = \\\"TD4\\\";\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/app/IAppCreditManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\npragma abicoder v2;\\n\\nimport {DataTypes} from \\\"../../libraries/data/Types.sol\\\";\\n\\n\\n/// @title Optimised for front-end credit Manager interface\\n/// @notice It's optimised for light-weight abi\\ninterface IAppCreditManager {\\n    function openCreditAccount(\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint256 leverageFactor,\\n        uint256 referralCode\\n    ) external;\\n\\n    function closeCreditAccount(address to, DataTypes.Exchange[] calldata paths)\\n        external;\\n\\n    function repayCreditAccount(address to) external;\\n\\n    function increaseBorrowedAmount(uint256 amount) external;\\n\\n    function addCollateral(\\n        address onBehalfOf,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function calcRepayAmount(address borrower, bool isLiquidated)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getCreditAccountOrRevert(address borrower)\\n        external\\n        view\\n        returns (address);\\n\\n    function hasOpenedCreditAccount(address borrower)\\n        external\\n        view\\n        returns (bool);\\n\\n    function defaultSwapContract() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/data/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\n\\n/// @title DataType library\\n/// @notice Contains data types used in data compressor.\\nlibrary DataTypes {\\n    struct Exchange {\\n        address[] path;\\n        uint256 amountOutMin;\\n    }\\n\\n    struct TokenBalance {\\n        address token;\\n        uint256 balance;\\n        bool isAllowed;\\n    }\\n\\n    struct ContractAdapter {\\n        address allowedContract;\\n        address adapter;\\n    }\\n\\n    struct CreditAccountData {\\n        address addr;\\n        address borrower;\\n        bool inUse;\\n        address creditManager;\\n        address underlyingToken;\\n        uint256 borrowedAmountPlusInterest;\\n        uint256 totalValue;\\n        uint256 healthFactor;\\n        uint256 borrowRate;\\n        TokenBalance[] balances;\\n    }\\n\\n    struct CreditAccountDataExtended {\\n        address addr;\\n        address borrower;\\n        bool inUse;\\n        address creditManager;\\n        address underlyingToken;\\n        uint256 borrowedAmountPlusInterest;\\n        uint256 totalValue;\\n        uint256 healthFactor;\\n        uint256 borrowRate;\\n        TokenBalance[] balances;\\n        uint256 repayAmount;\\n        uint256 liquidationAmount;\\n        bool canBeClosed;\\n        uint256 borrowedAmount;\\n        uint256 cumulativeIndexAtOpen;\\n        uint256 since;\\n    }\\n\\n    struct CreditManagerData {\\n        address addr;\\n        bool hasAccount;\\n        address underlyingToken;\\n        bool isWETH;\\n        bool canBorrow;\\n        uint256 borrowRate;\\n        uint256 minAmount;\\n        uint256 maxAmount;\\n        uint256 maxLeverageFactor;\\n        uint256 availableLiquidity;\\n        address[] allowedTokens;\\n        ContractAdapter[] adapters;\\n    }\\n\\n    struct PoolData {\\n        address addr;\\n        bool isWETH;\\n        address underlyingToken;\\n        address dieselToken;\\n        uint256 linearCumulativeIndex;\\n        uint256 availableLiquidity;\\n        uint256 expectedLiquidity;\\n        uint256 expectedLiquidityLimit;\\n        uint256 totalBorrowed;\\n        uint256 depositAPY_RAY;\\n        uint256 borrowAPY_RAY;\\n        uint256 dieselRate_RAY;\\n        uint256 withdrawFee;\\n        uint256 cumulativeIndex_RAY;\\n        uint256 timestampLU;\\n    }\\n\\n    struct TokenInfo {\\n        address addr;\\n        string symbol;\\n        uint8 decimals;\\n    }\\n\\n    struct AddressProviderData {\\n        address contractRegister;\\n        address acl;\\n        address priceOracle;\\n        address traderAccountFactory;\\n        address dataCompressor;\\n        address farmingFactory;\\n        address accountMiner;\\n        address treasuryContract;\\n        address gearToken;\\n        address wethToken;\\n        address wethGateway;\\n    }\\n\\n    struct MiningApproval {\\n        address token;\\n        address swapContract;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICreditAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\n\\n/// @title Reusable Credit Account interface\\n/// @notice Implements general credit account:\\n///   - Keeps token balances\\n///   - Keeps token balances\\n///   - Stores general parameters: borrowed amount, cumulative index at open and block when it was initialized\\n///   - Approves tokens for 3rd party contracts\\n///   - Transfers assets\\n///   - Execute financial orders\\n///\\n///  More: https://dev.gearbox.fi/developers/creditManager/vanillacreditAccount\\n\\ninterface ICreditAccount {\\n    /// @dev Initializes clone contract\\n    function initialize() external;\\n\\n    /// @dev Connects credit account to credit manager\\n    /// @param _creditManager Credit manager address\\n    function connectTo(\\n        address _creditManager,\\n        uint256 _borrowedAmount,\\n        uint256 _cumulativeIndexAtOpen\\n    ) external;\\n\\n    //    /// @dev Set general credit account parameters. Restricted to credit managers only\\n    //    /// @param _borrowedAmount Amount which pool lent to credit account\\n    //    /// @param _cumulativeIndexAtOpen Cumulative index at open. Uses for interest calculation\\n    //    function setGenericParameters(\\n    //\\n    //    ) external;\\n\\n    /// @dev Updates borrowed amount. Restricted to credit managers only\\n    /// @param _borrowedAmount Amount which pool lent to credit account\\n    function updateParameters(\\n        uint256 _borrowedAmount,\\n        uint256 _cumulativeIndexAtOpen\\n    ) external;\\n\\n    /// @dev Approves particular token for swap contract\\n    /// @param token ERC20 token for allowance\\n    /// @param swapContract Swap contract address\\n    function approveToken(address token, address swapContract) external;\\n\\n    /// @dev Cancels allowance for particular contract\\n    /// @param token Address of token for allowance\\n    /// @param targetContract Address of contract to cancel allowance\\n    function cancelAllowance(address token, address targetContract) external;\\n\\n    /// Transfers tokens from credit account to provided address. Restricted for pool calls only\\n    /// @param token Token which should be tranferred from credit account\\n    /// @param to Address of recipient\\n    /// @param amount Amount to be transferred\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    /// @dev Returns borrowed amount\\n    function borrowedAmount() external view returns (uint256);\\n\\n    /// @dev Returns cumulative index at time of opening credit account\\n    function cumulativeIndexAtOpen() external view returns (uint256);\\n\\n    /// @dev Returns Block number when it was initialised last time\\n    function since() external view returns (uint256);\\n\\n    /// @dev Address of last connected credit manager\\n    function creditManager() external view returns (address);\\n\\n    /// @dev Address of last connected credit manager\\n    function factory() external view returns (address);\\n\\n    /// @dev Executed financial order on 3rd party service. Restricted for pool calls only\\n    /// @param destination Contract address which should be called\\n    /// @param data Call data which should be sent\\n    function execute(address destination, bytes memory data)\\n        external\\n        returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/math/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.7.4;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n    uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n    uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n    /**\\n     * @dev Executes a percentage multiplication\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return The percentage of value\\n     **/\\n    function percentMul(uint256 value, uint256 percentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (value == 0 || percentage == 0) {\\n            return 0; // T:[PM-1]\\n        }\\n\\n        require(\\n            value <= (type(uint256).max - HALF_PERCENT) / percentage,\\n            Errors.MATH_MULTIPLICATION_OVERFLOW\\n        ); // T:[PM-1]\\n\\n        return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR; // T:[PM-1]\\n    }\\n\\n    /**\\n     * @dev Executes a percentage division\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return The value divided the percentage\\n     **/\\n    function percentDiv(uint256 value, uint256 percentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(percentage != 0, Errors.MATH_DIVISION_BY_ZERO); // T:[PM-2]\\n        uint256 halfPercentage = percentage / 2; // T:[PM-2]\\n\\n        require(\\n            value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\\n            Errors.MATH_MULTIPLICATION_OVERFLOW\\n        ); // T:[PM-2]\\n\\n        return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAccountFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\npragma abicoder v2;\\n\\nimport {DataTypes} from \\\"../libraries/data/Types.sol\\\";\\n\\ninterface IAccountFactory {\\n    // emits if new account miner was changed\\n    event AccountMinerChanged(address indexed miner);\\n\\n    // emits each time when creditManager takes credit account\\n    event NewCreditAccount(address indexed account);\\n\\n    // emits each time when creditManager takes credit account\\n    event InitializeCreditAccount(\\n        address indexed account,\\n        address indexed creditManager\\n    );\\n\\n    // emits each time when pool returns credit account\\n    event ReturnCreditAccount(address indexed account);\\n\\n    // emits each time when DAO takes account from account factory forever\\n    event TakeForever(address indexed creditAccount, address indexed to);\\n\\n    /// @dev Provide new creditAccount to pool. Creates a new one, if needed\\n    /// @return Address of creditAccount\\n    function takeCreditAccount(\\n        uint256 _borrowedAmount,\\n        uint256 _cumulativeIndexAtOpen\\n    ) external returns (address);\\n\\n    /// @dev Takes credit account back and stay in tn the queue\\n    /// @param usedAccount Address of used credit account\\n    function returnCreditAccount(address usedAccount) external;\\n\\n    /// @dev Returns address of next available creditAccount\\n    function getNext(address creditAccount) external view returns (address);\\n\\n    /// @dev Returns head of list of unused credit accounts\\n    function head() external view returns (address);\\n\\n    /// @dev Returns tail of list of unused credit accounts\\n    function tail() external view returns (address);\\n\\n    /// @dev Returns quantity of unused credit accounts in the stock\\n    function countCreditAccountsInStock() external view returns (uint256);\\n\\n    /// @dev Returns credit account address by its id\\n    function creditAccounts(uint256 id) external view returns (address);\\n\\n    /// @dev Quantity of credit accounts\\n    function countCreditAccounts() external view returns (uint256);\\n\\n    //    function miningApprovals(uint i) external returns(DataTypes.MiningApproval calldata);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\nimport {IAppPoolService} from \\\"./app/IAppPoolService.sol\\\";\\n\\n\\n/// @title Pool Service Interface\\n/// @notice Implements business logic:\\n///   - Adding/removing pool liquidity\\n///   - Managing diesel tokens & diesel rates\\n///   - Lending/repaying funds to credit Manager\\n/// More: https://dev.gearbox.fi/developers/pool/abstractpoolservice\\ninterface IPoolService is IAppPoolService {\\n    // Emits each time when LP adds liquidity to the pool\\n    event AddLiquidity(\\n        address indexed sender,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint256 referralCode\\n    );\\n\\n    // Emits each time when LP removes liquidity to the pool\\n    event RemoveLiquidity(\\n        address indexed sender,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    // Emits each time when Credit Manager borrows money from pool\\n    event Borrow(\\n        address indexed creditManager,\\n        address indexed creditAccount,\\n        uint256 amount\\n    );\\n\\n    // Emits each time when Credit Manager repays money from pool\\n    event Repay(\\n        address indexed creditManager,\\n        uint256 borrowedAmount,\\n        uint256 profit,\\n        uint256 loss\\n    );\\n\\n    // Emits each time when Interest Rate model was changed\\n    event NewInterestRateModel(address indexed newInterestRateModel);\\n\\n    // Emits each time when new credit Manager was connected\\n    event NewCreditManagerConnected(address indexed creditManager);\\n\\n    // Emits each time when borrow forbidden for credit manager\\n    event BorrowForbidden(address indexed creditManager);\\n\\n    // Emits each time when uncovered (non insured) loss accrued\\n    event UncoveredLoss(address indexed creditManager, uint256 loss);\\n\\n    // Emits after expected liquidity limit update\\n    event NewExpectedLiquidityLimit(uint256 newLimit);\\n\\n    // Emits each time when withdraw fee is udpated\\n    event NewWithdrawFee(uint256 fee);\\n\\n    //\\n    // LIQUIDITY MANAGEMENT\\n    //\\n\\n    /**\\n     * @dev Adds liquidity to pool\\n     * - transfers lp tokens to pool\\n     * - mint diesel (LP) tokens and provide them\\n     * @param amount Amount of tokens to be transfer\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function addLiquidity(\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint256 referralCode\\n    ) external override;\\n\\n    /**\\n     * @dev Removes liquidity from pool\\n     * - burns lp's diesel (LP) tokens\\n     * - returns underlying tokens to lp\\n     * @param amount Amount of tokens to be transfer\\n     * @param to Address to transfer liquidity\\n     */\\n\\n    function removeLiquidity(uint256 amount, address to)\\n        external\\n        override\\n        returns (uint256);\\n\\n    /**\\n     * @dev Transfers money from the pool to credit account\\n     * and updates the pool parameters\\n     * @param borrowedAmount Borrowed amount for credit account\\n     * @param creditAccount Credit account address\\n     */\\n    function lendCreditAccount(uint256 borrowedAmount, address creditAccount)\\n        external;\\n\\n    /**\\n     * @dev Recalculates total borrowed & borrowRate\\n     * mints/burns diesel tokens\\n     */\\n    function repayCreditAccount(\\n        uint256 borrowedAmount,\\n        uint256 profit,\\n        uint256 loss\\n    ) external;\\n\\n    //\\n    // GETTERS\\n    //\\n\\n    /**\\n     * @return expected pool liquidity\\n     */\\n    function expectedLiquidity() external view returns (uint256);\\n\\n    /**\\n     * @return expected liquidity limit\\n     */\\n    function expectedLiquidityLimit() external view returns (uint256);\\n\\n    /**\\n     * @dev Gets available liquidity in the pool (pool balance)\\n     * @return available pool liquidity\\n     */\\n    function availableLiquidity() external view returns (uint256);\\n\\n    /**\\n     * @dev Calculates interest accrued from the last update using the linear model\\n     */\\n    function calcLinearCumulative_RAY() external view returns (uint256);\\n\\n    /**\\n     * @dev Calculates borrow rate\\n     * @return borrow rate in RAY format\\n     */\\n    function borrowAPY_RAY() external view returns (uint256);\\n\\n    /**\\n     * @dev Gets the amount of total borrowed funds\\n     * @return Amount of borrowed funds at current time\\n     */\\n    function totalBorrowed() external view returns (uint256);\\n\\n    /**\\n     * @return Current diesel rate\\n     **/\\n\\n    function getDieselRate_RAY() external view returns (uint256);\\n\\n    /**\\n     * @dev Underlying token address getter\\n     * @return address of underlying ERC-20 token\\n     */\\n    function underlyingToken() external view returns (address);\\n\\n    /**\\n     * @dev Diesel(LP) token address getter\\n     * @return address of diesel(LP) ERC-20 token\\n     */\\n    function dieselToken() external view returns (address);\\n\\n    /**\\n     * @dev Credit Manager address getter\\n     * @return address of Credit Manager contract by id\\n     */\\n    function creditManagers(uint256 id) external view returns (address);\\n\\n    /**\\n     * @dev Credit Managers quantity\\n     * @return quantity of connected credit Managers\\n     */\\n    function creditManagersCount() external view returns (uint256);\\n\\n    function creditManagersCanBorrow(address id) external view returns (bool);\\n\\n    function toDiesel(uint256 amount) external view returns (uint256);\\n\\n    function fromDiesel(uint256 amount) external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n\\n    function _timestampLU() external view returns (uint256);\\n\\n    function _cumulativeIndex_RAY() external view returns (uint256);\\n\\n    function calcCumulativeIndexAtBorrowMore(\\n        uint256 amount,\\n        uint256 dAmount,\\n        uint256 cumulativeIndexAtOpen\\n    ) external view returns (uint256);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETHGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\n\\ninterface IWETHGateway {\\n    /// @dev convert ETH to WETH and add liqudity to pool\\n    /// @param pool Address of PoolService contract which where user wants to add liquidity. This pool should has WETH as underlying asset\\n    /// @param onBehalfOf The address that will receive the diesel tokens, same as msg.sender if the user  wants to receive them on his\\n    ///                   own wallet, or a different address if the beneficiary of diesel tokens is a different wallet\\n    /// @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n    /// 0 if the action is executed directly by the user, without any middle-man\\n    function addLiquidityETH(\\n        address pool,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external payable;\\n\\n    /// @dev Removes liquidity from pool and convert WETH to ETH\\n    ///       - burns lp's diesel (LP) tokens\\n    ///       - returns underlying tokens to lp\\n    /// @param pool Address of PoolService contract which where user wants to withdraw liquidity. This pool should has WETH as underlying asset\\n    /// @param amount Amount of tokens to be transfer\\n    /// @param to Address to transfer liquidity\\n    function removeLiquidityETH(\\n        address pool,\\n        uint256 amount,\\n        address payable to\\n    ) external;\\n\\n    /// @dev Opens credit account in ETH\\n    /// @param creditManager Address of credit Manager. Should used WETH as underlying asset\\n    /// @param onBehalfOf The address that we open credit account. Same as msg.sender if the user wants to open it for  his own wallet,\\n    ///                   or a different address if the beneficiary is a different wallet\\n    /// @param leverageFactor Multiplier to borrowers own funds\\n    /// @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n    ///                     0 if the action is executed directly by the user, without any middle-man\\n    function openCreditAccountETH(\\n        address creditManager,\\n        address payable onBehalfOf,\\n        uint256 leverageFactor,\\n        uint256 referralCode\\n    ) external payable;\\n\\n    /// @dev Repays credit account in ETH\\n    ///       - transfer borrowed money with interest + fee from borrower account to pool\\n    ///       - transfer all assets to \\\"to\\\" account\\n    /// @param creditManager Address of credit Manager. Should used WETH as underlying asset\\n    /// @param to Address to send credit account assets\\n    function repayCreditAccountETH(address creditManager, address to)\\n        external\\n        payable;\\n\\n    function addCollateralETH(address creditManager, address onBehalfOf)\\n        external\\n        payable;\\n\\n    /// @dev Unwrap WETH => ETH\\n    /// @param to Address to send eth\\n    /// @param amount Amount of WETH was transferred\\n    function unwrapWETH(address to, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/AddressProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\nimport {IAppAddressProvider} from \\\"../interfaces/app/IAppAddressProvider.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\n\\n\\n/// @title AddressRepository\\n/// @notice Stores addresses of deployed contracts\\ncontract AddressProvider is Ownable, IAppAddressProvider {\\n    // Mapping which keeps all addresses\\n    mapping(bytes32 => address) public addresses;\\n\\n    // Emits each time when new address is set\\n    event AddressSet(bytes32 indexed service, address indexed newAddress);\\n\\n    // This event is triggered when a call to ClaimTokens succeeds.\\n    event Claimed(uint256 user_id, address account, uint256 amount, bytes32 leaf);\\n\\n    // Repositories & services\\n    bytes32 public constant CONTRACTS_REGISTER = \\\"CONTRACTS_REGISTER\\\";\\n    bytes32 public constant ACL = \\\"ACL\\\";\\n    bytes32 public constant PRICE_ORACLE = \\\"PRICE_ORACLE\\\";\\n    bytes32 public constant ACCOUNT_FACTORY = \\\"ACCOUNT_FACTORY\\\";\\n    bytes32 public constant DATA_COMPRESSOR = \\\"DATA_COMPRESSOR\\\";\\n    bytes32 public constant TREASURY_CONTRACT = \\\"TREASURY_CONTRACT\\\";\\n    bytes32 public constant GEAR_TOKEN = \\\"GEAR_TOKEN\\\";\\n    bytes32 public constant WETH_TOKEN = \\\"WETH_TOKEN\\\";\\n    bytes32 public constant WETH_GATEWAY = \\\"WETH_GATEWAY\\\";\\n    bytes32 public constant LEVERAGED_ACTIONS = \\\"LEVERAGED_ACTIONS\\\";\\n\\n    // Contract version\\n    uint256 public constant version = 1;\\n\\n    constructor() {\\n        // @dev Emits first event for contract discovery\\n        emit AddressSet(\\\"ADDRESS_PROVIDER\\\", address(this));\\n    }\\n\\n    /// @return Address of ACL contract\\n    function getACL() external view returns (address) {\\n        return _getAddress(ACL); // T:[AP-3]\\n    }\\n\\n    /// @dev Sets address of ACL contract\\n    /// @param _address Address of ACL contract\\n    function setACL(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(ACL, _address); // T:[AP-3]\\n    }\\n\\n    /// @return Address of ContractsRegister\\n    function getContractsRegister() external view returns (address) {\\n        return _getAddress(CONTRACTS_REGISTER); // T:[AP-4]\\n    }\\n\\n    /// @dev Sets address of ContractsRegister\\n    /// @param _address Address of ContractsRegister\\n    function setContractsRegister(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(CONTRACTS_REGISTER, _address); // T:[AP-4]\\n    }\\n\\n    /// @return Address of PriceOracle\\n    function getPriceOracle() external view override returns (address) {\\n        return _getAddress(PRICE_ORACLE); // T:[AP-5]\\n    }\\n\\n    /// @dev Sets address of PriceOracle\\n    /// @param _address Address of PriceOracle\\n    function setPriceOracle(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(PRICE_ORACLE, _address); // T:[AP-5]\\n    }\\n\\n    /// @return Address of AccountFactory\\n    function getAccountFactory() external view returns (address) {\\n        return _getAddress(ACCOUNT_FACTORY); // T:[AP-6]\\n    }\\n\\n    /// @dev Sets address of AccountFactory\\n    /// @param _address Address of AccountFactory\\n    function setAccountFactory(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(ACCOUNT_FACTORY, _address); // T:[AP-7]\\n    }\\n\\n    /// @return Address of AccountFactory\\n    function getDataCompressor() external view override returns (address) {\\n        return _getAddress(DATA_COMPRESSOR); // T:[AP-8]\\n    }\\n\\n    /// @dev Sets address of AccountFactory\\n    /// @param _address Address of AccountFactory\\n    function setDataCompressor(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(DATA_COMPRESSOR, _address); // T:[AP-8]\\n    }\\n\\n    /// @return Address of Treasury contract\\n    function getTreasuryContract() external view returns (address) {\\n        return _getAddress(TREASURY_CONTRACT); //T:[AP-11]\\n    }\\n\\n    /// @dev Sets address of Treasury Contract\\n    /// @param _address Address of Treasury Contract\\n    function setTreasuryContract(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(TREASURY_CONTRACT, _address); //T:[AP-11]\\n    }\\n\\n    /// @return Address of GEAR token\\n    function getGearToken() external view override returns (address) {\\n        return _getAddress(GEAR_TOKEN); // T:[AP-12]\\n    }\\n\\n    /// @dev Sets address of GEAR token\\n    /// @param _address Address of GEAR token\\n    function setGearToken(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(GEAR_TOKEN, _address); // T:[AP-12]\\n    }\\n\\n    /// @return Address of WETH token\\n    function getWethToken() external view override returns (address) {\\n        return _getAddress(WETH_TOKEN); // T:[AP-13]\\n    }\\n\\n    /// @dev Sets address of WETH token\\n    /// @param _address Address of WETH token\\n    function setWethToken(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(WETH_TOKEN, _address); // T:[AP-13]\\n    }\\n\\n    /// @return Address of WETH token\\n    function getWETHGateway() external view override returns (address) {\\n        return _getAddress(WETH_GATEWAY); // T:[AP-14]\\n    }\\n\\n    /// @dev Sets address of WETH token\\n    /// @param _address Address of WETH token\\n    function setWETHGateway(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(WETH_GATEWAY, _address); // T:[AP-14]\\n    }\\n\\n    /// @return Address of WETH token\\n    function getLeveragedActions() external view override returns (address) {\\n        return _getAddress(LEVERAGED_ACTIONS); // T:[AP-7]\\n    }\\n\\n    /// @dev Sets address of WETH token\\n    /// @param _address Address of WETH token\\n    function setLeveragedActions(address _address)\\n        external\\n        onlyOwner // T:[AP-15]\\n    {\\n        _setAddress(LEVERAGED_ACTIONS, _address); // T:[AP-7]\\n    }\\n\\n    /// @return Address of key, reverts if key doesn't exist\\n    function _getAddress(bytes32 key) internal view returns (address) {\\n        address result = addresses[key];\\n        require(result != address(0), Errors.AS_ADDRESS_NOT_FOUND); // T:[AP-1]\\n        return result; // T:[AP-3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\\n    }\\n\\n    /// @dev Sets address to map by its key\\n    /// @param key Key in string format\\n    /// @param value Address\\n    function _setAddress(bytes32 key, address value) internal {\\n        addresses[key] = value; // T:[AP-3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\\n        emit AddressSet(key, value); // T:[AP-2]\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/ACLTrait.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\nimport {Pausable} from \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport {AddressProvider} from \\\"./AddressProvider.sol\\\";\\nimport {ACL} from \\\"./ACL.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\n\\n\\n/// @title ACL Trait\\n/// @notice Trait which adds acl functions to contract\\nabstract contract ACLTrait is Pausable {\\n    // ACL contract to check rights\\n    ACL private _acl;\\n\\n    /// @dev constructor\\n    /// @param addressProvider Address of address repository\\n    constructor(address addressProvider) {\\n        require(\\n            addressProvider != address(0),\\n            Errors.ZERO_ADDRESS_IS_NOT_ALLOWED\\n        );\\n\\n        _acl = ACL(AddressProvider(addressProvider).getACL());\\n    }\\n\\n    /// @dev  Reverts if msg.sender is not configurator\\n    modifier configuratorOnly() {\\n        require(\\n            _acl.isConfigurator(msg.sender),\\n            Errors.ACL_CALLER_NOT_CONFIGURATOR\\n        ); // T:[ACLT-8]\\n        _;\\n    }\\n\\n    ///@dev Pause contract\\n    function pause() external {\\n        require(\\n            _acl.isPausableAdmin(msg.sender),\\n            Errors.ACL_CALLER_NOT_PAUSABLE_ADMIN\\n        ); // T:[ACLT-1]\\n        _pause();\\n    }\\n\\n    /// @dev Unpause contract\\n    function unpause() external {\\n        require(\\n            _acl.isUnpausableAdmin(msg.sender),\\n            Errors.ACL_CALLER_NOT_PAUSABLE_ADMIN\\n        ); // T:[ACLT-1],[ACLT-2]\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/app/IAppPoolService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\n/// @title POptimised for front-end Pool Service Interface\\ninterface IAppPoolService {\\n\\n    function addLiquidity(\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint256 referralCode\\n    ) external;\\n\\n    function removeLiquidity(uint256 amount, address to) external returns(uint256);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/app/IAppAddressProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\n\\n/// @title Optimised for front-end Address Provider interface\\ninterface IAppAddressProvider {\\n    function getDataCompressor() external view returns (address);\\n\\n    function getGearToken() external view returns (address);\\n\\n    function getWethToken() external view returns (address);\\n\\n    function getWETHGateway() external view returns (address);\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function getLeveragedActions() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/ACL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\n\\n\\n/// @title ACL keeps admins addresses\\n/// More info: https://dev.gearbox.fi/security/roles\\ncontract ACL is Ownable {\\n    mapping(address => bool) public pausableAdminSet;\\n    mapping(address => bool) public unpausableAdminSet;\\n\\n    // Contract version\\n    uint256 public constant version = 1;\\n\\n    // emits each time when new pausable admin added\\n    event PausableAdminAdded(address indexed newAdmin);\\n\\n    // emits each time when pausable admin removed\\n    event PausableAdminRemoved(address indexed admin);\\n\\n    // emits each time when new unpausable admin added\\n    event UnpausableAdminAdded(address indexed newAdmin);\\n\\n    // emits each times when unpausable admin removed\\n    event UnpausableAdminRemoved(address indexed admin);\\n\\n    /// @dev Adds pausable admin address\\n    /// @param newAdmin Address of new pausable admin\\n    function addPausableAdmin(address newAdmin)\\n        external\\n        onlyOwner // T:[ACL-1]\\n    {\\n        pausableAdminSet[newAdmin] = true; // T:[ACL-2]\\n        emit PausableAdminAdded(newAdmin); // T:[ACL-2]\\n    }\\n\\n    /// @dev Removes pausable admin\\n    /// @param admin Address of admin which should be removed\\n    function removePausableAdmin(address admin)\\n        external\\n        onlyOwner // T:[ACL-1]\\n    {\\n        pausableAdminSet[admin] = false; // T:[ACL-3]\\n        emit PausableAdminRemoved(admin); // T:[ACL-3]\\n    }\\n\\n    /// @dev Returns true if the address is pausable admin and false if not\\n    function isPausableAdmin(address addr) external view returns (bool) {\\n        return pausableAdminSet[addr]; // T:[ACL-2,3]\\n    }\\n\\n    /// @dev Adds unpausable admin address to the list\\n    /// @param newAdmin Address of new unpausable admin\\n    function addUnpausableAdmin(address newAdmin)\\n        external\\n        onlyOwner // T:[ACL-1]\\n    {\\n        unpausableAdminSet[newAdmin] = true; // T:[ACL-4]\\n        emit UnpausableAdminAdded(newAdmin); // T:[ACL-4]\\n    }\\n\\n    /// @dev Removes unpausable admin\\n    /// @param admin Address of admin to be removed\\n    function removeUnpausableAdmin(address admin)\\n        external\\n        onlyOwner // T:[ACL-1]\\n    {\\n        unpausableAdminSet[admin] = false; // T:[ACL-5]\\n        emit UnpausableAdminRemoved(admin); // T:[ACL-5]\\n    }\\n\\n    /// @dev Returns true if the address is unpausable admin and false if not\\n    function isUnpausableAdmin(address addr) external view returns (bool) {\\n        return unpausableAdminSet[addr]; // T:[ACL-4,5]\\n    }\\n\\n    /// @dev Returns true if addr has configurator rights\\n    function isConfigurator(address account) external view returns (bool) {\\n        return account == owner(); // T:[ACL-6]\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditFilter\",\"outputs\":[{\"internalType\":\"contract ICreditFilter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditManager\",\"outputs\":[{\"internalType\":\"contract ICreditManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLoss\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "YearnAdapter", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000777e23a2acb2fcbb35f6ccf98272d03c722ba6eb000000000000000000000000da816459f1ab5631232fe5e97a05bbbb94970c95", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}