{"SourceCode": "pragma solidity ^0.4.8;\r\n\r\n/*\r\nThis file is part of Pass DAO.\r\n\r\nPass DAO is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nPass DAO is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU lesser General Public License\r\nalong with Pass DAO.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/*\r\nSmart contract for a Decentralized Autonomous Organization (DAO)\r\nto automate organizational governance and decision-making.\r\n*/\r\n\r\n/// @title Pass Dao smart contract\r\ncontract PassDao {\r\n    \r\n    struct revision {\r\n        // Address of the Committee Room smart contract\r\n        address committeeRoom;\r\n        // Address of the share manager smart contract\r\n        address shareManager;\r\n        // Address of the token manager smart contract\r\n        address tokenManager;\r\n        // Address of the project creator smart contract\r\n        uint startDate;\r\n    }\r\n    // The revisions of the application until today\r\n    revision[] public revisions;\r\n\r\n    struct project {\r\n        // The address of the smart contract\r\n        address contractAddress;\r\n        // The unix effective start date of the contract\r\n        uint startDate;\r\n    }\r\n    // The projects of the Dao\r\n    project[] public projects;\r\n\r\n    // Map with the indexes of the projects\r\n    mapping (address => uint) projectID;\r\n    \r\n    // The address of the meta project\r\n    address metaProject;\r\n\r\n    \r\n// Events\r\n\r\n    event Upgrade(uint indexed RevisionID, address CommitteeRoom, address ShareManager, address TokenManager);\r\n    event NewProject(address Project);\r\n\r\n// Constant functions  \r\n    \r\n    /// @return The effective committee room\r\n    function ActualCommitteeRoom() constant returns (address) {\r\n        return revisions[0].committeeRoom;\r\n    }\r\n    \r\n    /// @return The meta project\r\n    function MetaProject() constant returns (address) {\r\n        return metaProject;\r\n    }\r\n\r\n    /// @return The effective share manager\r\n    function ActualShareManager() constant returns (address) {\r\n        return revisions[0].shareManager;\r\n    }\r\n\r\n    /// @return The effective token manager\r\n    function ActualTokenManager() constant returns (address) {\r\n        return revisions[0].tokenManager;\r\n    }\r\n\r\n// modifiers\r\n\r\n    modifier onlyPassCommitteeRoom {if (msg.sender != revisions[0].committeeRoom  \r\n        && revisions[0].committeeRoom != 0) throw; _;}\r\n    \r\n// Constructor function\r\n\r\n    function PassDao() {\r\n        projects.length = 1;\r\n        revisions.length = 1;\r\n    }\r\n    \r\n// Register functions\r\n\r\n    /// @dev Function to allow the actual Committee Room upgrading the application\r\n    /// @param _newCommitteeRoom The address of the new committee room\r\n    /// @param _newShareManager The address of the new share manager\r\n    /// @param _newTokenManager The address of the new token manager\r\n    /// @return The index of the revision\r\n    function upgrade(\r\n        address _newCommitteeRoom, \r\n        address _newShareManager, \r\n        address _newTokenManager) onlyPassCommitteeRoom returns (uint) {\r\n        \r\n        uint _revisionID = revisions.length++;\r\n        revision r = revisions[_revisionID];\r\n\r\n        if (_newCommitteeRoom != 0) r.committeeRoom = _newCommitteeRoom; else r.committeeRoom = revisions[0].committeeRoom;\r\n        if (_newShareManager != 0) r.shareManager = _newShareManager; else r.shareManager = revisions[0].shareManager;\r\n        if (_newTokenManager != 0) r.tokenManager = _newTokenManager; else r.tokenManager = revisions[0].tokenManager;\r\n\r\n        r.startDate = now;\r\n        \r\n        revisions[0] = r;\r\n        \r\n        Upgrade(_revisionID, _newCommitteeRoom, _newShareManager, _newTokenManager);\r\n            \r\n        return _revisionID;\r\n    }\r\n\r\n    /// @dev Function to set the meta project\r\n    /// @param _projectAddress The address of the meta project\r\n    function addMetaProject(address _projectAddress) onlyPassCommitteeRoom {\r\n\r\n        metaProject = _projectAddress;\r\n    }\r\n    \r\n    /// @dev Function to allow the committee room to add a project when ordering\r\n    /// @param _projectAddress The address of the project\r\n    function addProject(address _projectAddress) onlyPassCommitteeRoom {\r\n\r\n        if (projectID[_projectAddress] == 0) {\r\n\r\n            uint _projectID = projects.length++;\r\n            project p = projects[_projectID];\r\n        \r\n            projectID[_projectAddress] = _projectID;\r\n            p.contractAddress = _projectAddress; \r\n            p.startDate = now;\r\n            \r\n            NewProject(_projectAddress);\r\n        }\r\n    }\r\n    \r\n}\r\n\r\npragma solidity ^0.4.8;\r\n\r\n/*\r\n *\r\n * This file is part of Pass DAO.\r\n *\r\n * The Manager smart contract is used for the management of shares and tokens.\r\n *\r\n*/\r\n\r\n/// @title Token Manager smart contract of the Pass Decentralized Autonomous Organisation\r\ncontract PassTokenManagerInterface {\r\n\r\n    // The Pass Dao smart contract\r\n    PassDao public passDao;\r\n    // The adress of the creator of this smart contract\r\n    address creator;\r\n    \r\n    // The token name for display purpose\r\n    string public name;\r\n    // The token symbol for display purpose\r\n    string public symbol;\r\n    // The quantity of decimals for display purpose\r\n    uint8 public decimals;\r\n    // Total amount of tokens\r\n    uint256 totalTokenSupply;\r\n\r\n    // True if tokens, false if Dao shares\r\n    bool token;\r\n    // If true, the shares or tokens can be transferred\r\n    bool transferable;\r\n\r\n    // The address of the last Manager before cloning\r\n    address public clonedFrom;\r\n    // True if the initial token supply is over\r\n    bool initialTokenSupplyDone;\r\n\r\n    // Array of token or share holders (used for cloning)\r\n    address[] holders;\r\n    // Map with the indexes of the holders (used for cloning)\r\n    mapping (address => uint) holderID;\r\n    \r\n    // Array with all balances\r\n    mapping (address => uint256) balances;\r\n    // Array with all allowances\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    struct funding {\r\n        // The address which sets partners and manages the funding (not mandatory)\r\n        address moderator;\r\n        // The amount (in wei) of the funding\r\n        uint amountToFund;\r\n        // The funded amount (in wei)\r\n        uint fundedAmount;\r\n        // A unix timestamp, denoting the start time of the funding\r\n        uint startTime; \r\n        // A unix timestamp, denoting the closing time of the funding\r\n        uint closingTime;  \r\n        // The price multiplier for a share or a token without considering the inflation rate\r\n        uint initialPriceMultiplier;\r\n        // Rate per year in percentage applied to the share or token price \r\n        uint inflationRate; \r\n        // The total amount of wei given\r\n        uint totalWeiGiven;\r\n    } \r\n    // Map with the fundings rules for each Dao proposal\r\n    mapping (uint => funding) public fundings;\r\n\r\n    // The index of the last funding and proposal\r\n    uint lastProposalID;\r\n    // The index of the last fueled funding and proposal\r\n    uint public lastFueledFundingID;\r\n    \r\n    struct amountsGiven {\r\n        uint weiAmount;\r\n        uint tokenAmount;\r\n    }\r\n    // Map with the amounts given for each proposal \r\n    mapping (uint => mapping (address => amountsGiven)) public Given;\r\n    \r\n    // Map of blocked Dao share accounts. Points to the date when the share holder can transfer shares\r\n    mapping (address => uint) public blockedDeadLine; \r\n\r\n    // @return The client of this manager\r\n    function Client() constant returns (address);\r\n    \r\n    /// @return The total supply of shares or tokens \r\n    function totalSupply() constant external returns (uint256);\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n     function balanceOf(address _owner) constant external returns (uint256 balance);\r\n\r\n    /// @return True if tokens can be transferred\r\n    function Transferable() constant external returns (bool);\r\n    \r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Quantity of remaining tokens of _owner that _spender is allowed to spend\r\n    function allowance(address _owner, address _spender) constant external returns (uint256 remaining);\r\n    \r\n    /// @param _proposalID Index of the funding or proposal\r\n    /// @return The result (in wei) of the funding\r\n    function FundedAmount(uint _proposalID) constant external returns (uint);\r\n\r\n    /// @param _proposalID Index of the funding or proposal\r\n    /// @return The amount to fund\r\n    function AmountToFund(uint _proposalID) constant external returns (uint);\r\n    \r\n    /// @param _proposalID Index of the funding or proposal\r\n    /// @return the token price multiplier\r\n    function priceMultiplier(uint _proposalID) constant internal returns (uint);\r\n    \r\n    /// @param _proposalID Index of the funding or proposal\r\n    /// @param _saleDate in case of presale, the date of the presale\r\n    /// @return the share or token price divisor condidering the sale date and the inflation rate\r\n    function priceDivisor(\r\n        uint _proposalID, \r\n        uint _saleDate) constant internal returns (uint);\r\n    \r\n    /// @param _proposalID Index of the funding or proposal\r\n    /// @return the actual price divisor of a share or token\r\n    function actualPriceDivisor(uint _proposalID) constant internal returns (uint);\r\n\r\n    /// @dev Internal function to calculate the amount in tokens according to a price    \r\n    /// @param _weiAmount The amount (in wei)\r\n    /// @param _priceMultiplier The price multiplier\r\n    /// @param _priceDivisor The price divisor\r\n    /// @return the amount in tokens \r\n    function TokenAmount(\r\n        uint _weiAmount,\r\n        uint _priceMultiplier, \r\n        uint _priceDivisor) constant internal returns (uint);\r\n\r\n    /// @dev Internal function to calculate the amount in wei according to a price    \r\n    /// @param _tokenAmount The amount (in wei)\r\n    /// @param _priceMultiplier The price multiplier\r\n    /// @param _priceDivisor The price divisor\r\n    /// @return the amount in wei\r\n    function weiAmount(\r\n        uint _tokenAmount, \r\n        uint _priceMultiplier, \r\n        uint _priceDivisor) constant internal returns (uint);\r\n        \r\n    /// @param _tokenAmount The amount in tokens\r\n    /// @param _proposalID Index of the client proposal. 0 if not linked to a proposal.\r\n    /// @return the actual token price in wei\r\n    function TokenPriceInWei(uint _tokenAmount, uint _proposalID) constant returns (uint);\r\n    \r\n    /// @return The index of the last funding and client's proposal \r\n    function LastProposalID() constant returns (uint);\r\n\r\n    /// @return The number of share or token holders (used for cloning)\r\n    function numberOfHolders() constant returns (uint);\r\n\r\n    /// @param _index The index of the holder\r\n    /// @return the address of the holder\r\n    function HolderAddress(uint _index) constant external returns (address);\r\n   \r\n    /// @dev The constructor function\r\n    /// @param _passDao Address of the pass Dao smart contract\r\n    /// @param _clonedFrom The address of the last Manager before cloning\r\n    /// @param _tokenName The token name for display purpose\r\n    /// @param _tokenSymbol The token symbol for display purpose\r\n    /// @param _tokenDecimals The quantity of decimals for display purpose\r\n    /// @param  _token True if tokens, false if shares\r\n    /// @param  _transferable True if tokens can be transferred\r\n    /// @param _initialPriceMultiplier Price multiplier without considering any inflation rate\r\n    /// @param _inflationRate If 0, the token price doesn't change during the funding\r\n    //function PassTokenManager(\r\n    //    address _passDao,\r\n    //    address _clonedFrom,\r\n    //    string _tokenName,\r\n    //    string _tokenSymbol,\r\n    //    uint8 _tokenDecimals,\r\n    //    bool _token,\r\n    //    bool _transferable,\r\n    //    uint _initialPriceMultiplier,\r\n    //    uint _inflationRate);\r\n    \r\n    /// @dev Function to create initial tokens    \r\n    /// @param _recipient The beneficiary of the created tokens\r\n    /// @param _quantity The quantity of tokens to create    \r\n    /// @param _last True if the initial token suppy is over\r\n    /// @return Whether the function was successful or not     \r\n    function initialTokenSupply(\r\n        address _recipient, \r\n        uint _quantity,\r\n        bool _last) returns (bool success);\r\n        \r\n    /// @notice Function to clone tokens before upgrading\r\n    /// @param _from The index of the first holder\r\n    /// @param _to The index of the last holder\r\n    /// @return Whether the function was successful or not \r\n    function cloneTokens(\r\n        uint _from,\r\n        uint _to) returns (bool success);\r\n\r\n    /// @dev Internal function to add a new token or share holder\r\n    /// @param _holder The address of the token or share holder\r\n    function addHolder(address _holder) internal;\r\n    \r\n    /// @dev Internal function to create initial tokens    \r\n    /// @param _holder The beneficiary of the created tokens\r\n    /// @param _tokenAmount The amount in tokens to create\r\n    function createTokens(\r\n        address _holder, \r\n        uint _tokenAmount) internal;\r\n        \r\n    /// @notice Function used by the client to pay with shares or tokens\r\n    /// @param _recipient The address of the recipient of shares or tokens\r\n    /// @param _amount The amount (in Wei) to calculate the quantity of shares or tokens to create\r\n    /// @return the rewarded amount in tokens or shares\r\n    function rewardTokensForClient(\r\n        address _recipient, \r\n        uint _amount) external  returns (uint);\r\n        \r\n    /// @notice Function to set a funding\r\n    /// @param _moderator The address of the smart contract to manage a private funding\r\n    /// @param _initialPriceMultiplier Price multiplier without considering any inflation rate\r\n    /// @param _amountToFund The amount (in wei) of the funding\r\n    /// @param _minutesFundingPeriod Period in minutes of the funding\r\n    /// @param _inflationRate If 0, the token price doesn't change during the funding\r\n    /// @param _proposalID Index of the client proposal\r\n    function setFundingRules(\r\n        address _moderator,\r\n        uint _initialPriceMultiplier,\r\n        uint _amountToFund,\r\n        uint _minutesFundingPeriod, \r\n        uint _inflationRate,\r\n        uint _proposalID) external;\r\n\r\n    /// @dev Internal function for the sale of shares or tokens\r\n    /// @param _proposalID Index of the client proposal\r\n    /// @param _recipient The recipient address of shares or tokens\r\n    /// @param _amount The funded amount (in wei)\r\n    /// @param _saleDate In case of presale, the date of the presale\r\n    /// @param _presale True if presale\r\n    /// @return Whether the creation was successful or not\r\n    function sale(\r\n        uint _proposalID,\r\n        address _recipient, \r\n        uint _amount,\r\n        uint _saleDate,\r\n        bool _presale\r\n    ) internal returns (bool success);\r\n    \r\n    /// @dev Internal function to close the actual funding\r\n    /// @param _proposalID Index of the client proposal\r\n    function closeFunding(uint _proposalID) internal;\r\n   \r\n    /// @notice Function to send tokens or refund after the closing time of the funding proposals\r\n    /// @param _from The first proposal. 0 if not linked to a proposal\r\n    /// @param _to The last proposal\r\n    /// @param _buyer The address of the buyer\r\n    /// @return Whether the function was successful or not \r\n    function sendPendingAmounts(        \r\n        uint _from,\r\n        uint _to,\r\n        address _buyer) returns (bool);\r\n        \r\n    /// @notice Function to get fees, shares or refund after the closing time of the funding proposals\r\n    /// @return Whether the function was successful or not\r\n    function withdrawPendingAmounts() returns (bool);\r\n    \r\n    /// @notice Function used by the main partner to set the start time of the funding\r\n    /// @param _proposalID Index of the client proposal\r\n    /// @param _startTime The unix start date of the funding \r\n    function setFundingStartTime(\r\n        uint _proposalID, \r\n        uint _startTime) external;\r\n    \r\n    /// @notice Function used by the main partner to set the funding fueled\r\n    /// @param _proposalID Index of the client proposal\r\n    function setFundingFueled(uint _proposalID) external;\r\n\r\n    /// @notice Function to able the transfer of Dao shares or contractor tokens\r\n    function ableTransfer();\r\n\r\n    /// @notice Function to disable the transfer of Dao shares\r\n    function disableTransfer();\r\n\r\n    /// @notice Function used by the client to block the transfer of shares from and to a share holder\r\n    /// @param _shareHolder The address of the share holder\r\n    /// @param _deadLine When the account will be unblocked\r\n    function blockTransfer(\r\n        address _shareHolder, \r\n        uint _deadLine) external;\r\n    \r\n    /// @dev Internal function to send `_value` token to `_to` from `_From`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The quantity of shares or tokens to be transferred\r\n    /// @return Whether the function was successful or not \r\n    function transferFromTo(\r\n        address _from,\r\n        address _to, \r\n        uint256 _value\r\n        ) internal returns (bool success);\r\n    \r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The quantity of shares or tokens to be transferred\r\n    /// @return Whether the function was successful or not \r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The quantity of shares or tokens to be transferred\r\n    function transferFrom(\r\n        address _from, \r\n        address _to, \r\n        uint256 _value\r\n        ) returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on its behalf\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(\r\n        address _spender, \r\n        uint256 _value) returns (bool success);\r\n    \r\n    event TokensCreated(address indexed Sender, address indexed TokenHolder, uint TokenAmount);\r\n    event FundingRulesSet(address indexed Moderator, uint indexed ProposalId, uint AmountToFund, uint indexed StartTime, uint ClosingTime);\r\n    event FundingFueled(uint indexed ProposalID, uint FundedAmount);\r\n    event TransferAble();\r\n    event TransferDisable();\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Refund(address indexed Buyer, uint Amount);\r\n    \r\n}    \r\n\r\ncontract PassTokenManager is PassTokenManagerInterface {\r\n\r\n// Constant functions\r\n\r\n    function Client() constant returns (address) {\r\n        return passDao.ActualCommitteeRoom();\r\n    }\r\n   \r\n    function totalSupply() constant external returns (uint256) {\r\n        return totalTokenSupply;\r\n    }\r\n    \r\n    function balanceOf(address _owner) constant external returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n     \r\n    function Transferable() constant external returns (bool) {\r\n        return transferable;\r\n    }\r\n \r\n    function allowance(\r\n        address _owner, \r\n        address _spender) constant external returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function FundedAmount(uint _proposalID) constant external returns (uint) {\r\n        return fundings[_proposalID].fundedAmount;\r\n    }\r\n  \r\n    function AmountToFund(uint _proposalID) constant external returns (uint) {\r\n\r\n        if (now > fundings[_proposalID].closingTime\r\n            || now < fundings[_proposalID].startTime) {\r\n            return 0;   \r\n            } else return fundings[_proposalID].amountToFund;\r\n    }\r\n    \r\n    function priceMultiplier(uint _proposalID) constant internal returns (uint) {\r\n        return fundings[_proposalID].initialPriceMultiplier;\r\n    }\r\n    \r\n    function priceDivisor(uint _proposalID, uint _saleDate) constant internal returns (uint) {\r\n        uint _date = _saleDate;\r\n        \r\n        if (_saleDate > fundings[_proposalID].closingTime) _date = fundings[_proposalID].closingTime;\r\n        if (_saleDate < fundings[_proposalID].startTime) _date = fundings[_proposalID].startTime;\r\n\r\n        return 100 + 100*fundings[_proposalID].inflationRate*(_date - fundings[_proposalID].startTime)/(100*365 days);\r\n    }\r\n    \r\n    function actualPriceDivisor(uint _proposalID) constant internal returns (uint) {\r\n        return priceDivisor(_proposalID, now);\r\n    }\r\n    \r\n    function TokenAmount(\r\n        uint _weiAmount, \r\n        uint _priceMultiplier, \r\n        uint _priceDivisor) constant internal returns (uint) {\r\n        \r\n        uint _a = _weiAmount*_priceMultiplier;\r\n        uint _multiplier = 100*_a;\r\n        uint _amount = _multiplier/_priceDivisor;\r\n        if (_a/_weiAmount != _priceMultiplier\r\n            || _multiplier/100 != _a) return 0; \r\n        \r\n        return _amount;\r\n    }\r\n    \r\n    function weiAmount(\r\n        uint _tokenAmount, \r\n        uint _priceMultiplier, \r\n        uint _priceDivisor) constant internal returns (uint) {\r\n        \r\n        uint _multiplier = _tokenAmount*_priceDivisor;\r\n        uint _divisor = 100*_priceMultiplier;\r\n        uint _amount = _multiplier/_divisor;\r\n        if (_multiplier/_tokenAmount != _priceDivisor\r\n            || _divisor/100 != _priceMultiplier) return 0; \r\n\r\n        return _amount;\r\n    }\r\n    \r\n    function TokenPriceInWei(uint _tokenAmount, uint _proposalID) constant returns (uint) {\r\n        return weiAmount(_tokenAmount, priceMultiplier(_proposalID), actualPriceDivisor(_proposalID));\r\n    }\r\n    \r\n    function LastProposalID() constant returns (uint) {\r\n        return lastProposalID;\r\n    }\r\n    \r\n    function numberOfHolders() constant returns (uint) {\r\n        return holders.length - 1;\r\n    }\r\n    \r\n    function HolderAddress(uint _index) constant external returns (address) {\r\n        return holders[_index];\r\n    }\r\n\r\n// Modifiers\r\n\r\n    // Modifier that allows only the client ..\r\n    modifier onlyClient {if (msg.sender != Client()) throw; _;}\r\n      \r\n    // Modifier for share Manager functions\r\n    modifier onlyShareManager {if (token) throw; _;}\r\n\r\n    // Modifier for token Manager functions\r\n    modifier onlyTokenManager {if (!token) throw; _;}\r\n  \r\n// Constructor function\r\n\r\n    function PassTokenManager(\r\n        PassDao _passDao,\r\n        address _clonedFrom,\r\n        string _tokenName,\r\n        string _tokenSymbol,\r\n        uint8 _tokenDecimals,\r\n        bool _token,\r\n        bool _transferable,\r\n        uint _initialPriceMultiplier,\r\n        uint _inflationRate) {\r\n\r\n        passDao = _passDao;\r\n        creator = msg.sender;\r\n        \r\n        clonedFrom = _clonedFrom;            \r\n\r\n        name = _tokenName;\r\n        symbol = _tokenSymbol;\r\n        decimals = _tokenDecimals;\r\n\r\n        token = _token;\r\n        transferable = _transferable;\r\n\r\n        fundings[0].initialPriceMultiplier = _initialPriceMultiplier;\r\n        fundings[0].inflationRate = _inflationRate;\r\n\r\n        holders.length = 1;\r\n    }\r\n\r\n// Setting functions\r\n\r\n    function initialTokenSupply(\r\n        address _recipient, \r\n        uint _quantity,\r\n        bool _last) returns (bool success) {\r\n\r\n        if (initialTokenSupplyDone) throw;\r\n        \r\n        addHolder(_recipient);\r\n        if (_recipient != 0 && _quantity != 0) createTokens(_recipient, _quantity);\r\n        \r\n        if (_last) initialTokenSupplyDone = true;\r\n        \r\n        return true;\r\n    }\r\n\r\n    function cloneTokens(\r\n        uint _from,\r\n        uint _to) returns (bool success) {\r\n        \r\n        initialTokenSupplyDone = true;\r\n        if (_from == 0) _from = 1;\r\n        \r\n        PassTokenManager _clonedFrom = PassTokenManager(clonedFrom);\r\n        uint _numberOfHolders = _clonedFrom.numberOfHolders();\r\n        if (_to == 0 || _to > _numberOfHolders) _to = _numberOfHolders;\r\n        \r\n        address _holder;\r\n        uint _balance;\r\n\r\n        for (uint i = _from; i <= _to; i++) {\r\n            _holder = _clonedFrom.HolderAddress(i);\r\n            _balance = _clonedFrom.balanceOf(_holder);\r\n            if (balances[_holder] == 0 && _balance != 0) {\r\n                addHolder(_holder);\r\n                createTokens(_holder, _balance);\r\n            }\r\n        }\r\n    }\r\n        \r\n// Token creation\r\n\r\n    function addHolder(address _holder) internal {\r\n        \r\n        if (holderID[_holder] == 0) {\r\n            \r\n            uint _holderID = holders.length++;\r\n            holders[_holderID] = _holder;\r\n            holderID[_holder] = _holderID;\r\n        }\r\n    }\r\n\r\n    function createTokens(\r\n        address _holder, \r\n        uint _tokenAmount) internal {\r\n\r\n        balances[_holder] += _tokenAmount; \r\n        totalTokenSupply += _tokenAmount;\r\n        TokensCreated(msg.sender, _holder, _tokenAmount);\r\n    }\r\n    \r\n    function rewardTokensForClient(\r\n        address _recipient, \r\n        uint _amount\r\n        ) external onlyClient returns (uint) {\r\n\r\n        uint _tokenAmount = TokenAmount(_amount, priceMultiplier(0), actualPriceDivisor(0));\r\n        if (_tokenAmount == 0) throw;\r\n\r\n        addHolder(_recipient);\r\n        createTokens(_recipient, _tokenAmount);\r\n\r\n        return _tokenAmount;\r\n    }\r\n    \r\n    function setFundingRules(\r\n        address _moderator,\r\n        uint _initialPriceMultiplier,\r\n        uint _amountToFund,\r\n        uint _minutesFundingPeriod, \r\n        uint _inflationRate,\r\n        uint _proposalID\r\n    ) external onlyClient {\r\n\r\n        if (_moderator == address(this)\r\n            || _moderator == Client()\r\n            || _amountToFund == 0\r\n            || _minutesFundingPeriod == 0\r\n            || fundings[_proposalID].totalWeiGiven != 0\r\n            ) throw;\r\n            \r\n        fundings[_proposalID].moderator = _moderator;\r\n\r\n        fundings[_proposalID].amountToFund = _amountToFund;\r\n        fundings[_proposalID].fundedAmount = 0;\r\n\r\n        if (_initialPriceMultiplier == 0) {\r\n            if (now < fundings[0].closingTime) {\r\n                fundings[_proposalID].initialPriceMultiplier = 100*priceMultiplier(lastProposalID)/actualPriceDivisor(lastProposalID);\r\n            } else {\r\n                fundings[_proposalID].initialPriceMultiplier = 100*priceMultiplier(lastFueledFundingID)/actualPriceDivisor(lastFueledFundingID);\r\n            }\r\n            fundings[0].initialPriceMultiplier = fundings[_proposalID].initialPriceMultiplier;\r\n        }\r\n        else {\r\n            fundings[_proposalID].initialPriceMultiplier = _initialPriceMultiplier;\r\n            fundings[0].initialPriceMultiplier = _initialPriceMultiplier;\r\n        }\r\n        \r\n        if (_inflationRate == 0) fundings[_proposalID].inflationRate = fundings[0].inflationRate;\r\n        else {\r\n            fundings[_proposalID].inflationRate = _inflationRate;\r\n            fundings[0].inflationRate = _inflationRate;\r\n        }\r\n        \r\n        fundings[_proposalID].startTime = now;\r\n        fundings[0].startTime = now;\r\n        \r\n        fundings[_proposalID].closingTime = now + _minutesFundingPeriod * 1 minutes;\r\n        fundings[0].closingTime = fundings[_proposalID].closingTime;\r\n        \r\n        fundings[_proposalID].totalWeiGiven = 0;\r\n        \r\n        lastProposalID = _proposalID;\r\n        \r\n        FundingRulesSet(_moderator, _proposalID,  _amountToFund, fundings[_proposalID].startTime, fundings[_proposalID].closingTime);\r\n    } \r\n    \r\n    function sale(\r\n        uint _proposalID,\r\n        address _recipient, \r\n        uint _amount,\r\n        uint _saleDate,\r\n        bool _presale) internal returns (bool success) {\r\n\r\n        if (_saleDate == 0) _saleDate = now;\r\n\r\n        if (_saleDate > fundings[_proposalID].closingTime\r\n            || _saleDate < fundings[_proposalID].startTime\r\n            || fundings[_proposalID].totalWeiGiven + _amount > fundings[_proposalID].amountToFund) return;\r\n\r\n        uint _tokenAmount = TokenAmount(_amount, priceMultiplier(_proposalID), priceDivisor(_proposalID, _saleDate));\r\n        if (_tokenAmount == 0) return;\r\n        \r\n        addHolder(_recipient);\r\n        if (_presale) {\r\n            Given[_proposalID][_recipient].tokenAmount += _tokenAmount;\r\n        }\r\n        else createTokens(_recipient, _tokenAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function closeFunding(uint _proposalID) internal {\r\n        fundings[_proposalID].fundedAmount = fundings[_proposalID].totalWeiGiven;\r\n        lastFueledFundingID = _proposalID;\r\n        fundings[_proposalID].closingTime = now;\r\n        FundingFueled(_proposalID, fundings[_proposalID].fundedAmount);\r\n    }\r\n\r\n    function sendPendingAmounts(        \r\n        uint _from,\r\n        uint _to,\r\n        address _buyer) returns (bool) {\r\n        \r\n        if (_from == 0) _from = 1;\r\n        if (_to == 0) _to = lastProposalID;\r\n        if (_buyer == 0) _buyer = msg.sender;\r\n\r\n        uint _amount;\r\n        uint _tokenAmount;\r\n        \r\n        for (uint i = _from; i <= _to; i++) {\r\n\r\n            if (now > fundings[i].closingTime && Given[i][_buyer].weiAmount != 0) {\r\n                \r\n                if (fundings[i].fundedAmount == 0) _amount += Given[i][_buyer].weiAmount;\r\n                else _tokenAmount += Given[i][_buyer].tokenAmount;\r\n\r\n                fundings[i].totalWeiGiven -= Given[i][_buyer].weiAmount;\r\n                Given[i][_buyer].tokenAmount = 0;\r\n                Given[i][_buyer].weiAmount = 0;\r\n            }\r\n        }\r\n\r\n        if (_tokenAmount > 0) {\r\n            createTokens(_buyer, _tokenAmount);\r\n            return true;\r\n        }\r\n        \r\n        if (_amount > 0) {\r\n            if (!_buyer.send(_amount)) throw;\r\n            Refund(_buyer, _amount);\r\n        } else return true;\r\n    }\r\n    \r\n\r\n    function withdrawPendingAmounts() returns (bool) {\r\n        \r\n        return sendPendingAmounts(0, 0, msg.sender);\r\n    }        \r\n\r\n// Funding Moderator functions\r\n\r\n    function setFundingStartTime(uint _proposalID, uint _startTime) external {\r\n        if ((msg.sender !=  fundings[_proposalID].moderator) || now > fundings[_proposalID].closingTime) throw;\r\n        fundings[_proposalID].startTime = _startTime;\r\n    }\r\n\r\n    function setFundingFueled(uint _proposalID) external {\r\n\r\n        if ((msg.sender !=  fundings[_proposalID].moderator) || now > fundings[_proposalID].closingTime) throw;\r\n\r\n        closeFunding(_proposalID);\r\n    }\r\n    \r\n// Tokens transfer management    \r\n    \r\n    function ableTransfer() onlyClient {\r\n        if (!transferable) {\r\n            transferable = true;\r\n            TransferAble();\r\n        }\r\n    }\r\n\r\n    function disableTransfer() onlyClient {\r\n        if (transferable) {\r\n            transferable = false;\r\n            TransferDisable();\r\n        }\r\n    }\r\n    \r\n    function blockTransfer(address _shareHolder, uint _deadLine) external onlyClient onlyShareManager {\r\n        if (_deadLine > blockedDeadLine[_shareHolder]) {\r\n            blockedDeadLine[_shareHolder] = _deadLine;\r\n        }\r\n    }\r\n    \r\n    function transferFromTo(\r\n        address _from,\r\n        address _to, \r\n        uint256 _value\r\n        ) internal returns (bool success) {  \r\n\r\n        if ((transferable)\r\n            && now > blockedDeadLine[_from]\r\n            && now > blockedDeadLine[_to]\r\n            && _to != address(this)\r\n            && balances[_from] >= _value\r\n            && balances[_to] + _value > balances[_to]) {\r\n\r\n            addHolder(_to);\r\n            balances[_from] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n\r\n        } else return false;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) returns (bool success) {  \r\n        if (!transferFromTo(msg.sender, _to, _value)) throw;\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from, \r\n        address _to, \r\n        uint256 _value\r\n        ) returns (bool success) { \r\n        \r\n        if (allowed[_from][msg.sender] < _value\r\n            || !transferFromTo(_from, _to, _value)) throw;\r\n            \r\n        allowed[_from][msg.sender] -= _value;\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n    \r\n}\r\n    \r\n\r\n\r\npragma solidity ^0.4.8;\r\n\r\n/*\r\n *\r\n * This file is part of Pass DAO.\r\n *\r\n * The Manager smart contract is used for the management of the Dao account, shares and tokens.\r\n *\r\n*/\r\n\r\n/// @title Manager smart contract of the Pass Decentralized Autonomous Organisation\r\ncontract PassManager is PassTokenManager {\r\n    \r\n    struct order {\r\n        address buyer;\r\n        uint weiGiven;\r\n    }\r\n    // Orders to buy tokens\r\n    order[] public orders;\r\n    // Number or orders to buy tokens\r\n    uint numberOfOrders;\r\n\r\n    // Map to know if an order was cloned from the precedent manager after an upgrade\r\n    mapping (uint => bool) orderCloned;\r\n    \r\n    function PassManager(\r\n        PassDao _passDao,\r\n        address _clonedFrom,\r\n        string _tokenName,\r\n        string _tokenSymbol,\r\n        uint8 _tokenDecimals,\r\n        bool _token,\r\n        bool _transferable,\r\n        uint _initialPriceMultiplier,\r\n        uint _inflationRate) \r\n        PassTokenManager( _passDao, _clonedFrom, _tokenName, _tokenSymbol, _tokenDecimals, \r\n            _token, _transferable, _initialPriceMultiplier, _inflationRate) { }\r\n    \r\n    /// @notice Function to receive payments\r\n    function () payable onlyShareManager { }\r\n    \r\n    /// @notice Function used by the client to send ethers\r\n    /// @param _recipient The address to send to\r\n    /// @param _amount The amount (in wei) to send\r\n    /// @return Whether the transfer was successful or not\r\n    function sendTo(\r\n        address _recipient,\r\n        uint _amount\r\n    ) external onlyClient returns (bool) {\r\n\r\n        if (_recipient.send(_amount)) return true;\r\n        else return false;\r\n    }\r\n\r\n    /// @dev Internal function to buy tokens and promote a proposal \r\n    /// @param _proposalID The index of the proposal\r\n    /// @param _buyer The address of the buyer\r\n    /// @param _date The unix date to consider for the share or token price calculation\r\n    /// @param _presale True if presale\r\n    /// @return Whether the function was successful or not \r\n    function buyTokensFor(\r\n        uint _proposalID,\r\n        address _buyer, \r\n        uint _date,\r\n        bool _presale) internal returns (bool) {\r\n\r\n        if (_proposalID == 0 || !sale(_proposalID, _buyer, msg.value, _date, _presale)) throw;\r\n\r\n        fundings[_proposalID].totalWeiGiven += msg.value;        \r\n        if (fundings[_proposalID].totalWeiGiven == fundings[_proposalID].amountToFund) closeFunding(_proposalID);\r\n\r\n        Given[_proposalID][_buyer].weiAmount += msg.value;\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /// @notice Function to buy tokens and promote a proposal \r\n    /// @param _proposalID The index of the proposal\r\n    /// @param _buyer The address of the buyer (not mandatory, msg.sender if 0)\r\n    /// @return Whether the function was successful or not \r\n    function buyTokensForProposal(\r\n        uint _proposalID, \r\n        address _buyer) payable returns (bool) {\r\n\r\n        if (_buyer == 0) _buyer = msg.sender;\r\n\r\n        if (fundings[_proposalID].moderator != 0) throw;\r\n\r\n        return buyTokensFor(_proposalID, _buyer, now, true);\r\n    }\r\n\r\n    /// @notice Function used by the moderator to buy shares or tokens\r\n    /// @param _proposalID Index of the client proposal\r\n    /// @param _buyer The address of the recipient of shares or tokens\r\n    /// @param _date The unix date to consider for the share or token price calculation\r\n    /// @param _presale True if presale\r\n    /// @return Whether the function was successful or not \r\n    function buyTokenFromModerator(\r\n        uint _proposalID,\r\n        address _buyer, \r\n        uint _date,\r\n        bool _presale) payable external returns (bool){\r\n\r\n        if (msg.sender != fundings[_proposalID].moderator) throw;\r\n\r\n        return buyTokensFor(_proposalID, _buyer, _date, _presale);\r\n    }\r\n\r\n    /// @dev Internal function to create a buy order\r\n    /// @param _buyer The address of the buyer\r\n    /// @param _weiGiven The amount in wei given by the buyer\r\n    function addOrder(\r\n        address _buyer, \r\n        uint _weiGiven) internal {\r\n\r\n        uint i;\r\n        numberOfOrders += 1;\r\n\r\n        if (numberOfOrders > orders.length) i = orders.length++;\r\n        else i = numberOfOrders - 1;\r\n        \r\n        orders[i].buyer = _buyer;\r\n        orders[i].weiGiven = _weiGiven;\r\n    }\r\n\r\n    /// @dev Internal function to remove a buy order\r\n    /// @param _order The index of the order to remove\r\n    function removeOrder(uint _order) internal {\r\n        \r\n        if (numberOfOrders - 1 < _order) return;\r\n\r\n        numberOfOrders -= 1;\r\n        if (numberOfOrders > 0) {\r\n            for (uint i = _order; i <= numberOfOrders - 1; i++) {\r\n                orders[i].buyer = orders[i+1].buyer;\r\n                orders[i].weiGiven = orders[i+1].weiGiven;\r\n            }\r\n        }\r\n        orders[numberOfOrders].buyer = 0;\r\n        orders[numberOfOrders].weiGiven = 0;\r\n    }\r\n    \r\n    /// @notice Function to create orders to buy tokens\r\n    /// @return Whether the function was successful or not\r\n    function buyTokens() payable returns (bool) {\r\n\r\n        if (!transferable || msg.value < 100 finney) throw;\r\n        \r\n        addOrder(msg.sender, msg.value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /// @notice Function to sell tokens\r\n    /// @param _tokenAmount in tokens to sell\r\n    /// @param _from Index of the first order\r\n    /// @param _to Index of the last order\r\n    /// @return the revenue in wei\r\n    function sellTokens(\r\n        uint _tokenAmount,\r\n        uint _from,\r\n        uint _to) returns (uint) {\r\n\r\n        if (!transferable \r\n            || uint(balances[msg.sender]) < _amount \r\n            || numberOfOrders == 0) throw;\r\n        \r\n        if (_to == 0 || _to > numberOfOrders - 1) _to = numberOfOrders - 1;\r\n        \r\n        \r\n        uint _tokenAmounto;\r\n        uint _amount;\r\n        uint _totalAmount;\r\n        uint o = _from;\r\n\r\n        for (uint i = _from; i <= _to; i++) {\r\n\r\n            if (_tokenAmount > 0 && orders[o].buyer != msg.sender) {\r\n\r\n                _tokenAmounto = TokenAmount(orders[o].weiGiven, priceMultiplier(0), actualPriceDivisor(0));\r\n\r\n                if (_tokenAmount >= _tokenAmounto \r\n                    && transferFromTo(msg.sender, orders[o].buyer, _tokenAmounto)) {\r\n                            \r\n                    _tokenAmount -= _tokenAmounto;\r\n                    _totalAmount += orders[o].weiGiven;\r\n                    removeOrder(o);\r\n                }\r\n                else if (_tokenAmount < _tokenAmounto\r\n                    && transferFromTo(msg.sender, orders[o].buyer, _tokenAmount)) {\r\n                        \r\n                    _amount = weiAmount(_tokenAmount, priceMultiplier(0), actualPriceDivisor(0));\r\n                    orders[o].weiGiven -= _amount;\r\n                    _totalAmount += _amount;\r\n                    i = _to + 1;\r\n                }\r\n                else o += 1;\r\n            } \r\n            else o += 1;\r\n        }\r\n        \r\n        if (!msg.sender.send(_totalAmount)) throw;\r\n        else return _totalAmount;\r\n    }    \r\n\r\n    /// @notice Function to remove your orders and refund\r\n    /// @param _from Index of the first order\r\n    /// @param _to Index of the last order\r\n    /// @return Whether the function was successful or not\r\n    function removeOrders(\r\n        uint _from,\r\n        uint _to) returns (bool) {\r\n\r\n        if (_to == 0 || _to > numberOfOrders) _to = numberOfOrders -1;\r\n        \r\n        uint _totalAmount;\r\n        uint o = _from;\r\n\r\n        for (uint i = _from; i <= _to; i++) {\r\n\r\n            if (orders[o].buyer == msg.sender) {\r\n                \r\n                _totalAmount += orders[o].weiGiven;\r\n                removeOrder(o);\r\n\r\n            } else o += 1;\r\n        }\r\n\r\n        if (!msg.sender.send(_totalAmount)) throw;\r\n        else return true;\r\n    }\r\n    \r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"buyTokensForProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_quantity\",\"type\":\"uint256\"},{\"name\":\"_last\",\"type\":\"bool\"}],\"name\":\"initialTokenSupply\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"cloneTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Transferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ableTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"setFundingFueled\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rewardTokensForClient\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LastProposalID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_moderator\",\"type\":\"address\"},{\"name\":\"_initialPriceMultiplier\",\"type\":\"uint256\"},{\"name\":\"_amountToFund\",\"type\":\"uint256\"},{\"name\":\"_minutesFundingPeriod\",\"type\":\"uint256\"},{\"name\":\"_inflationRate\",\"type\":\"uint256\"},{\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"setFundingRules\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_shareHolder\",\"type\":\"address\"},{\"name\":\"_deadLine\",\"type\":\"uint256\"}],\"name\":\"blockTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_date\",\"type\":\"uint256\"},{\"name\":\"_presale\",\"type\":\"bool\"}],\"name\":\"buyTokenFromModerator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Given\",\"outputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"passDao\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setFundingStartTime\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"uint256\"},{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"sendPendingAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"FundedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPendingAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"sellTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blockedDeadLine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastFueledFundingID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"removeOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Client\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"weiGiven\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"HolderAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"TokenPriceInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"AmountToFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundings\",\"outputs\":[{\"name\":\"moderator\",\"type\":\"address\"},{\"name\":\"amountToFund\",\"type\":\"uint256\"},{\"name\":\"fundedAmount\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"closingTime\",\"type\":\"uint256\"},{\"name\":\"initialPriceMultiplier\",\"type\":\"uint256\"},{\"name\":\"inflationRate\",\"type\":\"uint256\"},{\"name\":\"totalWeiGiven\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"clonedFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_passDao\",\"type\":\"address\"},{\"name\":\"_clonedFrom\",\"type\":\"address\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_tokenDecimals\",\"type\":\"uint8\"},{\"name\":\"_token\",\"type\":\"bool\"},{\"name\":\"_transferable\",\"type\":\"bool\"},{\"name\":\"_initialPriceMultiplier\",\"type\":\"uint256\"},{\"name\":\"_inflationRate\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"Sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"TokenHolder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"TokenAmount\",\"type\":\"uint256\"}],\"name\":\"TokensCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"Moderator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ProposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"AmountToFund\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"StartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ClosingTime\",\"type\":\"uint256\"}],\"name\":\"FundingRulesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ProposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"FundedAmount\",\"type\":\"uint256\"}],\"name\":\"FundingFueled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TransferAble\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TransferDisable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"Buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"}]", "ContractName": "PassManager", "CompilerVersion": "v0.4.8+commit.60cc1668", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ad2d970edff30d8f166989470aaf4be3ff6375ae000000000000000000000000687b8760ffdc4b6649f457173647b855fcb322680000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000016d000000000000000000000000000000000000000000000000000000000000000a5061737320546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045041535300000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://4af547fcf6feffe959a8bb0639fe882a3b7f71da6fdea3759ac76fbd6d433538"}