{"SourceCode": "# @version 0.3.7\r\n\"\"\"\r\n@title yETH bootstrap\r\n@author 0xkorin, Yearn Finance\r\n@license Copyright (c) Yearn Finance, 2023 - all rights reserved\r\n@notice \r\n    Implements the bootstrap phase as outlined in YIP-72, summarized:\r\n    Contract defines multiple periods\r\n        - Whitelist period: LSD protocols apply to be whitelisted by depositing 1 ETH\r\n        - Deposit period: anyone can deposit ETH, which mints st-yETH 1:1 locked into the contract\r\n        - Incentive period: anyone is able to incentivize voting for a whitelisted protocol by depositing tokens\r\n        - Vote period: depositors are able to vote on their preferred whitelisted protocol\r\n    After the vote period up to 5 protocols are declared as winner.\r\n    Incentives for winning protocols will be distributed over all voters according to their overall vote weight, \r\n    regardless whether they voted for that specific protocol or not.\r\n    Protocols that do not win will have their incentives refunded.\r\n    10% of deposited ETH is sent to the POL.\r\n    90% of deposited ETH is used to buy LSDs and deposit into the newly deployed yETH pool.\r\n    The minted yETH is used to pay off 90% of the debt in the bootstrap contract.\r\n    Depositor's st-yETH become withdrawable after a specific time.\r\n\r\n    This contract is used to lock new st-yETH on behalf of original bootstrap depositors, following the deployment \r\n    of the new version of the staking contract. The yETH underlying the original bootstrap contract has been burned.\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\ninterface Token:\r\n    def mint(_account: address, _amount: uint256): nonpayable\r\n    def burn(_account: address, _amount: uint256): nonpayable\r\n\r\ninterface Staking:\r\n    def deposit(_assets: uint256) -> uint256: nonpayable\r\n\r\ntoken: public(immutable(address))\r\nstaking: public(immutable(address))\r\ntreasury: public(immutable(address))\r\npol: public(immutable(address))\r\nmanagement: public(address)\r\npending_management: public(address)\r\ndepositor: public(address)\r\nrepay_allowed: public(HashMap[address, bool])\r\n\r\napplications: HashMap[address, uint256]\r\ndebt: public(uint256)\r\ndeposited: public(uint256)\r\ndeposits: public(HashMap[address, uint256]) # user => amount deposited\r\nincentives: public(HashMap[address, HashMap[address, uint256]]) # protocol => incentive => amount\r\nincentive_depositors: public(HashMap[address, HashMap[address, HashMap[address, uint256]]]) # protocol => incentive => depositor => amount\r\nvoted: public(uint256)\r\nvotes_used: public(HashMap[address, uint256]) # user => votes used\r\nvotes_used_protocol: public(HashMap[address, HashMap[address, uint256]]) # user => protocol => votes\r\nvotes: public(HashMap[address, uint256]) # protocol => votes\r\nwinners_list: public(DynArray[address, MAX_WINNERS])\r\nwinners: public(HashMap[address, bool]) # protocol => winner?\r\nincentive_claimed: public(HashMap[address, HashMap[address, HashMap[address, bool]]]) # winner => incentive => user => claimed?\r\n\r\nwhitelist_begin: public(uint256)\r\nwhitelist_end: public(uint256)\r\nincentive_begin: public(uint256)\r\nincentive_end: public(uint256)\r\ndeposit_begin: public(uint256)\r\ndeposit_end: public(uint256)\r\nvote_begin: public(uint256)\r\nvote_end: public(uint256)\r\nlock_end: public(uint256)\r\n\r\nevent Apply:\r\n    protocol: indexed(address)\r\n\r\nevent Whitelist:\r\n    protocol: indexed(address)\r\n\r\nevent Incentivize:\r\n    protocol: indexed(address)\r\n    incentive: indexed(address)\r\n    depositor: indexed(address)\r\n    amount: uint256\r\n\r\nevent Deposit:\r\n    depositor: indexed(address)\r\n    receiver: indexed(address)\r\n    amount: uint256\r\n\r\nevent Claim:\r\n    claimer: indexed(address)\r\n    receiver: indexed(address)\r\n    amount: uint256\r\n\r\nevent Vote:\r\n    voter: indexed(address)\r\n    protocol: indexed(address)\r\n    amount: uint256\r\n\r\nevent Repay:\r\n    payer: indexed(address)\r\n    amount: uint256\r\n\r\nevent Split:\r\n    amount: uint256\r\n\r\nevent ClaimIncentive:\r\n    protocol: indexed(address)\r\n    incentive: indexed(address)\r\n    claimer: indexed(address)\r\n    amount: uint256\r\n\r\nevent RefundIncentive:\r\n    protocol: indexed(address)\r\n    incentive: indexed(address)\r\n    depositor: indexed(address)\r\n    amount: uint256\r\n\r\nevent SetPeriod:\r\n    period: indexed(uint256)\r\n    begin: uint256\r\n    end: uint256\r\n\r\nevent Winners:\r\n    winners: DynArray[address, MAX_WINNERS]\r\n\r\nevent PendingManagement:\r\n    management: indexed(address)\r\n\r\nevent SetManagement:\r\n    management: indexed(address)\r\n\r\nNOTHING: constant(uint256) = 0\r\nAPPLIED: constant(uint256) = 1\r\nWHITELISTED: constant(uint256) = 2\r\nMAX_WINNERS: constant(uint256) = 5\r\n\r\n@external\r\ndef __init__(_token: address, _staking: address, _treasury: address, _pol: address):\r\n    \"\"\"\r\n    @notice Constructor\r\n    @param _token yETH token address\r\n    @param _staking st-yETH token address\r\n    @param _treasury Treasury address\r\n    @param _pol POL address\r\n    \"\"\"\r\n    token = _token\r\n    staking = _staking\r\n    treasury = _treasury\r\n    pol = _pol\r\n    self.management = msg.sender\r\n    self.depositor = msg.sender\r\n    assert ERC20(token).approve(_staking, max_value(uint256), default_return_value=True)\r\n\r\n@external\r\n@payable\r\ndef apply(_protocol: address):\r\n    \"\"\"\r\n    @notice\r\n        As a LSD protocol apply to be whitelisted for potential inclusion into the yETH pool.\r\n        Requires an application fee of 1 ETH to be sent along with the call\r\n    @param _protocol The LSD protocol token address\r\n    \"\"\"\r\n    assert msg.value == 1_000_000_000_000_000_000 # dev: application fee\r\n    assert block.timestamp >= self.whitelist_begin and block.timestamp < self.whitelist_end # dev: outside application period\r\n    assert self.applications[_protocol] == NOTHING # dev: already applied\r\n    self.applications[_protocol] = APPLIED\r\n    log Apply(_protocol)\r\n\r\n@external\r\ndef incentivize(_protocol: address, _incentive: address, _amount: uint256):\r\n    \"\"\"\r\n    @notice\r\n        Incentivize depositors to vote on a specific protocol.\r\n        Deposited incentives are refunded if the protocol does not receive sufficient votes to be included in the yETH pool\r\n    @param _protocol The LSD protocol address\r\n    @param _incentive The incentive token address\r\n    @param _amount The amount of tokens to deposit as incentive\r\n    \"\"\"\r\n    assert _amount > 0\r\n    assert block.timestamp >= self.incentive_begin and block.timestamp < self.incentive_end # dev: outside incentive period\r\n    assert self.applications[_protocol] == WHITELISTED # dev: not whitelisted\r\n    self.incentives[_protocol][_incentive] += _amount\r\n    self.incentive_depositors[_protocol][_incentive][msg.sender] += _amount\r\n    assert ERC20(_incentive).transferFrom(msg.sender, self, _amount, default_return_value=True)\r\n    log Incentivize(_protocol, _incentive, msg.sender, _amount)\r\n\r\n@external\r\ndef deposit(_accounts: DynArray[address, 256], _amounts: DynArray[uint256, 256]):\r\n    assert msg.sender == self.depositor\r\n    assert len(_accounts) == len(_amounts)\r\n\r\n    total: uint256 = 0\r\n    for i in range(256):\r\n        if i == len(_accounts):\r\n            break\r\n        account: address = _accounts[i]\r\n        amount: uint256 = _amounts[i]\r\n        total += amount\r\n        self.deposits[account] += amount\r\n        log Deposit(msg.sender, account, amount)\r\n\r\n    self.debt += total\r\n    self.deposited += total\r\n    Token(token).mint(self, total)\r\n    Staking(staking).deposit(total)\r\n\r\n@external\r\ndef claim(_amount: uint256, _receiver: address = msg.sender):\r\n    \"\"\"\r\n    @notice Claim st-yETH once the lock has expired\r\n    @param _amount Amount of tokens to claim\r\n    @param _receiver Account to transfer the tokens to\r\n    \"\"\"\r\n    assert _amount > 0\r\n    assert block.timestamp >= self.lock_end\r\n    self.deposited -= _amount\r\n    self.deposits[msg.sender] -= _amount\r\n    assert ERC20(staking).transfer(_receiver, _amount, default_return_value=True)\r\n    log Claim(msg.sender, _receiver, _amount)\r\n\r\n@external\r\n@view\r\ndef votes_available(_account: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the amount of available votes for a specific account\r\n    @param _account The account to query for\r\n    @return Amount of available votes\r\n    \"\"\"\r\n    if block.timestamp < self.vote_begin or block.timestamp >= self.vote_end:\r\n        return 0\r\n\r\n    return self.deposits[_account] - self.votes_used[_account]\r\n\r\n@external\r\ndef vote(_protocols: DynArray[address, 32], _votes: DynArray[uint256, 32]):\r\n    \"\"\"\r\n    @notice Vote for whitelisted protocols to be included into the pool\r\n    @param _protocols Protocols to vote for\r\n    @param _votes Amount of votes to allocate for each protocol\r\n    \"\"\"\r\n    assert len(_protocols) == len(_votes)\r\n    assert block.timestamp >= self.vote_begin and block.timestamp < self.vote_end # dev: outside vote period\r\n    used: uint256 = 0\r\n    for i in range(32):\r\n        if i == len(_protocols):\r\n            break\r\n        protocol: address = _protocols[i]\r\n        votes: uint256 = _votes[i]\r\n        assert self.applications[protocol] == WHITELISTED # dev: protocol not whitelisted\r\n        used += votes\r\n        self.votes[protocol] += votes\r\n        self.votes_used_protocol[msg.sender][protocol] += votes\r\n        log Vote(msg.sender, protocol, votes)\r\n    self.voted += used\r\n    used += self.votes_used[msg.sender]\r\n    assert used <= self.deposits[msg.sender] # dev: too many votes\r\n    self.votes_used[msg.sender] = used\r\n\r\n@external\r\ndef undo_vote(_protocol: address, _account: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice Undo vote for a protocol that had their whitelist retracted\r\n    @param _protocol Protocol to undo votes for\r\n    @param _account Account to undo votes for\r\n    @return Amount of freed up votes\r\n    \"\"\"\r\n    assert block.timestamp >= self.vote_begin and block.timestamp < self.vote_end # dev: outside vote period\r\n    assert self.applications[_protocol] != WHITELISTED\r\n    assert _account == msg.sender or msg.sender == self.management\r\n    votes: uint256 = self.votes_used_protocol[_account][_protocol]\r\n    assert votes > 0\r\n    self.voted -= votes\r\n    self.votes[_protocol] -= votes\r\n    self.votes_used[_account] -= votes\r\n    self.votes_used_protocol[_account][_protocol] = 0\r\n    return votes\r\n\r\n@external\r\ndef repay(_amount: uint256):\r\n    \"\"\"\r\n    @notice Repay yETH debt by burning it\r\n    @param _amount Amount of debt to repay\r\n    @dev Requires prior permission by management\r\n    \"\"\"\r\n    assert self.repay_allowed[msg.sender]\r\n    self.debt -= _amount\r\n    assert ERC20(token).transferFrom(msg.sender, self, _amount, default_return_value=True)\r\n    Token(token).burn(self, _amount)\r\n    log Repay(msg.sender, _amount)\r\n\r\n@external\r\ndef split():\r\n    \"\"\"\r\n    @notice Split deposited ETH 9:1 between treasury and POL\r\n    \"\"\"\r\n    assert msg.sender == self.management or msg.sender == treasury\r\n    amount: uint256 = self.balance\r\n    assert amount > 0\r\n    log Split(amount)\r\n    raw_call(pol, b\"\", value=amount/10)\r\n    amount -= amount/10\r\n    raw_call(treasury, b\"\", value=amount)\r\n\r\n@external\r\n@view\r\ndef claimable_incentive(_protocol: address, _incentive: address, _claimer: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the amount of claimable incentives\r\n    @param _protocol Address of the LSD protocol to claim incentives for\r\n    @param _incentive Incentive token to claim\r\n    @param _claimer Account to query for\r\n    @return Amount of claimable incentive tokens\r\n    \"\"\"\r\n    if not self.winners[_protocol] or self.incentive_claimed[_protocol][_incentive][_claimer]:\r\n        return 0\r\n    return self.incentives[_protocol][_incentive] * self.votes_used[_claimer] / self.voted\r\n\r\n@external\r\ndef claim_incentive(_protocol: address, _incentive: address, _claimer: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice Claim a specific incentive\r\n    @param _protocol Address of the LSD protocol to claim incentives for\r\n    @param _incentive Incentive token to claim\r\n    @param _claimer Account to claim for\r\n    @return Amount of incentive tokens claimed\r\n    \"\"\"\r\n    assert self.winners[_protocol] # dev: protocol is not winner\r\n    assert not self.incentive_claimed[_protocol][_incentive][_claimer] # dev: incentive already claimed\r\n    \r\n    incentive: uint256 = self.incentives[_protocol][_incentive] * self.votes_used[_claimer] / self.voted\r\n    assert incentive > 0 # dev: nothing to claim\r\n\r\n    self.incentive_claimed[_protocol][_incentive][_claimer] = True\r\n    assert ERC20(_incentive).transfer(_claimer, incentive, default_return_value=True)\r\n    log ClaimIncentive(_protocol, _incentive, _claimer, incentive)\r\n    return incentive\r\n\r\n@external\r\ndef refund_incentive(_protocol: address, _incentive: address, _depositor: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice Refund incentive for protocols that did not win\r\n    @param _protocol Address of the LSD protocol to refund incentives for\r\n    @param _incentive Incentive token to refund\r\n    @param _depositor Account that deposited the incentive\r\n    @return Amount of incentive tokens refunded\r\n    \"\"\"\r\n    assert len(self.winners_list) > 0 # dev: no winners declared\r\n    assert not self.winners[_protocol] # dev: protocol is winner\r\n\r\n    amount: uint256 = self.incentive_depositors[_protocol][_incentive][_depositor]\r\n    assert amount > 0 # dev: nothing to refund\r\n\r\n    self.incentive_depositors[_protocol][_incentive][_depositor] = 0\r\n    assert ERC20(_incentive).transfer(_depositor, amount, default_return_value=True)\r\n    log RefundIncentive(_protocol, _incentive, _depositor, amount)\r\n    return amount\r\n\r\n@external\r\n@view\r\ndef has_applied(_protocol: address) -> bool:\r\n    \"\"\"\r\n    @notice Check whether the LSD protocol has applied to be whitelisted\r\n    @param _protocol Address of the LSD protocol to query for\r\n    @return True if the protocol has applied, False if it has not yet applied\r\n    \"\"\"\r\n    return self.applications[_protocol] > NOTHING\r\n\r\n@external\r\n@view\r\ndef is_whitelisted(_protocol: address) -> bool:\r\n    \"\"\"\r\n    @notice Check whether the LSD protocol is whitelisted\r\n    @param _protocol Address of the LSD protocol to query for\r\n    @return True if the protocol is whitelisted, False if it has not been whitelisted\r\n    \"\"\"\r\n    return self.applications[_protocol] == WHITELISTED\r\n\r\n@external\r\n@view\r\ndef num_winners() -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of declared winners\r\n    @return Number of declared winners\r\n    \"\"\"\r\n    return len(self.winners_list)\r\n\r\n# MANAGEMENT FUNCTIONS\r\n\r\n@external\r\ndef set_whitelist_period(_begin: uint256, _end: uint256):\r\n    \"\"\"\r\n    @notice Set the period during which protocols can apply to be whitelisted\r\n    @param _begin Timestamp of the beginning of the period\r\n    @param _end Timestamp of the end of the period\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    assert _end > _begin\r\n    self.whitelist_begin = _begin\r\n    self.whitelist_end = _end\r\n    log SetPeriod(0, _begin,  _end)\r\n\r\n@external\r\ndef set_incentive_period(_begin: uint256, _end: uint256):\r\n    \"\"\"\r\n    @notice Set the period during which incentives can be deposited\r\n    @dev Not allowed to start before the whitelist period\r\n    @param _begin Timestamp of the beginning of the period\r\n    @param _end Timestamp of the end of the period\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    assert _begin >= self.whitelist_begin\r\n    assert _end > _begin\r\n    self.incentive_begin = _begin\r\n    self.incentive_end = _end\r\n    log SetPeriod(1, _begin,  _end)\r\n\r\n@external\r\ndef set_deposit_period(_begin: uint256, _end: uint256):\r\n    \"\"\"\r\n    @notice Set the period during which users can deposit ETH for st-yETH\r\n    @dev Not allowed to start before the whitelist period\r\n    @param _begin Timestamp of the beginning of the period\r\n    @param _end Timestamp of the end of the period\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    assert _begin >= self.whitelist_begin\r\n    assert _end > _begin\r\n    self.deposit_begin = _begin\r\n    self.deposit_end = _end\r\n    log SetPeriod(2, _begin,  _end)\r\n\r\n@external\r\ndef set_vote_period(_begin: uint256, _end: uint256):\r\n    \"\"\"\r\n    @notice Set the period during which depositors can vote for protocols\r\n    @dev Not allowed to start before the deposit period\r\n    @param _begin Timestamp of the beginning of the period\r\n    @param _end Timestamp of the end of the period\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    assert _begin >= self.deposit_begin\r\n    assert _end > _begin\r\n    assert _end <= self.lock_end\r\n    self.vote_begin = _begin\r\n    self.vote_end = _end\r\n    log SetPeriod(3, _begin, _end)\r\n\r\n@external\r\ndef set_lock_end(_end: uint256):\r\n    \"\"\"\r\n    @notice Set the time the st-yETH lock ends\r\n    @dev Not allowed to be before the end of the vote period\r\n    @param _end Timestamp of the end of the lock\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    assert _end >= self.vote_end\r\n    self.lock_end = _end\r\n    log SetPeriod(4, 0, _end)\r\n\r\n@external\r\ndef whitelist(_protocol: address):\r\n    \"\"\"\r\n    @notice Whitelist a protocol \r\n    @param _protocol Address of the LSD protocol\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    assert self.applications[_protocol] == APPLIED # dev: has not applied\r\n    self.applications[_protocol] = WHITELISTED\r\n    log Whitelist(_protocol)\r\n\r\n@external\r\ndef undo_whitelist(_protocol: address):\r\n    \"\"\"\r\n    @notice Undo a protocol whitelist. Should only be used in emergencies\r\n    @param _protocol Address of the LSD protocol\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    assert self.applications[_protocol] == WHITELISTED # dev: not whitelisted\r\n    self.applications[_protocol] = APPLIED\r\n\r\n@external\r\ndef declare_winners(_winners: DynArray[address, MAX_WINNERS]):\r\n    \"\"\"\r\n    @notice Declare the winners of the vote\r\n    @param _winners Addresses of the LSD protocols\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    assert block.timestamp >= self.incentive_end\r\n    assert block.timestamp >= self.deposit_end\r\n    assert block.timestamp >= self.vote_end\r\n    assert len(self.winners_list) == 0\r\n    for winner in _winners:\r\n        assert self.applications[winner] == WHITELISTED\r\n        assert not self.winners[winner]\r\n        self.winners_list.append(winner)\r\n        self.winners[winner] = True\r\n    log Winners(_winners)\r\n\r\n@external\r\ndef allow_repay(_account: address, _allow: bool):\r\n    \"\"\"\r\n    @notice Allow specific account to repay debt\r\n    @param _account Account to set permission for\r\n    @param _allow Flag whether to allow repayment or not\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    self.repay_allowed[_account] = _allow\r\n\r\n@external\r\ndef set_depositor(_depositor: address):\r\n    assert msg.sender == self.depositor\r\n    self.depositor = _depositor\r\n\r\n@external\r\ndef set_management(_management: address):\r\n    \"\"\"\r\n    @notice \r\n        Set the pending management address.\r\n        Needs to be accepted by that account separately to transfer management over\r\n    @param _management New pending management address\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    self.pending_management = _management\r\n    log PendingManagement(_management)\r\n\r\n@external\r\ndef accept_management():\r\n    \"\"\"\r\n    @notice \r\n        Accept management role.\r\n        Can only be called by account previously marked as pending management by current management\r\n    \"\"\"\r\n    assert msg.sender == self.pending_management\r\n    self.pending_management = empty(address)\r\n    self.management = msg.sender\r\n    log SetManagement(msg.sender)", "ABI": "[{\"name\":\"Apply\",\"inputs\":[{\"name\":\"protocol\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Whitelist\",\"inputs\":[{\"name\":\"protocol\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Incentivize\",\"inputs\":[{\"name\":\"protocol\",\"type\":\"address\",\"indexed\":true},{\"name\":\"incentive\",\"type\":\"address\",\"indexed\":true},{\"name\":\"depositor\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Deposit\",\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\",\"indexed\":true},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Claim\",\"inputs\":[{\"name\":\"claimer\",\"type\":\"address\",\"indexed\":true},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Vote\",\"inputs\":[{\"name\":\"voter\",\"type\":\"address\",\"indexed\":true},{\"name\":\"protocol\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Repay\",\"inputs\":[{\"name\":\"payer\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Split\",\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ClaimIncentive\",\"inputs\":[{\"name\":\"protocol\",\"type\":\"address\",\"indexed\":true},{\"name\":\"incentive\",\"type\":\"address\",\"indexed\":true},{\"name\":\"claimer\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RefundIncentive\",\"inputs\":[{\"name\":\"protocol\",\"type\":\"address\",\"indexed\":true},{\"name\":\"incentive\",\"type\":\"address\",\"indexed\":true},{\"name\":\"depositor\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetPeriod\",\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"begin\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"end\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Winners\",\"inputs\":[{\"name\":\"winners\",\"type\":\"address[]\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"PendingManagement\",\"inputs\":[{\"name\":\"management\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetManagement\",\"inputs\":[{\"name\":\"management\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_staking\",\"type\":\"address\"},{\"name\":\"_treasury\",\"type\":\"address\"},{\"name\":\"_pol\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"apply\",\"inputs\":[{\"name\":\"_protocol\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"incentivize\",\"inputs\":[{\"name\":\"_protocol\",\"type\":\"address\"},{\"name\":\"_incentive\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_accounts\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"votes_available\",\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"vote\",\"inputs\":[{\"name\":\"_protocols\",\"type\":\"address[]\"},{\"name\":\"_votes\",\"type\":\"uint256[]\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"undo_vote\",\"inputs\":[{\"name\":\"_protocol\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"undo_vote\",\"inputs\":[{\"name\":\"_protocol\",\"type\":\"address\"},{\"name\":\"_account\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"repay\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"split\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"claimable_incentive\",\"inputs\":[{\"name\":\"_protocol\",\"type\":\"address\"},{\"name\":\"_incentive\",\"type\":\"address\"},{\"name\":\"_claimer\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim_incentive\",\"inputs\":[{\"name\":\"_protocol\",\"type\":\"address\"},{\"name\":\"_incentive\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim_incentive\",\"inputs\":[{\"name\":\"_protocol\",\"type\":\"address\"},{\"name\":\"_incentive\",\"type\":\"address\"},{\"name\":\"_claimer\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"refund_incentive\",\"inputs\":[{\"name\":\"_protocol\",\"type\":\"address\"},{\"name\":\"_incentive\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"refund_incentive\",\"inputs\":[{\"name\":\"_protocol\",\"type\":\"address\"},{\"name\":\"_incentive\",\"type\":\"address\"},{\"name\":\"_depositor\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"has_applied\",\"inputs\":[{\"name\":\"_protocol\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"is_whitelisted\",\"inputs\":[{\"name\":\"_protocol\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"num_winners\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_whitelist_period\",\"inputs\":[{\"name\":\"_begin\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_incentive_period\",\"inputs\":[{\"name\":\"_begin\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_deposit_period\",\"inputs\":[{\"name\":\"_begin\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_vote_period\",\"inputs\":[{\"name\":\"_begin\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_lock_end\",\"inputs\":[{\"name\":\"_end\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"whitelist\",\"inputs\":[{\"name\":\"_protocol\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"undo_whitelist\",\"inputs\":[{\"name\":\"_protocol\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"declare_winners\",\"inputs\":[{\"name\":\"_winners\",\"type\":\"address[]\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"allow_repay\",\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_allow\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_depositor\",\"inputs\":[{\"name\":\"_depositor\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_management\",\"inputs\":[{\"name\":\"_management\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_management\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"staking\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"treasury\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"management\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pending_management\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"depositor\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"repay_allowed\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"debt\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"deposited\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"deposits\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"incentives\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"incentive_depositors\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"},{\"name\":\"arg2\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"voted\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"votes_used\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"votes_used_protocol\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"votes\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"winners_list\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"winners\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"incentive_claimed\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"},{\"name\":\"arg2\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"whitelist_begin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"whitelist_end\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"incentive_begin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"incentive_end\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"deposit_begin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"deposit_end\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vote_begin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vote_end\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lock_end\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]}]", "ContractName": "yETH bootstrap", "CompilerVersion": "vyper:0.3.7", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "0000000000000000000000001bed97cbc3c24a4fb5c069c6e311a967386131f7000000000000000000000000583019ff0f430721ada9cfb4fac8f06ca104d0b4000000000000000000000000feb4acf3df3cdea7399794d0869ef76a6efaff52000000000000000000000000929401e30aab6bd648def2d30ff44952bab04478", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}