{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/tontine/Arbitrator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Owned} from \\\"solmate/auth/Owned.sol\\\";\\nimport {ERC20} from \\\"solmate/tokens/ERC20.sol\\\";\\nimport {ECDSA} from \\\"openzeppelin/utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"openzeppelin/utils/cryptography/EIP712.sol\\\";\\n\\nimport {IArbitrator} from \\\"../interfaces/IArbitrator.sol\\\";\\n\\ncontract Arbitrator is Owned, IArbitrator, EIP712 {\\n    using ECDSA for bytes32;\\n\\n    /// Minimum random value\\n    uint256 private constant RAND_MIN = 1;\\n    /// Maximum random value\\n    uint256 private constant RAND_MAX = 25;\\n    /// Ante percentage e.g 1000 / 10000 = .1 = 10%\\n    uint128 private constant ANTE = 1000;\\n    /// Denominator for percentage values e.g 1000 / 10000 = .1 = 10%\\n    uint128 private constant DENOMINATOR = 10000;\\n    /// Maximum allowed fee percentage\\n    uint128 private constant MAX_FEE = 1000;\\n    /// Number of blocks before a given game can begin\\n    uint64 private constant START_DELAY = 99 seconds;\\n    /// TODO ? Time between turns ?\\n    uint64 private constant DEFAULT_CADENCE = 99 seconds;\\n    /// Minimum number of players in a given game\\n    uint8 private constant MIN_SEATS = 2;\\n    /// Maximum number of players in a given game\\n    uint8 private constant MAX_SEATS = 100;\\n    /// Randomness function signature\\n    bytes32 private constant RANDOMNESS_TYPEHASH =\\n        keccak256(\\\"Randomness(uint256 randomness,uint64 counter,uint256 id)\\\");\\n\\n    /// Fee receiver address\\n    address public feeController;\\n    /// Current fee percentage\\n    uint128 public fee = 500;\\n    /// Latest created game (array index)\\n    uint256 public currentId;\\n    /// Randomness supplier/signer address\\n    address public rngSource;\\n\\n    /// Bitmasked of allowed game modes\\n    uint256 private modeAllowlist;\\n    /// Current game balances\\n    mapping(address => uint256) private balances;\\n    /// Arrays of participants based on tontine ID\\n    mapping(uint256 => address[]) private participants;\\n    /// Assets allowed for game use\\n    mapping(address => bool) private assetAllowlist;\\n    /// Tontines\\n    mapping(uint256 => Tontine) private tontines;\\n    /// Activity tracking\\n    mapping(bytes32 => bool) private activityLog;\\n\\n    constructor(\\n        address _admin,\\n        address _feeController,\\n        address _rngSource\\n    ) Owned(_admin) EIP712(\\\"Tontine\\\", \\\"1\\\") {\\n        feeController = _feeController;\\n        rngSource = _rngSource;\\n    }\\n\\n    /// @notice Create a new Tontine\\n    /// @param _asset Game currency to be used\\n    /// @param _bet Starting bet amount\\n    /// @param _seats Number of players\\n    /// @param _betMode Lobby betting mode\\n    /// @param _rngMode Lobby RNG mode\\n    function create(\\n        address _asset,\\n        uint128 _bet,\\n        uint8 _seats,\\n        BetMode _betMode,\\n        RNGMode _rngMode\\n    ) external payable {\\n        if (tx.origin != msg.sender) revert NotEOA();\\n        if (_seats < MIN_SEATS || _seats > MAX_SEATS) revert InvalidSeatCount();\\n        if (_bet == 0) revert InvalidBet();\\n        if (!getBetModeAllowed(_betMode) || !getRNGModeAllowed(_rngMode))\\n            revert InvalidMode();\\n        if (!assetAllowlist[_asset]) revert InvalidAsset();\\n\\n        Tontine storage tontine = tontines[currentId];\\n        tontine.asset = _asset;\\n        tontine.seats = _seats;\\n        tontine.betMode = _betMode;\\n        tontine.rngMode = _rngMode;\\n        tontine.bet = _bet;\\n        tontine.balance = _bet;\\n        tontine.participantState = 1 << 127;\\n\\n        participants[currentId].push(msg.sender);\\n        unchecked {\\n            balances[_asset] += _bet;\\n            currentId++;\\n        }\\n\\n        activityLog[\\n            _getParticipantIdentifier(msg.sender, currentId - 1)\\n        ] = true;\\n\\n        if (_asset == address(0)) {\\n            if (msg.value != _bet) revert InvalidBet();\\n        } else {\\n            if (msg.value > 0) revert InvalidBet();\\n            ERC20(_asset).transferFrom(msg.sender, address(this), _bet);\\n        }\\n\\n        emit Created(currentId - 1, _bet, _asset);\\n        emit Joined(currentId - 1, msg.sender);\\n    }\\n\\n    /// @notice Join an existing Tontine\\n    /// @param _id Tontine ID\\n    function join(uint256 _id) external payable {\\n        Tontine storage tontine = tontines[_id];\\n        address asset = tontine.asset;\\n        uint128 bet = tontine.bet;\\n\\n        if (tx.origin != msg.sender) revert NotEOA();\\n        if (tontine.lastBetTime != 0) revert AlreadyStarted();\\n        // If the ID doesn't exist it will revert as \\\"Ended\\\"\\n        if (tontine.participantState == 0) revert Ended();\\n\\n        bytes32 participantId = _getParticipantIdentifier(msg.sender, _id);\\n        if (activityLog[participantId]) revert AlreadyJoined();\\n\\n        uint8 participantLength = uint8(participants[_id].length);\\n\\n        unchecked {\\n            tontine.participantState |= uint128(1 << (127 - participantLength));\\n            tontine.balance += bet;\\n            balances[asset] += bet;\\n        }\\n\\n        participants[_id].push(msg.sender);\\n        activityLog[participantId] = true;\\n\\n        // Start round if full\\n        if (++participantLength == tontine.seats) {\\n            // Schedule start time\\n            tontine.lastBetTime = uint64(block.timestamp) + START_DELAY;\\n            // Scramble order to keep odds uniform\\n            tontine.lastIndex = _scramble(tontine.seats);\\n\\n            // Deduct fee on start such that participants are not charged fees when leaving\\n            uint128 feeDelta = tontine.balance -\\n                _getBetAfterFee(tontine.balance);\\n            unchecked {\\n                tontine.balance -= feeDelta;\\n                balances[asset] -= feeDelta;\\n            }\\n\\n            emit Started(_id);\\n        }\\n\\n        if (asset == address(0)) {\\n            if (msg.value != bet) revert InvalidBet();\\n        } else {\\n            if (msg.value != 0) revert InvalidBet();\\n            ERC20(asset).transferFrom(msg.sender, address(this), bet);\\n        }\\n\\n        emit Joined(currentId, msg.sender);\\n    }\\n\\n    /// @notice Leave a tontine lobby (that hasn't started yet)\\n    /// @param _id Tontine ID\\n    /// @param _index Participant array ID\\n    function leave(uint256 _id, uint8 _index) external {\\n        Tontine storage tontine = tontines[_id];\\n        address[] storage participantArray = participants[_id];\\n\\n        if (tx.origin != msg.sender) revert NotEOA();\\n        if (tontine.lastBetTime != 0) revert AlreadyStarted();\\n        if (participantArray[_index] != msg.sender) revert NotJoined();\\n\\n        uint128 bet = tontine.bet;\\n        address asset = tontine.asset;\\n        unchecked {\\n            balances[tontine.asset] -= bet;\\n            tontine.balance -= bet;\\n        }\\n\\n        // Clear state\\n        if (participantArray.length <= 1) {\\n            delete participants[_id];\\n            delete tontines[_id];\\n            emit Claimed(_id, address(0), address(0), 0);\\n        } else {\\n            participantArray[_index] = participantArray[\\n                participantArray.length - 1\\n            ];\\n            participantArray.pop();\\n            tontine.participantState ^= uint128(\\n                1 << (127 - participantArray.length)\\n            );\\n        }\\n\\n        delete activityLog[_getParticipantIdentifier(msg.sender, _id)];\\n\\n        // Return funds\\n        if (asset == address(0)) {\\n            payable(msg.sender).transfer(bet);\\n        } else {\\n            ERC20(asset).transfer(msg.sender, bet);\\n        }\\n\\n        emit Left(_id, msg.sender);\\n    }\\n\\n    /// @notice Leave an already started game - funds will NOT be returned\\n    /// @param _id Tontine ID\\n    /// @param _index Participant array ID\\n    function fold(uint256 _id, uint8 _index) external {\\n        Tontine storage tontine = tontines[_id];\\n        uint64 lastBetTime = tontine.lastBetTime;\\n\\n        if (tx.origin != msg.sender) revert NotEOA();\\n        if (lastBetTime == 0 || lastBetTime > block.timestamp)\\n            revert NotStarted();\\n        if (participants[_id][_index] != msg.sender) revert NotJoined();\\n\\n        (\\n            uint128 participantState,\\n            bool ended,\\n            uint256 currentIndex\\n        ) = _updateParticipantState(\\n                tontine.participantState,\\n                tontine.lastIndex,\\n                lastBetTime,\\n                tontine.seats\\n            );\\n\\n        if (currentIndex != _index) revert NotTurn();\\n        if (ended || _isLastAlive(participantState, _index)) revert Ended();\\n        if (!_isAlive(participantState, _index)) revert PlayerNotAlive();\\n\\n        tontine.participantState = _killPlayer(participantState, _index);\\n        tontine.lastIndex = _index;\\n        tontine.lastBetTime = uint64(block.timestamp);\\n        ++tontine.counter;\\n\\n        emit Folded(_id, msg.sender);\\n    }\\n\\n    /// Play your turn\\n    /// @param _id Tontine ID\\n    /// @param _index Participant array ID\\n    /// @param _bet Bet amount in  wei\\n    /// @param _rng Randomness data\\n    /// @param _sig Signed randomness data\\n    function play(\\n        uint256 _id,\\n        uint8 _index,\\n        uint128 _bet,\\n        Randomness calldata _rng,\\n        bytes calldata _sig\\n    ) external payable {\\n        Tontine storage tontine = tontines[_id];\\n        uint64 lastBetTime = tontine.lastBetTime;\\n\\n        if (tx.origin != msg.sender) revert NotEOA();\\n        if (lastBetTime == 0 || lastBetTime > block.timestamp)\\n            revert NotStarted();\\n        if (participants[_id][_index] != msg.sender) revert NotJoined();\\n\\n        if (tontine.counter > 0 && tontine.rngMode == RNGMode.RANDOM) {\\n            uint32 counter = tontine.counter;\\n            if (_rng.id != _id) revert InvalidID();\\n            if (_rng.counter != counter) revert InvalidCounter();\\n            _validateRandomness(_rng, _sig);\\n\\n            if (\\n                _shouldKillLastPlayer(\\n                    _id,\\n                    counter,\\n                    tontine.rngMode,\\n                    _rng.randomness\\n                )\\n            ) {\\n                tontine.participantState = _killPlayer(\\n                    tontine.participantState,\\n                    tontine.lastIndex\\n                );\\n            }\\n        }\\n\\n        (\\n            uint128 participantState,\\n            bool ended,\\n            uint256 currentIndex\\n        ) = _updateParticipantState(\\n                tontine.participantState,\\n                tontine.lastIndex,\\n                lastBetTime,\\n                tontine.seats\\n            );\\n\\n        if (currentIndex != _index) revert NotTurn();\\n        if (ended || _isLastAlive(participantState, _index)) revert Ended();\\n\\n        // Handling for alternate bet modes\\n        if (_bet >= tontine.bet && tontine.betMode == BetMode.VARIABLE) {\\n            tontine.bet = _bet;\\n        } else if (tontine.betMode == BetMode.ANTE) {\\n            tontine.bet = (tontine.bet * (DENOMINATOR + ANTE)) / DENOMINATOR;\\n        }\\n\\n        uint128 betAfterFee = _getBetAfterFee(tontine.bet);\\n        tontine.balance += betAfterFee;\\n        balances[tontine.asset] += betAfterFee;\\n        tontine.lastBetTime = uint64(block.timestamp);\\n        tontine.lastIndex = _index;\\n        tontine.participantState = participantState;\\n        ++tontine.counter;\\n\\n        if (tontine.asset == address(0)) {\\n            if (msg.value != tontine.bet) revert InvalidBet();\\n        } else {\\n            if (msg.value > 0) revert InvalidBet();\\n            ERC20(tontine.asset).transferFrom(\\n                msg.sender,\\n                address(this),\\n                tontine.bet\\n            );\\n        }\\n\\n        emit Played(_id, msg.sender, tontine.bet);\\n    }\\n\\n    /// @notice Claim winnings when you're the last person standing\\n    /// @param _id Tontine ID\\n    /// @param _index Participant array ID\\n    /// @param _rng Randomness data\\n    /// @param _sig Signed randomness data\\n    function claim(\\n        uint256 _id,\\n        uint8 _index,\\n        Randomness calldata _rng,\\n        bytes calldata _sig\\n    ) external {\\n        Tontine storage tontine = tontines[_id];\\n        uint64 lastBetTime = tontine.lastBetTime;\\n\\n        if (tx.origin != msg.sender) revert NotEOA();\\n        if (tontine.participantState == 0) revert AlreadyClaimed();\\n        if (lastBetTime == 0 || lastBetTime > block.timestamp)\\n            revert NotStarted();\\n        if (participants[_id][_index] != msg.sender) revert NotJoined();\\n\\n        if (tontine.counter > 0 && tontine.rngMode == RNGMode.RANDOM) {\\n            uint32 counter = tontine.counter;\\n            if (_rng.id != _id) revert InvalidID();\\n            if (_rng.counter != counter) revert InvalidCounter();\\n            _validateRandomness(_rng, _sig);\\n\\n            if (\\n                _shouldKillLastPlayer(\\n                    _id,\\n                    counter,\\n                    tontine.rngMode,\\n                    _rng.randomness\\n                )\\n            ) {\\n                tontine.participantState = _killPlayer(\\n                    tontine.participantState,\\n                    tontine.lastIndex\\n                );\\n            }\\n        }\\n\\n        (uint128 participantState, bool ended, ) = _updateParticipantState(\\n            tontine.participantState,\\n            tontine.lastIndex,\\n            lastBetTime,\\n            tontine.seats\\n        );\\n\\n        if (!_isAlive(participantState, _index)) revert PlayerNotAlive();\\n        if (!ended && !_isLastAlive(participantState, _index)) revert Running();\\n\\n        uint128 amount = tontine.balance;\\n\\n        tontine.balance = 0;\\n        unchecked {\\n            balances[tontine.asset] -= amount;\\n        }\\n        address asset = tontine.asset;\\n\\n        delete tontines[_id];\\n        delete participants[_id];\\n\\n        // Return funds\\n        if (asset == address(0)) {\\n            payable(msg.sender).transfer(amount);\\n        } else {\\n            ERC20(asset).transfer(msg.sender, amount);\\n        }\\n\\n        emit Claimed(_id, msg.sender, asset, amount);\\n    }\\n\\n    /// @notice Collect and send held fees to controller\\n    /// @dev Use zero address for native currency\\n    /// @param _asset Asset to be collected\\n    function collectFees(address _asset) external {\\n        if (!assetAllowlist[_asset]) revert InvalidAsset();\\n\\n        if (_asset == address(0)) {\\n            payable(feeController).transfer(\\n                address(this).balance - balances[_asset]\\n            );\\n        } else {\\n            ERC20(_asset).transfer(\\n                feeController,\\n                ERC20(_asset).balanceOf(address(this)) - balances[_asset]\\n            );\\n        }\\n    }\\n\\n    /// @notice Sets a new controller address\\n    /// @param _feeController New controller address\\n    function setFeeController(address _feeController) external {\\n        if (msg.sender != feeController) revert InvalidCaller();\\n        feeController = _feeController;\\n    }\\n\\n    /// @notice Sets a new fee\\n    /// @dev Fee is determined by division e.g 500 / 10000 = .05 = 5%\\n    /// @param _fee New fee percentage\\n    function setFee(uint128 _fee) external {\\n        if (msg.sender != feeController) revert InvalidCaller();\\n        if (_fee > MAX_FEE) revert MaxFeeExceeded();\\n        fee = _fee;\\n    }\\n\\n    /// @notice White/blacklists a given asset\\n    /// @dev Use  zero address for native currency\\n    /// @param _asset Asset to be allowed/disallowed\\n    /// @param _allowed Is this asset allowed?\\n    function setAssetAllowlist(\\n        address _asset,\\n        bool _allowed\\n    ) external onlyOwner {\\n        assetAllowlist[_asset] = _allowed;\\n    }\\n\\n    /// @notice Sets a new bitmask of allowed game modes\\n    /// @param _allowlist New mode allow list value\\n    function setModeAllowlist(uint256 _allowlist) external onlyOwner {\\n        modeAllowlist = _allowlist;\\n    }\\n\\n    /// @notice Sets the signer that is in charge of supplying randomness\\n    /// @param _rngSource New signer address\\n    function setRNGSource(address _rngSource) external onlyOwner {\\n        rngSource = _rngSource;\\n    }\\n\\n    /// @notice Helper to more easily determine if a bet mode is allowed as opposed to shifting bitmask\\n    /// @param _mode Betmode enum value\\n    /// @return Is the supplied mode allowed?\\n    function getBetModeAllowed(\\n        BetMode _mode\\n    ) public view override returns (bool) {\\n        return ((modeAllowlist >> uint8(_mode)) & 1) == 1;\\n    }\\n\\n    /// @notice Helper to more easily determine if a bet mode is allowed as opposed to shifting bitmask\\n    /// @param _mode RNG enum value\\n    /// @return Is the supplied mode allowed?\\n    function getRNGModeAllowed(\\n        RNGMode _mode\\n    ) public view override returns (bool) {\\n        return ((modeAllowlist >> (uint8(_mode) + 128)) & 1) == 1;\\n    }\\n\\n    /// TODO: Is this needed? Appears unused.  Document if needed\\n    function getRandomness(\\n        uint256 _id,\\n        uint64 _counter\\n    ) public pure override returns (uint256) {\\n        return (uint256(keccak256(abi.encodePacked(_id, _counter))) % RAND_MAX);\\n    }\\n\\n    /// Participant state for a given lobby\\n    /// @param _id Tontine ID\\n    /// @param _rng Randomness data\\n    /// @return Participant state\\n    /// @return Last player index\\n    /// @return Seats in tontine\\n    function getParticipantState(\\n        uint256 _id,\\n        Randomness calldata _rng\\n    ) public view override returns (uint128, bool, uint256) {\\n        Tontine memory tontine = tontines[_id];\\n        uint64 lastBetTime = tontine.lastBetTime;\\n\\n        if (lastBetTime == 0) {\\n            return (tontine.participantState, false, 0);\\n        }\\n\\n        if (tontine.counter > 0 && tontine.rngMode == RNGMode.RANDOM) {\\n            if (\\n                _shouldKillLastPlayer(\\n                    _id,\\n                    tontine.counter,\\n                    tontine.rngMode,\\n                    _rng.randomness\\n                )\\n            ) {\\n                tontine.participantState = _killPlayer(\\n                    tontine.participantState,\\n                    tontine.lastIndex\\n                );\\n            }\\n        }\\n\\n        return\\n            _updateParticipantState(\\n                tontine.participantState,\\n                tontine.lastIndex,\\n                lastBetTime,\\n                tontine.seats\\n            );\\n    }\\n\\n    /// TODO: Duplicate function, not exactly necessary.  Change internal visibility on original (ln 600)\\n    function getParticipantIdentifier(\\n        address _participant,\\n        uint256 _id\\n    ) external pure override returns (bytes32) {\\n        return _getParticipantIdentifier(_participant, _id);\\n    }\\n\\n    /// Gets amount after fees\\n    /// @dev Use WEI\\n    /// @param _amount Amount in\\n    /// @return Amount out\\n    function getAmountAfterFee(\\n        uint256 _amount\\n    ) external view override returns (uint256) {\\n        return (_amount * (DENOMINATOR - fee)) / DENOMINATOR;\\n    }\\n\\n    /// Gets a tontine\\n    /// @param _id Tontine ID\\n    function getTontine(\\n        uint256 _id\\n    ) external view override returns (Tontine memory) {\\n        return (tontines[_id]);\\n    }\\n\\n    /// Checks if a given address/participant is still active\\n    /// @param _participant Participant address\\n    /// @param _id Tontine ID\\n    /// @return Is participant active?\\n    function isActive(\\n        address _participant,\\n        uint256 _id\\n    ) external view override returns (bool) {\\n        return activityLog[_getParticipantIdentifier(_participant, _id)];\\n    }\\n\\n    /// Gets balance of supplied token address (contract accounting)\\n    /// @dev Amount returned in WEI\\n    /// @dev Use zero address for base currency\\n    /// @param _token Token address\\n    function getBalance(\\n        address _token\\n    ) external view override returns (uint256) {\\n        return balances[_token];\\n    }\\n\\n    /// Gets address for supplied IDs\\n    /// @param _id Tontine ID\\n    /// @param _index Participant array ID\\n    /// @return Participant address\\n    function getParticipant(\\n        uint256 _id,\\n        uint256 _index\\n    ) external view override returns (address) {\\n        return participants[_id][_index];\\n    }\\n\\n    /// Gets all participants in a given lobby\\n    /// @param _id Tontine ID\\n    /// @return Array of participants\\n    function getParticipants(\\n        uint256 _id\\n    ) external view override returns (address[] memory) {\\n        return participants[_id];\\n    }\\n\\n    /// Checks if an asset is allowed for game\\n    /// @dev Use zero address for base currency\\n    /// @param _asset Asset/token address\\n    /// @return Is asset allowed?\\n    function getAssetAllowed(\\n        address _asset\\n    ) external view override returns (bool) {\\n        return assetAllowlist[_asset];\\n    }\\n\\n    /// Hashes randomness data\\n    /// @param _rng Randomness data\\n    /// @return Hashed randomness data\\n    function randomnessHash(\\n        Randomness memory _rng\\n    ) public view returns (bytes32) {\\n        return\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        RANDOMNESS_TYPEHASH,\\n                        _rng.randomness,\\n                        _rng.counter,\\n                        _rng.id\\n                    )\\n                )\\n            );\\n    }\\n\\n    /// Validates signed randomness data\\n    /// @param _rng Randomness data\\n    /// @param _sig Signed randomness data\\n    function _validateRandomness(\\n        Randomness memory _rng,\\n        bytes memory _sig\\n    ) internal view {\\n        bytes32 hash = randomnessHash(_rng);\\n        address signer = ECDSA.recover(hash, _sig);\\n        if (signer != rngSource) revert InvalidSigner();\\n    }\\n\\n    /// Shuffle index\\n    /// @param _range Number of seats/players\\n    /// @return Shuffled index within bounds\\n    function _scramble(uint8 _range) internal view returns (uint8) {\\n        return\\n            uint8(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(block.prevrandao, block.timestamp)\\n                    )\\n                )\\n            ) % _range;\\n    }\\n\\n    /// TODO: Same as ln 432.  Remove?\\n    function _getBetAfterFee(uint128 _amount) internal view returns (uint128) {\\n        return (_amount * (DENOMINATOR - fee)) / DENOMINATOR;\\n    }\\n\\n    /// Checks if player is alive\\n    /// @param _participantState Participant state bitmask\\n    /// @param _index Participant array ID\\n    /// @return Is player alive?\\n    function _isAlive(\\n        uint128 _participantState,\\n        uint8 _index\\n    ) internal pure returns (bool) {\\n        uint128 liveMask = uint128(1 << (127 - _index));\\n\\n        return (liveMask & _participantState) != 0;\\n    }\\n\\n    /// Checks if player is last alive\\n    /// @param _participantState Participant state bitmask\\n    /// @param _index Participant array ID\\n    function _isLastAlive(\\n        uint128 _participantState,\\n        uint8 _index\\n    ) internal pure returns (bool) {\\n        return (_killPlayer(_participantState, _index) == 0);\\n    }\\n\\n    /// Kills a designated player\\n    /// @param _participantState Participant state bitmask\\n    /// @param _index Participant array ID\\n    /// @return Updated state with designated player killed\\n    function _killPlayer(\\n        uint128 _participantState,\\n        uint8 _index\\n    ) internal pure returns (uint128) {\\n        uint128 deadMask = ~uint128(1 << (127 - _index));\\n\\n        return deadMask & _participantState;\\n    }\\n\\n    /// Updates tontine participants state\\n    /// @param _participantState Participant state bitmask\\n    /// @param _lastIndex Last player index on participant state\\n    /// @param _lastBetTime Last time a bet was received, or when game started\\n    /// @param _seats Number of players/seats in lobby\\n    /// @return Participant state\\n    /// @return Is last alive?\\n    /// @return Next player index\\n    function _updateParticipantState(\\n        uint128 _participantState,\\n        uint64 _lastIndex,\\n        uint64 _lastBetTime,\\n        uint8 _seats\\n    ) internal view returns (uint128, bool, uint256) {\\n        if (_seats == 0) return (0, false, 0);\\n        if (_lastBetTime > block.timestamp)\\n            return (_participantState, false, (_lastIndex + 1) % _seats);\\n\\n        uint256 iterations = (block.timestamp - _lastBetTime) / DEFAULT_CADENCE;\\n\\n        for (uint256 i = 1; i <= iterations; i++) {\\n            uint8 index = uint8((_lastIndex + i) % _seats);\\n\\n            if (_isAlive(_participantState, index)) {\\n                if (_isLastAlive(_participantState, index)) {\\n                    return (_participantState, true, index);\\n                } else {\\n                    _participantState = _killPlayer(_participantState, index);\\n                }\\n            } else {\\n                unchecked {\\n                    ++iterations;\\n                }\\n            }\\n        }\\n\\n        uint256 newIndex = (_lastIndex + iterations + 1) % _seats;\\n\\n        // Assign index to next living player\\n        for (uint256 i = 0; i < _seats - 1; i++) {\\n            if (_isAlive(_participantState, uint8((newIndex + i) % _seats))) {\\n                newIndex = uint8((newIndex + i) % _seats);\\n                break;\\n            }\\n        }\\n\\n        return (\\n            _participantState,\\n            _isLastAlive(_participantState, uint8(newIndex)),\\n            newIndex\\n        );\\n    }\\n\\n    /// Check if last player should be killed\\n    /// @param _id Participant array ID\\n    /// @param _counter RNG counter\\n    /// @param _rngMode RNG enum value\\n    /// @param randomness Randomness int\\n    /// @return Should last player be killed?\\n    function _shouldKillLastPlayer(\\n        uint256 _id,\\n        uint64 _counter,\\n        RNGMode _rngMode,\\n        uint256 randomness\\n    ) internal pure returns (bool) {\\n        if (_rngMode == RNGMode.RANDOM) {\\n            uint256 seed = uint256(keccak256(abi.encodePacked(randomness)));\\n\\n            uint256 range = (uint256(\\n                keccak256(abi.encodePacked(_id, _counter))\\n            ) % RAND_MAX);\\n\\n            return (seed % 100) <= range;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// Get hashed identifier\\n    /// @param _participant Participant/player address\\n    /// @param _id Participant array ID\\n    /// @return Participant identifier\\n    function _getParticipantIdentifier(\\n        address _participant,\\n        uint256 _id\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(_participant, _id));\\n    }\\n\\n    /// @dev Prevent direct sending of funds\\n    receive() external payable {\\n        revert();\\n    }\\n\\n    /// @dev default\\n    fallback() external {\\n        revert();\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/auth/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IArbitrator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IArbitratorErrors} from \\\"./IArbitratorErrors.sol\\\";\\nimport {IArbitratorEvents} from \\\"./IArbitratorEvents.sol\\\";\\nimport {IArbitratorData} from \\\"./IArbitratorData.sol\\\";\\n\\ninterface IArbitrator is IArbitratorErrors, IArbitratorEvents, IArbitratorData {\\n    /*////////////////////////////////////////////////////////////// \\n                                  Core                          \\n    //////////////////////////////////////////////////////////////*/\\n\\n    function create(\\n        address _asset,\\n        uint128 _bet,\\n        uint8 _seats,\\n        BetMode _betMode,\\n        RNGMode _rngMode\\n    ) external payable;\\n\\n    function join(uint256 _id) external payable;\\n\\n    function leave(uint256 _id, uint8 _index) external;\\n\\n    function fold(uint256 _id, uint8 _index) external;\\n\\n    function play(\\n        uint256 _id,\\n        uint8 _index,\\n        uint128 _bet,\\n        Randomness calldata _rng,\\n        bytes calldata _sig\\n    ) external payable;\\n\\n    function claim(\\n        uint256 _id,\\n        uint8 _index,\\n        Randomness calldata _rng,\\n        bytes calldata _sig\\n    ) external;\\n\\n    function collectFees(address _asset) external;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                  Views\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function rngSource() external view returns (address);\\n\\n    function fee() external view returns (uint128);\\n\\n    function currentId() external view returns (uint256);\\n\\n    function getBalance(address _token) external view returns (uint256);\\n\\n    function getParticipant(\\n        uint256 _id,\\n        uint256 _index\\n    ) external view returns (address);\\n\\n    function getParticipants(\\n        uint256 _id\\n    ) external view returns (address[] memory);\\n\\n    function getAssetAllowed(address _asset) external view returns (bool);\\n\\n    function getBetModeAllowed(BetMode _mode) external view returns (bool);\\n\\n    function getRNGModeAllowed(RNGMode _mode) external view returns (bool);\\n\\n    function getRandomness(\\n        uint256 _id,\\n        uint64 _counter\\n    ) external view returns (uint256);\\n\\n    function getTontine(uint256 _id) external view returns (Tontine memory);\\n\\n    function getAmountAfterFee(uint256 _amount) external view returns (uint256);\\n\\n    function isActive(\\n        address _participant,\\n        uint256 _id\\n    ) external view returns (bool);\\n\\n    function getParticipantState(\\n        uint256 _id,\\n        Randomness calldata _rng\\n    ) external view returns (uint128, bool, uint256);\\n\\n    function getParticipantIdentifier(\\n        address _participant,\\n        uint256 _id\\n    ) external pure returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IArbitratorErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IArbitratorErrors {\\n    /*////////////////////////////////////////////////////////////// \\n                                 Errors                              \\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice caller not EOA.\\n    error NotEOA();\\n\\n    /// @notice invalid asset.\\n    error InvalidAsset();\\n\\n    /// @notice invalid caller.\\n    error InvalidCaller();\\n\\n    /// @notice provided fee greater than maximum allowed.\\n    error MaxFeeExceeded();\\n\\n    /// @notice number of seats are invalid.\\n    error InvalidSeatCount();\\n\\n    /// @notice invalid bet size.\\n    error InvalidBet();\\n\\n    /// @notice invalid mode.\\n    error InvalidMode();\\n\\n    /// @notice game already started.\\n    error AlreadyStarted();\\n\\n    /// @notice game not started.\\n    error NotStarted();\\n\\n    /// @notice game already joined.\\n    error AlreadyJoined();\\n\\n    /// @notice game not joined.\\n    error NotJoined();\\n\\n    /// @notice not player's turn.\\n    error NotTurn();\\n\\n    /// @notice game ended.\\n    error Ended();\\n\\n    /// @notice game running.\\n    error Running();\\n\\n    /// @notice player no longer participating.\\n    error PlayerNotAlive();\\n\\n    /// @notice already claimed.\\n    error AlreadyClaimed();\\n\\n    /// @notice invalid signer.\\n    error InvalidSigner();\\n\\n    /// @notice invalid signer.\\n    error InvalidID();\\n\\n    /// @notice invalid signer.\\n    error InvalidCounter();\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IArbitratorEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IArbitratorEvents {\\n    /*////////////////////////////////////////////////////////////// \\n                                 Events                              \\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Created(\\n        uint256 indexed id,\\n        uint256 indexed bet,\\n        address indexed asset\\n    );\\n\\n    event Joined(uint256 indexed id, address indexed participant);\\n\\n    event Left(uint256 indexed id, address indexed participant);\\n\\n    event Played(uint256 indexed id, address indexed participant, uint128 bet);\\n\\n    event Folded(uint256 indexed id, address indexed participant);\\n\\n    event Claimed(\\n        uint256 indexed id,\\n        address indexed participant,\\n        address indexed asset,\\n        uint128 amount\\n    );\\n\\n    event Started(uint256 indexed id);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IArbitratorData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IArbitratorData {\\n    /*//////////////////////////////////////////////////////////////\\n                             Data Structures\\n    //////////////////////////////////////////////////////////////*/\\n\\n    enum BetMode {\\n        // Fixed bet size\\n        CLASSIC,\\n        // Bet size is strictly increasing and determined by the player\\n        VARIABLE,\\n        // Bet size is increasing linearly\\n        ANTE\\n    }\\n\\n    enum RNGMode {\\n        // No odds of death\\n        ZERO,\\n        // Odds of death randomly selected between RAND_MIN and RAND_MAX\\n        RANDOM\\n    }\\n\\n    struct Randomness {\\n        uint256 randomness;\\n        uint64 counter;\\n        uint256 id;\\n    }\\n\\n    struct Tontine {\\n        // Asset used for Tontine\\n        address asset;\\n        // Available seats\\n        uint8 seats;\\n        // Bet Mode\\n        BetMode betMode;\\n        // RNG Mode\\n        RNGMode rngMode;\\n        // Balance\\n        uint128 balance;\\n        // Current bet amount\\n        uint128 bet;\\n        // State of all participants\\n        uint128 participantState;\\n        // Last time a bet was received, or game started\\n        uint64 lastBetTime;\\n        // Counter for rng\\n        uint32 counter;\\n        // Last player index on participant state\\n        uint8 lastIndex;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rngSource\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyJoined\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ended\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCounter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSeatCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxFeeExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEOA\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotJoined\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTurn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PlayerNotAlive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Running\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"Folded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"Joined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"Left\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"bet\",\"type\":\"uint128\"}],\"name\":\"Played\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Started\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"counter\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct IArbitratorData.Randomness\",\"name\":\"_rng\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_bet\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"_seats\",\"type\":\"uint8\"},{\"internalType\":\"enum IArbitratorData.BetMode\",\"name\":\"_betMode\",\"type\":\"uint8\"},{\"internalType\":\"enum IArbitratorData.RNGMode\",\"name\":\"_rngMode\",\"type\":\"uint8\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"fold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getAmountAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getAssetAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IArbitratorData.BetMode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"getBetModeAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getParticipant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getParticipantIdentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"counter\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct IArbitratorData.Randomness\",\"name\":\"_rng\",\"type\":\"tuple\"}],\"name\":\"getParticipantState\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IArbitratorData.RNGMode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"getRNGModeAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_counter\",\"type\":\"uint64\"}],\"name\":\"getRandomness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTontine\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"seats\",\"type\":\"uint8\"},{\"internalType\":\"enum IArbitratorData.BetMode\",\"name\":\"betMode\",\"type\":\"uint8\"},{\"internalType\":\"enum IArbitratorData.RNGMode\",\"name\":\"rngMode\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"balance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bet\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"participantState\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"lastBetTime\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"counter\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"lastIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct IArbitratorData.Tontine\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"leave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"_bet\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"counter\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct IArbitratorData.Randomness\",\"name\":\"_rng\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"play\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"counter\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct IArbitratorData.Randomness\",\"name\":\"_rng\",\"type\":\"tuple\"}],\"name\":\"randomnessHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rngSource\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAssetAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_fee\",\"type\":\"uint128\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeController\",\"type\":\"address\"}],\"name\":\"setFeeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allowlist\",\"type\":\"uint256\"}],\"name\":\"setModeAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rngSource\",\"type\":\"address\"}],\"name\":\"setRNGSource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Arbitrator", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "000000000000000000000000a92bfe11459e75c994dc612d4f64b7f2935a732d000000000000000000000000a92bfe11459e75c994dc612d4f64b7f2935a732d0000000000000000000000006b572731fd736a4e78f7307e27d8a2cba622ca02", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}