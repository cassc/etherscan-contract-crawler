{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DecentralName.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/*\\n    Errors:\\n    E1: No authority\\n    E2: Invalid namespace\\n    E3: Invalid name \\n    E4: Name expired\\n    E5: Array count mismatch\\n    E6: Fee not enough\\n    E7: Namespace already exists\\n    E8: Cannot modify price\\n    E9: Invalid price\\n    E10: Too many custom price names\\n    E11: Already open\\n    E12: Already disabled\\n    E13: Not open yet\\n    E14: Cannot receive name\\n    E15: Not support ping\\n    E16: Content too long\\n    E17: Key mismatch\\n    E18: Invalid key\\n    E19: Too many keys\\n    E20: Transfer not allowed\\n    E21: Not need renewal\\n    E22: Not expired yet\\n    E23: Invalid lifetime\\n    E24: Invalid times\\n    E25: Transfer not allow: to whom already own non-expired name\\n    E26: Invalid renewal price param\\n*/\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\ncontract DecentralName is ReentrancyGuard, ERC721 {\\n    uint256 constant public MAX_PROFILE_KEY_COUNT = 200;\\n    uint256 constant public MAX_CUSTOM_PRICE_NAMES_COUNT = 200;\\n    uint256 constant public MAX_RENEWAL_TIMES_PER_TIMES = 20;\\n    uint256[] public NAMESPACE_PRICE_LIST = [250 ether, 50 ether, 40 ether, 20 ether, 10 ether, 5 ether, 5 ether, 2 ether];\\n\\n    event BuyNamespace(bytes32 indexed namespace);\\n    event TransferNamespaceAdmin(bytes32 indexed namespace, address admin);\\n    event SetNamespaceBeneficiary(bytes32 indexed namespace, address beneficiary);\\n    event SetNamespaceDesc(bytes32 indexed namespace);\\n    event SetPrice(bytes32 indexed namespace);\\n    event SetCustomPrice(bytes32 indexed namespace);\\n    event OpenNamespace(bytes32 indexed namespace);\\n    event DisableModifyPrice(bytes32 indexed namespace);\\n    event AssignName(bytes32 indexed namespace, bytes32 indexed name, address user);\\n    event Renewal(bytes32 indexed namespace, bytes32 indexed name);\\n    event Ping(bytes32 indexed namespace, bytes32 indexed name);\\n    event SetProfile(bytes32 indexed namespace, bytes32 indexed name);\\n\\n    struct NamespaceInfo {\\n        address admin;                  // Who can modify the namespace's attributes\\n        address payable beneficiary;    // Where the registration/renewal fee goes to\\n        bytes desc;                     // Length <= 256, shown as innerHTML. e.g., \\\"visit <a href=\\\"https://nostr.com\\\" target=\\\"_blank\\\">nostr.com</a> for more info\\\".\\n        uint256 startStamp;             // When was the namespace created\\n        uint256 openStamp;              // When was the namespace open for registration(i.e., anyone can register through current contract)\\n        uint256 renewalLifetime;        // Renewal period, 0 means not need renewal.\\n        uint256 pingLifetime;           // Only makes sense when renewalLifetime == 0. If pingLifetime > 0, user must ping before pingExpiredStamp(only cost gas fee), otherwise the name is expired.\\n        uint256[25] registerPriceList;  // 1d, 1L, _, 2d, 2L, 2Misc, 3d, 3L, 3Misc, 4d, 4L, 4Misc, 5d, 5L, 5Misc, 6d, 6L, 6Misc, 7d, 7L, 7Misc, 8d, 8L, 8Misc, remain.\\n        uint256 renewalPriceParam;      // renewalPriceParam = a * 1000000 + b * 1000 + c, Renewal-fee = (a + b * Registration-fee) / c\\n        bool bAllowModifyPrice;         // Can namespace admin modify price?\\n        bytes32[] customPriceNames;     // Custom registration prices for at most MAX_CUSTOM_PRICE_NAMES_COUNT names.\\n    }\\n\\n    struct NameInfo {\\n        bytes32 namespace;\\n        bytes32 name;\\n        uint256 renewalExpiredStamp;\\n        uint256 pingExpiredStamp;\\n        bytes32[] profileKeyList; // display name, avatar, bio, url, nostr, email, btc, lightning, ..\\n    }\\n\\n    bytes32[] public namespaceList;\\n    mapping(bytes32 => NamespaceInfo) public namespaceMap;                      // namespace => NamespaceInfo\\n    mapping(bytes32 => mapping(bytes32 => uint256)) public customPriceNamesMap; // namespace => (name => custom-price)\\n\\n    uint256 public curTokenId = 0;\\n    mapping(address => uint256) public addr2TokenIdMap;                         // address => tokenId\\n    mapping(uint256 => NameInfo) public id2NameInfoMap;                         // tokenId => NameInfo\\n    mapping(uint256 => mapping(bytes32 => bytes)) public id2ProfileValueMap;    // tokenId => (profile-key => profile-value)\\n    mapping(bytes32 => mapping(bytes32 => uint256)) public name2IdMap;          // (namespace => (name => tokenId))\\n\\n    constructor() ERC721(\\\"DecentralName\\\", \\\"DNAME\\\") {\\n        _initGenesis();\\n    }\\n\\n    //////// Frequent\\n    function resolveAddress(address user) public view returns (bool bResult, uint256 tokenId, bytes32 namespace, bytes32 name) {\\n        tokenId = addr2TokenIdMap[user];\\n        if (tokenId > 0) {\\n            (bResult, namespace, name) = resolveTokenId(tokenId);\\n        }\\n    }\\n\\n    function resolveAddressFull(address user) public view returns (bool bResult, uint256 tokenId, NameInfo memory nameInfo, bytes[] memory profileValueList) {\\n        (bResult, tokenId, nameInfo.namespace, nameInfo.name) = resolveAddress(user);\\n        if (bResult) {\\n            (, , profileValueList) = getProfileKeysAndValues(nameInfo.namespace, nameInfo.name);\\n            nameInfo = id2NameInfoMap[tokenId];\\n        }\\n    }\\n\\n    function resolveName(bytes32 namespace, bytes32 name) public view returns (bool bResult, address owner) {\\n        uint256 tokenId = name2IdMap[namespace][name];\\n        if (tokenId > 0) {\\n            owner = ownerOf(tokenId);\\n            NameInfo storage nInfo = id2NameInfoMap[tokenId];\\n            if (!_isNameExpired(namespaceMap[nInfo.namespace], nInfo)) {\\n                bResult = true;\\n            }\\n        }\\n    }\\n\\n    function resolveNameFull(bytes32 namespace, bytes32 name) public view returns (bool bResult, uint256 tokenId, address owner, NameInfo memory nameInfo, bytes[] memory profileValueList) {\\n        (bResult, ,profileValueList) = getProfileKeysAndValues(namespace, name);\\n        if (bResult) {\\n            tokenId = name2IdMap[namespace][name];\\n            owner = ownerOf(tokenId);\\n            nameInfo = id2NameInfoMap[tokenId];\\n        }\\n    }\\n\\n    // Query many names to register\\n    function queryManyNames(bytes32[] calldata inNamespaceList, bytes32[] calldata inNameList) public view returns (bool[] memory resultList, address[] memory ownerList, uint256[] memory priceList) {\\n        uint256 nameListLen = inNameList.length;\\n        require(nameListLen == inNamespaceList.length, 'E5');\\n        resultList = new bool[](nameListLen);\\n        ownerList = new address[](nameListLen);\\n        priceList = new uint256[](nameListLen);\\n        for (uint256 i; i < nameListLen; ++i) {\\n            uint256 tokenId = name2IdMap[inNamespaceList[i]][inNameList[i]];\\n            NamespaceInfo storage nsInfo = namespaceMap[inNamespaceList[i]];\\n            if (tokenId > 0 && !_isNameExpired(nsInfo, id2NameInfoMap[tokenId])) {\\n                resultList[i] = false;\\n                ownerList[i] = ownerOf(tokenId);\\n            } else if (nsInfo.openStamp > 0) {\\n                resultList[i] = true;\\n                (, priceList[i]) = getRegistrationPrice(inNamespaceList[i], inNameList[i]);\\n            }\\n        }\\n    }\\n\\n    function resolveTokenId(uint256 tokenId) public view returns (bool bResult, bytes32 namespace, bytes32 name) {\\n        NameInfo storage nInfo = id2NameInfoMap[tokenId];\\n        NamespaceInfo storage nsInfo = namespaceMap[nInfo.namespace];\\n        if (nsInfo.startStamp > 0 && !_isNameExpired(nsInfo, nInfo)) {\\n            bResult = true;\\n            namespace = nInfo.namespace;\\n            name = nInfo.name;\\n        }\\n    }\\n\\n    function getNamespaceInfos(bytes32[] memory inNamespaceList) public view returns (NamespaceInfo[] memory results) {\\n        uint256 listLen = inNamespaceList.length;\\n        results = new NamespaceInfo[](listLen);\\n        for (uint256 i; i < listLen; ++i) {\\n            results[i] = namespaceMap[inNamespaceList[i]];\\n        }\\n    }\\n\\n    function getFullNamespaceInfos() public view returns (bytes32[] memory outNamespaceList, NamespaceInfo[] memory results) {\\n        outNamespaceList = namespaceList;\\n        results = getNamespaceInfos(namespaceList);\\n    }\\n\\n    //////// Namespace\\n    function getNamespacePrice(bytes32 namespace) public view returns (bool bResult, uint256 price) {\\n        (bool bOk, uint256 alphaNum, uint256 digitNum, uint256 underscoreNum) = parseName(namespace);\\n        if (bOk && (namespace[0] >= 0x61 && namespace[0] <= 0x7a)) {  // For namespace, first character must be lower-case-alpha\\n            bResult = true;\\n            uint256 totalLen = alphaNum + digitNum + underscoreNum;\\n            if (totalLen <= NAMESPACE_PRICE_LIST.length) {\\n                price = NAMESPACE_PRICE_LIST[totalLen - 1];\\n            } else {\\n                price = NAMESPACE_PRICE_LIST[NAMESPACE_PRICE_LIST.length - 1];\\n            }\\n        }\\n    }\\n\\n    function buyNamespace(bytes32 namespace, uint256 renewalLifetime, uint256 pingLifetime) payable external nonReentrant {\\n        (bool bOk, uint256 price) = getNamespacePrice(namespace);\\n        require(bOk, 'E2');\\n        require(renewalLifetime == 0 || (renewalLifetime >= 1 days && renewalLifetime <= 36500 days), 'E23');\\n        if (renewalLifetime > 0) {\\n            require(pingLifetime == 0, 'E23');\\n        } else {\\n            require(pingLifetime == 0 || (pingLifetime >= 1 days && pingLifetime <= 36500 days), 'E23');\\n        }\\n        require(msg.value == price, 'E6');\\n        payable(0).transfer(price); // burn\\n\\n        NamespaceInfo storage nsInfo = namespaceMap[namespace];\\n        require(nsInfo.startStamp == 0, 'E7');\\n        namespaceList.push(namespace);\\n\\n        nsInfo.admin = msg.sender;\\n        nsInfo.beneficiary = payable(msg.sender);\\n        // nsInfo.desc\\n        nsInfo.startStamp = block.timestamp;\\n        // nsInfo.openStamp\\n        nsInfo.renewalLifetime = renewalLifetime;\\n        nsInfo.pingLifetime = pingLifetime;\\n        // nsInfo.registerPriceList\\n        // nsInfo.renewalPriceParam\\n        nsInfo.bAllowModifyPrice = true;\\n        // nsInfo.customPriceNames\\n\\n        emit BuyNamespace(namespace);\\n    }\\n\\n    function transferNamespaceAdmin(bytes32 namespace, address admin) external nonReentrant {\\n        NamespaceInfo storage nsInfo = namespaceMap[namespace];\\n        require(nsInfo.admin == msg.sender, 'E1');\\n        nsInfo.admin = admin;\\n        emit TransferNamespaceAdmin(namespace, admin);\\n    }\\n\\n    function setNamespaceBeneficiary(bytes32 namespace, address payable beneficiary) external nonReentrant {\\n        NamespaceInfo storage nsInfo = namespaceMap[namespace];\\n        require(nsInfo.admin == msg.sender || nsInfo.beneficiary == msg.sender, 'E1');\\n        nsInfo.beneficiary = beneficiary;\\n        emit SetNamespaceBeneficiary(namespace, beneficiary);\\n    }\\n\\n    function setNamespaceDesc(bytes32 namespace, bytes calldata desc) external nonReentrant {\\n        NamespaceInfo storage nsInfo = namespaceMap[namespace];\\n        require(nsInfo.admin == msg.sender, 'E1');\\n        require(desc.length <= 256, 'E16');\\n        nsInfo.desc = desc;\\n        emit SetNamespaceDesc(namespace);\\n    }\\n\\n    function setPrice(bytes32 namespace, uint256[25] calldata registerPriceList, uint256 renewalPriceParam) external nonReentrant {\\n        NamespaceInfo storage nsInfo = namespaceMap[namespace];\\n        require(nsInfo.admin == msg.sender, 'E1');\\n        require(nsInfo.bAllowModifyPrice, 'E8');\\n        require(nsInfo.renewalLifetime == 0 || renewalPriceParam % 1000 != 0, 'E26');\\n        nsInfo.registerPriceList = registerPriceList;\\n        nsInfo.renewalPriceParam = renewalPriceParam;\\n        emit SetPrice(namespace);\\n    }\\n\\n    function setCustomPrice(bytes32 namespace, bytes32[] calldata nameList, uint256[] calldata priceList) external nonReentrant {\\n        NamespaceInfo storage nsInfo = namespaceMap[namespace];\\n        require(nsInfo.admin == msg.sender, 'E1');\\n        require(nsInfo.bAllowModifyPrice, 'E8');\\n        uint256 nameLen = nameList.length;\\n        require(nameLen == priceList.length, 'E5');\\n        bytes32[] storage customNames = nsInfo.customPriceNames;\\n        mapping(bytes32 => uint256) storage priceMap = customPriceNamesMap[namespace];\\n        for (uint256 i; i < nameLen; ) {\\n            bytes32 name = nameList[i];\\n            if (priceMap[name] == 0) {\\n                require(isNameValid(name), 'E3');\\n                customNames.push(name);\\n            }\\n            require(priceList[i] > 0, 'E9'); // i.e., not allow cancel set custom name price\\n            priceMap[name] = priceList[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        require(customNames.length <= MAX_CUSTOM_PRICE_NAMES_COUNT, 'E10');\\n        emit SetCustomPrice(namespace);\\n    }\\n\\n    function getCustomPriceInfo(bytes32 namespace) public view returns (bytes32[] memory nameList, uint256[] memory priceList) {\\n        NamespaceInfo storage nsInfo = namespaceMap[namespace];\\n        nameList = nsInfo.customPriceNames;\\n        uint256 nameListLen = nameList.length;\\n        priceList = new uint256[](nameListLen);\\n        mapping(bytes32 => uint256) storage priceMap = customPriceNamesMap[namespace];\\n        for (uint256 i; i < nameListLen; ++i) {\\n            priceList[i] = priceMap[nameList[i]];\\n        }\\n    }\\n\\n    // Open registration, so that anyone can register through current contract; Otherwise, only admin can register through registerMany(with bByAdmin=true)\\n    function openRegistration(bytes32 namespace) external nonReentrant {\\n        NamespaceInfo storage nsInfo = namespaceMap[namespace];\\n        require(nsInfo.admin == msg.sender, 'E1');\\n        require(nsInfo.openStamp == 0, 'E11');\\n        require(nsInfo.renewalLifetime == 0 || nsInfo.renewalPriceParam % 1000 != 0, 'E26');\\n        nsInfo.openStamp = block.timestamp;\\n        emit OpenNamespace(namespace);\\n    }\\n\\n    function disableModifyPrice(bytes32 namespace) external nonReentrant {\\n        NamespaceInfo storage nsInfo = namespaceMap[namespace];\\n        require(nsInfo.admin == msg.sender, 'E1');\\n        require(nsInfo.bAllowModifyPrice, 'E12');\\n        require(nsInfo.renewalLifetime == 0 || nsInfo.renewalPriceParam % 1000 != 0, 'E26');\\n        nsInfo.bAllowModifyPrice = false;\\n        emit DisableModifyPrice(namespace);\\n    }\\n\\n    //////// Name\\n    function register(bytes32 namespace, bytes32 name) external payable nonReentrant {\\n        NamespaceInfo storage nsInfo = namespaceMap[namespace];\\n        require(nsInfo.openStamp > 0, 'E13');\\n        (bool bCanReceiveName,) = _canReceiveName(msg.sender);\\n        require(bCanReceiveName, 'E14');\\n        (bool bOk, uint256 price) = getRegistrationPrice(namespace, name);\\n        require(bOk, 'E3');\\n        if (price > 0) {\\n            require(msg.value >= price, 'E6');\\n            nsInfo.beneficiary.transfer(msg.value);\\n        }\\n        _assignNameToUser(namespace, name, msg.sender);\\n    }\\n\\n    // Force register name. If current address already owns non-expired name, burn it firstly\\n    function forceRegister(bytes32 namespace, bytes32 name) external payable nonReentrant {\\n        NamespaceInfo storage nsInfo = namespaceMap[namespace];\\n        require(nsInfo.openStamp > 0, 'E13');\\n        (bool bCanReceiveName, uint256 tokenId) = _canReceiveName(msg.sender);\\n        if (!bCanReceiveName) {\\n            _removeItem(tokenId);\\n        }\\n        (bool bOk, uint256 price) = getRegistrationPrice(namespace, name);\\n        require(bOk, 'E3');\\n        if (price > 0) {\\n            require(msg.value >= price, 'E6');\\n            nsInfo.beneficiary.transfer(msg.value);\\n        }\\n        _assignNameToUser(namespace, name, msg.sender);\\n    }\\n\\n    function registerMany(bool bByAdmin, bytes32 namespace, bytes32[] calldata nameList, address[] calldata userList) external payable nonReentrant returns (address[] memory failList, uint256 failCount) {\\n        NamespaceInfo storage nsInfo = namespaceMap[namespace];\\n        if (bByAdmin) {\\n            require(nsInfo.admin == msg.sender, 'E1');\\n        } else {\\n            require(nsInfo.openStamp > 0, 'E13');\\n        }\\n        \\n        uint256 nameLen = nameList.length;\\n        require(nameLen == userList.length, 'E5');\\n        failList = new address[](nameLen);\\n        uint256 totalFee = 0;\\n        for (uint256 i; i < nameLen; ) {\\n            require(userList[i] != address(0), 'E14');\\n            (bool bCanReceiveName,) = _canReceiveName(userList[i]);\\n            if (bCanReceiveName) {\\n                if (bByAdmin) {\\n                    require(isNameValid(nameList[i]), 'E3');\\n                } else {\\n                    (bool bResult, uint256 price) = getRegistrationPrice(namespace, nameList[i]);\\n                    require(bResult, 'E3');\\n                    totalFee += price;\\n                }\\n                _assignNameToUser(namespace, nameList[i], userList[i]);\\n            } else {\\n                failList[failCount++] = userList[i];\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (totalFee > 0) {\\n            require(totalFee <= msg.value, 'E6');\\n            nsInfo.beneficiary.transfer(totalFee);\\n        }\\n        if (totalFee < msg.value) {\\n            payable(msg.sender).transfer(msg.value - totalFee);\\n        }\\n    }\\n\\n    function renewal(bytes32 namespace, bytes32 name, uint256 times) external payable nonReentrant returns (bool bResult) {\\n        NamespaceInfo storage nsInfo = namespaceMap[namespace];\\n        require(times >= 1 && times <= MAX_RENEWAL_TIMES_PER_TIMES, 'E24');\\n        require(nsInfo.renewalLifetime > 0, 'E21');\\n        uint256 tokenId = name2IdMap[namespace][name];\\n        if (tokenId > 0) {\\n            NameInfo storage nInfo = id2NameInfoMap[tokenId];\\n            if (!_isNameExpired(nsInfo, nInfo)) {\\n                (, uint256 renewalPrice) = getRenewalPrice(namespace, name);\\n                if (renewalPrice > 0) {\\n                    require(msg.value >= renewalPrice * times, 'E6');\\n                    nsInfo.beneficiary.transfer(msg.value);\\n                }\\n                nInfo.renewalExpiredStamp = nInfo.renewalExpiredStamp + times * nsInfo.renewalLifetime;\\n                emit Renewal(namespace, name);\\n                bResult = true;\\n            }\\n        }\\n    }\\n\\n    function renewalMany(bool bByAdmin, bytes32 namespace, bytes32[] calldata nameList, uint256[] calldata timesList) external payable nonReentrant returns (bytes32[] memory failList, uint256 failCount) {\\n        NamespaceInfo storage nsInfo = namespaceMap[namespace];\\n        if (bByAdmin) {\\n            require(nsInfo.admin == msg.sender, 'E1');\\n        }\\n        require(nsInfo.renewalLifetime > 0, 'E21');\\n        uint256 nameLen = nameList.length;\\n        require(nameLen == timesList.length, 'E5');\\n        failList = new bytes32[](nameLen);\\n        uint256 totalFee = 0;\\n        for (uint256 i; i < nameLen; ) {\\n            bytes32 name = nameList[i];\\n            uint256 tokenId = name2IdMap[namespace][name];\\n            if (tokenId > 0) {\\n                NameInfo storage nInfo = id2NameInfoMap[tokenId];\\n                if (!_isNameExpired(nsInfo, nInfo)) {\\n                    if (!bByAdmin) {\\n                        (, uint256 renewalPrice) = getRenewalPrice(namespace, name);\\n                        totalFee += renewalPrice * timesList[i];\\n                    }\\n                    require(timesList[i] >= 1 && timesList[i] <= MAX_RENEWAL_TIMES_PER_TIMES, 'E24');\\n                    nInfo.renewalExpiredStamp = nInfo.renewalExpiredStamp + timesList[i] * nsInfo.renewalLifetime;\\n                    emit Renewal(namespace, name);\\n                } else {\\n                    failList[failCount++] = name;\\n                }\\n            } else {\\n                failList[failCount++] = name;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (totalFee > 0) {\\n            require(totalFee <= msg.value, 'E6');\\n            nsInfo.beneficiary.transfer(totalFee);\\n            if (totalFee < msg.value) {\\n                payable(msg.sender).transfer(msg.value - totalFee);\\n            }\\n        }\\n        return (failList, failCount);\\n    }\\n\\n    function ping(bytes32 namespace, bytes32 name) external nonReentrant {\\n        NamespaceInfo storage nsInfo = namespaceMap[namespace];\\n        require(nsInfo.renewalLifetime == 0 && nsInfo.pingLifetime > 0, 'E15');\\n        uint256 tokenId = name2IdMap[namespace][name];\\n        require(ownerOf(tokenId) == msg.sender, 'E1');\\n        NameInfo storage nInfo = id2NameInfoMap[tokenId];\\n        require(block.timestamp <= nInfo.pingExpiredStamp, 'E4');\\n        nInfo.pingExpiredStamp = block.timestamp + nsInfo.pingLifetime;\\n        emit Ping(namespace, name);\\n    }\\n\\n    function getRegistrationPrice(bytes32 namespace, bytes32 name) public view returns (bool, uint256) {\\n        NamespaceInfo storage nsInfo = namespaceMap[namespace];\\n        if (nsInfo.startStamp == 0) {\\n            return (false, 0);\\n        }\\n\\n        uint256 customPrice = customPriceNamesMap[namespace][name];\\n        if (customPrice > 0) {\\n            return (true, customPrice);\\n        }\\n\\n        (bool bOk, uint256 alphaNum, uint256 digitNum, uint256 underscoreNum) = parseName(name);\\n        if (!bOk) {\\n            return (false, 0);\\n        }\\n        uint256 totalLen = alphaNum + digitNum + underscoreNum;\\n        if (totalLen <= 8) {\\n            if (underscoreNum == 0 && (alphaNum == 0 || digitNum == 0)) { // pure-alpha or pure-digit or empty\\n                if (digitNum > 0) {\\n                    return (true, nsInfo.registerPriceList[(totalLen - 1) * 3]);\\n                } else if (alphaNum > 0) {\\n                    return (true, nsInfo.registerPriceList[totalLen * 3 - 2]);\\n                } else {\\n                    return (false, 0);\\n                }\\n            } else { // Misc\\n                return (true, nsInfo.registerPriceList[totalLen * 3 - 1]);\\n            }\\n        }\\n        return (true, nsInfo.registerPriceList[nsInfo.registerPriceList.length - 1]);\\n    }\\n\\n    function getRenewalPrice(bytes32 namespace, bytes32 name) public view returns (bool, uint256) {\\n        (bool bOk, uint256 regPrice) = getRegistrationPrice(namespace, name);\\n        if (bOk) {\\n            NamespaceInfo storage nsInfo = namespaceMap[namespace];\\n            if (nsInfo.renewalLifetime == 0) {\\n                return (true, 0);   // not need renewal\\n            }\\n            uint256 param = nsInfo.renewalPriceParam;\\n            return (true, ((param/1000000) + ((param/1000)%1000) * regPrice) / (param % 1000));\\n        }\\n        return (false, 0);\\n    }\\n\\n    function parseName(bytes32 name) public pure returns (bool, uint256, uint256, uint256) {\\n        bool bReachEnd = false;\\n        uint256 alphaNum = 0;\\n        uint256 digitNum = 0;\\n        uint256 underscoreNum = 0;\\n        for (uint256 i; i < 32; ) {\\n            bytes1 ch = name[i];\\n            if (ch > 0) {\\n                if (bReachEnd) {\\n                    return (false, 0, 0, 0);\\n                }\\n                if (ch >= 0x61 && ch <= 0x7a) {\\n                    ++alphaNum;\\n                } else if (ch >= 0x30 && ch <= 0x39) {\\n                    ++digitNum;\\n                } else if (ch == 0x5f) {\\n                    ++underscoreNum;\\n                } else {\\n                    return (false, 0, 0, 0);\\n                }\\n            } else {\\n                if (!bReachEnd) {\\n                    bReachEnd = true;\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (alphaNum == 0 && digitNum == 0 && underscoreNum == 0) {\\n            return (false, 0, 0, 0);\\n        }\\n        return (true, alphaNum, digitNum, underscoreNum);\\n    }\\n\\n    function canReceiveName(address user) public view returns (bool bCanReceiveName) {\\n        (bCanReceiveName, ) = _canReceiveName(user);\\n    }\\n\\n    function canRegisterName(bytes32 namespace, bytes32 name) public view returns (bool) {\\n        return canRegisterName(namespace, name, true);\\n    }\\n\\n    function canRegisterName(bytes32 namespace, bytes32 name, bool bCheckOpen) public view returns (bool) {\\n        NamespaceInfo storage nsInfo = namespaceMap[namespace];\\n        if (nsInfo.startStamp == 0) {\\n            return false;\\n        }\\n        if (bCheckOpen && nsInfo.openStamp == 0) {\\n            return false;\\n        }\\n        if (!isNameValid(name)) {\\n            return false;\\n        }\\n        uint256 tokenId = name2IdMap[namespace][name];\\n        if (tokenId == 0) {\\n            return true;\\n        }\\n        return _isNameExpired(nsInfo, id2NameInfoMap[tokenId]);\\n    }\\n\\n    function isNameValid(bytes32 name) public pure returns (bool) {\\n        uint256 flag = 0;\\n        for (uint256 i = 0; i < 32; ++i) {\\n            bytes1 ch = name[i];\\n            if (ch > 0) {\\n                if (flag == 2) {\\n                    return false;\\n                } else {\\n                    flag = 1;\\n                }\\n                if ((ch < 0x61 || ch > 0x7a) && (ch < 0x30 || ch > 0x39) && ch != 0x5f) {  // not-lower-case-alpha && not-digit && not-underscore\\n                    return false;\\n                }\\n            } else {\\n                if (flag != 2) {\\n                    if (flag == 0) {\\n                        return false;\\n                    }\\n                    flag = 2;\\n                }\\n            }\\n        }\\n        return flag != 0;\\n    }\\n\\n    // display name:    0x646973706c6179206e616d650000000000000000000000000000000000000000\\n    // avatar:          0x6176617461720000000000000000000000000000000000000000000000000000\\n    // bio:             0x62696f0000000000000000000000000000000000000000000000000000000000\\n    // url:             0x75726c0000000000000000000000000000000000000000000000000000000000\\n    // nostr:           0x6e6f737472000000000000000000000000000000000000000000000000000000\\n    // email:           0x656d61696c000000000000000000000000000000000000000000000000000000\\n    // btc:             0x6274630000000000000000000000000000000000000000000000000000000000\\n    // lightning:       0x6c696768746e696e670000000000000000000000000000000000000000000000\\n    function getProfileValue(bytes32 namespace, bytes32 name, bytes32 key) public view returns (bool bResult, bytes memory value) {\\n        uint256 tokenId = name2IdMap[namespace][name];\\n        if (tokenId > 0) {\\n            if (!_isNameExpired(namespaceMap[namespace], id2NameInfoMap[tokenId])) {\\n                bResult = true;\\n                value = id2ProfileValueMap[tokenId][key];\\n            }\\n        }\\n    }\\n\\n    function getProfileKeysAndValues(bytes32 namespace, bytes32 name) public view returns (bool bResult, bytes32[] memory keyList, bytes[] memory valueList) {\\n        uint256 tokenId = name2IdMap[namespace][name];\\n        if (tokenId > 0) {\\n            NameInfo storage nInfo = id2NameInfoMap[tokenId];\\n            if (!_isNameExpired(namespaceMap[namespace], nInfo)) {\\n                bResult = true;\\n                keyList = nInfo.profileKeyList;\\n                uint256 keyListLen = keyList.length;\\n                valueList = new bytes[](keyListLen);\\n                mapping(bytes32 => bytes) storage profileValueMap = id2ProfileValueMap[tokenId];\\n                for (uint256 i; i < keyListLen; ++i) {\\n                    valueList[i] = profileValueMap[keyList[i]];\\n                }\\n            }\\n        }\\n    }\\n\\n    // Set profile's custom key-value pairs.\\n    // If indexList[pos] > 0, set profileValueMap[keyList[indexList[pos]-1]] = valueList[pos];\\n    // Otherwise, append keyList[pos] to profileKeyList, set profileValueMap[keyList[pos]] = valueList[pos];\\n    function setProfileKeyValuePairs(bytes32 namespace, bytes32 name, uint256[] calldata indexList, bytes32[] calldata keyList, bytes[] calldata valueList) external nonReentrant {\\n        uint256 tokenId = name2IdMap[namespace][name];\\n        require(ownerOf(tokenId) == msg.sender, 'E1');\\n        NameInfo storage nInfo = id2NameInfoMap[tokenId];\\n        require(!_isNameExpired(namespaceMap[namespace], nInfo), 'E4');\\n\\n        uint256 indexLen = indexList.length;\\n        require(indexLen == keyList.length, 'E5');\\n        require(indexLen == valueList.length, 'E5');\\n        mapping(bytes32 => bytes) storage profileValueMap = id2ProfileValueMap[tokenId];\\n        bytes32[] storage profileKeyList = nInfo.profileKeyList;\\n        for (uint256 pos; pos < indexLen; ) {\\n            require(valueList[pos].length <= 128, 'E16');\\n            if (indexList[pos] > 0) { // real index is curIndex - 1\\n                bytes32 curKey = profileKeyList[indexList[pos] - 1];\\n                require(curKey == keyList[pos], 'E17');\\n                profileValueMap[curKey] = valueList[pos];\\n            } else {\\n                bytes32 curKey = keyList[pos];\\n                profileKeyList.push(curKey);\\n                require(curKey != 0, 'E18');\\n                profileValueMap[curKey] = valueList[pos];\\n            }\\n            unchecked {\\n                ++pos;\\n            }\\n        }\\n        require(profileKeyList.length <= MAX_PROFILE_KEY_COUNT, 'E19');\\n        emit SetProfile(namespace, name);\\n    }\\n\\n    function removeAllProfileKeys(bytes32 namespace, bytes32 name) external nonReentrant {\\n        uint256 tokenId = name2IdMap[namespace][name];\\n        require(ownerOf(tokenId) == msg.sender, 'E1');\\n        NameInfo storage nInfo = id2NameInfoMap[tokenId];\\n        require(!_isNameExpired(namespaceMap[namespace], nInfo), 'E4');\\n        mapping(bytes32 => bytes) storage profileValueMap = id2ProfileValueMap[tokenId];\\n        bytes32[] memory keyList = nInfo.profileKeyList;\\n        uint256 keyListLen = keyList.length;\\n        for (uint256 i; i < keyListLen; ) {\\n            delete profileValueMap[keyList[i]];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        delete nInfo.profileKeyList;\\n    }\\n\\n    //////// ERC721\\n    function transferFrom(address from, address to, uint256 tokenId) public override nonReentrant {\\n        require(to != address(0), 'E14');\\n        (bool bOk, ,) = resolveTokenId(tokenId);\\n        require(bOk, 'E20');\\n        super.transferFrom(from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public override nonReentrant {\\n        require(to != address(0), 'E14');\\n        (bool bOk, ,) = resolveTokenId(tokenId);\\n        require(bOk, 'E20');\\n        super.safeTransferFrom(from, to, tokenId, data);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        _requireMinted(tokenId);\\n        return \\\"ipfs://QmUqW8wFpcdYuk5CVFXYvpdsWjz7x9U1Yn6s9NT7f5Re8B\\\";\\n    }\\n\\n    // Attention: others can still register the name after burn\\n    function burn(uint256 tokenId) external nonReentrant {\\n        require(ownerOf(tokenId) == msg.sender);\\n        NameInfo storage nInfo = id2NameInfoMap[tokenId];\\n        require(!_isNameExpired(namespaceMap[nInfo.namespace], nInfo), 'E1');\\n        _removeItem(tokenId);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal override {\\n        if (to != address(0)) {\\n            (bool bCanReceiveName, uint256 userTokenId) = _canReceiveName(to);\\n            require(bCanReceiveName, 'E14');\\n            if (userTokenId > 0) {\\n                _removeItem(userTokenId);\\n            }\\n        }\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n    }\\n\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal override {\\n        if (from != address(0)) {\\n            addr2TokenIdMap[from] = 0;\\n        }\\n        if (to != address(0)) {\\n            addr2TokenIdMap[to] = firstTokenId;\\n        }\\n        super._afterTokenTransfer(from, to, firstTokenId, batchSize);\\n    }\\n\\n    //////// Private\\n    function _canReceiveName(address user) private view returns (bool, uint256) {\\n        uint256 tokenId = addr2TokenIdMap[user];\\n        if (tokenId == 0) {\\n            return (true, 0);\\n        }\\n        NameInfo storage nInfo = id2NameInfoMap[tokenId];\\n        return (_isNameExpired(namespaceMap[nInfo.namespace], nInfo), tokenId);\\n    }\\n\\n    function _isNameExpired(NamespaceInfo storage nsInfo, NameInfo storage nInfo) private view returns (bool) {\\n        if (nsInfo.renewalLifetime > 0) {\\n            return block.timestamp > nInfo.renewalExpiredStamp;\\n        } else {\\n            return nsInfo.pingLifetime > 0 ? block.timestamp > nInfo.pingExpiredStamp : false;\\n        }\\n    }\\n\\n    function _assignNameToUser(bytes32 namespace, bytes32 name, address user) private {\\n        NamespaceInfo storage nsInfo = namespaceMap[namespace];\\n        uint256 tokenId = name2IdMap[namespace][name];\\n        if (tokenId > 0) {\\n            NameInfo storage nInfo = id2NameInfoMap[tokenId];\\n            require(_isNameExpired(nsInfo, nInfo), 'E22');\\n            if (nsInfo.renewalLifetime > 0) {\\n                nInfo.renewalExpiredStamp = block.timestamp + nsInfo.renewalLifetime;\\n            } else {\\n                nInfo.pingExpiredStamp = block.timestamp + nsInfo.pingLifetime;\\n            }\\n            if (ownerOf(tokenId) != user) {\\n                _transfer(ownerOf(tokenId), user, tokenId);\\n            }\\n        } else {\\n            _mint(user, ++curTokenId);\\n            bytes32[] memory profileKeyList;\\n            NameInfo memory nInfo = NameInfo(namespace, name, 0, 0, profileKeyList);\\n            if (nsInfo.renewalLifetime > 0) {\\n                nInfo.renewalExpiredStamp = block.timestamp + nsInfo.renewalLifetime;\\n            } else if (nsInfo.pingLifetime > 0) {\\n                nInfo.pingExpiredStamp = block.timestamp + nsInfo.pingLifetime;\\n            }        \\n            id2NameInfoMap[curTokenId] = nInfo;\\n            name2IdMap[namespace][name] = curTokenId;\\n        }\\n        emit AssignName(namespace, name, user);\\n    }\\n\\n    function _removeItem(uint256 tokenId) private {\\n        NameInfo storage nInfo = id2NameInfoMap[tokenId];\\n        delete name2IdMap[nInfo.namespace][nInfo.name];\\n        delete id2NameInfoMap[tokenId];\\n        _burn(tokenId);\\n    }\\n\\n    function _initGenesisNamespace(bytes32 namespace, address beneficiary, uint256 renewalLifetime, uint256 pingLifetime, uint256 renewalPriceParam, uint256 factor1, uint256 factor2) private {\\n        namespaceList.push(namespace);\\n        NamespaceInfo storage nsInfo = namespaceMap[namespace];\\n        if (renewalPriceParam > 0) {\\n            nsInfo.admin = 0xF0296e8c771b7D422A7E1708324b4260d92D1cEe;\\n        }\\n        nsInfo.beneficiary = payable(beneficiary);\\n        // nsInfo.desc\\n        nsInfo.startStamp = block.timestamp;\\n        nsInfo.openStamp = block.timestamp;\\n        nsInfo.renewalLifetime = renewalLifetime;\\n        nsInfo.pingLifetime = pingLifetime;\\n        nsInfo.registerPriceList = [\\n            factor1 * 2 ether,      factor1 * 2 ether,      factor1 * 1.5 ether,\\n            factor2 * 0.2 ether,    factor2 * 0.2 ether,    factor2 * 0.15 ether, \\n            factor2 * 0.02 ether,   factor2 * 0.02 ether,   factor2 * 0.01 ether, \\n            factor2 * 0.005 ether,  factor2 * 0.005 ether,  factor2 * 0.002 ether, \\n            factor2 * 0.002 ether,  factor2 * 0.002 ether,  factor2 * 0.001 ether, \\n            factor2 * 0.001 ether,  factor2 * 0.001 ether,  factor2 * 0.001 ether, \\n            factor2 * 0.001 ether,  factor2 * 0.001 ether,  factor2 * 0.001 ether, \\n            factor2 * 0.001 ether,  factor2 * 0.001 ether,  factor2 * 0.001 ether, \\n            factor2 * 0.001 ether];\\n        nsInfo.renewalPriceParam = renewalPriceParam;\\n        if (renewalPriceParam > 0) {\\n            nsInfo.bAllowModifyPrice = true;\\n        }\\n        /// Custom price names\\n        bytes32[] storage customNames = nsInfo.customPriceNames;\\n        mapping(bytes32 => uint256) storage priceMap = customPriceNamesMap[namespace];\\n        // bitcoin\\n        customNames.push(0x626974636f696e00000000000000000000000000000000000000000000000000);\\n        priceMap[0x626974636f696e00000000000000000000000000000000000000000000000000] = renewalPriceParam > 0 ? 2 ether : 50 ether;\\n        // satoshi\\n        customNames.push(0x7361746f73686900000000000000000000000000000000000000000000000000);\\n        priceMap[0x7361746f73686900000000000000000000000000000000000000000000000000] = renewalPriceParam > 0 ? 2 ether : 100 ether;\\n        // btc\\n        if (renewalPriceParam > 0) {\\n            customNames.push(0x6274630000000000000000000000000000000000000000000000000000000000);\\n            priceMap[0x6274630000000000000000000000000000000000000000000000000000000000] = 2 ether;\\n        }\\n    }\\n\\n    function _initGenesis() private {\\n        _initGenesisNamespace(0x6200000000000000000000000000000000000000000000000000000000000000, 0x03f4151815694F171B85289Fe8893C24B7876C0f, 0, 2555 days, 0, 10, 10);     // .b namespace. Desc: .b has a great meaning!\\n        _initGenesisNamespace(0x6400000000000000000000000000000000000000000000000000000000000000, 0x15Fc64076b132aca3daE4870a345C71d9c9eD86C, 0, 0, 0, 10, 10);             // .d namespace. Desc: .d means decentralized.\\n        _initGenesisNamespace(0x7361740000000000000000000000000000000000000000000000000000000000, 0x96ce96Eaf270Ff9df6dD613c83126135d93Ec041, 365 days, 0, 1001, 1, 5);     // .sat namespace. Desc: With 20 million coins, that gives each coin a value ofabout $10 million. \u2014 Hal Finney\\n        _initGenesisNamespace(0x6269747300000000000000000000000000000000000000000000000000000000, 0xEE6F84C8FFAeAAAd2D9688fF5acE664fb5b21E85, 0, 0, 0, 10, 10);             // .bits namespace. Desc: Why you should register .bits name: <a href=\\\"https://x.com/adam3us/status/1662136034514157575?s=20\\\" target=\\\"_blank\\\">nostr.com</a>.\\n        _initGenesisNamespace(0x6e6f737472000000000000000000000000000000000000000000000000000000, 0xF0296e8c771b7D422A7E1708324b4260d92D1cEe, 0, 0, 0, 10, 10);             // .nostr namespace. Desc: nostr is a decentralized social network, visit <a href=\\\"https://nostr.com\\\" target=\\\"_blank\\\">nostr.com</a> for more info.\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AssignName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"}],\"name\":\"BuyNamespace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"}],\"name\":\"DisableModifyPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"}],\"name\":\"OpenNamespace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"Ping\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"Renewal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"}],\"name\":\"SetCustomPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"SetNamespaceBeneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"}],\"name\":\"SetNamespaceDesc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"}],\"name\":\"SetPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"SetProfile\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"TransferNamespaceAdmin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_CUSTOM_PRICE_NAMES_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PROFILE_KEY_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RENEWAL_TIMES_PER_TIMES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NAMESPACE_PRICE_LIST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addr2TokenIdMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"renewalLifetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pingLifetime\",\"type\":\"uint256\"}],\"name\":\"buyNamespace\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"canReceiveName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bCanReceiveName\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"bCheckOpen\",\"type\":\"bool\"}],\"name\":\"canRegisterName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"canRegisterName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"customPriceNamesMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"}],\"name\":\"disableModifyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"forceRegister\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"}],\"name\":\"getCustomPriceInfo\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"nameList\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"priceList\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFullNamespaceInfos\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"outNamespaceList\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"desc\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"startStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renewalLifetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pingLifetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[25]\",\"name\":\"registerPriceList\",\"type\":\"uint256[25]\"},{\"internalType\":\"uint256\",\"name\":\"renewalPriceParam\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bAllowModifyPrice\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"customPriceNames\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct DecentralName.NamespaceInfo[]\",\"name\":\"results\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"inNamespaceList\",\"type\":\"bytes32[]\"}],\"name\":\"getNamespaceInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"desc\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"startStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renewalLifetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pingLifetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[25]\",\"name\":\"registerPriceList\",\"type\":\"uint256[25]\"},{\"internalType\":\"uint256\",\"name\":\"renewalPriceParam\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bAllowModifyPrice\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"customPriceNames\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct DecentralName.NamespaceInfo[]\",\"name\":\"results\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"}],\"name\":\"getNamespacePrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bResult\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getProfileKeysAndValues\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bResult\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"keyList\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"valueList\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getProfileValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bResult\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getRegistrationPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getRenewalPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"id2NameInfoMap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"renewalExpiredStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pingExpiredStamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"id2ProfileValueMap\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"isNameValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"name2IdMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"namespaceList\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"namespaceMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"desc\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"startStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renewalLifetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pingLifetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renewalPriceParam\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bAllowModifyPrice\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"}],\"name\":\"openRegistration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"parseName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"ping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"inNamespaceList\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"inNameList\",\"type\":\"bytes32[]\"}],\"name\":\"queryManyNames\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"resultList\",\"type\":\"bool[]\"},{\"internalType\":\"address[]\",\"name\":\"ownerList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"priceList\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bByAdmin\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"nameList\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"userList\",\"type\":\"address[]\"}],\"name\":\"registerMany\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"failList\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"failCount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"removeAllProfileKeys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"renewal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bResult\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bByAdmin\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"nameList\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"timesList\",\"type\":\"uint256[]\"}],\"name\":\"renewalMany\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"failList\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"failCount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"resolveAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bResult\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"resolveAddressFull\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bResult\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"renewalExpiredStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pingExpiredStamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"profileKeyList\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct DecentralName.NameInfo\",\"name\":\"nameInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes[]\",\"name\":\"profileValueList\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"resolveName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bResult\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"resolveNameFull\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bResult\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"renewalExpiredStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pingExpiredStamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"profileKeyList\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct DecentralName.NameInfo\",\"name\":\"nameInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes[]\",\"name\":\"profileValueList\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"resolveTokenId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bResult\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"nameList\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"priceList\",\"type\":\"uint256[]\"}],\"name\":\"setCustomPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"setNamespaceBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"desc\",\"type\":\"bytes\"}],\"name\":\"setNamespaceDesc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[25]\",\"name\":\"registerPriceList\",\"type\":\"uint256[25]\"},{\"internalType\":\"uint256\",\"name\":\"renewalPriceParam\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"indexList\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"keyList\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"valueList\",\"type\":\"bytes[]\"}],\"name\":\"setProfileKeyValuePairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"transferNamespaceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DecentralName", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}