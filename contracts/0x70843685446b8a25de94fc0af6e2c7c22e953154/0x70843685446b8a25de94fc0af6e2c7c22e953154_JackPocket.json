{"SourceCode": "/*\r\n($JPOCKET)\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\npragma solidity ^0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\n/*\r\nContract Name\r\n*/\r\n//\r\n////\r\n//\r\n///////\r\n//................\r\ncontract JackPocket is Context, IERC20, IERC20Metadata {\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /*\r\nDead And Null Addresses holds the burned tokens\r\n...............................................\r\n*/\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n    bool public restrictWhales = true;\r\n\r\n    /*\r\nMapping Adderessess............................................:{}\r\n*/\r\n    mapping(address => bool) public isFeeExempt;\r\n    mapping(address => bool) public isTxLimitExempt;\r\n\r\n    uint256 public teamFee;\r\n    address public lpWallet;\r\n\r\n    uint256 public lpFee;\r\n\r\n    uint256 public lpFeeOnSell;\r\n    uint256 public teamFeeOnSell;\r\n    //private values\r\n    uint256 _utils;\r\n    uint256 _team1;\r\n    uint256 _team2;\r\n    uint256 _team3;\r\n    uint256 _market;\r\n    uint256 initialSupply = 1000000000000000000;\r\n    address routerAddress =  0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    uint256 public totalFee;\r\n    uint256 public totalFeeIfSelling;\r\n\r\n    IUniswapV2Router02 public router;\r\n    address public pair;\r\n    address public tokenOwner;\r\n    address payable public marketingWallet;\r\n    address payable public GambleWallet;\r\n    address payable public teamWallet;\r\n    address payable public teamWallet_one;\r\n    address payable public teamWallet_two;\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public tradingStatus = false;\r\n\r\n    mapping(address => bool) private bots;\r\n\r\n    uint256 public _walletMax;\r\n    uint256 public swapThreshold;\r\n    constructor() {\r\n\r\n        _name = \"Jackpot Bot\";\r\n        _symbol = \"$JPOT\";\r\n        _totalSupply += initialSupply;\r\n        _balances[0xC746831bF92fd72104f2536AaB9a6C4e4a0559F9] += initialSupply;\r\n        emit Transfer(address(0), 0xC746831bF92fd72104f2536AaB9a6C4e4a0559F9, initialSupply);\r\n        _walletMax = (initialSupply * 3) / 100;\r\n        swapThreshold = (initialSupply * 5) / 4000;\r\n\r\n        router = IUniswapV2Router02(routerAddress);\r\n        pair = IUniswapV2Factory(router.factory()).createPair(\r\n            router.WETH(),\r\n            address(this)\r\n        );\r\n\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n\r\n        isFeeExempt[address(this)] = true;\r\n        isFeeExempt[0xC746831bF92fd72104f2536AaB9a6C4e4a0559F9] = true;\r\n\r\n        isTxLimitExempt[0xC746831bF92fd72104f2536AaB9a6C4e4a0559F9] = true;\r\n        isTxLimitExempt[pair] = true;\r\n        isTxLimitExempt[DEAD] = true;\r\n        isTxLimitExempt[ZERO] = true;\r\n\r\n        lpFee = 0;\r\n        teamFee = 3;\r\n        lpFeeOnSell = 0;\r\n        teamFeeOnSell = 3;\r\n\r\n        totalFee = teamFee + lpFee;\r\n        totalFeeIfSelling = teamFeeOnSell + lpFeeOnSell;\r\n\r\n        tokenOwner = 0xC746831bF92fd72104f2536AaB9a6C4e4a0559F9;\r\n        teamWallet_one = payable (0x65c138F0a4179443e0ab0749B0fc03D216468f83);\r\n        teamWallet_two = payable (0x728C0e396f402e0E21F155faA87b9D039C0F55F3);\r\n        marketingWallet = payable(0x574AfB703F5465Ea1e61Dc5756D2a51A3FA1fBfD);\r\n        teamWallet = payable(0x08beE20F80856A04a0502A58e3820d74bEdFEb58);\r\n        GambleWallet = payable(0x1E1Ad262619e1a8698bee7db9d83315947F6884e);\r\n        lpWallet = 0xC746831bF92fd72104f2536AaB9a6C4e4a0559F9;\r\n    }\r\n\r\n    //lock swap\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    //\r\n\r\n    //only owner can call\r\n    modifier onlyOwner() {\r\n        require(tokenOwner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    //\r\n    //\r\n    ///\r\n    //////CODES.....\r\n    //\r\n    //change development walllet\r\n    function updateTeamWallet(address payable newAddress) external onlyOwner {\r\n        teamWallet = payable(newAddress);\r\n    }\r\n\r\n    //\r\n    function updateMarketingWallet(\r\n        address payable newAddress\r\n    ) external onlyOwner {\r\n        marketingWallet = payable(newAddress);\r\n    }\r\n\r\n    //\r\n    function updateGambleWallet(address payable newAddress) external onlyOwner {\r\n        GambleWallet = payable(newAddress);\r\n    }\r\n\r\n    //set blacklisted\r\n    function setBots(address[] memory bots_) external onlyOwner {\r\n        for (uint i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n\r\n    //Owner functions CHANGES TAXES\r\n    function changeFees(\r\n        uint256 initialLpFee,\r\n        uint256 initialLpFeeOnSell,\r\n        uint256 initialteamFee,\r\n        uint256 initialteamFeeOnSell\r\n    ) external onlyOwner {\r\n        lpFee = initialLpFee;\r\n        teamFee = initialteamFee;\r\n\r\n        lpFeeOnSell = initialLpFeeOnSell;\r\n        teamFeeOnSell = initialteamFeeOnSell;\r\n\r\n        totalFee = teamFee + lpFee;\r\n        totalFeeIfSelling = teamFeeOnSell\r\n             + lpFeeOnSell;\r\n        //\r\n        //\r\n        //\r\n        ////taxes requiremnts takenotes....... cooodes monkey\r\n        require(totalFee <= 60, \"Too high fee\");\r\n        require(totalFeeIfSelling <= 60, \"Too high fee\");\r\n        //\r\n        //\r\n        //\r\n    }\r\n\r\n    //Change Wallet Limit Tx\r\n    function changeWalletLimit(uint256 percent) external onlyOwner {\r\n        require(percent >= 10, \"min 1%\");\r\n        require(percent <= 1000, \"max 100%\");\r\n        _walletMax = (totalSupply() * percent) / 1000;\r\n    }\r\n\r\n    //Prevent Larger holders from maxwallet\r\n    function changeRestrictWhales(bool newValue) external onlyOwner {\r\n        restrictWhales = newValue;\r\n    }\r\n\r\n    //remove tax from assigned address\r\n    function changeIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    //remove limit from assigned addresses\r\n    function changeIsTxLimitExempt(\r\n        address holder,\r\n        bool exempt\r\n    ) external onlyOwner {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    // set trading wallet\r\n    function setMarketingWallet(\r\n        address payable newMarketingWallet\r\n    ) external onlyOwner {\r\n        marketingWallet = payable(newMarketingWallet);\r\n    }\r\n\r\n    //set LP Wallet\r\n    function setLpWallet(address newLpWallet) external onlyOwner {\r\n        lpWallet = newLpWallet;\r\n    }\r\n\r\n    // set new owner address\r\n    function setOwnerWallet(address payable newOwnerWallet) external onlyOwner {\r\n        isFeeExempt[msg.sender] = false;\r\n        isTxLimitExempt[msg.sender] = false;\r\n        tokenOwner = newOwnerWallet;\r\n        isFeeExempt[newOwnerWallet] = true;\r\n        isTxLimitExempt[newOwnerWallet] = true;\r\n    }\r\n\r\n    // switch trading status\r\n    function switchTrading() external onlyOwner {\r\n        tradingStatus = !tradingStatus;\r\n    }\r\n\r\n    function changeSwapBackSettings(\r\n        bool enableSwapBack,\r\n        uint256 newSwapBackLimit\r\n    ) external onlyOwner {\r\n        swapAndLiquifyEnabled = enableSwapBack;\r\n        swapThreshold = newSwapBackLimit;\r\n    }\r\n\r\n    //remove from blacklisted\r\n    function delBot(address notbot) external onlyOwner {\r\n        bots[notbot] = false;\r\n    }\r\n\r\n    ////\r\n    //get return info about contract\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply -  balanceOf(DEAD) -  balanceOf(ZERO);\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    //\r\n    ///\r\n    //\r\n    //\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(\r\n            tradingStatus || isFeeExempt[sender],\r\n            \"Tradding has not started\"\r\n        );\r\n        require(\r\n            !bots[sender] && !bots[recipient],\r\n            \"if it is not a bot proceed else terminate\"\r\n        );\r\n\r\n        if (inSwapAndLiquify) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        if (!isTxLimitExempt[recipient] && restrictWhales) {\r\n            require(_balances[recipient] + amount <= _walletMax, \"wallet\");\r\n        }\r\n\r\n        if (\r\n            msg.sender != pair &&\r\n            !inSwapAndLiquify &&\r\n            swapAndLiquifyEnabled &&\r\n            _balances[address(this)] >= swapThreshold\r\n        ) {\r\n            swapBack();\r\n        }\r\n\r\n        _balances[sender] = _balances[sender] - amount;\r\n\r\n        uint256 finalAmount = !isFeeExempt[sender] && !isFeeExempt[recipient]\r\n            ? takeFee(sender, recipient, amount)\r\n            : amount;\r\n        _balances[recipient] = _balances[recipient] + finalAmount;\r\n\r\n        emit Transfer(sender, recipient, finalAmount);\r\n        return true;\r\n    }\r\n\r\n    //Modified Functions\r\n    //scattertransfer : Bulk Transfer to private and presalers........ codes\r\n    function _scatterTransfer(\r\n        address sender,\r\n        address[] memory recipients_,\r\n        uint256[] memory amount_\r\n    ) external onlyOwner {\r\n        require(recipients_.length <= 10, \"Exceeds Length\");\r\n        // require(balanceOf(sender) > (recipients_.length * amount) , \"sender tokens not enough\");\r\n\r\n        //loop Through token addresses and values\r\n        for (uint i = 0; i < recipients_.length; i++) {\r\n            uint256 accurateval = amount_[i] * 10 ** 9;\r\n            _basicTransfer(sender, recipients_[i], accurateval);\r\n        }\r\n    }\r\n\r\n    //\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function takeFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        uint256 feeApplicable = pair == recipient\r\n            ? totalFeeIfSelling\r\n            : totalFee;\r\n        uint256 feeAmount = amount * feeApplicable / 100;\r\n\r\n        _balances[address(this)] = _balances[address(this)] + feeAmount;\r\n        emit Transfer(sender, address(this), feeAmount);\r\n\r\n        return amount -  feeAmount;\r\n    }\r\n\r\n    function swapBack() internal lockTheSwap {\r\n        uint256 tokensToLiquify = _balances[address(this)];\r\n\r\n        uint256 amountToLiquify;\r\n        uint256 teamBalance;\r\n        uint256 amountEthLiquidity;\r\n\r\n        // Use sell ratios if buy tax too low\r\n        if (totalFee <= 2) {\r\n            amountToLiquify = (tokensToLiquify * lpFeeOnSell / totalFeeIfSelling) / 2;\r\n        } else {\r\n            amountToLiquify = (tokensToLiquify * lpFee / totalFee) / 2;\r\n        }\r\n\r\n        uint256 amountToSwap = tokensToLiquify -  amountToLiquify;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountETH = address(this).balance;\r\n\r\n        // Use sell ratios if buy tax too low\r\n        if (totalFee <= 2) {\r\n            teamBalance = amountETH * teamFeeOnSell / \r\n                totalFeeIfSelling\r\n            ;\r\n            \r\n            amountEthLiquidity = (amountETH * lpFeeOnSell / totalFeeIfSelling) / 2;\r\n        } else {\r\n            teamBalance = amountETH * teamFee / totalFee;\r\n            amountEthLiquidity = (amountETH * lpFee / totalFee) / 2;\r\n        }\r\n        \r\n        //\r\n     \r\n        _team1 = teamBalance * 10 / 100;\r\n        _team2 = teamBalance * 10 / 100;\r\n        _team3 = teamBalance * 30 / 100;\r\n        _utils = teamBalance * 10 / 100;\r\n        _market = teamBalance * 40 / 100; \r\n\r\n        if (amountETH > 0) {\r\n            teamWallet.transfer(_team3);\r\n            teamWallet_one.transfer(_team1);\r\n            teamWallet_two.transfer(_team2);\r\n            GambleWallet.transfer(_utils);\r\n            marketingWallet.transfer(_market);\r\n        }\r\n\r\n        if (amountToLiquify > 0) {\r\n            router.addLiquidityETH{value: amountEthLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                lpWallet,\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GambleWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount_\",\"type\":\"uint256[]\"}],\"name\":\"_scatterTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_walletMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialLpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLpFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialteamFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialteamFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"changeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"changeIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"changeIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"changeRestrictWhales\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enableSwapBack\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newSwapBackLimit\",\"type\":\"uint256\"}],\"name\":\"changeSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"changeWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"delBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFeeOnSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restrictWhales\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"setBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLpWallet\",\"type\":\"address\"}],\"name\":\"setLpWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwnerWallet\",\"type\":\"address\"}],\"name\":\"setOwnerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFeeOnSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet_one\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet_two\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeIfSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateGambleWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "JackPocket", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://21b7d9601bc60dce447c4a7400aec49d18dd2fc7a25f746c3106722483b8a74d"}