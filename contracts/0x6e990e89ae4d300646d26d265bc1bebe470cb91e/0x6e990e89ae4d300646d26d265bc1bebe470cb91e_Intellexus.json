{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.24;\r\n\r\n/* @title The Intellective Collective \r\n * More info at: https://www.intellexuscollective.com\r\n * \r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n */\r\n\r\nabstract contract Context {\r\n    /// @dev Returns the address of the current message sender, which is available for internal functions.\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n/// @title ERC-20 Interface\r\n/// @notice Interface for the compliance with the ERC-20 standard for fungible tokens.\r\ninterface IERC20 {\r\n    /// @dev Returns the total token supply.\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /// @dev Returns the account balance of another account with address `account`.\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /// @dev Transfers `amount` tokens to address `recipient`, and MUST fire the `Transfer` event.\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /// @dev Returns the remaining number of tokens that the `spender` will be allowed to spend on behalf of `owner`.\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /// @dev Sets `amount` as the allowance of `spender` over the caller's tokens, and MUST fire the `Approval` event.\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /// @dev Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism and MUST fire the `Transfer` event.\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /// @notice Emitted when `value` tokens are moved from one account (`from`) to another (`to`).\r\n    /// @dev MUST trigger when tokens are transferred, including zero value transfers.\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /// @notice Emitted when the allowance of a `spender` for an `owner` is set by a call to `approve`.\r\n    /// @dev MUST trigger on any successful call to `approve`.\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev A contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title IUniswapV2Factory\r\n * @dev Interface for Uniswap V2 Factory.\r\n */\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n/**\r\n * @title IUniswapV2Router02\r\n * @dev Interface for Uniswap V2 Router.\r\n */\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\n/**\r\n * @title Intellexus Token Contract\r\n * @dev Implements the {IERC20} interface with additional features such as ownership and fee management.\r\n */\r\ncontract Intellexus is Context, IERC20, Ownable {\r\n    string private constant _name = \"Intellexus\";\r\n    string private constant _symbol = \"IXC\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    mapping(address => uint256) private _rOwned; // Reflective tokens owned by each account\r\n    mapping(address => uint256) private _tOwned; // Total tokens owned by each account, including reflections\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee; // Accounts excluded from fee\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 100000000 * 10**9; // Total supply\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal)); // Total reflective tokens\r\n    uint256 private _tFeeTotal; // Total fees\r\n    uint256 private _redisFeeOnBuy = 0; // Reflection fee on buy\r\n    uint256 private _taxFeeOnBuy = 0; // Tax fee on buy\r\n    uint256 private _redisFeeOnSell = 0; // Reflection fee on sell\r\n    uint256 private _taxFeeOnSell = 0; // Tax fee on sell\r\n\r\n    // Original Fee\r\n    uint256 private _redisFee = _redisFeeOnSell; // Current reflection fee\r\n    uint256 private _taxFee = _taxFeeOnSell; // Current tax fee\r\n\r\n    uint256 private _previousredisFee = _redisFee; // Previous reflection fee for restoring after transactions\r\n    uint256 private _previoustaxFee = _taxFee; // Previous tax fee for restoring after transactions\r\n\r\n    mapping (address => bool) public preTrader; // Pre-trading whitelist\r\n    address payable private _developmentAddress = payable(0x47F84d4307FEEBDeDC7426931EE1068c4142CD37); // Treasury MultiSig\r\n    address payable private _marketingAddress = payable(0x47F84d4307FEEBDeDC7426931EE1068c4142CD37); // Treasury MultiSig\r\n\r\n    IUniswapV2Router02 public uniswapV2Router; // Uniswap V2 Router\r\n    address public uniswapV2Pair; // Uniswap V2 Pair for this token\r\n\r\n    bool private tradingOpen; // Flag to control trading status\r\n    bool private inSwap = false; // Lock to prevent re-entrance in swap function\r\n    bool private swapEnabled = true; // Flag to enable/disable swapping mechanism\r\n\r\n    uint256 public _maxTxAmount = 1000000 * 10**9; // Max transaction amount\r\n    uint256 public _maxWalletSize = 2000000 * 10**9; // Max wallet holding amount\r\n    uint256 public _swapTokensAtAmount = 400000 * 10**9; // Amount at which swap is triggered\r\n\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount); // Event for updating max transaction amount\r\n\r\n    /**\r\n     * @dev Locks the swap during the execution of swap functions to prevent re-entrancy.\r\n     */\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the values for {_name}, {_symbol}, and {_decimals}.\r\n     * Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    constructor() {\r\n        _rOwned[_msgSender()] = _rTotal;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_developmentAddress] = true;\r\n        _isExcludedFromFee[_marketingAddress] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the name.\r\n     */\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for display purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     * Requirements:\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits an {Approval} event.\r\n     * Requirements:\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to convert a reflected amount to its corresponding token amount.\r\n     * @param rAmount Amount of tokens in reflections.\r\n     * @return uint256 The resulting token amount.\r\n     */\r\n    function tokenFromReflection(uint256 rAmount) private view returns (uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to remove all fee settings temporarily. Used for special transactions\r\n     * where fees should not be applied.\r\n     */\r\n    function removeAllFee() private {\r\n        if (_redisFee == 0 && _taxFee == 0) return;\r\n\r\n        _previousredisFee = _redisFee;\r\n        _previoustaxFee = _taxFee;\r\n\r\n        _redisFee = 0;\r\n        _taxFee = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Restores the fee settings to their previous values. Used after special transactions\r\n     * to reinstate the fee mechanism.\r\n     */\r\n    function restoreAllFee() private {\r\n        _redisFee = _previousredisFee;\r\n        _taxFee = _previoustaxFee;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is an internal function that emits an {Approval} event.\r\n     * Requirements:\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to handle token transfers, including business logic for trading restrictions,\r\n    * fee application, and swapping tokens for ETH under specific conditions.\r\n    * \r\n    * This function includes checks for trading status, max transaction amounts, wallet size restrictions,\r\n    * and applies fees or swaps tokens based on the contract's state and the nature of the transfer.\r\n    *\r\n    * @param from The address sending the tokens.\r\n    * @param to The address receiving the tokens.\r\n    * @param amount The amount of tokens to be transferred.\r\n    */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n    // Checks if the addresses are eligible for trading, enforcing restrictions before trading opens.\r\n    if (from != owner() && to != owner() && !preTrader[from] && !preTrader[to]) {\r\n        // Check if trading is open\r\n        if (!tradingOpen) {\r\n            require(preTrader[from], \"TOKEN: This account cannot send tokens until trading is enabled\");\r\n        }\r\n\r\n        require(amount <= _maxTxAmount, \"TOKEN: Max Transaction Limit\");\r\n\r\n        // Ensure the recipient's balance does not exceed the maximum wallet size unless adding liquidity.\r\n        if(to != uniswapV2Pair) {\r\n            require(balanceOf(to) + amount <= _maxWalletSize, \"TOKEN: Balance exceeds wallet size!\");\r\n        }\r\n\r\n        // Logic to handle swapping tokens for ETH if certain conditions are met.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool canSwap = contractTokenBalance >= _swapTokensAtAmount;\r\n\r\n        if(contractTokenBalance >= _maxTxAmount) {\r\n            contractTokenBalance = _maxTxAmount;\r\n        }\r\n\r\n        if (canSwap && !inSwap && from != uniswapV2Pair && swapEnabled && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n            swapTokensForEth(contractTokenBalance);\r\n            uint256 contractETHBalance = address(this).balance;\r\n            if (contractETHBalance > 0) {\r\n                sendETHToFee(address(this).balance);\r\n            }\r\n        }\r\n    }\r\n\r\n    bool takeFee = true;\r\n\r\n    // Determine if the transaction should take a fee.\r\n    if ((_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair && to != uniswapV2Pair)) {\r\n        takeFee = false;\r\n    } else {\r\n        // Set Fee for Buys\r\n        if(from == uniswapV2Pair && to != address(uniswapV2Router)) {\r\n            _redisFee = _redisFeeOnBuy;\r\n            _taxFee = _taxFeeOnBuy;\r\n        }\r\n\r\n        // Set Fee for Sells\r\n        if (to == uniswapV2Pair && from != address(uniswapV2Router)) {\r\n            _redisFee = _redisFeeOnSell;\r\n            _taxFee = _taxFeeOnSell;\r\n        }\r\n    }\r\n\r\n    _tokenTransfer(from, to, amount, takeFee);\r\n}\r\n\r\n    /**\r\n    * @dev Swaps tokens for Ethereum (ETH) using the Uniswap protocol.\r\n    * This function is marked with `lockTheSwap` to prevent reentrancy.\r\n    * @param tokenAmount Amount of tokens to swap for ETH.\r\n    */\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // Minimum amount of tokens to accept in swap\r\n            path,\r\n            address(this), // Recipient of the ETH\r\n            block.timestamp // Deadline for the swap\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Sends ETH to the marketing address.\r\n    * @param amount Amount of ETH to send.\r\n    */\r\n    function sendETHToFee(uint256 amount) private {\r\n        _marketingAddress.transfer(amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Enables or disables trading. Only callable by the contract owner.\r\n    * @param _tradingOpen The new trading state.\r\n    */\r\n    function setTrading(bool _tradingOpen) public onlyOwner {\r\n        tradingOpen = _tradingOpen;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows manual swapping of contract tokens for ETH. Restricted to development or marketing addresses.\r\n    */\r\n    function manualswap() external {\r\n        require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress, \"Only authorized addresses can initiate swap\");\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows manual sending of ETH to the marketing address. Restricted to development or marketing addresses.\r\n    */\r\n    function manualsend() external {\r\n        require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress, \"Only authorized addresses can send ETH\");\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }\r\n\r\n    /**\r\n    * @dev Handles token transfers, applying fee logic based on the transaction context.\r\n    * @param sender The address sending the tokens.\r\n    * @param recipient The address receiving the tokens.\r\n    * @param amount The amount of tokens to transfer.\r\n    * @param takeFee Specifies whether to apply transaction fees.\r\n    */\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) removeAllFee();\r\n        _transferStandard(sender, recipient, amount);\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n\r\n    /**\r\n    * @dev Performs the standard token transfer operation and applies fees.\r\n    * @param sender The address sending the tokens.\r\n    * @param recipient The address receiving the tokens.\r\n    * @param tAmount The amount of tokens to transfer, including any fees.\r\n    */\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tTeam\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        _takeTeam(tTeam);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Allocates a portion of the transaction fees to the team's address.\r\n    * @param tTeam The amount of tokens designated for the team.\r\n    */\r\n    function _takeTeam(uint256 tTeam) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rTeam = tTeam * currentRate;\r\n        _rOwned[address(this)] = _rOwned[address(this)] + rTeam;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Private function to reflect fees by decreasing `_rTotal` and increasing `_tFeeTotal`.\r\n     * @param rFee Reflect fees in reflection tokens.\r\n     * @param tFee Transaction fees in tokens to be added to total fees.\r\n     */\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal -= rFee;\r\n        _tFeeTotal += tFee;\r\n    }\r\n\r\n    /**\r\n     * @dev External payable function to receive ETH when sending directly to the contract's address.\r\n     */\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @dev Calculates and returns all necessary transaction values based on the transfer amount.\r\n     * @param tAmount Amount of tokens to transfer.\r\n     * @return rAmount Reflect amount.\r\n     * @return rTransferAmount Reflect transfer amount.\r\n     * @return rFee Reflect fee.\r\n     * @return tTransferAmount Token transfer amount.\r\n     * @return tFee Token fee.\r\n     * @return tTeam Team tokens.\r\n     */\r\n    function _getValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tTeam\r\n        )\r\n    {\r\n        (tTransferAmount, tFee, tTeam) = _getTValues(tAmount, _redisFee, _taxFee);\r\n        uint256 currentRate = _getRate();\r\n        (rAmount, rTransferAmount, rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates token transfer amount, fee, and team allocation.\r\n     * @param tAmount Transfer amount.\r\n     * @param redisFee Reflection fee.\r\n     * @param taxFee Tax fee.\r\n     * @return tTransferAmount Total transfer amount after fees.\r\n     * @return tFee Total reflection fee.\r\n     * @return tTeam Total team allocation.\r\n     */\r\n    function _getTValues(\r\n        uint256 tAmount,\r\n        uint256 redisFee,\r\n        uint256 taxFee\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tTeam\r\n        )\r\n    {\r\n        tFee = (tAmount * redisFee) / 100;\r\n        tTeam = (tAmount * taxFee) / 100;\r\n        tTransferAmount = tAmount - tFee - tTeam;\r\n        return (tTransferAmount, tFee, tTeam);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates reflect values based on token amounts and current rate.\r\n     * @param tAmount Token amount.\r\n     * @param tFee Token fee.\r\n     * @param tTeam Team token allocation.\r\n     * @param currentRate Current reflect rate.\r\n     * @return rAmount Reflect amount.\r\n     * @return rTransferAmount Reflect transfer amount.\r\n     * @return rFee Reflect fee.\r\n     */\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 tTeam,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee\r\n        )\r\n    {\r\n        rAmount = tAmount * currentRate;\r\n        rFee = tFee * currentRate;\r\n        uint256 rTeam = tTeam * currentRate;\r\n        rTransferAmount = rAmount - rFee - rTeam;\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current rate of tokens to reflections.\r\n     * @return The current rate of tokens to reflections.\r\n     */\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the current supply of tokens and reflections, accounting for excluded accounts.\r\n     * @return rSupply Current reflection supply.\r\n     * @return tSupply Current token supply.\r\n     */\r\n    function _getCurrentSupply() private view returns (uint256 rSupply, uint256 tSupply) {\r\n        rSupply = _rTotal;\r\n        tSupply = _tTotal;\r\n        // Here, additional logic could account for excluded accounts if necessary.\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the transaction fees for buys and sells.\r\n     * @dev Only callable by the contract owner.\r\n     * @param redisFeeOnBuy Reflection fee for buying transactions.\r\n     * @param redisFeeOnSell Reflection fee for selling transactions.\r\n     * @param taxFeeOnBuy Additional tax fee for buying transactions.\r\n     * @param taxFeeOnSell Additional tax fee for selling transactions.\r\n     */\r\n    function setFee(uint256 redisFeeOnBuy, uint256 redisFeeOnSell, uint256 taxFeeOnBuy, uint256 taxFeeOnSell) public onlyOwner {\r\n        _redisFeeOnBuy = redisFeeOnBuy;\r\n        _redisFeeOnSell = redisFeeOnSell;\r\n        _taxFeeOnBuy = taxFeeOnBuy;\r\n        _taxFeeOnSell = taxFeeOnSell;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the threshold amount of tokens required for swap and liquidity operations.\r\n     * @dev Only callable by the contract owner.\r\n     * @param swapTokensAtAmount The minimum token amount for swaps to occur.\r\n     */\r\n    function setMinSwapTokensThreshold(uint256 swapTokensAtAmount) public onlyOwner {\r\n        _swapTokensAtAmount = swapTokensAtAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Toggles the swap functionality on or off.\r\n     * @dev Only callable by the contract owner.\r\n     * @param _swapEnabled Boolean value to enable or disable swapping.\r\n     */\r\n    function toggleSwap(bool _swapEnabled) public onlyOwner {\r\n        swapEnabled = _swapEnabled;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the maximum transaction amount allowed in a transfer.\r\n     * @dev Only callable by the contract owner.\r\n     * @param maxTxAmount The maximum amount of tokens that can be transferred in a transaction.\r\n     */\r\n    function setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner {\r\n        _maxTxAmount = maxTxAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the maximum wallet size to prevent large holdings in a single wallet.\r\n     * @dev Only callable by the contract owner.\r\n     * @param maxWalletSize The maximum token amount a wallet can hold.\r\n     */\r\n    function setMaxWalletSize(uint256 maxWalletSize) public onlyOwner {\r\n        _maxWalletSize = maxWalletSize;\r\n    }\r\n\r\n    /**\r\n     * @notice Excludes or includes multiple accounts from transaction fees.\r\n     * @dev Only callable by the contract owner.\r\n     * @param accounts The addresses to be excluded or included.\r\n     * @param excluded Whether the accounts should be excluded from fees.\r\n     */\r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = excluded;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Allows specified accounts to participate in trading before trading is opened to the public.\r\n     * @dev Only callable by the contract owner.\r\n     * @param accounts The addresses to be allowed for pre-trading.\r\n     */\r\n    function allowPreTrading(address[] calldata accounts) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            preTrader[accounts[i]] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Removes the ability of specified accounts to participate in pre-trading.\r\n     * @dev Only callable by the contract owner.\r\n     * @param accounts The addresses to have pre-trading permissions removed.\r\n     */\r\n    function removePreTrading(address[] calldata accounts) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            delete preTrader[accounts[i]];\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"allowPreTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"preTrader\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"removePreTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redisFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redisFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletSize\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"setMinSwapTokensThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tradingOpen\",\"type\":\"bool\"}],\"name\":\"setTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"}],\"name\":\"toggleSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Intellexus", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://01e5692184bfccf82a427ef360ae80e3b105de03a8de148915b34a2c39350e38"}