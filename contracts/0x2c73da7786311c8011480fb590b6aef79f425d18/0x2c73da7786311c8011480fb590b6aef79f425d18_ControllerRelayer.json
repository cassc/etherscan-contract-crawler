{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/ControllerRelayer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {IController} from \\\"./interfaces/IController.sol\\\";\\nimport {IChainMessenger} from \\\"./interfaces/IChainMessenger.sol\\\";\\nimport {Ownable} from \\\"openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\n\\ncontract ControllerRelayer is Ownable {\\n    mapping(uint256 => mapping(uint256 => uint256)) private _chainRelayRecord;\\n\\n    mapping(uint256 => address) private _chainMessengers;\\n    IController private _controller;\\n\\n    constructor(address controller) {\\n        _controller = IController(controller);\\n    }\\n\\n    event GroupRelayed(\\n        uint256 epoch, uint256 indexed groupIndex, uint256 indexed groupEpoch, address indexed committer\\n    );\\n\\n    error AbsentChainMessenger(uint256 chainId);\\n    error GroupObsolete(uint256 groupIndex, uint256 relayedGroupEpoch, uint256 currentGroupEpoch);\\n    error GroupNotFinalized(uint256 groupIndex, uint256 groupEpoch);\\n\\n    function relayGroup(uint256 chainId, uint256 groupIndex) external {\\n        if (_chainMessengers[chainId] == address(0)) {\\n            revert AbsentChainMessenger(chainId);\\n        }\\n\\n        IController.Group memory groupToRelay = _controller.getGroup(groupIndex);\\n\\n        // need the group is not in a DKG process so that group info on current epoch is finalized\\n        if (_controller.getCoordinator(groupIndex) != address(0)) {\\n            revert GroupNotFinalized(groupIndex, groupToRelay.epoch);\\n        }\\n\\n        if (_chainRelayRecord[chainId][groupIndex] >= groupToRelay.epoch) {\\n            revert GroupObsolete(groupIndex, groupToRelay.epoch, _chainRelayRecord[chainId][groupIndex]);\\n        }\\n\\n        _chainRelayRecord[chainId][groupIndex] = groupToRelay.epoch;\\n        // call the messenger of corresponding chain\\n        IChainMessenger(_chainMessengers[chainId]).relayMessage(msg.sender, groupToRelay);\\n\\n        emit GroupRelayed(_controller.getGroupEpoch(), groupIndex, groupToRelay.epoch, msg.sender);\\n    }\\n\\n    function setChainMessenger(uint256 chainId, address chainMessenger) external onlyOwner {\\n        _chainMessengers[chainId] = chainMessenger;\\n    }\\n\\n    function setController(address controller) external onlyOwner {\\n        _controller = IController(controller);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IController {\\n    struct Group {\\n        uint256 index;\\n        uint256 epoch;\\n        uint256 size;\\n        uint256 threshold;\\n        Member[] members;\\n        address[] committers;\\n        CommitCache[] commitCacheList;\\n        bool isStrictlyMajorityConsensusReached;\\n        uint256[4] publicKey;\\n    }\\n\\n    struct Member {\\n        address nodeIdAddress;\\n        uint256[4] partialPublicKey;\\n    }\\n\\n    struct CommitResult {\\n        uint256 groupEpoch;\\n        uint256[4] publicKey;\\n        address[] disqualifiedNodes;\\n    }\\n\\n    struct CommitCache {\\n        address[] nodeIdAddress;\\n        CommitResult commitResult;\\n    }\\n\\n    struct Node {\\n        address idAddress;\\n        bytes dkgPublicKey;\\n        bool state;\\n        uint256 pendingUntilBlock;\\n    }\\n\\n    struct CommitDkgParams {\\n        uint256 groupIndex;\\n        uint256 groupEpoch;\\n        bytes publicKey;\\n        bytes partialPublicKey;\\n        address[] disqualifiedNodes;\\n    }\\n\\n    // node transaction\\n    function nodeRegister(bytes calldata dkgPublicKey) external;\\n\\n    function nodeActivate() external;\\n\\n    function nodeQuit() external;\\n\\n    function changeDkgPublicKey(bytes calldata dkgPublicKey) external;\\n\\n    function commitDkg(CommitDkgParams memory params) external;\\n\\n    function postProcessDkg(uint256 groupIndex, uint256 groupEpoch) external;\\n\\n    function nodeWithdraw(address recipient) external;\\n\\n    // adapter transaction\\n    function addReward(address[] memory nodes, uint256 ethAmount, uint256 arpaAmount) external;\\n\\n    function setLastOutput(uint256 lastOutput) external;\\n\\n    // view\\n    function getControllerConfig()\\n        external\\n        view\\n        returns (\\n            address stakingContractAddress,\\n            address adapterContractAddress,\\n            uint256 nodeStakingAmount,\\n            uint256 disqualifiedNodePenaltyAmount,\\n            uint256 defaultNumberOfCommitters,\\n            uint256 defaultDkgPhaseDuration,\\n            uint256 groupMaxCapacity,\\n            uint256 idealNumberOfGroups,\\n            uint256 pendingBlockAfterQuit,\\n            uint256 dkgPostProcessReward\\n        );\\n\\n    /// @notice Get list of all group indexes where group.isStrictlyMajorityConsensusReached == true\\n    /// @return uint256[] List of valid group indexes\\n    function getValidGroupIndices() external view returns (uint256[] memory);\\n\\n    function getGroupEpoch() external view returns (uint256);\\n\\n    function getGroupCount() external view returns (uint256);\\n\\n    function getGroup(uint256 index) external view returns (Group memory);\\n\\n    function getGroupThreshold(uint256 groupIndex) external view returns (uint256, uint256);\\n\\n    function getNode(address nodeAddress) external view returns (Node memory);\\n\\n    function getMember(uint256 groupIndex, uint256 memberIndex) external view returns (Member memory);\\n\\n    /// @notice Get the group index and member index of a given node.\\n    function getBelongingGroup(address nodeAddress) external view returns (int256, int256);\\n\\n    function getCoordinator(uint256 groupIndex) external view returns (address);\\n\\n    function getNodeWithdrawableTokens(address nodeAddress) external view returns (uint256, uint256);\\n\\n    function getLastOutput() external view returns (uint256);\\n\\n    /// @notice Check to see if a group has a partial public key registered for a given node.\\n    /// @return bool True if the node has a partial public key registered for the group.\\n    function isPartialKeyRegistered(uint256 groupIndex, address nodeIdAddress) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IChainMessenger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {IController} from \\\"./IController.sol\\\";\\n\\ninterface IChainMessenger {\\n    function relayMessage(address committer, IController.Group memory group) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"Staking-v0.1/=lib/Staking-v0.1/src/\",\r\n      \"Randcast-User-Contract/=lib/Randcast-User-Contract/contracts/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 300\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"AbsentChainMessenger\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groupIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"groupEpoch\",\"type\":\"uint256\"}],\"name\":\"GroupNotFinalized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groupIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relayedGroupEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentGroupEpoch\",\"type\":\"uint256\"}],\"name\":\"GroupObsolete\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"groupEpoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"committer\",\"type\":\"address\"}],\"name\":\"GroupRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"groupIndex\",\"type\":\"uint256\"}],\"name\":\"relayGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"chainMessenger\",\"type\":\"address\"}],\"name\":\"setChainMessenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ControllerRelayer", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "300", "ConstructorArguments": "000000000000000000000000bd0620c34796a4d978aecad929a3ad3d6b86280b", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}