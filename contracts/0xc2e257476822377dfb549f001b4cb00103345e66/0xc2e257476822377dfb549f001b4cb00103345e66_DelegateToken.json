{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/DelegateToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.21;\\n\\nimport {IDelegateToken, IERC721Metadata, IERC721Receiver, IERC1155Receiver} from \\\"./interfaces/IDelegateToken.sol\\\";\\nimport {MarketMetadata} from \\\"./MarketMetadata.sol\\\";\\nimport {PrincipalToken} from \\\"./PrincipalToken.sol\\\";\\n\\nimport {ReentrancyGuard} from \\\"openzeppelin/security/ReentrancyGuard.sol\\\";\\n\\nimport {IDelegateRegistry, DelegateTokenErrors as Errors, DelegateTokenStructs as Structs, DelegateTokenHelpers as Helpers} from \\\"./libraries/DelegateTokenLib.sol\\\";\\nimport {DelegateTokenStorageHelpers as StorageHelpers} from \\\"./libraries/DelegateTokenStorageHelpers.sol\\\";\\nimport {DelegateTokenRegistryHelpers as RegistryHelpers, RegistryHashes} from \\\"./libraries/DelegateTokenRegistryHelpers.sol\\\";\\nimport {DelegateTokenTransferHelpers as TransferHelpers, SafeERC20, IERC721, IERC20, IERC1155} from \\\"./libraries/DelegateTokenTransferHelpers.sol\\\";\\n\\ncontract DelegateToken is ReentrancyGuard, IDelegateToken {\\n    /*//////////////////////////////////////////////////////////////\\n    /                           IMMUTABLES                         /\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IDelegateToken\\n    address public immutable override delegateRegistry;\\n\\n    /// @inheritdoc IDelegateToken\\n    address public immutable override principalToken;\\n\\n    /// @inheritdoc IDelegateToken\\n    address public immutable marketMetadata;\\n\\n    /*//////////////////////////////////////////////////////////////\\n    /                            STORAGE                           /\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev delegateId, a hash of (msg.sender, salt), points a unique id to the StoragePosition\\n    mapping(uint256 delegateTokenId => uint256[3] info) internal delegateTokenInfo;\\n\\n    /// @notice mapping for ERC721 balances\\n    mapping(address delegateTokenHolder => uint256 balance) internal balances;\\n\\n    /// @notice approve for all mapping\\n    mapping(address account => mapping(address operator => bool enabled)) internal accountOperator;\\n\\n    /// @notice internal variables for Principle Token callbacks\\n    Structs.Uint256 internal principalMintAuthorization = Structs.Uint256(StorageHelpers.MINT_NOT_AUTHORIZED);\\n    Structs.Uint256 internal principalBurnAuthorization = Structs.Uint256(StorageHelpers.BURN_NOT_AUTHORIZED);\\n\\n    /// @notice internal variable 11155 callbacks\\n    Structs.Uint256 internal erc1155PullAuthorization = Structs.Uint256(TransferHelpers.ERC1155_NOT_PULLED);\\n\\n    /*//////////////////////////////////////////////////////////////\\n    /                      CONSTRUCTOR                             /\\n    //////////////////////////////////////////////////////////////*/\\n\\n    //slither-disable-next-line missing-zero-check\\n    constructor(address _delegateRegistry, address _principalToken, address _marketMetadata) {\\n        delegateRegistry = _delegateRegistry;\\n        principalToken = _principalToken;\\n        marketMetadata = _marketMetadata;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n    /                      MULTICALL                               /\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        bool success;\\n        unchecked {\\n            for (uint256 i = 0; i < data.length; ++i) {\\n                //slither-disable-next-line calls-loop,delegatecall-loop\\n                (success, results[i]) = address(this).delegatecall(data[i]);\\n                if (!success) revert Errors.MulticallFailed();\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n    /                    INTERFACES                                /\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\\n        return interfaceId == 0x2a55205a // ERC165 Interface ID for ERC2981\\n            || interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\\n            || interfaceId == 0x5b5e139f // ERC165 Interface ID for ERC721Metadata\\n            || interfaceId == 0x150b7a02 // ERC165 Interface ID for ERC721TokenReceiver\\n            || interfaceId == 0x4e2312e0; // ERC165 Interface ID for ERC1155TokenReceiver\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n    /                  ERCTOKENRECEIVER METHODS                    /\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IERC721Receiver\\n    function onERC721Received(address operator, address, uint256, bytes calldata) external view returns (bytes4) {\\n        if (address(this) == operator) return IERC721Receiver.onERC721Received.selector;\\n        revert Errors.InvalidERC721TransferOperator();\\n    }\\n\\n    /// @inheritdoc IERC1155Receiver\\n    function onERC1155Received(address operator, address, uint256, uint256, bytes calldata) external returns (bytes4) {\\n        TransferHelpers.revertInvalidERC1155PullCheck(erc1155PullAuthorization, operator);\\n        return IERC1155Receiver.onERC1155Received.selector;\\n    }\\n\\n    /// @inheritdoc IERC1155Receiver\\n    function onERC1155BatchReceived(address, address, uint256[] calldata, uint256[] calldata, bytes calldata) external pure returns (bytes4) {\\n        revert Errors.BatchERC1155TransferUnsupported();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n    /                 ERC721 METHODS                               /\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IERC721\\n    function balanceOf(address delegateTokenHolder) external view returns (uint256) {\\n        if (delegateTokenHolder == address(0)) revert Errors.DelegateTokenHolderZero();\\n        return balances[delegateTokenHolder];\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function ownerOf(uint256 delegateTokenId) external view returns (address delegateTokenHolder) {\\n        delegateTokenHolder = RegistryHelpers.loadTokenHolder(delegateRegistry, StorageHelpers.readRegistryHash(delegateTokenInfo, delegateTokenId));\\n        if (delegateTokenHolder == address(0)) revert Errors.DelegateTokenHolderZero();\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function getApproved(uint256 delegateTokenId) external view returns (address) {\\n        StorageHelpers.revertNotMinted(delegateTokenInfo, delegateTokenId);\\n        return StorageHelpers.readApproved(delegateTokenInfo, delegateTokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function isApprovedForAll(address account, address operator) external view returns (bool) {\\n        return accountOperator[account][operator];\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(address from, address to, uint256 delegateTokenId, bytes calldata data) external {\\n        transferFrom(from, to, delegateTokenId);\\n        Helpers.revertOnInvalidERC721ReceiverCallback(from, to, delegateTokenId, data);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(address from, address to, uint256 delegateTokenId) external {\\n        transferFrom(from, to, delegateTokenId);\\n        Helpers.revertOnInvalidERC721ReceiverCallback(from, to, delegateTokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function approve(address spender, uint256 delegateTokenId) external {\\n        bytes32 registryHash = StorageHelpers.readRegistryHash(delegateTokenInfo, delegateTokenId);\\n        StorageHelpers.revertNotMinted(registryHash, delegateTokenId);\\n        address delegateTokenHolder = RegistryHelpers.loadTokenHolder(delegateRegistry, registryHash);\\n        StorageHelpers.revertNotOwner(delegateTokenHolder);\\n        StorageHelpers.writeApproved(delegateTokenInfo, delegateTokenId, spender);\\n        emit Approval(delegateTokenHolder, spender, delegateTokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function setApprovalForAll(address operator, bool approved) external {\\n        accountOperator[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    /// @dev should revert if msg.sender does not meet one of the following:\\n    ///         - msg.sender is from address\\n    ///         - from has approved msg.sender for all\\n    ///         - msg.sender is approved for the delegateTokenId\\n    /// @dev balances should be incremented / decremented for from / to\\n    /// @dev approved for the delegateTokenId should be deleted (reset)\\n    /// @dev must emit the ERC721 Transfer(from, to, delegateTokenId) event\\n    /// @dev toAmount stored in the related registry delegation must be retrieved directly from registry storage and\\n    ///      not via the CheckDelegate method to avoid invariants with \\\"[specific rights]\\\" and \\\"\\\" classes\\n    /// @dev registryHash for the DelegateTokenId must point to the new registry delegation associated with the to\\n    /// address\\n    function transferFrom(address from, address to, uint256 delegateTokenId) public {\\n        if (to == address(0)) revert Errors.ToIsZero();\\n        bytes32 registryHash = StorageHelpers.readRegistryHash(delegateTokenInfo, delegateTokenId);\\n        StorageHelpers.revertNotMinted(registryHash, delegateTokenId);\\n        (address delegateTokenHolder, address underlyingContract) = RegistryHelpers.loadTokenHolderAndContract(delegateRegistry, registryHash);\\n        if (from != delegateTokenHolder) revert Errors.FromNotDelegateTokenHolder();\\n        // We can use `from` here instead of delegateTokenHolder since we've just verified that from == delegateTokenHolder\\n        StorageHelpers.revertNotApprovedOrOperator(accountOperator, delegateTokenInfo, from, delegateTokenId);\\n        StorageHelpers.incrementBalance(balances, to);\\n        StorageHelpers.decrementBalance(balances, from);\\n        StorageHelpers.writeApproved(delegateTokenInfo, delegateTokenId, address(0));\\n        emit Transfer(from, to, delegateTokenId);\\n        IDelegateRegistry.DelegationType underlyingType = RegistryHashes.decodeType(registryHash);\\n        bytes32 underlyingRights = RegistryHelpers.loadRights(delegateRegistry, registryHash);\\n        bytes32 newRegistryHash = 0;\\n        if (underlyingType == IDelegateRegistry.DelegationType.ERC721) {\\n            uint256 underlyingTokenId = RegistryHelpers.loadTokenId(delegateRegistry, registryHash);\\n            newRegistryHash = RegistryHashes.erc721Hash(address(this), underlyingRights, to, underlyingTokenId, underlyingContract);\\n            StorageHelpers.writeRegistryHash(delegateTokenInfo, delegateTokenId, newRegistryHash);\\n            RegistryHelpers.transferERC721(delegateRegistry, registryHash, from, newRegistryHash, to, underlyingRights, underlyingContract, underlyingTokenId);\\n        } else if (underlyingType == IDelegateRegistry.DelegationType.ERC20) {\\n            newRegistryHash = RegistryHashes.erc20Hash(address(this), underlyingRights, to, underlyingContract);\\n            StorageHelpers.writeRegistryHash(delegateTokenInfo, delegateTokenId, newRegistryHash);\\n            RegistryHelpers.transferERC20(\\n                delegateRegistry,\\n                registryHash,\\n                from,\\n                newRegistryHash,\\n                to,\\n                StorageHelpers.readUnderlyingAmount(delegateTokenInfo, delegateTokenId),\\n                underlyingRights,\\n                underlyingContract\\n            );\\n        } else if (underlyingType == IDelegateRegistry.DelegationType.ERC1155) {\\n            uint256 underlyingTokenId = RegistryHelpers.loadTokenId(delegateRegistry, registryHash);\\n            newRegistryHash = RegistryHashes.erc1155Hash(address(this), underlyingRights, to, underlyingTokenId, underlyingContract);\\n            StorageHelpers.writeRegistryHash(delegateTokenInfo, delegateTokenId, newRegistryHash);\\n            RegistryHelpers.transferERC1155(\\n                delegateRegistry,\\n                registryHash,\\n                from,\\n                newRegistryHash,\\n                to,\\n                StorageHelpers.readUnderlyingAmount(delegateTokenInfo, delegateTokenId),\\n                underlyingRights,\\n                underlyingContract,\\n                underlyingTokenId\\n            );\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n    /                EXTENDED ERC721 METHODS                       /\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IERC721Metadata\\n    function name() external pure returns (string memory) {\\n        return \\\"Delegate Token\\\";\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function symbol() external pure returns (string memory) {\\n        return \\\"DT\\\";\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 delegateTokenId) external view returns (string memory) {\\n        return MarketMetadata(marketMetadata).delegateTokenURI(delegateTokenId, getDelegateTokenInfo(delegateTokenId));\\n    }\\n\\n    /// @inheritdoc IDelegateToken\\n    function isApprovedOrOwner(address spender, uint256 delegateTokenId) external view returns (bool) {\\n        bytes32 registryHash = StorageHelpers.readRegistryHash(delegateTokenInfo, delegateTokenId);\\n        StorageHelpers.revertNotMinted(registryHash, delegateTokenId);\\n        address delegateTokenHolder = RegistryHelpers.loadTokenHolder(delegateRegistry, registryHash);\\n        return spender == delegateTokenHolder || accountOperator[delegateTokenHolder][spender] || StorageHelpers.readApproved(delegateTokenInfo, delegateTokenId) == spender;\\n    }\\n\\n    /// @inheritdoc IDelegateToken\\n    function baseURI() external view returns (string memory) {\\n        return MarketMetadata(marketMetadata).baseURI();\\n    }\\n\\n    /// @inheritdoc IDelegateToken\\n    function contractURI() external view returns (string memory) {\\n        return MarketMetadata(marketMetadata).delegateTokenContractURI();\\n    }\\n\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) external view returns (address receiver, uint256 royaltyAmount) {\\n        (receiver, royaltyAmount) = MarketMetadata(marketMetadata).royaltyInfo(tokenId, salePrice);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n    /                   DELEGATE TOKEN METHODS                     /\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IDelegateToken\\n    function getDelegateTokenInfo(uint256 delegateTokenId) public view returns (Structs.DelegateInfo memory delegateInfo) {\\n        bytes32 registryHash = StorageHelpers.readRegistryHash(delegateTokenInfo, delegateTokenId);\\n        StorageHelpers.revertNotMinted(registryHash, delegateTokenId);\\n        delegateInfo.tokenType = RegistryHashes.decodeType(registryHash);\\n        (delegateInfo.delegateHolder, delegateInfo.tokenContract) = RegistryHelpers.loadTokenHolderAndContract(delegateRegistry, registryHash);\\n        delegateInfo.rights = RegistryHelpers.loadRights(delegateRegistry, registryHash);\\n        delegateInfo.principalHolder = IERC721(principalToken).ownerOf(delegateTokenId);\\n        delegateInfo.expiry = StorageHelpers.readExpiry(delegateTokenInfo, delegateTokenId);\\n        if (delegateInfo.tokenType == IDelegateRegistry.DelegationType.ERC20) delegateInfo.tokenId = 0;\\n        else delegateInfo.tokenId = RegistryHelpers.loadTokenId(delegateRegistry, registryHash);\\n        if (delegateInfo.tokenType == IDelegateRegistry.DelegationType.ERC721) delegateInfo.amount = 0;\\n        else delegateInfo.amount = StorageHelpers.readUnderlyingAmount(delegateTokenInfo, delegateTokenId);\\n    }\\n\\n    /// @inheritdoc IDelegateToken\\n    function getDelegateTokenId(address caller, uint256 salt) external view returns (uint256 delegateTokenId) {\\n        delegateTokenId = Helpers.delegateIdNoRevert(caller, salt);\\n        StorageHelpers.revertAlreadyExisted(delegateTokenInfo, delegateTokenId);\\n    }\\n\\n    /// @inheritdoc IDelegateToken\\n    function burnAuthorizedCallback() external view {\\n        StorageHelpers.checkBurnAuthorized(principalToken, principalBurnAuthorization);\\n    }\\n\\n    /// @inheritdoc IDelegateToken\\n    function mintAuthorizedCallback() external view {\\n        StorageHelpers.checkMintAuthorized(principalToken, principalMintAuthorization);\\n    }\\n\\n    /// @inheritdoc IDelegateToken\\n    function create(Structs.DelegateInfo calldata delegateInfo, uint256 salt) external nonReentrant returns (uint256 delegateTokenId) {\\n        TransferHelpers.pullAssetsAndCheckType(erc1155PullAuthorization, delegateInfo);\\n        Helpers.revertOldExpiry(delegateInfo.expiry);\\n        if (delegateInfo.delegateHolder == address(0)) revert Errors.ToIsZero();\\n        delegateTokenId = Helpers.delegateIdNoRevert(msg.sender, salt);\\n        StorageHelpers.revertAlreadyExisted(delegateTokenInfo, delegateTokenId);\\n        StorageHelpers.incrementBalance(balances, delegateInfo.delegateHolder);\\n        StorageHelpers.writeExpiry(delegateTokenInfo, delegateTokenId, delegateInfo.expiry);\\n        emit Transfer(address(0), delegateInfo.delegateHolder, delegateTokenId);\\n        bytes32 newRegistryHash = 0;\\n        if (delegateInfo.tokenType == IDelegateRegistry.DelegationType.ERC721) {\\n            newRegistryHash = RegistryHashes.erc721Hash(address(this), delegateInfo.rights, delegateInfo.delegateHolder, delegateInfo.tokenId, delegateInfo.tokenContract);\\n            StorageHelpers.writeRegistryHash(delegateTokenInfo, delegateTokenId, newRegistryHash);\\n            RegistryHelpers.delegateERC721(delegateRegistry, newRegistryHash, delegateInfo);\\n        } else if (delegateInfo.tokenType == IDelegateRegistry.DelegationType.ERC20) {\\n            StorageHelpers.writeUnderlyingAmount(delegateTokenInfo, delegateTokenId, delegateInfo.amount);\\n            newRegistryHash = RegistryHashes.erc20Hash(address(this), delegateInfo.rights, delegateInfo.delegateHolder, delegateInfo.tokenContract);\\n            StorageHelpers.writeRegistryHash(delegateTokenInfo, delegateTokenId, newRegistryHash);\\n            RegistryHelpers.incrementERC20(delegateRegistry, newRegistryHash, delegateInfo);\\n        } else if (delegateInfo.tokenType == IDelegateRegistry.DelegationType.ERC1155) {\\n            StorageHelpers.writeUnderlyingAmount(delegateTokenInfo, delegateTokenId, delegateInfo.amount);\\n            newRegistryHash = RegistryHashes.erc1155Hash(address(this), delegateInfo.rights, delegateInfo.delegateHolder, delegateInfo.tokenId, delegateInfo.tokenContract);\\n            StorageHelpers.writeRegistryHash(delegateTokenInfo, delegateTokenId, newRegistryHash);\\n            RegistryHelpers.incrementERC1155(delegateRegistry, newRegistryHash, delegateInfo);\\n        }\\n        StorageHelpers.mintPrincipal(principalToken, principalMintAuthorization, delegateInfo.principalHolder, delegateTokenId);\\n    }\\n\\n    /// @inheritdoc IDelegateToken\\n    function extend(uint256 delegateTokenId, uint256 newExpiry) external {\\n        StorageHelpers.revertNotMinted(delegateTokenInfo, delegateTokenId);\\n        Helpers.revertOldExpiry(newExpiry);\\n        uint256 previousExpiry = StorageHelpers.readExpiry(delegateTokenInfo, delegateTokenId);\\n        if (newExpiry <= previousExpiry) revert Errors.ExpiryTooSmall();\\n        if (PrincipalToken(principalToken).isApprovedOrOwner(msg.sender, delegateTokenId)) {\\n            StorageHelpers.writeExpiry(delegateTokenInfo, delegateTokenId, newExpiry);\\n            emit ExpiryExtended(delegateTokenId, previousExpiry, newExpiry);\\n            return;\\n        }\\n        revert Errors.NotApproved(msg.sender, delegateTokenId);\\n    }\\n\\n    /// @inheritdoc IDelegateToken\\n    function rescind(uint256 delegateTokenId) external {\\n        transferFrom(\\n            RegistryHelpers.loadTokenHolder(delegateRegistry, StorageHelpers.readRegistryHash(delegateTokenInfo, delegateTokenId)),\\n            IERC721(principalToken).ownerOf(delegateTokenId),\\n            delegateTokenId\\n        );\\n    }\\n\\n    /// @inheritdoc IDelegateToken\\n    function withdraw(uint256 delegateTokenId) external nonReentrant {\\n        bytes32 registryHash = StorageHelpers.readRegistryHash(delegateTokenInfo, delegateTokenId);\\n        StorageHelpers.writeRegistryHash(delegateTokenInfo, delegateTokenId, bytes32(StorageHelpers.ID_USED));\\n        // Sets registry pointer to used flag\\n        StorageHelpers.revertNotMinted(registryHash, delegateTokenId);\\n        (address delegateTokenHolder, address underlyingContract) = RegistryHelpers.loadTokenHolderAndContract(delegateRegistry, registryHash);\\n        StorageHelpers.revertInvalidWithdrawalConditions(delegateTokenInfo, accountOperator, delegateTokenId, delegateTokenHolder);\\n        StorageHelpers.decrementBalance(balances, delegateTokenHolder);\\n        delete delegateTokenInfo[delegateTokenId][StorageHelpers.PACKED_INFO_POSITION]; // Deletes both expiry and approved\\n        emit Transfer(delegateTokenHolder, address(0), delegateTokenId);\\n        IDelegateRegistry.DelegationType delegationType = RegistryHashes.decodeType(registryHash);\\n        bytes32 underlyingRights = RegistryHelpers.loadRights(delegateRegistry, registryHash);\\n        if (delegationType == IDelegateRegistry.DelegationType.ERC721) {\\n            uint256 erc721UnderlyingTokenId = RegistryHelpers.loadTokenId(delegateRegistry, registryHash);\\n            RegistryHelpers.revokeERC721(delegateRegistry, registryHash, delegateTokenHolder, underlyingContract, erc721UnderlyingTokenId, underlyingRights);\\n            StorageHelpers.burnPrincipal(principalToken, principalBurnAuthorization, delegateTokenId);\\n            IERC721(underlyingContract).transferFrom(address(this), msg.sender, erc721UnderlyingTokenId);\\n        } else if (delegationType == IDelegateRegistry.DelegationType.ERC20) {\\n            uint256 erc20UnderlyingAmount = StorageHelpers.readUnderlyingAmount(delegateTokenInfo, delegateTokenId);\\n            StorageHelpers.writeUnderlyingAmount(delegateTokenInfo, delegateTokenId, 0); // Deletes amount\\n            RegistryHelpers.decrementERC20(delegateRegistry, registryHash, delegateTokenHolder, underlyingContract, erc20UnderlyingAmount, underlyingRights);\\n            StorageHelpers.burnPrincipal(principalToken, principalBurnAuthorization, delegateTokenId);\\n            SafeERC20.safeTransfer(IERC20(underlyingContract), msg.sender, erc20UnderlyingAmount);\\n        } else if (delegationType == IDelegateRegistry.DelegationType.ERC1155) {\\n            uint256 erc1155UnderlyingAmount = StorageHelpers.readUnderlyingAmount(delegateTokenInfo, delegateTokenId);\\n            StorageHelpers.writeUnderlyingAmount(delegateTokenInfo, delegateTokenId, 0); // Deletes amount\\n            uint256 erc1155UnderlyingTokenId = RegistryHelpers.loadTokenId(delegateRegistry, registryHash);\\n            RegistryHelpers.decrementERC1155(\\n                delegateRegistry, registryHash, delegateTokenHolder, underlyingContract, erc1155UnderlyingTokenId, erc1155UnderlyingAmount, underlyingRights\\n            );\\n            StorageHelpers.burnPrincipal(principalToken, principalBurnAuthorization, delegateTokenId);\\n            IERC1155(underlyingContract).safeTransferFrom(address(this), msg.sender, erc1155UnderlyingTokenId, erc1155UnderlyingAmount, \\\"\\\");\\n        }\\n    }\\n\\n    /// @inheritdoc IDelegateToken\\n    function flashloan(Structs.FlashInfo calldata info) external payable nonReentrant {\\n        StorageHelpers.revertNotOperator(accountOperator, info.delegateHolder);\\n        if (info.tokenType == IDelegateRegistry.DelegationType.ERC721) {\\n            RegistryHelpers.revertERC721FlashUnavailable(delegateRegistry, info);\\n            IERC721(info.tokenContract).transferFrom(address(this), info.receiver, info.tokenId);\\n            Helpers.revertOnCallingInvalidFlashloan(info);\\n            TransferHelpers.checkERC721BeforePull(info.amount, info.tokenContract, info.tokenId);\\n            TransferHelpers.pullERC721AfterCheck(info.tokenContract, info.tokenId);\\n        } else if (info.tokenType == IDelegateRegistry.DelegationType.ERC20) {\\n            RegistryHelpers.revertERC20FlashAmountUnavailable(delegateRegistry, info);\\n            SafeERC20.safeTransfer(IERC20(info.tokenContract), info.receiver, info.amount);\\n            Helpers.revertOnCallingInvalidFlashloan(info);\\n            TransferHelpers.checkERC20BeforePull(info.amount, info.tokenContract, info.tokenId);\\n            TransferHelpers.pullERC20AfterCheck(info.tokenContract, info.amount);\\n        } else if (info.tokenType == IDelegateRegistry.DelegationType.ERC1155) {\\n            RegistryHelpers.revertERC1155FlashAmountUnavailable(delegateRegistry, info);\\n            TransferHelpers.checkERC1155BeforePull(erc1155PullAuthorization, info.amount);\\n            IERC1155(info.tokenContract).safeTransferFrom(address(this), info.receiver, info.tokenId, info.amount, \\\"\\\");\\n            Helpers.revertOnCallingInvalidFlashloan(info);\\n            TransferHelpers.pullERC1155AfterCheck(erc1155PullAuthorization, info.amount, info.tokenContract, info.tokenId);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IDelegateToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.4;\\n\\nimport {IERC721Metadata} from \\\"openzeppelin/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport {IERC721Receiver} from \\\"openzeppelin/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IERC1155Receiver} from \\\"openzeppelin/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport {IERC2981} from \\\"openzeppelin/interfaces/IERC2981.sol\\\";\\n\\nimport {DelegateTokenStructs as Structs} from \\\"../libraries/DelegateTokenLib.sol\\\";\\n\\ninterface IDelegateToken is IERC721Metadata, IERC721Receiver, IERC1155Receiver, IERC2981 {\\n    /*//////////////////////////////////////////////////////////////\\n                             EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * To prevent doubled event emissions, the latest version of the DelegateToken uses the ERC721 Transfer(from, to, id) event standard to infer meaning that was\\n     * previously double covered by \\\"RightsCreated\\\" and \\\"RightsBurned\\\" events\\n     * A Transfer event with from = address(0) is a \\\"create\\\" event\\n     * A Transfer event with to = address(0) is a \\\"withdraw\\\" event\\n     */\\n\\n    /// @notice Emitted when a principal token holder extends the expiry of the delegate token\\n    event ExpiryExtended(uint256 indexed delegateTokenId, uint256 previousExpiry, uint256 newExpiry);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                      VIEW & INTROSPECTION\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice The v2 delegate registry address\\n    function delegateRegistry() external view returns (address);\\n\\n    /// @notice The principal token deployed in tandem with this delegate token\\n    function principalToken() external view returns (address);\\n\\n    /// @notice The onchain metadata contract for both DT and PT\\n    function marketMetadata() external view returns (address);\\n\\n    /// @notice Image metadata location, but attributes are stored onchain\\n    function baseURI() external view returns (string memory);\\n\\n    /// @notice Adapted from solmate's\\n    /// [ERC721](https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\n    function isApprovedOrOwner(address spender, uint256 delegateTokenId) external view returns (bool);\\n\\n    /**\\n     * @notice Fetches the info struct of a delegate token\\n     * @param delegateTokenId The id of the delegateToken to query info for\\n     * @return delegateInfo The DelegateInfo struct\\n     */\\n    function getDelegateTokenInfo(uint256 delegateTokenId) external view returns (Structs.DelegateInfo memory delegateInfo);\\n\\n    /**\\n     * @notice Deterministic function for generating a delegateId. Because msg.sender and freely chosen salt are fixed, no griefing\\n     * @param creator The caller of create\\n     * @param salt Allows the creation of a new unique id\\n     * @return delegateId\\n     */\\n    function getDelegateTokenId(address creator, uint256 salt) external view returns (uint256 delegateId);\\n\\n    /// @notice Returns contract-level metadata URI for OpenSea\\n    /// (reference)[https://docs.opensea.io/docs/contract-level-metadata]\\n    function contractURI() external view returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         STATE CHANGING\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Create rights token pair pulling underlying token from `msg.sender`\\n     * @param delegateInfo struct containing the details of the delegate token to be created\\n     * @param salt A randomly chosen value, never repeated, to generate unique delegateIds for a particular `msg.sender`\\n     * @return delegateTokenId New rights ID that is also the token ID of both the newly created principal and delegate tokens.\\n     */\\n    function create(Structs.DelegateInfo calldata delegateInfo, uint256 salt) external returns (uint256 delegateTokenId);\\n\\n    /**\\n     * @notice Allows the principal token owner or any approved operator to extend the expiry of the delegation rights.\\n     * @param delegateTokenId The ID of the rights being extended.\\n     * @param newExpiry The absolute timestamp to set the expiry\\n     */\\n    function extend(uint256 delegateTokenId, uint256 newExpiry) external;\\n\\n    /**\\n     * @notice Allows the delegate owner or any approved operator to return a delegate token to the principal rights holder early, allowing the principal rights holder to redeem\\n     * the underlying token(s) early\\n     * @param delegateTokenId Which delegate right to rescind\\n     */\\n    function rescind(uint256 delegateTokenId) external;\\n\\n    /**\\n     * @notice Allows principal rights owner or approved operator to withdraw the underlying token once the delegation rights have either met their expiration or been rescinded.\\n     * Can also be called early if the caller is approved or owner of the delegate token (i.e. they wouldn't need to\\n     * call rescind & withdraw), or approved operator of the delegate token holder\\n     * \\\"Burns\\\" the delegate token, principal token, and returns the underlying tokens to the caller.\\n     * @param delegateTokenId id of the corresponding delegate token\\n     */\\n    function withdraw(uint256 delegateTokenId) external;\\n\\n    /**\\n     * @notice Allows delegate token owner or approved operator to borrow their underlying tokens for the duration of a single atomic transaction\\n     * @dev At the conclusion of the flashloan transaction, the asset must be held and approved in `msg.sender` address, not `info.receiver`\\n     * @param info IDelegateFlashloan FlashInfo struct\\n     */\\n    function flashloan(Structs.FlashInfo calldata info) external payable;\\n\\n    /// @notice Callback function for principal token during the create flow\\n    function burnAuthorizedCallback() external;\\n\\n    /// @notice Callback function for principal token during the withdraw flow\\n    function mintAuthorizedCallback() external;\\n}\\n\"\r\n    },\r\n    \"src/MarketMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.21;\\n\\nimport {DelegateTokenStructs, DelegateTokenErrors} from \\\"./libraries/DelegateTokenLib.sol\\\";\\nimport {IDelegateRegistry} from \\\"delegate-registry/src/IDelegateRegistry.sol\\\";\\n\\nimport {Ownable2Step} from \\\"openzeppelin/access/Ownable2Step.sol\\\";\\nimport {ERC2981} from \\\"openzeppelin/token/common/ERC2981.sol\\\";\\n\\nimport {Base64} from \\\"openzeppelin/utils/Base64.sol\\\";\\nimport {Strings} from \\\"openzeppelin/utils/Strings.sol\\\";\\n\\ncontract MarketMetadata is Ownable2Step, ERC2981 {\\n    using Strings for address;\\n    using Strings for uint256;\\n\\n    string public baseURI;\\n\\n    string internal constant DT_NAME = \\\"Delegate Token\\\";\\n    string internal constant PT_NAME = \\\"Principal Token\\\";\\n    string internal constant DT_DESCRIPTION =\\n        \\\"The Delegate Marketplace lets you escrow your token for a chosen time period and receive a token representing its delegate rights. These tokens represent tokenized delegate rights.\\\";\\n    string internal constant PT_DESCRIPTION =\\n        \\\"The Delegate Marketplace lets you escrow your token for a chosen time period and receive a token representing its delegate rights. These tokens represents the right to claim the escrowed spot asset once the delegate token expires.\\\";\\n\\n    constructor(address initialOwner, string memory initialBaseURI) {\\n        baseURI = initialBaseURI;\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    function setBaseURI(string calldata uri) external onlyOwner {\\n        baseURI = uri;\\n    }\\n\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external onlyOwner {\\n        _setDefaultRoyalty(receiver, feeNumerator);\\n    }\\n\\n    function deleteDefaultRoyalty() external onlyOwner {\\n        _deleteDefaultRoyalty();\\n    }\\n\\n    function delegateTokenContractURI() external view returns (string memory) {\\n        return string.concat(baseURI, \\\"delegateContract\\\");\\n    }\\n\\n    function principalTokenContractURI() external view returns (string memory) {\\n        return string.concat(baseURI, \\\"principalContract\\\");\\n    }\\n\\n    /// @dev Attributes are \\\"collection address\\\", \\\"token id\\\", \\\"expires at\\\", \\\"principal owner address\\\", \\\"delegate status\\\"\\n    function delegateTokenURI(uint256 delegateTokenId, DelegateTokenStructs.DelegateInfo calldata info) external view returns (string memory) {\\n        string memory imageUrl = string.concat(baseURI, \\\"delegate/\\\", delegateTokenId.toString());\\n\\n        // Split attributes construction into two parts to avoid stack-too-deep\\n        string memory attributes1 = string.concat(\\n            '[{\\\"trait_type\\\":\\\"Token Type\\\",\\\"value\\\":\\\"',\\n            _tokenTypeToString(info.tokenType),\\n            '\\\"},{\\\"trait_type\\\":\\\"Principal Holder\\\",\\\"value\\\":\\\"',\\n            info.principalHolder.toHexString(),\\n            '\\\"},{\\\"trait_type\\\":\\\"Delegate Holder\\\",\\\"value\\\":\\\"',\\n            info.delegateHolder.toHexString(),\\n            '\\\"},{\\\"trait_type\\\":\\\"Token Contract\\\",\\\"value\\\":\\\"',\\n            info.tokenContract.toHexString()\\n        );\\n        string memory attributes2 = string.concat(\\n            '\\\"},{\\\"trait_type\\\":\\\"Token Id\\\",\\\"value\\\":\\\"',\\n            info.tokenId.toString(),\\n            '\\\"},{\\\"trait_type\\\":\\\"Token Amount\\\",\\\"display_type\\\":\\\"number\\\",\\\"value\\\":',\\n            info.amount.toString(),\\n            '},{\\\"trait_type\\\":\\\"Rights\\\",\\\"value\\\":\\\"',\\n            fromSmallString(info.rights),\\n            '\\\"},{\\\"trait_type\\\":\\\"Expiry\\\",\\\"display_type\\\":\\\"date\\\",\\\"value\\\":',\\n            info.expiry.toString(),\\n            \\\"}]\\\"\\n        );\\n        string memory attributes = string.concat(attributes1, attributes2);\\n\\n        string memory metadataString = string.concat('{\\\"name\\\": \\\"', DT_NAME, '\\\",\\\"description\\\":\\\"', DT_DESCRIPTION, '\\\",\\\"image\\\":\\\"', imageUrl, '\\\",\\\"attributes\\\":', attributes, \\\"}\\\");\\n\\n        return string.concat(\\\"data:application/json;base64,\\\", Base64.encode(bytes(metadataString)));\\n    }\\n\\n    function principalTokenURI(uint256 delegateTokenId, DelegateTokenStructs.DelegateInfo calldata info) external view returns (string memory) {\\n        string memory imageUrl = string.concat(baseURI, \\\"principal/\\\", delegateTokenId.toString());\\n\\n        // Split attributes construction into two parts to avoid stack-too-deep\\n        string memory attributes1 = string.concat(\\n            '[{\\\"trait_type\\\":\\\"Token Type\\\",\\\"value\\\":\\\"',\\n            _tokenTypeToString(info.tokenType),\\n            '\\\"},{\\\"trait_type\\\":\\\"Principal Holder\\\",\\\"value\\\":\\\"',\\n            info.principalHolder.toHexString(),\\n            '\\\"},{\\\"trait_type\\\":\\\"Delegate Holder\\\",\\\"value\\\":\\\"',\\n            info.delegateHolder.toHexString(),\\n            '\\\"},{\\\"trait_type\\\":\\\"Token Contract\\\",\\\"value\\\":\\\"',\\n            info.tokenContract.toHexString()\\n        );\\n        string memory attributes2 = string.concat(\\n            '\\\"},{\\\"trait_type\\\":\\\"Token Id\\\",\\\"value\\\":\\\"',\\n            info.tokenId.toString(),\\n            '\\\"},{\\\"trait_type\\\":\\\"Token Amount\\\",\\\"display_type\\\":\\\"number\\\",\\\"value\\\":',\\n            info.amount.toString(),\\n            '},{\\\"trait_type\\\":\\\"Rights\\\",\\\"value\\\":\\\"',\\n            fromSmallString(info.rights),\\n            '\\\"},{\\\"trait_type\\\":\\\"Expiry\\\",\\\"display_type\\\":\\\"date\\\",\\\"value\\\":',\\n            info.expiry.toString(),\\n            \\\"}]\\\"\\n        );\\n        string memory attributes = string.concat(attributes1, attributes2);\\n\\n        string memory metadataString = string.concat('{\\\"name\\\": \\\"', PT_NAME, '\\\",\\\"description\\\":\\\"', PT_DESCRIPTION, '\\\",\\\"image\\\":\\\"', imageUrl, '\\\",\\\"attributes\\\":', attributes, \\\"}\\\");\\n\\n        return string.concat(\\\"data:application/json;base64,\\\", Base64.encode(bytes(metadataString)));\\n    }\\n\\n    function _tokenTypeToString(IDelegateRegistry.DelegationType tokenType) internal pure returns (string memory) {\\n        if (tokenType == IDelegateRegistry.DelegationType.ALL) {\\n            return \\\"ALL\\\";\\n        } else if (tokenType == IDelegateRegistry.DelegationType.CONTRACT) {\\n            return \\\"CONTRACT\\\";\\n        } else if (tokenType == IDelegateRegistry.DelegationType.ERC721) {\\n            return \\\"ERC721\\\";\\n        } else if (tokenType == IDelegateRegistry.DelegationType.ERC20) {\\n            return \\\"ERC20\\\";\\n        } else if (tokenType == IDelegateRegistry.DelegationType.ERC1155) {\\n            return \\\"ERC1155\\\";\\n        } else {\\n            revert DelegateTokenErrors.InvalidTokenType(tokenType);\\n        }\\n    }\\n\\n    /// @dev Returns a string from a small bytes32 string.\\n    function fromSmallString(bytes32 smallString) internal pure returns (string memory result) {\\n        if (smallString == bytes32(0)) return result;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let n\\n            for {} 1 {} {\\n                n := add(n, 1)\\n                if iszero(byte(n, smallString)) { break } // Scan for '\\\\0'.\\n            }\\n            mstore(result, n)\\n            let o := add(result, 0x20)\\n            mstore(o, smallString)\\n            mstore(add(o, n), 0)\\n            mstore(0x40, add(result, 0x40))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/PrincipalToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.21;\\n\\nimport {IDelegateToken} from \\\"./interfaces/IDelegateToken.sol\\\";\\n\\nimport {ERC721} from \\\"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\\\";\\nimport {IERC2981} from \\\"openzeppelin-contracts/contracts/interfaces/IERC2981.sol\\\";\\nimport {MarketMetadata} from \\\"./MarketMetadata.sol\\\";\\n\\n/// @notice A simple NFT that doesn't store any user data, being tightly linked to the stateful Delegate Token.\\n/// @notice The holder of the PT is eligible to reclaim the escrowed NFT when the DT expires or is burned.\\ncontract PrincipalToken is ERC721(\\\"Principal Token\\\", \\\"PT\\\"), IERC2981 {\\n    IDelegateToken public immutable delegateToken;\\n\\n    error DelegateTokenZero();\\n    error CallerNotDelegateToken();\\n    error NotApproved(address spender, uint256 id);\\n\\n    constructor(address _delegateToken) {\\n        if (_delegateToken == address(0)) revert DelegateTokenZero();\\n        delegateToken = IDelegateToken(_delegateToken);\\n    }\\n\\n    function _checkDelegateTokenCaller() internal view {\\n        if (msg.sender == address(delegateToken)) return;\\n        revert CallerNotDelegateToken();\\n    }\\n\\n    /// @notice Mints a PT if and only if the DT contract calls and has authorized\\n    function mint(address to, uint256 id) external {\\n        _checkDelegateTokenCaller();\\n        _mint(to, id);\\n        delegateToken.mintAuthorizedCallback();\\n    }\\n\\n    /// @notice Burns a PT if the DT contract authorizes and the spender isApprovedOrOwner and DT owner authorizes\\n    function burn(address spender, uint256 id) external {\\n        _checkDelegateTokenCaller();\\n        if (_isApprovedOrOwner(spender, id)) {\\n            _burn(id);\\n            delegateToken.burnAuthorizedCallback();\\n            return;\\n        }\\n        revert NotApproved(spender, id);\\n    }\\n\\n    function isApprovedOrOwner(address account, uint256 id) external view returns (bool) {\\n        return _isApprovedOrOwner(account, id);\\n    }\\n\\n    /// @inheritdoc IERC2981\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) external view returns (address receiver, uint256 royaltyAmount) {\\n        (receiver, royaltyAmount) = MarketMetadata(delegateToken.marketMetadata()).royaltyInfo(tokenId, salePrice);\\n    }\\n\\n    function contractURI() external view returns (string memory) {\\n        return MarketMetadata(delegateToken.marketMetadata()).principalTokenContractURI();\\n    }\\n\\n    function tokenURI(uint256 id) public view override returns (string memory) {\\n        _requireMinted(id);\\n        return MarketMetadata(delegateToken.marketMetadata()).principalTokenURI(id, delegateToken.getDelegateTokenInfo(id));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/DelegateTokenLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.4;\\n\\nimport {IDelegateRegistry} from \\\"delegate-registry/src/IDelegateRegistry.sol\\\";\\nimport {IDelegateFlashloan} from \\\"../interfaces/IDelegateFlashloan.sol\\\";\\nimport {IERC721Receiver} from \\\"openzeppelin/token/ERC721/IERC721Receiver.sol\\\";\\n\\nlibrary DelegateTokenStructs {\\n    struct Uint256 {\\n        uint256 flag;\\n    }\\n\\n    /// @notice Struct for creating delegate tokens and returning their information\\n    struct DelegateInfo {\\n        address principalHolder;\\n        IDelegateRegistry.DelegationType tokenType;\\n        address delegateHolder;\\n        uint256 amount;\\n        address tokenContract;\\n        uint256 tokenId; // The id of the underlying escrowed token, not the delegate token\\n        bytes32 rights;\\n        uint256 expiry; // Expires when block.timestamp >= expiry\\n    }\\n\\n    struct FlashInfo {\\n        address receiver; // The address to receive the loaned assets\\n        address delegateHolder; // The holder of the delegation\\n        IDelegateRegistry.DelegationType tokenType; // The type of contract, e.g. ERC20\\n        address tokenContract; // The contract of the underlying being loaned\\n        uint256 tokenId; // The tokenId of the underlying being loaned, if applicable\\n        uint256 amount; // The amount being lent, if applicable\\n        bytes data; // Arbitrary data structure, intended to contain user-defined parameters\\n    }\\n}\\n\\nlibrary DelegateTokenErrors {\\n    error MulticallFailed();\\n\\n    error DelegateTokenHolderZero();\\n    error ToIsZero();\\n\\n    error NotERC721Receiver();\\n    error InvalidERC721TransferOperator();\\n    error ERC1155PullNotRequested(address operator);\\n    error BatchERC1155TransferUnsupported();\\n\\n    error InsufficientAllowanceOrInvalidToken();\\n    error CallerNotOwnerOrInvalidToken();\\n\\n    error NotOwner(address caller, address account);\\n    error NotOperator(address caller, address account);\\n    error NotApproved(address caller, uint256 delegateTokenId);\\n\\n    error FromNotDelegateTokenHolder();\\n\\n    error HashMismatch();\\n\\n    error NotMinted(uint256 delegateTokenId);\\n    error AlreadyExisted(uint256 delegateTokenId);\\n    error WithdrawNotAvailable(uint256 delegateTokenId, uint256 expiry, uint256 timestamp);\\n\\n    error ExpiryInPast();\\n    error ExpiryTooLarge();\\n    error ExpiryTooSmall();\\n\\n    error WrongAmountForType(IDelegateRegistry.DelegationType tokenType, uint256 wrongAmount);\\n    error WrongTokenIdForType(IDelegateRegistry.DelegationType tokenType, uint256 wrongTokenId);\\n    error InvalidTokenType(IDelegateRegistry.DelegationType tokenType);\\n\\n    error ERC721FlashUnavailable();\\n    error ERC20FlashAmountUnavailable();\\n    error ERC1155FlashAmountUnavailable();\\n\\n    error BurnNotAuthorized();\\n    error MintNotAuthorized();\\n    error CallerNotPrincipalToken();\\n    error BurnAuthorized();\\n    error MintAuthorized();\\n\\n    error ERC1155Pulled();\\n    error ERC1155NotPulled();\\n}\\n\\nlibrary DelegateTokenHelpers {\\n    function revertOnCallingInvalidFlashloan(DelegateTokenStructs.FlashInfo calldata info) internal {\\n        if (IDelegateFlashloan(info.receiver).onFlashloan{value: msg.value}(msg.sender, info) == IDelegateFlashloan.onFlashloan.selector) return;\\n        revert IDelegateFlashloan.InvalidFlashloan();\\n    }\\n\\n    function revertOnInvalidERC721ReceiverCallback(address from, address to, uint256 delegateTokenId, bytes calldata data) internal {\\n        if (to.code.length == 0 || IERC721Receiver(to).onERC721Received(msg.sender, from, delegateTokenId, data) == IERC721Receiver.onERC721Received.selector) return;\\n        revert DelegateTokenErrors.NotERC721Receiver();\\n    }\\n\\n    function revertOnInvalidERC721ReceiverCallback(address from, address to, uint256 delegateTokenId) internal {\\n        if (to.code.length == 0 || IERC721Receiver(to).onERC721Received(msg.sender, from, delegateTokenId, \\\"\\\") == IERC721Receiver.onERC721Received.selector) return;\\n        revert DelegateTokenErrors.NotERC721Receiver();\\n    }\\n\\n    /// @dev won't revert if expiry is too large (i.e. > type(uint96).max)\\n    function revertOldExpiry(uint256 expiry) internal view {\\n        //slither-disable-next-line timestamp\\n        if (block.timestamp < expiry) return;\\n        revert DelegateTokenErrors.ExpiryInPast();\\n    }\\n\\n    function delegateIdNoRevert(address caller, uint256 salt) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encode(caller, salt)));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/DelegateTokenStorageHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.4;\\n\\nimport {DelegateTokenErrors as Errors, DelegateTokenStructs as Structs} from \\\"./DelegateTokenLib.sol\\\";\\nimport {PrincipalToken} from \\\"../PrincipalToken.sol\\\";\\n\\nlibrary DelegateTokenStorageHelpers {\\n    /// @dev Use this to syntactically store the max of the expiry\\n    uint256 internal constant MAX_EXPIRY = type(uint96).max;\\n\\n    ///////////// ID Flags /////////////\\n\\n    /// @dev Standardizes registryHash storage flags to prevent double-creation and griefing\\n    /// @dev ID_AVAILABLE should be zero since this is the default for a storage slot\\n    uint256 internal constant ID_AVAILABLE = 0;\\n    uint256 internal constant ID_USED = 1;\\n\\n    ///////////// Info positions /////////////\\n\\n    /// @dev Standardizes storage positions of delegateInfo mapping data\\n    /// @dev must start at zero and end at 2\\n    uint256 internal constant REGISTRY_HASH_POSITION = 0;\\n    uint256 internal constant PACKED_INFO_POSITION = 1; // PACKED (address approved, uint96 expiry)\\n    uint256 internal constant UNDERLYING_AMOUNT_POSITION = 2; // Not used by 721 delegations\\n\\n    ///////////// Callback Flags /////////////\\n\\n    /// @dev all callback flags should be non zero to reduce storage read / write costs\\n    /// @dev all callback flags should be unique\\n    /// Principal Token callbacks\\n    uint256 internal constant MINT_NOT_AUTHORIZED = 1;\\n    uint256 internal constant MINT_AUTHORIZED = 2;\\n    uint256 internal constant BURN_NOT_AUTHORIZED = 3;\\n    uint256 internal constant BURN_AUTHORIZED = 4;\\n\\n    /// @dev should preserve the expiry in the lower 96 bits in storage, and update the upper 160 bits with approved address\\n    function writeApproved(mapping(uint256 delegateTokenId => uint256[3] info) storage delegateTokenInfo, uint256 delegateTokenId, address approved) internal {\\n        uint96 expiry = uint96(delegateTokenInfo[delegateTokenId][PACKED_INFO_POSITION]);\\n        delegateTokenInfo[delegateTokenId][PACKED_INFO_POSITION] = (uint256(uint160(approved)) << 96) | expiry;\\n    }\\n\\n    /// @dev should preserve approved in the upper 160 bits, and update the lower 96 bits with expiry\\n    /// @dev should revert if expiry exceeds 96 bits\\n    function writeExpiry(mapping(uint256 delegateTokenId => uint256[3] info) storage delegateTokenInfo, uint256 delegateTokenId, uint256 expiry) internal {\\n        if (expiry > MAX_EXPIRY) revert Errors.ExpiryTooLarge();\\n        address approved = address(uint160(delegateTokenInfo[delegateTokenId][PACKED_INFO_POSITION] >> 96));\\n        delegateTokenInfo[delegateTokenId][PACKED_INFO_POSITION] = (uint256(uint160(approved)) << 96) | expiry;\\n    }\\n\\n    function writeRegistryHash(mapping(uint256 delegateTokenId => uint256[3] info) storage delegateTokenInfo, uint256 delegateTokenId, bytes32 registryHash) internal {\\n        delegateTokenInfo[delegateTokenId][REGISTRY_HASH_POSITION] = uint256(registryHash);\\n    }\\n\\n    function writeUnderlyingAmount(mapping(uint256 delegateTokenId => uint256[3] info) storage delegateTokenInfo, uint256 delegateTokenId, uint256 underlyingAmount) internal {\\n        delegateTokenInfo[delegateTokenId][UNDERLYING_AMOUNT_POSITION] = underlyingAmount;\\n    }\\n\\n    function incrementBalance(mapping(address delegateTokenHolder => uint256 balance) storage balances, address delegateTokenHolder) internal {\\n        unchecked {\\n            ++balances[delegateTokenHolder];\\n        } // Infeasible that this will overflow\\n    }\\n\\n    function decrementBalance(mapping(address delegateTokenHolder => uint256 balance) storage balances, address delegateTokenHolder) internal {\\n        unchecked {\\n            --balances[delegateTokenHolder];\\n        } // Reasonable to expect this not to underflow\\n    }\\n\\n    /// @notice helper function for burning a principal token\\n    /// @dev must revert if burnAuthorized is not set to BURN_NOT_AUTHORIZED flag\\n    function burnPrincipal(address principalToken, Structs.Uint256 storage principalBurnAuthorization, uint256 delegateTokenId) internal {\\n        if (principalBurnAuthorization.flag == BURN_NOT_AUTHORIZED) {\\n            principalBurnAuthorization.flag = BURN_AUTHORIZED;\\n            PrincipalToken(principalToken).burn(msg.sender, delegateTokenId);\\n            principalBurnAuthorization.flag = BURN_NOT_AUTHORIZED;\\n            return;\\n        }\\n        revert Errors.BurnAuthorized();\\n    }\\n\\n    /// @notice helper function for minting a principal token\\n    /// @dev must revert if mintAuthorized has already been set to MINT_AUTHORIZED flag\\n    function mintPrincipal(address principalToken, Structs.Uint256 storage principalMintAuthorization, address principalRecipient, uint256 delegateTokenId) internal {\\n        if (principalMintAuthorization.flag == MINT_NOT_AUTHORIZED) {\\n            principalMintAuthorization.flag = MINT_AUTHORIZED;\\n            PrincipalToken(principalToken).mint(principalRecipient, delegateTokenId);\\n            principalMintAuthorization.flag = MINT_NOT_AUTHORIZED;\\n            return;\\n        }\\n        revert Errors.MintAuthorized();\\n    }\\n\\n    /// @dev must revert if delegate token did not call burn on the Principal Token for the delegateTokenId\\n    /// @dev must revert if principal token is not the caller\\n    function checkBurnAuthorized(address principalToken, Structs.Uint256 storage principalBurnAuthorization) internal view {\\n        principalIsCaller(principalToken);\\n        if (principalBurnAuthorization.flag == BURN_AUTHORIZED) return;\\n        revert Errors.BurnNotAuthorized();\\n    }\\n\\n    /// @dev must revert if delegate token did not call burn on the Principal Token for the delegateTokenId\\n    /// @dev must revert if principal token is not the caller\\n    function checkMintAuthorized(address principalToken, Structs.Uint256 storage principalMintAuthorization) internal view {\\n        principalIsCaller(principalToken);\\n        if (principalMintAuthorization.flag == MINT_AUTHORIZED) return;\\n        revert Errors.MintNotAuthorized();\\n    }\\n\\n    /// @notice helper function to revert if caller is not Principal Token\\n    /// @dev must revert if msg.sender is not the principal token\\n    function principalIsCaller(address principalToken) internal view {\\n        if (msg.sender == principalToken) return;\\n        revert Errors.CallerNotPrincipalToken();\\n    }\\n\\n    function readApproved(mapping(uint256 delegateTokenId => uint256[3] info) storage delegateTokenInfo, uint256 delegateTokenId) internal view returns (address) {\\n        return address(uint160(delegateTokenInfo[delegateTokenId][PACKED_INFO_POSITION] >> 96));\\n    }\\n\\n    function readExpiry(mapping(uint256 delegateTokenId => uint256[3] info) storage delegateTokenInfo, uint256 delegateTokenId) internal view returns (uint256) {\\n        return uint96(delegateTokenInfo[delegateTokenId][PACKED_INFO_POSITION]);\\n    }\\n\\n    function readRegistryHash(mapping(uint256 delegateTokenId => uint256[3] info) storage delegateTokenInfo, uint256 delegateTokenId) internal view returns (bytes32) {\\n        return bytes32(delegateTokenInfo[delegateTokenId][REGISTRY_HASH_POSITION]);\\n    }\\n\\n    function readUnderlyingAmount(mapping(uint256 delegateTokenId => uint256[3] info) storage delegateTokenInfo, uint256 delegateTokenId) internal view returns (uint256) {\\n        return delegateTokenInfo[delegateTokenId][UNDERLYING_AMOUNT_POSITION];\\n    }\\n\\n    function revertNotOwner(address account) internal view {\\n        if (msg.sender == account) return;\\n        revert Errors.NotOwner(msg.sender, account);\\n    }\\n\\n    function revertNotOperator(mapping(address account => mapping(address operator => bool enabled)) storage accountOperator, address account) internal view {\\n        if (msg.sender == account || accountOperator[account][msg.sender]) return;\\n        revert Errors.NotOperator(msg.sender, account);\\n    }\\n\\n    function revertNotApprovedOrOperator(\\n        mapping(address account => mapping(address operator => bool enabled)) storage accountOperator,\\n        mapping(uint256 delegateTokenId => uint256[3] info) storage delegateTokenInfo,\\n        address account,\\n        uint256 delegateTokenId\\n    ) internal view {\\n        if (msg.sender == account || accountOperator[account][msg.sender] || msg.sender == readApproved(delegateTokenInfo, delegateTokenId)) return;\\n        revert Errors.NotApproved(msg.sender, delegateTokenId);\\n    }\\n\\n    /// @dev should only revert if expiry has not expired AND caller is not the delegateTokenHolder AND not approved for the delegateTokenId AND not an operator for\\n    /// delegateTokenHolder\\n    function revertInvalidWithdrawalConditions(\\n        mapping(uint256 delegateTokenId => uint256[3] info) storage delegateTokenInfo,\\n        mapping(address account => mapping(address operator => bool enabled)) storage accountOperator,\\n        uint256 delegateTokenId,\\n        address delegateTokenHolder\\n    ) internal view {\\n        //slither-disable-next-line timestamp\\n        if (block.timestamp < readExpiry(delegateTokenInfo, delegateTokenId)) {\\n            if (msg.sender == delegateTokenHolder || accountOperator[delegateTokenHolder][msg.sender] || msg.sender == readApproved(delegateTokenInfo, delegateTokenId)) {\\n                return;\\n            }\\n            revert Errors.WithdrawNotAvailable(delegateTokenId, readExpiry(delegateTokenInfo, delegateTokenId), block.timestamp);\\n        }\\n    }\\n\\n    function revertAlreadyExisted(mapping(uint256 delegateTokenId => uint256[3] info) storage delegateTokenInfo, uint256 delegateTokenId) internal view {\\n        if (delegateTokenInfo[delegateTokenId][REGISTRY_HASH_POSITION] == ID_AVAILABLE) return;\\n        revert Errors.AlreadyExisted(delegateTokenId);\\n    }\\n\\n    function revertNotMinted(mapping(uint256 delegateTokenId => uint256[3] info) storage delegateTokenInfo, uint256 delegateTokenId) internal view {\\n        uint256 registryHash = delegateTokenInfo[delegateTokenId][REGISTRY_HASH_POSITION];\\n        if (registryHash == ID_AVAILABLE || registryHash == ID_USED) {\\n            revert Errors.NotMinted(delegateTokenId);\\n        }\\n    }\\n\\n    /// @dev does not read from storage, make sure the registryHash of the corresponding delegateTokenId is passed to have the intended effect\\n    function revertNotMinted(bytes32 registryHash, uint256 delegateTokenId) internal pure {\\n        if (uint256(registryHash) == ID_AVAILABLE || uint256(registryHash) == ID_USED) {\\n            revert Errors.NotMinted(delegateTokenId);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/DelegateTokenRegistryHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.4;\\n\\nimport {RegistryStorage} from \\\"delegate-registry/src/libraries/RegistryStorage.sol\\\";\\nimport {RegistryHashes} from \\\"delegate-registry/src/libraries/RegistryHashes.sol\\\";\\nimport {IDelegateRegistry, DelegateTokenErrors as Errors, DelegateTokenStructs as Structs} from \\\"./DelegateTokenLib.sol\\\";\\n\\nlibrary DelegateTokenRegistryHelpers {\\n    /**\\n     * @notice Loads a delegateTokenHolder directly from a given registryHash\\n     * @param delegateRegistry The address of the DelegateRegistry v2 contract\\n     * @param registryHash The hash of the delegation to retrieve data for\\n     * @return delegateTokenHolder Which is the delegate \\\"to\\\" address corresponding to the registryHash\\n     * @dev Will not revert or return address(0) if delegation has been 'revoked'\\n     */\\n    function loadTokenHolder(address delegateRegistry, bytes32 registryHash) internal view returns (address delegateTokenHolder) {\\n        unchecked {\\n            return RegistryStorage.unpackAddress(\\n                IDelegateRegistry(delegateRegistry).readSlot(bytes32(uint256(RegistryHashes.location(registryHash)) + RegistryStorage.POSITIONS_SECOND_PACKED))\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Loads a underlyingContract directly from a given registryHash\\n     * @param delegateRegistry Address of the DelegateRegistry v2 contract\\n     * @param registryHash The hash of the delegation to retrieve data for\\n     * @return underlyingContract Which is the \\\"contract_\\\" address corresponding to the registryHash\\n     * @dev Two slots need to be loaded in the registry given the packed configuration, this function should only be used when you don't need \\\"to\\\" or \\\"from\\\"\\n     * @dev Will not revert or return address(0) if delegation has been 'revoked`\\n     */\\n    function loadContract(address delegateRegistry, bytes32 registryHash) internal view returns (address underlyingContract) {\\n        unchecked {\\n            uint256 registryLocation = uint256(RegistryHashes.location(registryHash));\\n            //slither-disable-next-line unused-return\\n            (,, underlyingContract) = RegistryStorage.unpackAddresses(\\n                IDelegateRegistry(delegateRegistry).readSlot(bytes32(registryLocation + RegistryStorage.POSITIONS_FIRST_PACKED)),\\n                IDelegateRegistry(delegateRegistry).readSlot(bytes32(registryLocation + RegistryStorage.POSITIONS_SECOND_PACKED))\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Loads a delegateTokenHolder and a underlyingContract from a given registryHash\\n     * @param delegateRegistry Address of the DelegateRegistry v2 contract\\n     * @param registryHash The hash of the delegation to retrieve data for\\n     * @return delegateTokenHolder Which is the delegate \\\"to\\\" address corresponding to the registryHash\\n     * @return underlyingContract Which is the \\\"contract_\\\" address corresponding to the registryHash\\n     * @dev Two slots need to be loaded from the registry given the packed position\\n     * @dev Will not revert or return address(0), address(0) if delegation has been revoked\\n     */\\n    function loadTokenHolderAndContract(address delegateRegistry, bytes32 registryHash) internal view returns (address delegateTokenHolder, address underlyingContract) {\\n        unchecked {\\n            uint256 registryLocation = uint256(RegistryHashes.location(registryHash));\\n            //slither-disable-next-line unused-return\\n            (, delegateTokenHolder, underlyingContract) = RegistryStorage.unpackAddresses(\\n                IDelegateRegistry(delegateRegistry).readSlot(bytes32(registryLocation + RegistryStorage.POSITIONS_FIRST_PACKED)),\\n                IDelegateRegistry(delegateRegistry).readSlot(bytes32(registryLocation + RegistryStorage.POSITIONS_SECOND_PACKED))\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Loads the \\\"from\\\" address from a given registryHash\\n     * @param delegateRegistry Address of the DelegateRegistry v2 contract\\n     * @param registryHash The hash of the delegation to retrieve data for\\n     * @dev Will not revert if delegation has been revoked or never existed\\n     */\\n    function loadFrom(address delegateRegistry, bytes32 registryHash) internal view returns (address) {\\n        unchecked {\\n            return RegistryStorage.unpackAddress(\\n                IDelegateRegistry(delegateRegistry).readSlot(bytes32(uint256(RegistryHashes.location(registryHash)) + RegistryStorage.POSITIONS_FIRST_PACKED))\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Loads the \\\"amount\\\" from a given registryHash\\n     * @param delegateRegistry Address of the DelegateRegistry v2 contract\\n     * @param registryHash The hash of the delegation to retrieve data for\\n     */\\n    function loadAmount(address delegateRegistry, bytes32 registryHash) internal view returns (uint256) {\\n        unchecked {\\n            return uint256(IDelegateRegistry(delegateRegistry).readSlot(bytes32(uint256(RegistryHashes.location(registryHash)) + RegistryStorage.POSITIONS_AMOUNT)));\\n        }\\n    }\\n\\n    /**\\n     * @notice Loads the \\\"rights\\\" from a given registryHash\\n     * @param delegateRegistry Address of the DelegateRegistry v2 contract\\n     * @param registryHash The hash of the delegation to retrieve data for\\n     * @dev Will not return empty or revert if delegation has been revoked\\n     */\\n    function loadRights(address delegateRegistry, bytes32 registryHash) internal view returns (bytes32) {\\n        unchecked {\\n            return IDelegateRegistry(delegateRegistry).readSlot(bytes32(uint256(RegistryHashes.location(registryHash)) + RegistryStorage.POSITIONS_RIGHTS));\\n        }\\n    }\\n\\n    /**\\n     * @notice Loads the \\\"tokenId\\\" from a given registryHash\\n     * @param delegateRegistry Address of the DelegateRegistry v2 contract\\n     * @param registryHash The hash of the delegation to retrieve data for\\n     * @dev Will not revert or return 0 if delegation has been revoked\\n     */\\n    function loadTokenId(address delegateRegistry, bytes32 registryHash) internal view returns (uint256) {\\n        unchecked {\\n            return uint256(IDelegateRegistry(delegateRegistry).readSlot(bytes32(uint256(RegistryHashes.location(registryHash)) + RegistryStorage.POSITIONS_TOKEN_ID)));\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates a new decreased value given an \\\"amount\\\" from a given registryHash\\n     * @param delegateRegistry Address of the DelegateRegistry v2 contract\\n     * @param registryHash The hash of the delegation to retrieve data for\\n     * @param decreaseAmount The value to decrement \\\"amount\\\" by\\n     * @dev Assumes the decreased amount won't underflow with \\\"amount\\\"\\n     */\\n    function calculateDecreasedAmount(address delegateRegistry, bytes32 registryHash, uint256 decreaseAmount) internal view returns (uint256) {\\n        unchecked {\\n            return\\n                uint256(IDelegateRegistry(delegateRegistry).readSlot(bytes32(uint256(RegistryHashes.location(registryHash)) + RegistryStorage.POSITIONS_AMOUNT))) - decreaseAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates a new increased value given an \\\"amount\\\" from a given registryHash\\n     * @param delegateRegistry Address of the DelegateRegistry v2 contract\\n     * @param registryHash The hash of the delegation to retrieve data for\\n     * @param increaseAmount The value to increment \\\"amount\\\" by\\n     * @dev Assumes the increased amount won't overflow with \\\"amount\\\"\\n     */\\n    function calculateIncreasedAmount(address delegateRegistry, bytes32 registryHash, uint256 increaseAmount) internal view returns (uint256) {\\n        unchecked {\\n            return\\n                uint256(IDelegateRegistry(delegateRegistry).readSlot(bytes32(uint256(RegistryHashes.location(registryHash)) + RegistryStorage.POSITIONS_AMOUNT))) + increaseAmount;\\n        }\\n    }\\n\\n    function revertERC721FlashUnavailable(address delegateRegistry, Structs.FlashInfo calldata info) internal view {\\n        // We touch registry directly to check for active delegation of the respective hash, as bubbling up to contract\\n        // and all delegations is not required\\n        // Important to notice that we cannot rely on this method for the fungibles since delegate token doesn't ever\\n        // delete the fungible delegations\\n        if (\\n            loadFrom(delegateRegistry, RegistryHashes.erc721Hash(address(this), \\\"\\\", info.delegateHolder, info.tokenId, info.tokenContract)) == address(this)\\n                || loadFrom(delegateRegistry, RegistryHashes.erc721Hash(address(this), \\\"flashloan\\\", info.delegateHolder, info.tokenId, info.tokenContract)) == address(this)\\n        ) return;\\n        revert Errors.ERC721FlashUnavailable();\\n    }\\n\\n    function revertERC20FlashAmountUnavailable(address delegateRegistry, Structs.FlashInfo calldata info) internal view {\\n        uint256 availableAmount = 0;\\n        unchecked {\\n            // We sum the delegation amounts for \\\"flashloan\\\" and \\\"\\\" rights since liquid delegate doesn't allow double spends for different rights\\n            availableAmount = loadAmount(delegateRegistry, RegistryHashes.erc20Hash(address(this), \\\"flashloan\\\", info.delegateHolder, info.tokenContract))\\n                + loadAmount(delegateRegistry, RegistryHashes.erc20Hash(address(this), \\\"\\\", info.delegateHolder, info.tokenContract));\\n        } // Unreasonable that this block will overflow\\n        if (info.amount > availableAmount) revert Errors.ERC20FlashAmountUnavailable();\\n    }\\n\\n    function revertERC1155FlashAmountUnavailable(address delegateRegistry, Structs.FlashInfo calldata info) internal view {\\n        uint256 availableAmount = 0;\\n        unchecked {\\n            availableAmount = loadAmount(delegateRegistry, RegistryHashes.erc1155Hash(address(this), \\\"flashloan\\\", info.delegateHolder, info.tokenId, info.tokenContract))\\n                + loadAmount(delegateRegistry, RegistryHashes.erc1155Hash(address(this), \\\"\\\", info.delegateHolder, info.tokenId, info.tokenContract));\\n        } // Unreasonable that this block will overflow\\n        if (info.amount > availableAmount) {\\n            revert Errors.ERC1155FlashAmountUnavailable();\\n        }\\n    }\\n\\n    /// @dev Will not revert if from didn't have a delegation in the first place\\n    function transferERC721(\\n        address delegateRegistry,\\n        bytes32 registryHash,\\n        address from,\\n        bytes32 newRegistryHash,\\n        address to,\\n        bytes32 underlyingRights,\\n        address underlyingContract,\\n        uint256 underlyingTokenId\\n    ) internal {\\n        if (\\n            IDelegateRegistry(delegateRegistry).delegateERC721(from, underlyingContract, underlyingTokenId, underlyingRights, false) == registryHash\\n                && IDelegateRegistry(delegateRegistry).delegateERC721(to, underlyingContract, underlyingTokenId, underlyingRights, true) == newRegistryHash\\n        ) return;\\n        revert Errors.HashMismatch();\\n    }\\n\\n    /// @dev Will not revert if from didn't have a delegation in the first place\\n    /// @dev Will not revert an underflow value if from's existing delegation amount > underlyingAmount\\n    /// @dev Will not revert an overflow value if to's existing delegation + underlyingAmount > type(uint256).max\\n    function transferERC20(\\n        address delegateRegistry,\\n        bytes32 registryHash,\\n        address from,\\n        bytes32 newRegistryHash,\\n        address to,\\n        uint256 underlyingAmount,\\n        bytes32 underlyingRights,\\n        address underlyingContract\\n    ) internal {\\n        if (\\n            IDelegateRegistry(delegateRegistry).delegateERC20(\\n                from, underlyingContract, underlyingRights, calculateDecreasedAmount(delegateRegistry, registryHash, underlyingAmount)\\n            ) == bytes32(registryHash)\\n                && IDelegateRegistry(delegateRegistry).delegateERC20(\\n                    to, underlyingContract, underlyingRights, calculateIncreasedAmount(delegateRegistry, newRegistryHash, underlyingAmount)\\n                ) == newRegistryHash\\n        ) return;\\n        revert Errors.HashMismatch();\\n    }\\n\\n    /// @dev Will not revert if from didn't have a delegation in the first place\\n    /// @dev Will not revert an underflow value if from's existing delegation amount > underlyingAmount\\n    /// @dev Will not revert an overflowed value if to's existing delegation + underlyingAmount > type(uint256).max\\n    function transferERC1155(\\n        address delegateRegistry,\\n        bytes32 registryHash,\\n        address from,\\n        bytes32 newRegistryHash,\\n        address to,\\n        uint256 underlyingAmount,\\n        bytes32 underlyingRights,\\n        address underlyingContract,\\n        uint256 underlyingTokenId\\n    ) internal {\\n        uint256 amount = calculateDecreasedAmount(delegateRegistry, registryHash, underlyingAmount);\\n        if (IDelegateRegistry(delegateRegistry).delegateERC1155(from, underlyingContract, underlyingTokenId, underlyingRights, amount) != registryHash) {\\n            revert Errors.HashMismatch();\\n        }\\n        amount = calculateIncreasedAmount(delegateRegistry, newRegistryHash, underlyingAmount);\\n        if (IDelegateRegistry(delegateRegistry).delegateERC1155(to, underlyingContract, underlyingTokenId, underlyingRights, amount) != newRegistryHash) {\\n            revert Errors.HashMismatch();\\n        }\\n    }\\n\\n    /// @dev Will not revert if delegateHolder had a delegation in the first place\\n    function delegateERC721(address delegateRegistry, bytes32 newRegistryHash, Structs.DelegateInfo calldata delegateInfo) internal {\\n        if (\\n            IDelegateRegistry(delegateRegistry).delegateERC721(delegateInfo.delegateHolder, delegateInfo.tokenContract, delegateInfo.tokenId, delegateInfo.rights, true)\\n                == newRegistryHash\\n        ) return;\\n        revert Errors.HashMismatch();\\n    }\\n\\n    /// @dev Will not revert if delegateHolder had a delegation in the first place\\n    /// @dev Will not revert an overflow value if delegateHolder's existing delegation + amount > type(uint256).max\\n    function incrementERC20(address delegateRegistry, bytes32 newRegistryHash, Structs.DelegateInfo calldata delegateInfo) internal {\\n        if (\\n            IDelegateRegistry(delegateRegistry).delegateERC20(\\n                delegateInfo.delegateHolder, delegateInfo.tokenContract, delegateInfo.rights, calculateIncreasedAmount(delegateRegistry, newRegistryHash, delegateInfo.amount)\\n            ) == newRegistryHash\\n        ) return;\\n        revert Errors.HashMismatch();\\n    }\\n\\n    /// @dev Will not revert if delegateHolder had a delegation in the first place\\n    /// @dev Will not revert an overflow value if delegateHolder's existing delegation + amount > type(uint256).max\\n    function incrementERC1155(address delegateRegistry, bytes32 newRegistryHash, Structs.DelegateInfo calldata delegateInfo) internal {\\n        if (\\n            IDelegateRegistry(delegateRegistry).delegateERC1155(\\n                delegateInfo.delegateHolder,\\n                delegateInfo.tokenContract,\\n                delegateInfo.tokenId,\\n                delegateInfo.rights,\\n                calculateIncreasedAmount(delegateRegistry, newRegistryHash, delegateInfo.amount)\\n            ) == newRegistryHash\\n        ) return;\\n        revert Errors.HashMismatch();\\n    }\\n\\n    /// @dev Will not revert if delegateHolder never had a delegation in the first place\\n    function revokeERC721(\\n        address delegateRegistry,\\n        bytes32 registryHash,\\n        address delegateTokenHolder,\\n        address underlyingContract,\\n        uint256 underlyingTokenId,\\n        bytes32 underlyingRights\\n    ) internal {\\n        if (IDelegateRegistry(delegateRegistry).delegateERC721(delegateTokenHolder, underlyingContract, underlyingTokenId, underlyingRights, false) == registryHash) {\\n            return;\\n        }\\n        revert Errors.HashMismatch();\\n    }\\n\\n    /// @dev Will not revert if delegateHolder never had a delegation in the first place\\n    /// @dev Will not revert an underflow value if delegateHolder's existing delegation - underlyingAmount < 0\\n    function decrementERC20(\\n        address delegateRegistry,\\n        bytes32 registryHash,\\n        address delegateTokenHolder,\\n        address underlyingContract,\\n        uint256 underlyingAmount,\\n        bytes32 underlyingRights\\n    ) internal {\\n        if (\\n            IDelegateRegistry(delegateRegistry).delegateERC20(\\n                delegateTokenHolder, underlyingContract, underlyingRights, calculateDecreasedAmount(delegateRegistry, registryHash, underlyingAmount)\\n            ) == registryHash\\n        ) return;\\n        revert Errors.HashMismatch();\\n    }\\n\\n    /// @dev Will not revert if delegateHolder never had a delegation in the first place\\n    /// @dev Will not revert an underflow value if delegateHolder's existing delegation - underlyingAmount < 0\\n    function decrementERC1155(\\n        address delegateRegistry,\\n        bytes32 registryHash,\\n        address delegateTokenHolder,\\n        address underlyingContract,\\n        uint256 underlyingTokenId,\\n        uint256 underlyingAmount,\\n        bytes32 underlyingRights\\n    ) internal {\\n        if (\\n            IDelegateRegistry(delegateRegistry).delegateERC1155(\\n                delegateTokenHolder, underlyingContract, underlyingTokenId, underlyingRights, calculateDecreasedAmount(delegateRegistry, registryHash, underlyingAmount)\\n            ) == registryHash\\n        ) return;\\n        revert Errors.HashMismatch();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/DelegateTokenTransferHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.4;\\n\\nimport {IDelegateRegistry, DelegateTokenErrors as Errors, DelegateTokenStructs as Structs} from \\\"./DelegateTokenLib.sol\\\";\\nimport {IERC1155} from \\\"openzeppelin/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC721} from \\\"openzeppelin/token/ERC721/IERC721.sol\\\";\\nimport {IERC20} from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary DelegateTokenTransferHelpers {\\n    /// 1155 callbacks\\n    uint256 internal constant ERC1155_NOT_PULLED = 5;\\n    uint256 internal constant ERC1155_PULLED = 6;\\n\\n    /// @dev Pulls assets into escrow, and reverts if delegation type is not ERC20/721/1155\\n    function pullAssetsAndCheckType(Structs.Uint256 storage erc1155Pulled, Structs.DelegateInfo calldata delegateInfo) internal {\\n        if (delegateInfo.tokenType == IDelegateRegistry.DelegationType.ERC721) {\\n            checkERC721BeforePull(delegateInfo.amount, delegateInfo.tokenContract, delegateInfo.tokenId);\\n            pullERC721AfterCheck(delegateInfo.tokenContract, delegateInfo.tokenId);\\n        } else if (delegateInfo.tokenType == IDelegateRegistry.DelegationType.ERC20) {\\n            checkERC20BeforePull(delegateInfo.amount, delegateInfo.tokenContract, delegateInfo.tokenId);\\n            pullERC20AfterCheck(delegateInfo.tokenContract, delegateInfo.amount);\\n        } else if (delegateInfo.tokenType == IDelegateRegistry.DelegationType.ERC1155) {\\n            checkERC1155BeforePull(erc1155Pulled, delegateInfo.amount);\\n            pullERC1155AfterCheck(erc1155Pulled, delegateInfo.amount, delegateInfo.tokenContract, delegateInfo.tokenId);\\n        } else {\\n            revert Errors.InvalidTokenType(delegateInfo.tokenType);\\n        }\\n    }\\n\\n    /// @dev Should revert for a typical 20 / 1155, and pass for a typical 721\\n    function checkERC721BeforePull(uint256 underlyingAmount, address underlyingContract, uint256 underlyingTokenId) internal view {\\n        if (underlyingAmount != 0) {\\n            revert Errors.WrongAmountForType(IDelegateRegistry.DelegationType.ERC721, underlyingAmount);\\n        }\\n        if (IERC721(underlyingContract).ownerOf(underlyingTokenId) != msg.sender) {\\n            revert Errors.CallerNotOwnerOrInvalidToken();\\n        }\\n    }\\n\\n    function pullERC721AfterCheck(address underlyingContract, uint256 underlyingTokenId) internal {\\n        IERC721(underlyingContract).transferFrom(msg.sender, address(this), underlyingTokenId);\\n    }\\n\\n    /// @dev Should revert for a typical 721 / 1155 and pass for a typical 20\\n    function checkERC20BeforePull(uint256 underlyingAmount, address underlyingContract, uint256 underlyingTokenId) internal view {\\n        if (underlyingTokenId != 0) {\\n            revert Errors.WrongTokenIdForType(IDelegateRegistry.DelegationType.ERC20, underlyingTokenId);\\n        }\\n        if (underlyingAmount == 0) {\\n            revert Errors.WrongAmountForType(IDelegateRegistry.DelegationType.ERC20, underlyingAmount);\\n        }\\n        if (IERC20(underlyingContract).allowance(msg.sender, address(this)) < underlyingAmount) {\\n            revert Errors.InsufficientAllowanceOrInvalidToken();\\n        }\\n    }\\n\\n    function pullERC20AfterCheck(address underlyingContract, uint256 pullAmount) internal {\\n        SafeERC20.safeTransferFrom(IERC20(underlyingContract), msg.sender, address(this), pullAmount);\\n    }\\n\\n    function checkERC1155BeforePull(Structs.Uint256 storage erc1155Pulled, uint256 pullAmount) internal {\\n        if (pullAmount == 0) revert Errors.WrongAmountForType(IDelegateRegistry.DelegationType.ERC1155, pullAmount);\\n        if (erc1155Pulled.flag == ERC1155_NOT_PULLED) {\\n            erc1155Pulled.flag = ERC1155_PULLED;\\n        } else {\\n            revert Errors.ERC1155Pulled();\\n        }\\n    }\\n\\n    function pullERC1155AfterCheck(Structs.Uint256 storage erc1155Pulled, uint256 pullAmount, address underlyingContract, uint256 underlyingTokenId) internal {\\n        IERC1155(underlyingContract).safeTransferFrom(msg.sender, address(this), underlyingTokenId, pullAmount, \\\"\\\");\\n        if (erc1155Pulled.flag == ERC1155_PULLED) {\\n            revert Errors.ERC1155NotPulled();\\n        }\\n    }\\n\\n    function checkERC1155Pulled(Structs.Uint256 storage erc1155Pulled, address operator) internal returns (bool) {\\n        if (erc1155Pulled.flag == ERC1155_PULLED && address(this) == operator) {\\n            erc1155Pulled.flag = ERC1155_NOT_PULLED;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function revertInvalidERC1155PullCheck(Structs.Uint256 storage erc1155PullAuthorization, address operator) internal {\\n        if (!checkERC1155Pulled(erc1155PullAuthorization, operator)) revert Errors.ERC1155PullNotRequested(operator);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"lib/delegate-registry/src/IDelegateRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity >=0.8.13;\\n\\n/**\\n * @title IDelegateRegistry\\n * @custom:version 2.0\\n * @custom:author foobar (0xfoobar)\\n * @notice A standalone immutable registry storing delegated permissions from one address to another\\n */\\ninterface IDelegateRegistry {\\n    /// @notice Delegation type, NONE is used when a delegation does not exist or is revoked\\n    enum DelegationType {\\n        NONE,\\n        ALL,\\n        CONTRACT,\\n        ERC721,\\n        ERC20,\\n        ERC1155\\n    }\\n\\n    /// @notice Struct for returning delegations\\n    struct Delegation {\\n        DelegationType type_;\\n        address to;\\n        address from;\\n        bytes32 rights;\\n        address contract_;\\n        uint256 tokenId;\\n        uint256 amount;\\n    }\\n\\n    /// @notice Emitted when an address delegates or revokes rights for their entire wallet\\n    event DelegateAll(address indexed from, address indexed to, bytes32 rights, bool enable);\\n\\n    /// @notice Emitted when an address delegates or revokes rights for a contract address\\n    event DelegateContract(address indexed from, address indexed to, address indexed contract_, bytes32 rights, bool enable);\\n\\n    /// @notice Emitted when an address delegates or revokes rights for an ERC721 tokenId\\n    event DelegateERC721(address indexed from, address indexed to, address indexed contract_, uint256 tokenId, bytes32 rights, bool enable);\\n\\n    /// @notice Emitted when an address delegates or revokes rights for an amount of ERC20 tokens\\n    event DelegateERC20(address indexed from, address indexed to, address indexed contract_, bytes32 rights, uint256 amount);\\n\\n    /// @notice Emitted when an address delegates or revokes rights for an amount of an ERC1155 tokenId\\n    event DelegateERC1155(address indexed from, address indexed to, address indexed contract_, uint256 tokenId, bytes32 rights, uint256 amount);\\n\\n    /// @notice Thrown if multicall calldata is malformed\\n    error MulticallFailed();\\n\\n    /**\\n     * -----------  WRITE -----------\\n     */\\n\\n    /**\\n     * @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n     * @param data The encoded function data for each of the calls to make to this contract\\n     * @return results The results from each of the calls passed in via data\\n     */\\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\\n\\n    /**\\n     * @notice Allow the delegate to act on behalf of `msg.sender` for all contracts\\n     * @param to The address to act as delegate\\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\\n     * @param enable Whether to enable or disable this delegation, true delegates and false revokes\\n     * @return delegationHash The unique identifier of the delegation\\n     */\\n    function delegateAll(address to, bytes32 rights, bool enable) external payable returns (bytes32 delegationHash);\\n\\n    /**\\n     * @notice Allow the delegate to act on behalf of `msg.sender` for a specific contract\\n     * @param to The address to act as delegate\\n     * @param contract_ The contract whose rights are being delegated\\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\\n     * @param enable Whether to enable or disable this delegation, true delegates and false revokes\\n     * @return delegationHash The unique identifier of the delegation\\n     */\\n    function delegateContract(address to, address contract_, bytes32 rights, bool enable) external payable returns (bytes32 delegationHash);\\n\\n    /**\\n     * @notice Allow the delegate to act on behalf of `msg.sender` for a specific ERC721 token\\n     * @param to The address to act as delegate\\n     * @param contract_ The contract whose rights are being delegated\\n     * @param tokenId The token id to delegate\\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\\n     * @param enable Whether to enable or disable this delegation, true delegates and false revokes\\n     * @return delegationHash The unique identifier of the delegation\\n     */\\n    function delegateERC721(address to, address contract_, uint256 tokenId, bytes32 rights, bool enable) external payable returns (bytes32 delegationHash);\\n\\n    /**\\n     * @notice Allow the delegate to act on behalf of `msg.sender` for a specific amount of ERC20 tokens\\n     * @dev The actual amount is not encoded in the hash, just the existence of a amount (since it is an upper bound)\\n     * @param to The address to act as delegate\\n     * @param contract_ The address for the fungible token contract\\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\\n     * @param amount The amount to delegate, > 0 delegates and 0 revokes\\n     * @return delegationHash The unique identifier of the delegation\\n     */\\n    function delegateERC20(address to, address contract_, bytes32 rights, uint256 amount) external payable returns (bytes32 delegationHash);\\n\\n    /**\\n     * @notice Allow the delegate to act on behalf of `msg.sender` for a specific amount of ERC1155 tokens\\n     * @dev The actual amount is not encoded in the hash, just the existence of a amount (since it is an upper bound)\\n     * @param to The address to act as delegate\\n     * @param contract_ The address of the contract that holds the token\\n     * @param tokenId The token id to delegate\\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\\n     * @param amount The amount of that token id to delegate, > 0 delegates and 0 revokes\\n     * @return delegationHash The unique identifier of the delegation\\n     */\\n    function delegateERC1155(address to, address contract_, uint256 tokenId, bytes32 rights, uint256 amount) external payable returns (bytes32 delegationHash);\\n\\n    /**\\n     * ----------- CHECKS -----------\\n     */\\n\\n    /**\\n     * @notice Check if `to` is a delegate of `from` for the entire wallet\\n     * @param to The potential delegate address\\n     * @param from The potential address who delegated rights\\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\\n     * @return valid Whether delegate is granted to act on the from's behalf\\n     */\\n    function checkDelegateForAll(address to, address from, bytes32 rights) external view returns (bool);\\n\\n    /**\\n     * @notice Check if `to` is a delegate of `from` for the specified `contract_` or the entire wallet\\n     * @param to The delegated address to check\\n     * @param contract_ The specific contract address being checked\\n     * @param from The cold wallet who issued the delegation\\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\\n     * @return valid Whether delegate is granted to act on from's behalf for entire wallet or that specific contract\\n     */\\n    function checkDelegateForContract(address to, address from, address contract_, bytes32 rights) external view returns (bool);\\n\\n    /**\\n     * @notice Check if `to` is a delegate of `from` for the specific `contract` and `tokenId`, the entire `contract_`, or the entire wallet\\n     * @param to The delegated address to check\\n     * @param contract_ The specific contract address being checked\\n     * @param tokenId The token id for the token to delegating\\n     * @param from The wallet that issued the delegation\\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\\n     * @return valid Whether delegate is granted to act on from's behalf for entire wallet, that contract, or that specific tokenId\\n     */\\n    function checkDelegateForERC721(address to, address from, address contract_, uint256 tokenId, bytes32 rights) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the amount of ERC20 tokens the delegate is granted rights to act on the behalf of\\n     * @param to The delegated address to check\\n     * @param contract_ The address of the token contract\\n     * @param from The cold wallet who issued the delegation\\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\\n     * @return balance The delegated balance, which will be 0 if the delegation does not exist\\n     */\\n    function checkDelegateForERC20(address to, address from, address contract_, bytes32 rights) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount of a ERC1155 tokens the delegate is granted rights to act on the behalf of\\n     * @param to The delegated address to check\\n     * @param contract_ The address of the token contract\\n     * @param tokenId The token id to check the delegated amount of\\n     * @param from The cold wallet who issued the delegation\\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\\n     * @return balance The delegated balance, which will be 0 if the delegation does not exist\\n     */\\n    function checkDelegateForERC1155(address to, address from, address contract_, uint256 tokenId, bytes32 rights) external view returns (uint256);\\n\\n    /**\\n     * ----------- ENUMERATIONS -----------\\n     */\\n\\n    /**\\n     * @notice Returns all enabled delegations a given delegate has received\\n     * @param to The address to retrieve delegations for\\n     * @return delegations Array of Delegation structs\\n     */\\n    function getIncomingDelegations(address to) external view returns (Delegation[] memory delegations);\\n\\n    /**\\n     * @notice Returns all enabled delegations an address has given out\\n     * @param from The address to retrieve delegations for\\n     * @return delegations Array of Delegation structs\\n     */\\n    function getOutgoingDelegations(address from) external view returns (Delegation[] memory delegations);\\n\\n    /**\\n     * @notice Returns all hashes associated with enabled delegations an address has received\\n     * @param to The address to retrieve incoming delegation hashes for\\n     * @return delegationHashes Array of delegation hashes\\n     */\\n    function getIncomingDelegationHashes(address to) external view returns (bytes32[] memory delegationHashes);\\n\\n    /**\\n     * @notice Returns all hashes associated with enabled delegations an address has given out\\n     * @param from The address to retrieve outgoing delegation hashes for\\n     * @return delegationHashes Array of delegation hashes\\n     */\\n    function getOutgoingDelegationHashes(address from) external view returns (bytes32[] memory delegationHashes);\\n\\n    /**\\n     * @notice Returns the delegations for a given array of delegation hashes\\n     * @param delegationHashes is an array of hashes that correspond to delegations\\n     * @return delegations Array of Delegation structs, return empty structs for nonexistent or revoked delegations\\n     */\\n    function getDelegationsFromHashes(bytes32[] calldata delegationHashes) external view returns (Delegation[] memory delegations);\\n\\n    /**\\n     * ----------- STORAGE ACCESS -----------\\n     */\\n\\n    /**\\n     * @notice allows external contract to read arbitrary storage slot\\n     */\\n    function readSlot(bytes32 location) external view returns (bytes32);\\n\\n    /**\\n     * @notice allows external contracts to read an arbitrary array of storage slots\\n     */\\n    function readSlots(bytes32[] calldata locations) external view returns (bytes32[] memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IDelegateFlashloan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.4;\\n\\nimport {DelegateTokenStructs as Structs} from \\\"../libraries/DelegateTokenLib.sol\\\";\\n\\ninterface IDelegateFlashloan {\\n    error InvalidFlashloan();\\n\\n    /**\\n     * @dev Receive a delegate flashloan\\n     * @param initiator Caller of the flashloan\\n     * @param flashInfo Info about the flashloan\\n     * @return selector The function selector for onFlashloan\\n     */\\n    function onFlashloan(address initiator, Structs.FlashInfo calldata flashInfo) external payable returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/delegate-registry/src/libraries/RegistryStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.21;\\n\\nlibrary RegistryStorage {\\n    /// @dev Standardizes from storage flags to prevent double-writes in the delegation in/outbox if the same delegation is revoked and rewritten\\n    address internal constant DELEGATION_EMPTY = address(0);\\n    address internal constant DELEGATION_REVOKED = address(1);\\n\\n    /// @dev Standardizes storage positions of delegation data\\n    uint256 internal constant POSITIONS_FIRST_PACKED = 0; //  | 4 bytes empty | first 8 bytes of contract address | 20 bytes of from address |\\n    uint256 internal constant POSITIONS_SECOND_PACKED = 1; // |        last 12 bytes of contract address          | 20 bytes of to address   |\\n    uint256 internal constant POSITIONS_RIGHTS = 2;\\n    uint256 internal constant POSITIONS_TOKEN_ID = 3;\\n    uint256 internal constant POSITIONS_AMOUNT = 4;\\n\\n    /// @dev Used to clean address types of dirty bits with and(address, CLEAN_ADDRESS)\\n    uint256 internal constant CLEAN_ADDRESS = 0x00ffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @dev Used to clean everything but the first 8 bytes of an address\\n    uint256 internal constant CLEAN_FIRST8_BYTES_ADDRESS = 0xffffffffffffffff << 96;\\n\\n    /// @dev Used to clean everything but the first 8 bytes of an address in the packed position\\n    uint256 internal constant CLEAN_PACKED8_BYTES_ADDRESS = 0xffffffffffffffff << 160;\\n\\n    /**\\n     * @notice Helper function that packs from, to, and contract_ address to into the two slot configuration\\n     * @param from The address making the delegation\\n     * @param to The address receiving the delegation\\n     * @param contract_ The contract address associated with the delegation (optional)\\n     * @return firstPacked The firstPacked storage configured with the parameters\\n     * @return secondPacked The secondPacked storage configured with the parameters\\n     * @dev Will not revert if from, to, and contract_ are > uint160, any inputs with dirty bits outside the last 20 bytes will be cleaned\\n     */\\n    function packAddresses(address from, address to, address contract_) internal pure returns (bytes32 firstPacked, bytes32 secondPacked) {\\n        assembly {\\n            firstPacked := or(shl(64, and(contract_, CLEAN_FIRST8_BYTES_ADDRESS)), and(from, CLEAN_ADDRESS))\\n            secondPacked := or(shl(160, contract_), and(to, CLEAN_ADDRESS))\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function that unpacks from, to, and contract_ address inside the firstPacked secondPacked storage configuration\\n     * @param firstPacked The firstPacked storage to be decoded\\n     * @param secondPacked The secondPacked storage to be decoded\\n     * @return from The address making the delegation\\n     * @return to The address receiving the delegation\\n     * @return contract_ The contract address associated with the delegation\\n     * @dev Will not revert if from, to, and contract_ are > uint160, any inputs with dirty bits outside the last 20 bytes will be cleaned\\n     */\\n    function unpackAddresses(bytes32 firstPacked, bytes32 secondPacked) internal pure returns (address from, address to, address contract_) {\\n        assembly {\\n            from := and(firstPacked, CLEAN_ADDRESS)\\n            to := and(secondPacked, CLEAN_ADDRESS)\\n            contract_ := or(shr(64, and(firstPacked, CLEAN_PACKED8_BYTES_ADDRESS)), shr(160, secondPacked))\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function that can unpack the from or to address from their respective packed slots in the registry\\n     * @param packedSlot The slot containing the from or to address\\n     * @return unpacked The `from` or `to` address\\n     * @dev Will not work if you want to obtain the contract address, use unpackAddresses\\n     */\\n    function unpackAddress(bytes32 packedSlot) internal pure returns (address unpacked) {\\n        assembly {\\n            unpacked := and(packedSlot, CLEAN_ADDRESS)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/delegate-registry/src/libraries/RegistryHashes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.21;\\n\\nimport {IDelegateRegistry} from \\\"../IDelegateRegistry.sol\\\";\\n\\n/**\\n * @title Library for calculating the hashes and storage locations used in the delegate registry\\n *\\n * The encoding for the 5 types of delegate registry hashes should be as follows\\n *\\n * ALL:         keccak256(abi.encodePacked(rights, from, to))\\n * CONTRACT:    keccak256(abi.encodePacked(rights, from, to, contract_))\\n * ERC721:      keccak256(abi.encodePacked(rights, from, to, contract_, tokenId))\\n * ERC20:       keccak256(abi.encodePacked(rights, from, to, contract_))\\n * ERC1155:     keccak256(abi.encodePacked(rights, from, to, contract_, tokenId))\\n *\\n * To avoid collisions between the hashes with respect to type, the hash is shifted left by one byte and the last byte is then encoded with a unique number for the\\n * delegation type.\\n *\\n */\\nlibrary RegistryHashes {\\n    /// @dev Used to delete everything but the last byte of a 32 byte word with and(word, EXTRACT_LAST_BYTE)\\n    uint256 internal constant EXTRACT_LAST_BYTE = 0xff;\\n    /// @dev uint256 constant for the delegate registry delegation type enumeration, related unit test should fail if these mismatch\\n    uint256 internal constant ALL_TYPE = 1;\\n    uint256 internal constant CONTRACT_TYPE = 2;\\n    uint256 internal constant ERC721_TYPE = 3;\\n    uint256 internal constant ERC20_TYPE = 4;\\n    uint256 internal constant ERC1155_TYPE = 5;\\n    /// @dev uint256 constant for the location of the delegations array in the delegate registry, assumed to be zero\\n    uint256 internal constant DELEGATION_SLOT = 0;\\n\\n    /**\\n     * @notice Helper function to decode last byte of a delegation hash to obtain its delegation type\\n     * @param inputHash to decode the type from\\n     * @return decodedType of the delegation\\n     * @dev function itself will not revert if decodedType > type(IDelegateRegistry.DelegationType).max\\n     * @dev may lead to a revert with Conversion into non-existent enum type after the function is called if inputHash was encoded with type outside the DelegationType\\n     * enum range\\n     */\\n    function decodeType(bytes32 inputHash) internal pure returns (IDelegateRegistry.DelegationType decodedType) {\\n        assembly {\\n            decodedType := and(inputHash, EXTRACT_LAST_BYTE)\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function that computes the storage location of a particular delegation array\\n     * @param inputHash is the hash of the delegation\\n     * @return computedLocation is the storage key of the delegation array at position 0\\n     * @dev Storage keys further down the array can be obtained by adding computedLocation with the element position\\n     * @dev Follows the solidity storage location encoding for a mapping(bytes32 => fixedArray) at the position of the delegationSlot\\n     */\\n    function location(bytes32 inputHash) internal pure returns (bytes32 computedLocation) {\\n        assembly (\\\"memory-safe\\\") {\\n            // This block only allocates memory in the scratch space\\n            mstore(0, inputHash)\\n            mstore(32, DELEGATION_SLOT)\\n            computedLocation := keccak256(0, 64) // Run keccak256 over bytes in scratch space to obtain the storage key\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to compute delegation hash for all delegation\\n     * @param from is the address making the delegation\\n     * @param rights it the rights specified by the delegation\\n     * @param to is the address receiving the delegation\\n     * @return hash of the delegation parameters encoded with ALL_TYPE\\n     * @dev returned hash should be equivalent to keccak256(abi.encodePacked(rights, from, to)) followed by a shift left by 1 byte and writing the delegation type to the\\n     * cleaned last byte\\n     * @dev will not revert if from or to are > uint160, any input larger than uint160 for from and to will be cleaned to their last 20 bytes\\n     */\\n    function allHash(address from, bytes32 rights, address to) internal pure returns (bytes32 hash) {\\n        assembly (\\\"memory-safe\\\") {\\n            // This block only allocates memory after the free memory pointer\\n            let ptr := mload(64) // Load the free memory pointer\\n            // Layout the variables from last to first, agnostic to upper 96 bits of address words.\\n            mstore(add(ptr, 40), to)\\n            mstore(add(ptr, 20), from)\\n            mstore(ptr, rights)\\n            hash := or(shl(8, keccak256(ptr, 72)), ALL_TYPE) // Runs keccak over the packed encoding, shifts left by one byte, then writes the type to the last\\n                // byte\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to compute delegation location for all delegation\\n     * @param from is the address making the delegation\\n     * @param rights is the rights specified by the delegation\\n     * @param to is the address receiving the delegation\\n     * @return computedLocation is the storage location of the all delegation with those parameters in the delegations mapping\\n     * @dev gives the same location hash as location(allHash(rights, from, to)) would\\n     * @dev will not revert if from or to are > uint160, any input larger than uint160 for from and to will be cleaned to their last 20 bytes\\n     */\\n    function allLocation(address from, bytes32 rights, address to) internal pure returns (bytes32 computedLocation) {\\n        assembly (\\\"memory-safe\\\") {\\n            // This block only allocates memory after the free memory pointer and in the scratch space\\n            let ptr := mload(64) // Load the free memory pointer\\n            // Layout the variables from last to first, agnostic to upper 96 bits of address words.\\n            mstore(add(ptr, 40), to)\\n            mstore(add(ptr, 20), from)\\n            mstore(ptr, rights)\\n            mstore(0, or(shl(8, keccak256(ptr, 72)), ALL_TYPE)) // Runs keccak over the packed encoding, shifts left by one byte, then writes the type to the\\n                // last byte, and stores the result in the scratch space\\n            mstore(32, DELEGATION_SLOT)\\n            computedLocation := keccak256(0, 64) // Runs keccak over the scratch space to obtain the storage key\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to compute delegation hash for contract delegation\\n     * @param from is the address making the delegation\\n     * @param rights is the rights specified by the delegation\\n     * @param to is the address receiving the delegation\\n     * @param contract_ is the address of the contract specified by the delegation\\n     * @return hash of the delegation parameters encoded with CONTRACT_TYPE\\n     * @dev returned hash should be equivalent to keccak256(abi.encodePacked(rights, from, to, contract_)) with the last byte overwritten with CONTRACT_TYPE\\n     * @dev will not revert if from, to, or contract_ are > uint160, any input larger than uint160 for from, to, or contract_ will be cleaned to their last 20 bytes\\n     */\\n    function contractHash(address from, bytes32 rights, address to, address contract_) internal pure returns (bytes32 hash) {\\n        assembly (\\\"memory-safe\\\") {\\n            // This block only allocates memory after the free memory pointer\\n            let ptr := mload(64) // Load the free memory pointer\\n            // Layout the variables from last to first, agnostic to upper 96 bits of address words.\\n            mstore(add(ptr, 60), contract_)\\n            mstore(add(ptr, 40), to)\\n            mstore(add(ptr, 20), from)\\n            mstore(ptr, rights)\\n            hash := or(shl(8, keccak256(ptr, 92)), CONTRACT_TYPE) // Runs keccak over the packed encoding, shifts left by one byte, then writes the type to the last byte\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to compute delegation location for contract delegation\\n     * @param from is the address making the delegation\\n     * @param rights is the rights specified by the delegation\\n     * @param to is the address receiving the delegation\\n     * @param contract_ is the address of the contract specified by the delegation\\n     * @return computedLocation is the storage location of the contract delegation with those parameters in the delegations mapping\\n     * @dev gives the same location hash as location(contractHash(rights, from, to, contract_)) would\\n     * @dev will not revert if from, to, or contract_ are > uint160, any input larger than uint160 for from, to, or contract_ will be cleaned to their last 20 bytes\\n     */\\n    function contractLocation(address from, bytes32 rights, address to, address contract_) internal pure returns (bytes32 computedLocation) {\\n        assembly (\\\"memory-safe\\\") {\\n            // This block only allocates memory after the free memory pointer and in the scratch space\\n            let ptr := mload(64) // Load free memory pointer\\n            // Layout the variables from last to first, agnostic to upper 96 bits of address words.\\n            mstore(add(ptr, 60), contract_)\\n            mstore(add(ptr, 40), to)\\n            mstore(add(ptr, 20), from)\\n            mstore(ptr, rights)\\n            mstore(0, or(shl(8, keccak256(ptr, 92)), CONTRACT_TYPE)) // Runs keccak over the packed encoding, shifts left by one byte, then writes the type to the\\n                // last byte, and stores the result in the scratch space\\n            mstore(32, DELEGATION_SLOT)\\n            computedLocation := keccak256(0, 64) // Runs keccak over the scratch space to obtain the storage key\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to compute delegation hash for ERC721 delegation\\n     * @param from is the address making the delegation\\n     * @param rights is the rights specified by the delegation\\n     * @param to is the address receiving the delegation\\n     * @param tokenId is the id of the token specified by the delegation\\n     * @param contract_ is the address of the contract specified by the delegation\\n     * @return hash of the parameters encoded with ERC721_TYPE\\n     * @dev returned hash should be equivalent to keccak256(abi.encodePacked(rights, from, to, contract_, tokenId)) with the last byte overwritten with ERC721_TYPE\\n     * @dev will not revert if from, to, or contract_ are > uint160, any input larger than uint160 for from, to, or contract_ will be cleaned to their last 20 bytes\\n     */\\n    function erc721Hash(address from, bytes32 rights, address to, uint256 tokenId, address contract_) internal pure returns (bytes32 hash) {\\n        assembly (\\\"memory-safe\\\") {\\n            // This block only allocates memory after the free memory pointer\\n            let ptr := mload(64) // Cache the free memory pointer.\\n            // Layout the variables from last to first, agnostic to upper 96 bits of address words.\\n            mstore(add(ptr, 92), tokenId)\\n            mstore(add(ptr, 60), contract_)\\n            mstore(add(ptr, 40), to)\\n            mstore(add(ptr, 20), from)\\n            mstore(ptr, rights)\\n            hash := or(shl(8, keccak256(ptr, 124)), ERC721_TYPE) // Runs keccak over the packed encoding, shifts left by one byte, then writes the type to the last byte\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to compute delegation location for ERC721 delegation\\n     * @param from is the address making the delegation\\n     * @param rights is the rights specified by the delegation\\n     * @param to is the address receiving the delegation\\n     * @param tokenId is the id of the erc721 token\\n     * @param contract_ is the address of the erc721 token contract\\n     * @return computedLocation is the storage location of the erc721 delegation with those parameters in the delegations mapping\\n     * @dev gives the same location hash as location(erc721Hash(rights, from, to, contract_, tokenId)) would\\n     * @dev will not revert if from, to, or contract_ are > uint160, any input larger than uint160 for from, to, or contract_ will be cleaned to their last 20 bytes\\n     */\\n    function erc721Location(address from, bytes32 rights, address to, uint256 tokenId, address contract_) internal pure returns (bytes32 computedLocation) {\\n        assembly (\\\"memory-safe\\\") {\\n            // This block only allocates memory after the free memory pointer and in the scratch space\\n            let ptr := mload(64) // Cache the free memory pointer.\\n            // Layout the variables from last to first, agnostic to upper 96 bits of address words.\\n            mstore(add(ptr, 92), tokenId)\\n            mstore(add(ptr, 60), contract_)\\n            mstore(add(ptr, 40), to)\\n            mstore(add(ptr, 20), from)\\n            mstore(ptr, rights)\\n            mstore(0, or(shl(8, keccak256(ptr, 124)), ERC721_TYPE)) // Runs keccak over the packed encoding, shifts left by one byte, then writes the type to the\\n                // last byte, and stores the result in the scratch space\\n            mstore(32, DELEGATION_SLOT)\\n            computedLocation := keccak256(0, 64) // Runs keccak256 over the scratch space to obtain the storage key\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to compute delegation hash for ERC20 delegation\\n     * @param from is the address making the delegation\\n     * @param rights is the rights specified by the delegation\\n     * @param to is the address receiving the delegation\\n     * @param contract_ is the address of the erc20 token contract\\n     * @return hash of the parameters encoded with ERC20_TYPE\\n     * @dev returned hash should be equivalent to keccak256(abi.encodePacked(rights, from, to, contract_)) with the last byte overwritten with ERC20_TYPE\\n     * @dev will not revert if from, to, or contract_ are > uint160, any input larger than uint160 for from, to, or contract_ will be cleaned to their last 20 bytes\\n     */\\n    function erc20Hash(address from, bytes32 rights, address to, address contract_) internal pure returns (bytes32 hash) {\\n        assembly (\\\"memory-safe\\\") {\\n            // This block only allocates memory after the free memory pointer\\n            let ptr := mload(64) // Load free memory pointer\\n            // Layout the variables from last to first, agnostic to upper 96 bits of address words.\\n            mstore(add(ptr, 60), contract_)\\n            mstore(add(ptr, 40), to)\\n            mstore(add(ptr, 20), from)\\n            mstore(ptr, rights)\\n            hash := or(shl(8, keccak256(ptr, 92)), ERC20_TYPE) // Runs keccak over the packed encoding, shifts left by one byte, then writes the type to the last byte\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to compute delegation location for ERC20 delegation\\n     * @param from is the address making the delegation\\n     * @param rights is the rights specified by the delegation\\n     * @param to is the address receiving the delegation\\n     * @param contract_ is the address of the erc20 token contract\\n     * @return computedLocation is the storage location of the erc20 delegation with those parameters in the delegations mapping\\n     * @dev gives the same location hash as location(erc20Hash(rights, from, to, contract_)) would\\n     * @dev will not revert if from, to, or contract_ are > uint160, any input larger than uint160 for from, to, or contract_ will be cleaned to their last 20 bytes\\n     */\\n    function erc20Location(address from, bytes32 rights, address to, address contract_) internal pure returns (bytes32 computedLocation) {\\n        assembly (\\\"memory-safe\\\") {\\n            // This block only allocates memory after the free memory pointer and in the scratch space\\n            let ptr := mload(64) // Loads the free memory pointer\\n            // Layout the variables from last to first, agnostic to upper 96 bits of address words.\\n            mstore(add(ptr, 60), contract_)\\n            mstore(add(ptr, 40), to)\\n            mstore(add(ptr, 20), from)\\n            mstore(ptr, rights)\\n            mstore(0, or(shl(8, keccak256(ptr, 92)), ERC20_TYPE)) // Runs keccak over the packed encoding, shifts left by one byte, then writes the type to the\\n                // last byte, and stores the result in the scratch space\\n            mstore(32, DELEGATION_SLOT)\\n            computedLocation := keccak256(0, 64) // Runs keccak over the scratch space to obtain the storage key\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to compute delegation hash for ERC1155 delegation\\n     * @param from is the address making the delegation\\n     * @param rights is the rights specified by the delegation\\n     * @param to is the address receiving the delegation\\n     * @param tokenId is the id of the erc1155 token\\n     * @param contract_ is the address of the erc1155 token contract\\n     * @return hash of the parameters encoded with ERC1155_TYPE\\n     * @dev returned hash should be equivalent to keccak256(abi.encodePacked(rights, from, to, contract_, tokenId)) with the last byte overwritten with ERC1155_TYPE\\n     * @dev will not revert if from, to, or contract_ are > uint160, any input larger than uint160 for from, to, or contract_ will be cleaned to their last 20 bytes\\n     */\\n    function erc1155Hash(address from, bytes32 rights, address to, uint256 tokenId, address contract_) internal pure returns (bytes32 hash) {\\n        assembly (\\\"memory-safe\\\") {\\n            // This block only allocates memory after the free memory pointer\\n            let ptr := mload(64) // Load the free memory pointer.\\n            // Layout the variables from last to first, agnostic to upper 96 bits of address words.\\n            mstore(add(ptr, 92), tokenId)\\n            mstore(add(ptr, 60), contract_)\\n            mstore(add(ptr, 40), to)\\n            mstore(add(ptr, 20), from)\\n            mstore(ptr, rights)\\n            hash := or(shl(8, keccak256(ptr, 124)), ERC1155_TYPE) // Runs keccak over the packed encoding, shifts left by one byte, then writes the type to the last byte\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to compute delegation hash for ERC1155 delegation\\n     * @param from is the address making the delegation\\n     * @param rights is the rights specified by the delegation\\n     * @param to is the address receiving the delegation\\n     * @param tokenId is the id of the erc1155 token\\n     * @param contract_ is the address of the erc1155 token contract\\n     * @return computedLocation is the storage location of the erc1155 delegation with those parameters in the delegations mapping\\n     * @dev gives the same location hash as location(erc1155Hash(rights, from, to, contract_, tokenId)) would\\n     * @dev will not revert if from, to, or contract_ are > uint160, any input larger than uint160 for from, to, or contract_ will be cleaned to their last 20 bytes\\n     */\\n    function erc1155Location(address from, bytes32 rights, address to, uint256 tokenId, address contract_) internal pure returns (bytes32 computedLocation) {\\n        assembly (\\\"memory-safe\\\") {\\n            // This block only allocates memory after the free memory pointer and in the scratch space\\n            let ptr := mload(64) // Cache the free memory pointer.\\n            // Layout the variables from last to first, agnostic to upper 96 bits of address words.\\n            mstore(add(ptr, 92), tokenId)\\n            mstore(add(ptr, 60), contract_)\\n            mstore(add(ptr, 40), to)\\n            mstore(add(ptr, 20), from)\\n            mstore(ptr, rights)\\n            mstore(0, or(shl(8, keccak256(ptr, 124)), ERC1155_TYPE)) // Runs keccak over the packed encoding, shifts left by one byte, then writes the type to the\\n                // last byte, and stores the result in the scratch space\\n            mstore(32, DELEGATION_SLOT)\\n            computedLocation := keccak256(0, 64) // Runs keccak over the scratch space to obtain the storage key\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"murky/=lib/murky/src/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"delegate-registry/=lib/delegate-registry/\",\r\n      \"seaport/=lib/seaport/\",\r\n      \"@rari-capital/solmate/=lib/seaport/lib/solmate/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"seaport-core/=lib/seaport/contracts/\",\r\n      \"seaport-sol/=lib/seaport/contracts/helpers/sol/\",\r\n      \"solady/=lib/seaport/lib/solady/\",\r\n      \"solarray/=lib/seaport/lib/solarray/src/\",\r\n      \"solmate/=lib/seaport/lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999999\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegateRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principalToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketMetadata\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delegateTokenId\",\"type\":\"uint256\"}],\"name\":\"AlreadyExisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BatchERC1155TransferUnsupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnNotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotOwnerOrInvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotPrincipalToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DelegateTokenHolderZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155FlashAmountUnavailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155NotPulled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155PullNotRequested\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1155Pulled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20FlashAmountUnavailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721FlashUnavailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpiryInPast\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpiryTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpiryTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FromNotDelegateTokenHolder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HashMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowanceOrInvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidERC721TransferOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFlashloan\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum IDelegateRegistry.DelegationType\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"name\":\"InvalidTokenType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintNotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MulticallFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delegateTokenId\",\"type\":\"uint256\"}],\"name\":\"NotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotERC721Receiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delegateTokenId\",\"type\":\"uint256\"}],\"name\":\"NotMinted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ToIsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delegateTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawNotAvailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum IDelegateRegistry.DelegationType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"wrongAmount\",\"type\":\"uint256\"}],\"name\":\"WrongAmountForType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum IDelegateRegistry.DelegationType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"wrongTokenId\",\"type\":\"uint256\"}],\"name\":\"WrongTokenIdForType\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"delegateTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousExpiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExpiry\",\"type\":\"uint256\"}],\"name\":\"ExpiryExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delegateTokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegateTokenHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAuthorizedCallback\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"principalHolder\",\"type\":\"address\"},{\"internalType\":\"enum IDelegateRegistry.DelegationType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"delegateHolder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"rights\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct DelegateTokenStructs.DelegateInfo\",\"name\":\"delegateInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"delegateTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegateRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delegateTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newExpiry\",\"type\":\"uint256\"}],\"name\":\"extend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegateHolder\",\"type\":\"address\"},{\"internalType\":\"enum IDelegateRegistry.DelegationType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct DelegateTokenStructs.FlashInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"flashloan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delegateTokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"getDelegateTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"delegateTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delegateTokenId\",\"type\":\"uint256\"}],\"name\":\"getDelegateTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"principalHolder\",\"type\":\"address\"},{\"internalType\":\"enum IDelegateRegistry.DelegationType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"delegateHolder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"rights\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct DelegateTokenStructs.DelegateInfo\",\"name\":\"delegateInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delegateTokenId\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketMetadata\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintAuthorizedCallback\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delegateTokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"delegateTokenHolder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"principalToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delegateTokenId\",\"type\":\"uint256\"}],\"name\":\"rescind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delegateTokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delegateTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delegateTokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delegateTokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delegateTokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DelegateToken", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "9999999", "ConstructorArguments": "00000000000000000000000000000000000000447e69651d841bd8d104bed493000000000000000000000000c73dfd486bc155b8126a366f68a4fefe05ce1dcd000000000000000000000000ba93c25cd7db01b5d8f4b74ae4e3f5e048144834", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}