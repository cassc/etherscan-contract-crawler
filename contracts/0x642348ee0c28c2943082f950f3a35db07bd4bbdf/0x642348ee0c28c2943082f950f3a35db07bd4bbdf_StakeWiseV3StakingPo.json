{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/release/extensions/external-position-manager/external-positions/stakewise-v3-staking/StakeWiseV3StakingPositionParser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\nimport {IStakeWiseV3EthVault} from \\\"../../../../../external-interfaces/IStakeWiseV3EthVault.sol\\\";\\nimport {IStakeWiseV3VaultsRegistry} from \\\"../../../../../external-interfaces/IStakeWiseV3VaultsRegistry.sol\\\";\\nimport {IExternalPositionParser} from \\\"../../IExternalPositionParser.sol\\\";\\nimport {IStakeWiseV3StakingPosition} from \\\"./IStakeWiseV3StakingPosition.sol\\\";\\nimport {StakeWiseV3StakingPositionDataDecoder} from \\\"./StakeWiseV3StakingPositionDataDecoder.sol\\\";\\n\\npragma solidity 0.8.19;\\n\\n/// @title StakeWiseV3StakingPositionParser\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Parser for StakeWise V3 Staking Positions\\ncontract StakeWiseV3StakingPositionParser is StakeWiseV3StakingPositionDataDecoder, IExternalPositionParser {\\n    IStakeWiseV3VaultsRegistry public immutable STAKEWISE_V3_VAULT_REGISTRY;\\n    address public immutable WETH_ADDRESS;\\n\\n    constructor(address _stakeWiseV3VaultsRegistryAddress, address _wethAddress) {\\n        STAKEWISE_V3_VAULT_REGISTRY = IStakeWiseV3VaultsRegistry(_stakeWiseV3VaultsRegistryAddress);\\n        WETH_ADDRESS = _wethAddress;\\n    }\\n\\n    /// @notice Parses the assets to send and receive for the callOnExternalPosition\\n    /// @param _actionId The _actionId for the callOnExternalPosition\\n    /// @param _encodedActionArgs The encoded parameters for the callOnExternalPosition\\n    /// @return assetsToTransfer_ The assets to be transferred from the Vault\\n    /// @return amountsToTransfer_ The amounts to be transferred from the Vault\\n    /// @return assetsToReceive_ The assets to be received at the Vault\\n    function parseAssetsForAction(address, uint256 _actionId, bytes memory _encodedActionArgs)\\n        external\\n        view\\n        override\\n        returns (\\n            address[] memory assetsToTransfer_,\\n            uint256[] memory amountsToTransfer_,\\n            address[] memory assetsToReceive_\\n        )\\n    {\\n        if (_actionId == uint256(IStakeWiseV3StakingPosition.Actions.Stake)) {\\n            (IStakeWiseV3EthVault stakeWiseVault, uint256 amount) = __decodeStakeActionArgs(_encodedActionArgs);\\n\\n            __validateStakeWiseVault(stakeWiseVault);\\n\\n            assetsToTransfer_ = new address[](1);\\n            amountsToTransfer_ = new uint256[](1);\\n\\n            assetsToTransfer_[0] = WETH_ADDRESS;\\n            amountsToTransfer_[0] = amount;\\n        } else if (_actionId == uint256(IStakeWiseV3StakingPosition.Actions.Redeem)) {\\n            (IStakeWiseV3EthVault stakeWiseVault,) = __decodeRedeemActionArgs(_encodedActionArgs);\\n\\n            __validateStakeWiseVault(stakeWiseVault);\\n\\n            assetsToReceive_ = new address[](1);\\n\\n            assetsToReceive_[0] = WETH_ADDRESS;\\n        } else if (_actionId == uint256(IStakeWiseV3StakingPosition.Actions.ClaimExitedAssets)) {\\n            (IStakeWiseV3EthVault stakeWiseVault,,) = __decodeClaimExitedAssetsActionArgs(_encodedActionArgs);\\n\\n            __validateStakeWiseVault(stakeWiseVault);\\n\\n            assetsToReceive_ = new address[](1);\\n\\n            assetsToReceive_[0] = WETH_ADDRESS;\\n        } else if (_actionId == uint256(IStakeWiseV3StakingPosition.Actions.EnterExitQueue)) {\\n            (IStakeWiseV3EthVault stakeWiseVault,) = __decodeEnterExitQueueActionArgs(_encodedActionArgs);\\n\\n            __validateStakeWiseVault(stakeWiseVault);\\n        }\\n\\n        return (assetsToTransfer_, amountsToTransfer_, assetsToReceive_);\\n    }\\n\\n    /// @notice Parse and validate input arguments to be used when initializing a newly-deployed ExternalPositionProxy\\n    /// @return initArgs_ Parsed and encoded args for ExternalPositionProxy.init()\\n    function parseInitArgs(address, bytes memory) external pure override returns (bytes memory initArgs_) {\\n        return \\\"\\\";\\n    }\\n\\n    /// @dev Helper to validate a StakeWiseV3 vault contract\\n    function __validateStakeWiseVault(IStakeWiseV3EthVault _stakeWiseVault) private view {\\n        require(\\n            STAKEWISE_V3_VAULT_REGISTRY.vaults({_vault: address(_stakeWiseVault)}),\\n            \\\"__validateStakeWiseVault: Invalid stakewise vault contract\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external-interfaces/IStakeWiseV3EthVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IStakeWiseV3EthVault Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IStakeWiseV3EthVault {\\n    function calculateExitedAssets(\\n        address _receiver,\\n        uint256 _positionTicket,\\n        uint256 _timestamp,\\n        uint256 _exitQueueIndex\\n    ) external view returns (uint256 leftShares_, uint256 claimedShares_, uint256 claimedAssets_);\\n\\n    function claimExitedAssets(uint256 _positionTicket, uint256 _timestamp, uint256 _exitQueueIndex)\\n        external\\n        returns (uint256 newPositionTicket_, uint256 claimedShares_, uint256 claimedAssets_);\\n\\n    function convertToShares(uint256 _assets) external view returns (uint256 shares_);\\n\\n    function convertToAssets(uint256 _shares) external view returns (uint256 assets_);\\n\\n    function deposit(address _receiver, address _referrer) external payable returns (uint256 shares_);\\n\\n    function enterExitQueue(uint256 _shares, address _receiver) external returns (uint256 positionTicket_);\\n\\n    function getExitQueueIndex(uint256 _positionTicket) external view returns (int256 exitQueueIndex_);\\n\\n    function getShares(address _account) external view returns (uint256 shares_);\\n\\n    function redeem(uint256 _shares, address _receiver) external returns (uint256 assets_);\\n}\\n\"\r\n    },\r\n    \"contracts/external-interfaces/IStakeWiseV3VaultsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IStakeWiseV3VaultsRegistry Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IStakeWiseV3VaultsRegistry {\\n    function vaults(address _vault) external view returns (bool isRegistered_);\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/external-position-manager/IExternalPositionParser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IExternalPositionParser Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for all external position parsers\\ninterface IExternalPositionParser {\\n    function parseAssetsForAction(address _externalPosition, uint256 _actionId, bytes memory _encodedActionArgs)\\n        external\\n        returns (\\n            address[] memory assetsToTransfer_,\\n            uint256[] memory amountsToTransfer_,\\n            address[] memory assetsToReceive_\\n        );\\n\\n    function parseInitArgs(address _vaultProxy, bytes memory _initializationData)\\n        external\\n        returns (bytes memory initArgs_);\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/external-position-manager/external-positions/stakewise-v3-staking/IStakeWiseV3StakingPosition.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\nimport {IExternalPosition} from \\\"../../IExternalPosition.sol\\\";\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IStakeWiseV3StakingPosition Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IStakeWiseV3StakingPosition is IExternalPosition {\\n    enum Actions {\\n        Stake,\\n        Redeem,\\n        EnterExitQueue,\\n        ClaimExitedAssets\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/external-position-manager/external-positions/stakewise-v3-staking/StakeWiseV3StakingPositionDataDecoder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.8.19;\\n\\nimport {IStakeWiseV3EthVault} from \\\"../../../../../external-interfaces/IStakeWiseV3EthVault.sol\\\";\\nimport {IStakeWiseV3StakingPosition} from \\\"./IStakeWiseV3StakingPosition.sol\\\";\\n\\n/// @title StakeWiseV3StakingPositionDataDecoder Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Abstract contract containing data decodings for StakeWiseV3StakingPosition payloads\\nabstract contract StakeWiseV3StakingPositionDataDecoder {\\n    /// @dev Helper to decode args used during the Stake action\\n    function __decodeStakeActionArgs(bytes memory _actionArgs)\\n        internal\\n        pure\\n        returns (IStakeWiseV3EthVault vaultToken_, uint256 assetAmount_)\\n    {\\n        return abi.decode(_actionArgs, (IStakeWiseV3EthVault, uint256));\\n    }\\n\\n    /// @dev Helper to decode args used during the Redeem action\\n    function __decodeRedeemActionArgs(bytes memory _actionArgs)\\n        internal\\n        pure\\n        returns (IStakeWiseV3EthVault vaultToken_, uint256 sharesAmount_)\\n    {\\n        return abi.decode(_actionArgs, (IStakeWiseV3EthVault, uint256));\\n    }\\n\\n    /// @dev Helper to decode args used during the EnterExitQueue action\\n    function __decodeEnterExitQueueActionArgs(bytes memory _actionArgs)\\n        internal\\n        pure\\n        returns (IStakeWiseV3EthVault vaultToken_, uint256 sharesAmount_)\\n    {\\n        return abi.decode(_actionArgs, (IStakeWiseV3EthVault, uint256));\\n    }\\n\\n    /// @dev Helper to decode args used during the ClaimExitedAssets action\\n    function __decodeClaimExitedAssetsActionArgs(bytes memory _actionArgs)\\n        internal\\n        pure\\n        returns (IStakeWiseV3EthVault vaultToken_, uint256 positionTicket_, uint256 timestamp_)\\n    {\\n        return abi.decode(_actionArgs, (IStakeWiseV3EthVault, uint256, uint256));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/external-position-manager/IExternalPosition.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport {IExternalPositionLibCore} from \\\"../../../persistent/external-positions/IExternalPositionLibCore.sol\\\";\\n\\n/// @title IExternalPosition Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IExternalPosition is IExternalPositionLibCore {\\n    function getDebtAssets() external returns (address[] memory assets_, uint256[] memory amounts_);\\n\\n    function getManagedAssets() external returns (address[] memory assets_, uint256[] memory amounts_);\\n\\n    function init(bytes memory _data) external;\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/external-positions/IExternalPositionLibCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IExternalPositionLibCore interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice An interface for core required functions of an IExternalPositionLib instance\\ninterface IExternalPositionLibCore {\\n    function receiveCallFromVault(bytes memory _data) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-solc-0.6/contracts/\",\r\n      \"@uniswap/v3-core/=lib/uniswap-v3-core/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-solc-0.6/=lib/openzeppelin-solc-0.6/contracts/\",\r\n      \"openzeppelin-solc-0.7/=lib/openzeppelin-solc-0.7/contracts/\",\r\n      \"openzeppelin-solc-0.8/=lib/openzeppelin-solc-0.8/contracts/\",\r\n      \"uniswap-v3-core/=lib/uniswap-v3-core/\",\r\n      \"uniswap-v3-core-0.8/=lib/uniswap-v3-core-0.8/\",\r\n      \"uniswap-v3-periphery/=lib/uniswap-v3-periphery/contracts/\",\r\n      \"uniswap-v3-periphery-0.8/=lib/uniswap-v3-periphery-0.8/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\",\r\n      \"appendCBOR\": false\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeWiseV3VaultsRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"STAKEWISE_V3_VAULT_REGISTRY\",\"outputs\":[{\"internalType\":\"contract IStakeWiseV3VaultsRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_actionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_encodedActionArgs\",\"type\":\"bytes\"}],\"name\":\"parseAssetsForAction\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"assetsToTransfer_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToTransfer_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"assetsToReceive_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"parseInitArgs\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"initArgs_\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "StakeWiseV3StakingPositionParser", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003a0008a588772446f6e656133c2d5029cc4fc20e000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}