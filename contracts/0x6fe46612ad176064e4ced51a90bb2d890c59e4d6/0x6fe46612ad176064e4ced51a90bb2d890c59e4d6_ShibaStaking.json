{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-11-12\r\n*/\r\n\r\n// XFO TOKEN  Staking Website\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n\r\n    */\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\r\n        // benefit is lost if 'b' is also tested.\r\n\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n\r\n    */\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n\r\n        require(b > 0);\r\n\r\n        uint256 c = a / b;\r\n\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n\r\n    */\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n\r\n    */\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n\r\n    * reverts when dividing by zero.\r\n\r\n    */\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable   {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n\r\n     */\r\n\r\n    constructor()  {\r\n        _owner = msg.sender;\r\n\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns the address of the current owner.\r\n\r\n     */\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Throws if called by any account other than the owner.\r\n\r\n     */\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n\r\n        _;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\r\n     * Can only be called by the current owner.\r\n\r\n     */\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract ShibaStaking is Ownable{\r\n    using SafeMath for uint256;\r\n    IERC20 public Token;\r\n\r\n    struct userInfo {\r\n        uint256 DepositeToken;\r\n        uint256 lastUpdated;\r\n        uint256 lockableDays;\r\n        uint256 WithdrawReward;\r\n        uint256 WithdrawAbleReward;\r\n        uint256 depositeTime;\r\n        uint256 WithdrawDepositeAmount;\r\n    }\r\n    \r\n     event Deposite_(address indexed to,address indexed From, uint256 amount, uint256 day,uint256 time);\r\n\r\n    \r\n    mapping(uint256 => uint256) public allocation;\r\n    mapping(address => uint256[] ) public depositeToken;\r\n    mapping(address => uint256[] ) public lockabledays;\r\n    mapping(address => uint256[] ) public depositetime;   \r\n    mapping(address =>  userInfo) public Users;\r\n    uint256 minimumDeposit = 1E18; //Token is 18 decimal\r\n    \r\n    uint256 public time = 1 days;\r\n\r\n    constructor(IERC20 _token)  {\r\n        Token = _token;\r\n      \r\n\r\n        allocation[30]=19916666666700000000; //19.9166666667 %\r\n        allocation[90] = 222500000000000000000; //222.5 %\r\n        allocation[180] = 1100000000000000000000; //1100 %\r\n        allocation[360] = 5800000000000000000000; //5800 %  \r\n        \r\n        // allocation[90] =  10000000000; //10% In 9 DECIMAL\r\n        // allocation[180] = 25000000000; // 25% IN 9DECIMAL\r\n        // allocation[360] = 50000000000; //50% in 9 decimal\r\n\r\n\r\n        \r\n    }\r\n\r\n    function farm(uint256 _amount, uint256 _lockableDays) public \r\n    {\r\n        require(_amount >= minimumDeposit, \"Invalid amount\");\r\n        require(allocation[_lockableDays] > 0, \"Invalid day selection\");\r\n        Token.transferFrom(msg.sender, address(this), _amount);\r\n        depositeToken[msg.sender].push(_amount);\r\n        depositetime[msg.sender].push(uint40(block.timestamp));\r\n        Users[msg.sender].DepositeToken += _amount;\r\n        lockabledays[msg.sender].push(_lockableDays);\r\n        emit Deposite_(msg.sender,address(this),_amount,_lockableDays,block.timestamp);\r\n    }\r\n    \r\n\r\n\r\n\r\n        function pendingRewards(address _add) public view returns(uint256 reward)\r\n    {\r\n        uint256 Reward;\r\n        for(uint256 z=0 ; z< depositeToken[_add].length;z++){\r\n        uint256 lockTime = depositetime[_add][z]+(lockabledays[_add][z]*time);\r\n        if(block.timestamp > lockTime ){\r\n        reward = (allocation[lockabledays[_add][z]].mul(depositeToken[_add][z]).div(100)).div(1e18);\r\n        Reward += reward;\r\n        }\r\n    }\r\n    return Reward;\r\n    }\r\n\r\n  \r\n    \r\n    \r\n    function harvest(uint256 [] memory _index) public \r\n    {\r\n          for(uint256 z=0 ; z< _index.length;z++){\r\n              \r\n        require( Users[msg.sender].DepositeToken > 0, \" Deposite not \");\r\n        \r\n        uint256 lockTime =depositetime[msg.sender][_index[z]]+(lockabledays[msg.sender][_index[z]].mul(time));\r\n        require(block.timestamp > lockTime,\"unstake time not reached!\");\r\n        uint256 reward = (allocation[lockabledays[msg.sender][_index[z]]].mul(depositeToken[msg.sender][_index[z]]).div(100)).div(1e18);\r\n        \r\n        Users[msg.sender].WithdrawAbleReward += reward;\r\n        Users[msg.sender].DepositeToken -= depositeToken[msg.sender][_index[z]];\r\n        Users[msg.sender].WithdrawDepositeAmount += depositeToken[msg.sender][_index[z]];\r\n        depositeToken[msg.sender][_index[z]] = 0;\r\n        lockabledays[msg.sender][_index[z]] = 0;\r\n        depositetime[msg.sender][_index[z]] = 0;\r\n \r\n    }\r\n            for(uint256 t=0 ; t< _index.length;t++){\r\n            for(uint256 i = _index[t]; i <  depositeToken[msg.sender].length - 1; i++) \r\n        {\r\n            depositeToken[msg.sender][i] = depositeToken[msg.sender][i + 1];\r\n            lockabledays[msg.sender][i] = lockabledays[msg.sender][i + 1];\r\n            depositetime[msg.sender][i] = depositetime[msg.sender][i + 1];\r\n        }\r\n          depositeToken[msg.sender].pop();\r\n          lockabledays[msg.sender].pop();\r\n          depositetime[msg.sender].pop();\r\n    }\r\n             uint256 totalwithdrawAmount;\r\n             \r\n             totalwithdrawAmount = Users[msg.sender].WithdrawDepositeAmount.add(Users[msg.sender].WithdrawAbleReward);\r\n             Token.transfer(msg.sender,  totalwithdrawAmount);\r\n             Users[msg.sender].WithdrawReward =Users[msg.sender].WithdrawReward.add(Users[msg.sender].WithdrawAbleReward );\r\n             Users[msg.sender].WithdrawAbleReward =0;\r\n             Users[msg.sender].WithdrawDepositeAmount = 0;\r\n         \r\n    }\r\n\r\n    function UserInformation(address _add) public view returns(uint256 [] memory , uint256 [] memory,uint256 [] memory){\r\n        return(depositeToken[_add],lockabledays[_add],depositetime[_add]);\r\n    }\r\n \r\n \r\n    function emergencyWithdraw(uint256 _token) external onlyOwner {\r\n         Token.transfer(msg.sender, _token);\r\n    }\r\n\r\n    function emergencyWithdrawETH(uint256 Amount) external onlyOwner {\r\n        payable(msg.sender).transfer(Amount);\r\n    }\r\n\r\n\r\n    function changetimeCal(uint256 _time) external onlyOwner{\r\n        time=_time;\r\n    }\r\n\r\n    function changeMinimmumAmount(uint256 amount) external onlyOwner{\r\n        minimumDeposit=amount;\r\n    }\r\n    function changePercentages(uint256 _30dayspercent, uint256 _90dayspercent,uint256 _180dayspercent,uint256 _360dayspercent) external onlyOwner{\r\n        allocation[30]=_30dayspercent;\r\n        allocation[90] = _90dayspercent;\r\n        allocation[180] = _180dayspercent;\r\n        allocation[360] = _360dayspercent;\r\n    }\r\n\r\n    function changeToken(address newToken) external onlyOwner{\r\n        Token = IERC20(newToken);\r\n    }\r\n    \r\n\r\n    \r\n}\r\n\r\n\r\n// Mainnnet: 0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE (mainnet", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"From\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Deposite_\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"UserInformation\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"DepositeToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockableDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"WithdrawReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"WithdrawAbleReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"WithdrawDepositeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeMinimmumAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_30dayspercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_90dayspercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_180dayspercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_360dayspercent\",\"type\":\"uint256\"}],\"name\":\"changePercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"changeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"changetimeCal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositetime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockableDays\",\"type\":\"uint256\"}],\"name\":\"farm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_index\",\"type\":\"uint256[]\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockabledays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ShibaStaking", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000095ad61b0a150d79219dcf64e1e6cc01f0b64c4ce", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9930717450d1134fd2fd4cd04e3b3f582752f35e11d366e2a6106058677369fa"}