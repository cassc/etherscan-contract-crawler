{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Contracts/ArenaBet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Twitter: https://twitter.com/ChampionArenaTG\\n// Website: https://championarena.xyz/\\n// TG Link: https://t.me/championarenatg\\n\\n// Champion Arena Is An Exhilarating Telegram Game Where You Can Bet With Our Token, $ARENA, In Intense PVP Matches.\\npragma solidity >=0.8.10 <0.9.0;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n    address private creator;\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n    address public arenaContract;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(\\n        address account\\n    ) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) public virtual returns (bool) {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(\\n            senderBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\\nlibrary SafeMath {\\n    function tryAdd(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    function trySub(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    function tryMul(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    function tryDiv(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    function tryMod(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\n////// src/IUniswapV2Factory.sol\\n/* pragma solidity 0.8.10; */\\n/* pragma experimental ABIEncoderV2; */\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB\\n    ) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\\n////// src/IUniswapV2Pair.sol\\n/* pragma solidity 0.8.10; */\\n/* pragma experimental ABIEncoderV2; */\\n\\ninterface IUniswapV2Pair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(\\n        address to\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\\ncontract ArenaBet is ERC20, Ownable {\\n    event SwapBackSuccess(\\n        uint256 tokenAmount,\\n        uint256 ethAmountReceived,\\n        bool success\\n    );\\n    bool private swapping;\\n    address public marketingWallet =\\n        address(0x33ed8117F09EEFe2A724aEfa2C4C93a08f8938c3);\\n\\n    address public devWallet =\\n        address(0xC52c28b62Af08F0be985614829133BE8A2f536b3);\\n    address public Admin;\\n\\n    uint256 _totalSupply = 10_000_000 * 1e18;\\n    uint256 public maxTransactionAmount = (_totalSupply * 30) / 1000; // 3% from total supply maxTransactionAmountTxn;\\n    uint256 public swapTokensAtAmount = (_totalSupply * 10) / 10000; // 0.1% swap tokens at this amount. (10_000_000 * 10) / 10000 = 0.1%(10000 tokens) of the total supply\\n    uint256 public maxWallet = (_totalSupply * 30) / 1000; // 3% from total supply maxWallet\\n\\n    bool public limitsInEffect = true;\\n    bool public tradingActive = false;\\n    bool public swapEnabled = false;\\n\\n    uint256 public buyFees = 30;\\n    uint256 public sellFees = 30;\\n\\n    uint256 public marketingAmount = 50; //\\n    uint256 public devAmount = 50; //\\n\\n    using SafeMath for uint256;\\n\\n    IUniswapV2Router02 public uniswapV2Router;\\n    address public uniswapV2Pair;\\n    address public constant deadAddress = address(0xdead);\\n\\n    // exlcude from fees and max transaction amount\\n    mapping(address => bool) private _isExcludedFromFees;\\n    mapping(address => bool) public _isExcludedMaxTransactionAmount;\\n    mapping(address => bool) public automatedMarketMakerPairs;\\n\\n    constructor() ERC20(\\\"Arena\\\", \\\"$ARENA\\\") {\\n        // exclude from paying fees or having max transaction amount\\n        excludeFromFees(owner(), true);\\n        Admin = msg.sender;\\n        excludeFromFees(marketingWallet, true);\\n        excludeFromFees(devWallet, true);\\n        excludeFromFees(address(this), true);\\n        excludeFromFees(address(0xdead), true);\\n        excludeFromMaxTransaction(owner(), true);\\n        excludeFromMaxTransaction(marketingWallet, true);\\n        excludeFromMaxTransaction(devWallet, true);\\n        excludeFromMaxTransaction(address(this), true);\\n        excludeFromMaxTransaction(address(0xdead), true);\\n        // Minting 4% of the initial supply to the marketing wallet\\n        uint256 marketingSupply = _totalSupply.mul(4).div(100);\\n        _mint(marketingWallet, marketingSupply);\\n\\n        // Minting the remaining supply to the contract\\n        uint256 remainingSupply = _totalSupply.sub(marketingSupply);\\n        _mint(address(this), remainingSupply);\\n    }\\n\\n    receive() external payable {}\\n\\n    // once enabled, can never be turned off\\n    function enableTrading() external onlyOwner {\\n        tradingActive = true;\\n        swapEnabled = true;\\n    }\\n\\n    function burn(uint256 amount) external {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    // remove limits after token is stable (sets sell fees to 5%)\\n    function removeLimits() external onlyOwner returns (bool) {\\n        limitsInEffect = false;\\n        sellFees = 5;\\n        buyFees = 5;\\n        return true;\\n    }\\n\\n    function excludeFromMaxTransaction(\\n        address addressToExclude,\\n        bool isExcluded\\n    ) public onlyOwner {\\n        _isExcludedMaxTransactionAmount[addressToExclude] = isExcluded;\\n    }\\n\\n    // only use to disable contract sales if absolutely necessary (emergency use only)\\n    function updateSwapEnabled(bool enabled) external onlyOwner {\\n        swapEnabled = enabled;\\n    }\\n\\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\\n        _isExcludedFromFees[account] = excluded;\\n    }\\n\\n    function setAutomatedMarketMakerPair(\\n        address pair,\\n        bool value\\n    ) public onlyOwner {\\n        require(\\n            pair != uniswapV2Pair,\\n            \\\"The pair cannot be removed from automatedMarketMakerPairs\\\"\\n        );\\n        _setAutomatedMarketMakerPair(pair, value);\\n    }\\n\\n    function setMaxAllowed(\\n        uint256 _maxWallet,\\n        uint256 _maxTransactionAmount\\n    ) public onlyOwner {\\n        maxWallet = _maxWallet;\\n        maxTransactionAmount = _maxTransactionAmount;\\n    }\\n\\n    function addLiquidity() external payable onlyOwner {\\n        // approve token transfer to cover all possible scenarios\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D  //mainnet\\n        );\\n\\n        uniswapV2Router = _uniswapV2Router;\\n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\\n        uint256 liquidityAmount = balanceOf(address(this));  // get the current balance of the contract\\n        _approve(address(this), address(uniswapV2Router), liquidityAmount);\\n        // add the liquidity\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n            .createPair(address(this), _uniswapV2Router.WETH());\\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\\n        \\n\\n        uniswapV2Router.addLiquidityETH{value: msg.value}(\\n            address(this), //token address\\n            liquidityAmount, // liquidity amount\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            owner(), // LP tokens are sent to the owner\\n            block.timestamp\\n        );\\n    }\\n\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\n        automatedMarketMakerPairs[pair] = value;\\n    }\\n\\n    function updateFeeWallet(\\n        address marketingWallet_,\\n        address devWallet_\\n    ) public onlyOwner {\\n        devWallet = devWallet_;\\n        marketingWallet = marketingWallet_;\\n    }\\n\\n    function isExcludedFromFees(address account) public view returns (bool) {\\n        return _isExcludedFromFees[account];\\n    }\\n\\n    function changeBuySellFee(\\n        uint256 _buyFee,\\n        uint256 _sellFee\\n    ) public onlyOwner {\\n        buyFees = _buyFee;\\n        sellFees = _sellFee;\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        if (limitsInEffect) {\\n            if (\\n                from != owner() &&\\n                to != owner() &&\\n                to != address(0) &&\\n                to != address(0xdead) &&\\n                !swapping\\n            ) {\\n                if (!tradingActive) {\\n                    require(\\n                        _isExcludedFromFees[from] || _isExcludedFromFees[to],\\n                        \\\"Trading is not enabled yet.\\\"\\n                    );\\n                }\\n\\n                //when buy\\n                if (\\n                    automatedMarketMakerPairs[from] &&\\n                    !_isExcludedMaxTransactionAmount[to]\\n                ) {\\n                    require(\\n                        amount <= maxTransactionAmount,\\n                        \\\"Buy transfer amount exceeds the maxTransactionAmount.\\\"\\n                    );\\n                    require(\\n                        amount + balanceOf(to) <= maxWallet,\\n                        \\\"Max wallet exceeded\\\"\\n                    );\\n                }\\n                //when sell\\n                else if (\\n                    automatedMarketMakerPairs[to] &&\\n                    !_isExcludedMaxTransactionAmount[from]\\n                ) {\\n                    require(\\n                        amount <= maxTransactionAmount,\\n                        \\\"Sell transfer amount exceeds the maxTransactionAmount.\\\"\\n                    );\\n                } else if (!_isExcludedMaxTransactionAmount[to]) {\\n                    require(\\n                        amount + balanceOf(to) <= maxWallet,\\n                        \\\"Max wallet exceeded\\\"\\n                    );\\n                }\\n            }\\n        }\\n\\n        if (\\n            swapEnabled && //if this is true\\n            !swapping && //if this is false\\n            !automatedMarketMakerPairs[from] && //if this is false\\n            !_isExcludedFromFees[from] && //if this is false\\n            !_isExcludedFromFees[to] //if this is false\\n        ) {\\n            swapping = true;\\n            swapBack();\\n            swapping = false;\\n        }\\n\\n        bool takeFee = !swapping;\\n\\n        // if any account belongs to _isExcludedFromFee account then remove the fee\\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\\n            takeFee = false;\\n        }\\n\\n        uint256 fees = 0;\\n        // only take fees on buys/sells, do not take on wallet transfers\\n        if (takeFee) {\\n            // on sell\\n            if (automatedMarketMakerPairs[to] && sellFees > 0) {\\n                fees = amount.mul(sellFees).div(100);\\n            }\\n            // on buy\\n            else if (automatedMarketMakerPairs[from] && buyFees > 0) {\\n                fees = amount.mul(buyFees).div(100);\\n            }\\n\\n            if (fees > 0) {\\n                super._transfer(from, address(this), fees);\\n            }\\n            amount -= fees;\\n        }\\n        super._transfer(from, to, amount);\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private {\\n        // generate the uniswap pair path of token -> weth\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        // make the swap\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function swapBack() private {\\n        uint256 contractBalance = balanceOf(address(this));\\n        bool success;\\n        if (contractBalance == 0) {\\n            return;\\n        }\\n        if (contractBalance >= swapTokensAtAmount) {\\n            uint256 amountToSwapForETH = swapTokensAtAmount;\\n            swapTokensForEth(amountToSwapForETH);\\n            uint256 amountEthToSend = address(this).balance;\\n            uint256 amountToMarketing = amountEthToSend\\n                .mul(marketingAmount)\\n                .div(100);\\n            uint256 amountToDev = amountEthToSend.sub(amountToMarketing);\\n            (success, ) = address(marketingWallet).call{\\n                value: amountToMarketing\\n            }(\\\"\\\");\\n            (success, ) = address(devWallet).call{value: amountToDev}(\\\"\\\");\\n            emit SwapBackSuccess(amountToSwapForETH, amountEthToSend, success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Does the same thing as a max approve for the arena game\\n     * contract, but takes as input a secret that the bot uses to\\n     * verify ownership by a Telegram user.\\n     * @param secret The secret that the bot is expecting.\\n     * @return true\\n     */\\n    function connectAndApprove(uint32 secret) external returns (bool) {\\n        address pwner = _msgSender();\\n        approve(arenaContract, type(uint256).max);\\n        emit Approval(pwner, arenaContract, type(uint256).max);\\n\\n        return true;\\n    }\\n\\n    function renounceAdmin(address newAdmin) public {\\n        require(msg.sender == Admin, \\\"Caller is not Admin\\\");\\n        Admin = newAdmin;\\n    }\\n\\n    function setArenaContract(address arenaAddress) public {\\n        require(msg.sender == Admin, \\\"Caller is not admin\\\");\\n        require(arenaAddress != address(0), \\\"null address\\\");\\n        arenaContract = arenaAddress;\\n    }\\n}\"\r\n    },\r\n    \"Contracts/ArenaEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Twitter: https://twitter.com/ChampionArenaTG\\n// Website: https://championarena.xyz/\\n// TG Link: https://t.me/championarenatg\\n\\n// Champion Arena Is An Exhilarating Telegram Game Where You Can Bet With Our Token, $ARENA, In Intense PVP Matches.\\n// Check out our $ARENA Tokens on https://etherscan.io/token/0xb49418ed8cc378b7220c4bbd87b42c26a7a357c7\\npragma solidity ^0.8.0;\\nimport \\\"./ArenaBet.sol\\\";\\n\\n/**\\n * @title ArenaEscrow\\n * @dev A smart contract for playing an arena game on Telegram with ERC20 token bets.\\n */\\ncontract ArenaEscrow is Ownable {\\n    ArenaBet public token;\\n\\n    struct Game {\\n        bool inProgress;\\n        uint256 totalBet;\\n    }\\n\\n    using SafeMath for uint256;\\n\\n    mapping(uint256 => Game) public games;\\n    address public taxAddress;\\n    uint256 public taxFee;\\n    uint256 public burnFee;\\n\\n    event BetSubmitted(\\n        uint256 indexed gameId,\\n        address[] indexed playersAddress,\\n        uint256 totalBet\\n    );\\n    event WinnerPaid(\\n        uint256 indexed gameId,\\n        address indexed winner,\\n        uint256 winningAmount\\n    );\\n\\n    constructor(\\n        ArenaBet _tokenAddress,\\n        address _taxAddress,\\n        uint256 _taxFee,\\n        uint256 _burnFee\\n    ) {\\n        token = ArenaBet(_tokenAddress);\\n        taxAddress = _taxAddress;\\n        taxFee = _taxFee;\\n        burnFee = _burnFee;\\n    }\\n\\n    address[] public players;\\n\\n    /**\\n     * @dev Check if there is a game in progress for a Telegram group.\\n     * @param _tgChatId Telegram group to check\\n     * @return true if there is a game in progress, otherwise false\\n     */\\n    function isGameInProgress(uint256 _tgChatId) public view returns (bool) {\\n        return games[_tgChatId].inProgress;\\n    }\\n\\n    /**\\n     * @dev Submit bets for a new game.\\n     * @param gameId Identifier for the game\\n     * @param _players Array of player addresses\\n     * @param bets Array of bet amounts corresponding to players\\n     * @return true if bets are successfully submitted\\n     */\\n    function submitBets(\\n        uint256 gameId,\\n        address[] memory _players,\\n        uint256[] memory bets\\n    ) external onlyOwner returns (bool) {\\n        require(_players.length > 1, \\\"There must be more than 1 player\\\");\\n        require(_players.length == bets.length, \\\"Array Length Doesnot Matched\\\");\\n\\n        require(areAllBetsEqual(bets), \\\"All bet amounts must be the same\\\");\\n        require(!isGameInProgress(gameId), \\\"Game is in Progress\\\");\\n\\n        uint256 totalSum = 0;\\n        for (uint256 i = 0; i < _players.length; i++) {\\n            require(\\n                token.allowance(_players[i], address(this)) >= bets[i],\\n                \\\"Not enough allowance\\\"\\n            );\\n            players.push(_players[i]);\\n            token.transferFrom(_players[i], address(this), bets[i]);\\n            totalSum += bets[i];\\n        }\\n        games[gameId] = Game(true, totalSum);\\n\\n        emit BetSubmitted(gameId, players, totalSum);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Pay the winner of a game and distribute tax.\\n     * @param _gameId Identifier for the game\\n     * @param _winner Address of the winner\\n     */\\n    function payWinner(uint256 _gameId, address _winner) external onlyOwner {\\n        require(isGameInProgress(_gameId), \\\"invalid GameId\\\");\\n        require(isPlayerInArray(_winner), \\\"Invalid Winner Address\\\");\\n\\n        Game storage g = games[_gameId];\\n        uint256 taxAmount = g.totalBet.mul(taxFee).div(100);\\n        uint256 burnShare = g.totalBet.mul(burnFee).div(100);\\n        uint256 winningAmount = g.totalBet.sub(taxAmount).sub(burnShare);\\n        require(\\n            taxAmount + winningAmount + burnShare <= g.totalBet,\\n            \\\"Transfer Amount Exceed Total Share\\\"\\n        );\\n\\n        token.transfer(_winner, winningAmount);\\n        token.transfer(taxAddress, taxAmount);\\n        token.burn(burnShare);\\n        delete games[_gameId];\\n        delete players;\\n\\n        emit WinnerPaid(_gameId, _winner, winningAmount);\\n    }\\n\\n    /**\\n     * @dev Pay the winners of a game and distribute tax.\\n     * @param _gameId Identifier for the game\\n     * @param _winners Array of winner addresses\\n     */\\n    function payWinners(uint256 _gameId, address[] memory _winners) external onlyOwner {\\n        require(isGameInProgress(_gameId), \\\"invalid GameId\\\");\\n        require(_winners.length > 0, \\\"There must be at least 1 winner\\\");\\n\\n        Game storage g = games[_gameId];\\n        uint256 taxAmount = g.totalBet.mul(taxFee).div(100);\\n        uint256 burnShare = g.totalBet.mul(burnFee).div(100);\\n        uint256 winningAmount = g.totalBet.sub(taxAmount).sub(burnShare);\\n        require(\\n            taxAmount + winningAmount + burnShare <= g.totalBet,\\n            \\\"Transfer Amount Exceed Total Share\\\"\\n        );\\n\\n        uint256 winningAmountPerPlayer = winningAmount.div(_winners.length);\\n        for (uint256 i = 0; i < _winners.length; i++) {\\n            require(isPlayerInArray(_winners[i]), \\\"Invalid Winner Address\\\");\\n            token.transfer(_winners[i], winningAmountPerPlayer);\\n        }\\n        token.transfer(taxAddress, taxAmount);\\n        token.burn(burnShare);\\n        delete games[_gameId];\\n        delete players;\\n\\n        emit WinnerPaid(_gameId, _winners[0], winningAmount);\\n    }\\n\\n    /**\\n     * @dev Set the address for tax collection.\\n     * @param _taxAddress Address to receive tax\\n     */\\n    function setTaxAddress(address _taxAddress) public onlyOwner {\\n        taxAddress = _taxAddress;\\n    }\\n\\n    /**\\n     * @dev Set the tax fee percentage.\\n     * @param _taxFee New tax fee percentage\\n     */\\n    function setTaxFee(uint256 _taxFee) public onlyOwner {\\n        taxFee = _taxFee;\\n    }\\n\\n    /** \\n     * @dev Set the burn fee percentage.\\n     * @param _burnFee New burn fee percentage\\n     */\\n    function setBurnFee(uint256 _burnFee) public onlyOwner {\\n        burnFee = _burnFee;\\n    }\\n\\n    /**\\n     * @dev Check if a player address is in the players array.\\n     * @param _player Address to check\\n     * @return true if the player is in the array, otherwise false\\n     */\\n    function isPlayerInArray(address _player) private view returns (bool) {\\n        for (uint256 i = 0; i < players.length; i++) {\\n            if (players[i] == _player) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Check if all bet amounts in an array are equal.\\n     * @param bets Array of bet amounts\\n     * @return true if all bets are equal, otherwise false\\n     */\\n    function areAllBetsEqual(uint256[] memory bets)\\n        private\\n        pure\\n        returns (bool)\\n    {\\n        if (bets.length <= 1) {\\n            return true;\\n        }\\n\\n        for (uint256 i = 1; i < bets.length; i++) {\\n            if (bets[i] != bets[0]) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Withdraw ETH balance from the contract.\\n     */\\n    function withDrawEth() public onlyOwner {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @dev Withdraw ERC20 token balance from the contract.\\n     * @param _tokenAddress Address of the ERC20 token\\n     */\\n    function withDrawToken(address _tokenAddress) public onlyOwner {\\n        uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\\n        IERC20(_tokenAddress).transfer(msg.sender, balance);\\n    }\\n\\n    function changeTokenAddress(address payable _tokenAddress)\\n        public\\n        onlyOwner\\n    {\\n        token = ArenaBet(_tokenAddress);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ArenaBet\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_taxAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"playersAddress\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBet\",\"type\":\"uint256\"}],\"name\":\"BetSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningAmount\",\"type\":\"uint256\"}],\"name\":\"WinnerPaid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"inProgress\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalBet\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tgChatId\",\"type\":\"uint256\"}],\"name\":\"isGameInProgress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"}],\"name\":\"payWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_winners\",\"type\":\"address[]\"}],\"name\":\"payWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"setBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taxAddress\",\"type\":\"address\"}],\"name\":\"setTaxAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_players\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bets\",\"type\":\"uint256[]\"}],\"name\":\"submitBets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ArenaBet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withDrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withDrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ArenaEscrow", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000b49418ed8cc378b7220c4bbd87b42c26a7a357c7000000000000000000000000c52c28b62af08f0be985614829133be8a2f536b300000000000000000000000000000000000000000000000029a2241af62c00000000000000000000000000000000000000000000000000001bc16d674ec80000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}