{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                typeHash,\\n                name,\\n                version,\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n        } else if (signature.length == 64) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let vs := mload(add(signature, 0x40))\\n                r := mload(add(signature, 0x20))\\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n                v := add(shr(255, vs), 27)\\n            }\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n    function approve(address guy, uint wad) external returns (bool);\\n\\n}\"\r\n    },\r\n    \"contracts/common/oneInch/IOneInchSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOneInchSwap {  \\n    struct SwapDescription {\\n        IERC20 srcToken;\\n        IERC20 dstToken;\\n        address payable srcReceiver;\\n        address payable dstReceiver;\\n        uint256 amount;\\n        uint256 minReturnAmount;\\n        uint256 flags;\\n    }\\n\\n    struct OrderRFQ {\\n        uint256 info;  // lowest 64 bits is the order id, next 64 bits is the expiration timestamp\\n        address makerAsset; // targetToken\\n        address takerAsset; // foundryToken\\n        address maker;\\n        address allowedSender;  // equals to Zero address on public orders\\n        uint256 makingAmount;\\n        uint256 takingAmount; // destinationAmountIn / foundryTokenAmountIn\\n    }\\n\\n    struct Order {\\n        uint256 salt;\\n        address makerAsset; // targetToken\\n        address takerAsset; // foundryToken\\n        address maker;\\n        address receiver;   \\n        address allowedSender;  // equals to Zero address on public orders\\n        uint256 makingAmount;\\n        uint256 takingAmount; \\n        uint256 offsets;\\n        bytes interactions; // concat(makerAssetData, takerAssetData, getMakingAmount, getTakingAmount, predicate, permit, preIntercation, postInteraction)\\n    }\\n\\n    // Define external functions that will be available for interaction\\n   \\n    // fillOrderRFQTo \\n    function fillOrderRFQTo(\\n        OrderRFQ calldata order,\\n        bytes calldata signature,\\n        uint256 flagsAndAmount,\\n        address target // receiverAddress\\n    ) external payable returns (uint256 filledMakingAmount, uint256 filledTakingAmount, bytes32 orderHash);\\n\\n    // fillOrderTo function\\n    function fillOrderTo(\\n        Order calldata order_,\\n        bytes calldata signature,\\n        bytes calldata interaction,\\n        uint256 makingAmount,\\n        uint256 takingAmount,  // destinationAmountIn\\n        uint256 skipPermitAndThresholdAmount,\\n        address target  // receiverAddress\\n    ) external payable returns(uint256 actualMakingAmount, uint256 actualTakingAmount, bytes32 orderHash);\\n    \\n    // uniswapV3SwapTo function\\n    function uniswapV3SwapTo(\\n        address payable recipient,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] calldata pools\\n    ) external payable returns(uint256 returnAmount);\\n\\n    // unoswapTo function\\n    function unoswapTo(\\n        address payable recipient,\\n        address srcToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] calldata pools\\n    ) external payable returns(uint256 returnAmount);\\n\\n    // swap function\\n    function swap(\\n        address executor,\\n        SwapDescription calldata desc,\\n        bytes calldata permit,\\n        bytes calldata data\\n    ) external payable returns (uint256 returnAmount, uint256 spentAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/common/oneInch/OneInchDecoder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nlibrary OneInchDecoder {\\n    struct SwapDescription {\\n        address srcToken;\\n        address dstToken;\\n        address payable srcReceiver;\\n        address payable dstReceiver;\\n        uint256 amount;\\n        uint256 minReturnAmount;\\n        uint256 flags;\\n    }\\n    struct Order {\\n        uint256 salt;\\n        address makerAsset; // targetToken\\n        address takerAsset; // foundryToken\\n        address maker;\\n        address receiver;   \\n        address allowedSender;  // equals to Zero address on public orders\\n        uint256 makingAmount;\\n        uint256 takingAmount;  // destinationAmountIn\\n        uint256 offsets;\\n        bytes interactions; // concat(makerAssetData, takerAssetData, getMakingAmount, getTakingAmount, predicate, permit, preIntercation, postInteraction)\\n    }\\n    struct OrderRFQ {\\n        uint256 info;  // lowest 64 bits is the order id, next 64 bits is the expiration timestamp\\n        address makerAsset; // targetToken\\n        address takerAsset; // foundryToken\\n        address maker;\\n        address allowedSender;  // equals to Zero address on public orders\\n        uint256 makingAmount;\\n        uint256 takingAmount;\\n    }\\n\\n    // Define the function signatures\\n    bytes4 public constant selectorUnoswap =\\n        bytes4(\\n            keccak256(\\\"unoswapTo(address,address,uint256,uint256,uint256[])\\\")\\n        );\\n    bytes4 public constant selectorUniswapV3Swap =\\n        bytes4(keccak256(\\\"uniswapV3SwapTo(address,uint256,uint256,uint256[])\\\"));\\n    bytes4 public constant selectorSwap =\\n        bytes4(\\n            keccak256(\\n                \\\"swap(address,(address,address,address,address,uint256,uint256,uint256),bytes,bytes)\\\"\\n            )\\n        );\\n    bytes4 public constant selectorFillOrderTo =\\n        bytes4(\\n            keccak256(\\n                \\\"fillOrderTo((uint256,address,address,address,address,address,uint256,uint256,uint256,bytes),bytes,bytes,uint256,uint256,uint256,address)\\\"\\n            )\\n        );\\n    bytes4 public constant selectorFillOrderRFQTo =\\n        bytes4(\\n            keccak256(\\n                \\\"fillOrderRFQTo((uint256,address,address,address,address,uint256,uint256),bytes,uint256,address)\\\"\\n            )\\n        );\\n        \\n    function decodeUnoswap(bytes memory data)\\n        public\\n        pure\\n        returns (\\n            address payable recipient,\\n            address srcToken,\\n            uint256 amount,\\n            uint256 minReturn,\\n            uint256[] memory pools\\n        )\\n    {\\n        require(data.length >= 4, \\\"Data too short\\\");\\n\\n        // Skip the first 4 bytes (function signature)\\n        bytes memory params = slice(data, 4, data.length - 4);\\n\\n        // Decode the parameters\\n        (recipient, srcToken, amount, minReturn, pools) = abi.decode(\\n            params,\\n            (address, address, uint256, uint256, uint256[])\\n        );\\n    }\\n\\n    function decodeUniswapV3Swap(bytes memory data)\\n        public\\n        pure\\n        returns (\\n            address payable recipient,\\n            uint256 amount,\\n            uint256 minReturn,\\n            uint256[] memory pools\\n        )\\n    {\\n        require(data.length >= 4, \\\"Data too short\\\");\\n\\n        // Skip the first 4 bytes (function signature)\\n        bytes memory params = slice(data, 4, data.length - 4);\\n\\n        // Decode the parameters\\n        (recipient, amount, minReturn, pools) = abi.decode(\\n            params,\\n            (address, uint256, uint256, uint256[])\\n        );\\n    }\\n\\n   function decodeSwap(bytes memory data)\\n        public\\n        pure\\n        returns (\\n            address executor,\\n            SwapDescription memory desc,\\n            bytes memory permit,\\n            bytes memory swapData\\n        )\\n    {\\n        require(data.length >= 4, \\\"Data too short\\\");\\n\\n        // Skip the first 4 bytes (function signature)\\n        bytes memory params = slice(data, 4, data.length - 4);\\n\\n        // Decode the parameters\\n        (executor, desc, permit, swapData) = abi.decode(\\n            params,\\n            (address, SwapDescription, bytes, bytes)\\n        );\\n    }\\n\\n    function decodeSwap2(bytes memory data)\\n        public\\n        pure\\n        returns (\\n            address payable recipient,\\n            uint256 amount,\\n            uint256 minReturn\\n        )\\n    {\\n        require(data.length >= 4, \\\"Data too short\\\");\\n\\n        // Decode the parameters, skipping the first 4 bytes\\n        (, SwapDescription memory desc, , ) = decodeSwap(data);\\n\\n        // Return only the values of the SwapDescription\\n        return (desc.dstReceiver, desc.amount, desc.minReturnAmount);\\n    }\\n\\n    function decodeFillOrderTo(bytes memory data)\\n        public\\n        pure\\n        returns (\\n            Order memory order_,\\n            bytes memory signature,\\n            bytes memory interaction,\\n            uint256 makingAmount,\\n            uint256 takingAmount,  // destinationAmountIn\\n            uint256 skipPermitAndThresholdAmount,\\n            address target  // receiverAddress\\n        )\\n    {\\n        require(data.length >= 4, \\\"Data too short\\\");\\n\\n        // Skip the first 4 bytes (function signature)\\n        bytes memory params = slice(data, 4, data.length - 4);\\n\\n        // Decode the parameters\\n        (order_, signature, interaction, makingAmount, takingAmount, skipPermitAndThresholdAmount, target) = abi.decode(\\n            params,\\n            (Order, bytes, bytes, uint256, uint256,uint256, address)\\n        );\\n    }\\n\\n    function decodeFillOrderRFQTo(bytes memory data)\\n        public\\n        pure\\n        returns (\\n            OrderRFQ memory order,\\n            bytes memory signature,\\n            uint256 flagsAndAmount,\\n            address target // receiverAddress\\n        )\\n    {\\n        require(data.length >= 4, \\\"Data too short\\\");\\n\\n        // Skip the first 4 bytes (function signature)\\n        bytes memory params = slice(data, 4, data.length - 4);\\n\\n        // Decode the parameters\\n        (order, signature, flagsAndAmount, target) = abi.decode(\\n            params,\\n            (OrderRFQ, bytes, uint256, address)\\n        );\\n    }\\n\\n    // Helper function to slice bytes array\\n    function slice(\\n        bytes memory data,\\n        uint256 start,\\n        uint256 length\\n    ) internal pure returns (bytes memory) {\\n        bytes memory part = new bytes(length);\\n        for (uint256 i = 0; i < length; i++) {\\n            part[i] = data[i + start];\\n        }\\n        return part;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/SafeAmount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n// import \\\"@openzeppelin//contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary SafeAmount {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     @notice transfer tokens from. Incorporate fee on transfer tokens\\n     @param token The token\\n     @param from From address\\n     @param to To address\\n     @param amount The amount\\n     @return result The actual amount transferred\\n     */\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount) internal returns (uint256 result) {\\n        uint256 preBalance = IERC20(token).balanceOf(to);\\n        IERC20(token).safeTransferFrom(from, to, amount);\\n        uint256 postBalance = IERC20(token).balanceOf(to);\\n        result = postBalance - preBalance;\\n        require(result <= amount, \\\"SA: actual amount larger than transfer amount\\\");\\n    }\\n\\n    /**\\n     @notice Sends ETH\\n     @param to The to address\\n     @param value The amount\\n     */\\n\\tfunction safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\"\r\n    },\r\n    \"contracts/common/signature/SigCheckable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n @dev Make sure to define method signatures\\n */\\nabstract contract SigCheckable is EIP712 {\\n\\n    function signerUnique(\\n        bytes32 message,\\n        bytes memory signature) internal view returns (address _signer) {\\n        bytes32 digest;\\n        (digest, _signer) = signer(message, signature);\\n    }\\n\\n    /*\\n        @dev example message;\\n\\n        bytes32 constant METHOD_SIG =\\n            keccak256(\\\"WithdrawSigned(address token,address payee,uint256 amount,bytes32 salt)\\\");\\n        bytes32 message = keccak256(abi.encode(\\n          METHOD_SIG,\\n          token,\\n          payee,\\n          amount,\\n          salt\\n    */\\n    function signer(\\n        bytes32 message,\\n        bytes memory signature) internal view returns (bytes32 digest, address _signer) {\\n        digest = _hashTypedDataV4(message);\\n        _signer = ECDSA.recover(digest, signature);\\n    }\\n}\"\r\n    },\r\n    \"contracts/common/tokenReceiveable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @notice Library for handling safe token transactions including fee per transaction tokens.\\n */\\nabstract contract TokenReceivable is ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n  mapping(address => uint256) public inventory; // Amount of received tokens that are accounted for\\n\\n  /**\\n   @notice Sync the inventory of a token based on amount changed\\n   @param token The token address\\n   @return amount The changed amount\\n   */\\n  function sync(address token) internal nonReentrant returns (uint256 amount) {\\n    uint256 inv = inventory[token];\\n    uint256 balance = IERC20(token).balanceOf(address(this));\\n    amount = balance - inv;\\n    inventory[token] = balance;\\n  }\\n\\n  /**\\n   @notice Safely sends a token out and updates the inventory\\n   @param token The token address\\n   @param payee The payee\\n   @param amount The amount\\n   */\\n  function sendToken(address token, address payee, uint256 amount) internal nonReentrant {\\n    inventory[token] = inventory[token] - amount;\\n    IERC20(token).safeTransfer(payee, amount);\\n  }\\n}\"\r\n    },\r\n    \"contracts/common/WithAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract WithAdmin is Ownable {\\n\\taddress public admin;\\n\\tevent AdminSet(address admin);\\n\\n\\tfunction setAdmin(address _admin) external onlyOwner {\\n\\t\\tadmin = _admin;\\n\\t\\temit AdminSet(_admin);\\n\\t}\\n\\n\\tmodifier onlyAdmin() {\\n\\t\\trequire(msg.sender == admin || msg.sender == owner(), \\\"WA: not admin\\\");\\n\\t\\t_;\\n\\t}\\n}\"\r\n    },\r\n    \"contracts/multiswap-contracts/FiberRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n pragma solidity 0.8.2;\\n\\nimport \\\"./FundManager.sol\\\";\\nimport \\\"../common/tokenReceiveable.sol\\\";\\nimport \\\"../common/SafeAmount.sol\\\";\\nimport \\\"../common/oneInch/OneInchDecoder.sol\\\";\\nimport \\\"../common/oneInch/IOneInchSwap.sol\\\";\\nimport \\\"../common/IWETH.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n @author The ferrum network.\\n @title This is a routing contract named as FiberRouter.\\n*/\\ncontract FiberRouter is Ownable, TokenReceivable {\\n    using SafeERC20 for IERC20;\\n    address public pool;\\n    address payable public gasWallet;\\n    address public oneInchAggregatorRouter;\\n    address public WETH;\\n\\n    event Swap(\\n        address sourceToken,\\n        address targetToken,\\n        uint256 sourceChainId,\\n        uint256 targetChainId,\\n        uint256 sourceAmount,\\n        address sourceAddress,\\n        address targetAddress,\\n        uint256 settledAmount,\\n        bytes32 withdrawalData,\\n        uint256 gasAmount\\n    );\\n\\n    event Withdraw(\\n        address token,\\n        address receiver,\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes signature\\n    );\\n\\n    event WithdrawOneInch(\\n        address to,\\n        uint256 amountIn,\\n        uint256 amountOutOneInch,\\n        address foundryToken,\\n        address targetToken,\\n        bytes oneInchData,\\n        bytes32 salt,\\n        bytes multiSignature\\n    );\\n\\n    event NonEvmSwap(\\n        address sourceToken,\\n        string targetToken,\\n        uint256 sourceChainId,\\n        string targetChainId,\\n        uint256 sourceAmount,\\n        address sourceAddress,\\n        string targetAddress,\\n        uint256 settledAmount,\\n        bytes32 withdrawalData\\n    );\\n    event UnoSwapHandled(\\n        address indexed swapRouter,\\n        address indexed to,\\n        address indexed fromToken,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n    event UniswapV3SwapHandled(\\n        address indexed swapRouter,\\n        address indexed to,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n    event SwapHandled(\\n        address indexed swapRouter,\\n        address indexed to,\\n        address indexed fromToken,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n   /**\\n     * @dev Constructor that sets the WETH address, oneInchAggregator address, and the pool address.\\n     */\\n    constructor(address _weth, address _oneInchAggregatorRouter, address _pool) {\\n        require(_weth != address(0), \\\"WETH address cannot be the zero address\\\");\\n        require(\\n            _oneInchAggregatorRouter != address(0),\\n            \\\"oneInchAggregator address cannot be the zero address\\\"\\n        );\\n        require(_pool != address(0), \\\"Pool address cannot be the zero address\\\");\\n        WETH = _weth;\\n        oneInchAggregatorRouter = _oneInchAggregatorRouter;\\n        pool = _pool;\\n    }\\n\\n    /**\\n     @dev Sets the fund manager contract.\\n     @param _pool The fund manager\\n     */\\n    function setPool(address _pool) external onlyOwner {\\n        require(\\n            _pool != address(0),\\n            \\\"Swap pool address cannot be zero\\\"\\n        );\\n        pool = _pool;\\n    }\\n\\n    /**\\n     @dev Sets the gas wallet address.\\n     @param _gasWallet The wallet which pays for the funds on withdrawal\\n     */\\n    function setGasWallet(address payable _gasWallet) external onlyOwner {\\n        require(\\n            _gasWallet != address(0),\\n            \\\"Gas Wallet address cannot be zero\\\"\\n        );\\n        gasWallet = _gasWallet;\\n    }\\n\\n    /**\\n     @dev Sets the 1inch Aggregator Router address\\n     @param _newRouterAddress The new Router Address of oneInch\\n     */\\n    function setOneInchAggregatorRouter(address _newRouterAddress)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _newRouterAddress != address(0),\\n            \\\"Swap router address cannot be zero\\\"\\n        );\\n        oneInchAggregatorRouter = _newRouterAddress;\\n    }\\n\\n    /**\\n     * @dev Initiate an x-chain swap.\\n     * @param token The token to be swapped\\n     * @param amount The amount to be swapped\\n     * @param targetNetwork The target network for the swap\\n     * @param targetToken The target token for the swap\\n     * @param targetAddress The target address for the swap\\n     * @param withdrawalData Data related to the withdrawal\\n     */\\n    function swap(\\n        address token,\\n        uint256 amount,\\n        uint256 targetNetwork,\\n        address targetToken,\\n        address targetAddress,\\n        bytes32 withdrawalData\\n    ) external payable nonReentrant {\\n        // Validation checks\\n        require(token != address(0), \\\"FR: Token address cannot be zero\\\");\\n        require(targetToken != address(0), \\\"FR: Target token address cannot be zero\\\");\\n        require(targetNetwork != 0, \\\"FR: targetNetwork is required\\\");\\n        require(targetAddress != address(0), \\\"FR: Target address cannot be zero\\\");\\n        require(amount != 0, \\\"FR: Amount must be greater than zero\\\");\\n        require(withdrawalData != 0, \\\"FR: withdraw data cannot be empty\\\");\\n        require(msg.value != 0, \\\"FR: Gas Amount must be greater than zero\\\");\\n\\n        // Proceed with the swap logic\\n        amount = SafeAmount.safeTransferFrom(token, _msgSender(), pool, amount);\\n        amount = FundManager(pool).swapToAddress(\\n            token,\\n            amount,\\n            targetNetwork,\\n            targetAddress\\n        );\\n\\n        // Transfer the gas fee to the gasWallet\\n        payable(gasWallet).transfer(msg.value);\\n\\n        // Emit Swap event\\n        emit Swap(\\n            token,\\n            targetToken,\\n            block.chainid,\\n            targetNetwork,\\n            amount,\\n            _msgSender(),\\n            targetAddress,\\n            amount,\\n            withdrawalData,\\n            msg.value\\n        );\\n    }\\n\\n    /**\\n     *@dev Initiate an x-chain swap.\\n     *@param token The source token to be swaped\\n     *@param amount The source amount\\n     *@param targetNetwork The chain ID for the target network\\n     *@param targetToken The target token address\\n     *@param targetAddress Final destination on target\\n     *@param withdrawalData Data related to the withdrawal\\n     */\\n    function nonEvmSwap(\\n        address token,\\n        uint256 amount,\\n        string memory targetNetwork,\\n        string memory targetToken,\\n        string memory targetAddress,\\n        bytes32 withdrawalData\\n    ) external nonReentrant {\\n        // Validation checks\\n        require(token != address(0), \\\"FR: Token address cannot be zero\\\");\\n        require(amount != 0, \\\"Amount must be greater than zero\\\");\\n        require(\\n            bytes(targetNetwork).length != 0,\\n            \\\"FR: Target network cannot be empty\\\"\\n        );\\n        require(\\n            bytes(targetToken).length != 0,\\n            \\\"FR: Target token cannot be empty\\\"\\n        );\\n        require(\\n            bytes(targetAddress).length != 0,\\n            \\\"FR: Target address cannot be empty\\\"\\n        );\\n        require(\\n            withdrawalData != 0,\\n            \\\"FR: withdraw data cannot be empty\\\"\\n        );\\n        amount = SafeAmount.safeTransferFrom(token, _msgSender(), pool, amount);\\n        amount = FundManager(pool).nonEvmSwapToAddress(\\n            token,\\n            amount,\\n            targetNetwork,\\n            targetToken,\\n            targetAddress\\n        );\\n        emit NonEvmSwap(\\n            token,\\n            targetToken,\\n            block.chainid,\\n            targetNetwork,\\n            amount,\\n            _msgSender(),\\n            targetAddress,\\n            amount,\\n            withdrawalData\\n        );\\n    }\\n\\n    /**\\n     * @dev Do a local swap and generate a cross-chain swap\\n     * @param amountIn The input amount\\n     * @param amountOut Equivalent to amountOut on oneInch\\n     * @param crossTargetNetwork The target network for the swap\\n     * @param crossTargetToken The target token for the cross-chain swap\\n     * @param crossTargetAddress The target address for the cross-chain swap\\n     * @param oneInchData The data containing information for the 1inch swap\\n     * @param fromToken The token to be swapped\\n     * @param foundryToken The foundry token used for the swap\\n     * @param withdrawalData Data related to the withdrawal\\n     */\\n    function swapAndCrossOneInch(\\n            uint256 amountIn,\\n            uint256 amountOut, // amountOut on oneInch\\n            uint256 crossTargetNetwork,\\n            address crossTargetToken,\\n            address crossTargetAddress,\\n            bytes memory oneInchData,\\n            address fromToken,\\n            address foundryToken,\\n            bytes32 withdrawalData\\n        ) external payable nonReentrant {\\n            // Validation checks\\n            require(\\n                fromToken != address(0),\\n                \\\"FR: From token address cannot be zero\\\"\\n            );\\n            require(\\n                foundryToken != address(0),\\n                \\\"FR: Foundry token address cannot be zero\\\"\\n            );\\n            require(\\n                crossTargetToken != address(0),\\n                \\\"FR: Cross target token address cannot be zero\\\"\\n            );\\n            require(amountIn != 0, \\\"FR: Amount in must be greater than zero\\\");\\n            require(amountOut != 0, \\\"FR: Amount out must be greater than zero\\\");\\n            require(\\n                bytes(oneInchData).length != 0,\\n                \\\"FR: 1inch data cannot be empty\\\"\\n            );\\n            require(\\n                withdrawalData != 0,\\n                \\\"FR: withdraw data cannot be empty\\\"\\n            );\\n            require(msg.value != 0, \\\"FR: Gas Amount must be greater than zero\\\");\\n            amountIn = SafeAmount.safeTransferFrom(\\n                fromToken,\\n                _msgSender(),\\n                address(this),\\n                amountIn\\n            );\\n            uint256 settledAmount = _swapAndCrossOneInch(\\n                amountIn,\\n                amountOut,\\n                crossTargetNetwork,\\n                crossTargetAddress,\\n                oneInchData,\\n                fromToken,\\n                foundryToken\\n            );\\n            // Transfer the gas fee to the gasWallet\\n            payable(gasWallet).transfer(msg.value);\\n            // Emit Swap event\\n            emit Swap(\\n                fromToken,\\n                crossTargetToken,\\n                block.chainid,\\n                crossTargetNetwork,\\n                amountIn,\\n                _msgSender(),\\n                crossTargetAddress,\\n                settledAmount,\\n                withdrawalData,\\n                msg.value\\n            );\\n        }\\n\\n    /**\\n     * @dev Swap and cross to oneInch in native currency\\n     * @param amountOut Equivalent to amountOut on oneInch\\n     * @param crossTargetNetwork The target network for the swap\\n     * @param crossTargetToken The target token for the cross-chain swap\\n     * @param crossTargetAddress The target address for the cross-chain swap\\n     * @param oneInchData The data containing information for the 1inch swap\\n     * @param foundryToken The foundry token used for the swap\\n     * @param withdrawalData Data related to the withdrawal\\n     * @param gasFee The gas fee being charged on withdrawal\\n     */\\n    function swapAndCrossOneInchETH(\\n        uint256 amountOut, // amountOut on oneInch\\n        uint256 crossTargetNetwork,\\n        address crossTargetToken,\\n        address crossTargetAddress,\\n        bytes memory oneInchData,\\n        address foundryToken,\\n        bytes32 withdrawalData,\\n        uint256 gasFee\\n    ) external payable {\\n        uint256 amountIn = msg.value - gasFee;\\n        // Validation checks\\n        require(amountIn != 0, \\\"FR: Amount in must be greater than zero\\\");\\n        require(gasFee != 0, \\\"FR: Gas fee must be greater than zero\\\");\\n        require(msg.value == amountIn + gasFee, \\\"FR: msg.value must equal amountIn plus gasFee\\\");\\n        require(amountOut != 0, \\\"FR: Amount out must be greater than zero\\\");\\n        require(crossTargetToken != address(0), \\\"FR: Cross target token address cannot be zero\\\");\\n        require(bytes(oneInchData).length != 0, \\\"FR: 1inch data cannot be empty\\\");\\n        require(foundryToken != address(0), \\\"FR: Foundry token address cannot be zero\\\");\\n        require(withdrawalData != 0, \\\"FR: Withdraw data cannot be empty\\\");\\n        require(msg.value != 0, \\\"FR: Gas Amount must be greater than zero\\\");\\n        // Deposit ETH (excluding gas fee) and get WETH\\n        IWETH(WETH).deposit{value: amountIn}();\\n        // Execute swap and cross-chain operation\\n        uint256 settledAmount = _swapAndCrossOneInch(\\n            amountIn,\\n            amountOut,\\n            crossTargetNetwork,\\n            crossTargetAddress,\\n            oneInchData,\\n            WETH,\\n            foundryToken\\n        );\\n        // Transfer the gas fee to the gasWallet\\n        payable(gasWallet).transfer(gasFee);\\n        // Emit Swap event\\n        emit Swap(\\n            WETH,\\n            crossTargetToken,\\n            block.chainid,\\n            crossTargetNetwork,\\n            amountIn,\\n            _msgSender(),\\n            crossTargetAddress,\\n            settledAmount,\\n            withdrawalData,\\n            gasFee\\n        );\\n    }\\n\\n\\n    /**\\n     * @dev Initiates a signed token withdrawal, exclusive to the router.\\n     * @notice Ensure valid parameters and router setup.\\n     * @param token The token to withdraw\\n     * @param payee Address for where to send the tokens to\\n     * @param amount The amount\\n     * @param salt The salt for unique tx \\n     * @param expiry The expiration time for the signature\\n     * @param multiSignature The multisig validator signature\\n    */\\n    function withdrawSigned(\\n        address token,\\n        address payee,\\n        uint256 amount,\\n        bytes32 salt,\\n        uint256 expiry,\\n        bytes memory multiSignature\\n    ) public virtual nonReentrant {\\n        // Validation checks\\n        require(token != address(0), \\\"FR: Token address cannot be zero\\\");\\n        require(payee != address(0), \\\"Payee address cannot be zero\\\");\\n        require(amount != 0, \\\"Amount must be greater than zero\\\");\\n        require(salt > bytes32(0), \\\"salt must be greater than zero bytes\\\");\\n        // need to add restrictions\\n        amount = FundManager(pool).withdrawSigned(\\n            token,\\n            payee,\\n            amount,\\n            salt,\\n            expiry,\\n            multiSignature\\n        );\\n        emit Withdraw(token, payee, amount, salt, multiSignature);\\n    }\\n\\n    /**\\n     * @dev Initiates a signed OneInch token withdrawal, exclusive to the router.\\n     * @notice Ensure valid parameters and router setup.\\n     * @param to The address to withdraw to\\n     * @param amountIn The amount to be swapped in\\n     * @param amountOut The expected amount out in the OneInch swap\\n     * @param foundryToken The token used in the Foundry\\n     * @param targetToken The target token for the swap\\n     * @param oneInchData The data containing information for the 1inch swap\\n     * @param salt The salt value for the signature\\n     * @param expiry The expiration time for the signature\\n     * @param multiSignature The multi-signature data\\n     */\\n    function withdrawSignedAndSwapOneInch(\\n        address payable to,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address foundryToken,\\n        address targetToken,\\n        bytes memory oneInchData,\\n        bytes32 salt,\\n        uint256 expiry,\\n        bytes memory multiSignature\\n    ) public virtual nonReentrant {\\n        require(foundryToken != address(0), \\\"Bad Token Address\\\");\\n        require(\\n            targetToken != address(0),\\n            \\\"FR: Target token address cannot be zero\\\"\\n        );\\n        require(amountIn != 0, \\\"Amount in must be greater than zero\\\");\\n        require(amountOut != 0, \\\"Amount out minimum must be greater than zero\\\");\\n        require(foundryToken != address(0), \\\"Bad Token Address\\\");\\n        FundManager(pool).withdrawSignedOneInch(\\n            to,\\n            amountIn,\\n            amountOut,\\n            foundryToken,\\n            targetToken,\\n            oneInchData,\\n            salt,\\n            expiry,\\n            multiSignature\\n        );\\n        amountIn = IERC20(foundryToken).balanceOf(address(this));\\n        // Check if allowance is non-zero\\n        if (IERC20(foundryToken).allowance(address(this), oneInchAggregatorRouter) != 0) {\\n            // We reset it to zero\\n            IERC20(foundryToken).safeApprove(oneInchAggregatorRouter, 0);\\n        }\\n        // Set the allowance to the swap amount\\n        IERC20(foundryToken).safeApprove(oneInchAggregatorRouter, amountIn);\\n        uint256 amountOutOneInch = swapHelperForOneInch(\\n            to,\\n            foundryToken,\\n            amountIn,\\n            amountOut,\\n            oneInchData\\n        );\\n        require(amountOutOneInch != 0, \\\"FR: Bad amount out from oneInch\\\");\\n        emit WithdrawOneInch(\\n            to,\\n            amountIn,\\n            amountOutOneInch,\\n            foundryToken,\\n            targetToken,\\n            oneInchData,\\n            salt,\\n            multiSignature\\n        );\\n    }\\n\\n    /**\\n     * @dev Helper function for executing token swaps using OneInch aggregator\\n     * @param to The recipient address to receive the swapped tokens\\n     * @param srcToken The source token to be swapped (input token)\\n     * @param amountIn The amount of input tokens to be swapped\\n     * @param amountOut The expected amount of output tokens after the swap\\n     * @param oneInchData The data containing information for the 1inch swap\\n     * @return returnAmount The amount of tokens received after the swap and transaction execution\\n     */\\n    function swapHelperForOneInch(\\n        address payable to,\\n        address srcToken,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        bytes memory oneInchData\\n    ) internal returns (uint256 returnAmount) {\\n        // Extract the first 4 bytes from data\\n        bytes4 receivedSelector;\\n        assembly {\\n            // Extract the first 4 bytes directly from the data\\n            // Assuming 'data' starts with the 4-byte function selector\\n            receivedSelector := mload(add(oneInchData, 32))\\n        }\\n        // checking the function signature accoridng to oneInchData\\n        if (receivedSelector == OneInchDecoder.selectorUnoswap) {\\n            returnAmount = handleUnoSwap(to, srcToken, amountIn, amountOut, oneInchData);\\n        } else if (receivedSelector == OneInchDecoder.selectorUniswapV3Swap) {\\n            returnAmount = handleUniswapV3Swap(to, amountIn, amountOut, oneInchData);\\n        } else if (receivedSelector == OneInchDecoder.selectorSwap) {\\n            returnAmount = handleSwap(to, srcToken, amountIn, amountOut, oneInchData);\\n        } else if (receivedSelector == OneInchDecoder.selectorFillOrderTo) {\\n            returnAmount = handleFillOrderTo(to, srcToken, amountIn, oneInchData);\\n        } else if (receivedSelector == OneInchDecoder.selectorFillOrderRFQTo) {\\n            returnAmount = handleFillOrderRFQTo(to, srcToken, amountIn, oneInchData);\\n        } else {\\n            revert(\\\"FR: incorrect oneInchData\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Handles the execution of a token swap operation using UnoSwap\\n     * @param to The recipient address to receive the swapped tokens\\n     * @param fromToken The token to be swapped from (input token)\\n     * @param amountIn The amount of input tokens to be swapped\\n     * @param amountOut The expected amount of output tokens after the swap\\n     * @param oneInchData The data containing information for the 1inch swap\\n     * @return returnAmount The amount of tokens received after the swap and transaction execution\\n     */\\n    function handleUnoSwap(\\n        address payable to,\\n        address fromToken,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        bytes memory oneInchData\\n    ) internal returns (uint256 returnAmount) {\\n        (\\n            address payable recipient,\\n            address srcToken,\\n            uint256 amount,\\n            uint256 minReturn,\\n            uint256[] memory poolsOneInch\\n        ) = OneInchDecoder.decodeUnoswap(oneInchData);\\n        require(to == recipient, \\\"FR: recipient address bad oneInch Data\\\");\\n        require(fromToken == srcToken, \\\"FR: srcToken bad oneInch Data\\\");\\n        require(amountIn == amount, \\\"FR: inputAmount bad oneInch Data\\\");\\n        require(amountOut == minReturn, \\\"FR: outAmount bad oneInch Data\\\");\\n        require(oneInchData.length >= 4, \\\"Data too short for valid call\\\");\\n        returnAmount = IOneInchSwap(oneInchAggregatorRouter).unoswapTo(\\n            recipient,\\n            srcToken,\\n            amount,\\n            minReturn,\\n            poolsOneInch\\n        );\\n        emit UnoSwapHandled(\\n            oneInchAggregatorRouter,\\n            to,\\n            fromToken,\\n            amountIn,\\n            returnAmount //should return by the unoSwap\\n        );\\n    }\\n\\n    /**\\n     * @dev Handles the execution of a token swap operation involving 1inch aggregator\\n     * @param to The recipient address to receive the swapped tokens\\n     * @param amountIn The amount of input tokens to be swapped\\n     * @param amountOut The expected amount of output tokens after the swap\\n     * @param oneInchData The data containing information for the 1inch swap\\n     * @return returnAmount The amount of tokens received after the swap and transaction execution\\n     */\\n    function handleUniswapV3Swap(\\n        address payable to,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        bytes memory oneInchData\\n    ) internal returns (uint256 returnAmount) {\\n        (\\n            address payable recipient,\\n            uint256 amount,\\n            uint256 minReturn,\\n            uint256[] memory poolsOneInch\\n        ) = OneInchDecoder.decodeUniswapV3Swap(oneInchData);\\n        require(to == recipient, \\\"FR: recipient address bad oneInch Data\\\");\\n        require(amountIn == amount, \\\"FR: inputAmount bad oneInch Data\\\");\\n        require(amountOut == minReturn, \\\"FR: outAmount bad oneInch Data\\\");\\n        require(oneInchData.length >= 4, \\\"Data too short for valid call\\\");\\n        returnAmount = IOneInchSwap(oneInchAggregatorRouter).uniswapV3SwapTo(\\n            recipient,\\n            amount,\\n            minReturn,\\n            poolsOneInch\\n        );\\n        emit UniswapV3SwapHandled(\\n            oneInchAggregatorRouter,\\n            to,\\n            amountIn,\\n            returnAmount //should be returned by uniswapV3SwapTo\\n        );\\n    }\\n\\n    /**\\n     * @dev Handles the execution of a token swap operation, potentially involving 1inch aggregator\\n     * @param to The recipient address to receive the swapped tokens\\n     * @param fromToken The address of the input token for the swap\\n     * @param amountIn The amount of input tokens to be swapped\\n     * @param amountOut The expected amount of output tokens after the swap\\n     * @param oneInchData The data containing information for the 1inch swap\\n     * @return returnAmount The amount of tokens received after the swap and transaction execution\\n     */\\n    function handleSwap(\\n        address payable to,\\n        address fromToken,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        bytes memory oneInchData\\n    ) internal returns (uint256 returnAmount) {\\n        // Decoding oneInchData to get the required parameters\\n        (\\n            address executor,\\n            OneInchDecoder.SwapDescription memory desc,\\n            bytes memory permit,\\n            bytes memory swapData\\n        ) = OneInchDecoder.decodeSwap(oneInchData);\\n        // Manually create a new SwapDescription for IOneInchSwap\\n        IOneInchSwap.SwapDescription memory oneInchDesc = IOneInchSwap\\n            .SwapDescription({\\n                srcToken: IERC20(desc.srcToken),\\n                dstToken: IERC20(desc.dstToken),\\n                srcReceiver: desc.srcReceiver,\\n                dstReceiver: desc.dstReceiver,\\n                amount: desc.amount,\\n                minReturnAmount: desc.minReturnAmount,\\n                flags: desc.flags\\n            });\\n\\n        // Accessing fields of the desc instance of SwapDescription struct\\n        require(\\n            to == desc.dstReceiver,\\n            \\\"FR: recipient address bad oneInch Data\\\"\\n        );\\n        require(amountIn == desc.amount, \\\"FR: inputAmount bad oneInch Data\\\");\\n        require(\\n            amountOut == desc.minReturnAmount,\\n            \\\"FR: outAmount bad oneInch Data\\\"\\n        );\\n        require(fromToken == desc.srcToken, \\\"FR: srcToken bad oneInch Data\\\");\\n\\n        // Additional safety check\\n        require(oneInchData.length >= 4, \\\"Data too short for valid call\\\");\\n\\n        // Performing the swap\\n        ( returnAmount,) = IOneInchSwap(oneInchAggregatorRouter).swap(\\n            executor,\\n            oneInchDesc,\\n            permit,\\n            swapData\\n        );\\n        emit SwapHandled(\\n            oneInchAggregatorRouter,\\n            to,\\n            fromToken,\\n            amountIn,\\n            returnAmount // should be returned \\n        );\\n    }\\n\\n    /**\\n     * @dev Handles the execution of the `fillOrderTo` operation, involving 1inch aggregator\\n     * @param to The recipient address to receive the swapped tokens\\n     * @param fromToken The address of the input token for the swap (foundryToken or takerAsset)\\n     * @param amountIn The amount of input tokens to be swapped\\n     * @param oneInchData The data containing information for the 1inch swap\\n     * @return returnAmount The amount of tokens received after the swap and transaction execution\\n     */\\n    function handleFillOrderTo(\\n        address payable to,\\n        address fromToken,  // foundryToken // takerAsset\\n        uint256 amountIn,\\n        bytes memory oneInchData\\n    ) internal returns (uint256 returnAmount) {\\n        // Decoding oneInchData to get the required parameters\\n        (\\n            OneInchDecoder.Order memory order_,\\n            bytes memory signature,\\n            bytes memory interaction,\\n            uint256 makingAmount,\\n            uint256 takingAmount,  // destinationAmountIn\\n            uint256 skipPermitAndThresholdAmount,\\n            address target  // receiverAddress\\n        ) = OneInchDecoder.decodeFillOrderTo(oneInchData);\\n\\n        // Manually create a new Order for IOneInchSwap\\n        IOneInchSwap.Order memory oneInchOrder = IOneInchSwap\\n            .Order({\\n                salt: order_.salt,\\n                makerAsset: order_.makerAsset,\\n                takerAsset: order_.takerAsset,\\n                maker: order_.maker,\\n                receiver: order_.receiver,\\n                allowedSender: order_.allowedSender,\\n                makingAmount: order_.makingAmount,\\n                takingAmount: order_.takingAmount,\\n                offsets: order_.offsets,\\n                interactions: order_.interactions\\n            });\\n\\n        // Perform additional checks and validations if needed\\n        require(to == target, \\\"FR: recipient address bad oneInch Data\\\");\\n        require(fromToken == order_.takerAsset, \\\"FR: takerAsset bad oneInch Data\\\");\\n        require(amountIn == takingAmount, \\\"FR: inputAmount bad oneInch Data \\\");\\n        require(oneInchData.length >= 4, \\\"Data too short for valid call\\\");\\n\\n        // Performing the swap\\n        ( returnAmount, , ) = IOneInchSwap(oneInchAggregatorRouter).fillOrderTo(\\n            oneInchOrder,\\n            signature,\\n            interaction,\\n            makingAmount,\\n            takingAmount,\\n            skipPermitAndThresholdAmount,\\n            target\\n        );\\n\\n        emit SwapHandled(\\n            oneInchAggregatorRouter,\\n            to,\\n            fromToken,\\n            amountIn,\\n            returnAmount // should be returned \\n        );\\n    }\\n\\n    /**\\n     * @dev Handles the execution of the `fillOrderRFQTo` operation, involving 1inch aggregator\\n     * @param to The recipient address to receive the swapped tokens\\n     * @param fromToken The address of the input token for the swap (foundryToken or takerAsset)\\n     * @param amountIn The amount of input tokens to be swapped\\n     * @param oneInchData The data containing information for the 1inch swap\\n     * @return returnAmount The amount of tokens received after the swap and transaction execution\\n     */\\n    function handleFillOrderRFQTo(\\n        address payable to,\\n        address fromToken,  // foundryToken // takerAsset\\n        uint256 amountIn,\\n        bytes memory oneInchData\\n    ) internal returns (uint256 returnAmount) {\\n        // Decoding oneInchData to get the required parameters\\n        (\\n            OneInchDecoder.OrderRFQ memory order,\\n            bytes memory signature,\\n            uint256 flagsAndAmount,\\n            address target // receiverAddress\\n        ) = OneInchDecoder.decodeFillOrderRFQTo(oneInchData);\\n\\n        // Manually create a new OrderRFQ for IOneInchSwap\\n        IOneInchSwap.OrderRFQ memory oneInchOrderRFQ = IOneInchSwap.OrderRFQ({\\n            info: order.info,\\n            makerAsset: order.makerAsset,\\n            takerAsset: order.takerAsset,\\n            maker: order.maker,\\n            allowedSender: order.allowedSender,\\n            makingAmount: order.makingAmount,\\n            takingAmount: order.takingAmount\\n        });\\n\\n        // Perform additional checks and validations if needed\\n        require(to == target, \\\"FR: recipient address bad oneInch Data\\\");\\n        require(fromToken == order.takerAsset, \\\"FR: takerAsset bad oneInch Data\\\");\\n        require(amountIn == order.takingAmount, \\\"FR: inputAmount bad oneInch Data \\\");\\n        require(oneInchData.length >= 4, \\\"Data too short for valid call\\\");\\n\\n        // Performing the swap\\n        ( returnAmount, , ) = IOneInchSwap(oneInchAggregatorRouter).fillOrderRFQTo(\\n            oneInchOrderRFQ,\\n            signature,\\n            flagsAndAmount,\\n            target\\n        );\\n\\n        emit SwapHandled(\\n            oneInchAggregatorRouter,\\n            to,\\n            fromToken,\\n            amountIn,\\n            returnAmount // should be returned \\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a token swap and cross-network transaction using the 1inch Aggregator\\n     * @param amountIn The amount of input tokens to be swapped\\n     * @param amountOut The expected amount of output tokens after the swap on 1inch\\n     * @param crossTargetNetwork The network identifier for the cross-network transaction\\n     * @param crossTargetAddress The target address on the specified network for the cross-network transaction\\n     * @param oneInchData The data containing information for the 1inch swap\\n     * @param fromToken The address of the input token for the swap\\n     * @param foundryToken The address of the token used as the foundry\\n     * @return FMAmountOut The amount of foundry tokens received after the cross-network transaction\\n     */\\n    function _swapAndCrossOneInch(\\n        uint256 amountIn,\\n        uint256 amountOut, // amountOut on oneInch\\n        uint256 crossTargetNetwork,\\n        address crossTargetAddress,\\n        bytes memory oneInchData,\\n        address fromToken,\\n        address foundryToken\\n    ) internal returns (uint256 FMAmountOut){\\n        // Check if allowance is non-zero\\n        if (IERC20(fromToken).allowance(address(this), oneInchAggregatorRouter) != 0) {\\n            // Reset the allowance to zero\\n            IERC20(fromToken).safeApprove(oneInchAggregatorRouter, 0);\\n        }\\n        // Set the allowance to the swap amount\\n        IERC20(fromToken).safeApprove(oneInchAggregatorRouter, amountIn);\\n\\n        uint256 oneInchAmountOut = swapHelperForOneInch(\\n            payable(pool),\\n            fromToken,\\n            amountIn,\\n            amountOut,\\n            oneInchData\\n        );\\n        FMAmountOut = FundManager(pool).swapToAddress(\\n            foundryToken,\\n            amountOut,\\n            crossTargetNetwork,\\n            crossTargetAddress\\n        );\\n        require(\\n            FMAmountOut >= oneInchAmountOut,\\n            \\\"FR: Bad FM or OneInch Amount Out\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multiswap-contracts/FundManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../common/signature/SigCheckable.sol\\\";\\nimport \\\"../common/SafeAmount.sol\\\";\\nimport \\\"../common/tokenReceiveable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./LiquidityManagerRole.sol\\\";\\n\\ncontract FundManager is SigCheckable, TokenReceivable, LiquidityManagerRole {\\n    using SafeERC20 for IERC20;\\n\\n    address public router;\\n    address public settlementManager;\\n    uint32 constant WEEK = 3600 * 24 * 7;\\n    string public constant NAME = \\\"FUND_MANAGER\\\";\\n    string public constant VERSION = \\\"000.004\\\";\\n    bytes32 constant WITHDRAW_SIGNED_METHOD =\\n        keccak256(\\n            \\\"WithdrawSigned(address token,address payee,uint256 amount,bytes32 salt,uint256 expiry)\\\"\\n        );\\n    bytes32 constant WITHDRAW_SIGNED_ONEINCH__METHOD =\\n        keccak256(\\n            \\\"WithdrawSignedOneInch(address to,uint256 amountIn,uint256 amountOut,address foundryToken,address targetToken,bytes oneInchData,bytes32 salt,uint256 expiry)\\\"\\n        );\\n\\n    event TransferBySignature(\\n        address signer,\\n        address receiver,\\n        address token,\\n        uint256 amount\\n    );\\n    event FailedWithdrawalCancelled(\\n        address indexed settlementManager,\\n        address indexed receiver,\\n        address indexed token,\\n        uint256 amount,\\n        bytes32 salt\\n    );\\n    event BridgeLiquidityAdded(address actor, address token, uint256 amount);\\n    event BridgeLiquidityRemoved(address actor, address token, uint256 amount);\\n    event BridgeSwap(\\n        address from,\\n        address indexed token,\\n        uint256 targetNetwork,\\n        address targetToken,\\n        address targetAddrdess,\\n        uint256 amount\\n    );\\n    event nonEvmBridgeSwap(\\n        address from,\\n        address indexed token,\\n        string targetNetwork,\\n        string targetToken,\\n        string targetAddrdess,\\n        uint256 amount\\n    );\\n\\n    mapping(address => bool) public signers;\\n    mapping(address => mapping(address => uint256)) private liquidities;\\n    mapping(address => mapping(uint256 => address)) public allowedTargets;\\n    mapping(address => mapping(string => string)) public nonEvmAllowedTargets;\\n    mapping(address => bool) public isFoundryAsset;\\n    mapping(bytes32=>bool) public usedSalt;\\n\\n    /**\\n     * @dev Modifier that allows only the designated router to execute the function.\\n     * It checks if the sender is equal to the `router` address.\\n     * @notice Ensure that `router` is set before using this modifier.\\n     */\\n    modifier onlyRouter() {\\n        require(msg.sender == router, \\\"FM: Only router method\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that allows only the designated settlementManager to execute the function.\\n     * It checks if the sender is equal to the `settlementManager` address.\\n     * @notice Ensure that `settlementManager` is set before using this modifier.\\n     */\\n    modifier onlySettlementManager() {\\n        require(msg.sender == settlementManager, \\\"FM: Only Settlement Manager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract constructor that initializes the EIP-712 domain with the specified NAME, VERSION.\\n     * @notice This constructor is called only once during the deployment of the contract.\\n     */\\n    constructor() EIP712(NAME, VERSION) {\\n\\n    }\\n\\n    /**\\n     *************** Owner only operations ***************\\n     */\\n\\n    /**\\n     * @dev Sets the address of settlement manager\\n     * @param _settlementManager The settlement manager address\\n     */\\n    function setSettlementManager(address _settlementManager) external onlyOwner {\\n        require(_settlementManager != address(0), \\\"FM: Bad settlement manager\\\");\\n\\n        settlementManager = _settlementManager;\\n    }\\n\\n\\n    /**\\n     @dev sets the router\\n     @param _router is the FiberRouter address\\n     */\\n    function setRouter(address _router) external onlyOwner {\\n        require(_router != address(0), \\\"FM: router requried\\\");\\n        router = _router;\\n    }\\n\\n    /**\\n     @dev sets the signer\\n     @param _signer is the address that generate signatures\\n     */\\n    function addSigner(address _signer) public onlyOwner {\\n        require(_signer != address(0), \\\"Bad signer\\\");\\n        signers[_signer] = true;\\n    }\\n\\n    /**\\n     @dev removes the signer\\n     @param _signer is the address that generate signatures\\n     */\\n    function removeSigner(address _signer) external onlyOwner {\\n        require(_signer != address(0), \\\"Bad signer\\\");\\n        delete signers[_signer];\\n    }\\n\\n    /**\\n     @dev sets the allowed target chain & token\\n     @param token is the address of foundry token on source network\\n     @param chainId target network's chain ID\\n     @param targetToken target network's foundry token address\\n     */\\n    function allowTarget(\\n        address token,\\n        uint256 chainId,\\n        address targetToken\\n    ) external onlyAdmin {\\n        require(token != address(0), \\\"Bad token\\\");\\n        require(targetToken != address(0), \\\"Bad targetToken\\\");\\n        require(chainId != 0, \\\"Bad chainId\\\");\\n        allowedTargets[token][chainId] = targetToken;\\n    }\\n\\n    /**\\n     @dev sets the allowed target chain & token on nonEVM chain\\n     @param token is the address of foundry token on source network\\n     @param chainId target non EVM network's chain ID\\n     @param targetToken target non EVM network's foundry token address\\n     */\\n    function nonEvmAllowTarget(\\n        address token,\\n        string memory chainId,\\n        string memory targetToken\\n    ) external onlyAdmin {\\n        require(token != address(0), \\\"Bad token\\\");\\n        require(bytes(chainId).length != 0, \\\"Chain ID cannot be empty\\\");\\n        require(bytes(targetToken).length != 0, \\\"Target token cannot be empty\\\");\\n\\n        nonEvmAllowedTargets[token][chainId] = targetToken;\\n    }\\n\\n    /**\\n     @dev removes the allowed target chain & token\\n     @param token is the address of foundry token on source network\\n     @param chainId target network's chain ID\\n     */\\n    function disallowTarget(address token, uint256 chainId) external onlyAdmin {\\n        require(token != address(0), \\\"Bad token\\\");\\n        require(chainId != 0, \\\"Bad chainId\\\");\\n        delete allowedTargets[token][chainId];\\n    }\\n\\n    /**\\n     @dev removes the allowed target chain & token on nonEVM chain\\n     @param token is the address of foundry token on source network\\n     @param chainId target non EVM network's chain ID\\n     */\\n    function nonEvmDisallowTarget(address token, string memory chainId)\\n        external\\n        onlyAdmin\\n    {\\n        require(token != address(0), \\\"Bad token\\\");\\n        require(bytes(chainId).length != 0, \\\"Chain ID cannot be empty\\\");\\n        delete nonEvmAllowedTargets[token][chainId];\\n    }\\n\\n    /**\\n     @dev sets the foundry token\\n     @param token is the foundry token address\\n     */\\n    function addFoundryAsset(address token) external onlyAdmin {\\n        require(token != address(0), \\\"Bad token\\\");\\n        isFoundryAsset[token] = true;\\n    }\\n\\n    /**\\n     @dev removes the foundry token\\n     @param token is the foundry token address\\n     */\\n    function removeFoundryAsset(address token) external onlyAdmin {\\n        require(token != address(0), \\\"Bad token\\\");\\n        isFoundryAsset[token] = false;\\n    }\\n\\n    /**\\n     * @dev Initiates an EVM token swap, exclusive to the router\\n     * @notice Ensure valid parameters and router setup\\n     * @param token The address of the token to be swapped\\n     * @param amount The amount of tokens to be swapped\\n     * @param targetNetwork The identifier of the target network for the swap\\n     * @param targetAddress The address on the target network where the swapped tokens will be sent\\n     * @return The actual amount of tokens swapped\\n    */\\n    function swapToAddress(\\n        address token,\\n        uint256 amount,\\n        uint256 targetNetwork,\\n        address targetAddress\\n    ) external onlyRouter returns(uint256) {\\n        address targetToken = allowedTargets[token][targetNetwork];\\n        require(msg.sender != address(0), \\\"FM: bad from\\\");\\n        require(token != address(0), \\\"FM: bad token\\\");\\n        require(targetNetwork != 0, \\\"FM: targetNetwork is requried\\\");\\n        require(targetToken != address(0), \\\"FM: bad target token\\\");\\n        require(targetAddress != address(0), \\\"FM: targetAddress is required\\\");\\n        require(amount != 0, \\\"FM: bad amount\\\");\\n        amount = TokenReceivable.sync(token);\\n        emit BridgeSwap(\\n            msg.sender,\\n            token,\\n            targetNetwork,\\n            targetToken,\\n            targetAddress,\\n            amount\\n        );\\n        return amount;\\n    }\\n\\n    /**\\n     * @dev Initiates a non-EVM token swap, exclusive to the router\\n     * @notice Ensure valid parameters and router setup\\n     * @param token The address of the token to be swapped\\n     * @param amount The amount of tokens to be swapped\\n     * @param targetNetwork The identifier of the target network for the swap\\n     * @param targetToken The identifier of the target token on the non-EVM network\\n     * @param targetAddress The address on the target network where the swapped tokens will be sent\\n     * @return The actual amount of tokens swapped\\n     */\\n    function nonEvmSwapToAddress(\\n        address token,\\n        uint256 amount,\\n        string memory targetNetwork,\\n        string memory targetToken,\\n        string memory targetAddress\\n    ) external onlyRouter returns (uint256) {\\n        require(msg.sender != address(0), \\\"FM: bad from\\\");\\n        require(token != address(0), \\\"FM: bad token\\\");\\n        require(amount != 0, \\\"FM: bad amount\\\");\\n        require(bytes(targetNetwork).length != 0, \\\"FM: empty target network\\\");\\n        require(bytes(targetToken).length != 0, \\\"FM: empty target token\\\");\\n        require(bytes(targetAddress).length != 0, \\\"FM: empty target address\\\");\\n        require(\\n            keccak256(\\n                abi.encodePacked(nonEvmAllowedTargets[token][targetNetwork])\\n            ) == keccak256(abi.encodePacked(targetToken)),\\n            \\\"FM: target not allowed\\\"\\n        );\\n        amount = TokenReceivable.sync(token);\\n        emit nonEvmBridgeSwap(\\n            msg.sender,\\n            token,\\n            targetNetwork,\\n            targetToken,\\n            targetAddress,\\n            amount\\n        );\\n        return amount;\\n    }\\n\\n    /**\\n     * @dev Initiates a signed token withdrawal, exclusive to the router\\n     * @notice Ensure valid parameters and router setup\\n     * @param token The token to withdraw\\n     * @param payee Address for where to send the tokens to\\n     * @param amount The amount\\n     * @param salt The salt for unique tx \\n     * @param expiry The expiration time for the signature\\n     * @param signature The multisig validator signature\\n     * @return The actual amount of tokens withdrawn\\n     */\\n    function withdrawSigned(\\n        address token,\\n        address payee,\\n        uint256 amount,\\n        bytes32 salt,\\n        uint256 expiry,\\n        bytes memory signature\\n    ) external onlyRouter returns (uint256) {\\n        require(token != address(0), \\\"FM: bad token\\\");\\n        require(payee != address(0), \\\"FM: bad payee\\\");\\n        require(salt != 0, \\\"FM: bad salt\\\");\\n        require(amount != 0, \\\"FM: bad amount\\\");\\n        require(block.timestamp < expiry, \\\"FM: signature timed out\\\");\\n        require(expiry < block.timestamp + WEEK, \\\"FM: expiry too far\\\");\\n        bytes32 message =  keccak256(\\n                abi.encode(WITHDRAW_SIGNED_METHOD, token, payee, amount, salt, expiry)\\n            );\\n        address _signer = signerUnique(message, signature);\\n        \\n        require(signers[_signer], \\\"FM: Invalid signer\\\");\\n        require(!usedSalt[salt], \\\"FM: salt already used\\\");\\n        usedSalt[salt] = true;\\n        TokenReceivable.sendToken(token, payee, amount);\\n        emit TransferBySignature(_signer, payee, token, amount);\\n        return amount;\\n    }\\n\\n    /**\\n     * @dev Initiates a signed OneInch token withdrawal, exclusive to the router\\n     * @notice Ensure valid parameters and router setup\\n     * @param to The address to withdraw to\\n     * @param amountIn The amount to be swapped in\\n     * @param amountOut The expected amount out in the OneInch swap\\n     * @param foundryToken The token used in the Foundry\\n     * @param targetToken The target token for the swap\\n     * @param oneInchData The data containing information for the 1inch swap\\n     * @param salt The salt value for the signature\\n     * @param expiry The expiration time for the signature\\n     * @param signature The multi-signature data\\n     * @return The actual amount of tokens withdrawn from Foundry\\n     */\\n    function withdrawSignedOneInch(\\n        address to,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address foundryToken,\\n        address targetToken,\\n        bytes memory oneInchData,\\n        bytes32 salt,\\n        uint256 expiry,\\n        bytes memory signature\\n    ) external onlyRouter returns (uint256) {\\n        require(targetToken != address(0), \\\"FM: bad token\\\");\\n        require(foundryToken != address(0), \\\"FM: bad token\\\");\\n        require(to != address(0), \\\"FM: bad payee\\\");\\n        require(salt != 0, \\\"FM: bad salt\\\");\\n        require(amountIn != 0, \\\"FM: bad amount\\\");\\n        require(amountOut != 0, \\\"FM: bad amount\\\");\\n        require(block.timestamp < expiry, \\\"FM: signature timed out\\\");\\n        require(expiry < block.timestamp + WEEK, \\\"FM: expiry too far\\\");\\n\\n        bytes32 message =  keccak256(\\n                abi.encode(\\n                    WITHDRAW_SIGNED_ONEINCH__METHOD,\\n                    to,\\n                    amountIn,\\n                    amountOut,\\n                    foundryToken,\\n                    targetToken,\\n                    oneInchData,\\n                    salt,\\n                    expiry\\n                )\\n            );\\n        address _signer = signerUnique(message, signature);\\n        require(signers[_signer], \\\"FM: Invalid signer\\\");\\n        require(!usedSalt[salt], \\\"FM: salt already used\\\");\\n        usedSalt[salt] = true;\\n        TokenReceivable.sendToken(foundryToken, router, amountIn);\\n        emit TransferBySignature(_signer, router, foundryToken, amountIn);\\n        return amountIn;\\n    }\\n\\n    /**\\n     * @dev Verifies details of a signed token withdrawal without executing the withdrawal\\n     * @param token Token address for withdrawal\\n     * @param payee Intended recipient address\\n     * @param amount Amount of tokens to be withdrawn\\n     * @param salt Unique identifier to prevent replay attacks\\n     * @param expiry Expiration timestamp of the withdrawal signature\\n     * @param signature Cryptographic signature for verification\\n     * @return Digest and signer's address from the provided signature\\n     */\\n    function withdrawSignedVerify(\\n        address token,\\n        address payee,\\n        uint256 amount,\\n        bytes32 salt,\\n        uint256 expiry,\\n        bytes calldata signature\\n    ) external view returns (bytes32, address) {\\n        bytes32 message = keccak256(\\n                abi.encode(WITHDRAW_SIGNED_METHOD, token, payee, amount, salt, expiry)\\n            );\\n        (bytes32 digest, address _signer) = signer(message, signature);\\n        return (digest, _signer);\\n    }\\n\\n    /**\\n     * @dev Verifies details of a signed OneInch token withdrawal without execution\\n     * @param to Recipient address on the target network\\n     * @param amountIn Tokens withdrawn from Foundry\\n     * @param amountOut Expected tokens on the target network\\n     * @param foundryToken Token withdrawn from Foundry\\n     * @param targetToken Token on the target network\\n     * @param oneInchData The data containing information for the 1inch swap\\n     * @param salt Unique identifier to prevent replay attacks\\n     * @param expiry Expiration timestamp of the withdrawal signature\\n     * @param signature Cryptographic signature for verification\\n     * @return Digest and signer's address from the provided signature\\n     */\\n    function withdrawSignedOneInchVerify(\\n        address to,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address foundryToken,\\n        address targetToken,\\n        bytes memory oneInchData,\\n        bytes32 salt,\\n        uint256 expiry,\\n        bytes calldata signature\\n    ) external view returns (bytes32, address) {\\n        bytes32 message =  keccak256(\\n                abi.encode(\\n                    WITHDRAW_SIGNED_ONEINCH__METHOD,\\n                    to,\\n                    amountIn,\\n                    amountOut,\\n                    foundryToken,\\n                    targetToken,\\n                    oneInchData,\\n                    salt,\\n                    expiry\\n                )\\n            );\\n        (bytes32 digest, address _signer) = signer(message, signature);\\n        return (digest, _signer);\\n    }\\n\\n    /**\\n     * @dev Cancels a signed token withdrawal\\n     * @param token The token to withdraw\\n     * @param payee Address for where to send the tokens to\\n     * @param amount The amount\\n     * @param salt The salt for unique tx \\n     * @param expiry The expiration time for the signature\\n     * @param signature The multisig validator signature\\n     */\\n    function cancelFailedWithdrawSigned(\\n        address token,\\n        address payee,\\n        uint256 amount,\\n        bytes32 salt,\\n        uint256 expiry,\\n        bytes memory signature\\n    ) external onlySettlementManager {\\n        require(token != address(0), \\\"FM: bad token\\\");\\n        require(payee != address(0), \\\"FM: bad payee\\\");\\n        require(salt != 0, \\\"FM: bad salt\\\");\\n        require(amount != 0, \\\"FM: bad amount\\\");\\n        require(block.timestamp < expiry, \\\"FM: signature timed out\\\");\\n        require(expiry < block.timestamp + WEEK, \\\"FM: expiry too far\\\");\\n        bytes32 message =  keccak256(\\n                abi.encode(WITHDRAW_SIGNED_METHOD, token, payee, amount, salt, expiry)\\n            );\\n        address _signer = signerUnique(message, signature);\\n        \\n        require(signers[_signer], \\\"FM: Invalid signer\\\");\\n        require(!usedSalt[salt], \\\"FM: salt already used\\\");\\n        usedSalt[salt] = true;\\n\\n        emit FailedWithdrawalCancelled(settlementManager, payee, token, amount, salt);\\n    }\\n\\n    /**\\n     * @dev Cancels a signed OneInch token withdrawal\\n     * @notice Ensure valid parameters and router setup\\n     * @param to The address to withdraw to\\n     * @param amountIn The amount to be swapped in\\n     * @param amountOut The expected amount out in the OneInch swap\\n     * @param foundryToken The token used in the Foundry\\n     * @param targetToken The target token for the swap\\n     * @param oneInchData The data containing information for the 1inch swap\\n     * @param salt The salt value for the signature\\n     * @param expiry The expiration time for the signature\\n     * @param signature The multi-signature data\\n     */\\n    function cancelFailedWithdrawSignedOneInch(\\n        address to,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address foundryToken,\\n        address targetToken,\\n        bytes memory oneInchData,\\n        bytes32 salt,\\n        uint256 expiry,\\n        bytes memory signature\\n    ) external onlySettlementManager {\\n        require(targetToken != address(0), \\\"FM: bad token\\\");\\n        require(foundryToken != address(0), \\\"FM: bad token\\\");\\n        require(to != address(0), \\\"FM: bad payee\\\");\\n        require(salt != 0, \\\"FM: bad salt\\\");\\n        require(amountIn != 0, \\\"FM: bad amount\\\");\\n        require(amountOut != 0, \\\"FM: bad amount\\\");\\n        require(block.timestamp < expiry, \\\"FM: signature timed out\\\");\\n        require(expiry < block.timestamp + WEEK, \\\"FM: expiry too far\\\");\\n\\n        bytes32 message =  keccak256(\\n                abi.encode(\\n                    WITHDRAW_SIGNED_ONEINCH__METHOD,\\n                    to,\\n                    amountIn,\\n                    amountOut,\\n                    foundryToken,\\n                    targetToken,\\n                    oneInchData,\\n                    salt,\\n                    expiry\\n                )\\n            );\\n        address _signer = signerUnique(message, signature);\\n        require(signers[_signer], \\\"FM: Invalid signer\\\");\\n        require(!usedSalt[salt], \\\"FM: salt already used\\\");\\n        usedSalt[salt] = true;\\n\\n        emit FailedWithdrawalCancelled(settlementManager, to, targetToken, amountIn, salt);\\n    }\\n\\n    /**\\n     * @dev Adds liquidity for the specified token.\\n     * @param token Token address for liquidity.\\n     * @param amount Amount of tokens to be added.\\n     */\\n    function addLiquidity(address token, uint256 amount) external {\\n        require(amount != 0, \\\"FM: Amount must be positive\\\");\\n        require(token != address(0), \\\"FM: Bad token\\\");\\n        require(\\n            isFoundryAsset[token] == true,\\n            \\\"FM: Only foundry assets can be added\\\"\\n        );\\n        liquidities[token][msg.sender] += amount;\\n        amount = SafeAmount.safeTransferFrom(\\n            token,\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n        amount = TokenReceivable.sync(token);\\n        emit BridgeLiquidityAdded(msg.sender, token, amount);\\n    }\\n\\n    /**\\n     * @dev Removes possible liquidity for the specified token.\\n     * @param token Token address for liquidity removal.\\n     * @param amount Amount of tokens to be removed.\\n     * @return Actual amount of tokens removed.\\n     */\\n    function removeLiquidityIfPossible(address token, uint256 amount)\\n        external\\n        returns (uint256)\\n    {\\n        require(amount != 0, \\\"FM: Amount must be positive\\\");\\n        require(token != address(0), \\\"FM: Bad token\\\");\\n        require(\\n            isFoundryAsset[token] == true,\\n            \\\"FM: Only foundry assets can be removed\\\"\\n        );\\n        uint256 liq = liquidities[token][msg.sender];\\n        require(liq >= amount, \\\"FM: Not enough liquidity\\\");\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n        uint256 actualLiq = balance > amount ? amount : balance;\\n\\n        if (actualLiq != 0) {\\n            liquidities[token][msg.sender] -= actualLiq;\\n            TokenReceivable.sendToken(token, msg.sender, actualLiq);\\n            emit BridgeLiquidityRemoved(msg.sender, token, amount);\\n        }\\n        return actualLiq;\\n    }\\n\\n    /**\\n     * @dev Retrieves liquidity for the specified token and liquidity adder.\\n     * @param token Token address for liquidity.\\n     * @param liquidityAdder Address of the liquidity adder.\\n     * @return Current liquidity amount.\\n     */\\n    function liquidity(address token, address liquidityAdder)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return liquidities[token][liquidityAdder];\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/multiswap-contracts/LiquidityManagerRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../common/WithAdmin.sol\\\";\\n\\nabstract contract LiquidityManagerRole is WithAdmin {\\n    using SafeERC20 for IERC20;\\n    address public liquidityManager;\\n    address public liquidityManagerBot;\\n    address public withdrawalAddress;\\n    event LiquidityRemovedByManager(address token, uint256 amount, address withdrawalAddress);\\n\\n  /**\\n     * @dev Modifier that allows only the designated liquidity managers to execute the function.\\n     * It checks if the sender is either `liquidityManager` or `liquidityManagerBot`.\\n     * @notice Ensure that `liquidityManager` and `liquidityManagerBot` are set before using this modifier.\\n     */\\n    modifier onlyLiquidityManager() {\\n        require(\\n            msg.sender == liquidityManager || msg.sender == liquidityManagerBot,\\n            \\\"FM: Only liquidity managers\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Sets the addresses of liquidity managers\\n     * @param _liquidityManager The primary liquidity manager address\\n     * @param _liquidityManagerBot The secondary liquidity manager address\\n     */\\n    function setLiquidityManagers(address _liquidityManager, address _liquidityManagerBot) external onlyOwner {\\n        require(_liquidityManager != address(0), \\\"FM: Bad liquidity manager\\\");\\n        require(_liquidityManagerBot != address(0), \\\"FM: Bad liquidity manager bot\\\");\\n\\n        liquidityManager = _liquidityManager;\\n        liquidityManagerBot = _liquidityManagerBot;\\n    }\\n\\n    /**\\n     * @dev Sets the address for withdrawal of liquidity\\n     * @param _withdrawalAddress The liquidity withdraw address\\n     */\\n    function setWithdrawalAddress(address _withdrawalAddress) external onlyOwner {\\n        withdrawalAddress = _withdrawalAddress;\\n    }\\n\\n    /**\\n     * @dev Removes specified liquidity for the given token\\n     * @param token Token address for liquidity removal\\n     * @param amount Amount of tokens to be removed\\n     * @return Actual amount of tokens removed\\n     */\\n    function removeLiquidityByManager(address token, uint256 amount) external onlyLiquidityManager returns (uint256) {\\n        IERC20(token).safeTransfer(withdrawalAddress, amount);\\n        emit LiquidityRemovedByManager(token, amount, withdrawalAddress);\\n        return amount;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/common/oneInch/OneInchDecoder.sol\": {\r\n        \"OneInchDecoder\": \"0x87c05218d34077d93b768a61472635379ebd56d9\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oneInchAggregatorRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetToken\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetChainId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settledAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawalData\",\"type\":\"bytes32\"}],\"name\":\"NonEvmSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settledAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawalData\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"SwapHandled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"UniswapV3SwapHandled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"UnoSwapHandled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutOneInch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"foundryToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"oneInchData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"multiSignature\",\"type\":\"bytes\"}],\"name\":\"WithdrawOneInch\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inventory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"targetNetwork\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"targetToken\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"targetAddress\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"withdrawalData\",\"type\":\"bytes32\"}],\"name\":\"nonEvmSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneInchAggregatorRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_gasWallet\",\"type\":\"address\"}],\"name\":\"setGasWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRouterAddress\",\"type\":\"address\"}],\"name\":\"setOneInchAggregatorRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetNetwork\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"withdrawalData\",\"type\":\"bytes32\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crossTargetNetwork\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"crossTargetToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crossTargetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"oneInchData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"foundryToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"withdrawalData\",\"type\":\"bytes32\"}],\"name\":\"swapAndCrossOneInch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crossTargetNetwork\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"crossTargetToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crossTargetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"oneInchData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"foundryToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"withdrawalData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"}],\"name\":\"swapAndCrossOneInchETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"multiSignature\",\"type\":\"bytes\"}],\"name\":\"withdrawSigned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"foundryToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"oneInchData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"multiSignature\",\"type\":\"bytes\"}],\"name\":\"withdrawSignedAndSwapOneInch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FiberRouter", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000001111111254eeb25477b68fb85ed929f73a960582000000000000000000000000985824b8623e523162122461e081721b4bcc778b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}