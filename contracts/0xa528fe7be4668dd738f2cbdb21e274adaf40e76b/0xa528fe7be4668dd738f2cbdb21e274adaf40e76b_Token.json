{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-09-13\r\n*/\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity = 0.8.19;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n//--- Context ---//\r\nabstract contract Context {\r\n    constructor() {\r\n    }\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n//--- Ownable ---//\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IFactoryV2 {\r\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\r\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\r\n}\r\n\r\ninterface IV2Pair {\r\n    function factory() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n}\r\n\r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IRouter02 is IRouter01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n//--- Interface for ERC20 ---//\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n//--- Contract v2 ---//\r\ncontract Token is Context, Ownable, IERC20 {\r\n     using SafeMath for uint256;\r\n    function totalSupply() external pure override returns (uint256) { if (_totalSupply == 0) { revert(); } return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { if (_totalSupply == 0) { revert(); } return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner(); }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    function balanceOf(address account) public view override returns (uint256) { return balance[account];}\r\n\r\n    address public constant ETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address public constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address public constant ZERO = 0x0000000000000000000000000000000000000000;\r\n    address public MKT = 0xebb733EAB3C98975dEdd7341F0C1b5E7752F38D1;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _noFee;\r\n    mapping (address => bool) private liquidityAdd;\r\n    mapping (address => bool) private isLpPair;\r\n    mapping (address => bool) private isAutorizerAddress;\r\n    mapping (address => uint256) private balance;\r\n\r\n\r\n    uint256 constant public _totalSupply = 810_000_000_000_000 * 10**18;\r\n    uint256 public swapThreshold = _totalSupply.mul(10).div(10000); //0.01% of supply\r\n    bool public swapEnabled = true;\r\n\r\n    // Sell fee distribution\r\n    uint256 public liquidityFee = 10;\r\n    uint256 public marketingFee = 20; \r\n    uint256 public contestFee = 20;\r\n    uint256 public sellfee = liquidityFee.add(marketingFee).add(contestFee);\r\n\r\n    uint256 public buyfee = 50;\r\n    uint256 public transferfee = 0;\r\n\r\n    uint256 constant public fee_denominator = 1_000;\r\n    uint256 public targetLiquidity = 20;\r\n    uint256 public targetLiquidityDenominator = 100;\r\n    uint256 constant public maxFee = 150;\r\n\r\n    bool private canSwapFees = false;\r\n    address public marketingAddress = MKT;\r\n    address public autoLiquidityReceiver = MKT;\r\n    address public contestReceiver = MKT;\r\n\r\n\r\n    IRouter02 public swapRouter;\r\n    string constant private _name = \"$PepeFace\";\r\n    string constant private _symbol = \"PPFACE\";\r\n    uint8 constant private _decimals = 18;\r\n    address public lpPair;\r\n    bool public isTradingEnabled = false;\r\n    bool private inSwap;\r\n\r\n    modifier inSwapFlag { inSwap = true; _; inSwap = false; }\r\n\r\n    modifier isAutorizer {require(isAutorizerAddress[msg.sender], \"Not an authorized address\");_; }\r\n\r\n    event _enableTrading();\r\n    event _setPresaleAddress(address account, bool enabled);\r\n    event _toggleCanSwapFees(bool enabled);\r\n    event _changePair(address newLpPair);\r\n    event _changeWallets(address marketing, address contest);\r\n    event _adminTokenRecovery(address tokenAddress, uint256 tokenAmount);\r\n    event _feeDistributionUpdated(uint256 liquidityFee,uint256 marketingFee,uint256 contestFee);\r\n    event _transferBuyFeeUpdated(uint256 transferFee,uint256 totalBuyFee);\r\n\r\n\r\n    constructor () {\r\n        _noFee[msg.sender] = true;\r\n\r\n        if (block.chainid == 56) {\r\n            swapRouter = IRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        } else if (block.chainid == 97) {\r\n            swapRouter = IRouter02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1);\r\n        } else if (block.chainid == 1 || block.chainid == 4 || block.chainid == 3) {\r\n            swapRouter = IRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        } else if (block.chainid == 43114) {\r\n            swapRouter = IRouter02(0x60aE616a2155Ee3d9A68541Ba4544862310933d4);\r\n        } else if (block.chainid == 250) {\r\n            swapRouter = IRouter02(0xF491e7B69E4244ad4002BC14e878a34207E38c29);\r\n        } else {\r\n            revert(\"Chain not valid\");\r\n        }\r\n        liquidityAdd[msg.sender] = true;\r\n        balance[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n\r\n        lpPair = IFactoryV2(swapRouter.factory()).createPair(swapRouter.WETH(), address(this));\r\n        isLpPair[lpPair] = true;\r\n        isAutorizerAddress[msg.sender] = true;\r\n\r\n        _approve(msg.sender, address(swapRouter), type(uint256).max);\r\n        _approve(address(this), address(swapRouter), type(uint256).max);\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address sender, address spender, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: Zero Address\");\r\n        require(spender != address(0), \"ERC20: Zero Address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] -= amount;\r\n        }\r\n\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n    function isNoFeeWallet(address account) external view returns(bool) {\r\n        return _noFee[account];\r\n    }\r\n\r\n    function setNoFeeWallet(address account, bool enabled) public onlyOwner {\r\n        _noFee[account] = enabled;\r\n    }\r\n\r\n    function isLimitedAddress(address ins, address out) internal view returns (bool) {\r\n\r\n        bool isLimited = ins != owner()\r\n            && out != owner() && msg.sender != owner()\r\n            && !liquidityAdd[ins]  && !liquidityAdd[out] && out != DEAD && out != address(0) && out != address(this);\r\n            return isLimited;\r\n    }\r\n\r\n    function is_buy(address ins, address out) internal view returns (bool) {\r\n        bool _is_buy = !isLpPair[out] && isLpPair[ins];\r\n        return _is_buy;\r\n    }\r\n\r\n    function is_sell(address ins, address out) internal view returns (bool) { \r\n        bool _is_sell = isLpPair[out] && !isLpPair[ins];\r\n        return _is_sell;\r\n    }\r\n\r\n    function is_transfer(address ins, address out) internal view returns (bool) { \r\n        bool _is_transfer = !isLpPair[out] && !isLpPair[ins];\r\n        return _is_transfer;\r\n    }\r\n\r\n    function canSwap(address ins, address out) internal view returns (bool) {\r\n        bool canswap = canSwapFees && !isAutorizerAddress[ins] && !isAutorizerAddress[out];\r\n\r\n        return canswap;\r\n    }\r\n\r\n    function changeLpPair(address newPair,bool yesno) external isAutorizer {\r\n        isLpPair[newPair] = yesno;\r\n        emit _changePair(newPair);\r\n    }\r\n\r\n    function getLpPair(address _contract) external view returns(bool) {\r\n        return isLpPair[_contract];\r\n    }\r\n\r\n    function toggleCanSwapFees(bool yesno) external onlyOwner {\r\n        require(canSwapFees != yesno,\"Bool is the same\");\r\n        canSwapFees = yesno;\r\n        emit _toggleCanSwapFees(yesno);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal returns  (bool) {\r\n        bool takeFee = true;\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (isLimitedAddress(from,to)) {\r\n            require(isTradingEnabled,\"Trading is not enabled\");\r\n        }\r\n\r\n        if(is_sell(from, to) &&  !inSwap && canSwap(from, to)) {\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if(swapEnabled && contractTokenBalance >= swapThreshold) { internalSwap(); }\r\n        }\r\n\r\n        if (_noFee[from] || _noFee[to]){\r\n            takeFee = false;\r\n        }\r\n\r\n        balance[from] -= amount; uint256 amountAfterFee = (takeFee) ? takeTaxes(from, is_buy(from, to), is_sell(from, to), amount) : amount;\r\n        balance[to] += amountAfterFee; emit Transfer(from, to, amountAfterFee);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function changeWallets(address _marketingReceiver, address _contestReceiver) external isAutorizer {\r\n        require(_marketingReceiver != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_contestReceiver != address(0), \"ERC20: transfer to the zero address\");\r\n        marketingAddress = _marketingReceiver;       \r\n        contestReceiver = _contestReceiver;\r\n        emit _changeWallets(marketingAddress, contestReceiver);     \r\n    }\r\n\r\n    function takeTaxes(address from, bool isbuy, bool issell, uint256 amount) internal returns (uint256) {\r\n        uint256 fee;\r\n        if (isbuy)  fee = buyfee;  else if (issell)  fee = sellfee;  else  fee = transferfee; \r\n        if (fee == 0)  return amount;\r\n        uint256 feeAmount = amount * fee / fee_denominator;\r\n        if (feeAmount > 0) {\r\n\r\n            balance[address(this)] += feeAmount;\r\n            emit Transfer(from, address(this), feeAmount);\r\n            \r\n        }\r\n        return amount - feeAmount;\r\n    }\r\n\r\n    function setTransferBuyFee(uint256 _transferTaxRate, uint256 _buyTaxRate) external onlyOwner {\r\n        require(_transferTaxRate <= maxFee, \"Transfer tax rate exceeds maximum fee\");\r\n        require(_buyTaxRate <= maxFee, \"Buy tax rate exceeds maximum fee\");\r\n\r\n        transferfee = _transferTaxRate;\r\n        buyfee = _buyTaxRate;\r\n        emit _transferBuyFeeUpdated(transferfee,buyfee);\r\n    }\r\n    function setFeeDistribution(uint256 _liquidityFee, uint256 _reflectionFee, uint256 _marketingFee, uint256 _contestFee) external onlyOwner {\r\n        require(_liquidityFee.add(_reflectionFee).add(_marketingFee).add(_contestFee) <= maxFee, \"Total fee exceeds maximum fee\");\r\n\r\n        liquidityFee = _liquidityFee;\r\n        marketingFee = _marketingFee;\r\n        contestFee = _contestFee;\r\n\r\n        sellfee = _liquidityFee.add(_marketingFee).add(_contestFee);\r\n\r\n         emit _feeDistributionUpdated(liquidityFee,marketingFee, contestFee);\r\n    }\r\n\r\n    function internalSwap() internal inSwapFlag {\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = swapRouter.WETH();\r\n        \r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        bool success;\r\n\r\n        if (sellfee > 0) {\r\n            uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFee;\r\n            uint256 amountToLiquify = balanceOf(address(this)).mul(dynamicLiquidityFee).div(sellfee).div(2);\r\n            uint256 amountToSwap = balanceOf(address(this)).sub(amountToLiquify);\r\n\r\n            swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                amountToSwap,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n            uint256 amountETH = address(this).balance.sub(balanceBefore);\r\n            uint256 totalETHFee = sellfee.sub(dynamicLiquidityFee.div(2));\r\n            uint256 amountETHLiquidity = amountETH.mul(dynamicLiquidityFee).div(totalETHFee).div(2);\r\n            uint256 amountETHContest = amountETH.mul(contestFee).div(totalETHFee);\r\n            uint256 amountETHMarketing = amountETH.mul(marketingFee).div(totalETHFee);\r\n\r\n            if (contestFee > 0) {\r\n                (success,) = contestReceiver.call{value: amountETHContest, gas: 35000}(\"\");\r\n                require(success, \"Failed to send ETH to contest receiver\");\r\n            }\r\n\r\n            if (marketingFee > 0) {\r\n                (success,) = marketingAddress.call{value: amountETHMarketing, gas: 35000}(\"\");\r\n                require(success, \"Failed to send ETH to marketing fee receiver\");\r\n            }\r\n\r\n            if (amountToLiquify > 0) {\r\n                swapRouter.addLiquidityETH{value: amountETHLiquidity}(\r\n                    address(this),\r\n                    amountToLiquify,\r\n                    0,\r\n                    0,\r\n                    autoLiquidityReceiver,\r\n                    block.timestamp\r\n                );\r\n                emit AutoLiquify(amountETHLiquidity, amountToLiquify);\r\n            }\r\n        } else if (balanceOf(address(this)) > 0) {\r\n            swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                balanceOf(address(this)),\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n            uint256 amount = address(this).balance.sub(balanceBefore);\r\n             (success,) = marketingAddress.call{value: amount, gas: 35000}(\"\");\r\n            require(success, \"Failed to send ETH to marketing fee receiver\");\r\n        }\r\n\r\n        if (_allowances[address(this)][address(swapRouter)] != type(uint256).max) {\r\n            _allowances[address(this)][address(swapRouter)] = type(uint256).max;\r\n        }\r\n\r\n    }\r\n\r\n    function setAutorizerAddress(address _autorizer, bool yesno) external isAutorizer {\r\n        require(isAutorizerAddress[_autorizer] != yesno,\"Same bool\");\r\n        isAutorizerAddress[_autorizer] = yesno;\r\n        _noFee[_autorizer] = yesno;\r\n        liquidityAdd[_autorizer] = yesno;\r\n        emit _setPresaleAddress(_autorizer, yesno);\r\n    }\r\n\r\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external isAutorizer {\r\n        require(_tokenAddress != address(this), \"Cannot be this token\");\r\n        IERC20(_tokenAddress).transfer(address(msg.sender), _tokenAmount);\r\n        emit _adminTokenRecovery(_tokenAddress, _tokenAmount);\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        require(!isTradingEnabled, \"Trading already enabled\");\r\n        isTradingEnabled = true;\r\n        emit _enableTrading();\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external onlyOwner {\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n    }\r\n\r\n    function getAutorizer(address account) external view returns(bool) {\r\n        return isAutorizerAddress[account];\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n        function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\r\n        return accuracy.mul(balanceOf(lpPair).mul(2)).div(getCirculatingSupply());\r\n    }\r\n\r\n    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n    \r\n    event AutoLiquify(uint256 amountETH, uint256 amount);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"_adminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLpPair\",\"type\":\"address\"}],\"name\":\"_changePair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contest\",\"type\":\"address\"}],\"name\":\"_changeWallets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"_enableTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contestFee\",\"type\":\"uint256\"}],\"name\":\"_feeDistributionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"_setPresaleAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"_toggleCanSwapFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBuyFee\",\"type\":\"uint256\"}],\"name\":\"_transferBuyFeeUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MKT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"yesno\",\"type\":\"bool\"}],\"name\":\"changeLpPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contestReceiver\",\"type\":\"address\"}],\"name\":\"changeWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contestFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contestReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee_denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAutorizer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"getLpPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isNoFeeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autorizer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"yesno\",\"type\":\"bool\"}],\"name\":\"setAutorizerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contestFee\",\"type\":\"uint256\"}],\"name\":\"setFeeDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setNoFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferTaxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyTaxRate\",\"type\":\"uint256\"}],\"name\":\"setTransferBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetLiquidityDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"yesno\",\"type\":\"bool\"}],\"name\":\"toggleCanSwapFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e87a6023268b51a9ff7fa0160f5ae5afad36d9678d6de122f901689b8cd033cf"}