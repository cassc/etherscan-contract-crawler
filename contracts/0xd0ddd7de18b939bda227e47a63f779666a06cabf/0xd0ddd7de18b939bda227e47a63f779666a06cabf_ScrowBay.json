{"SourceCode": "// Sources flattened with hardhat v2.13.0 https://hardhat.org\r\n\r\n// File contracts/interface/IScrowBay.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.9;\r\n\r\n/**\r\n  @dev this is the interface of the users.\r\n */\r\n\r\ninterface IScrowBay {\r\n    enum Status {\r\n        Locked,\r\n        Pending,\r\n        Resolved,\r\n        Cancelled,\r\n        Disputed,\r\n        Released\r\n    }\r\n\r\n    struct Transaction {\r\n        uint256 id;\r\n        bytes32 title;\r\n        address buyer;\r\n        address seller;\r\n        address token;\r\n        uint256 amount;\r\n        uint256 time;\r\n        Status status;\r\n    }\r\n\r\n    function createTransaction(\r\n        bytes32 _title,\r\n        address _seller,\r\n        address _token,\r\n        uint256 _amount\r\n    ) external returns (uint256);\r\n\r\n    function getTransaction(\r\n        uint256 _transactionId\r\n    ) external view returns (Transaction memory);\r\n\r\n    function releaseTransaction(uint256 _transactionId) external;\r\n\r\n    function cancelTransaction(uint256 _transactionId) external;\r\n\r\n    function lock(uint256 _transactionId) external;\r\n\r\n    function execute(\r\n        uint256 _transactionId,\r\n        uint256 buyerPercent,\r\n        uint256 sellerPercent\r\n    ) external;\r\n\r\n    function dispute(uint256 _transactionId) external;\r\n\r\n    function getTransactions() external view returns (Transaction[] memory);\r\n\r\n    function getBuyerTransactions() external view returns (uint256[] memory);\r\n\r\n    function getSellerTransactions() external view returns (uint256[] memory);\r\n\r\n    function setProtocolFee(uint256 _fee) external;\r\n\r\n    function setDisputeFee(uint256 _fee) external;\r\n\r\n    function setAdmin(address _address) external;\r\n\r\n    function setFeeAddress(address _address) external;\r\n}\r\n\r\n\r\n// File contracts/interface/tokens/IERC20.sol\r\n\r\npragma solidity ^0.8.9;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/contract/ScrowBay.sol\r\n\r\npragma solidity ^0.8.9;\r\ncontract ScrowBay is IScrowBay {\r\n    Transaction[] public transactions;\r\n    address private feeCollector;\r\n    address private admin;\r\n    uint256 private protocolFee = 50;\r\n    uint256 private disputeFee = 20;\r\n    mapping(address => uint256[]) private buyerTransactions;\r\n    mapping(address => uint256[]) private sellerTransactions;\r\n\r\n    constructor() {\r\n        feeCollector = msg.sender;\r\n        admin = msg.sender;\r\n    }\r\n\r\n    function setProtocolFee(uint256 _fee) public override {\r\n        require(msg.sender == admin, \"Not Admin\");\r\n        protocolFee = _fee;\r\n    }\r\n\r\n    function setDisputeFee(uint256 _fee) public override {\r\n        require(msg.sender == admin, \"Not Admin\");\r\n        disputeFee = _fee;\r\n    }\r\n\r\n    function setAdmin(address _address) public override {\r\n        require(msg.sender == admin, \"Not Admin\");\r\n        admin = _address;\r\n    }\r\n\r\n    function setFeeAddress(address _address) public override {\r\n        require(msg.sender == admin, \"Not Admin\");\r\n        feeCollector = _address;\r\n    }\r\n\r\n    function createTransaction(\r\n        bytes32 _title,\r\n        address _seller,\r\n        address _token,\r\n        uint256 _amount\r\n    ) public override returns (uint256) {\r\n        require(_seller != address(0), \"Can not send token to zero address.\");\r\n        IERC20 token = IERC20(_token);\r\n        require(\r\n            token.transferFrom(msg.sender, address(this), _amount),\r\n            \"Token transfer failed.\"\r\n        );\r\n\r\n        Transaction memory newTransaction = Transaction(\r\n            transactions.length,\r\n            _title,\r\n            msg.sender,\r\n            _seller,\r\n            _token,\r\n            _amount,\r\n            block.timestamp,\r\n            Status.Pending\r\n        );\r\n\r\n        transactions.push(newTransaction);\r\n        uint256 id = transactions.length - 1;\r\n        buyerTransactions[msg.sender].push(id);\r\n        sellerTransactions[_seller].push(id);\r\n        return id;\r\n    }\r\n\r\n    function getTransaction(\r\n        uint256 _transactionId\r\n    ) public view override returns (Transaction memory) {\r\n        Transaction memory transaction = transactions[_transactionId];\r\n        return transaction;\r\n    }\r\n\r\n    function releaseTransaction(uint256 _transactionId) public override {\r\n        Transaction storage transaction = transactions[_transactionId];\r\n        require(\r\n            msg.sender == transaction.buyer,\r\n            \"You are not a buyer of this transaction.\"\r\n        );\r\n        require(\r\n            transaction.status == Status.Pending,\r\n            \"Only can release when the transaction is pending.\"\r\n        );\r\n        IERC20 token = IERC20(transaction.token);\r\n        require(\r\n            token.transfer(\r\n                transaction.seller,\r\n                (transaction.amount * (1000 - protocolFee)) / 1000\r\n            ),\r\n            \"Failed token transfer\"\r\n        );\r\n        require(\r\n            token.transfer(\r\n                feeCollector,\r\n                (transaction.amount * protocolFee) / 1000\r\n            ),\r\n            \"Failed token transfer\"\r\n        );\r\n        transaction.time = block.timestamp;\r\n        transaction.status = Status.Released;\r\n    }\r\n\r\n    function cancelTransaction(uint256 _transactionId) public override {\r\n        Transaction storage transaction = transactions[_transactionId];\r\n        require(\r\n            msg.sender == transaction.buyer,\r\n            \"You are not a buyer of this transaction.\"\r\n        );\r\n        require(\r\n            transaction.status == Status.Locked,\r\n            \"This is not Locked transaction\"\r\n        );\r\n        IERC20 token = IERC20(transaction.token);\r\n        require(\r\n            token.transfer(\r\n                transaction.buyer,\r\n                (transaction.amount * (1000 - disputeFee)) / 1000\r\n            ),\r\n            \"Failed token transfer\"\r\n        );\r\n        require(\r\n            token.transfer(\r\n                feeCollector,\r\n                (transaction.amount * disputeFee) / 1000\r\n            ),\r\n            \"Failed token transfer\"\r\n        );\r\n        transaction.status = Status.Cancelled;\r\n    }\r\n\r\n    function lock(uint256 _transactionId) public override {\r\n        require(msg.sender == admin, \"You are not admin.\");\r\n        Transaction storage transaction = transactions[_transactionId];\r\n        require(\r\n            transaction.status == Status.Disputed,\r\n            \"Admin can lock to disputed transactions only.\"\r\n        );\r\n        transaction.status = Status.Locked;\r\n    }\r\n\r\n    function execute(\r\n        uint256 _transactionId,\r\n        uint256 buyerPercent,\r\n        uint256 sellerPercent\r\n    ) public override {\r\n        require(msg.sender == admin, \"You are not admin.\");\r\n        Transaction storage transaction = transactions[_transactionId];\r\n        require(\r\n            transaction.status == Status.Disputed,\r\n            \"Admin can lock to disputed transactions only.\"\r\n        );\r\n        IERC20 token = IERC20(transaction.token);\r\n        require(\r\n            token.transfer(\r\n                transaction.buyer,\r\n                (transaction.amount * buyerPercent) / 1000\r\n            ),\r\n            \"Failed token transfer.\"\r\n        );\r\n        require(\r\n            token.transfer(\r\n                transaction.seller,\r\n                (transaction.amount * sellerPercent) / 1000\r\n            ),\r\n            \"Failed token transfer\"\r\n        );\r\n        require(\r\n            token.transfer(\r\n                feeCollector,\r\n                (transaction.amount * (protocolFee + disputeFee)) / 1000\r\n            ),\r\n            \"Failed token transfer\"\r\n        );\r\n        transaction.status = Status.Resolved;\r\n    }\r\n\r\n    function dispute(uint256 _transactionId) public override {\r\n        Transaction storage transaction = transactions[_transactionId];\r\n        require(\r\n            msg.sender == transaction.buyer || msg.sender == transaction.seller,\r\n            \"You have no authority to this transaction.\"\r\n        );\r\n        require(\r\n            transaction.status == Status.Pending,\r\n            \"You can only call when the status is pending.\"\r\n        );\r\n        transaction.status = Status.Disputed;\r\n    }\r\n\r\n    function getTransactions()\r\n        public\r\n        view\r\n        override\r\n        returns (Transaction[] memory)\r\n    {\r\n        require(msg.sender == admin, \"Only Admin can see the transactions.\");\r\n        return transactions;\r\n    }\r\n\r\n    function getBuyerTransactions()\r\n        public\r\n        view\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        return buyerTransactions[msg.sender];\r\n    }\r\n\r\n    function getSellerTransactions()\r\n        public\r\n        view\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        return sellerTransactions[msg.sender];\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"cancelTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_title\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"dispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerPercent\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyerTransactions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellerTransactions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"getTransaction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"title\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"enum IScrowBay.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IScrowBay.Transaction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransactions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"title\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"enum IScrowBay.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IScrowBay.Transaction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"releaseTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setDisputeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"title\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"enum IScrowBay.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ScrowBay", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8c3694c7ca1f94200937bcefefa5aa98d02589a795e001520c0ed0df4340c0ab"}