{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\ncontract Jackpot {\r\n    /**\r\n     * @dev Write to log info about the new game.\r\n     *\r\n     * @param _game Game number.\r\n     * @param _time Time when game stated.\r\n     \r\n     */\r\n    event Game(uint _game, uint indexed _time);\r\n\r\n    struct Bet {\r\n        address addr;\r\n        uint256 ticketstart;\r\n        uint256 ticketend;\r\n    }\r\n    struct StakingInfo {\r\n        uint depositTime;\r\n        uint balance;\r\n    }\r\n\r\n    mapping(uint256 => mapping(uint256 => Bet)) public bets;\r\n    mapping(address => StakingInfo) public stakeInfo;\r\n    mapping(uint256 => uint256) public totalBets;\r\n\r\n    //winning tickets history\r\n    mapping(uint256 => uint256) public ticketHistory;\r\n\r\n    //winning address history\r\n    mapping(uint256 => address) public winnerHistory;\r\n\r\n    IERC20 public token;\r\n\r\n    // Game fee.\r\n    uint8 public fee = 10;\r\n    // Current game number.\r\n    uint public game;\r\n    // Min eth deposit jackpot\r\n    uint public constant minethjoin = 10000 * 10 ** 18;\r\n\r\n    // Game status\r\n    // 0 = running\r\n    // 1 = stop to show winners animation\r\n\r\n    uint public gamestatus = 0;\r\n\r\n    // All-time game jackpot.\r\n    uint public allTimeJackpot = 0;\r\n    // All-time game players count\r\n    uint public allTimePlayers = 0;\r\n\r\n    // The array of all games\r\n    uint[] public games;\r\n\r\n    // Store game jackpot.\r\n    mapping(uint => uint) jackpot;\r\n    // Store game players.\r\n    mapping(uint => address[]) players;\r\n    // Store total tickets for each game\r\n    mapping(uint => uint) tickets;\r\n    // Store game start block number.\r\n    mapping(uint => uint) gamestartblock;\r\n\r\n    address payable public owner;\r\n    address payable taxWallet;\r\n\r\n    uint counter = 1;\r\n\r\n    /**\r\n     * @dev Check sender address and compare it to an owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this function.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialize game.\r\n     * @dev Create ownable and stats aggregator instances,\r\n     * @dev set funds distributor contract address.\r\n     *\r\n     */\r\n\r\n    constructor() {\r\n        owner = payable(msg.sender);\r\n        startGame();\r\n    }\r\n\r\n    /**\r\n     * @dev The method that allows buying tickets by directly sending ether to the contract.\r\n     */\r\n\r\n    function setToken(address _address) external {\r\n        require(address(token) == address(0));\r\n        token = IERC20(_address);\r\n    }\r\n\r\n\r\n    function playerticketstart(\r\n        uint _gameid,\r\n        uint _pid\r\n    ) public view returns (uint256) {\r\n        return bets[_gameid][_pid].ticketstart;\r\n    }\r\n\r\n    function playerticketend(\r\n        uint _gameid,\r\n        uint _pid\r\n    ) public view returns (uint256) {\r\n        return bets[_gameid][_pid].ticketend;\r\n    }\r\n\r\n    function totaltickets(uint _uint) public view returns (uint256) {\r\n        return tickets[_uint];\r\n    }\r\n\r\n    function playeraddr(uint _gameid, uint _pid) public view returns (address) {\r\n        return bets[_gameid][_pid].addr;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns current game players.\r\n     */\r\n    function getPlayedGamePlayers() public view returns (uint) {\r\n        return getPlayersInGame(game);\r\n    }\r\n\r\n    /**\r\n     * @dev Get players by game.\r\n     *\r\n     * @param playedGame Game number.\r\n     */\r\n    function getPlayersInGame(uint playedGame) public view returns (uint) {\r\n        return players[playedGame].length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns current game jackpot.\r\n     */\r\n    function getPlayedGameJackpot() public view returns (uint) {\r\n        return getGameJackpot(game);\r\n    }\r\n\r\n    /**\r\n     * @dev Get jackpot by game number.\r\n     *\r\n     * @param playedGame The number of the played game.\r\n     */\r\n    function getGameJackpot(uint playedGame) public view returns (uint) {\r\n        return jackpot[playedGame];\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Get game start block by game number.\r\n     *\r\n     * @param playedGame The number of the played game.\r\n     */\r\n    function getGamestartblock(uint playedGame) public view returns (uint) {\r\n        return gamestartblock[playedGame];\r\n    }\r\n\r\n    /**\r\n     * @dev Get total ticket for game\r\n     */\r\n    function getGameTotalTickets(uint playedGame) public view returns (uint) {\r\n        return tickets[playedGame];\r\n    }\r\n\r\n    /**\r\n     * @dev Start the new game.\r\n     */\r\n    function start() public onlyOwner {\r\n        if (players[game].length > 0) {\r\n            pickTheWinner();\r\n        }\r\n        startGame();\r\n    }\r\n\r\n    /**\r\n     * @dev Start the new game.\r\n     */\r\n    function setGamestatusZero() public onlyOwner {\r\n        gamestatus = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Get random number. It cant be influenced by anyone\r\n     * @dev Random number calculation depends on block timestamp,\r\n     * @dev difficulty, counter and jackpot players length.\r\n     *\r\n     */\r\n    function randomNumber(uint number) internal returns (uint) {\r\n        counter++;\r\n        uint random = uint(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    block.timestamp,\r\n                    counter,\r\n                    players[game].length,\r\n                    gasleft()\r\n                )\r\n            )\r\n        ) % number;\r\n        return random + 1;\r\n    }\r\n\r\n    /**\r\n     * @dev adds the player to the jackpot game.\r\n     */\r\n\r\n    function deposit(address from, uint amount) public {\r\n        require(\r\n            msg.sender == address(token),\r\n            \"Stake by sending to token contract\"\r\n        );\r\n        require(gamestatus == 0);\r\n        require(amount >= 0, \"Amount must be greater than zero\");\r\n\r\n        stakeInfo[from].depositTime = block.timestamp;\r\n        stakeInfo[from].balance += amount;\r\n\r\n        uint newtotalstr = totalBets[game];\r\n        bets[game][newtotalstr].addr = address(from);\r\n        bets[game][newtotalstr].ticketstart = tickets[game] + 1;\r\n        bets[game][newtotalstr].ticketend =\r\n            ((tickets[game] + 1) + (amount / (10000 * 10 ** 18))) -\r\n            1;\r\n\r\n        totalBets[game] += 1;\r\n        jackpot[game] += amount;\r\n        tickets[game] += (amount / (10000 * 10 ** 18));\r\n\r\n        players[game].push(from);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw token\r\n     */\r\n    function withdraw() public {\r\n        require(stakeInfo[msg.sender].balance > 0, \"Your balance is zero\");\r\n        require(\r\n            block.timestamp > stakeInfo[msg.sender].depositTime + 1 days,\r\n            \"Withdraw is not available\"\r\n        );\r\n        token.transfer(msg.sender, stakeInfo[msg.sender].balance);\r\n        stakeInfo[msg.sender].balance = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Start the new game.\r\n     * @dev Checks game status changes, if exists request for changing game status game status\r\n     * @dev will be changed.\r\n     */\r\n    function startGame() internal {\r\n        game += 1;\r\n        gamestartblock[game] = block.timestamp;\r\n        emit Game(game, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Pick the winner using random number provably fair function.\r\n     */\r\n    function pickTheWinner() internal {\r\n        uint winner;\r\n        uint toPlayer = address(this).balance > 1 ether ? 1 ether : address(this).balance;\r\n        if (players[game].length == 1) {\r\n            payable(players[game][0]).transfer(toPlayer);\r\n            winner = 0;\r\n            ticketHistory[game] = 1;\r\n            winnerHistory[game] = players[game][0];\r\n        } else {\r\n            winner = randomNumber(tickets[game]); //winning ticket\r\n            uint256 lookingforticket = winner;\r\n            address ticketwinner;\r\n            for (uint8 i = 0; i <= totalBets[game]; i++) {\r\n                address addr = bets[game][i].addr;\r\n                uint256 ticketstart = bets[game][i].ticketstart;\r\n                uint256 ticketend = bets[game][i].ticketend;\r\n                if (\r\n                    lookingforticket >= ticketstart &&\r\n                    lookingforticket <= ticketend\r\n                ) {\r\n                    ticketwinner = addr; //finding winner address\r\n                }\r\n            }\r\n\r\n            ticketHistory[game] = lookingforticket;\r\n            winnerHistory[game] = ticketwinner;\r\n\r\n            payable(ticketwinner).transfer(toPlayer); //send prize to winner\r\n        }\r\n\r\n        allTimeJackpot += toPlayer;\r\n        allTimePlayers += players[game].length;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Game\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"allTimeJackpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTimePlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ticketstart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketend\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gamestatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"playedGame\",\"type\":\"uint256\"}],\"name\":\"getGameJackpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"playedGame\",\"type\":\"uint256\"}],\"name\":\"getGameTotalTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"playedGame\",\"type\":\"uint256\"}],\"name\":\"getGamestartblock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayedGameJackpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayedGamePlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"playedGame\",\"type\":\"uint256\"}],\"name\":\"getPlayersInGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minethjoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"playeraddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"playerticketend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"playerticketstart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setGamestatusZero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uint\",\"type\":\"uint256\"}],\"name\":\"totaltickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winnerHistory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Jackpot", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://881ac3d71d284ad995d82f33692064a6a87669689a090775bc585ddaa6745038"}