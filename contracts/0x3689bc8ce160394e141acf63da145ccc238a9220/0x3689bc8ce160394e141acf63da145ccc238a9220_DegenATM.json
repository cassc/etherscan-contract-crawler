{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DegenATM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport { IERC20Facet } from \\\"./diamond/interfaces/IERC20Facet.sol\\\";\\n\\n/// @title Degen ATM\\n/// @author Daniel <danieldegendev@gmail.com>\\n/// @notice Funds collecting and vesting smart contract\\n/// @custom:version 1.0.0\\ncontract DegenATM is Ownable, ReentrancyGuard {\\n    using Address for address payable;\\n\\n    uint256 public constant LOCK_PERIOD = 31_536_000; // 365 days\\n    uint256 public constant DENOMINATOR = 10_000_000;\\n    uint256 public constant TOTAL_REWARD_BPS = 2_400; // 24%\\n    uint256 public constant REWARD_PENALTY_BPS = 7_000; // 70%\\n\\n    bool public claiming;\\n    bool public collecting;\\n    uint256 public totalDeposits;\\n    uint256 public startTimestamp;\\n    uint256 public allocationLimit = 3 * 10 ** 18;\\n    uint256 public totalLockedTokens;\\n    uint256 public tokensPerOneNative;\\n    uint256 public totalClaimedTokens;\\n    address public token;\\n    mapping(address => bool) public locked;\\n    mapping(address => bool) public claimed;\\n    mapping(address => bool) public whitelist;\\n    mapping(address => uint256) public deposits;\\n    mapping(address => uint256) public lockedAmount;\\n    mapping(address => uint256) public claimedAmount;\\n\\n    event Deposit(address depositer, uint256 amount);\\n    event Claimed(address claimer, uint256 amount);\\n    event LockJoin(address locker, uint256 amount);\\n    event LockLeave(address locker, uint256 amount, uint256 reward, uint256 penalty);\\n    event CollectingEnabled();\\n    event CollectingDisabled();\\n    event ClaimingEnabled();\\n    event ClaimingDisabled();\\n    event LockingEnabled();\\n    event LockingDisabled();\\n    event UpdatedAllocationRate(uint256 rate);\\n    event UpdatedAllocationLimit(uint256 limit);\\n    event UpdatedToken(address token);\\n    event AddToWhitelist(address candidate);\\n    event RemoveFromWhitelist(address candidate);\\n    event StartLockPeriod();\\n\\n    modifier qualifyCheck() {\\n        _checkQualification();\\n        _;\\n    }\\n\\n    /// Deposit native token\\n    function deposit() external payable {\\n        _deposit(msg.value, _msgSender());\\n    }\\n\\n    /// Claiming the tokens\\n    /// @notice claiming is only possible when the claiming period has started\\n    /// @dev it also makes some qualify checks whether sender is allowed to execute, otherwise it reverts\\n    /// @dev possible to execute when claming is started\\n    function claimTokens() external nonReentrant qualifyCheck {\\n        if (!claiming) revert(\\\"not started\\\");\\n        uint256 _amount = _calcClaimAmount(_msgSender());\\n        if (!IERC20(token).transfer(_msgSender(), _amount)) revert(\\\"payout failed\\\");\\n        claimed[_msgSender()] = true;\\n        claimedAmount[_msgSender()] = _amount;\\n        totalClaimedTokens += _amount;\\n        emit Claimed(_msgSender(), _amount);\\n    }\\n\\n    /// Locks the tokens\\n    /// @notice the sender will enter a lock state with his allocated amount of tokens\\n    /// @dev it also makes some qualify checks whether sender is allowed to execute, otherwise it reverts\\n    /// @dev possible to execute when claming is started\\n    function lockJoin() external qualifyCheck {\\n        if (!claiming) revert(\\\"not started\\\");\\n        if (startTimestamp > 0) revert(\\\"lock not possible anymore\\\");\\n        uint256 _amount = _calcClaimAmount(_msgSender());\\n        locked[_msgSender()] = true;\\n        lockedAmount[_msgSender()] = _amount;\\n        totalLockedTokens += _amount;\\n        emit LockJoin(_msgSender(), _amount);\\n    }\\n\\n    /// Leaves the lock of the tokens\\n    /// @notice The sender will leave the locked state if he has joined it.\\n    /// @notice After leaving, he will auto claim the tokens and not be able to join the lock anymore.\\n    /// @notice The sender can leave at any time. Before the lock period, he has not gained any rewards\\n    /// @notice and claims only his initial allocated amount of tokens. If the lock period has started\\n    /// @notice and not ended yet, the sender will receive his initial allocated tokens with 30% of the\\n    /// @notice rewards, because of the desined penalty when leaving the locked state before end of period.\\n    /// @notice After the lock period has ended, the sender will receive the allocated amount of tokens\\n    /// @notice and the full amount of rewards.\\n    function lockLeave() external nonReentrant {\\n        if (!locked[_msgSender()]) revert(\\\"not locked\\\");\\n        uint256 _penalty = 0;\\n        uint256 _reward = 0;\\n        uint256 _amount = lockedAmount[_msgSender()];\\n        locked[_msgSender()] = false;\\n        lockedAmount[_msgSender()] = 0;\\n        totalLockedTokens -= _amount;\\n\\n        if (startTimestamp > 0) {\\n            (, _penalty, _reward) = _calcRewards(_amount, startTimestamp);\\n            _amount += _reward;\\n        } else emit Claimed(_msgSender(), _amount);\\n\\n        if (!IERC20(token).transfer(_msgSender(), _amount)) revert(\\\"payout failed\\\");\\n        claimed[_msgSender()] = true;\\n        claimedAmount[_msgSender()] = _amount;\\n        totalClaimedTokens += _amount;\\n\\n        emit LockLeave(_msgSender(), _amount, _reward, _penalty);\\n    }\\n\\n    /// viewables\\n\\n    struct StatsForQualifier {\\n        bool isWhitelisted;\\n        bool hasClaimed;\\n        bool hasLocked;\\n        uint256 tokenBalance;\\n        uint256 lockedAmount;\\n        uint256 claimedAmount;\\n        uint256 totalDeposited;\\n        uint256 currentRewardAmount;\\n        uint256 currentPenaltyAmount;\\n        uint256 currentRewardAmountNet;\\n        uint256 estimatedTotalRewardAmount;\\n        uint256 estimatedTotalClaimAmount;\\n    }\\n\\n    /// Returns atm stats for a given qualifier\\n    /// @param _qualifier address of the account\\n    /// @return _stats statistics for a qualifier\\n    /// @dev `isWhitelisted` flag if the qualifier is whitelisted or not\\n    /// @dev `hasClaimed` flag if the qualifier has claimed his tokens\\n    /// @dev `hasLocked` flag if the qualifier has locked his tokens\\n    /// @dev `tokenBalance` qualifiers balance of the token\\n    /// @dev `lockedAmount` amount of locked tokens\\n    /// @dev `claimedAmount` amount of claimed tokens\\n    /// @dev `totalDeposited` amount of deposited native\\n    /// @dev `currentRewardAmount` returns the current reward amount (only if lock period has started, else 0)\\n    /// @dev `currentPenaltyAmount` returns the current penalty amount if the qualifier leaves the lock (only if lock period has started, else 0)\\n    /// @dev `currentRewardAmountNet` returns the current rewart amount excl. penalty amount (only if lock period has started, else 0)\\n    /// @dev `estimatedTotalRewardAmount` potential amount of rewards qualifier receives after whole lock period\\n    /// @dev `estimatedTotalClaimAmount` potential total amount (accumulated + rewards) which the qualifier will receive after whole lock period\\n    function getStatsForQualifier(address _qualifier) external view returns (StatsForQualifier memory _stats) {\\n        uint256 _amount = locked[_qualifier] ? lockedAmount[_qualifier] : _calcClaimAmount(_qualifier);\\n        (uint256 _currentRewardAmount, uint256 _currentPenaltyAmount, uint256 _currentRewardAmountNet) = _calcRewards(\\n            lockedAmount[_qualifier],\\n            startTimestamp > 0 ? startTimestamp : block.timestamp\\n        );\\n        _stats = StatsForQualifier(\\n            whitelist[_qualifier],\\n            claimed[_qualifier],\\n            locked[_qualifier],\\n            token != address(0) ? IERC20(token).balanceOf(_qualifier) : 0,\\n            lockedAmount[_qualifier],\\n            claimedAmount[_qualifier],\\n            deposits[_qualifier],\\n            _currentRewardAmount,\\n            _currentPenaltyAmount,\\n            _currentRewardAmountNet,\\n            (_amount * TOTAL_REWARD_BPS) / 10_000,\\n            _amount + (_amount * TOTAL_REWARD_BPS) / 10_000\\n        );\\n    }\\n\\n    struct Stats {\\n        bool collecting;\\n        bool claiming;\\n        bool lockPeriodActive;\\n        address token;\\n        uint256 tokenBalance;\\n        uint256 allocationLimit;\\n        uint256 tokensPerOneNative;\\n        uint256 totalDeposits;\\n        uint256 totalLockedTokens;\\n        uint256 totalClaimedTokens;\\n        uint256 estimatedTotalLockedTokensRewards;\\n        uint256 estimatedTotalLockedTokensPayouts;\\n        uint256 estimatedTotalTokensPayout;\\n        uint256 lockPeriodStarts;\\n        uint256 lockPeriodEnds;\\n        uint256 lockPeriodInSeconds;\\n        uint256 rewardPenaltyBps;\\n        uint256 totalRewardBps;\\n    }\\n\\n    /// Returns general atm stats\\n    /// @return _stats statistics for a qualifier\\n    /// @dev `collecting` flag if the native token collection has started or not\\n    /// @dev `claiming` flag if the claiming has started or not (will enable claiming and locking functionality)\\n    /// @dev `lockPeriodActive` flag is the lock period has started\\n    /// @dev `token` address of the token\\n    /// @dev `tokenBalance` contract balance of the token\\n    /// @dev `allocationLimit` defined alloctaion limit\\n    /// @dev `tokensPerOneNative` defined tokens per one native\\n    /// @dev `totalDeposits` total amount of native deposits\\n    /// @dev `totalLockedTokens` total amount of locked tokens\\n    /// @dev `totalClaimedTokens` total amount of claimed tokens\\n    /// @dev `estimatedTotalLockedTokensRewards` estimated amount of total rewards paid for current locked tokens\\n    /// @dev `estimatedTotalLockedTokensPayouts` estimated amount of tokens incl. rewards which are getting paid out\\n    /// @dev `estimatedTotalTokensPayout` estimated amount of ALL possible paid out tokens (claimed + locked + rewards)\\n    /// @dev `lockPeriodStarts` the timestamp when the lock period starts\\n    /// @dev `lockPeriodEnds` the timestamp when the lock period ends\\n    /// @dev `lockPeriodInSeconds` lock period in seconds which result in 365d or 1y\\n    /// @dev `rewardPenaltyBps` % loyalty penalty in basis points\\n    /// @dev `totalRewardBps` % reward in basis points\\n    function getStats() external view returns (Stats memory _stats) {\\n        _stats = Stats(\\n            collecting,\\n            claiming,\\n            startTimestamp > 0,\\n            token,\\n            token != address(0) ? IERC20(token).balanceOf(address(this)) : 0,\\n            allocationLimit,\\n            tokensPerOneNative,\\n            totalDeposits,\\n            totalLockedTokens,\\n            totalClaimedTokens,\\n            (totalLockedTokens * TOTAL_REWARD_BPS) / 10_000,\\n            totalLockedTokens + ((totalLockedTokens * TOTAL_REWARD_BPS) / 10_000),\\n            ((totalDeposits * tokensPerOneNative) / 10 ** 18) + ((totalLockedTokens * TOTAL_REWARD_BPS) / 10_000),\\n            startTimestamp,\\n            startTimestamp > 0 ? startTimestamp + LOCK_PERIOD : 0,\\n            LOCK_PERIOD,\\n            REWARD_PENALTY_BPS,\\n            TOTAL_REWARD_BPS\\n        );\\n    }\\n\\n    /// admin\\n\\n    /// Starts the lock period\\n    function startLockPeriod() external onlyOwner {\\n        if (!claiming) revert(\\\"not started\\\");\\n        if (startTimestamp > 0) revert(\\\"lock period already started\\\");\\n        startTimestamp = block.timestamp;\\n        emit StartLockPeriod();\\n    }\\n\\n    /// Recovers the native funds and sends it to the owner\\n    function recoverNative() external onlyOwner {\\n        uint256 _balance = address(this).balance;\\n        if (_balance > 0) payable(owner()).sendValue(_balance);\\n    }\\n\\n    /// Recovers the tokens and sends it to the owner\\n    function recoverTokens(address _asset) external onlyOwner {\\n        uint256 _balance = IERC20(_asset).balanceOf(address(this));\\n        if (_balance > 0) IERC20(_asset).transfer(owner(), _balance);\\n    }\\n\\n    /// Sets the state of the claiming\\n    /// @param _enable true enables, false disables\\n    /// @dev when enabling, automaticall disabled collectiong flag and vice versa\\n    function enableClaiming(bool _enable) external onlyOwner {\\n        if (_enable && tokensPerOneNative == 0) revert(\\\"no rate set\\\");\\n        claiming = _enable;\\n        enableCollecting(!_enable);\\n        if (_enable) emit ClaimingEnabled();\\n        else emit ClaimingDisabled();\\n    }\\n\\n    /// Sets the state of the collecting\\n    /// @param _enable true enables, false disables\\n    function enableCollecting(bool _enable) public onlyOwner {\\n        collecting = _enable;\\n        if (_enable) emit CollectingEnabled();\\n        else emit CollectingDisabled();\\n    }\\n\\n    /// Sets the allocation rate\\n    /// @param _rate amount of tokens\\n    /// @notice this number is used to calculate the accumulated token\\n    function setAllocationRate(uint256 _rate) external onlyOwner {\\n        tokensPerOneNative = _rate;\\n        emit UpdatedAllocationRate(_rate);\\n    }\\n\\n    /// Sets the deposit limit for accounts\\n    /// @param _limit amount of native token a participant can deposit\\n    function setAllocationLimit(uint256 _limit) external onlyOwner {\\n        allocationLimit = _limit;\\n        emit UpdatedAllocationLimit(_limit);\\n    }\\n\\n    /// Sets the token address which to pay out\\n    /// @param _token address of the token\\n    function setToken(address _token) external onlyOwner {\\n        if (claiming) revert(\\\"claiming already started\\\");\\n        token = _token;\\n        emit UpdatedToken(_token);\\n    }\\n\\n    /// Adds an account to the whitelist\\n    /// @param _account address of the participant\\n    function addToWhitelist(address _account) public onlyOwner {\\n        whitelist[_account] = true;\\n        emit AddToWhitelist(_account);\\n    }\\n\\n    /// Adds multiple accounts to the whitelist\\n    /// @param _accounts array of addresses of participants\\n    function addToWhitelistInBulk(address[] calldata _accounts) external onlyOwner {\\n        for (uint256 i = 0; i < _accounts.length; i++) addToWhitelist(_accounts[i]);\\n    }\\n\\n    /// Removes the address from the whitelist\\n    /// @param _account address of the participant\\n    /// @notice When the address is being removed and has already deposited, this amount will be sent back to the account\\n    function removeFromWhitelist(address payable _account) external onlyOwner {\\n        uint256 _returnAmount = deposits[_account];\\n        if (_returnAmount > 0) {\\n            delete deposits[_account];\\n            totalDeposits -= _returnAmount;\\n            _account.sendValue(_returnAmount);\\n        }\\n        delete whitelist[_account];\\n        emit RemoveFromWhitelist(_account);\\n    }\\n\\n    /// internals\\n\\n    function _checkQualification() internal view {\\n        if (!whitelist[_msgSender()]) revert(\\\"not whitelisted\\\");\\n        if (deposits[_msgSender()] == 0) revert(\\\"not deposited\\\");\\n        if (claimed[_msgSender()]) revert(\\\"already claimed\\\");\\n        if (locked[_msgSender()]) revert(\\\"already locked\\\");\\n    }\\n\\n    function _deposit(uint256 _amount, address _sender) internal nonReentrant {\\n        if (!collecting) revert(\\\"not started\\\");\\n        if (!whitelist[_sender]) revert(\\\"not whitelisted\\\");\\n        uint256 _depositAmount = _amount;\\n        uint256 _actual = deposits[_sender] + _depositAmount;\\n        if (_actual > allocationLimit) {\\n            uint256 _sendBack = _actual - allocationLimit;\\n            payable(_sender).sendValue(_sendBack);\\n            _depositAmount = allocationLimit - deposits[_sender];\\n        }\\n        deposits[_sender] += _depositAmount;\\n        totalDeposits += _depositAmount;\\n        emit Deposit(_sender, _amount);\\n    }\\n\\n    function _calcClaimAmount(address _depositer) internal view returns (uint256 _amount) {\\n        return (tokensPerOneNative * deposits[_depositer]) / 10 ** 18;\\n    }\\n\\n    // function _calcClaimAmountTotal() internal view returns (uint256 _amount) {\\n    //     return (tokensPerOneNative * totalDeposits) / 10 ** 18;\\n    // }\\n\\n    function _calcRewards(\\n        uint256 _lockedAmount,\\n        uint256 _startTimestamp\\n    ) internal view returns (uint256 _amount, uint256 _penalty, uint256 _amountNet) {\\n        _amount = (_lockedAmount * TOTAL_REWARD_BPS) / 10_000;\\n        _amountNet = _amount;\\n        if (block.timestamp > _startTimestamp && block.timestamp < _startTimestamp + LOCK_PERIOD) {\\n            _amount = (((_amount * DENOMINATOR) / LOCK_PERIOD) * (block.timestamp - _startTimestamp)) / DENOMINATOR;\\n            _penalty = (_amount * REWARD_PENALTY_BPS) / 10_000;\\n        } else if (block.timestamp <= _startTimestamp) {\\n            _amount = 0;\\n            _amountNet = 0;\\n        }\\n\\n        _amountNet = _amount - _penalty;\\n    }\\n\\n    /// receiver\\n    receive() external payable {\\n        _deposit(msg.value, _msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/interfaces/IERC20Facet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\n/// @title ERC20 Facet Interface\\n/// @author Daniel <danieldegendev@gmail.com>\\ninterface IERC20Facet {\\n    /// Minting an amount of tokens for a designated receiver\\n    /// @param _to receiver address of the token\\n    /// @param _amount receiving amount\\n    /// @return _success Returns true is operation succeeds\\n    /// @notice It allows to mint specified amount until the bridge supply cap is reached\\n    function mint(address _to, uint256 _amount) external returns (bool _success);\\n\\n    /// Burning an amount of tokens from sender\\n    /// @param _amount burnable amount\\n    /// @return _success Returns true is operation succeeds\\n    /// @notice It allows to burn a bridge supply until its supply is 0, even if the cap is already set to 0\\n    function burn(uint256 _amount) external returns (bool _success);\\n\\n    /// Burning an amount of tokens from a designated holder\\n    /// @param _from holder address to burn the tokens from\\n    /// @param _amount burnable amount\\n    /// @return _success Returns true is operation succeeds\\n    /// @notice It allows to burn a bridge supply until its supply is 0, even if the cap is already set to 0\\n    function burn(address _from, uint256 _amount) external returns (bool _success);\\n\\n    /// Burning an amount of tokens from a designated holder\\n    /// @param _from holder address to burn the tokens from\\n    /// @param _amount burnable amount\\n    /// @return _success Returns true is operation succeeds\\n    /// @notice It allows to burn a bridge supply until its supply is 0, even if the cap is already set to 0\\n    function burnFrom(address _from, uint256 _amount) external returns (bool _success);\\n\\n    /// @notice This enables the transfers of this tokens\\n    function enable() external;\\n\\n    /// @notice This disables the transfers of this tokens\\n    function disable() external;\\n\\n    /// Exclude an account from being charged on fees\\n    /// @param _account address to exclude\\n    function excludeAccountFromTax(address _account) external;\\n\\n    /// Includes an account againt to pay fees\\n    /// @param _account address to include\\n    function includeAccountForTax(address _account) external;\\n\\n    /// Adds a liquidity pool address\\n    /// @param _lp address of the liquidity pool of the token\\n    function addLP(address _lp) external;\\n\\n    /// Removes a liquidity pool address\\n    /// @param _lp address of the liquidity pool of the token\\n    function removeLP(address _lp) external;\\n\\n    /// Returns the existence of an lp address\\n    /// @return _has has lp or not\\n    function hasLP(address _lp) external view returns (bool _has);\\n\\n    /// Adds a buy fee based on a fee id\\n    /// @param _id fee id\\n    function addBuyFee(bytes32 _id) external;\\n\\n    /// Adds a sell fee based on a fee id\\n    /// @param _id fee id\\n    function addSellFee(bytes32 _id) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"AddToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ClaimingDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ClaimingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CollectingDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CollectingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockJoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"name\":\"LockLeave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LockingDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LockingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"RemoveFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StartLockPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"UpdatedAllocationLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"UpdatedAllocationRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UpdatedToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_PENALTY_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_REWARD_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"addToWhitelistInBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocationLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claiming\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collecting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"enableClaiming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"enableCollecting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"collecting\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claiming\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lockPeriodActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocationLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensPerOneNative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLockedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedTotalLockedTokensRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedTotalLockedTokensPayouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedTotalTokensPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriodStarts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriodEnds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriodInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPenaltyBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardBps\",\"type\":\"uint256\"}],\"internalType\":\"struct DegenATM.Stats\",\"name\":\"_stats\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_qualifier\",\"type\":\"address\"}],\"name\":\"getStatsForQualifier\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasLocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPenaltyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentRewardAmountNet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedTotalRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedTotalClaimAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct DegenATM.StatsForQualifier\",\"name\":\"_stats\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockJoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockLeave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setAllocationLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setAllocationRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensPerOneNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DegenATM", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}