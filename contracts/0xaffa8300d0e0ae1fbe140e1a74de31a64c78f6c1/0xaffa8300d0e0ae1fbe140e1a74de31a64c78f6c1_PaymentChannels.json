{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/OperatorRecoverable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity 0.8.9;\\n/*\\n *@#+:-*==   .:. :     =#*=.  ..    :=**-    :+%@@@@@#*+-..........        .-.-@@\\n *%%*.. +*:    =%.--     :+***+=++**=.    .+%@@@@@*-            . . .     .  -+= \\n *         -==+++. :#:        ..       .=#@@@@@*-   .:=*#%@@@@%#*=.  ...:::::    \\n *     .:-======+=--%@*.             .*@@@@@@+   .=#@@@@@@##*#%@@@@@*-           \\n *-:::-===-::------+#@@@*.         :*@@@@@@=   :*@@@%*==------=--+@@@@@#=:    .-=\\n *=++==:::      .:=+=:.-=. .-**+++#**#@@@+   -#@@%=-::==       :*+--*@@@@@@@@@@@@\\n *.....-=*+***+-.   .+#*-    +@@@@@@@@@+.  -%@@%-::. .-     .::-@@@%- -#@@@@@@@@@\\n *   :*=@@@@@@@@@@#=.  -*@%#%@@@@@@@@*.  :#@@%-::    :=    =*%@@@@@@@%++*+*%@@@@@\\n * .+*%@#+-:-=+*##*#@#=.  -*%@@@@@#=.  -#@@%-::       -:       :+@@@@@@@@*:  ..  \\n *@@@%=         .-. :*@@#=.   ...   .=%@@#-:-      :-=++#####+=:  -#@@@@@@@@%*+++\\n *@*:       :-=+::..   -#@@%+==--=+#@@%=.:+*=  :=*%@@@@%@@@@@@@@@*- .+%@@@@ SMG @\\n *.     .+%@@=%%%##=....  :+*%%@@%#+-. =%@@@@@@%@@@@@@@@@@@%%%%@@@@@#=:-+%@@@@@@@\\n */\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./OperatorRole.sol\\\";\\n\\n/**\\n * @title OperatorRecoverable\\n * @notice Copyright (c) 2023 Special Mechanisms Group\\n *\\n * @author SMG <dev@mechanism.org>\\n *\\n * @dev The OperatorRecoverable contract is designed to allow a contract's \\n *      operator to recover tokens which were accidentally transferred to\\n *      it, but which the contract does not otherwise support. This prevents\\n *      users having their tokens \\\"bricked\\\", and also allows the operator to\\n *      clean out any spurious tokens that may have been transferred to it\\n *      on purpose.\\n */\\nabstract contract OperatorRecoverable is OperatorRole {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Maps token addresses to whether they are unrecoverable.\\n     */ \\n    mapping(address => bool) private isTokenUnrecoverable;\\n\\n    event SetUnrecoverable(address indexed token);\\n    event Recovered(address indexed token, address indexed operator);\\n\\n    /**\\n     * @notice Marks a token address as unrecoverable by the operator. \\n     *\\n     * @dev Only the operator may call this function. \\n     * @dev Once a token is marked as unrecoverable there is no way for\\n     *      anyone, operator included, to mark it as recoverable again. \\n     *\\n     * @param _token Address of the token that will be unrecoverable.\\n     */\\n    function setTokenUnrecoverable(\\n        address _token\\n    ) \\n        public \\n        onlyOperator \\n    {\\n        isTokenUnrecoverable[_token] = true;\\n        emit SetUnrecoverable(_token);\\n    }\\n\\n    /**\\n     * @notice Recovers recoverable tokens.\\n     *\\n     * @dev Only the operator may call this function.\\n     * @dev The purpose of this function is to allow the operator to assist \\n     *      users who accidentally transferred the wrong kind of tokens to \\n     *      the smart contract.\\n     * @dev If the token being recovered is ETH (which is not an ERC20 and\\n     *      hence does not have a token address), the caller should provide \\n     *      `0x0` as the value of `_token`.\\n     *\\n     * @param _token Address of the token that the operator will recover. \\n     */\\n    function recoverToken(\\n        address _token\\n    ) \\n        external \\n        onlyOperator \\n    {\\n        require(\\n            !isTokenUnrecoverable[_token],\\n            \\\"OperatorRecoverable: cannot recover, token marked as unrecoverable.\\\"\\n        );\\n\\n        if (_token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) {\\n            /* ETH */   \\n            (bool success,) = msg.sender.call{ value: address(this).balance }(\\\"\\\");\\n            require(success, \\\"OperatorRecoverable: ETH transfer failed.\\\");\\n        } else {\\n            /* ERC20 */   \\n            IERC20(_token).safeTransfer(\\n                msg.sender,\\n                IERC20(_token).balanceOf(address(this))\\n            );\\n        }\\n\\n        emit Recovered(_token, msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/OperatorRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity 0.8.9;\\n/*\\n *@#+:-*==   .:. :     =#*=.  ..    :=**-    :+%@@@@@#*+-..........        .-.-@@\\n *%%*.. +*:    =%.--     :+***+=++**=.    .+%@@@@@*-            . . .     .  -+= \\n *         -==+++. :#:        ..       .=#@@@@@*-   .:=*#%@@@@%#*=.  ...:::::    \\n *     .:-======+=--%@*.             .*@@@@@@+   .=#@@@@@@##*#%@@@@@*-           \\n *-:::-===-::------+#@@@*.         :*@@@@@@=   :*@@@%*==------=--+@@@@@#=:    .-=\\n *=++==:::      .:=+=:.-=. .-**+++#**#@@@+   -#@@%=-::==       :*+--*@@@@@@@@@@@@\\n *.....-=*+***+-.   .+#*-    +@@@@@@@@@+.  -%@@%-::. .-     .::-@@@%- -#@@@@@@@@@\\n *   :*=@@@@@@@@@@#=.  -*@%#%@@@@@@@@*.  :#@@%-::    :=    =*%@@@@@@@%++*+*%@@@@@\\n * .+*%@#+-:-=+*##*#@#=.  -*%@@@@@#=.  -#@@%-::       -:       :+@@@@@@@@*:  ..  \\n *@@@%=         .-. :*@@#=.   ...   .=%@@#-:-      :-=++#####+=:  -#@@@@@@@@%*+++\\n *@*:       :-=+::..   -#@@%+==--=+#@@%=.:+*=  :=*%@@@@%@@@@@@@@@*- .+%@@@@ SMG @\\n *.     .+%@@=%%%##=....  :+*%%@@%#+-. =%@@@@@@%@@@@@@@@@@@%%%%@@@@@#=:-+%@@@@@@@\\n */\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\n\\n/**\\n * @title OperatorRole \\n * @notice Copyright (c) 2023 Special Mechanisms Group\\n *\\n * @author SMG <dev@mechanism.org>\\n *\\n * @dev The OperatorRole contract defines a role called OPERATOR_ROLE which can \\n *      be assigned to certain addresses, and which can be used to control \\n *      access to certain functions on the smart contract. In addition, this\\n *      contract sets up the DEFAULT_ADMIN_ROLE.\\n */\\nabstract contract OperatorRole is AccessControlEnumerable {\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    event AddedOperator(address indexed _address);\\n    event RemovedOperator(address indexed _address);\\n\\n    /**\\n     * @notice Constructor\\n     *\\n     * @dev The deployer will be set as the first address with the roles\\n     *      DEFAULT_ADMIN_ROLE and OPERATOR_ROLE. DEFAULT_ADMIN_ROLE is set \\n     *      as the administrator of OPERATOR_ROLE, which means that only a \\n     *      caller with the DEFAULT_ADMIN_ROLE can call the `grantRole` or \\n     *      `renounceRole` functions for OPERATOR_ROLE. \\n     */\\n    constructor() \\n    {\\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _grantRole(OPERATOR_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Allows only the Operator role to call certain functions.\\n     */\\n    modifier onlyOperator() \\n    {\\n        require(isOperator(_msgSender()), \\\"OperatorRole: caller does not have the Operator role.\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks whether an address has been granted OPERATOR_ROLE.\\n     * \\n     * @param _address Address to check.\\n     * @return bool 'true' if the address has the role, otherwise 'false'. \\n     */\\n    function isOperator(\\n        address _address\\n    ) \\n        public \\n        view \\n        returns (bool) \\n    {\\n        return hasRole(OPERATOR_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Give an address OPERATOR_ROLE.\\n     *\\n     * @dev Caller must have DEFAULT_ADMIN_ROLE.\\n     * \\n     * @param _address Address to be granted OPERATOR_ROLE.\\n     */\\n    function addOperator(\\n        address _address\\n    ) \\n        public \\n    {\\n        _addOperator(_address);\\n    }\\n\\n    /**\\n     * @notice Remove OPERATOR_ROLE from msg.sender.\\n     *\\n     * @dev Caller must have OPERATOR_ROLE.\\n     */\\n    function renounceOperator() \\n        public \\n        virtual \\n    {\\n        _removeOperator(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Add OPERATOR_ROLE to an address.\\n     *\\n     * @dev Caller must have DEFAULT_ADMIN_ROLE.\\n     * \\n     * @param _address Address to have OPERATOR_ROLE granted.\\n     */\\n    function _addOperator(\\n        address _address\\n    ) \\n        internal \\n    {\\n        grantRole(OPERATOR_ROLE, _address);\\n        emit AddedOperator(_address);\\n    }\\n\\n    /**\\n     * @notice Remove OPERATOR_ROLE from an address.\\n     *\\n     * @dev Caller must have DEFAULT_ADMIN_ROLE.\\n     * \\n     * @param _address Address to have OPERATOR_ROLE renounced.\\n     */\\n    function _removeOperator(\\n        address _address\\n    ) \\n        internal \\n    {\\n        renounceRole(OPERATOR_ROLE, _address);\\n        emit RemovedOperator(_address);\\n    }\\n\\n    /**\\n     * @dev Overload {AccessControlEnumerable-_revokeRole} to ensure at least one operator/admin remains\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        uint256 roleMemberCount = getRoleMemberCount(role);\\n        require (roleMemberCount > 0, \\\"OperatorRole: contract must have at least one operator\\\");\\n    }\\n\\n    /**\\n     * @dev Overload {AccessControl-_renounceRole} to ensure at least one operator/admin remains\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PaymentChannels.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n/*\\n *@#+:-*==   .:. :     =#*=.  ..    :=**-    :+%@@@@@#*+-..........        .-.-@@\\n *%%*.. +*:    =%.--     :+***+=++**=.    .+%@@@@@*-            . . .     .  -+= \\n *         -==+++. :#:        ..       .=#@@@@@*-   .:=*#%@@@@%#*=.  ...:::::    \\n *     .:-======+=--%@*.             .*@@@@@@+   .=#@@@@@@##*#%@@@@@*-           \\n *-:::-===-::------+#@@@*.         :*@@@@@@=   :*@@@%*==------=--+@@@@@#=:    .-=\\n *=++==:::      .:=+=:.-=. .-**+++#**#@@@+   -#@@%=-::==       :*+--*@@@@@@@@@@@@\\n *.....-=*+***+-.   .+#*-    +@@@@@@@@@+.  -%@@%-::. .-     .::-@@@%- -#@@@@@@@@@\\n *   :*=@@@@@@@@@@#=.  -*@%#%@@@@@@@@*.  :#@@%-::    :=    =*%@@@@@@@%++*+*%@@@@@\\n * .+*%@#+-:-=+*##*#@#=.  -*%@@@@@#=.  -#@@%-::       -:       :+@@@@@@@@*:  ..  \\n *@@@%=         .-. :*@@#=.   ...   .=%@@#-:-      :-=++#####+=:  -#@@@@@@@@%*+++\\n *@*:       :-=+::..   -#@@%+==--=+#@@%=.:+*=  :=*%@@@@%@@@@@@@@@*- .+%@@@@ SMG @\\n *.     .+%@@=%%%##=....  :+*%%@@%#+-. =%@@@@@@%@@@@@@@@@@@%%%%@@@@@#=:-+%@@@@@@@\\n */\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./OperatorRecoverable.sol\\\";\\n\\ninterface IWETH {\\n    function withdraw(uint wad) external;\\n}\\n\\n/**\\n * @title PaymentChannels \\n * @notice Copyright (c) 2023 Special Mechanisms Group\\n *\\n * @author SMG <dev@mechanism.org>\\n *\\n * @notice The PaymentChannels contract implements the on-chain portion of a\\n *         payment channel system. \\n *\\n *         A payment channel allows for two parties to conduct a series of\\n *         transactions of the main blockchain, then record the final result\\n *         onto the main blockchain in one transaction.\\n *\\n *         Their efficiency makes them ideally suited for high-performance\\n *         micropayments.\\n *\\n *         A payment channel is created by locking funds in a smart contract,\\n *         then exchanging of-chain commitments with the channel's counterparty.\\n *         The channel can be \\\"settled\\\" at any time by providing a more recent\\n *         commitment, and \\\"closed\\\" when both parties agree on the final state.\\n *\\n *         Closing a channel is done either by providing a special commitment \\n *         that both parties agree is the last, or by providing a commitment \\n *         and waiting for a challenge period where the counterparty is free to \\n *         provide a more recent commitment if one exists.\\n */\\ncontract PaymentChannels is OperatorRecoverable {\\n    using SafeERC20 for IERC20;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTANTS \\n    //////////////////////////////////////////////////////////////*/\\n\\n    IERC20 constant WETH = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    bytes constant public INSTANT_UNSTAKE_COMMITMENT_DATA = bytes(\\\"INSTANT\\\");\\n\\n    // EIP-712 constants\\n    string private constant CONTRACT_NAME = \\\"PaymentChannels\\\";\\n    string private constant CONTRACT_VERSION = \\\"1.0\\\";\\n    bytes32 private constant TYPEHASH_DOMAIN = keccak256(\\n        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n    );\\n    bytes32 private constant TYPEHASH_STAKE_COMMITMENT = keccak256(\\n        \\\"StakeCommitment(address stakerAddress,uint256 stakeSpentAmount,uint256 stakeCommitmentNonce,uint256 stakeChannelNonce,bytes data)\\\"\\n    );\\n    bytes32 private constant TYPEHASH_CLAIM_COMMITMENT = keccak256(\\n        \\\"ClaimCommitment(address claimerAddress,uint256 claimsEarnedAmount)\\\"\\n    );\\n    bytes32 private immutable DOMAIN_SEPARATOR;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ADDRESSES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /** \\n     * @notice Address of the stakeNotary \\n     * @dev The stakeNotary is an Ethereum account which co-signs commitments \\n     *      made by the stakerAddress on the stake payment channels. \\n     */\\n    address public stakeNotaryAddress;\\n\\n    /**\\n     * @notice Address of the claimNotary\\n     * @dev The claimNotary is an Ethereum account which co-signs commitments\\n     *      made by the claimerAddress on the claim payment channels. \\n     */\\n    address public claimNotaryAddress;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     PAYMENT CHANNEL STATE (STAKE)\\n    //////////////////////////////////////////////////////////////*/\\n    \\n    /** \\n     * @notice Amount of WETH staked by a stakerAddress. \\n     *\\n     * @dev This value is only changed after calling the functions `stake`, \\n     *      `unstake`, or `safeUnstake`, the latter who of which reset its\\n     *      value to 0.\\n     */\\n    mapping (address => uint256) public stakedAmount;\\n\\n    /**\\n     * @notice Nonce used to order StakeCommitments.\\n     *\\n     * @dev This nonce increments each time a StakeCommitment is made on the\\n     *      payment channel, but will only increment on this contract when\\n     *      those StakeCommitments are brought on-chain using the functions\\n     *      `settleStakeCommitments`, `unstake`, or `startTimelockedUnstake`. \\n     *      Its value is reset to 0 when the payment channel is closed.\\n     */\\n    mapping (address => uint256) public stakeCommitmentNonce;\\n\\n    /** \\n     * @notice Amount of WETH spent since the payment channel was opened.\\n     *\\n     * @dev Cannot exceed `stakedAmount`. Resets to 0 when the payment channel\\n     *      is closed.\\n     */\\n    mapping (address => uint256) public stakeSpentAmount;\\n\\n    /** \\n     * @notice Nonce used to order each time the payment channel is opened. \\n     * \\n     * @dev This nonce increments each time the payment channel is closed,\\n     *      so that if the same address opens a new payment channel after\\n     *      having closed one, it will be unique. This prevents certain\\n     *      channel re-use attacks.\\n     */\\n    mapping (address => uint256) public stakeChannelNonce;\\n\\n    /** \\n     * @notice Timestamp used to measure the timelock for unstaking.\\n     *\\n     * @dev When this value is non-zero, it means the payment channel is in\\n     *      its timelocked unstaking period, limiting certain operations.\\n     * @dev Unlike the other mappings, this one is indexed by a hash of a \\n     *      StakeCommitment rather than an address. This is to prevent the need\\n     *      for another write to zero out the timestamp each time a channel is\\n     *      closed. By using a StakeCommitment hash instead (which is unique \\n     *      due to the `stakeCommitmentNonce` and `stakeChannelNonce`), we \\n     *      avoid the need for that additional write, saving gas.\\n     */\\n    mapping (bytes32 => uint256) public timelockedUnstakeTimestamp;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    PAYMENT CHANNEL STATE (CLAIMS)\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Amount of WETH each claimerAddress has claimed.\\n     * \\n     * @dev Note that this value never decreases and persists for the lifetime \\n     *      of the claimerAddress.\\n     */\\n    mapping (address => uint256) public claimedAmount;\\n\\n    /**\\n     * @notice Total amount of claimable WETH.\\n     *\\n     * @dev Updated when the functions `adjustTotalClaimableAmount`, \\n     *      `addToTotalClaimableAmount` or `settleClaim` are called.\\n     */\\n    uint256 public totalClaimableAmount;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                EVENTS \\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Staked(address indexed _stakerAddress, uint256 _stakeChannelNonce, uint256 _amount);\\n    event Claimed(address indexed _claimerAddress, uint256 _amount);\\n    event SetStakeNotaryAddress(address indexed _oldStakeNotaryAddress, address indexed _newStakeNotaryAddress);\\n    event SetClaimNotaryAddress(address indexed _oldClaimNotaryAddress, address indexed _newClaimNotaryAddress);\\n    event Unstaked(address indexed _stakerAddress, uint256 _stakeChannelNonce, uint256 _amount);\\n    event StartedTimelockedUnstake(\\n        address indexed _stakerAddress, \\n        uint256 _stakeSpentAmount, \\n        uint256 _stakeCommitmentNonce, \\n        uint256 _stakeChannelNonce, \\n        uint256 _timelockedUnstakeTimestamp);\\n    event AddedToTotalClaimableAmount(uint256 _amount);\\n    event SettledStakeCommitments(uint256 _totalNewStakeRefundedAmount, uint256 _totalNewStakeSpentAmount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            DATA STRUCTURES \\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice A commitment on the stake payment channel.\\n     *\\n     * @dev The data in the StakeCommitment is how we represent a distinct\\n     *      state transition on the payment channel, such as a \\\"spend,\\\" a\\n     *      \\\"refund,\\\" or an \\\"unstake\\\". This data is periodically written\\n     *      on-chain using `settleStakeCommitments`, or when calling `unstake`\\n     *      or `startTimelockedUnstake` to begin the process of closing a \\n     *      payment channel.\\n     */\\n    struct StakeCommitment {\\n        /** \\n         * @dev Address of the owner of the stake and the payment channel \\n         */\\n        address stakerAddress;\\n        /** \\n         * @dev Amount of WETH that the owner has spent since opening the \\n         *      payment channel. \\n         */\\n        uint256 stakeSpentAmount;\\n        /**\\n         * @dev The nonce of the commitment. \\n         */\\n        uint256 stakeCommitmentNonce;\\n        /**\\n         * @dev The nonce of the channel.\\n         */\\n        uint256 stakeChannelNonce;\\n        /**\\n         * @dev Reserved for off-chain use. Typically holds the hash of the\\n         *      previous commitment in a chain to ensure that the state remains\\n         *      consistent. However it is also used in `unstake` to signal a\\n         *      special StakeCommitment.\\n         */\\n        bytes data;\\n        /**\\n         * @dev The signature of the staker on the output of the function\\n         *      `getStakeCommitmentHash` or a locally-computed equivalent.\\n         */\\n        bytes stakerSignature;\\n        /**\\n         * @dev The signature of the stakeNotary on the output of the function\\n         *      `getStakeCommitmentHash` or a locally-computed equivalent.\\n         */\\n        bytes stakeNotarySignature;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          UTILITY METHODS \\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Fetch the most recent settled state of a payment channel.\\n     *\\n     * @dev Remember that the actual most recent state of the payment channel\\n     *      may be running ahead of the one on-chain, if there are new \\n     *      off-chain StakeCommitments that have yet to be settled. \\n     *\\n     * @param _stakerAddress The staker address.\\n     * @return _stakedAmount The amount of WETH staked.\\n     * @return _stakeCommitmentNonce The stake commitment nonce.\\n     * @return _stakeSpentAmount The amount of WETH the staker has spent. \\n     * @return _stakeChannelNonce The stake channel nonce.\\n     * @return _timelockedUnstakeTimestamp The timestamp when startTimelockedUnstake was called. \\n     */\\n    function getStakeChannelState(\\n        address _stakerAddress\\n    ) \\n        external \\n        view \\n        returns (\\n            uint256 _stakedAmount, \\n            uint256 _stakeCommitmentNonce, \\n            uint256 _stakeSpentAmount, \\n            uint256 _stakeChannelNonce, \\n            uint256 _timelockedUnstakeTimestamp\\n        ) \\n    {\\n        return (\\n            stakedAmount[_stakerAddress], \\n            stakeCommitmentNonce[_stakerAddress], \\n            stakeSpentAmount[_stakerAddress], \\n            stakeChannelNonce[_stakerAddress], \\n            getTimelockedUnstakeTimestamp(_stakerAddress));\\n    }\\n\\n    /** \\n     * @notice Compute the commitment hash used for stake signatures.\\n     *\\n     * @dev Convenience function that can be used by a staker or stakeNotary \\n     *      to generate the message they will sign to create a valid \\n     *      stakerSignature or stakeNotarySignature.\\n     *\\n     * @param _stakerAddress A staker address.\\n     * @param _stakeSpentAmount The amount of WETH the staker has spent. \\n     * @param _stakeCommitmentNonce The stake commitment nonce.\\n     * @param _stakeChannelNonce The stake channel nonce.\\n     * @return bytes32 Keccak256 hash of the given StakeCommitment properties.\\n     */\\n    function getStakeCommitmentHash(\\n        address _stakerAddress, \\n        uint256 _stakeSpentAmount, \\n        uint256 _stakeCommitmentNonce, \\n        uint256 _stakeChannelNonce, \\n        bytes memory _data\\n    ) \\n        public \\n        view \\n        returns (bytes32) \\n    {\\n        return keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(\\n                    abi.encode(\\n                        TYPEHASH_STAKE_COMMITMENT,\\n                        _stakerAddress, \\n                        _stakeSpentAmount, \\n                        _stakeCommitmentNonce, \\n                        _stakeChannelNonce, \\n                        keccak256(abi.encodePacked(_data))\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /** \\n     * @notice Compute the commitment hash used for stake signatures.\\n     *\\n     * @dev Convenience function that can be used by a staker or stakeNotary \\n     *      to generate the message they will sign to create a valid \\n     *      stakerSignature or stakeNotarySignature.\\n     *\\n     * @param _commitment A StakeCommitment.\\n     * @return bytes32 Keccak256 hash of the given StakeCommitment properties.\\n     */\\n    function getStakeCommitmentHash(\\n        StakeCommitment memory _commitment\\n    ) \\n        internal \\n        view \\n        returns (bytes32) \\n    {\\n        return getStakeCommitmentHash(\\n            _commitment.stakerAddress, \\n            _commitment.stakeSpentAmount, \\n            _commitment.stakeCommitmentNonce, \\n            _commitment.stakeChannelNonce, \\n            _commitment.data);\\n    }\\n\\n    /**\\n     * @notice Compute the commitment hash used for claim signatures.\\n     *\\n     * @dev Convenience function that can be used by a claimer or claimNotary\\n     *      to generate the message they will sign to create a valid \\n     *      claimerSignature or claimNotarySignature.\\n     *\\n     * @param _claimerAddress Address of the claimer.\\n     * @param _claimsEarnedAmount Amount of WETH earned to date by the claimer.\\n     * @return bytes32 Keccak256 hash of the given claim properties.\\n     */\\n    function getClaimCommitmentHash(\\n        address _claimerAddress, \\n        uint256 _claimsEarnedAmount\\n    ) \\n        public \\n        view \\n        returns (bytes32) \\n    {\\n        return keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(\\n                    abi.encode(\\n                        TYPEHASH_CLAIM_COMMITMENT,\\n                        _claimerAddress, \\n                        _claimsEarnedAmount\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /** \\n     * @notice Get the key to look up the timelocked unstake timestamp. \\n     *\\n     * @dev Timestamps are stored by hashing the data from the StakeCommitment\\n     *      a caller provides to startTimelockedUnstake. Because this hash will \\n     *      be unique for unique StakeCommitments, we never need to zero out \\n     *      timestamp, saving gas.\\n     * \\n     * @param _stakerAddress Address of the staker.\\n     * @param _stakeSpentAmount The amount of WETH the staker has spent.\\n     * @param _stakeCommitmentNonce The stake commitment nonce.\\n     * @param _stakeChannelNonce The stake channel nonce.\\n     * @return bytes32 Index into `timelockedUnstakeTimestamp` mapping.\\n     */\\n    function getTimelockedUnstakeTimestampKey(\\n        address _stakerAddress, \\n        uint256 _stakeSpentAmount, \\n        uint256 _stakeCommitmentNonce, \\n        uint256 _stakeChannelNonce\\n    ) \\n        public \\n        pure \\n        returns (bytes32) \\n    {\\n        return keccak256(abi.encode(_stakerAddress, _stakeSpentAmount, _stakeCommitmentNonce, _stakeChannelNonce));\\n    }\\n\\n    /** \\n     * @notice Get the timelocked unstake timestamp for a payment channel. \\n     * \\n     * @dev When the return value is non-zero, it means the associated payment\\n     *      channel is in its timelocked unstake mode, limiting certain\\n     *      functionality.\\n     *\\n     * @param _stakerAddress The staker address that owns the payment channel.\\n     * @return uint256 The timestamp when startTimelockedUnstake was called. \\n     */\\n    function getTimelockedUnstakeTimestamp(\\n        address _stakerAddress\\n    ) \\n        public \\n        view \\n        returns (uint256) \\n    {\\n        return timelockedUnstakeTimestamp[\\n            getTimelockedUnstakeTimestampKey(\\n                _stakerAddress, \\n                stakeSpentAmount[_stakerAddress], \\n                stakeCommitmentNonce[_stakerAddress], \\n                stakeChannelNonce[_stakerAddress])];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            CONSTRUCTOR  \\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice constructor\\n     *\\n     * @param _stakeNotaryAddress Initial stakeNotaryAddress\\n     * @param _claimNotaryAddress Initial claimNotaryAddress\\n     */\\n    constructor(address _stakeNotaryAddress, address _claimNotaryAddress) {\\n        /* Set initial stakeNotary and claimNotary addresses. */\\n        stakeNotaryAddress = _stakeNotaryAddress;\\n        claimNotaryAddress = _claimNotaryAddress;\\n\\n        /* \\n         * We want the smart contract operator to have the ability to recover\\n         * non-WETH ERC20 tokens transferred to it accidentally. The inherited \\n         * OperatorRecoverable contract allows this for any ERC20, and we use \\n         * `setTokenUnrecoverable` to permanently exclude WETH. \\n         * For more, see `OperatorRecoverable.sol`.\\n         */\\n        setTokenUnrecoverable(address(WETH));\\n\\n        /* Initialize EIP-712 Domain Separator */\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                TYPEHASH_DOMAIN,\\n                keccak256(bytes(CONTRACT_NAME)),\\n                keccak256(bytes(CONTRACT_VERSION)),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n\\n        /* Emit events */\\n        emit SetStakeNotaryAddress(address(0), _stakeNotaryAddress);\\n        emit SetClaimNotaryAddress(address(0), _claimNotaryAddress);\\n    }\\n\\n    fallback() external payable {}\\n    receive() external payable {}\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          ADDRESS MANAGEMENT \\n    //////////////////////////////////////////////////////////////*/\\n\\n    /** \\n     * @notice Update the stakeNotaryAddress. \\n     *\\n     * @dev Only the contract operator can call this function.\\n     * @dev Any unsettled commitments co-signed by the old stakeNotaryAddress \\n     *      will not be able to be settled once this change is made. Therefore\\n     *      the caller must either ensure that these are re-signed by the new\\n     *      stakeNotaryAddress, or abandoned. \\n     *\\n     * @param _newStakeNotaryAddress Address of the new stakeNotary.\\n     */ \\n    function setStakeNotaryAddress(\\n        address _newStakeNotaryAddress\\n    ) \\n        external \\n        onlyOperator \\n    {\\n        emit SetStakeNotaryAddress(stakeNotaryAddress, _newStakeNotaryAddress);\\n        stakeNotaryAddress = _newStakeNotaryAddress;\\n    }\\n\\n    /** \\n     * @notice Update the claimNotaryAddress. \\n     *\\n     * @dev Only the contract operator can call this function.\\n     * @dev Any unsettled commitments co-signed by the old claimNotaryAddress\\n     *      will not be able to be settled once this change is made. Therefore\\n     *      the caller must either ensure that these are re-signed by the new\\n     *      claimNotaryAddress, or abandoned.\\n     *\\n     * @param _newClaimNotaryAddress Address of the new claimNotary.\\n     */\\n    function setClaimNotaryAddress(\\n        address _newClaimNotaryAddress\\n    )  \\n        external \\n        onlyOperator \\n    {\\n        emit SetClaimNotaryAddress(claimNotaryAddress, _newClaimNotaryAddress);\\n        claimNotaryAddress = _newClaimNotaryAddress;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              STAKE LOGIC \\n    //////////////////////////////////////////////////////////////*/\\n\\n    /** \\n     * @notice Stake WETH for use in a payment channel. \\n     *\\n     * @dev This opens a payment channel, if one is not yet open already,\\n     *      with msg.sender as the stakerAddress. Whether or not there is \\n     *      already an open payment channel, this function adds stake to it.\\n     * @dev Cannot be called when the payment channel is in its timelocked\\n     *      unstake mode. \\n     *\\n     * @param _amount Amount of WETH to stake (in wei).\\n     */\\n    function stake(\\n        uint256 _amount\\n    ) \\n        external \\n    {\\n        require(getTimelockedUnstakeTimestamp(msg.sender) == 0, \\\"Invalid channel state: cannot stake after startTimelockedUnstake has been called.\\\");\\n        stakedAmount[msg.sender] += _amount;\\n        WETH.safeTransferFrom(msg.sender, address(this), _amount);\\n        emit Staked(msg.sender, stakeChannelNonce[msg.sender], stakedAmount[msg.sender]);\\n    }\\n\\n    /** \\n     * @notice Donate claimable WETH to the contract.\\n     *\\n     * @dev In normal operation, claimable WETH accrues on settlement or \\n     *      unstaking. This function can be used to create a buffer of\\n     *      immediaetly claimable WETH so that claimers do not need to wait\\n     *      for these periodic activities. It can also be used to amend any\\n     *      shortfalls.\\n     *\\n     * @param _amount Amount of WETH to donate (in wei).\\n     */\\n    function addToTotalClaimableAmount(\\n        uint256 _amount\\n    ) \\n        external \\n    {\\n        totalClaimableAmount += _amount;\\n        WETH.safeTransferFrom(msg.sender, address(this), _amount);\\n        emit AddedToTotalClaimableAmount(_amount);\\n    }\\n\\n    /** \\n     * @notice Adjusts staked WETH to claimable WETH and vice versa.\\n     *\\n     * @param _stakeRefundedAmount Amount of WETH no longer claimable (in wei). \\n     * @param _stakeSpentAmount Amount of WETH newly claimable (in wei).\\n     */\\n    function adjustTotalClaimableAmount(\\n        uint256 _stakeRefundedAmount, \\n        uint256 _stakeSpentAmount\\n    ) \\n        internal \\n    {\\n        if (_stakeSpentAmount < _stakeRefundedAmount) {\\n            /* Overall, stake was refunded. */\\n            uint256 refundAmount = _stakeRefundedAmount - _stakeSpentAmount;\\n            require(totalClaimableAmount >= refundAmount, \\\"Invalid refund: refundAmount cannot exceed totalClaimableAmount.\\\");\\n            totalClaimableAmount -= refundAmount;\\n        } else {\\n            /* Overall, stake was spent. */\\n            totalClaimableAmount += _stakeSpentAmount - _stakeRefundedAmount;\\n        }\\n    }\\n\\n    /** \\n     * @notice Settles off-chain commitments on-chain. \\n     *\\n     * @dev Any address may call this function since the StakeCommitments\\n     *      are secured by signatures of both the staker and the stakeNotary. \\n     *      In practice, the stakeNotary will likely be the caller. \\n     * @dev It is sufficient to provide only the most recent unsettled \\n     *      StakeCommitment for each payment channel. But this is not a\\n     *      requirement, and the function will behave the same if there are\\n     *      past commitments for the same channel also being provided.\\n     *\\n     * @param _commitments Array of StakeCommitments to be settled.\\n     */\\n    function settleStakeCommitments(\\n        StakeCommitment[] memory _commitments\\n    ) \\n        external \\n    {\\n        /* Tracks cumulative spending and refunding. */\\n        uint256 totalNewStakeSpentAmount = 0;\\n        uint256 totalNewStakeRefundedAmount = 0;\\n\\n        for (uint i=0; i< _commitments.length; i++) {\\n            StakeCommitment memory commitment = _commitments[i];\\n\\n            /* Validate commitment data*/\\n            require(getTimelockedUnstakeTimestamp(commitment.stakerAddress) == 0, \\\"Invalid channel state: cannot settle new StakeCommitments after startTimelockedUnstake has been called.\\\");\\n            require(commitment.stakeSpentAmount <= stakedAmount[commitment.stakerAddress], \\\"Invalid StakeCommitment: provided stakeSpentAmount cannot exceed stakedAmount.\\\");\\n            require(commitment.stakeCommitmentNonce >= stakeCommitmentNonce[commitment.stakerAddress], \\\"Invalid StakeCommitment: provided stakeCommitmentNonce must be no older than stakeCommitmentNonce.\\\");\\n            require(commitment.stakeChannelNonce == stakeChannelNonce[commitment.stakerAddress], \\\"Invalid StakeCommitment: provided stakeChannelNonce must match stakeChannelNonce.\\\");\\n\\n            /* \\n             * If a commitment in the batch has already been settled in a previous call to settleStakeCommitments,\\n             * skip it instead of reverting the entire batch. This is to prevent a malicious actor from DOS-ing\\n             * a batched call by frontrunning it with a single commitment from the batch.\\n             */\\n            if(commitment.stakeCommitmentNonce == stakeCommitmentNonce[commitment.stakerAddress]) {\\n                continue;\\n            }\\n\\n            /* Validate signatures */\\n            address recoveredStakerAddress = ECDSA.recover(\\n                getStakeCommitmentHash(commitment), \\n                commitment.stakerSignature\\n            );\\n            require(recoveredStakerAddress == commitment.stakerAddress, \\\"Invalid StakeCommitment: stakerAddress does not match the signer of stakerSignature.\\\");\\n\\n            address recoveredStakeNotaryAddress =  ECDSA.recover(\\n                getStakeCommitmentHash(commitment), \\n                commitment.stakeNotarySignature\\n            );\\n            require(recoveredStakeNotaryAddress == stakeNotaryAddress, \\\"Invalid StakeCommitment: stakeNotaryAddress does not match the signer of stakeNotarySignature.\\\");\\n\\n            if (commitment.stakeSpentAmount < stakeSpentAmount[commitment.stakerAddress]) {\\n                /* Stake was refunded to the staker. */\\n                totalNewStakeRefundedAmount += stakeSpentAmount[commitment.stakerAddress] - commitment.stakeSpentAmount;\\n            } else {\\n                /* Stake was spent by the staker. */ \\n                totalNewStakeSpentAmount += commitment.stakeSpentAmount - stakeSpentAmount[commitment.stakerAddress];\\n            }\\n\\n            /* Update the channel state */\\n            stakeCommitmentNonce[commitment.stakerAddress] = commitment.stakeCommitmentNonce;\\n            stakeSpentAmount[commitment.stakerAddress] = commitment.stakeSpentAmount;\\n        }\\n\\n        /* Adjust the total claimable amount all at once */\\n        adjustTotalClaimableAmount(totalNewStakeRefundedAmount, totalNewStakeSpentAmount);\\n\\n        /* Emit event */\\n        emit SettledStakeCommitments(totalNewStakeRefundedAmount, totalNewStakeSpentAmount);\\n    }\\n\\n    /** \\n     * @notice Start or challenge a timelocked unstake procedure.\\n     * \\n     * @dev The timelocked unstake procedure is a fail-safe mode that allows\\n     *      a staker to unstake even in the presence of a faulty stakeNotary. \\n     *      Once the function is called, the associated payment channel is\\n     *      settled up to the provided StakeCommitment, and no further \\n     *      commitments can be settled, except through this function.\\n     * @dev The unstaking can be completed after expiry of a 7 day timelock,\\n     *      by calling the `executeTimelockedUnstake` function.\\n     * @dev If the stakeNotary believes that the staker is being malicious \\n     *      and providing an old but unsettled StakeCommitment, they can \\n     *      challenge the unstake by calling this function with a more\\n     *      recent StakeCommitment, which also extends the timelock. The\\n     *      stakeNotary can challenge repeatedly, until the matter is resolved.\\n     * @dev A compromised stakeNotary could withhold more recent commitments\\n     *      from the staker and use these to indefinitely reset the timelock.\\n     *      In this event, the operator can call `setStakeNotaryAddress` to \\n     *      change the `stakeNotaryAddress` to an uncompromised one.\\n     * @dev This function does not close the payment channel, but it does\\n     *      put it into a timelocked state where its functionality is reduced.\\n     *      To close the payment channel and actually unstake, the caller needs\\n     *      to call `executeTimelockedUnstake`.\\n     *\\n     * @param _commitment A StakeCommitment at least as recent as the last\\n     *                    one settled on-chain.\\n     */\\n    function startTimelockedUnstake(\\n        StakeCommitment memory _commitment\\n    ) \\n        external \\n    {\\n        /* Validate */\\n        if (getTimelockedUnstakeTimestamp(_commitment.stakerAddress) == 0) {\\n            require(msg.sender == _commitment.stakerAddress, \\\"Invalid caller: only stakerAddress can call startTimelockedUnstake for the first time.\\\");\\n        }\\n        require(_commitment.stakeSpentAmount <= stakedAmount[_commitment.stakerAddress], \\\"Invalid StakeCommitment: provided stakeSpentAmount cannot exceed stakedAmount.\\\");\\n        require(_commitment.stakeCommitmentNonce >= stakeCommitmentNonce[_commitment.stakerAddress], \\\"Invalid StakeCommitment: provided stakeCommitmentNonce must be no older than stakeCommitmentNonce.\\\");\\n        require(_commitment.stakeChannelNonce == stakeChannelNonce[_commitment.stakerAddress], \\\"Invalid StakeCommitment: provided stakeChannelNonce must match stakeChannelNonce.\\\");\\n        require(msg.sender == _commitment.stakerAddress || msg.sender == stakeNotaryAddress, \\\"Invalid caller: only stakerAddress or stakeNotaryAddress can call startTimelockedUnstake.\\\");\\n        \\n        /* Validate signatures */\\n        address recoveredStakerAddress = ECDSA.recover(\\n            getStakeCommitmentHash(_commitment), \\n            _commitment.stakerSignature\\n        );\\n        require(recoveredStakerAddress == _commitment.stakerAddress, \\\"Invalid StakeCommitment: stakerAddress does not match the signer of stakerSignature.\\\");\\n\\n        address recoveredStakeNotaryAddress =  ECDSA.recover(\\n            getStakeCommitmentHash(_commitment), \\n            _commitment.stakeNotarySignature\\n        );\\n        require(recoveredStakeNotaryAddress == stakeNotaryAddress, \\\"Invalid StakeCommitment: stakeNotaryAddress does not match the signer of stakeNotarySignature.\\\");\\n\\n        /* Settle the payment channel up to the provided StakeCommitment. */\\n        adjustTotalClaimableAmount(stakeSpentAmount[_commitment.stakerAddress], _commitment.stakeSpentAmount);\\n        stakeCommitmentNonce[_commitment.stakerAddress] = _commitment.stakeCommitmentNonce;\\n        stakeSpentAmount[_commitment.stakerAddress] = _commitment.stakeSpentAmount;\\n\\n        /* Set the timelock */ \\n        timelockedUnstakeTimestamp[\\n            getTimelockedUnstakeTimestampKey(\\n                _commitment.stakerAddress, \\n                _commitment.stakeSpentAmount, \\n                _commitment.stakeCommitmentNonce, \\n                _commitment.stakeChannelNonce\\n            )] = block.timestamp + 7 days;\\n\\n        /* Emit event */\\n        emit StartedTimelockedUnstake(\\n            _commitment.stakerAddress, \\n            _commitment.stakeSpentAmount, \\n            _commitment.stakeCommitmentNonce, \\n            _commitment.stakeChannelNonce, \\n            block.timestamp + 7 days);\\n    }\\n\\n    /** \\n     * @notice After timelock, unstake the stakerAddress's unspent WETH. \\n     *\\n     * @dev When successful, this function closes the payment channel.\\n     * @dev Requires the `startTimelockedUnstake` function to have been last \\n     *      called at least 7 days prior.\\n     *\\n     * @param _stakerAddress Address of the staker.\\n     */\\n    function executeTimelockedUnstake(\\n        address _stakerAddress\\n    ) \\n        external \\n    {\\n        /* Cache for event */\\n        uint256 _stakeChannelNonce = stakeChannelNonce[_stakerAddress];\\n\\n        /* Validate */\\n        require(getTimelockedUnstakeTimestamp(_stakerAddress) > 0, \\\"Invalid timelock: must call startTimelockedUnstake first.\\\");\\n        require(block.timestamp > getTimelockedUnstakeTimestamp(_stakerAddress), \\\"Invalid timelock: timelock has not yet expired.\\\");\\n        \\n        /* Cache for event */\\n        uint256 unstakeAmount = stakedAmount[_stakerAddress] - stakeSpentAmount[_stakerAddress];\\n        require(unstakeAmount > 0, \\\"Nothing to unstake\\\");\\n\\n        /* Close the payment channel */\\n        stakeCommitmentNonce[_stakerAddress] = 0;\\n        stakeSpentAmount[_stakerAddress] = 0;\\n        stakedAmount[_stakerAddress] = 0;\\n        stakeChannelNonce[_stakerAddress] += 1;\\n\\n        /* Send the WETH */\\n        WETH.safeTransfer(_stakerAddress, unstakeAmount);\\n\\n        /* Emit event */\\n        emit Unstaked(_stakerAddress, _stakeChannelNonce, unstakeAmount);\\n    }\\n\\n    /** \\n     * @notice Instantly unstake the stakerAddress's unspent WETH. \\n     *\\n     * @dev The caller must provide a special StakeCommitment co-signed by\\n     *      the stakeNotary proving that the payment channel has been settled \\n     *      and the stakeNotary has authorized the staker to unstake. This \\n     *      special StakeCommitment can be requested using the off-chain API \\n     *      associated with the stakeNotary. If the off-chain API is not \\n     *      available for any reason, use startTimelockedUnstake instead.\\n     * @dev The special StakeCommitment is required in order to prevent either \\n     *      a compromised stakeNotary or a malicious staker from unstaking \\n     *      using an old or unsettled commitment. \\n     * @dev Unstaking closes the payment channel, which means zeroing out all\\n     *      payment channel state associated with the `stakerAddress`, except \\n     *      for `stakeChannelNonce`, which is incremented. A `stakerAddress` \\n     *      which has unstaked can open a new payment channel by calling the\\n     *      `stake` function.\\n     *\\n     * @param _commitment A special StakeCommitment used to prove that the\\n     *                    stakerAddress is authorized to unstake.\\n     */\\n    function unstake(\\n        StakeCommitment memory _commitment\\n    ) \\n        external \\n    {\\n        /* Validate */\\n        require(msg.sender == _commitment.stakerAddress, \\\"Invalid caller: only stakerAddress can call unstake.\\\");\\n        require(_commitment.stakeSpentAmount <= stakedAmount[_commitment.stakerAddress], \\\"Invalid StakeCommitment: provided stakeSpentAmount cannot exceed stakedAmount.\\\");\\n        require(_commitment.stakeCommitmentNonce >= stakeCommitmentNonce[_commitment.stakerAddress], \\\"Invalid StakeCommitment: provided stakeCommitmentNonce must be no older than stakeCommitmentNonce.\\\");\\n        require(_commitment.stakeChannelNonce == stakeChannelNonce[_commitment.stakerAddress], \\\"Invalid StakeCommitment: provided stakeChannelNonce must match stakeChannelNonce.\\\");\\n        require(keccak256(_commitment.data) == keccak256(INSTANT_UNSTAKE_COMMITMENT_DATA), \\\"Invalid StakeCommitment: provided data must match INSTANT_UNSTAKE_COMMITMENT_DATA.\\\");\\n\\n        /* Validate signatures */\\n        address recoveredStakerAddress = ECDSA.recover(\\n            getStakeCommitmentHash(_commitment), \\n            _commitment.stakerSignature\\n        );\\n        require(recoveredStakerAddress == _commitment.stakerAddress, \\\"Invalid StakeCommitment: stakerAddress does not match the signer of stakerSignature.\\\");\\n\\n        address recoveredStakeNotaryAddress =  ECDSA.recover(\\n            getStakeCommitmentHash(_commitment), \\n            _commitment.stakeNotarySignature\\n        );\\n        require(recoveredStakeNotaryAddress == stakeNotaryAddress, \\\"Invalid StakeCommitment: stakeNotaryAddress does not match the signer of stakeNotarySignature.\\\");\\n        \\n        /* Settle the payment channel up to the provided StakeCommitment. */\\n        adjustTotalClaimableAmount(stakeSpentAmount[_commitment.stakerAddress], _commitment.stakeSpentAmount);\\n        \\n        /* Cache for event */\\n        uint256 unstakeAmount = stakedAmount[_commitment.stakerAddress] - _commitment.stakeSpentAmount;\\n        require(unstakeAmount > 0, \\\"Nothing to unstake\\\");\\n\\n        /* Close the payment channel */\\n        stakeCommitmentNonce[_commitment.stakerAddress] = 0;\\n        stakeSpentAmount[_commitment.stakerAddress] = 0;\\n        stakedAmount[_commitment.stakerAddress] = 0;\\n        stakeChannelNonce[_commitment.stakerAddress] += 1;\\n\\n        /* Send the WETH */\\n        WETH.safeTransfer(_commitment.stakerAddress, unstakeAmount);\\n\\n        /* Emit event */\\n        emit Unstaked(_commitment.stakerAddress, _commitment.stakeChannelNonce, unstakeAmount);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             CLAIM LOGIC \\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Claim any WETH owed to the provided address. \\n     *\\n     * @dev Can be called by anyone, not only the claimer. This allows claims\\n     *      to be securely processed by a third party, saving claimers gas.\\n     * @dev The caller must request that the claimNotary provide both an amount\\n     *      of WETH that the claimerAddress has earned over its lifetime (the\\n     *      _claimsEarnedAmount), and a signature (_claimNotarySignature), \\n     *      witnessing the fact that the claimNotary agrees with that amount. \\n     * @dev The message that results in _claimNotarySignature is the output of \\n     *      the `getClaimCommitmentHash` function, or a locally-computed \\n     *      equivalent.\\n     *\\n     * @param _claimerAddress Address of the claimer.\\n     * @param _claimsEarnedAmount Amount of WETH claimer has earned to date. \\n     * @param _claimNotarySignature Signature of claimNotary endorsing above.\\n     */\\n    function claim(\\n        address _claimerAddress,\\n        uint256 _claimsEarnedAmount,\\n        bytes memory _claimNotarySignature\\n    ) \\n        external \\n    {\\n        settleClaim(\\n            _claimerAddress,\\n            _claimsEarnedAmount,\\n            _claimNotarySignature,\\n            false\\n        );\\n    }\\n\\n    /**\\n     * @notice Claim any WETH owed to the provided address, as ETH. \\n     *\\n     * @param _claimerAddress Address of the claimer.\\n     * @param _claimsEarnedAmount Amount of WETH claimer has earned to date. \\n     * @param _claimNotarySignature Signature of claimNotary endorsing above.\\n     */\\n    function claimAndUnwrap(\\n        address _claimerAddress,\\n        uint256 _claimsEarnedAmount,\\n        bytes memory _claimNotarySignature\\n    ) \\n        external \\n    {\\n        settleClaim(\\n            _claimerAddress,\\n            _claimsEarnedAmount,\\n            _claimNotarySignature,\\n            true\\n        );\\n    }\\n\\n    /** \\n     * @notice Settle a claim of WETH or ETH.\\n     *\\n     * @param _claimerAddress Address of the claimer.\\n     * @param _claimsEarnedAmount Amount of WETH claimer has earned to date.\\n     * @param _claimNotarySignature Signature of claimNotary endorsing above.\\n     */\\n    function settleClaim(\\n        address _claimerAddress, \\n        uint256 _claimsEarnedAmount,\\n        bytes memory _claimNotarySignature,\\n        bool unwrap\\n    ) \\n        internal \\n    {\\n        /* Validate that there is something to claim at all. */\\n        require(_claimsEarnedAmount > claimedAmount[_claimerAddress], \\\"Invalid claim: there is nothing for the claimer to claim.\\\");\\n\\n        /* Recover signature signer and validate */ \\n        address recoveredClaimNotaryAddress = ECDSA.recover(\\n            getClaimCommitmentHash(_claimerAddress, _claimsEarnedAmount), \\n            _claimNotarySignature\\n        );\\n        require(recoveredClaimNotaryAddress == claimNotaryAddress, \\\"Invalid claim: claimNotaryAddress is not the signer of claimNotarySignature.\\\");\\n\\n        /* Compute and validate the amount to be claimed */\\n        uint256 claimAmount = _claimsEarnedAmount - claimedAmount[_claimerAddress];\\n        require(claimAmount <= totalClaimableAmount, \\\"Invalid claim: provided claimAmount cannot exceed totalClaimableAmount.\\\");\\n\\n        /* Settle the claim on-chain. */ \\n        claimedAmount[_claimerAddress] = _claimsEarnedAmount;\\n        totalClaimableAmount -= claimAmount;\\n\\n        /* Transfer the ETH or WETH to the claimer. */\\n        if (unwrap) {\\n            IWETH(address(WETH)).withdraw(claimAmount);\\n            (bool sent,) = _claimerAddress.call{value: claimAmount}(\\\"\\\");\\n            require(sent, \\\"Claim error: Failed to send ETH.\\\");\\n\\n        } else {\\n            WETH.safeTransfer(_claimerAddress, claimAmount);\\n        }\\n\\n        /* Emit event */\\n        emit Claimed(_claimerAddress, claimAmount);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeNotaryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_claimNotaryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AddedToTotalClaimableAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_claimerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"RemovedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldClaimNotaryAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newClaimNotaryAddress\",\"type\":\"address\"}],\"name\":\"SetClaimNotaryAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldStakeNotaryAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newStakeNotaryAddress\",\"type\":\"address\"}],\"name\":\"SetStakeNotaryAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SetUnrecoverable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalNewStakeRefundedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalNewStakeSpentAmount\",\"type\":\"uint256\"}],\"name\":\"SettledStakeCommitments\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeChannelNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeSpentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeCommitmentNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeChannelNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timelockedUnstakeTimestamp\",\"type\":\"uint256\"}],\"name\":\"StartedTimelockedUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeChannelNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INSTANT_UNSTAKE_COMMITMENT_DATA\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addToTotalClaimableAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimsEarnedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_claimNotarySignature\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimsEarnedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_claimNotarySignature\",\"type\":\"bytes\"}],\"name\":\"claimAndUnwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNotaryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakerAddress\",\"type\":\"address\"}],\"name\":\"executeTimelockedUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimsEarnedAmount\",\"type\":\"uint256\"}],\"name\":\"getClaimCommitmentHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakerAddress\",\"type\":\"address\"}],\"name\":\"getStakeChannelState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeCommitmentNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeSpentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeChannelNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timelockedUnstakeTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeSpentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeCommitmentNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeChannelNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"getStakeCommitmentHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakerAddress\",\"type\":\"address\"}],\"name\":\"getTimelockedUnstakeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeSpentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeCommitmentNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeChannelNonce\",\"type\":\"uint256\"}],\"name\":\"getTimelockedUnstakeTimestampKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newClaimNotaryAddress\",\"type\":\"address\"}],\"name\":\"setClaimNotaryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStakeNotaryAddress\",\"type\":\"address\"}],\"name\":\"setStakeNotaryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setTokenUnrecoverable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeSpentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeCommitmentNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeChannelNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"stakerSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"stakeNotarySignature\",\"type\":\"bytes\"}],\"internalType\":\"struct PaymentChannels.StakeCommitment[]\",\"name\":\"_commitments\",\"type\":\"tuple[]\"}],\"name\":\"settleStakeCommitments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeChannelNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeCommitmentNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeNotaryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeSpentAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeSpentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeCommitmentNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeChannelNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"stakerSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"stakeNotarySignature\",\"type\":\"bytes\"}],\"internalType\":\"struct PaymentChannels.StakeCommitment\",\"name\":\"_commitment\",\"type\":\"tuple\"}],\"name\":\"startTimelockedUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"timelockedUnstakeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeSpentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeCommitmentNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeChannelNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"stakerSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"stakeNotarySignature\",\"type\":\"bytes\"}],\"internalType\":\"struct PaymentChannels.StakeCommitment\",\"name\":\"_commitment\",\"type\":\"tuple\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PaymentChannels", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004f72f7ca2e909bc64022466b46f12ab3280555000000000000000000000000004f72f7ca2e909bc64022466b46f12ab328055500", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}