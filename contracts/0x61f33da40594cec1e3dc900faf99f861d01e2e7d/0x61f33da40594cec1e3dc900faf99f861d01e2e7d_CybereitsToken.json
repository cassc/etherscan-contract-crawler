{"SourceCode": "pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint supply);\r\n    function balanceOf( address owner ) public constant returns (uint value);\r\n    function allowance( address owner, address spender ) public constant returns (uint _allowance);\r\n\r\n    function transfer( address to, uint value) public returns (bool ok);\r\n    function transferFrom( address from, address to, uint value) public returns (bool ok);\r\n    function approve( address spender, uint value ) public returns (bool ok);\r\n\r\n    event Transfer( address indexed from, address indexed to, uint value);\r\n    event Approval( address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract Token is ERC20 {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  uint256                                             supply;\r\n  mapping(address => uint256)                         balances;\r\n  mapping (address => mapping (address => uint256))   approvals;\r\n\r\n  function balanceOf(address owner) public constant returns (uint256 balance) {\r\n    return balances[owner];\r\n  }\r\n\r\n  function allowance(address owner, address spender) public constant returns (uint256) {\r\n    return approvals[owner][spender];\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n    require(balances[_to] < balances[_to].add(_value));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n\r\n        assert(balances[from] >= value);\r\n        assert(approvals[from][msg.sender] >= value);\r\n        \r\n        approvals[from][msg.sender] = approvals[from][msg.sender].sub(value);\r\n        balances[from] = balances[from].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        \r\n        Transfer(from, to, value);\r\n        \r\n        return true;\r\n  }\r\n\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n        approvals[msg.sender][spender] = value;\r\n        Approval(msg.sender, spender, value);\r\n        return true;\r\n  }\r\n\r\n  function totalSupply() public constant returns (uint) {\r\n    return supply;\r\n  }\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract CybereitsToken is Token, Ownable {\r\n    string public name = \"Cybereits Token\";\r\n    string public symbol = \"CRE\";\r\n    uint public decimals;\r\n\r\n    address public teamLockAddr;\r\n\r\n    function CybereitsToken(\r\n      uint256 total,\r\n      uint256 _decimals, \r\n      uint256 _teamLockPercent,\r\n      address _teamAddr1,\r\n      address _teamAddr2,\r\n      address _teamAddr3,\r\n      address _teamAddr4,\r\n      address _teamAddr5,\r\n      address _teamAddr6\r\n    ) public\r\n    {\r\n        decimals = _decimals;\r\n        var multiplier = 10 ** decimals;\r\n        supply = total * multiplier;\r\n        var teamLockAmount = _teamLockPercent * supply / 100;\r\n        teamLockAddr = new CybereitsTeamLock(\r\n          teamLockAmount,\r\n          _teamAddr1,\r\n          _teamAddr2,\r\n          _teamAddr3,\r\n          _teamAddr4,\r\n          _teamAddr5,\r\n          _teamAddr6\r\n        );\r\n        balances[teamLockAddr] = teamLockAmount;\r\n        balances[msg.sender] = supply - teamLockAmount;\r\n    }\r\n}\r\n\r\ncontract CybereitsTeamLock {\r\n\r\n    event Unlock(address from, uint amount);\r\n\r\n    mapping (address => uint256) allocations;\r\n    mapping (address => uint256) frozen;\r\n\r\n    CybereitsToken cre;\r\n\r\n    function CybereitsTeamLock(\r\n      uint256 lockAmount,\r\n      address _teamAddr1,\r\n      address _teamAddr2,\r\n      address _teamAddr3,\r\n      address _teamAddr4,\r\n      address _teamAddr5,\r\n      address _teamAddr6\r\n    ) public\r\n    {\r\n        cre = CybereitsToken(msg.sender);\r\n        allocations[_teamAddr1] = lockAmount / 6;\r\n        frozen[_teamAddr1] = now + 6 * 30 days;\r\n        allocations[_teamAddr2] = lockAmount / 6;\r\n        frozen[_teamAddr2] = now + 12 * 30 days;\r\n        allocations[_teamAddr3] = lockAmount / 6;\r\n        frozen[_teamAddr3] = now + 18 * 30 days;\r\n        allocations[_teamAddr4] = lockAmount / 6;\r\n        frozen[_teamAddr4] = now + 24 * 30 days;\r\n        allocations[_teamAddr5] = lockAmount / 6;\r\n        frozen[_teamAddr5] = now + 30 * 30 days;\r\n        allocations[_teamAddr6] = lockAmount / 6;\r\n        frozen[_teamAddr6] = now + 36 * 30 days;\r\n    }\r\n\r\n    function unlock(address unlockAddr) external returns (bool) {\r\n        require(allocations[unlockAddr] != 0);\r\n        require(now >= frozen[unlockAddr]);\r\n\r\n        var amount = allocations[unlockAddr];\r\n        assert(cre.transfer(unlockAddr, amount));\r\n        allocations[unlockAddr] = 0;\r\n        Unlock(unlockAddr, amount);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamLockAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_teamLockPercent\",\"type\":\"uint256\"},{\"name\":\"_teamAddr1\",\"type\":\"address\"},{\"name\":\"_teamAddr2\",\"type\":\"address\"},{\"name\":\"_teamAddr3\",\"type\":\"address\"},{\"name\":\"_teamAddr4\",\"type\":\"address\"},{\"name\":\"_teamAddr5\",\"type\":\"address\"},{\"name\":\"_teamAddr6\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "CybereitsToken", "CompilerVersion": "v0.4.19+commit.c4cbbb05", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000005ab94f969a1782556a7e707829ca2e45629b4d57000000000000000000000000ff081546b25cc66f1212c42479602c33e143842300000000000000000000000012cba028ee378a4db328cce26df39cf09a195bf90000000000000000000000007985f5418dc6abf5bbac49aa9d3524e5f0aaefd90000000000000000000000001ee326252b7e6e9219adc364a72d9ea92a7bae35000000000000000000000000ed048b377e5912a36a6b9443d871d5f10349a9a1", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://6d24abddb11db28ed71c1a84896804ba64573874ce1692cbb6c04d1b53f84d54"}