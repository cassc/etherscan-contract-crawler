{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSE\\npragma solidity ^0.8.9;\\n\\ninterface IERC20 {\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n    function balanceOf(address account) external view returns (uint256);\\n    function approve(address spender, uint256 value) external returns (bool success);\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/ITokenBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSE\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IWETH.sol\\\";\\nimport \\\"./IWormhole.sol\\\";\\n\\ninterface ITokenBridge {\\n    struct Transfer {\\n        uint8 payloadID;\\n        uint256 amount;\\n        bytes32 tokenAddress;\\n        uint16 tokenChain;\\n        bytes32 to;\\n        uint16 toChain;\\n        uint256 fee;\\n    }\\n\\n    struct TransferWithPayload {\\n        uint8 payloadID;\\n        uint256 amount;\\n        bytes32 tokenAddress;\\n        uint16 tokenChain;\\n        bytes32 to;\\n        uint16 toChain;\\n        bytes32 fromAddress;\\n        bytes payload;\\n    }\\n\\n    struct AssetMeta {\\n        uint8 payloadID;\\n        bytes32 tokenAddress;\\n        uint16 tokenChain;\\n        uint8 decimals;\\n        bytes32 symbol;\\n        bytes32 name;\\n    }\\n\\n    struct RegisterChain {\\n        bytes32 module;\\n        uint8 action;\\n        uint16 chainId;\\n\\n        uint16 emitterChainID;\\n        bytes32 emitterAddress;\\n    }\\n\\n     struct UpgradeContract {\\n        bytes32 module;\\n        uint8 action;\\n        uint16 chainId;\\n\\n        bytes32 newContract;\\n    }\\n\\n    struct RecoverChainId {\\n        bytes32 module;\\n        uint8 action;\\n\\n        uint256 evmChainId;\\n        uint16 newChainId;\\n    }\\n\\n    event ContractUpgraded(address indexed oldContract, address indexed newContract);\\n\\n    event TransferRedeemed(uint16 indexed emitterChainId, bytes32 indexed emitterAddress, uint64 indexed sequence);\\n\\n    function _parseTransferCommon(bytes memory encoded) external pure returns (Transfer memory transfer);\\n\\n    function attestToken(address tokenAddress, uint32 nonce) external payable returns (uint64 sequence);\\n\\n    function wrapAndTransferETH(uint16 recipientChain, bytes32 recipient, uint256 arbiterFee, uint32 nonce) external payable returns (uint64 sequence);\\n\\n    function wrapAndTransferETHWithPayload(uint16 recipientChain, bytes32 recipient, uint32 nonce, bytes memory payload) external payable returns (uint64 sequence);\\n\\n    function transferTokens(address token, uint256 amount, uint16 recipientChain, bytes32 recipient, uint256 arbiterFee, uint32 nonce) external payable returns (uint64 sequence);\\n\\n    function transferTokensWithPayload(address token, uint256 amount, uint16 recipientChain, bytes32 recipient, uint32 nonce, bytes memory payload) external payable returns (uint64 sequence);\\n\\n    function updateWrapped(bytes memory encodedVm) external returns (address token);\\n\\n    function createWrapped(bytes memory encodedVm) external returns (address token);\\n\\n    function completeTransferWithPayload(bytes memory encodedVm) external returns (bytes memory);\\n\\n    function completeTransferAndUnwrapETHWithPayload(bytes memory encodedVm) external returns (bytes memory);\\n\\n    function completeTransfer(bytes memory encodedVm) external;\\n\\n    function completeTransferAndUnwrapETH(bytes memory encodedVm) external;\\n\\n    function encodeAssetMeta(AssetMeta memory meta) external pure returns (bytes memory encoded);\\n\\n    function encodeTransfer(Transfer memory transfer) external pure returns (bytes memory encoded);\\n\\n    function encodeTransferWithPayload(TransferWithPayload memory transfer) external pure returns (bytes memory encoded);\\n\\n    function parsePayloadID(bytes memory encoded) external pure returns (uint8 payloadID);\\n\\n    function parseAssetMeta(bytes memory encoded) external pure returns (AssetMeta memory meta);\\n\\n    function parseTransfer(bytes memory encoded) external pure returns (Transfer memory transfer);\\n\\n    function parseTransferWithPayload(bytes memory encoded) external pure returns (TransferWithPayload memory transfer);\\n\\n    function governanceActionIsConsumed(bytes32 hash) external view returns (bool);\\n\\n    function isInitialized(address impl) external view returns (bool);\\n\\n    function isTransferCompleted(bytes32 hash) external view returns (bool);\\n\\n    function wormhole() external view returns (IWormhole);\\n\\n    function chainId() external view returns (uint16);\\n\\n    function evmChainId() external view returns (uint256);\\n\\n    function isFork() external view returns (bool);\\n\\n    function governanceChainId() external view returns (uint16);\\n\\n    function governanceContract() external view returns (bytes32);\\n\\n    function wrappedAsset(uint16 tokenChainId, bytes32 tokenAddress) external view returns (address);\\n\\n    function bridgeContracts(uint16 chainId_) external view returns (bytes32);\\n\\n    function tokenImplementation() external view returns (address);\\n\\n    function WETH() external view returns (IWETH);\\n\\n    function outstandingBridged(address token) external view returns (uint256);\\n\\n    function isWrappedAsset(address token) external view returns (bool);\\n\\n    function finality() external view returns (uint8);\\n\\n    function implementation() external view returns (address);\\n\\n    function initialize() external;\\n\\n    function registerChain(bytes memory encodedVM) external;\\n\\n    function upgrade(bytes memory encodedVM) external;\\n\\n    function submitRecoverChainId(bytes memory encodedVM) external;\\n\\n    function parseRegisterChain(bytes memory encoded) external pure returns (RegisterChain memory chain);\\n\\n    function parseUpgrade(bytes memory encoded) external pure returns (UpgradeContract memory chain);\\n\\n    function parseRecoverChainId(bytes memory encodedRecoverChainId) external pure returns (RecoverChainId memory rci);\\n}\\n\"\r\n    },\r\n    \"contracts/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSE\\npragma solidity ^0.8.9;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\"\r\n    },\r\n    \"contracts/IWormhole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSE\\npragma solidity ^0.8.9;\\n\\ninterface IWormhole {\\n  struct GuardianSet {\\n    address[] keys;\\n    uint32 expirationTime;\\n  }\\n\\n  struct Signature {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n    uint8 guardianIndex;\\n  }\\n\\n  /**\\n  struct Signature {\\n    uint8 index;\\n    bytes signature;\\n    string name;\\n  }\\n   */\\n\\n  struct VM {\\n    uint8 version;\\n    uint32 timestamp;\\n    uint32 nonce;\\n    uint16 emitterChainId;\\n    bytes32 emitterAddress;\\n    uint64 sequence;\\n    uint8 consistencyLevel;\\n    bytes payload;\\n    uint32 guardianSetIndex;\\n    Signature[] signatures;\\n    bytes32 hash;\\n  }\\n\\n  struct ContractUpgrade {\\n    bytes32 module;\\n    uint8 action;\\n    uint16 chain;\\n    address newContract;\\n  }\\n\\n  struct GuardianSetUpgrade {\\n    bytes32 module;\\n    uint8 action;\\n    uint16 chain;\\n    GuardianSet newGuardianSet;\\n    uint32 newGuardianSetIndex;\\n  }\\n\\n  struct SetMessageFee {\\n    bytes32 module;\\n    uint8 action;\\n    uint16 chain;\\n    uint256 messageFee;\\n  }\\n\\n  struct TransferFees {\\n    bytes32 module;\\n    uint8 action;\\n    uint16 chain;\\n    uint256 amount;\\n    bytes32 recipient;\\n  }\\n\\n  struct RecoverChainId {\\n    bytes32 module;\\n    uint8 action;\\n    uint256 evmChainId;\\n    uint16 newChainId;\\n  }\\n\\n  event LogMessagePublished(address indexed sender, uint64 sequence, uint32 nonce, bytes payload, uint8 consistencyLevel);\\n  event ContractUpgraded(address indexed oldContract, address indexed newContract);\\n  event GuardianSetAdded(uint32 indexed index);\\n\\n  function publishMessage(uint32 nonce, bytes memory payload, uint8 consistencyLevel) external payable returns (uint64 sequence);\\n\\n  function testSigs() external returns (Signature[] memory signatures);\\n\\n  function test8() external returns (uint8 test);\\n\\n  function testBytes() external returns (bytes memory payload);\\n\\n  function testBigKahuna() external returns (VM memory vm);\\n\\n  function initialize() external;\\n\\n  function parseAndVerifyVM(bytes calldata encodedVM) external view returns (VM memory vm, bool valid, string memory reason);\\n\\n  function verifyVM(VM memory vm) external view returns (bool valid, string memory reason);\\n\\n  function verifySignatures(\\n    bytes32 hash,\\n    Signature[] memory signatures,\\n    GuardianSet memory guardianSet\\n  ) external pure returns (bool valid, string memory reason);\\n\\n  function parseVM(bytes memory encodedVM) external pure returns (VM memory vm);\\n\\n  function quorum(uint numGuardians) external pure returns (uint numSignaturesRequiredForQuorum);\\n\\n  function getGuardianSet(uint32 index) external view returns (GuardianSet memory);\\n\\n  function getCurrentGuardianSetIndex() external view returns (uint32);\\n\\n  function getGuardianSetExpiry() external view returns (uint32);\\n\\n  function governanceActionIsConsumed(bytes32 hash) external view returns (bool);\\n\\n  function isInitialized(address impl) external view returns (bool);\\n\\n  function chainId() external view returns (uint16);\\n\\n  function isFork() external view returns (bool);\\n\\n  function governanceChainId() external view returns (uint16);\\n\\n  function governanceContract() external view returns (bytes32);\\n\\n  function messageFee() external view returns (uint256);\\n\\n  function evmChainId() external view returns (uint256);\\n\\n  function nextSequence(address emitter) external view returns (uint64);\\n\\n  function parseContractUpgrade(bytes memory encodedUpgrade) external pure returns (ContractUpgrade memory cu);\\n\\n  function parseGuardianSetUpgrade(bytes memory encodedUpgrade) external pure returns (GuardianSetUpgrade memory gsu);\\n\\n  function parseSetMessageFee(bytes memory encodedSetMessageFee) external pure returns (SetMessageFee memory smf);\\n\\n  function parseTransferFees(bytes memory encodedTransferFees) external pure returns (TransferFees memory tf);\\n\\n  function parseRecoverChainId(bytes memory encodedRecoverChainId) external pure returns (RecoverChainId memory rci);\\n\\n  function submitContractUpgrade(bytes memory _vm) external;\\n\\n  function submitSetMessageFee(bytes memory _vm) external;\\n\\n  function submitNewGuardianSet(bytes memory _vm) external;\\n\\n  function submitTransferFees(bytes memory _vm) external;\\n\\n  function submitRecoverChainId(bytes memory _vm) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Portico.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSE\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PorticoStructs.sol\\\";\\nimport \\\"./ITokenBridge.sol\\\";\\nimport \\\"./IWormhole.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IWETH.sol\\\";\\n\\n//uniswap\\nimport \\\"./uniswap/TickMath.sol\\\";\\nimport \\\"./uniswap/ISwapRouter02.sol\\\";\\nimport \\\"./uniswap/IV3Pool.sol\\\";\\nimport \\\"./uniswap/PoolAddress.sol\\\";\\n\\nusing PorticoFlagSetAccess for PorticoFlagSet;\\n\\ncontract PorticoBase {\\n  using PorticoFlagSetAccess for PorticoFlagSet;\\n\\n  ISwapRouter02 public immutable ROUTERV3;\\n  ITokenBridge public immutable TOKENBRIDGE;\\n  IWETH public immutable WETH;\\n\\n  IWormhole public immutable wormhole;\\n\\n  uint16 public immutable wormholeChainId;\\n\\n  constructor(ISwapRouter02 _routerV3, ITokenBridge _bridge, IWETH _weth) {\\n    ROUTERV3 = _routerV3;\\n    TOKENBRIDGE = _bridge;\\n    wormhole = _bridge.wormhole();\\n    WETH = _weth;\\n    wormholeChainId = wormhole.chainId();\\n  }\\n\\n  receive() external payable {}\\n\\n  function version() external pure returns (uint32) {\\n    return 1;\\n  }\\n\\n  function _msgSender() internal view returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function padAddress(address addr) internal pure returns (bytes32) {\\n    return bytes32(uint256(uint160(addr)));\\n  }\\n\\n  function unpadAddress(bytes32 whFormatAddress) internal pure returns (address) {\\n    return address(uint160(uint256(whFormatAddress)));\\n  }\\n\\n  function isContract(address _addr) private view returns (bool value) {\\n    uint32 size;\\n    assembly {\\n      size := extcodesize(_addr)\\n    }\\n    return (size > 0);\\n  }\\n\\n  function calcMinAmount(\\n    uint256 amountIn,\\n    uint16 maxSlippage,\\n    address tokenIn,\\n    address tokenOut,\\n    uint24 fee\\n  ) internal view returns (uint256 minAmoutReceived) {\\n    //10000 bips == 100% slippage is allowed\\n    uint16 MAX_BIPS = 10000;\\n    if (maxSlippage >= MAX_BIPS || maxSlippage == 0) {\\n      return 0;\\n    }\\n\\n    //compute pool\\n    PoolAddress.PoolKey memory key = PoolAddress.getPoolKey(tokenIn, tokenOut, fee);\\n    IV3Pool pool = IV3Pool(PoolAddress.computeAddress(ROUTERV3.factory(), key));\\n\\n    if (!isContract(address(pool))) {\\n      return 0;\\n    }\\n\\n    //get exchange rate\\n    uint256 exchangeRate = getExchangeRate(sqrtPrice(pool));\\n\\n    //invert exchange rate if needed\\n    if (tokenIn != key.token0) {\\n      exchangeRate = divide(1e18, exchangeRate, 18);\\n    }\\n\\n    //compute expected amount received with no slippage\\n    uint256 expectedAmount = (amountIn * exchangeRate) / 1e18;\\n\\n    maxSlippage = MAX_BIPS - maxSlippage;\\n\\n    minAmoutReceived = (expectedAmount * maxSlippage) / MAX_BIPS;\\n  }\\n\\n  ///@return exchangeRate == (sqrtPriceX96 / 2**96) ** 2\\n  function getExchangeRate(uint160 sqrtPriceX96) internal pure returns (uint256 exchangeRate) {\\n    return (divide(uint256(sqrtPriceX96), (2 ** 96), 18) ** 2) / 1e18;\\n  }\\n\\n  ///@notice floating point division at @param factor scale\\n  function divide(uint256 numerator, uint256 denominator, uint256 factor) internal pure returns (uint256 result) {\\n    uint256 q = (numerator / denominator) * 10 ** factor;\\n    uint256 r = ((numerator * 10 ** factor) / denominator) % 10 ** factor;\\n\\n    return q + r;\\n  }\\n\\n  function sqrtPrice(IV3Pool pool) internal view returns (uint160) {\\n    //get current tick via slot0\\n    try pool.slot0() returns (\\n      uint160 sqrtPriceX96,\\n      int24 /*tick*/,\\n      uint16 /*observationIndex*/,\\n      uint16 /*observationCardinality*/,\\n      uint16 /*observationCardinalityNext*/,\\n      uint8 /*feeProtocol*/,\\n      bool /*unlocked*/\\n    ) {\\n      return sqrtPriceX96;\\n    } catch {\\n      return 0;\\n    }\\n  }\\n}\\n\\nabstract contract PorticoStart is PorticoBase {\\n  function _start_v3swap(PorticoStructs.TradeParameters memory params, uint256 actualAmount) internal returns (uint256 amount) {\\n    require(params.startTokenAddress.approve(address(ROUTERV3), params.startTokenAddress.balanceOf(address(this))), \\\"Approve fail\\\");\\n\\n    uint256 minAmountOut = calcMinAmount(\\n      uint256(params.amountSpecified),\\n      uint16(params.flags.maxSlippageFinish()),\\n      address(params.startTokenAddress),\\n      address(params.canonAssetAddress),\\n      params.flags.feeTierStart()\\n    );\\n\\n    //no deadline\\n    ROUTERV3.exactInputSingle(\\n      ISwapRouter02.ExactInputSingleParams(\\n        address(params.startTokenAddress), // tokenIn\\n        address(params.canonAssetAddress), //tokenOut\\n        params.flags.feeTierStart(), //fee\\n        address(this), //recipient\\n        actualAmount, //amountIn\\n        minAmountOut, //minAmountReceived\\n        0\\n      )\\n    );\\n    amount = params.canonAssetAddress.balanceOf(address(this));\\n  }\\n\\n  event PorticoSwapStart(uint64 indexed sequence, uint16 indexed chainId);\\n\\n  function start(\\n    PorticoStructs.TradeParameters memory params\\n  ) public payable returns (address emitterAddress, uint16 chainId, uint64 sequence) {\\n    // always check for native wrapping logic\\n    if (address(params.startTokenAddress) == address(WETH) && params.flags.shouldWrapNative()) {\\n      // if we are wrapping a token, we call deposit for the user, assuming we have been send what we need.\\n      WETH.deposit{ value: uint256(params.amountSpecified) }();\\n    } else {\\n      // otherwise, just get the token we need to do the swap (if we are swapping, or just the token itself)\\n      require(params.startTokenAddress.transferFrom(_msgSender(), address(this), uint256(params.amountSpecified)), \\\"transfer fail\\\");\\n    }\\n\\n    //Because wormhole rounds to 1e8, some dust may exist from previous txs\\n    //we use balanceOf to lump this in with future txs\\n    uint256 amount = params.startTokenAddress.balanceOf(address(this));\\n\\n    //ensure we received enough\\n    require(amount >= uint256(params.amountSpecified), \\\"transfer insufficient\\\");\\n\\n    // if the start token is the canon token, we don't need to swap\\n    if (params.startTokenAddress != params.canonAssetAddress) {\\n      // do the swap, and amount is now the amount that we received from the swap\\n      amount = _start_v3swap(params, amount);\\n    }\\n\\n    // allow the token bridge to do its token bridge things\\n    IERC20(params.canonAssetAddress).approve(address(TOKENBRIDGE), amount);\\n\\n    // now we need to produce the payload we are sending\\n    PorticoStructs.DecodedVAA memory decodedVAA = PorticoStructs.DecodedVAA(\\n      params.flags,\\n      params.finalTokenAddress,\\n      params.recipientAddress,\\n      amount,\\n      params.relayerFee\\n    );\\n\\n    sequence = TOKENBRIDGE.transferTokensWithPayload{ value: wormhole.messageFee() }(\\n      address(params.canonAssetAddress),\\n      amount,\\n      params.flags.recipientChain(),\\n      padAddress(params.recipientPorticoAddress),\\n      params.flags.bridgeNonce(),\\n      abi.encode(decodedVAA)\\n    );\\n    chainId = wormholeChainId;\\n    emitterAddress = address(TOKENBRIDGE);\\n    emit PorticoSwapStart(sequence, chainId);\\n  }\\n}\\n\\nabstract contract PorticoFinish is PorticoBase {\\n  event PorticoSwapFinish(bool swapCompleted, PorticoStructs.DecodedVAA data);\\n\\n  // receiveMessageAndSwap is the entrypoint for finishing the swap\\n  function receiveMessageAndSwap(bytes calldata encodedTransferMessage) external payable {\\n    // start by calling _completeTransfer, submitting the VAA to the token bridge\\n    (PorticoStructs.DecodedVAA memory message, PorticoStructs.BridgeInfo memory bridgeInfo) = _completeTransfer(encodedTransferMessage);\\n    // we modify the message to set the relayerFee to 0 if the msgSender is the fee recipient.\\n    bridgeInfo.relayerFeeAmount = (_msgSender() == message.recipientAddress) ? 0 : message.relayerFee;\\n\\n    //now process\\n    bool swapCompleted = finish(message, bridgeInfo);\\n    // simply emit the raw data bytes. it should be trivial to parse.\\n    emit PorticoSwapFinish(swapCompleted, message);\\n  }\\n\\n  // _completeTransfer takes the vaa for a payload3 token transfer, redeems it with the token bridge, and returns the decoded vaa payload\\n  function _completeTransfer(\\n    bytes calldata encodedTransferMessage\\n  ) internal returns (PorticoStructs.DecodedVAA memory message, PorticoStructs.BridgeInfo memory bridgeInfo) {\\n    /**\\n     * Call `completeTransferWithPayload` on the token bridge. This\\n     * method acts as a reentrancy protection since it does not allow\\n     * transfers to be redeemed more than once.\\n     */\\n    bytes memory transferPayload = TOKENBRIDGE.completeTransferWithPayload(encodedTransferMessage);\\n\\n    // parse the wormhole message payload into the `TransferWithPayload` struct, a payload3 token transfer\\n    ITokenBridge.TransferWithPayload memory transfer = TOKENBRIDGE.parseTransferWithPayload(transferPayload);\\n\\n    // decode the payload3 we originally sent into the decodedVAA struct.\\n    message = abi.decode(transfer.payload, (PorticoStructs.DecodedVAA));\\n\\n\\n    // get the address for the token on this address.\\n    bridgeInfo.tokenReceived = IERC20(\\n      transfer.tokenChain == wormholeChainId\\n        ? unpadAddress(transfer.tokenAddress)\\n        : TOKENBRIDGE.wrappedAsset(transfer.tokenChain, transfer.tokenAddress)\\n    );\\n    // put the transfer amount into amountReceived, knowing we may need to change it in a sec\\n    bridgeInfo.amountReceived = transfer.amount;\\n\\n    // if there are more than 8 decimals, we need to denormalize. wormhole token bridge truncates tokens of more than 8 decimals to 8 decimals.\\n    uint8 decimals = bridgeInfo.tokenReceived.decimals();\\n    if (decimals > 8) {\\n      bridgeInfo.amountReceived *= uint256(10) ** (decimals - 8);\\n    }\\n\\n    // ensure that the to address is this address\\n    require(unpadAddress(transfer.to) == address(this) && transfer.toChain == wormholeChainId, \\\"Token was not sent to this address\\\");\\n  }\\n\\n  ///@notice determines we need to swap and/or unwrap, does those things if needed, and sends tokens to user & pays relayer fee\\n  function finish(\\n    PorticoStructs.DecodedVAA memory params,\\n    PorticoStructs.BridgeInfo memory bridgeInfo\\n  ) internal returns (bool swapCompleted) {\\n    // see if the unwrap flag is set, and that the finalTokenAddress is the address we have set on deploy as our native weth9 address\\n    bool shouldUnwrap = params.flags.shouldUnwrapNative() && address(params.finalTokenAddress) == address(WETH);\\n    if ((params.finalTokenAddress) == bridgeInfo.tokenReceived) {\\n      // this means that we don't need to do a swap, aka, we received the canon asset.\\n      payOut(shouldUnwrap, params.finalTokenAddress, params.recipientAddress, bridgeInfo.relayerFeeAmount);\\n      return false;\\n    }\\n    //if we are here, if means we need to do the swap, resulting aset is sent to this address\\n    swapCompleted = _finish_v3swap(params, bridgeInfo);\\n    //if swap fails, relayer and user have already been paid in canon asset, so we are done\\n    if (!swapCompleted) {\\n      return swapCompleted;\\n    }\\n    // we must call payout if the swap was completed\\n    payOut(shouldUnwrap, params.finalTokenAddress, params.recipientAddress, bridgeInfo.relayerFeeAmount);\\n  }\\n\\n  // if swap fails, we don't pay fees to the relayer\\n  // the reason is because that typically, the swap fails because of bad market conditions\\n  // in this case, it is in the best interest of the mev/relayer to NOT relay this message until conditions are good\\n  // the user of course, who if they self relay, does not pay a fee, does not have this problem, so they can force this if they wish\\n  // swap failed - return canon asset to recipient\\n  // it will return true if the swap was completed, indicating that funds need to be sent from this contract to the recipient\\n  function _finish_v3swap(\\n    PorticoStructs.DecodedVAA memory params,\\n    PorticoStructs.BridgeInfo memory bridgeInfo\\n  ) internal returns (bool swapCompleted) {\\n    bridgeInfo.tokenReceived.approve(address(ROUTERV3), bridgeInfo.amountReceived);\\n\\n    uint256 minAmountOut = calcMinAmount(\\n      bridgeInfo.amountReceived,\\n      uint16(params.flags.maxSlippageFinish()),\\n      address(bridgeInfo.tokenReceived),\\n      address(params.finalTokenAddress),\\n      params.flags.feeTierFinish()\\n    );\\n\\n\\n    // set swap options with user params\\n    //no deadline\\n    ISwapRouter02.ExactInputSingleParams memory swapParams = ISwapRouter02.ExactInputSingleParams({\\n      tokenIn: address(bridgeInfo.tokenReceived),\\n      tokenOut: address(params.finalTokenAddress),\\n      fee: params.flags.feeTierFinish(),\\n      recipient: address(this), // we need to receive the token in order to correctly split the fee. tragic.\\n      amountIn: bridgeInfo.amountReceived,\\n      amountOutMinimum: minAmountOut,\\n      sqrtPriceLimitX96: 0 //sqrtPriceLimit\\n    });\\n\\n    // try to do the swap\\n    try ROUTERV3.exactInputSingle(swapParams) {\\n      swapCompleted = true;\\n    } catch /**Error(string memory e) */ {\\n      // if the swap fails, we just transfer the amount we received from the token bridge to the recipientAddress.\\n      // we also mark swapCompleted to be false, so that we don't try to payout to the recipient\\n      bridgeInfo.tokenReceived.transfer(params.recipientAddress, bridgeInfo.amountReceived);\\n      swapCompleted = false;\\n    }\\n  }\\n\\n  ///@notice pay out to user and relayer\\n  ///@notice this should always be called UNLESS swap fails, in which case payouts happen there\\n  function payOut(bool unwrap, IERC20 finalToken, address recipient, uint256 relayerFeeAmount) internal {\\n    //square up balances with what we actually have, don't trust reporting from the bridge\\n    //user gets total - relayer fee\\n    uint256 finalUserAmount = finalToken.balanceOf(address(this)) - relayerFeeAmount;\\n\\n    if (unwrap) {\\n      WETH.withdraw(IERC20(address(WETH)).balanceOf(address(this)));\\n      //send to user\\n      if (finalUserAmount > 0) {\\n        (bool sentToUser, ) = recipient.call{ value: finalUserAmount }(\\\"\\\");\\n        require(sentToUser, \\\"Failed to send Ether\\\");\\n      }\\n      if (relayerFeeAmount > 0) {\\n        //pay relayer fee\\n        (bool sentToRelayer, ) = _msgSender().call{ value: relayerFeeAmount }(\\\"\\\");\\n        require(sentToRelayer, \\\"Failed to send Ether\\\");\\n      }\\n    } else {\\n      //pay recipient\\n      if (finalUserAmount > 0) {\\n        require(finalToken.transfer(recipient, finalUserAmount), \\\"STF\\\");\\n      }\\n      if (relayerFeeAmount > 0) {\\n        //pay relayer\\n        require(finalToken.transfer(_msgSender(), relayerFeeAmount), \\\"STF\\\");\\n      }\\n    }\\n  }\\n}\\n\\ncontract Portico is PorticoFinish, PorticoStart {\\n  constructor(ISwapRouter02 _routerV3, ITokenBridge _bridge, IWETH _weth) PorticoBase(_routerV3, _bridge, _weth) {}\\n}\\n\"\r\n    },\r\n    \"contracts/PorticoStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSE\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ntype PorticoFlagSet is bytes32;\\n\\nlibrary PorticoFlagSetAccess {\\n  // the portico uses one word (32 bytes) to represent a large amount of variables\\n\\n  // bytes 0-1 is the recipient chain\\n  function recipientChain(PorticoFlagSet flagset) internal pure returns (uint16 ans) {\\n    assembly {\\n      ans := add(byte(0, flagset), shl(8, byte(1, flagset)))\\n    }\\n  }\\n\\n  // bytes 2-5 is the bridge nonce\\n  function bridgeNonce(PorticoFlagSet flagset) internal pure returns (uint32 ans) {\\n    assembly {\\n      ans := add(add(add(byte(2, flagset), shl(8, byte(3, flagset))), shl(16, byte(4, flagset))), shl(24, byte(5, flagset)))\\n    }\\n  }\\n\\n  // bytes 6,7,8 is the fee tier for start path\\n  function feeTierStart(PorticoFlagSet flagset) internal pure returns (uint24 ans) {\\n    assembly {\\n      ans := add(add(byte(6, flagset), shl(8, byte(7, flagset))), shl(16, byte(8, flagset)))\\n    }\\n  }\\n\\n  // bytes 9,10,11 is the fee tier for finish path\\n  function feeTierFinish(PorticoFlagSet flagset) internal pure returns (uint24 ans) {\\n    assembly {\\n      ans := add(add(byte(9, flagset), shl(8, byte(10, flagset))), shl(16, byte(11, flagset)))\\n    }\\n  }\\n\\n  // bytes 12,13 is the max slippage for the start path\\n  // in BPS - 100 = 1% slippage.\\n  function maxSlippageStart(PorticoFlagSet flagset) internal pure returns (int16 ans) {\\n    assembly {\\n      ans := add(byte(12, flagset), shl(8, byte(13, flagset)))\\n    }\\n  }\\n\\n  // bytes 14,15 is the max slippage for the start path\\n  // in BPS - 100 = 1% slippage.\\n  function maxSlippageFinish(PorticoFlagSet flagset) internal pure returns (int16 ans) {\\n    assembly {\\n      ans := add(byte(14, flagset), shl(8, byte(15, flagset)))\\n    }\\n  }\\n\\n  // shouldWrapNative is the first bit of the byte 31\\n  function shouldWrapNative(PorticoFlagSet flagset) internal pure returns (bool) {\\n    bytes32 fs = PorticoFlagSet.unwrap(flagset);\\n    return uint8(fs[31]) & (1 << 0) > 0;\\n  }\\n\\n  // shouldUnwrapNative is the second bit of byte 31\\n  function shouldUnwrapNative(PorticoFlagSet flagset) internal pure returns (bool) {\\n    bytes32 fs = PorticoFlagSet.unwrap(flagset);\\n    return uint8(fs[31]) & (1 << 1) > 0;\\n  }\\n}\\n\\nlibrary PorticoStructs {\\n  //16 + 32 + 24 + 24 + 16 + 16 + 8 + 8 == 144\\n  struct packedData {\\n    uint16 recipientChain;\\n    uint32 bridgeNonce;\\n    uint24 startFee;\\n    uint24 endFee;\\n    int16 slipStart;\\n    int16 slipEnd;\\n    bool wrap;\\n    bool unwrap;\\n  }\\n\\n  //https://github.com/wormhole-foundation/wormhole-solidity-sdk/blob/main/src/WormholeRelayerSDK.sol#L177\\n  //https://docs.wormhole.com/wormhole/quick-start/tutorials/hello-token#receiving-a-token\\n  struct TokenReceived {\\n    bytes32 tokenHomeAddress;\\n    uint16 tokenHomeChain;\\n    IERC20 tokenAddress;\\n    uint256 amount;\\n  }\\n\\n  //268,090 - to beat\\n  struct TradeParameters {\\n    PorticoFlagSet flags;\\n    IERC20 startTokenAddress;\\n    IERC20 canonAssetAddress;\\n    IERC20 finalTokenAddress;\\n    // address of the recipient on the recipientChain\\n    address recipientAddress;\\n    // address of the portico on the recipient chain\\n    address recipientPorticoAddress;\\n    // the amount of the token that the person wishes to transfer\\n    uint256 amountSpecified;\\n    uint256 relayerFee; // the amount of tokens of the recipient to give to the relayer\\n  }\\n  //268,041 158,788\\n  struct DecodedVAA {\\n    PorticoFlagSet flags;\\n    IERC20 finalTokenAddress;\\n    // the person to receive the token\\n    address recipientAddress;\\n    // the x asset amount expected to  be received\\n    uint256 canonAssetAmount;\\n    uint256 relayerFee;\\n  }\\n\\n  struct BridgeInfo {\\n    IERC20 tokenReceived;\\n    uint256 amountReceived;\\n    uint256 relayerFeeAmount;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/uniswap/ISwapRouter02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter02 {\\n  function factory() external view returns (address);\\n\\n  //frusturatingly, there is no deadline in this set of params\\n  //used on SwapRouter02 on Base chain\\n  struct ExactInputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    uint24 fee;\\n    address recipient;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n  /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n  /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n  /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n  /// @return amountOut The amount of the received token\\n  function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/uniswap/IV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\ninterface IV3Pool {\\n  function swap(\\n    address recipient,\\n    bool zeroForOne,\\n    int256 amountSpecified,\\n    uint160 sqrtPriceLimitX96,\\n    bytes calldata data\\n  ) external returns (int256 amount0, int256 amount1);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function fee() external view returns (uint24);\\n\\n  function slot0()\\n    external\\n    view\\n    returns (\\n      uint160 sqrtPriceX96,\\n      int24 tick,\\n      uint16 observationIndex,\\n      uint16 observationCardinality,\\n      uint16 observationCardinalityNext,\\n      uint8 feeProtocol,\\n      bool unlocked\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/uniswap/PoolAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\r\\nlibrary PoolAddress {\\r\\n  bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\r\\n\\r\\n  /// @notice The identifying key of the pool\\r\\n  struct PoolKey {\\r\\n    address token0;\\r\\n    address token1;\\r\\n    uint24 fee;\\r\\n  }\\r\\n\\r\\n  /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\r\\n  /// @param tokenA The first token of a pool, unsorted\\r\\n  /// @param tokenB The second token of a pool, unsorted\\r\\n  /// @param fee The fee level of the pool\\r\\n  /// @return Poolkey The pool details with ordered token0 and token1 assignments\\r\\n  function getPoolKey(address tokenA, address tokenB, uint24 fee) internal pure returns (PoolKey memory) {\\r\\n    if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\r\\n    return PoolKey({ token0: tokenA, token1: tokenB, fee: fee });\\r\\n  }\\r\\n\\r\\n  /// @notice Deterministically computes the pool address given the factory and PoolKey\\r\\n  /// @param factory The Uniswap V3 factory contract address\\r\\n  /// @param key The PoolKey\\r\\n  /// @return pool The contract address of the V3 pool\\r\\n  function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\r\\n    require(key.token0 < key.token1);\\r\\n    pool = address(\\r\\n      uint160(\\r\\n        uint256(keccak256(abi.encodePacked(hex\\\"ff\\\", factory, keccak256(abi.encode(key.token0, key.token1, key.fee)), POOL_INIT_CODE_HASH)))\\r\\n      )\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/uniswap/TickMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\r\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\r\\n/// prices between 2**-128 and 2**128\\r\\nlibrary TickMath {\\r\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\r\\n    int24 internal constant MIN_TICK = -887272;\\r\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\r\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\r\\n\\r\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\r\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\r\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\r\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\r\\n\\r\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\r\\n    /// @dev Throws if |tick| > max tick\\r\\n    /// @param tick The input tick for the above formula\\r\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\r\\n    /// at the given tick\\r\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\r\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\r\\n        require(absTick <= uint256(int256(MAX_TICK)), 'T');\\r\\n\\r\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\r\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\r\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\r\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\r\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\r\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\r\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\r\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\r\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\r\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\r\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\r\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\r\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\r\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\r\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\r\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\r\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\r\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\r\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\r\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\r\\n\\r\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\r\\n\\r\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\r\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\r\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\r\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\r\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\r\\n    /// ever return.\\r\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\r\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\r\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\r\\n        // second inequality must be < because the price can never reach the price at the max tick\\r\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\r\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\r\\n\\r\\n        uint256 r = ratio;\\r\\n        uint256 msb = 0;\\r\\n\\r\\n        assembly {\\r\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(4, gt(r, 0xFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(3, gt(r, 0xFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(2, gt(r, 0xF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(1, gt(r, 0x3))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := gt(r, 0x1)\\r\\n            msb := or(msb, f)\\r\\n        }\\r\\n\\r\\n        if (msb >= 128) r = ratio >> (msb - 127);\\r\\n        else r = ratio << (127 - msb);\\r\\n\\r\\n        int256 log_2 = (int256(msb) - 128) << 64;\\r\\n\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(63, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(62, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(61, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(60, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(59, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(58, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(57, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(56, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(55, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(54, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(53, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(52, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(51, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(50, f))\\r\\n        }\\r\\n\\r\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\r\\n\\r\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\r\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\r\\n\\r\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"orderLiterals\": true,\r\n        \"deduplicate\": true,\r\n        \"cse\": true,\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ISwapRouter02\",\"name\":\"_routerV3\",\"type\":\"address\"},{\"internalType\":\"contract ITokenBridge\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"contract IWETH\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swapCompleted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"PorticoFlagSet\",\"name\":\"flags\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"finalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"canonAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct PorticoStructs.DecodedVAA\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"PorticoSwapFinish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"}],\"name\":\"PorticoSwapStart\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROUTERV3\",\"outputs\":[{\"internalType\":\"contract ISwapRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKENBRIDGE\",\"outputs\":[{\"internalType\":\"contract ITokenBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTransferMessage\",\"type\":\"bytes\"}],\"name\":\"receiveMessageAndSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"PorticoFlagSet\",\"name\":\"flags\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"startTokenAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"canonAssetAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"finalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipientPorticoAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountSpecified\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"}],\"internalType\":\"struct PorticoStructs.TradeParameters\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"start\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"emitterAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormhole\",\"outputs\":[{\"internalType\":\"contract IWormhole\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormholeChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Portico", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc450000000000000000000000003ee18b2214aff97000d974cf647e7c347e8fa585000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}