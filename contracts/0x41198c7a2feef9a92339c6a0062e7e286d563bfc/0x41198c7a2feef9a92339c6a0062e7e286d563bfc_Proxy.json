{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/utils/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.20;\\n\\nimport \\\"./LibRawResult.sol\\\";\\nimport \\\"./Implementation.sol\\\";\\n\\n/// @notice Base class for all proxy contracts.\\ncontract Proxy {\\n    using LibRawResult for bytes;\\n\\n    /// @notice The address of the implementation contract used by this proxy.\\n    Implementation public immutable IMPL;\\n\\n    // Made `payable` to allow initialized crowdfunds to receive ETH as an\\n    // initial contribution.\\n    constructor(Implementation impl, bytes memory initCallData) payable {\\n        IMPL = impl;\\n        (bool s, bytes memory r) = address(impl).delegatecall(initCallData);\\n        if (!s) {\\n            r.rawRevert();\\n        }\\n    }\\n\\n    // Forward all calls to the implementation.\\n    fallback() external payable {\\n        Implementation impl = IMPL;\\n        assembly {\\n            calldatacopy(0x00, 0x00, calldatasize())\\n            let s := delegatecall(gas(), impl, 0x00, calldatasize(), 0x00, 0)\\n            returndatacopy(0x00, 0x00, returndatasize())\\n            if iszero(s) {\\n                revert(0x00, returndatasize())\\n            }\\n            return(0x00, returndatasize())\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/LibRawResult.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.20;\\n\\nlibrary LibRawResult {\\n    // Revert with the data in `b`.\\n    function rawRevert(bytes memory b) internal pure {\\n        assembly {\\n            revert(add(b, 32), mload(b))\\n        }\\n    }\\n\\n    // Return with the data in `b`.\\n    function rawReturn(bytes memory b) internal pure {\\n        assembly {\\n            return(add(b, 32), mload(b))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Implementation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.20;\\n\\n// Base contract for all contracts intended to be delegatecalled into.\\nabstract contract Implementation {\\n    error OnlyDelegateCallError();\\n    error OnlyConstructorError();\\n\\n    address public immutable IMPL;\\n\\n    constructor() {\\n        IMPL = address(this);\\n    }\\n\\n    // Reverts if the current function context is not inside of a delegatecall.\\n    modifier onlyDelegateCall() virtual {\\n        if (address(this) == IMPL) {\\n            revert OnlyDelegateCallError();\\n        }\\n        _;\\n    }\\n\\n    // Reverts if the current function context is not inside of a constructor.\\n    modifier onlyConstructor() {\\n        if (address(this).code.length != 0) {\\n            revert OnlyConstructorError();\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"viaIR\": true\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract Implementation\",\"name\":\"impl\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initCallData\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"IMPL\",\"outputs\":[{\"internalType\":\"contract Implementation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000023c886396cfbadb0f3bac4b728150e8a59dc0e1000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000644ad6f10d500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002714711487800000000000000000000000000000000000000000000000000000271471148780000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002714711487800000000000000000000000000000000000000000000000d3c21bcecceda1000000000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f4800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001ec707261742062696f6761736d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c707261742062696f6761736d0000000000000000000000000000000000000000000000000000000000000000b676cfeeed5c7b739452a502f1eff9ab684a56da000000000000000000000000c0e0ec5541e26e93d5a9f5e999ab2a0a7f8260ae0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000003f480000000000000000000000000000000000000000000000000000000000000c4e000000000000000000000000000000000000000000000000000000000000005dc00000000000000000000000000000000000000000000000000000000000000fa000000000000000000000000f7f52dd34bc21eda08c0b804c7c1dbc48375820f000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000aa34ea5e53495867f7e3a9b57d3bbdc592ae3487000000000000000000000000403e16cd589be1966fe9369a1814e04d0dd60c70000000000000000000000000bb9883ea535570e379898f0a499b714c7ee2195b000000000000000000000000700dbab328d78ea690042eb4b1bdc27da88a50fb0000000000000000000000003992a6f984a179d84c22b3d24de3746ce1545a7b0000000000000000000000000b2dade5ff7e6d25092be13e08dd665a7adac17700000000000000000000000073cfbcd23d4bbbce28de343d0ea98ddc518a98fc0000000000000000000000002bc775a32f60b520ee2fb08bbdfb855937b74dc10000000000000000000000007621831c2ce9bbf9c40b2bb6d1e92a96c25c01890000000000000000000000000d4620bb7176094ab42736f8aef394b2cfe8d5a80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}