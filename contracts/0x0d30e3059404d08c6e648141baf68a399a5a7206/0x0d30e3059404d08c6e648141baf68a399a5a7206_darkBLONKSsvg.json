{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/1_SVG_DarkBLONKS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/// @title darkBLONKS SVG Contract v1.1\\r\\n/// @author Matto\\r\\n/// @notice This contract builds the SVG text.\\r\\n/// @custom:security-contact monkmatto@protonmail.com\\r\\n\\r\\ninterface iBLONKSsvg {\\r\\n    function assembleSVG(\\r\\n        uint256 _ownerEntropy,\\r\\n        uint256 _tokenEntropy,\\r\\n        uint8[11] memory _traitsArray,\\r\\n        uint16[110] memory _locatsArray\\r\\n    ) external view returns (string memory);\\r\\n}\\r\\n\\r\\ncontract darkBLONKSsvg is Ownable {\\r\\n    using Strings for string;\\r\\n    address private OGcontract = 0xf82aB780a635d577743Bc34AEec1873ea5d37ed5; // Mainnet\\r\\n\\r\\n    function updateOGcontract(address _newOGcontract) external onlyOwner {\\r\\n        OGcontract = _newOGcontract;\\r\\n    }\\r\\n\\r\\n    function rA(\\r\\n        uint16 _x,\\r\\n        uint16 _y,\\r\\n        uint16 _w,\\r\\n        uint16 _h,\\r\\n        uint16 _r,\\r\\n        uint16 _g,\\r\\n        uint16 _b,\\r\\n        uint16 _sw,\\r\\n        uint16 _sc\\r\\n    ) internal pure returns (string memory) {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    '<rect x=\\\"',\\r\\n                    Strings.toString(_x),\\r\\n                    '\\\" y=\\\"',\\r\\n                    Strings.toString(_y),\\r\\n                    '\\\" width=\\\"',\\r\\n                    Strings.toString(_w),\\r\\n                    '\\\" height=\\\"',\\r\\n                    Strings.toString(_h),\\r\\n                    '\\\" style=\\\"fill: rgb(',\\r\\n                    Strings.toString(_r),\\r\\n                    \\\", \\\",\\r\\n                    Strings.toString(_g),\\r\\n                    \\\", \\\",\\r\\n                    Strings.toString(_b),\\r\\n                    \\\"); stroke-width: \\\",\\r\\n                    Strings.toString(_sw),\\r\\n                    \\\"px; stroke: rgb(\\\",\\r\\n                    Strings.toString(_sc),\\r\\n                    \\\", \\\",\\r\\n                    Strings.toString(_sc),\\r\\n                    \\\", \\\",\\r\\n                    Strings.toString(_sc),\\r\\n                    ');\\\"/>'\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function rS(\\r\\n        uint16 _x,\\r\\n        uint16 _y,\\r\\n        uint16 _w,\\r\\n        uint16 _h,\\r\\n        string memory _style\\r\\n    ) internal pure returns (string memory) {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    '<rect x=\\\"',\\r\\n                    Strings.toString(_x),\\r\\n                    '\\\" y=\\\"',\\r\\n                    Strings.toString(_y),\\r\\n                    '\\\" width=\\\"',\\r\\n                    Strings.toString(_w),\\r\\n                    '\\\" height=\\\"',\\r\\n                    Strings.toString(_h),\\r\\n                    '\\\" style=\\\"fill: rgb',\\r\\n                    _style\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n\\r\\n    function _substring(string memory str) internal pure returns (string memory) {\\r\\n        bytes memory strBytes = bytes(str);\\r\\n        require(strBytes.length > 38, \\\"String is too short\\\");\\r\\n\\r\\n        bytes memory result = new bytes(strBytes.length - 38);\\r\\n\\r\\n        for (uint i = 38; i < strBytes.length; i++) {\\r\\n            result[i - 38] = strBytes[i];\\r\\n        }\\r\\n\\r\\n        return string(result);\\r\\n    }\\r\\n\\r\\n\\r\\n    function assembleSVG(\\r\\n        uint256 eO,\\r\\n        uint256 eT,\\r\\n        uint8[11] memory tA,\\r\\n        uint16[110] memory loc\\r\\n    ) external view returns (string memory) {\\r\\n        // Variables\\r\\n        string memory OGsvg = iBLONKSsvg(OGcontract).assembleSVG(\\r\\n            eO,\\r\\n            eT,\\r\\n            tA,\\r\\n            loc\\r\\n        );\\r\\n        OGsvg = _substring(OGsvg);\\r\\n        string memory b = string(\\r\\n            abi.encodePacked(\\r\\n                '<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>',\\r\\n                '<svg viewBox=\\\"0 0 1000 1000\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\r\\n                OGsvg,\\r\\n                '<svg viewBox=\\\"0 0 1000 1000\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\r\\n                rS(0, 0, 1000, 1000, '(0,0,0); fill-opacity: 0.7;\\\"/>')\\r\\n            )\\r\\n        );\\r\\n        string memory s;\\r\\n        // Ear rings\\r\\n        loc[49] = loc[32] + loc[30] - 35;\\r\\n        s = '(242,242,255); stroke-width: 2px; stroke: rgb(233,233,242);\\\"/>';\\r\\n        if (tA[7] == 4) {\\r\\n            s = '(22,22,22); fill-opacity: 0.5; stroke-width: 8px; stroke: rgb(12,12,12);\\\"/>';\\r\\n            loc[48] = 20;\\r\\n        }\\r\\n        if (tA[7] == 1 || tA[7] == 3 || tA[7] == 4) {\\r\\n            b = string(\\r\\n                abi.encodePacked(\\r\\n                    b,\\r\\n                    rS(\\r\\n                        loc[28] + (loc[31] - loc[48]) / 2,\\r\\n                        loc[49],\\r\\n                        loc[48],\\r\\n                        loc[48],\\r\\n                        s\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        if (tA[7] == 2 || tA[7] == 3 || tA[7] == 4) {\\r\\n            b = string(\\r\\n                abi.encodePacked(\\r\\n                    b,\\r\\n                    rS(\\r\\n                        loc[29] + (loc[31] - loc[48]) / 2,\\r\\n                        loc[49],\\r\\n                        loc[48],\\r\\n                        loc[48],\\r\\n                        s\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        loc[49] = loc[30] + 20;\\r\\n        s = '(252,214,18);\\\"/>';\\r\\n        if (tA[8] == 1 || tA[8] == 3) {\\r\\n            b = string(\\r\\n                abi.encodePacked(b, rS(loc[28] - 15, loc[49], 30, 15, s))\\r\\n            );\\r\\n        }\\r\\n        if (tA[8] == 2 || tA[8] == 3) {\\r\\n            b = string(\\r\\n                abi.encodePacked(\\r\\n                    b,\\r\\n                    rS(loc[29] + loc[31] - 15, loc[49], 30, 15, s)\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        // Extra Detail\\r\\n        if (tA[3] == 1) {\\r\\n            s = '(50,50,255);\\\"/>';\\r\\n        } else if (tA[3] == 2) {\\r\\n            s = '(222,22,22);\\\"/>';\\r\\n        } else if (tA[3] == 3) {\\r\\n            s = '(150,220,255);\\\"/>';\\r\\n        } else if (tA[3] == 4) {\\r\\n            s = '(124,124,124); fill-opacity: 0.8;\\\"/>';\\r\\n        }\\r\\n        if (tA[3] > 0) {\\r\\n            b = string(\\r\\n                abi.encodePacked(b, rS(loc[54], loc[55], loc[56], loc[57], s))\\r\\n            );\\r\\n            b = string(\\r\\n                abi.encodePacked(b, rS(loc[58], loc[59], loc[60], loc[61], s))\\r\\n            );\\r\\n        }\\r\\n        // Pupils\\r\\n        if (tA[1] == 1) {\\r\\n            s = '(220,52,52); stroke-width: 6px; stroke: rgb(210,42,42);\\\"/>';\\r\\n        } else if (tA[1] == 2) {\\r\\n            s = '(47,201,20); stroke-width: 6px; stroke: rgb(70,219,44);\\\"/>';\\r\\n        } else {\\r\\n            if (tA[4] == 1) {\\r\\n                s = '(67, 191, 240); stroke-width: 6px; stroke: rgb(77, 201, 250);\\\"/>';\\r\\n            } else if (tA[4] == 2) {\\r\\n                s = '(243,104,203); stroke-width: 6px; stroke: rgb(255,116,225);\\\"/>';\\r\\n            } else if (tA[4] == 3) {\\r\\n                s = '(22,122,255); stroke-width: 8px; stroke: rgb(255,22,22);\\\"/>';\\r\\n            } else if (tA[4] == 4) {\\r\\n                s = '(252,214,18); stroke-width: 6px; stroke: rgb(242,204,8);\\\"/>';\\r\\n            } else {\\r\\n                s = '(212,212,212); stroke-width: 6px; stroke: rgb(222,222,222);\\\"/>';\\r\\n            }\\r\\n        }\\r\\n        b = string(\\r\\n            abi.encodePacked(b, rS(loc[16], loc[17], loc[18], loc[19], s))\\r\\n        );\\r\\n        b = string(\\r\\n            abi.encodePacked(b, rS(loc[20], loc[21], loc[22], loc[23], s))\\r\\n        );\\r\\n\\r\\n        if (tA[6] > 0) {\\r\\n            b = string(\\r\\n                abi.encodePacked(\\r\\n                    b,\\r\\n                    rA(loc[87], loc[88], loc[89], loc[90], 252, 214, 18, 0, 0)\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        if (tA[6] == 2) {\\r\\n            b = string(\\r\\n                abi.encodePacked(\\r\\n                    b,\\r\\n                    rA(loc[87], loc[91], loc[89], loc[92], 0, 120, 90, 0, 0)\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        // Other\\r\\n        if (tA[9] == 3) {\\r\\n            b = string(\\r\\n                abi.encodePacked(\\r\\n                    b,\\r\\n                    rS(loc[98], loc[99], loc[100], loc[101], '(252,214,18);\\\"/>')\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        b = string(abi.encodePacked(b, \\\"</svg></svg>\\\"));\\r\\n        return b;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eT\",\"type\":\"uint256\"},{\"internalType\":\"uint8[11]\",\"name\":\"tA\",\"type\":\"uint8[11]\"},{\"internalType\":\"uint16[110]\",\"name\":\"loc\",\"type\":\"uint16[110]\"}],\"name\":\"assembleSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOGcontract\",\"type\":\"address\"}],\"name\":\"updateOGcontract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "darkBLONKSsvg", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}