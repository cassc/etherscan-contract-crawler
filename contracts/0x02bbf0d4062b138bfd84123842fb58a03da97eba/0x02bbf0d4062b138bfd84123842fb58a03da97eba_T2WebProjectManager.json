{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/T2WebProjectManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./lib/Signature.sol\\\";\\nimport \\\"./T2Web.sol\\\";\\nimport \\\"./interfaces/IT2WebProjectManager.sol\\\";\\nimport \\\"./interfaces/IT2WebProjectMaster.sol\\\";\\nimport \\\"./interfaces/IERC1155.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\ncontract T2WebProjectManager is IT2WebProjectManager, AccessControlUpgradeable {\\n  using Signature for bytes32;\\n\\n  bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n  uint256 public constant A_HUNDRED_PERCENT = 10_000; // 100%\\n\\n  IT2WebProjectMaster private _projectMaster;\\n\\n  address private _signer;\\n  address private _adminFeeReceiver; // admin fee receiver\\n\\n  // Deprecated: Do not use\\n  // project id => sale type => user => user purchased amount\\n  mapping(uint256 => mapping(uint256 => mapping(address => uint256))) private _userPurchased;\\n\\n  // Deprecated: Do not use\\n  // project id => sale type => purchased amount\\n  mapping(uint256 => mapping(uint256 => uint256)) private _purchased;\\n\\n  // Deprecated: Do not use\\n  // project id => fund info\\n  mapping(uint256 => FundInfo) private _fundData;\\n\\n  // project id => amount\\n  mapping(uint256 => uint256) private _affiliateFee;\\n\\n  // project id => user => amount\\n  mapping(uint256 => mapping(address => uint256)) private _userClaimedFee;\\n\\n  // ==========================================================================\\n  // Added for optimize gas\\n  // ==========================================================================\\n\\n  // Deprecated: Do not use, UAT ONLY\\n  // user => project id => referralCount\\n  mapping(address => mapping(uint256 => uint256)) private _userReferralCounts;\\n\\n  // project id => project owner\\n  mapping(uint256 => address) private _projectOwners;\\n\\n  // user => project id => affiliate reward\\n  mapping(address => mapping(uint256 => uint256)) private _userAffiliateReward;\\n\\n  // user => native claimed affiliate reward\\n  mapping(address => uint256) private _userClaimedAffiliateReward;\\n\\n  // user => erc20 token claimed affiliate reward\\n  mapping(address => uint256) private _erc20UserClaimedAffiliateReward;\\n\\n  modifier onlyAdmin() {\\n    require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"ProjectManager: caller is not admin\\\");\\n    _;\\n  }\\n\\n  modifier onlyOperator() {\\n    require(hasRole(OPERATOR_ROLE, _msgSender()), \\\"ProjectManager: caller is not operator\\\");\\n    _;\\n  }\\n\\n  function initialize(address projectMaster_, address signer_, address adminFeeReceiver_) external initializer {\\n    __AccessControl_init();\\n\\n    _projectMaster = IT2WebProjectMaster(projectMaster_);\\n    _signer = signer_;\\n    _adminFeeReceiver = adminFeeReceiver_;\\n\\n    address msgSender = _msgSender();\\n    _setupRole(DEFAULT_ADMIN_ROLE, msgSender);\\n    _setupRole(OPERATOR_ROLE, msgSender);\\n  }\\n\\n  function setProjectMaster(address projectMaster_) external onlyAdmin {\\n    _projectMaster = IT2WebProjectMaster(projectMaster_);\\n  }\\n\\n  function setSigner(address signer_) external onlyAdmin {\\n    _signer = signer_;\\n  }\\n\\n  function setAdminFeeReceiver(address adminFeeReceiver_) external onlyAdmin {\\n    _adminFeeReceiver = adminFeeReceiver_;\\n  }\\n\\n  function getProjectMaster() external view returns (address) {\\n    return address(_projectMaster);\\n  }\\n\\n  receive() external payable {}\\n\\n  function createProject(\\n    ProjectRequest calldata projectInfo_,\\n    SaleInfo[] calldata saleData_,\\n    bytes calldata signature_\\n  ) public returns (uint256 projectId) {\\n    address owner = _msgSender();\\n    bytes32 messageHash = keccak256(\\n      abi.encodePacked(\\n        projectInfo_.backendId,\\n        owner,\\n        // presale\\n        saleData_[0].price,\\n        saleData_[0].amount,\\n        saleData_[0].maxPurchase,\\n        // public sale\\n        saleData_[1].price,\\n        saleData_[1].amount,\\n        saleData_[1].maxPurchase\\n      )\\n    );\\n    messageHash.verifySignature(signature_, _signer);\\n\\n    projectId = _createProject(projectInfo_, saleData_, owner);\\n  }\\n\\n  function _createProject(\\n    ProjectRequest calldata projectInfo_,\\n    SaleInfo[] calldata saleData_,\\n    address projectOwner_\\n  ) internal returns (uint256) {\\n    (uint256 _projectId, uint256 _backendId, address _contractAddress) = _projectMaster.createProject(\\n      projectOwner_,\\n      projectInfo_,\\n      saleData_\\n    );\\n\\n    uint256 distributorCnt = projectInfo_.distributors.length;\\n    if (distributorCnt > 0) {\\n      FundInfo storage fundInfo = _fundData[_projectId];\\n      for (uint256 i = 0; i < distributorCnt; i++) {\\n        fundInfo.distributors.push(\\n          Distributor({ addr: projectInfo_.distributors[i].addr, feeRate: projectInfo_.distributors[i].feeRate, feeAmount: 0 })\\n        );\\n      }\\n    }\\n\\n    _projectOwners[_projectId] = projectOwner_;\\n\\n    emit ProjectCreated(_backendId, _projectId, _contractAddress, projectOwner_);\\n\\n    return _projectId;\\n  }\\n\\n  function revealProject(uint256 projectId_, string memory baseTokenURI_) external {\\n    require(_projectOwners[projectId_] == msg.sender, \\\"ProjectManager: caller is not project owner\\\");\\n\\n    _projectMaster.revealProject(projectId_, baseTokenURI_);\\n\\n    emit ProjectRevealed(projectId_, true, baseTokenURI_);\\n  }\\n\\n  /*\\n    funds array\\n      funds[0]: admin\\n      funds[1]: affiliate\\n      funds[2]: project owner\\n      funds[3]: distributor 1\\n      funds[4]: distributor 2\\n      ...\\n  */\\n  // function _calcFunds(Project memory project_, uint256 totalPrice_, bool includeAffiliate_) internal returns (uint256[] memory) {\\n  //   FundInfo storage data = _fundData[project_.id];\\n\\n  //   uint256 distributorCnt = data.distributors.length;\\n  //   uint256[] memory funds = new uint256[](3 + distributorCnt);\\n  //   funds[0] = (totalPrice_ * project_.adminFeeRate) / A_HUNDRED_PERCENT;\\n  //   funds[1] = 0;\\n  //   if (includeAffiliate_) {\\n  //     funds[1] = (totalPrice_ * project_.affiliateFeeRate) / A_HUNDRED_PERCENT;\\n  //   }\\n\\n  //   funds[2] = totalPrice_ - funds[0] - funds[1];\\n\\n  //   for (uint256 i = 0; i < distributorCnt; i++) {\\n  //     uint256 fee = (totalPrice_ * data.distributors[i].feeRate) / A_HUNDRED_PERCENT;\\n  //     funds[3 + i] = fee;\\n  //     funds[2] = funds[2] - fee;\\n\\n  //     data.distributors[i].feeAmount += fee;\\n  //   }\\n\\n  //   if (funds[0] > 0) data.admin += funds[0];\\n  //   if (funds[2] > 0) data.projectOwner += funds[2];\\n\\n  //   return funds;\\n  // }\\n\\n  // function _getPresaleRemaining(uint256 projectId_) internal view returns (uint256) {\\n  //   uint256 soldAmount = _purchased[projectId_][uint256(SaleType.PRESALE)];\\n  //   SaleInfo memory saleInfo = _projectMaster.getSaleInfo(projectId_, uint256(SaleType.PRESALE));\\n  //   return saleInfo.amount > soldAmount ? saleInfo.amount - soldAmount : 0;\\n  // }\\n\\n  // function _verifyBuy(address buyer_, uint256 backendId_, uint256 projectId_, uint256 amount_, bytes calldata signature_) internal view {\\n  //   require(project_.state == ProjectState.DEPLOYED, \\\"INVALID_STATE\\\");\\n  //   require(saleInfo_.amount > 0, \\\"BUY_NOT_ALLOWED\\\");\\n  //   require(block.timestamp >= startTime_ && block.timestamp <= endTime_, \\\"BUY_NOT_ALLOWED\\\");\\n\\n  //   Check max purchase if required\\n  //   if (saleInfo_.maxPurchase > 0) {\\n  //     uint256 purchasedAmount = _userPurchased[project_.id][saleType_][buyer_];\\n  //     require(purchasedAmount + amount_ <= saleInfo_.maxPurchase, \\\"AMOUNT_OVER_LIMITATION\\\");\\n  //   }\\n\\n  //   uint256 soldAmount = _purchased[project_.id][saleType_];\\n  //   uint256 maxSupply = saleInfo_.amount;\\n  //   if (project_.transferUnsoldDisabled && SaleType(saleType_) == SaleType.PUBLICSALE) {\\n  //     maxSupply += _getPresaleRemaining(project_.id);\\n  //   }\\n  //   require(soldAmount + amount_ <= maxSupply, \\\"AMOUNT_INVALID\\\");\\n\\n  //   Check whitelist if required\\n  //   if (saleInfo_.whitelistRequired) {\\n  //     bytes32 messageHash = keccak256(abi.encodePacked(project_.backendId, project_.id, buyer_, amount_));\\n  //     messageHash.verifySignature(signature_, _signer);\\n  //   }\\n\\n  //   // always check signature\\n  //   bytes32 messageHash = keccak256(abi.encodePacked(backendId_, projectId_, buyer_, amount_));\\n  //   messageHash.verifySignature(signature_, _signer);\\n  // }\\n\\n  function _buy(\\n    address buyer_,\\n    address recipient_,\\n    uint256 projectId_,\\n    uint256 saleType_,\\n    SaleData calldata saleData_,\\n    uint256 amount_,\\n    string memory referralCode_\\n  ) internal {\\n    address referral = address(0);\\n    if (saleData_.affiliateEnabled) {\\n      referral = _projectMaster.checkAffiliate(projectId_, referralCode_);\\n    }\\n\\n    uint256 totalPrice = saleData_.price * amount_;\\n    if (saleData_.price > 0) {\\n      if (address(saleData_.paymentToken) != address(0)) {\\n        IERC20(saleData_.paymentToken).transferFrom(buyer_, address(this), totalPrice);\\n      } else {\\n        require(msg.value == totalPrice, \\\"ProjectManager: amount does not match with price\\\");\\n      }\\n    }\\n\\n    if (referral != address(0)) {\\n      // _projectMaster.addReferral(projectId_, buyer_);\\n      _projectMaster.addReferral(projectId_, recipient_);\\n\\n      uint256 affiliateFee = (totalPrice * saleData_.affiliateFeeRate) / A_HUNDRED_PERCENT;\\n      if (affiliateFee > 0) {\\n        _affiliateFee[projectId_] += affiliateFee;\\n        _userAffiliateReward[referral][projectId_] += affiliateFee;\\n      }\\n    }\\n\\n    // Distribute NFTs\\n    uint256[] memory tokenIds = _projectMaster.distributeNFTs(\\n      saleData_.backendId,\\n      saleData_.vaultType,\\n      saleData_.contractAddress,\\n      recipient_, // buyer_,\\n      amount_\\n    );\\n\\n    emit ItemSold(recipient_, projectId_, amount_, saleType_, tokenIds, referralCode_, referral);\\n  }\\n\\n  function buy(\\n    uint256 projectId_,\\n    uint256 saleType_,\\n    SaleData calldata saleData_,\\n    uint256 amount_,\\n    string memory referralCode_,\\n    bytes calldata signature_\\n  ) external payable {\\n    // Verify signature\\n    address buyer = _msgSender();\\n\\n    bytes32 data = keccak256(\\n      abi.encodePacked(\\n        saleData_.contractAddress,\\n        saleData_.price,\\n        saleData_.vaultType,\\n        // saleData_.paymentToken,\\n        saleData_.affiliateEnabled,\\n        saleData_.affiliateFeeRate\\n      )\\n    );\\n    bytes32 messageHash = keccak256(abi.encodePacked(saleData_.backendId, projectId_, buyer, amount_, data));\\n    messageHash.verifySignature(signature_, _signer);\\n\\n    _buy(buyer, buyer, projectId_, saleType_, saleData_, amount_, referralCode_);\\n  }\\n\\n  function buyByOperator(\\n    address buyer_,\\n    uint256 projectId_,\\n    uint256 saleType_,\\n    SaleData calldata saleData_,\\n    uint256 amount_,\\n    string memory referralCode_,\\n    bytes calldata signature_\\n  ) external payable onlyOperator {\\n    address operator = _msgSender();\\n    bytes32 data = keccak256(\\n      abi.encodePacked(\\n        saleData_.contractAddress,\\n        saleData_.price,\\n        saleData_.vaultType,\\n        // saleData_.paymentToken,\\n        saleData_.affiliateEnabled,\\n        saleData_.affiliateFeeRate\\n      )\\n    );\\n    bytes32 messageHash = keccak256(abi.encodePacked(saleData_.backendId, projectId_, buyer_, amount_, data));\\n    messageHash.verifySignature(signature_, _signer);\\n\\n    _buy(operator, buyer_, projectId_, saleType_, saleData_, amount_, referralCode_);\\n  }\\n\\n  function getMaxSupply(uint256 projectId) external view returns (uint256) {\\n    return _projectMaster.getMaxSupply(projectId);\\n  }\\n\\n  function getTotalSupply(uint256 projectId) external view returns (uint256) {\\n    return _projectMaster.getTotalSupply(projectId);\\n  }\\n\\n  function _estimateFee(uint256 projectId, address user, uint256[] memory saleInfo) internal view returns (uint256) {\\n    FundInfo memory funds = _fundData[projectId];\\n    Project memory project = _projectMaster.getProject(projectId);\\n    uint256 presalePrice = _projectMaster.getPrice(projectId, 0);\\n    uint256 publicsalePrice = _projectMaster.getPrice(projectId, 1);\\n\\n    uint256 userClaimed = _userClaimedFee[projectId][user];\\n\\n    uint256 total = saleInfo[0] * presalePrice + saleInfo[1] * publicsalePrice;\\n    uint256 adminFee = (total * project.adminFeeRate) / A_HUNDRED_PERCENT;\\n    uint256 ownerFee = total - adminFee - _affiliateFee[projectId];\\n\\n    uint256 distributorFee = 0;\\n    for (uint256 i = 0; i < funds.distributors.length; i++) {\\n      uint256 fee = (total * funds.distributors[i].feeRate) / A_HUNDRED_PERCENT;\\n      if (user == funds.distributors[i].addr) {\\n        distributorFee = fee;\\n      }\\n      ownerFee -= fee;\\n    }\\n\\n    if (user == _adminFeeReceiver) {\\n      return adminFee - userClaimed;\\n    }\\n    if (user == _projectOwners[projectId]) {\\n      return ownerFee - userClaimed;\\n    }\\n    if (distributorFee > 0) {\\n      return distributorFee - userClaimed;\\n    }\\n\\n    return 0;\\n  }\\n\\n  function getPendingFee(uint256 projectId, address user, uint256[] memory saleInfo) external view returns (uint256) {\\n    return _estimateFee(projectId, user, saleInfo);\\n  }\\n\\n  function claimFee(uint256 projectId, uint256[] memory saleInfo, bytes calldata signature) external payable returns (uint256) {\\n    address user = _msgSender();\\n    Project memory project = _projectMaster.getProject(projectId);\\n\\n    bytes32 messageHash = keccak256(\\n      abi.encodePacked(\\n        projectId,\\n        saleInfo[0], // presale sold amount\\n        saleInfo[1] // publicsale sold amount\\n      )\\n    );\\n    messageHash.verifySignature(signature, _signer);\\n\\n    uint256 amount = _estimateFee(projectId, user, saleInfo);\\n\\n    if (amount > 0) {\\n      if (project.paymentToken != address(0)) {\\n        IERC20 paymentToken = IERC20(project.paymentToken);\\n\\n        if (amount > paymentToken.balanceOf(address(this))) {\\n          amount = paymentToken.balanceOf(address(this));\\n        }\\n        _userClaimedFee[projectId][user] += amount;\\n\\n        paymentToken.transfer(user, amount);\\n      } else {\\n        if (amount > address(this).balance) {\\n          amount = address(this).balance;\\n        }\\n        _userClaimedFee[projectId][user] += amount;\\n\\n        payable(user).transfer(amount);\\n      }\\n\\n      emit FeeClaimed(projectId, user, amount);\\n    }\\n\\n    return amount;\\n  }\\n\\n  function claimItems(uint256 projectId, uint256 amount) external {\\n    require(_projectOwners[projectId] == _msgSender(), \\\"ProjectManager: caller is not project owner\\\");\\n    _projectMaster.claimItems(projectId, amount, _msgSender());\\n  }\\n\\n  function closeProject(uint256 projectId) external {\\n    require(_projectOwners[projectId] == _msgSender(), \\\"ProjectManager: caller is not project owner or operator\\\");\\n\\n    _projectMaster.closeProject(projectId);\\n\\n    emit ProjectClosed(projectId);\\n  }\\n\\n  function _estimateAffiliateReward(address user) internal view returns (uint256, uint256, address) {\\n    uint256 native;\\n    uint256 erc20;\\n    address paymentToken;\\n\\n    uint256 lastProjectId = _projectMaster.getCurrentProjectId();\\n    for (uint256 pid = 1; pid <= lastProjectId; pid++) {\\n      Project memory project = _projectMaster.getProject(pid);\\n      if (project.affiliateEnabled) {\\n        if (address(project.paymentToken) != address(0)) {\\n          paymentToken = address(project.paymentToken);\\n          erc20 += _userAffiliateReward[user][pid];\\n        } else {\\n          native += _userAffiliateReward[user][pid];\\n        }\\n      }\\n    }\\n    native = native - _userClaimedAffiliateReward[user];\\n    erc20 = erc20 - _erc20UserClaimedAffiliateReward[user];\\n    return (native, erc20, paymentToken);\\n  }\\n\\n  function getAffiliateReward(address user) external view returns (uint256, uint256) {\\n    (uint256 nativeReward, uint256 erc20Reward, ) = _estimateAffiliateReward(user);\\n    return (nativeReward, erc20Reward);\\n  }\\n\\n  function claimAffiliateReward() external payable returns (uint256, uint256) {\\n    address user = _msgSender();\\n\\n    (uint256 nativeReward, uint256 erc20Reward, address paymentToken) = _estimateAffiliateReward(user);\\n\\n    if (nativeReward > 0) {\\n      if (nativeReward > address(this).balance) {\\n        nativeReward = address(this).balance;\\n      }\\n      _userClaimedAffiliateReward[user] += nativeReward;\\n      payable(user).transfer(nativeReward);\\n    }\\n\\n    if (erc20Reward > 0) {\\n      if (erc20Reward > IERC20(paymentToken).balanceOf(address(this))) {\\n        erc20Reward = IERC20(paymentToken).balanceOf(address(this));\\n      }\\n      _erc20UserClaimedAffiliateReward[user] += erc20Reward;\\n      IERC20(paymentToken).transfer(user, erc20Reward);\\n    }\\n\\n    emit AffiliateRewardClaimed(user, nativeReward, erc20Reward, paymentToken);\\n\\n    return (nativeReward, erc20Reward);\\n  }\\n\\n  function getProjectOperator() external view override returns (address) {\\n    return _projectMaster.getProjectOperator();\\n  }\\n\\n  function setProjectOperator(address addr_) external override onlyAdmin {\\n    _projectMaster.setProjectOperator(addr_);\\n  }\\n\\n  function grantProjectOperator(uint256 projectId_, address addr_) external override onlyAdmin {\\n    _projectMaster.grantProjectOperator(projectId_, addr_);\\n  }\\n\\n  function revokeProjectOperator(uint256 projectId_, address addr_) external override onlyAdmin {\\n    _projectMaster.revokeProjectOperator(projectId_, addr_);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Signature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Signature {\\n\\n    function splitSignature(bytes memory sig) private pure returns (uint8 v, bytes32 r, bytes32 s) {\\n        require(sig.length == 65);\\n\\n        assembly {\\n            // first 32 bytes, after the length prefix.\\n            r := mload(add(sig, 32))\\n            // second 32 bytes.\\n            s := mload(add(sig, 64))\\n            // final byte (first byte of the next 32 bytes).\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        return (v, r, s);\\n    }\\n\\n    function recoverSigner(bytes32 message, bytes memory sig) internal pure returns (address) {\\n        (uint8 v, bytes32 r, bytes32 s) = splitSignature(sig);\\n\\n        return ecrecover(message, v, r, s);\\n    }\\n\\n    function prefixed(bytes32 msgHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", msgHash));\\n    }\\n\\n    /**\\n     * @dev Make sure all signatures and signers are valid\\n     */\\n    function verifySignature(bytes32 msgHash, bytes memory signature, address signer) internal pure {\\n        bytes32 message = prefixed(msgHash);\\n        require(recoverSigner(message, signature) == signer, \\\"INVALID_SIGNATURE\\\");\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/T2Web.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nenum ProjectState {\\n  DRAFT,\\n  READY_FOR_REVIEW,\\n  APPROVED,\\n  REJECTED,\\n  READY_FOR_DEPLOY,\\n  DEPLOYED,\\n  FINISHED,\\n  ERROR\\n}\\n\\nenum VaultType {\\n  MINT, // New mint NFTs\\n  MINTED // Use minted NFTs from external contracts\\n}\\n\\nenum SaleType {\\n  PRESALE,\\n  PUBLICSALE\\n}\\n\\nstruct DistributorInfo {\\n  address addr;\\n  uint256 feeRate;\\n}\\n\\nstruct ProjectRequest {\\n  uint256 backendId;\\n  string name;\\n  string symbol;\\n  string baseTokenURI;\\n  uint256 contractType; // 721, 1155, 4907\\n  uint256 vaultType; // 0: MINT; 1: MINTED\\n  bool canReveal;\\n  bool transferUnsoldDisabled;\\n  address paymentToken; // ERC20 or address(0) in case of native token\\n  bool affiliateEnabled;\\n  address[] initialReferrals;\\n  uint256 adminFeeRate; // 2%\\n  uint256 affiliateFeeRate;\\n  DistributorInfo[] distributors;\\n}\\n\\nstruct Project {\\n  uint256 id;\\n  uint256 backendId;\\n  address owner;\\n  uint256 contractType; // 721, 1155, 4907\\n  ProjectState state;\\n  VaultType vaultType;\\n  address contractAddress;\\n  uint256 adminFeeRate;\\n  uint256 affiliateFeeRate;\\n  bool canReveal;\\n  bool isRevealed;\\n  bool affiliateEnabled;\\n  bool transferUnsoldDisabled;\\n  address paymentToken; // ERC20 or address(0) in case of native token\\n  uint256 finishAt;\\n}\\n\\nstruct SaleInfo {\\n  uint256 startTime;\\n  uint256 endTime;\\n  bool whitelistRequired;\\n  uint256 price;\\n  uint256 amount;\\n  uint256 maxPurchase;\\n}\\n\\nstruct Distributor {\\n  address addr;\\n  uint256 feeRate;\\n  uint256 feeAmount;\\n}\\n\\nstruct FundInfo {\\n  uint256 admin;\\n  uint256 projectOwner;\\n  Distributor[] distributors;\\n}\\n\\nstruct SaleData {\\n  uint256 backendId;\\n  uint256 vaultType;\\n  uint256 price;\\n  bool affiliateEnabled;\\n  uint256 affiliateFeeRate;\\n  address contractAddress;\\n  address paymentToken;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IT2WebProjectManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { ProjectRequest, SaleInfo, SaleData } from \\\"../T2Web.sol\\\";\\n\\ninterface IT2WebProjectManager {\\n  event ProjectCreated(uint256 backendId, uint256 projectId, address indexed contractAddress, address indexed owner);\\n\\n  event ProjectRevealed(uint256 projectId, bool isRevealed, string baseTokenURI);\\n\\n  event ProjectClosed(uint256 projectId);\\n\\n  // event ItemSold(\\n  //   address indexed buyer,\\n  //   uint256 projectId,\\n  //   uint256 amount,\\n  //   uint256 totalAmount,\\n  //   uint256 saleType,\\n  //   uint256[] tokenIds,\\n  //   string referralCode,\\n  //   address referralAddress\\n  // );\\n\\n  event ItemSold(\\n    address indexed buyer,\\n    uint256 projectId,\\n    uint256 amount,\\n    uint256 saleType,\\n    uint256[] tokenIds,\\n    string referralCode,\\n    address referralAddress\\n  );\\n\\n  event FeeClaimed(uint256 projectId, address user, uint256 amount);\\n\\n  event AffiliateRewardClaimed(address user, uint256 nativeReward, uint256 erc20Reward, address paymentToken);\\n\\n  /*\\n    struct DistributorInfo {\\n      address addr;\\n      uint256 feeRate;\\n    }\\n\\n    struct ProjectRequest {\\n      uint256 backendId;\\n      string name;\\n      string symbol;\\n      string baseTokenURI;\\n      uint256 contractType; // 721, 1155, 4907\\n      uint256 vaultType; // 0: MINT; 1: MINTED\\n      bool canReveal;\\n      bool transferUnsoldDisabled;\\n      address paymentToken; // ERC20 or address(0) in case of native token\\n      bool affiliateEnabled;\\n      address[] initialReferrals;\\n      uint256 adminFeeRate; // 2%\\n      uint256 affiliateFeeRate;\\n      DistributorInfo[] distributors;\\n    }\\n\\n    struct SaleInfo {\\n      uint256 startTime;\\n      uint256 endTime;\\n      bool whitelistRequired;\\n      uint256 price;\\n      uint256 amount;\\n      uint256 maxPurchase;\\n    }\\n\\n    saleData[0] = presale data (SaleInfo)\\n    saleData[1] = publicsale data (SaleInfo)\\n  */\\n  function createProject(\\n    ProjectRequest calldata projectInfo_,\\n    SaleInfo[] calldata saleData_,\\n    bytes calldata signature_\\n  ) external returns (uint256);\\n\\n  function buy(\\n    uint256 projectId_,\\n    uint256 saleType_,\\n    SaleData memory saleData_,\\n    uint256 amount_,\\n    string memory referralCode_,\\n    bytes calldata signature_\\n  ) external payable;\\n\\n  function buyByOperator(\\n    address buyer_,\\n    uint256 projectId_,\\n    uint256 saleType_,\\n    SaleData calldata saleData_,\\n    uint256 amount_,\\n    string memory referralCode_,\\n    bytes calldata signature_\\n  ) external payable;\\n\\n  function closeProject(uint256 projectId) external;\\n\\n  function claimItems(uint256 projectId, uint256 amount) external;\\n\\n  function claimFee(uint256 projectId, uint256[] memory saleInfo, bytes calldata signature) external payable returns (uint256);\\n\\n  // Return affiliate reward in native token and erc20 token\\n  function getAffiliateReward(address user) external view returns (uint256, uint256);\\n\\n  function claimAffiliateReward() external payable returns (uint256, uint256);\\n\\n  function getPendingFee(uint256 projectId, address user, uint256[] memory saleInfo) external view returns (uint256);\\n\\n  function getMaxSupply(uint256 projectId) external view returns (uint256);\\n\\n  function getTotalSupply(uint256 projectId) external view returns (uint256);\\n\\n  function setProjectOperator(address addr_) external;\\n\\n  function getProjectOperator() external view returns (address);\\n\\n  function grantProjectOperator(uint256 projectId_, address addr_) external;\\n\\n  function revokeProjectOperator(uint256 projectId_, address addr_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IT2WebProjectMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { ProjectRequest, Project, SaleType, SaleInfo } from \\\"../T2Web.sol\\\";\\n\\ninterface IT2WebProjectMaster {\\n  function getProject(uint256 projectId_) external view returns (Project memory);\\n\\n  function getSaleInfo(uint256 projectId_, uint256 saleType_) external view returns (SaleInfo memory);\\n\\n  function getPrice(uint256 projectId_, uint256 saleType_) external view returns (uint256);\\n\\n  function createProject(\\n    address projectOwner_,\\n    ProjectRequest calldata projectInfo_,\\n    SaleInfo[] calldata saleData_\\n  ) external returns (uint256, uint256, address);\\n\\n  function setBaseTokenURI(uint256 projectId, string memory baseTokenURI) external;\\n\\n  function revealProject(uint256 projectId_, string memory baseTokenURI_) external;\\n\\n  function distributeNFTs(\\n    uint256 backendId_,\\n    uint256 vaultType_,\\n    address contractAddress_,\\n    address to_,\\n    uint256 amount_\\n  ) external returns (uint256[] memory);\\n\\n  function getCurrentProjectId() external view returns (uint256);\\n\\n  function getMaxSupply(uint256 projectId_) external view returns (uint256);\\n\\n  function getTotalSupply(uint256 projectId_) external view returns (uint256);\\n\\n  function closeProject(uint256 projectId_) external;\\n\\n  function claimItems(uint256 projectId_, uint256 amount_, address to_) external;\\n\\n  function checkAffiliate(uint256 projectId_, string memory referralCode_) external returns (address);\\n\\n  function addReferral(uint256 projectId_, address user_) external;\\n\\n  function setProjectOperator(address addr_) external;\\n\\n  function getProjectOperator() external view returns (address);\\n\\n  function grantProjectOperator(uint256 projectId_, address addr_) external;\\n\\n  function revokeProjectOperator(uint256 projectId_, address addr_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IERC1155 {\\n  function burn(\\n    address account,\\n    uint256 id,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Execute a burn with a signed authorization\\n   * @param account       Owner's address (Authorizer)\\n   * @param id            Token ID to be burned\\n   * @param amount        Amount to be burned\\n   * @param validAfter    The time after which this is valid (unix time)\\n   * @param validBefore   The time before which this is valid (unix time)\\n   * @param nonce         Unique nonce\\n   * @param v             v of the signature\\n   * @param r             r of the signature\\n   * @param s             s of the signature\\n   */\\n  function burnWithAuthorization(\\n    address account,\\n    uint256 id,\\n    uint256 amount,\\n    uint256 validAfter,\\n    uint256 validBefore,\\n    bytes32 nonce,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IERC20 {\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @notice Execute a transfer with a signed authorization\\n   * @param from          Payer's address (Authorizer)\\n   * @param to            Payee's address\\n   * @param value         Amount to be transferred\\n   * @param validAfter    The time after which this is valid (unix time)\\n   * @param validBefore   The time before which this is valid (unix time)\\n   * @param nonce         Unique nonce\\n   * @param v             v of the signature\\n   * @param r             r of the signature\\n   * @param s             s of the signature\\n   */\\n  function transferWithAuthorization(\\n    address from,\\n    address to,\\n    uint256 value,\\n    uint256 validAfter,\\n    uint256 validBefore,\\n    bytes32 nonce,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"erc20Reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"AffiliateRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"}],\"name\":\"ItemSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"ProjectClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"backendId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ProjectCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRevealed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"}],\"name\":\"ProjectRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"A_HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleType_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"backendId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"affiliateEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"affiliateFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"internalType\":\"struct SaleData\",\"name\":\"saleData_\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"referralCode_\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature_\",\"type\":\"bytes\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleType_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"backendId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"affiliateEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"affiliateFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"internalType\":\"struct SaleData\",\"name\":\"saleData_\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"referralCode_\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature_\",\"type\":\"bytes\"}],\"name\":\"buyByOperator\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAffiliateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"saleInfo\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claimFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"closeProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"backendId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"contractType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultType\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canReveal\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferUnsoldDisabled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"affiliateEnabled\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"initialReferrals\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"adminFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"affiliateFeeRate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"}],\"internalType\":\"struct DistributorInfo[]\",\"name\":\"distributors\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ProjectRequest\",\"name\":\"projectInfo_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whitelistRequired\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchase\",\"type\":\"uint256\"}],\"internalType\":\"struct SaleInfo[]\",\"name\":\"saleData_\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"signature_\",\"type\":\"bytes\"}],\"name\":\"createProject\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAffiliateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"getMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"saleInfo\",\"type\":\"uint256[]\"}],\"name\":\"getPendingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProjectMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProjectOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"getTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"grantProjectOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectMaster_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adminFeeReceiver_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI_\",\"type\":\"string\"}],\"name\":\"revealProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"revokeProjectOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminFeeReceiver_\",\"type\":\"address\"}],\"name\":\"setAdminFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectMaster_\",\"type\":\"address\"}],\"name\":\"setProjectMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"setProjectOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "T2WebProjectManager", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}