{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Promo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.8.17;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\ninterface IUniswapV2Router {\\n    function swapExactTokensForTokens(\\n        //amount of tokens we are sending in\\n        uint256 amountIn,\\n        //the minimum amount of tokens we want out of the trade\\n        uint256 amountOutMin,\\n        //list of token addresses we are going to trade in.  this is necessary to calculate amounts\\n        address[] calldata path,\\n        //this is the address we are going to send the output tokens to\\n        address to,\\n        //the last time that the trade is valid for\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\ncontract TokenUtility {\\n    mapping(address => bool) public whitelist;\\n\\n    address private UNISWAP_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n\\n    address private WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    uint256 private MAX_INT =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    constructor() {\\n        whitelist[msg.sender] = true;\\n    }\\n\\n    function addToWhitelist(address[] calldata toAddAddresses) external {\\n        require(whitelist[msg.sender], \\\"NOT_IN_WHITELIST\\\");\\n        for (uint256 i = 0; i < toAddAddresses.length; i++) {\\n            whitelist[toAddAddresses[i]] = true;\\n        }\\n    }\\n\\n    function removeFromWhitelist(address[] calldata toRemoveAddresses)\\n        external\\n    {\\n        require(whitelist[msg.sender], \\\"NOT_IN_WHITELIST\\\");\\n        for (uint256 i = 0; i < toRemoveAddresses.length; i++) {\\n            delete whitelist[toRemoveAddresses[i]];\\n        }\\n    }\\n\\n    function swapsVoume(address token, uint256 count) external {\\n        require(whitelist[msg.sender], \\\"NOT_IN_WHITELIST\\\");\\n\\n        uint256 amountWETH = IERC20(WETH).balanceOf(msg.sender);\\n\\n        IERC20(WETH).transferFrom(msg.sender, address(this), amountWETH);\\n        IERC20(WETH).approve(UNISWAP_V2_ROUTER, MAX_INT);\\n        IERC20(token).approve(UNISWAP_V2_ROUTER, MAX_INT);\\n\\n        address[] memory pathBuy = new address[](2);\\n        pathBuy[0] = WETH;\\n        pathBuy[1] = token;\\n\\n        address[] memory pathSell = new address[](2);\\n        pathSell[0] = token;\\n        pathSell[1] = WETH;\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            uint256 amountBuy = IERC20(WETH).balanceOf(address(this));\\n            uint256[] memory amounts = IUniswapV2Router(UNISWAP_V2_ROUTER)\\n                .swapExactTokensForTokens(\\n                    amountBuy,\\n                    0,\\n                    pathBuy,\\n                    address(this),\\n                    block.timestamp\\n                );\\n\\n            IUniswapV2Router(UNISWAP_V2_ROUTER).swapExactTokensForTokens(\\n                amounts[amounts.length - 1],\\n                0,\\n                pathSell,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n\\n        IERC20(WETH).transfer(\\n            msg.sender,\\n            IERC20(WETH).balanceOf(address(this))\\n        );\\n    }\\n\\n    function withdraw() external payable {\\n        require(whitelist[msg.sender], \\\"NOT_IN_WHITELIST\\\");\\n        IERC20(WETH).transfer(\\n            msg.sender,\\n            IERC20(WETH).balanceOf(address(this))\\n        );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"toAddAddresses\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"toRemoveAddresses\",\"type\":\"address[]\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"swapsVoume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "TokenUtility", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}