{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n}\r\n\r\ncontract LPDistributionContract {\r\n    address public owner;\r\n    mapping(address => uint256) private claimTimestamps;\r\n    uint256 public claimDuration = 5 hours;\r\n    uint256 private minEthContract;\r\n    uint256 public minLPTokenHolding;\r\n    uint256 public minEthWithdraw;  \r\n    address public lpTokenAddress;\r\n    IUniswapV2Pair public lpToken;\r\n\r\n    constructor(address _lpTokenAddress) {\r\n        owner = msg.sender;\r\n        lpTokenAddress = _lpTokenAddress;\r\n        lpToken = IUniswapV2Pair(_lpTokenAddress);\r\n        minEthContract = 100000000000000000;\r\n        minLPTokenHolding = 1;\r\n        minEthWithdraw = 1;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    function setLPTokenAddress(address _newLPTokenAddress) external onlyOwner {\r\n        lpTokenAddress = _newLPTokenAddress;\r\n        lpToken = IUniswapV2Pair(_newLPTokenAddress);\r\n    }\r\n\r\n    function setMinLPTokenHolding(uint256 _newMinLPTokenHolding) external onlyOwner {\r\n        minLPTokenHolding = _newMinLPTokenHolding;\r\n    }\r\n\r\n    function setMinEth(uint256 _newMinEth) external onlyOwner {\r\n        minEthContract = _newMinEth;\r\n    }\r\n\r\n    function setMinEthWithdraw(uint256 _newMinEthWithdraw) external onlyOwner {\r\n        minEthWithdraw = _newMinEthWithdraw;\r\n    }\r\n\r\n    function setClaimDuration(uint256 _newDuration) external onlyOwner {\r\n        claimDuration = _newDuration;  \r\n    }\r\n\r\n    function claim() external {\r\n        uint256 contractBalance = address(this).balance;\r\n        require(contractBalance > minEthContract, \"You can't claim yet\");\r\n        require(canClaim(msg.sender), \"You can't claim yet\");\r\n\r\n        uint256 userBalance = lpToken.balanceOf(msg.sender);\r\n        require(userBalance > minLPTokenHolding, \"You're holding insufficient LP tokens\");\r\n\r\n        uint256 totalSupply = lpToken.totalSupply();\r\n        uint256 percentage = (userBalance * 10000) / totalSupply;\r\n        uint256 amountToTransfer = (contractBalance * percentage) / 10000;\r\n        \r\n        require(contractBalance >= minEthWithdraw, \"Amount is less than the withdrawal limit\");        \r\n        require(amountToTransfer <= contractBalance, \"Insufficient contract balance\");\r\n\r\n        claimTimestamps[msg.sender] = block.timestamp;\r\n        payable(msg.sender).transfer(amountToTransfer);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"New owner cannot be zero address\");\r\n        owner = newOwner;\r\n    }\r\n\r\n    function canClaim(address user) public view returns (bool) {\r\n        return claimTimestamps[user] + claimDuration <= block.timestamp;\r\n    }\r\n\r\n    function withdrawBalance() external onlyOwner {\r\n        uint256 contractBalance = address(this).balance;\r\n        require(contractBalance > 0, \"No balance to withdraw\");\r\n        payable(owner).transfer(contractBalance);\r\n    }\r\n\r\n    receive() external payable {\r\n        // Accept ETH\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEthWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLPTokenHolding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDuration\",\"type\":\"uint256\"}],\"name\":\"setClaimDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLPTokenAddress\",\"type\":\"address\"}],\"name\":\"setLPTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinEth\",\"type\":\"uint256\"}],\"name\":\"setMinEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinEthWithdraw\",\"type\":\"uint256\"}],\"name\":\"setMinEthWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinLPTokenHolding\",\"type\":\"uint256\"}],\"name\":\"setMinLPTokenHolding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LPDistributionContract", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000089fc3928e99a6d3e4783dfdd6ffe83df48dcd074", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9af8ae3cd06620225e186712599b8fcc5f319f2df62d93cc1d88d7f0d15e6f3f"}