{"SourceCode": "// SPDX-License-Identifier: BUSL-1.1\r\n// File: lib/ipor-protocol/contracts/libraries/StorageLib.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n/// @title Storage ID's associated with the IPOR Protocol Router.\r\nlibrary StorageLib {\r\n    uint256 constant STORAGE_SLOT_BASE = 1_000_000;\r\n\r\n    // append only\r\n    enum StorageId {\r\n        /// @dev The address of the contract owner.\r\n        Owner,\r\n        AppointedOwner,\r\n        Paused,\r\n        PauseGuardian,\r\n        ReentrancyStatus,\r\n        RouterFunctionPaused,\r\n        AmmSwapsLiquidators,\r\n        AmmPoolsAppointedToRebalance,\r\n        AmmPoolsParams\r\n    }\r\n\r\n    /// @notice Struct which contains owner address of IPOR Protocol Router.\r\n    struct OwnerStorage {\r\n        address owner;\r\n    }\r\n\r\n    /// @notice Struct which contains appointed owner address of IPOR Protocol Router.\r\n    struct AppointedOwnerStorage {\r\n        address appointedOwner;\r\n    }\r\n\r\n    /// @notice Struct which contains reentrancy status of IPOR Protocol Router.\r\n    struct ReentrancyStatusStorage {\r\n        uint256 value;\r\n    }\r\n\r\n    /// @notice Struct which contains information about swap liquidators.\r\n    /// @dev First key is an asset (pool), second key is an liquidator address in the asset pool,\r\n    /// value is a flag to indicate whether account is a liquidator.\r\n    /// True - account is a liquidator, False - account is not a liquidator.\r\n    struct AmmSwapsLiquidatorsStorage {\r\n        mapping(address => mapping(address => bool)) value;\r\n    }\r\n\r\n    /// @notice Struct which contains information about accounts appointed to rebalance.\r\n    /// @dev first key - asset address, second key - account address which is allowed to rebalance in the asset pool,\r\n    /// value - flag to indicate whether account is allowed to rebalance. True - allowed, False - not allowed.\r\n    struct AmmPoolsAppointedToRebalanceStorage {\r\n        mapping(address => mapping(address => bool)) value;\r\n    }\r\n\r\n    struct AmmPoolsParamsValue {\r\n        /// @dev max liquidity pool balance in the asset pool, represented without 18 decimals\r\n        uint32 maxLiquidityPoolBalance;\r\n        /// @dev The threshold for auto-rebalancing the pool. Value represented without 18 decimals.\r\n        /// Value represents multiplication of 1000.\r\n        uint32 autoRebalanceThresholdInThousands;\r\n        /// @dev asset management ratio, represented without 18 decimals, value represents percentage with 2 decimals\r\n        /// 65% = 6500, 99,99% = 9999, this is a percentage which stay in Amm Treasury in opposite to Asset Management\r\n        /// based on AMM Treasury balance (100%).\r\n        uint16 ammTreasuryAndAssetManagementRatio;\r\n    }\r\n\r\n    /// @dev key - asset address, value - struct AmmOpenSwapParamsValue\r\n    struct AmmPoolsParamsStorage {\r\n        mapping(address => AmmPoolsParamsValue) value;\r\n    }\r\n\r\n    /// @dev key - function sig, value - 1 if function is paused, 0 if not\r\n    struct RouterFunctionPausedStorage {\r\n        mapping(bytes4 => uint256) value;\r\n    }\r\n\r\n    /// @notice Gets Ipor Protocol Router owner address.\r\n    function getOwner() internal pure returns (OwnerStorage storage owner) {\r\n        uint256 slot = _getStorageSlot(StorageId.Owner);\r\n        assembly {\r\n            owner.slot := slot\r\n        }\r\n    }\r\n\r\n    /// @notice Gets Ipor Protocol Router appointed owner address.\r\n    function getAppointedOwner() internal pure returns (AppointedOwnerStorage storage appointedOwner) {\r\n        uint256 slot = _getStorageSlot(StorageId.AppointedOwner);\r\n        assembly {\r\n            appointedOwner.slot := slot\r\n        }\r\n    }\r\n\r\n    /// @notice Gets Ipor Protocol Router reentrancy status.\r\n    function getReentrancyStatus() internal pure returns (ReentrancyStatusStorage storage reentrancyStatus) {\r\n        uint256 slot = _getStorageSlot(StorageId.ReentrancyStatus);\r\n        assembly {\r\n            reentrancyStatus.slot := slot\r\n        }\r\n    }\r\n\r\n    /// @notice Gets information if function is paused in Ipor Protocol Router.\r\n    function getRouterFunctionPaused() internal pure returns (RouterFunctionPausedStorage storage paused) {\r\n        uint256 slot = _getStorageSlot(StorageId.RouterFunctionPaused);\r\n        assembly {\r\n            paused.slot := slot\r\n        }\r\n    }\r\n\r\n    /// @notice Gets point to pause guardian storage.\r\n    function getPauseGuardianStorage() internal pure returns (mapping(address => bool) storage store) {\r\n        uint256 slot = _getStorageSlot(StorageId.PauseGuardian);\r\n        assembly {\r\n            store.slot := slot\r\n        }\r\n    }\r\n\r\n    /// @notice Gets point to liquidators storage.\r\n    /// @return store - point to liquidators storage.\r\n    function getAmmSwapsLiquidatorsStorage() internal pure returns (AmmSwapsLiquidatorsStorage storage store) {\r\n        uint256 slot = _getStorageSlot(StorageId.AmmSwapsLiquidators);\r\n        assembly {\r\n            store.slot := slot\r\n        }\r\n    }\r\n\r\n    /// @notice Gets point to accounts appointed to rebalance storage.\r\n    /// @return store - point to accounts appointed to rebalance storage.\r\n    function getAmmPoolsAppointedToRebalanceStorage()\r\n        internal\r\n        pure\r\n        returns (AmmPoolsAppointedToRebalanceStorage storage store)\r\n    {\r\n        uint256 slot = _getStorageSlot(StorageId.AmmPoolsAppointedToRebalance);\r\n        assembly {\r\n            store.slot := slot\r\n        }\r\n    }\r\n\r\n    /// @notice Gets point to amm pools params storage.\r\n    /// @return store - point to amm pools params storage.\r\n    function getAmmPoolsParamsStorage() internal pure returns (AmmPoolsParamsStorage storage store) {\r\n        uint256 slot = _getStorageSlot(StorageId.AmmPoolsParams);\r\n        assembly {\r\n            store.slot := slot\r\n        }\r\n    }\r\n\r\n    function _getStorageSlot(StorageId storageId) private pure returns (uint256 slot) {\r\n        return uint256(storageId) + STORAGE_SLOT_BASE;\r\n    }\r\n}\r\n\r\n// File: lib/ipor-protocol/contracts/security/PauseManager.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n/// @title Ipor Protocol Router Pause Manager library\r\nlibrary PauseManager {\r\n    /// @notice Emitted when new pause guardian is added\r\n    /// @param guardians List of addresses of guardian\r\n    event PauseGuardiansAdded(address[] indexed guardians);\r\n\r\n    /// @notice Emitted when pause guardian is removed\r\n    /// @param guardians List of addresses of guardian\r\n    event PauseGuardiansRemoved(address[] indexed guardians);\r\n\r\n    /// @notice Checks if account is Ipor Protocol Router pause guardian\r\n    /// @param account Address of guardian\r\n    /// @return true if account is Ipor Protocol Router pause guardian\r\n    function isPauseGuardian(address account) internal view returns (bool) {\r\n        mapping(address => bool) storage pauseGuardians = StorageLib.getPauseGuardianStorage();\r\n        return pauseGuardians[account];\r\n    }\r\n\r\n    /// @notice Adds Ipor Protocol Router pause guardian\r\n    /// @param newGuardians Addresses of guardians\r\n    function addPauseGuardians(address[] calldata newGuardians) internal {\r\n        uint256 length = newGuardians.length;\r\n        if (length == 0) {\r\n            return;\r\n        }\r\n\r\n        mapping(address => bool) storage pauseGuardians = StorageLib.getPauseGuardianStorage();\r\n\r\n        for (uint256 i; i < length; ) {\r\n            pauseGuardians[newGuardians[i]] = true;\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n        emit PauseGuardiansAdded(newGuardians);\r\n    }\r\n\r\n    /// @notice Removes Ipor Protocol Router pause guardian\r\n    /// @param guardians Addresses of guardians\r\n    function removePauseGuardians(address[] calldata guardians) internal {\r\n        uint256 length = guardians.length;\r\n\r\n        if (length == 0) {\r\n            return;\r\n        }\r\n\r\n        mapping(address => bool) storage pauseGuardians = StorageLib.getPauseGuardianStorage();\r\n\r\n        for (uint256 i; i < length; ) {\r\n            pauseGuardians[guardians[i]] = false;\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n        emit PauseGuardiansRemoved(guardians);\r\n    }\r\n}\r\n\r\n// File: lib/ipor-protocol/contracts/libraries/math/IporMath.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\nlibrary IporMath {\r\n    uint256 private constant RAY = 1e27;\r\n\r\n    //@notice Division with rounding up on last position, x, and y is with MD\r\n    function division(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = (x + (y / 2)) / y;\r\n    }\r\n\r\n    function divisionInt(int256 x, int256 y) internal pure returns (int256 z) {\r\n        uint256 absX = uint256(x < 0 ? -x : x);\r\n        uint256 absY = uint256(y < 0 ? -y : y);\r\n\r\n        // Use bitwise XOR to get the sign on MBS bit then shift to LSB\r\n        // sign == 0x0000...0000 ==  0 if the number is non-negative\r\n        // sign == 0xFFFF...FFFF == -1 if the number is negative\r\n        int256 sign = (x ^ y) >> 255;\r\n\r\n        uint256 divAbs;\r\n        uint256 remainder;\r\n\r\n        unchecked {\r\n            divAbs = absX / absY;\r\n            remainder = absX % absY;\r\n        }\r\n        // Check if we need to round\r\n        if (sign < 0) {\r\n            // remainder << 1 left shift is equivalent to multiplying by 2\r\n            if (remainder << 1 > absY) {\r\n                ++divAbs;\r\n            }\r\n        } else {\r\n            if (remainder << 1 >= absY) {\r\n                ++divAbs;\r\n            }\r\n        }\r\n\r\n        // (sign | 1) is cheaper than (sign < 0) ? -1 : 1;\r\n        unchecked {\r\n            z = int256(divAbs) * (sign | 1);\r\n        }\r\n    }\r\n\r\n    function divisionWithoutRound(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x / y;\r\n    }\r\n\r\n    function convertWadToAssetDecimals(uint256 value, uint256 assetDecimals) internal pure returns (uint256) {\r\n        if (assetDecimals == 18) {\r\n            return value;\r\n        } else if (assetDecimals > 18) {\r\n            return value * 10 ** (assetDecimals - 18);\r\n        } else {\r\n            return division(value, 10 ** (18 - assetDecimals));\r\n        }\r\n    }\r\n\r\n    function convertWadToAssetDecimalsWithoutRound(\r\n        uint256 value,\r\n        uint256 assetDecimals\r\n    ) internal pure returns (uint256) {\r\n        if (assetDecimals == 18) {\r\n            return value;\r\n        } else if (assetDecimals > 18) {\r\n            return value * 10 ** (assetDecimals - 18);\r\n        } else {\r\n            return divisionWithoutRound(value, 10 ** (18 - assetDecimals));\r\n        }\r\n    }\r\n\r\n    function convertToWad(uint256 value, uint256 assetDecimals) internal pure returns (uint256) {\r\n        if (value > 0) {\r\n            if (assetDecimals == 18) {\r\n                return value;\r\n            } else if (assetDecimals > 18) {\r\n                return division(value, 10 ** (assetDecimals - 18));\r\n            } else {\r\n                return value * 10 ** (18 - assetDecimals);\r\n            }\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    function absoluteValue(int256 value) internal pure returns (uint256) {\r\n        return (uint256)(value < 0 ? -value : value);\r\n    }\r\n\r\n    function percentOf(uint256 value, uint256 rate) internal pure returns (uint256) {\r\n        return division(value * rate, 1e18);\r\n    }\r\n\r\n    /// @notice Calculates x^n where x and y are represented in RAY (27 decimals)\r\n    /// @param x base, represented in 27 decimals\r\n    /// @param n exponent, represented in 27 decimals\r\n    /// @return z x^n represented in 27 decimals\r\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n        assembly {\r\n            switch x\r\n            case 0 {\r\n                switch n\r\n                case 0 {\r\n                    z := RAY\r\n                }\r\n                default {\r\n                    z := 0\r\n                }\r\n            }\r\n            default {\r\n                switch mod(n, 2)\r\n                case 0 {\r\n                    z := RAY\r\n                }\r\n                default {\r\n                    z := x\r\n                }\r\n                let half := div(RAY, 2) // for rounding.\r\n                for {\r\n                    n := div(n, 2)\r\n                } n {\r\n                    n := div(n, 2)\r\n                } {\r\n                    let xx := mul(x, x)\r\n                    if iszero(eq(div(xx, x), x)) {\r\n                        revert(0, 0)\r\n                    }\r\n                    let xxRound := add(xx, half)\r\n                    if lt(xxRound, xx) {\r\n                        revert(0, 0)\r\n                    }\r\n                    x := div(xxRound, RAY)\r\n                    if mod(n, 2) {\r\n                        let zx := mul(z, x)\r\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\r\n                            revert(0, 0)\r\n                        }\r\n                        let zxRound := add(zx, half)\r\n                        if lt(zxRound, zx) {\r\n                            revert(0, 0)\r\n                        }\r\n                        z := div(zxRound, RAY)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: lib/ipor-protocol/contracts/libraries/Constants.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\nlibrary Constants {\r\n    uint256 public constant MAX_VALUE = type(uint256).max;\r\n    uint256 public constant WAD_LEVERAGE_1000 = 1_000e18;\r\n    uint256 public constant YEAR_IN_SECONDS = 365 days;\r\n    uint256 public constant MAX_CHUNK_SIZE = 50;\r\n}\r\n\r\n// File: lib/ipor-protocol/contracts/libraries/errors/AssetManagementErrors.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\nlibrary AssetManagementErrors {\r\n    // 500-599-assetManagement\r\n\r\n    /// @notice asset mismatch\r\n    string public constant ASSET_MISMATCH = \"IPOR_500\";\r\n\r\n    // @notice caller is not asset management contract\r\n    string public constant CALLER_NOT_ASSET_MANAGEMENT = \"IPOR_501\";\r\n\r\n    /// @notice treasury address is incorrect\r\n    string public constant INCORRECT_TREASURY_ADDRESS = \"IPOR_502\";\r\n\r\n    /// @notice iv token value which should be minted is too low\r\n    string public constant IV_TOKEN_MINT_AMOUNT_TOO_LOW = \"IPOR_503\";\r\n\r\n    /// @notice iv token value which should be burned is too low\r\n    string public constant IV_TOKEN_BURN_AMOUNT_TOO_LOW = \"IPOR_504\";\r\n\r\n    /// @notice only Treasury Manager can access the function\r\n    string public constant CALLER_NOT_TREASURY_MANAGER = \"IPOR_505\";\r\n\r\n    /// @notice  problem with redeem shared token\r\n    string public constant SHARED_TOKEN_REDEEM_ERROR = \"IPOR_506\";\r\n\r\n    /// @dev Error appears if deposit every strategy failed\r\n    string public constant DEPOSIT_TO_STRATEGY_FAILED = \"IPOR_507\";\r\n\r\n    /// @dev Error appears when deposited amount returned from strategy is not higher than 0 and lower than amount sent to strategy\r\n    string public constant STRATEGY_INCORRECT_DEPOSITED_AMOUNT = \"IPOR_508\";\r\n}\r\n\r\n// File: lib/ipor-protocol/contracts/libraries/errors/IporErrors.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\nlibrary IporErrors {\r\n    // 000-199 - general codes\r\n\r\n    /// @notice General problem, address is wrong\r\n    string public constant WRONG_ADDRESS = \"IPOR_000\";\r\n\r\n    /// @notice General problem. Wrong decimals\r\n    string public constant WRONG_DECIMALS = \"IPOR_001\";\r\n\r\n    /// @notice General problem, addresses mismatch\r\n    string public constant ADDRESSES_MISMATCH = \"IPOR_002\";\r\n\r\n    /// @notice Sender's asset balance is too low to transfer and to open a swap\r\n    string public constant SENDER_ASSET_BALANCE_TOO_LOW = \"IPOR_003\";\r\n\r\n    /// @notice Value is not greater than zero\r\n    string public constant VALUE_NOT_GREATER_THAN_ZERO = \"IPOR_004\";\r\n\r\n    /// @notice Input arrays length mismatch\r\n    string public constant INPUT_ARRAYS_LENGTH_MISMATCH = \"IPOR_005\";\r\n\r\n    /// @notice Amount is too low to transfer\r\n    string public constant NOT_ENOUGH_AMOUNT_TO_TRANSFER = \"IPOR_006\";\r\n\r\n    /// @notice msg.sender is not an appointed owner, so cannot confirm his appointment to be an owner of a specific smart contract\r\n    string public constant SENDER_NOT_APPOINTED_OWNER = \"IPOR_007\";\r\n\r\n    /// @notice only Router can have access to function\r\n    string public constant CALLER_NOT_IPOR_PROTOCOL_ROUTER = \"IPOR_008\";\r\n\r\n    /// @notice Chunk size is equal to zero\r\n    string public constant CHUNK_SIZE_EQUAL_ZERO = \"IPOR_009\";\r\n\r\n    /// @notice Chunk size is too big\r\n    string public constant CHUNK_SIZE_TOO_BIG = \"IPOR_010\";\r\n\r\n    /// @notice Caller is not a  guardian\r\n    string public constant CALLER_NOT_GUARDIAN = \"IPOR_011\";\r\n\r\n    /// @notice Request contains invalid method signature, which is not supported by the Ipor Protocol Router\r\n    string public constant ROUTER_INVALID_SIGNATURE = \"IPOR_012\";\r\n\r\n    /// @notice Only AMM Treasury can have access to function\r\n    string public constant CALLER_NOT_AMM_TREASURY = \"IPOR_013\";\r\n\r\n    /// @notice Caller is not an owner\r\n    string public constant CALLER_NOT_OWNER = \"IPOR_014\";\r\n\r\n    /// @notice Method is paused\r\n    string public constant METHOD_PAUSED = \"IPOR_015\";\r\n\r\n    /// @notice Reentrancy appears\r\n    string public constant REENTRANCY = \"IPOR_016\";\r\n\r\n    /// @notice Asset is not supported\r\n    string public constant ASSET_NOT_SUPPORTED = \"IPOR_017\";\r\n\r\n    /// @notice Return back ETH failed in Ipor Protocol Router\r\n    string public constant ROUTER_RETURN_BACK_ETH_FAILED = \"IPOR_018\";\r\n}\r\n\r\n// File: lib/ipor-protocol/contracts/libraries/IporContractValidator.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\nlibrary IporContractValidator {\r\n    function checkAddress(address addr) internal pure returns (address) {\r\n        require(addr != address(0), IporErrors.WRONG_ADDRESS);\r\n        return addr;\r\n    }\r\n}\r\n\r\n// File: lib/ipor-protocol/contracts/interfaces/IStrategy.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n/// @title Interface for interaction with  Asset Management's strategy.\r\n/// @notice Strategy represents an external DeFi protocol and acts as and wrapper that standarizes the API of the external protocol.\r\ninterface IStrategy {\r\n    /// @notice Returns current version of strategy\r\n    /// @dev Increase number when implementation inside source code is different that implementation deployed on Mainnet\r\n    /// @return current Strategy's version\r\n    function getVersion() external pure returns (uint256);\r\n\r\n    /// @notice Gets asset / underlying token / stablecoin which is assocciated with this Strategy instance\r\n    /// @return asset / underlying token / stablecoin address\r\n    function asset() external view returns (address);\r\n\r\n    /// @notice Returns strategy's share token address\r\n    function shareToken() external view returns (address);\r\n\r\n    /// @notice Gets annualised interest rate (APR) for this strategy. Returns current APY from Dai Savings Rate.\r\n    /// @return APR value, represented in 18 decimals.\r\n    /// @dev APY = dsr^(365*24*60*60), dsr represented in 27 decimals\r\n    function getApy() external view returns (uint256);\r\n\r\n    /// @notice Gets balance for given asset (underlying / stablecoin) allocated to this strategy.\r\n    /// @return balance for given asset, represented in 18 decimals.\r\n    function balanceOf() external view returns (uint256);\r\n\r\n    /// @notice Deposits asset amount from AssetManagement to this specific Strategy. Function available only for AssetManagement.\r\n    /// @dev Emits {Transfer} from ERC20 asset. If available then events from external DeFi protocol assocciated with this strategy.\r\n    /// @param amount asset amount represented in 18 decimals.\r\n    function deposit(uint256 amount) external returns (uint256 depositedAmount);\r\n\r\n    /// @notice Withdraws asset amount from Strategy to AssetManagement. Function available only for AssetManagement.\r\n    /// @dev Emits {Transfer} from ERC20 asset. If available then events from external DeFi protocol assocciated with this strategy.\r\n    /// @param amount asset amount represented in 18 decimals.\r\n    /// @return withdrawnAmount The final amount withdrawn, represented in 18 decimals\r\n    function withdraw(uint256 amount) external returns (uint256 withdrawnAmount);\r\n}\r\n\r\n// File: lib/ipor-protocol/contracts/interfaces/IAssetManagement.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n/// @title Interface for interaction with Asset Management DSR smart contract.\r\n/// @notice Asset Management is responsible for delegating assets stored in AmmTreasury to Asset Management and forward to money market where they can earn interest.\r\ninterface IAssetManagement {\r\n    /// @notice Gets total balance of AmmTreasury, transferred assets to Asset Management.\r\n    /// @return Total balance for specific account given as a parameter, represented in 18 decimals.\r\n    function totalBalance() external view returns (uint256);\r\n\r\n    /// @notice Deposits ERC20 underlying assets to AssetManagement. Function available only for AmmTreasury.\r\n    /// @dev Emits {Deposit} event from AssetManagement, emits {Transfer} event from ERC20 asset.\r\n    /// Input and output values are represented in 18 decimals.\r\n    /// @param amount amount deposited by AmmTreasury to AssetManagement.\r\n    /// @return vaultBalance current balance including amount deposited on AssteManagement.\r\n    /// @return depositedAmount final deposited amount.\r\n    function deposit(uint256 amount) external returns (uint256 vaultBalance, uint256 depositedAmount);\r\n\r\n    /// @notice Withdraws declared amount of asset from AssetManagement to AmmTreasury. Function available only for AmmTreasury.\r\n    /// @dev Emits {Withdraw} event from AssetManagement, emits {Transfer} event from ERC20 asset.\r\n    /// All input and output values are represented in 18 decimals.\r\n    /// @param amount deposited amount of underlying asset represented in 18 decimals.\r\n    /// @return withdrawnAmount final withdrawn amount of asset from AssetManagement, can be different than input amount due to passing time.\r\n    /// @return vaultBalance current asset balance on AssetManagement\r\n    function withdraw(uint256 amount) external returns (uint256 withdrawnAmount, uint256 vaultBalance);\r\n\r\n    /// @notice Withdraws all of the asset from AssetManagement to AmmTreasury. Function available only for AmmTreasury.\r\n    /// @dev Emits {Withdraw} event from AssetManagement, emits {Transfer} event from ERC20 asset.\r\n    /// Output values are represented in 18 decimals.\r\n    /// @return withdrawnAmount final withdrawn amount of the asset.\r\n    /// @return vaultBalance current asset's balance on AssetManagement\r\n    function withdrawAll() external returns (uint256 withdrawnAmount, uint256 vaultBalance);\r\n\r\n    /// @notice Emitted after AmmTreasury has executed deposit function.\r\n    /// @param from account address from which assets are transferred\r\n    /// @param to account address where assets are transferred to\r\n    /// @param amount of asset transferred from AmmTreasury to AssetManagement, represented in 18 decimals\r\n    event Deposit(address from, address to, uint256 amount);\r\n\r\n    /// @notice Emitted when AmmTreasury executes withdraw function.\r\n    /// @param to account address where assets are transferred to\r\n    /// @param amount of asset transferred from AmmTreasury to AssetManagement, represented in 18 decimals\r\n    event Withdraw(address to, uint256 amount);\r\n}\r\n\r\n// File: lib/ipor-protocol/contracts/interfaces/IIporContractCommonGov.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n/// @title Interface for interaction with standalone IPOR smart contract by DAO government with common methods.\r\ninterface IIporContractCommonGov {\r\n    /// @notice Pauses current smart contract. It can be executed only by the Owner.\r\n    /// @dev Emits {Paused} event from AssetManagement.\r\n    function pause() external;\r\n\r\n    /// @notice Unpauses current smart contract. It can be executed only by the Owner\r\n    /// @dev Emits {Unpaused} event from AssetManagement.\r\n    function unpause() external;\r\n\r\n    /// @notice Checks if given account is a pause guardian.\r\n    /// @param account The address of the account to be checked.\r\n    /// @return true if account is a pause guardian.\r\n    function isPauseGuardian(address account) external view returns (bool);\r\n\r\n    /// @notice Adds a pause guardian to the list of guardians. Function available only for the Owner.\r\n    /// @param guardians The list of addresses of the pause guardians to be added.\r\n    function addPauseGuardians(address[] calldata guardians) external;\r\n\r\n    /// @notice Removes a pause guardian from the list of guardians. Function available only for the Owner.\r\n    /// @param guardians The list of addresses of the pause guardians to be removed.\r\n    function removePauseGuardians(address[] calldata guardians) external;\r\n}\r\n\r\n// File: lib/ipor-protocol/contracts/interfaces/IProxyImplementation.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n/// @title Technical interface for reading data related to the UUPS proxy pattern in Ipor Protocol.\r\ninterface IProxyImplementation {\r\n    /// @notice Retrieves the address of the implementation contract for UUPS proxy.\r\n    /// @return The address of the implementation contract.\r\n    /// @dev The function returns the value stored in the implementation storage slot.\r\n    function getImplementation() external view returns (address);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20PermitUpgradeable {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\r\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for reading and writing primitive types to specific storage slots.\r\n *\r\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\r\n * This library helps with reading and writing to such slots without the need for inline assembly.\r\n *\r\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\r\n *\r\n * Example usage to set ERC1967 implementation slot:\r\n * ```solidity\r\n * contract ERC1967 {\r\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n *\r\n *     function _getImplementation() internal view returns (address) {\r\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n *     }\r\n *\r\n *     function _setImplementation(address newImplementation) internal {\r\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\r\n * _Available since v4.9 for `string`, `bytes`._\r\n */\r\nlibrary StorageSlotUpgradeable {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    struct BooleanSlot {\r\n        bool value;\r\n    }\r\n\r\n    struct Bytes32Slot {\r\n        bytes32 value;\r\n    }\r\n\r\n    struct Uint256Slot {\r\n        uint256 value;\r\n    }\r\n\r\n    struct StringSlot {\r\n        string value;\r\n    }\r\n\r\n    struct BytesSlot {\r\n        bytes value;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\r\n     */\r\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\r\n     */\r\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\r\n     */\r\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\r\n     */\r\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\r\n     */\r\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := store.slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\r\n     */\r\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := store.slot\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\r\n *\r\n * _Available since v4.8.3._\r\n */\r\ninterface IERC1967Upgradeable {\r\n    /**\r\n     * @dev Emitted when the implementation is upgraded.\r\n     */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /**\r\n     * @dev Emitted when the admin account has changed.\r\n     */\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @dev Emitted when the beacon is changed.\r\n     */\r\n    event BeaconUpgraded(address indexed beacon);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\r\n */\r\ninterface IBeaconUpgradeable {\r\n    /**\r\n     * @dev Must return an address that can be used as a delegate call target.\r\n     *\r\n     * {BeaconProxy} will check that this address is a contract.\r\n     */\r\n    function implementation() external view returns (address);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\r\n * proxy whose upgrades are fully controlled by the current implementation.\r\n */\r\ninterface IERC1822ProxiableUpgradeable {\r\n    /**\r\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\r\n     * address.\r\n     *\r\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\r\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\r\n     * function revert if invoked through a proxy.\r\n     */\r\n    function proxiableUUID() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using AddressUpgradeable for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\r\n     * 0 before setting it to a non-zero value.\r\n     */\r\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20PermitUpgradeable token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```solidity\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n *\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     * @custom:oz-retyped-from bool\r\n     */\r\n    uint8 private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint8 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts.\r\n     *\r\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\r\n     * constructor.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier initializer() {\r\n        bool isTopLevelCall = !_initializing;\r\n        require(\r\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n        _initialized = 1;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\r\n     * are added through upgrades and that require initialization.\r\n     *\r\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\r\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     *\r\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier reinitializer(uint8 version) {\r\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\r\n        _initialized = version;\r\n        _initializing = true;\r\n        _;\r\n        _initializing = false;\r\n        emit Initialized(version);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     *\r\n     * Emits an {Initialized} event the first time it is successfully executed.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        require(!_initializing, \"Initializable: contract is initializing\");\r\n        if (_initialized != type(uint8).max) {\r\n            _initialized = type(uint8).max;\r\n            emit Initialized(type(uint8).max);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\r\n     */\r\n    function _getInitializedVersion() internal view returns (uint8) {\r\n        return _initialized;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\r\n     */\r\n    function _isInitializing() internal view returns (bool) {\r\n        return _initializing;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal onlyInitializing {\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal onlyInitializing {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: lib/ipor-protocol/contracts/security/IporOwnableUpgradeable.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n\r\n/// @title Extended version of OpenZeppelin OwnableUpgradeable contract with appointed owner\r\nabstract contract IporOwnableUpgradeable is OwnableUpgradeable {\r\n    address private _appointedOwner;\r\n\r\n    /// @notice Emitted when account is appointed to transfer ownership\r\n    /// @param appointedOwner Address of appointed owner\r\n    event AppointedToTransferOwnership(address indexed appointedOwner);\r\n\r\n    modifier onlyAppointedOwner() {\r\n        require(_appointedOwner == msg.sender, IporErrors.SENDER_NOT_APPOINTED_OWNER);\r\n        _;\r\n    }\r\n\r\n    /// @notice Oppoint account to transfer ownership\r\n    /// @param appointedOwner Address of appointed owner\r\n    function transferOwnership(address appointedOwner) public override onlyOwner {\r\n        require(appointedOwner != address(0), IporErrors.WRONG_ADDRESS);\r\n        _appointedOwner = appointedOwner;\r\n        emit AppointedToTransferOwnership(appointedOwner);\r\n    }\r\n\r\n    /// @notice Confirm transfer ownership\r\n    /// @dev This is real transfer ownership in second step by appointed account\r\n    function confirmTransferOwnership() external onlyAppointedOwner {\r\n        _appointedOwner = address(0);\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    /// @notice Renounce ownership\r\n    function renounceOwnership() public virtual override onlyOwner {\r\n        _transferOwnership(address(0));\r\n        _appointedOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    function __Pausable_init() internal onlyInitializing {\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal onlyInitializing {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This abstract contract provides getters and event emitting update functions for\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\r\n *\r\n * _Available since v4.1._\r\n */\r\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\r\n    function __ERC1967Upgrade_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\r\n    }\r\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\r\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _getImplementation() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 implementation slot.\r\n     */\r\n    function _setImplementation(address newImplementation) private {\r\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeTo(address newImplementation) internal {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\r\n        _upgradeTo(newImplementation);\r\n        if (data.length > 0 || forceCall) {\r\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\r\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\r\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\r\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\r\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\r\n            _setImplementation(newImplementation);\r\n        } else {\r\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\r\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\r\n            } catch {\r\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\r\n            }\r\n            _upgradeToAndCall(newImplementation, data, forceCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Storage slot with the admin of the contract.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     */\r\n    function _getAdmin() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 admin slot.\r\n     */\r\n    function _setAdmin(address newAdmin) private {\r\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\r\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     *\r\n     * Emits an {AdminChanged} event.\r\n     */\r\n    function _changeAdmin(address newAdmin) internal {\r\n        emit AdminChanged(_getAdmin(), newAdmin);\r\n        _setAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\r\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\r\n     */\r\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\r\n\r\n    /**\r\n     * @dev Returns the current beacon.\r\n     */\r\n    function _getBeacon() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\r\n     */\r\n    function _setBeacon(address newBeacon) private {\r\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\r\n        require(\r\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\r\n            \"ERC1967: beacon implementation is not a contract\"\r\n        );\r\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\r\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\r\n     *\r\n     * Emits a {BeaconUpgraded} event.\r\n     */\r\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\r\n        _setBeacon(newBeacon);\r\n        emit BeaconUpgraded(newBeacon);\r\n        if (data.length > 0 || forceCall) {\r\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\r\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\r\n *\r\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\r\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\r\n * `UUPSUpgradeable` with a custom implementation of upgrades.\r\n *\r\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\r\n *\r\n * _Available since v4.1._\r\n */\r\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\r\n    function __UUPSUpgradeable_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\r\n    }\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\r\n    address private immutable __self = address(this);\r\n\r\n    /**\r\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\r\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\r\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\r\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\r\n     * fail.\r\n     */\r\n    modifier onlyProxy() {\r\n        require(address(this) != __self, \"Function must be called through delegatecall\");\r\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\r\n     * callable on the implementing contract but not through proxies.\r\n     */\r\n    modifier notDelegated() {\r\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\r\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\r\n     *\r\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\r\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\r\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\r\n     */\r\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\r\n        return _IMPLEMENTATION_SLOT;\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\r\n     *\r\n     * Calls {_authorizeUpgrade}.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     *\r\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\r\n     */\r\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\r\n        _authorizeUpgrade(newImplementation);\r\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\r\n     * encoded in `data`.\r\n     *\r\n     * Calls {_authorizeUpgrade}.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     *\r\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\r\n     */\r\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\r\n        _authorizeUpgrade(newImplementation);\r\n        _upgradeToAndCallUUPS(newImplementation, data, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\r\n     * {upgradeTo} and {upgradeToAndCall}.\r\n     *\r\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\r\n     *\r\n     * ```solidity\r\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\r\n     * ```\r\n     */\r\n    function _authorizeUpgrade(address newImplementation) internal virtual;\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuardUpgradeable is Initializable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    function __ReentrancyGuard_init() internal onlyInitializing {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: lib/ipor-protocol/contracts/vault/AssetManagement.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract AssetManagement is\r\n    Initializable,\r\n    PausableUpgradeable,\r\n    ReentrancyGuardUpgradeable,\r\n    UUPSUpgradeable,\r\n    IporOwnableUpgradeable,\r\n    IAssetManagement,\r\n    IIporContractCommonGov,\r\n    IProxyImplementation\r\n{\r\n    using IporContractValidator for address;\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n    uint256 private constant ROUNDING_ERROR_MARGIN = 1e18;\r\n\r\n    struct StrategyData {\r\n        address strategy;\r\n        /// @dev balance in 18 decimals\r\n        uint256 balance;\r\n        uint256 apy;\r\n    }\r\n\r\n    /// @dev deprecated\r\n    address internal _assetDeprecated;\r\n    /// @dev deprecated\r\n    address internal _ivTokenDeprecated;\r\n    /// @dev deprecated\r\n    address internal _AmmTreasuryDeprecated;\r\n    /// @dev deprecated\r\n    address internal _strategyAaveDeprecated;\r\n    /// @dev deprecated\r\n    address internal _strategyCompoundDeprecated;\r\n\r\n    address public immutable asset;\r\n    address public immutable ammTreasury;\r\n\r\n    modifier onlyAmmTreasury() {\r\n        require(msg.sender == ammTreasury, IporErrors.CALLER_NOT_AMM_TREASURY);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPauseGuardian() {\r\n        require(PauseManager.isPauseGuardian(msg.sender), IporErrors.CALLER_NOT_GUARDIAN);\r\n        _;\r\n    }\r\n\r\n    constructor(address assetInput, address ammTreasuryInput) {\r\n        asset = assetInput.checkAddress();\r\n        ammTreasury = ammTreasuryInput.checkAddress();\r\n\r\n        require(_getDecimals() == IERC20MetadataUpgradeable(assetInput).decimals(), IporErrors.WRONG_DECIMALS);\r\n    }\r\n\r\n    function initialize() public initializer {\r\n        __Pausable_init();\r\n        __Ownable_init();\r\n        __UUPSUpgradeable_init();\r\n    }\r\n\r\n    function getImplementation() external view override returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n    }\r\n\r\n    function totalBalance() external view override returns (uint256) {\r\n        return _calculateTotalBalance(_getStrategiesData());\r\n    }\r\n\r\n    function deposit(\r\n        uint256 amount\r\n    ) external override whenNotPaused onlyAmmTreasury returns (uint256 vaultBalance, uint256 depositedAmount) {\r\n        require(amount > 0, IporErrors.VALUE_NOT_GREATER_THAN_ZERO);\r\n        uint256 assetAmount = IporMath.convertWadToAssetDecimals(amount, _getDecimals());\r\n        require(assetAmount > 0, IporErrors.VALUE_NOT_GREATER_THAN_ZERO);\r\n\r\n        StrategyData[] memory sortedStrategies = _getSortedStrategiesWithApy(_getStrategiesData());\r\n\r\n        IERC20Upgradeable(asset).safeTransferFrom(msg.sender, address(this), assetAmount);\r\n\r\n        address wasDepositedToStrategy = address(0x0);\r\n\r\n        uint256 wadAmountNormalized = IporMath.convertToWad(\r\n            IporMath.convertWadToAssetDecimals(amount, _getDecimals()),\r\n            _getDecimals()\r\n        );\r\n\r\n        uint256 highestApyStrategyArrayIndex = _getNumberOfSupportedStrategies() - 1;\r\n\r\n        for (uint256 i; i < _getNumberOfSupportedStrategies(); ++i) {\r\n            try IStrategy(sortedStrategies[highestApyStrategyArrayIndex - i].strategy).deposit(amount) returns (\r\n                uint256 tryDepositedAmount\r\n            ) {\r\n                require(\r\n                    tryDepositedAmount > 0 && tryDepositedAmount <= wadAmountNormalized,\r\n                    AssetManagementErrors.STRATEGY_INCORRECT_DEPOSITED_AMOUNT\r\n                );\r\n\r\n                depositedAmount = tryDepositedAmount;\r\n                wasDepositedToStrategy = sortedStrategies[highestApyStrategyArrayIndex - i].strategy;\r\n\r\n                break;\r\n            } catch {\r\n                continue;\r\n            }\r\n        }\r\n\r\n        require(wasDepositedToStrategy != address(0x0), AssetManagementErrors.DEPOSIT_TO_STRATEGY_FAILED);\r\n\r\n        emit Deposit(msg.sender, wasDepositedToStrategy, depositedAmount);\r\n\r\n        vaultBalance = _calculateTotalBalance(sortedStrategies) + depositedAmount;\r\n    }\r\n\r\n    function withdraw(\r\n        uint256 amount\r\n    ) external override whenNotPaused onlyAmmTreasury returns (uint256 withdrawnAmount, uint256 vaultBalance) {\r\n        return _withdraw(amount);\r\n    }\r\n\r\n    function withdrawAll()\r\n        external\r\n        override\r\n        whenNotPaused\r\n        onlyAmmTreasury\r\n        returns (uint256 withdrawnAmount, uint256 vaultBalance)\r\n    {\r\n        return _withdraw(type(uint256).max - ROUNDING_ERROR_MARGIN);\r\n    }\r\n\r\n    function getSortedStrategiesWithApy() external view returns (StrategyData[] memory sortedStrategies) {\r\n        sortedStrategies = _getSortedStrategiesWithApy(_getStrategiesData());\r\n    }\r\n\r\n    function grantMaxAllowanceForSpender(address assetInput, address spender) external onlyOwner {\r\n        IERC20Upgradeable(assetInput).forceApprove(spender, Constants.MAX_VALUE);\r\n    }\r\n\r\n    function revokeAllowanceForSpender(address assetInput, address spender) external onlyOwner {\r\n        IERC20Upgradeable(assetInput).safeApprove(spender, 0);\r\n    }\r\n\r\n    function pause() external override onlyPauseGuardian {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external override onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function isPauseGuardian(address account) external view override returns (bool) {\r\n        return PauseManager.isPauseGuardian(account);\r\n    }\r\n\r\n    function addPauseGuardians(address[] calldata guardians) external override onlyOwner {\r\n        PauseManager.addPauseGuardians(guardians);\r\n    }\r\n\r\n    function removePauseGuardians(address[] calldata guardians) external override onlyOwner {\r\n        PauseManager.removePauseGuardians(guardians);\r\n    }\r\n\r\n    function _getDecimals() internal pure virtual returns (uint256);\r\n\r\n    function _getNumberOfSupportedStrategies() internal view virtual returns (uint256);\r\n\r\n    function _getStrategiesData() internal view virtual returns (StrategyData[] memory strategies);\r\n\r\n    function _withdraw(uint256 amount) internal returns (uint256 withdrawnAmount, uint256 vaultBalance) {\r\n        require(amount > 0, IporErrors.VALUE_NOT_GREATER_THAN_ZERO);\r\n\r\n        StrategyData[] memory sortedStrategies = _getSortedStrategiesWithApy(_getStrategiesData());\r\n\r\n        uint256 strategyAmountToWithdraw;\r\n        uint256 amountToWithdraw = amount;\r\n\r\n        /// @dev Withdraw a little bit more to get at least requested amount even if appears rounding error\r\n        /// in external DeFi protocol integrated with IPOR Asset Management\r\n        amountToWithdraw = amount + ROUNDING_ERROR_MARGIN;\r\n\r\n        for (uint256 i; i < _getNumberOfSupportedStrategies(); ++i) {\r\n            strategyAmountToWithdraw = sortedStrategies[i].balance <= amountToWithdraw\r\n                ? sortedStrategies[i].balance\r\n                : amountToWithdraw;\r\n\r\n            if (strategyAmountToWithdraw == 0) {\r\n                /// @dev if strategy has no balance, try to withdraw from next strategy\r\n                continue;\r\n            }\r\n\r\n            try IStrategy(sortedStrategies[i].strategy).withdraw(strategyAmountToWithdraw) returns (\r\n                uint256 tryWithdrawnAmount\r\n            ) {\r\n                amountToWithdraw = tryWithdrawnAmount > amountToWithdraw ? 0 : amountToWithdraw - tryWithdrawnAmount;\r\n\r\n                sortedStrategies[i].balance = tryWithdrawnAmount > sortedStrategies[i].balance\r\n                    ? 0\r\n                    : sortedStrategies[i].balance - tryWithdrawnAmount;\r\n            } catch {\r\n                /// @dev If strategy withdraw fails, try to withdraw from next strategy\r\n                continue;\r\n            }\r\n        }\r\n\r\n        /// @dev Always all collected assets on AssetManagement are withdrawn to AmmTreasury\r\n        uint256 withdrawnAssetAmount = IERC20Upgradeable(asset).balanceOf(address(this));\r\n\r\n        if (withdrawnAssetAmount > 0) {\r\n            /// @dev Always transfer all assets from AssetManagement to AmmTreasury\r\n            IERC20Upgradeable(asset).safeTransfer(msg.sender, withdrawnAssetAmount);\r\n\r\n            withdrawnAmount = IporMath.convertToWad(withdrawnAssetAmount, _getDecimals());\r\n\r\n            emit Withdraw(msg.sender, withdrawnAmount);\r\n        }\r\n\r\n        vaultBalance = _calculateTotalBalance(sortedStrategies);\r\n    }\r\n\r\n    function _calculateTotalBalance(\r\n        StrategyData[] memory sortedStrategies\r\n    ) internal view returns (uint256 totalBalance) {\r\n        for (uint256 i; i < _getNumberOfSupportedStrategies(); ++i) {\r\n            totalBalance += sortedStrategies[i].balance;\r\n        }\r\n        totalBalance += IporMath.convertToWad(IERC20Upgradeable(asset).balanceOf(address(this)), _getDecimals());\r\n    }\r\n\r\n    function _getSortedStrategiesWithApy(\r\n        StrategyData[] memory strategies\r\n    ) internal view returns (StrategyData[] memory) {\r\n        uint256 length = strategies.length;\r\n        for (uint256 i; i < length; ++i) {\r\n            strategies[i].apy = IStrategy(strategies[i].strategy).getApy();\r\n        }\r\n        return _sortApy(strategies);\r\n    }\r\n\r\n    function _sortApy(StrategyData[] memory data) internal pure returns (StrategyData[] memory) {\r\n        _quickSortApy(data, int256(0), int256(data.length - 1));\r\n        return data;\r\n    }\r\n\r\n    function _quickSortApy(StrategyData[] memory arr, int256 left, int256 right) internal pure {\r\n        int256 i = left;\r\n        int256 j = right;\r\n        if (i == j) return;\r\n        StrategyData memory pivot = arr[uint256(left + (right - left) / 2)];\r\n        while (i <= j) {\r\n            while (arr[uint256(i)].apy < pivot.apy) i++;\r\n            while (pivot.apy < arr[uint256(j)].apy) j--;\r\n            if (i <= j) {\r\n                (arr[uint256(i)], arr[uint256(j)]) = (arr[uint256(j)], arr[uint256(i)]);\r\n                i++;\r\n                j--;\r\n            }\r\n        }\r\n        if (left < j) _quickSortApy(arr, left, j);\r\n        if (i < right) _quickSortApy(arr, i, right);\r\n    }\r\n\r\n    //solhint-disable no-empty-blocks\r\n    function _authorizeUpgrade(address) internal override onlyOwner {}\r\n}\r\n\r\n// File: lib/ipor-protocol/contracts/vault/AssetManagementDai.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\ncontract AssetManagementDai is AssetManagement {\r\n    using IporContractValidator for address;\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n    uint256 public constant getVersion = 2_000;\r\n\r\n    address public immutable strategyAave;\r\n    address public immutable strategyCompound;\r\n    address public immutable strategyDsr;\r\n\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor(\r\n        address assetInput,\r\n        address ammTreasuryInput,\r\n        address strategyAaveInput,\r\n        address strategyCompoundInput,\r\n        address strategyDsrInput\r\n    ) AssetManagement(assetInput, ammTreasuryInput) {\r\n        strategyAave = strategyAaveInput.checkAddress();\r\n        strategyCompound = strategyCompoundInput.checkAddress();\r\n        strategyDsr = strategyDsrInput.checkAddress();\r\n\r\n        _disableInitializers();\r\n    }\r\n\r\n    function _getDecimals() internal pure override returns (uint256) {\r\n        return 18;\r\n    }\r\n\r\n    function _getNumberOfSupportedStrategies() internal view virtual override returns (uint256) {\r\n        return 3;\r\n    }\r\n\r\n    function _getStrategiesData() internal view override returns (StrategyData[] memory strategies) {\r\n        strategies = new StrategyData[](_getNumberOfSupportedStrategies());\r\n        strategies[0].strategy = strategyAave;\r\n        strategies[0].balance = IStrategy(strategyAave).balanceOf();\r\n        strategies[1].strategy = strategyCompound;\r\n        strategies[1].balance = IStrategy(strategyCompound).balanceOf();\r\n        strategies[2].strategy = strategyDsr;\r\n        strategies[2].balance = IStrategy(strategyDsr).balanceOf();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetInput\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ammTreasuryInput\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategyAaveInput\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategyCompoundInput\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategyDsrInput\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"appointedOwner\",\"type\":\"address\"}],\"name\":\"AppointedToTransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"guardians\",\"type\":\"address[]\"}],\"name\":\"PauseGuardiansAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"guardians\",\"type\":\"address[]\"}],\"name\":\"PauseGuardiansRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"guardians\",\"type\":\"address[]\"}],\"name\":\"addPauseGuardians\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ammTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSortedStrategiesWithApy\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetManagement.StrategyData[]\",\"name\":\"sortedStrategies\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetInput\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"grantMaxAllowanceForSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauseGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"guardians\",\"type\":\"address[]\"}],\"name\":\"removePauseGuardians\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetInput\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowanceForSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyAave\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyCompound\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyDsr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"appointedOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AssetManagementDai", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000ed7d74aa7eb1f12f83da36dfac1de2257b4e7523000000000000000000000000526d0047725d48bbc6e24c7b82a3e47c1af1f62f00000000000000000000000087cef19aca214d12082e201e6130432df39fc774000000000000000000000000c26be51e50a358ec6d366147d78ab94e9597239c", "EVMVersion": "paris", "Library": "", "LicenseType": "BSL 1.1", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bb6efd303413eca07606bdbfec46111d506e2a7acd936027ef9ac9fdc70c22a9"}