{"SourceCode": "# @version 0.3.9\r\n# @notice A manager contract for the StakingRewards contract.\r\n# @author skozin\r\n# @license MIT\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\ninterface StakingRewards:\r\n    def periodFinish() -> uint256: view\r\n    def notifyRewardAmount(reward: uint256, rewardHolder: address): nonpayable\r\n\r\n\r\nowner: public(address)\r\nrewards_contract: public(address)\r\nwsteth_token: constant(address) = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0\r\n\r\n\r\n@external\r\ndef __init__():\r\n    self.owner = msg.sender\r\n\r\n\r\n@external\r\ndef transfer_ownership(_to: address):\r\n    \"\"\"\r\n    @notice Changes the contract owner. Can only be called by the current owner.\r\n    \"\"\"\r\n    assert msg.sender == self.owner, \"not permitted\"\r\n    self.owner = _to\r\n\r\n\r\n@external\r\ndef set_rewards_contract(_rewards_contract: address):\r\n    \"\"\"\r\n    @notice Sets the StakingRewards contract. Can only be called by the owner.\r\n    \"\"\"\r\n    assert msg.sender == self.owner, \"not permitted\"\r\n    self.rewards_contract = _rewards_contract\r\n\r\n\r\n@view\r\n@internal\r\ndef _is_rewards_period_finished(rewards_contract: address) -> bool:\r\n    return block.timestamp >= StakingRewards(rewards_contract).periodFinish()\r\n\r\n\r\n@view\r\n@external\r\ndef is_rewards_period_finished() -> bool:\r\n    \"\"\"\r\n    @notice Whether the current rewards period has finished.\r\n    \"\"\"\r\n    return self._is_rewards_period_finished(self.rewards_contract)\r\n\r\n\r\n@external\r\ndef start_next_rewards_period():\r\n    \"\"\"\r\n    @notice\r\n        Starts the next rewards period of duration `rewards_contract.rewardsDuration()`,\r\n        distributing `wsteth_token.balanceOf(self)` tokens throughout the period. The current\r\n        rewards period must be finished by this time.\r\n    \"\"\"\r\n    rewards: address = self.rewards_contract\r\n    amount: uint256 = ERC20(wsteth_token).balanceOf(self)\r\n\r\n    assert rewards != ZERO_ADDRESS and amount != 0, \"manager: rewards disabled\"\r\n    assert self._is_rewards_period_finished(rewards), \"manager: rewards period not finished\"\r\n\r\n    ERC20(wsteth_token).approve(rewards, amount)\r\n    StakingRewards(rewards).notifyRewardAmount(amount, self)\r\n\r\n\r\n@external\r\ndef recover_erc20(_token: address, _recipient: address = msg.sender):\r\n    \"\"\"\r\n    @notice\r\n        Transfers the whole balance of the given ERC20 token from self\r\n        to the recipient. Can only be called by the owner.\r\n    \"\"\"\r\n    assert msg.sender == self.owner, \"not permitted\"\r\n    token_balance: uint256 = ERC20(_token).balanceOf(self)\r\n    if token_balance != 0:\r\n        assert ERC20(_token).transfer(_recipient, token_balance), \"token transfer failed\"", "ABI": "[{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer_ownership\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_rewards_contract\",\"inputs\":[{\"name\":\"_rewards_contract\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"is_rewards_period_finished\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"start_next_rewards_period\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"recover_erc20\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"recover_erc20\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewards_contract\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.3.9", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}