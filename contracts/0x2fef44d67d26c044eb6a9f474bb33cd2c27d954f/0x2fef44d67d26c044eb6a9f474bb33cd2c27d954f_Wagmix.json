{"SourceCode": "/**                                                                         \r\n                                                                                \r\n      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     \r\n      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     \r\n      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     \r\n      %%%%%%%%%%%%%%%%%%%%%%%%%%%%             %%%%%%%%%%%%%%%%%%%%%%%%%%%%     \r\n      %%%%%%%%%%%%%%%%%%%%%%%%     %%%%%%%%%%%     %%%%%%%%%%%%%%%%%%%%%%%%     \r\n      %%%%%%%%%%%%%%%%%%%(    %%%%%%%%%%%%%%%%%%%%%    %%%%%%%%%%%%%%%%%%%%     \r\n      %%%%%%%%%%%%%%%     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%     %%%%%%%%%%%%%%%     \r\n      %%%%%%%%%%%%    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    %%%%%%%%%%%%     \r\n      %%%%%%%%%%%  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  %%%%%%%%%%%     \r\n      %%%%%%%%%%  %%%% %%              %%%%            %%  %%%%  %%%%%%%%%%     \r\n      %%%%%%%%%%  %%%%%   %%%%             %%%%  %%%%    %%%%%%  %%%%%%%%%%     \r\n      %%%%%%%%%%  %%%%%%#    ,%%%%%%%%%%%%%%%%%%%       %%%%%%%  %%%%%%%%%%     \r\n      %%%%%%%%%%  %%%%%%%%     %%.%%%%%%%%%%%%%       %%%%%%%%%  %%%%%%%%%%     \r\n      %%%%%%%%%%  %%%%%%%%%    %%  %%%%%%%%%%        %%%%%%%%%%  %%%%%%%%%%     \r\n      %%%%%%%%%%  %%%%%%%%%%%%%%%   .%%%%%%%      %%%%%%%%%%%%%  %%%%%%%%%%     \r\n      %%%%%%%%%%  %%%%%%%%%%%%%%%     %%%%%  %%%%%%%%%%%%%%%%%%  %%%%%%%%%%     \r\n      %%%%%%%%%%  %%%%%%%%%%%%%%%      (%%%%   %%%%%%%%%%%%%%%%  %%%%%%%%%%     \r\n      %%%%%%%%%%  %%%%%%%%%%%%%%%.     .%      %%%%%%%%%%%%%%%%  %%%%%%%%%%     \r\n      %%%%%%%%%%%  (%%%%%%%%%%%%%%%     %    #%%%%%%%%%%%%%%%#  %%%%%%%%%%%     \r\n      %%%%%%%%%%%%    %%%%%%%%%%%%%%    %   %%%%%%%%%%%%%%%    %%%%%%%%%%%%     \r\n      %%%%%%%%%%%%%%%     %%%%%%%%%%%%  %  %%%%%%%%%%%%     %%%%%%%%%%%%%%%     \r\n      %%%%%%%%%%%%%%%%%%%%    #%%%%%%%% %/%%%%%%%%%    ,%%%%%%%%%%%%%%%%%%%     \r\n      %%%%%%%%%%%%%%%%%%%%%%%%     %%%%%%%%%%%     %%%%%%%%%%%%%%%%%%%%%%%%     \r\n      %%%%%%%%%%%%%%%%%%%%%%%%%%%%            .%%%%%%%%%%%%%%%%%%%%%%%%%%%%     \r\n      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     \r\n      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     \r\n      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     \r\n                                                                                \r\n      // Wagmix Coin            - https://coin.wagmix.io\r\n      // Wagmix Exchange        - https://wagmix.io\r\n      // Wagmix Twitter         - https://twitter.com/WagmixGlobal\r\n      // Wagmix Community       - https://t.me/WagmixCommunity\r\n      // Wagmix Channel         - https://t.me/WagmixGlobal\r\n      // Wagmix Exchange        - https://t.me/WagmixExchange\r\n      // Wagmix Support         - https://support.wagmix.io\r\n      // Wagmix Support Bot     - https://t.me/WagmixGlobalSupportBot\r\n      // Wagmix Proposal Bot    - https://t.me/WagmixGlobalProposalsBot\r\n      // Wagmix Market Data     - https://t.me/WagmixMarketData\r\n      // Wagmix Market Data Bot - https://t.me/WagixGlobalMarketBot\r\n\r\n**/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.21;\r\npragma experimental ABIEncoderV2;\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    // Function to transfer ownership to a new address\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _owner = newOwner;\r\n    }\r\n    // Function to renounce ownership\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\n// SafeERC20 library ensures safe ERC20 token transfers\r\nlibrary SafeERC20 {\r\n    function safeTransfer(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: INTERNAL TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n// ERC20 token interface\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external;\r\n}\r\n\r\n// Uniswap V2 Factory interface\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n// Uniswap V2 Router interface\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n\r\n    function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\n/**\r\n * @title Wagmix (WGX) Token Contract\r\n * @dev This contract implements the Wagmix token (WGX) with ownership control, fees, and automatic liquidity generation.\r\n * It also provides functions to manage various parameters and control the token distribution.\r\n */\r\n \r\ncontract Wagmix is Ownable {\r\n    // Token metadata    \r\n    string private constant _name = unicode\"Wagmix\";\r\n    string private constant _symbol = unicode\"WGX\";\r\n    uint256 private constant _totalSupply = 120_000_000 * 1e18;\r\n    uint256 private constant _maxSupply = 120_000_000 * 1e18;\r\n\r\n    // Transaction limits and fees\r\n    uint256 public maxTransactionAmount = 1_200_000 * 1e18;\r\n    uint256 public maxWallet = (_totalSupply * 2) / 100;\r\n    uint256 public swapTokensAtAmount = (_totalSupply * 2) / 10000;\r\n\r\n    // Address for various purposes\r\n    address private revAddress = 0xB6577370052B015e0494030A18F3B8Fe31b9a1F3;\r\n    address private treasuryAddress = 0xC66D9606B7C9eC8199BD285343B502CF291F9e89;\r\n    address private teamAddress = 0xAe78Db306479f8289E52c53b4Bc1F9d6A7842942;\r\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    // Fee multipliers and distribution percentages\r\n    uint256 private multiplier = 20;\r\n\r\n    uint8 public buyTotalFees = 50;\r\n    uint8 public sellTotalFees = 50;\r\n\r\n    uint8 public revFee = 40;\r\n    uint8 public treasuryFee = 30;\r\n    uint8 public teamFee = 30;\r\n\r\n    // Flags for contract state\r\n    bool private swapping;\r\n    bool public limitsInEffect = true;\r\n    bool private launched;\r\n\r\n    // Token balances and allowances\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) private _isExcludedMaxTransactionAmount;\r\n    mapping(address => bool) private automatedMarketMakerPairs;\r\n\r\n    // Events\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 teamETH, uint256 revETH, uint256 TreasuryETH);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // Uniswap Router instance\r\n    IUniswapV2Router02 public constant uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address public immutable uniswapV2Pair;\r\n\r\n    constructor() {\r\n        // Create the Uniswap pair for WGX and WETH        \r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), WETH);\r\n        automatedMarketMakerPairs[uniswapV2Pair] = true;\r\n\r\n        // Exclude key addresses from fees\r\n        setExcludedFromFees(owner(), true);\r\n        setExcludedFromFees(address(this), true);\r\n        setExcludedFromFees(address(0xdead), true);\r\n        setExcludedFromFees(teamAddress, true);\r\n        setExcludedFromFees(revAddress, true);\r\n        setExcludedFromFees(treasuryAddress, true);\r\n\r\n        // Exclude key addresses from max transaction amount\r\n        setExcludedFromMaxTransaction(owner(), true);\r\n        setExcludedFromMaxTransaction(address(uniswapV2Router), true);\r\n        setExcludedFromMaxTransaction(address(this), true);\r\n        setExcludedFromMaxTransaction(address(0xdead), true);\r\n        setExcludedFromMaxTransaction(address(uniswapV2Pair), true);\r\n        setExcludedFromMaxTransaction(teamAddress, true);\r\n        setExcludedFromMaxTransaction(revAddress, true);\r\n        setExcludedFromMaxTransaction(treasuryAddress, true);\r\n\r\n        // Calculate the token amounts for distribution\r\n        uint256 totalTokens = _totalSupply;\r\n        uint256 tokensToTreasury = (totalTokens * 20) / 100;\r\n        uint256 tokensToTeam = (totalTokens * 10) / 100;\r\n        uint256 tokensToDeployer = totalTokens - tokensToTreasury - tokensToTeam;\r\n\r\n        // Allocate tokens to addresses\r\n        _balances[msg.sender] = tokensToDeployer;\r\n        emit Transfer(address(0), msg.sender, tokensToDeployer);\r\n        _balances[treasuryAddress] = tokensToTreasury;\r\n        emit Transfer(address(0), treasuryAddress, tokensToTreasury);\r\n        _balances[teamAddress] = tokensToTeam;\r\n        emit Transfer(address(0), teamAddress, tokensToTeam);\r\n\r\n        _approve(address(this), address(uniswapV2Router), type(uint256).max);\r\n    }\r\n\r\n    // Fallback function to receive ETH\r\n    receive() external payable {}\r\n\r\n    // Getters for token metadata\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public pure returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    // Get the balance of a specific address\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    // Get the allowance for a spender on behalf of an owner\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    // Approve a spender to spend a specific amount on behalf of the owner\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    // Internal function to set allowance\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    // Transfer tokens to a recipient\r\n    function transfer(address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    // Transfer tokens from sender to recipient\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n            unchecked {\r\n                _approve(sender, msg.sender, currentAllowance - amount);\r\n            }\r\n        }\r\n\r\n        _transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    // Internal function for token transfer\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        // Ensure trading is enabled\r\n        if (!launched && (from != owner() && from != address(this) && to != owner())) {\r\n            revert(\"Trading not enabled\");\r\n        }\r\n\r\n        // Apply transaction limits and fees\r\n        if (limitsInEffect) {\r\n            if (from != owner() && to != owner() && to != address(0) && to != address(0xdead) && !swapping) {\r\n                if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) {\r\n                    require(amount <= maxTransactionAmount, \"Buy transfer amount exceeds the maxTx\");\r\n                    require(amount + balanceOf(to) <= maxWallet, \"Max wallet exceeded\");\r\n                } else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) {\r\n                    require(amount <= maxTransactionAmount, \"Sell transfer amount exceeds the maxTx\");\r\n                } else if (!_isExcludedMaxTransactionAmount[to]) {\r\n                    require(amount + balanceOf(to) <= maxWallet, \"Max wallet exceeded\");\r\n                }\r\n            }\r\n        }\r\n\r\n        bool canSwap = balanceOf(address(this)) >= swapTokensAtAmount;\r\n\r\n        if (canSwap && !swapping && !automatedMarketMakerPairs[from] && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\r\n            swapping = true;\r\n            swapBack();\r\n            swapping = false;\r\n        }\r\n\r\n        // Handle fee calculations\r\n        bool takeFee = !swapping;\r\n\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 senderBalance = _balances[from];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        uint256 fees = 0;\r\n        if (takeFee) {\r\n            if (automatedMarketMakerPairs[to] && sellTotalFees > 0) {\r\n                fees = (amount * sellTotalFees) / 1000;\r\n            } else if (automatedMarketMakerPairs[from] && buyTotalFees > 0) {\r\n                fees = (amount * buyTotalFees) / 1000;\r\n            }\r\n\r\n            if (fees > 0) {\r\n                unchecked {\r\n                    amount = amount - fees;\r\n                    _balances[from] -= fees;\r\n                    _balances[address(this)] += fees;\r\n                }\r\n                emit Transfer(from, address(this), fees);\r\n            }\r\n        }\r\n        unchecked {\r\n            _balances[from] -= amount;\r\n            _balances[to] += amount;\r\n        }\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    // Function to remove transaction limits\r\n    function removeLimits() external onlyOwner {\r\n        limitsInEffect = false;\r\n    }\r\n\r\n    // Function to set distribution fees\r\n    function setDistributionFees(uint8 _RevFee, uint8 _TreasuryFee, uint8 _teamFee) external onlyOwner {\r\n        revFee = _RevFee;\r\n        treasuryFee = _TreasuryFee;\r\n        teamFee = _teamFee;\r\n        require((revFee + treasuryFee + teamFee) == 100, \"Distribution must total 100%\");\r\n    }\r\n\r\n    // Function to set transaction fees\r\n    function setFees(uint8 _buyTotalFees, uint8 _sellTotalFees) external onlyOwner {\r\n        require(_buyTotalFees <= 50, \"Buy fees must be less than or equal to 5%\");\r\n        require(_sellTotalFees <= 50, \"Sell fees must be less than or equal to 5%\");\r\n        buyTotalFees = _buyTotalFees;\r\n        sellTotalFees = _sellTotalFees;\r\n    }\r\n\r\n    // Function to exclude an address from fees\r\n    function setExcludedFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n    }\r\n\r\n    // Function to exclude an address from max transaction amount\r\n    function setExcludedFromMaxTransaction(address account, bool excluded) public onlyOwner {\r\n        _isExcludedMaxTransactionAmount[account] = excluded;\r\n    }\r\n\r\n    // Function to open trading\r\n    function openTrade() external onlyOwner {\r\n        require(!launched, \"Already launched\");\r\n        launched = true;\r\n    }\r\n\r\n    // Function to start the liquidity generation\r\n    function startingWagmix() external payable onlyOwner {\r\n        require(!launched, \"Already launched\");\r\n        uniswapV2Router.addLiquidityETH{value: msg.value}(\r\n            address(this),\r\n            _balances[address(this)],\r\n            0,\r\n            0,\r\n            teamAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    // Function to set automated market maker pair\r\n    function setAutomatedMarketMakerPair(address pair, bool value) external onlyOwner {\r\n        require(pair != uniswapV2Pair, \"The pair cannot be removed\");\r\n        automatedMarketMakerPairs[pair] = value;\r\n    }\r\n\r\n    // Function to set swap amount\r\n    function setSwapAtAmount(uint256 newSwapAmount) external onlyOwner {\r\n        require(newSwapAmount >= (totalSupply() * 1) / 100000, \"Swap amount cannot be lower than 0.001% of the supply\");\r\n        require(newSwapAmount <= (totalSupply() * 5) / 1000, \"Swap amount cannot be higher than 0.5% of the supply\");\r\n        swapTokensAtAmount = newSwapAmount;\r\n    }\r\n\r\n    // Function to set maximum transaction amount\r\n    function setMaxTxnAmount(uint256 newMaxTx) external onlyOwner {\r\n        require(newMaxTx >= ((totalSupply() * 1) / 1000) / 1e18, \"Cannot set max transaction lower than 0.1%\");\r\n        maxTransactionAmount = newMaxTx * (10**18);\r\n    }\r\n\r\n    // Function to set maximum wallet amount\r\n    function setMaxWalletAmount(uint256 newMaxWallet) external onlyOwner {\r\n        require(newMaxWallet >= ((totalSupply() * 1) / 1000) / 1e18, \"Cannot set max wallet lower than 0.1%\");\r\n        maxWallet = newMaxWallet * (10**18);\r\n    }\r\n\r\n    // Function to update the reward address\r\n    function updateRevAddress(address newAddress) external onlyOwner {\r\n        require(newAddress != address(0), \"Address cannot be zero\");\r\n        revAddress = newAddress;\r\n    }\r\n\r\n    // Function to update the treasury address\r\n    function updateTreasuryAddress(address newAddress) external onlyOwner {\r\n        require(newAddress != address(0), \"Address cannot be zero\");\r\n        treasuryAddress = newAddress;\r\n    }\r\n\r\n    // Function to update the team address\r\n    function updateTeamAddress(address newAddress) external onlyOwner {\r\n        require(newAddress != address(0), \"Address cannot be zero\");\r\n        teamAddress = newAddress;\r\n    }\r\n\r\n    // Function to check if an address is excluded from fees\r\n    function excludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    // Function to withdraw stuck tokens from the contract\r\n    function withdrawStuckToken(address token, address to) external onlyOwner {\r\n        uint256 _contractBalance = IERC20(token).balanceOf(address(this));\r\n        SafeERC20.safeTransfer(token, to, _contractBalance); // Use safeTransfer\r\n    }\r\n\r\n    // Function to withdraw stuck ETH from the contract\r\n    function withdrawStuckETH(address addr) external onlyOwner {\r\n        require(addr != address(0), \"Invalid address\");\r\n\r\n        (bool success, ) = addr.call{value: address(this).balance}(\"\");\r\n        require(success, \"Withdrawal failed\");\r\n    }\r\n\r\n    // Function to update the fee multiplier\r\n    function updateFeeMultiplier(uint256 newMultiplier) external onlyOwner {\r\n        require(newMultiplier > 0, \"Multiplier must be greater than zero\");\r\n        multiplier = newMultiplier; // Update the multiplier\r\n    }\r\n\r\n    // Private function to perform the swap\r\n    function swapBack() private {\r\n        uint256 swapThreshold = swapTokensAtAmount * multiplier;\r\n        bool success;\r\n\r\n        if (balanceOf(address(this)) > swapTokensAtAmount * multiplier) {\r\n            swapThreshold = swapTokensAtAmount * multiplier;\r\n        }\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WETH;\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(swapThreshold, 0, path, address(this), block.timestamp);\r\n\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 0) {\r\n            uint256 ethForRev = (ethBalance * revFee) / 100;\r\n            uint256 ethForTeam = (ethBalance * teamFee) / 100;\r\n            uint256 ethForTreasury = ethBalance - ethForRev - ethForTeam;\r\n\r\n            (success, ) = address(teamAddress).call{value: ethForTeam}(\"\");\r\n            (success, ) = address(treasuryAddress).call{value: ethForTreasury}(\"\");\r\n            (success, ) = address(revAddress).call{value: ethForRev}(\"\");\r\n\r\n            emit SwapAndLiquify(swapThreshold, ethForTeam, ethForRev, ethForTreasury);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"teamETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TreasuryETH\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_RevFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_TreasuryFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_teamFee\",\"type\":\"uint8\"}],\"name\":\"setDistributionFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setExcludedFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_buyTotalFees\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_sellTotalFees\",\"type\":\"uint8\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTx\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxWallet\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingWagmix\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMultiplier\",\"type\":\"uint256\"}],\"name\":\"updateFeeMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateRevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Wagmix", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9198e0ff9b627c2fa0072e516bf8f554f3fd29b466b7195b680ca031b97f12e7"}