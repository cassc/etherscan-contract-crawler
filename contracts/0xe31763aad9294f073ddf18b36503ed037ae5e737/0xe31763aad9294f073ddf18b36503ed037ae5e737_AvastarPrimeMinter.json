{"SourceCode": "// File: contracts/AvastarTypes.sol\r\n\r\npragma solidity 0.5.14;\r\n\r\n/**\r\n * @title Avastar Data Types\r\n * @author Cliff Hall\r\n */\r\ncontract AvastarTypes {\r\n\r\n    enum Generation {\r\n        ONE,\r\n        TWO,\r\n        THREE,\r\n        FOUR,\r\n        FIVE\r\n    }\r\n\r\n    enum Series {\r\n        PROMO,\r\n        ONE,\r\n        TWO,\r\n        THREE,\r\n        FOUR,\r\n        FIVE\r\n    }\r\n\r\n    enum Wave {\r\n        PRIME,\r\n        REPLICANT\r\n    }\r\n\r\n    enum Gene {\r\n        SKIN_TONE,\r\n        HAIR_COLOR,\r\n        EYE_COLOR,\r\n        BG_COLOR,\r\n        BACKDROP,\r\n        EARS,\r\n        FACE,\r\n        NOSE,\r\n        MOUTH,\r\n        FACIAL_FEATURE,\r\n        EYES,\r\n        HAIR_STYLE\r\n    }\r\n\r\n    enum Gender {\r\n        ANY,\r\n        MALE,\r\n        FEMALE\r\n    }\r\n\r\n    enum Rarity {\r\n        COMMON,\r\n        UNCOMMON,\r\n        RARE,\r\n        EPIC,\r\n        LEGENDARY\r\n    }\r\n\r\n    struct Trait {\r\n        uint256 id;\r\n        Generation generation;\r\n        Gender gender;\r\n        Gene gene;\r\n        Rarity rarity;\r\n        uint8 variation;\r\n        Series[] series;\r\n        string name;\r\n        string svg;\r\n\r\n    }\r\n\r\n    struct Prime {\r\n        uint256 id;\r\n        uint256 serial;\r\n        uint256 traits;\r\n        bool[12] replicated;\r\n        Generation generation;\r\n        Series series;\r\n        Gender gender;\r\n        uint8 ranking;\r\n    }\r\n\r\n    struct Replicant {\r\n        uint256 id;\r\n        uint256 serial;\r\n        uint256 traits;\r\n        Generation generation;\r\n        Gender gender;\r\n        uint8 ranking;\r\n    }\r\n\r\n    struct Avastar {\r\n        uint256 id;\r\n        uint256 serial;\r\n        uint256 traits;\r\n        Generation generation;\r\n        Wave wave;\r\n    }\r\n\r\n    struct Attribution {\r\n        Generation generation;\r\n        string artist;\r\n        string infoURI;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/IAvastarTeleporter.sol\r\n\r\npragma solidity 0.5.14;\r\n\r\n\r\n/**\r\n * @title AvastarTeleporter Interface\r\n * @author Cliff Hall\r\n * @notice Declared as abstract contract rather than interface as it must inherit for enum types.\r\n * Used by AvastarMinter contract to interact with subset of AvastarTeleporter contract functions.\r\n */\r\ncontract IAvastarTeleporter is AvastarTypes {\r\n\r\n    /**\r\n     * @notice Acknowledge contract is `AvastarTeleporter`\r\n     * @return always true if the contract is in fact `AvastarTeleporter`\r\n     */\r\n    function isAvastarTeleporter() external pure returns (bool);\r\n\r\n    /**\r\n     * @notice Get token URI for a given Avastar Token ID.\r\n     * Reverts if given token id is not a valid Avastar Token ID.\r\n     * @param _tokenId the Token ID of a previously minted Avastar Prime or Replicant\r\n     * @return uri the off-chain URI to the JSON metadata for the given Avastar\r\n     */\r\n    function tokenURI(uint _tokenId)\r\n    external view\r\n    returns (string memory uri);\r\n\r\n    /**\r\n     * @notice Get an Avastar's Wave by token ID.\r\n     * @param _tokenId the token id of the given Avastar\r\n     * @return wave the Avastar's wave (Prime/Replicant)\r\n     */\r\n    function getAvastarWaveByTokenId(uint256 _tokenId)\r\n    external view\r\n    returns (Wave wave);\r\n\r\n    /**\r\n     * @notice Get the Avastar Prime metadata associated with a given Token ID.\r\n     * @param _tokenId the Token ID of the specified Prime\r\n     * @return tokenId the Prime's token ID\r\n     * @return serial the Prime's serial\r\n     * @return traits the Prime's trait hash\r\n     * @return generation the Prime's generation\r\n     * @return series the Prime's series\r\n     * @return gender the Prime's gender\r\n     * @return ranking the Prime's ranking\r\n     */\r\n    function getPrimeByTokenId(uint256 _tokenId)\r\n    external view\r\n    returns (\r\n        uint256 tokenId,\r\n        uint256 serial,\r\n        uint256 traits,\r\n        Generation generation,\r\n        Series series,\r\n        Gender gender,\r\n        uint8 ranking\r\n    );\r\n\r\n    /**\r\n     * @notice Get the Avastar Replicant metadata associated with a given Token ID\r\n     * @param _tokenId the token ID of the specified Replicant\r\n     * @return tokenId the Replicant's token ID\r\n     * @return serial the Replicant's serial\r\n     * @return traits the Replicant's trait hash\r\n     * @return generation the Replicant's generation\r\n     * @return gender the Replicant's gender\r\n     * @return ranking the Replicant's ranking\r\n     */\r\n    function getReplicantByTokenId(uint256 _tokenId)\r\n    external view\r\n    returns (\r\n        uint256 tokenId,\r\n        uint256 serial,\r\n        uint256 traits,\r\n        Generation generation,\r\n        Gender gender,\r\n        uint8 ranking\r\n    );\r\n\r\n    /**\r\n     * @notice Retrieve a Trait's info by ID.\r\n     * @param _traitId the ID of the Trait to retrieve\r\n     * @return id the ID of the trait\r\n     * @return generation generation of the trait\r\n     * @return series list of series the trait may appear in\r\n     * @return gender gender(s) the trait is valid for\r\n     * @return gene gene the trait belongs to\r\n     * @return variation variation of the gene the trait represents\r\n     * @return rarity the rarity level of this trait\r\n     * @return name name of the trait\r\n     */\r\n    function getTraitInfoById(uint256 _traitId)\r\n    external view\r\n    returns (\r\n        uint256 id,\r\n        Generation generation,\r\n        Series[] memory series,\r\n        Gender gender,\r\n        Gene gene,\r\n        Rarity rarity,\r\n        uint8 variation,\r\n        string memory name\r\n    );\r\n\r\n\r\n    /**\r\n     * @notice Retrieve a Trait's name by ID.\r\n     * @param _traitId the ID of the Trait to retrieve\r\n     * @return name name of the trait\r\n     */\r\n    function getTraitNameById(uint256 _traitId)\r\n    external view\r\n    returns (string memory name);\r\n\r\n    /**\r\n     * @notice Get Trait ID by Generation, Gene, and Variation.\r\n     * @param _generation the generation the trait belongs to\r\n     * @param _gene gene the trait belongs to\r\n     * @param _variation the variation of the gene\r\n     * @return traitId the ID of the specified trait\r\n     */\r\n    function getTraitIdByGenerationGeneAndVariation(\r\n        Generation _generation,\r\n        Gene _gene,\r\n        uint8 _variation\r\n    )\r\n    external view\r\n    returns (uint256 traitId);\r\n\r\n    /**\r\n     * @notice Get the artist Attribution for a given Generation, combined into a single string.\r\n     * @param _generation the generation to retrieve artist attribution for\r\n     * @return attribution a single string with the artist and artist info URI\r\n     */\r\n    function getAttributionByGeneration(Generation _generation)\r\n    external view\r\n    returns (\r\n        string memory attribution\r\n    );\r\n\r\n    /**\r\n     * @notice Mint an Avastar Prime\r\n     * Only invokable by minter role, when contract is not paused.\r\n     * If successful, emits a `NewPrime` event.\r\n     * @param _owner the address of the new Avastar's owner\r\n     * @param _traits the new Prime's trait hash\r\n     * @param _generation the new Prime's generation\r\n     * @return _series the new Prime's series\r\n     * @param _gender the new Prime's gender\r\n     * @param _ranking the new Prime's rarity ranking\r\n     * @return tokenId the newly minted Prime's token ID\r\n     * @return serial the newly minted Prime's serial\r\n     */\r\n    function mintPrime(\r\n        address _owner,\r\n        uint256 _traits,\r\n        Generation _generation,\r\n        Series _series,\r\n        Gender _gender,\r\n        uint8 _ranking\r\n    )\r\n    external\r\n    returns (uint256, uint256);\r\n\r\n    /**\r\n     * @notice Mint an Avastar Replicant.\r\n     * Only invokable by minter role, when contract is not paused.\r\n     * If successful, emits a `NewReplicant` event.\r\n     * @param _owner the address of the new Avastar's owner\r\n     * @param _traits the new Replicant's trait hash\r\n     * @param _generation the new Replicant's generation\r\n     * @param _gender the new Replicant's gender\r\n     * @param _ranking the new Replicant's rarity ranking\r\n     * @return tokenId the newly minted Replicant's token ID\r\n     * @return serial the newly minted Replicant's serial\r\n     */\r\n    function mintReplicant(\r\n        address _owner,\r\n        uint256 _traits,\r\n        Generation _generation,\r\n        Gender _gender,\r\n        uint8 _ranking\r\n    )\r\n    external\r\n    returns (uint256, uint256);\r\n\r\n    /**\r\n     * Gets the owner of the specified token ID.\r\n     * @param tokenId the token ID to search for the owner of\r\n     * @return owner the owner of the given token ID\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @notice Gets the total amount of tokens stored by the contract.\r\n     * @return count total number of tokens\r\n     */\r\n    function totalSupply() public view returns (uint256 count);\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/AccessControl.sol\r\n\r\npragma solidity 0.5.14;\r\n\r\n\r\n\r\n/**\r\n * @title Access Control\r\n * @author Cliff Hall\r\n * @notice Role-based access control and contract upgrade functionality.\r\n */\r\ncontract AccessControl {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint16;\r\n    using Roles for Roles.Role;\r\n\r\n    Roles.Role private admins;\r\n    Roles.Role private minters;\r\n    Roles.Role private owners;\r\n\r\n    /**\r\n     * @notice Sets `msg.sender` as system admin by default.\r\n     * Starts paused. System admin must unpause, and add other roles after deployment.\r\n     */\r\n    constructor() public {\r\n        admins.add(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Emitted when contract is paused by system administrator.\r\n     */\r\n    event ContractPaused();\r\n\r\n    /**\r\n     * @notice Emitted when contract is unpaused by system administrator.\r\n     */\r\n    event ContractUnpaused();\r\n\r\n    /**\r\n     * @notice Emitted when contract is upgraded by system administrator.\r\n     * @param newContract address of the new version of the contract.\r\n     */\r\n    event ContractUpgrade(address newContract);\r\n\r\n\r\n    bool public paused = true;\r\n    bool public upgraded = false;\r\n    address public newContractAddress;\r\n\r\n    /**\r\n     * @notice Modifier to scope access to minters\r\n     */\r\n    modifier onlyMinter() {\r\n        require(minters.has(msg.sender));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Modifier to scope access to owners\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owners.has(msg.sender));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Modifier to scope access to system administrators\r\n     */\r\n    modifier onlySysAdmin() {\r\n        require(admins.has(msg.sender));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Modifier to make a function callable only when the contract not upgraded.\r\n     */\r\n    modifier whenNotUpgraded() {\r\n        require(!upgraded);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Called by a system administrator to  mark the smart contract as upgraded,\r\n     * in case there is a serious breaking bug. This method stores the new contract\r\n     * address and emits an event to that effect. Clients of the contract should\r\n     * update to the new contract address upon receiving this event. This contract will\r\n     * remain paused indefinitely after such an upgrade.\r\n     * @param _newAddress address of new contract\r\n     */\r\n    function upgradeContract(address _newAddress) external onlySysAdmin whenPaused whenNotUpgraded {\r\n        require(_newAddress != address(0));\r\n        upgraded = true;\r\n        newContractAddress = _newAddress;\r\n        emit ContractUpgrade(_newAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Called by a system administrator to add a minter.\r\n     * Reverts if `_minterAddress` already has minter role\r\n     * @param _minterAddress approved minter\r\n     */\r\n    function addMinter(address _minterAddress) external onlySysAdmin {\r\n        minters.add(_minterAddress);\r\n        require(minters.has(_minterAddress));\r\n    }\r\n\r\n    /**\r\n     * @notice Called by a system administrator to add an owner.\r\n     * Reverts if `_ownerAddress` already has owner role\r\n     * @param _ownerAddress approved owner\r\n     * @return added boolean indicating whether the role was granted\r\n     */\r\n    function addOwner(address _ownerAddress) external onlySysAdmin {\r\n        owners.add(_ownerAddress);\r\n        require(owners.has(_ownerAddress));\r\n    }\r\n\r\n    /**\r\n     * @notice Called by a system administrator to add another system admin.\r\n     * Reverts if `_sysAdminAddress` already has sysAdmin role\r\n     * @param _sysAdminAddress approved owner\r\n     */\r\n    function addSysAdmin(address _sysAdminAddress) external onlySysAdmin {\r\n        admins.add(_sysAdminAddress);\r\n        require(admins.has(_sysAdminAddress));\r\n    }\r\n\r\n    /**\r\n     * @notice Called by an owner to remove all roles from an address.\r\n     * Reverts if address had no roles to be removed.\r\n     * @param _address address having its roles stripped\r\n     */\r\n    function stripRoles(address _address) external onlyOwner {\r\n        require(msg.sender != _address);\r\n        bool stripped = false;\r\n        if (admins.has(_address)) {\r\n            admins.remove(_address);\r\n            stripped = true;\r\n        }\r\n        if (minters.has(_address)) {\r\n            minters.remove(_address);\r\n            stripped = true;\r\n        }\r\n        if (owners.has(_address)) {\r\n            owners.remove(_address);\r\n            stripped = true;\r\n        }\r\n        require(stripped == true);\r\n    }\r\n\r\n    /**\r\n     * @notice Called by a system administrator to pause, triggers stopped state\r\n     */\r\n    function pause() external onlySysAdmin whenNotPaused {\r\n        paused = true;\r\n        emit ContractPaused();\r\n    }\r\n\r\n    /**\r\n     * @notice Called by a system administrator to un-pause, returns to normal state\r\n     */\r\n    function unpause() external onlySysAdmin whenPaused whenNotUpgraded {\r\n        paused = false;\r\n        emit ContractUnpaused();\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/AvastarPrimeMinter.sol\r\n\r\npragma solidity 0.5.14;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Avastar Prime Minter Proxy\r\n * @author Cliff Hall\r\n * @notice Mints Avastar Primes using the `AvastarTeleporter` contract on behalf of depositors.\r\n * Allows system admin to set current generation and series.\r\n * Manages accounting of depositor and franchise balances.\r\n */\r\ncontract AvastarPrimeMinter is AvastarTypes, AccessControl {\r\n\r\n    /**\r\n     * @notice Event emitted when the current Generation is changed\r\n     * @param currentGeneration the new value of currentGeneration\r\n     */\r\n    event CurrentGenerationSet(Generation currentGeneration);\r\n\r\n    /**\r\n     * @notice Event emitted when the current Series is changed\r\n     * @param currentSeries the new value of currentSeries\r\n     */\r\n    event CurrentSeriesSet(Series currentSeries);\r\n\r\n    /**\r\n     * @notice Event emitted when ETH is deposited or withdrawn by a depositor\r\n     * @param depositor the address who deposited or withdrew ETH\r\n     * @param balance the depositor's resulting ETH balance in the contract\r\n     */\r\n    event DepositorBalance(address indexed depositor, uint256 balance);\r\n\r\n    /**\r\n     * @notice Event emitted upon the withdrawal of the franchise's balance\r\n     * @param owner the contract owner\r\n     * @param amount total ETH withdrawn\r\n     */\r\n    event FranchiseBalanceWithdrawn(address indexed owner, uint256 amount);\r\n\r\n    /**\r\n     * @notice Event emitted when AvastarTeleporter contract is set\r\n     * @param contractAddress the address of the AvastarTeleporter contract\r\n     */\r\n    event TeleporterContractSet(address contractAddress);\r\n\r\n    /**\r\n     * @notice Address of the AvastarTeleporter contract\r\n     */\r\n    IAvastarTeleporter private teleporterContract ;\r\n\r\n    /**\r\n     * @notice The current Generation of Avastars being minted\r\n     */\r\n    Generation private currentGeneration;\r\n\r\n    /**\r\n     * @notice The current Series of Avastars being minted\r\n     */\r\n    Series private currentSeries;\r\n\r\n    /**\r\n     * @notice Track the deposits made by address\r\n     */\r\n    mapping (address => uint256) private depositsByAddress;\r\n\r\n    /**\r\n     * @notice Current total of unspent deposits by all depositors\r\n     */\r\n    uint256 private unspentDeposits;\r\n\r\n    /**\r\n     * @notice Set the address of the `AvastarTeleporter` contract.\r\n     * Only invokable by system admin role, when contract is paused and not upgraded.\r\n     * To be used if the Teleporter contract has to be upgraded and a new instance deployed.\r\n     * If successful, emits an `TeleporterContractSet` event.\r\n     * @param _address address of `AvastarTeleporter` contract\r\n     */\r\n    function setTeleporterContract(address _address) external onlySysAdmin whenPaused whenNotUpgraded {\r\n\r\n        // Cast the candidate contract to the IAvastarTeleporter interface\r\n        IAvastarTeleporter candidateContract = IAvastarTeleporter(_address);\r\n\r\n        // Verify that we have the appropriate address\r\n        require(candidateContract.isAvastarTeleporter());\r\n\r\n        // Set the contract address\r\n        teleporterContract = IAvastarTeleporter(_address);\r\n\r\n        // Emit the event\r\n        emit TeleporterContractSet(_address);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the Generation to be minted.\r\n     * Resets `currentSeries` to `Series.ONE`.\r\n     * Only invokable by system admin role, when contract is paused and not upgraded.\r\n     * Emits `GenerationSet` event with new value of `currentGeneration`.\r\n     * @param _generation the new value for currentGeneration\r\n     */\r\n    function setCurrentGeneration(Generation _generation) external onlySysAdmin whenPaused whenNotUpgraded {\r\n        currentGeneration = _generation;\r\n        emit CurrentGenerationSet(currentGeneration);\r\n        setCurrentSeries(Series.ONE);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the Series to be minted.\r\n     * Only invokable by system admin role, when contract is paused and not upgraded.\r\n     * Emits `CurrentSeriesSet` event with new value of `currentSeries`.\r\n     * @param _series the new value for currentSeries\r\n     */\r\n    function setCurrentSeries(Series _series) public onlySysAdmin whenPaused whenNotUpgraded {\r\n        currentSeries = _series;\r\n        emit CurrentSeriesSet(currentSeries);\r\n    }\r\n\r\n    /**\r\n     * @notice Allow owner to check the withdrawable franchise balance.\r\n     * Remaining balance must be enough for all unspent deposits to be withdrawn by depositors.\r\n     * Invokable only by owner role.\r\n     * @return franchiseBalance the available franchise balance\r\n     */\r\n    function checkFranchiseBalance() external view onlyOwner returns (uint256 franchiseBalance) {\r\n        return uint256(address(this).balance).sub(unspentDeposits);\r\n    }\r\n\r\n    /**\r\n     * @notice Allow an owner to withdraw the franchise balance.\r\n     * Invokable only by owner role.\r\n     * Entire franchise balance is transferred to `msg.sender`.\r\n     * If successful, emits `FranchiseBalanceWithdrawn` event with amount withdrawn.\r\n     * @return amountWithdrawn amount withdrawn\r\n     */\r\n    function withdrawFranchiseBalance() external onlyOwner returns (uint256 amountWithdrawn) {\r\n        uint256 franchiseBalance = uint256(address(this).balance).sub(unspentDeposits);\r\n        require(franchiseBalance > 0);\r\n        msg.sender.transfer(franchiseBalance);\r\n        emit FranchiseBalanceWithdrawn(msg.sender, franchiseBalance);\r\n        return franchiseBalance;\r\n    }\r\n\r\n    /**\r\n     * @notice Allow anyone to deposit ETH.\r\n     * Before contract will mint on behalf of a user, they must have sufficient ETH on deposit.\r\n     * Invokable by any address (other than 0) when contract is not paused.\r\n     * Must have a non-zero ETH value.\r\n     * If successful, emits a `DepositorBalance` event with depositor's resulting balance.\r\n     */\r\n    function deposit() external payable whenNotPaused {\r\n        require(msg.value > 0);\r\n        depositsByAddress[msg.sender] = depositsByAddress[msg.sender].add(msg.value);\r\n        unspentDeposits = unspentDeposits.add(msg.value);\r\n        emit DepositorBalance(msg.sender, depositsByAddress[msg.sender]);\r\n    }\r\n\r\n    /**\r\n     * @notice Allow anyone to check their deposit balance.\r\n     * Invokable by any address (other than 0).\r\n     * @return the depositor's current ETH balance in the contract\r\n     */\r\n    function checkDepositorBalance() external view returns (uint256){\r\n        return depositsByAddress[msg.sender];\r\n    }\r\n\r\n    /**\r\n     * @notice Allow a depositor with a balance to withdraw it.\r\n     * Invokable by any address (other than 0) with an ETH balance on deposit.\r\n     * Entire depositor balance is transferred to `msg.sender`.\r\n     * Emits `DepositorBalance` event of 0 amount once transfer is complete.\r\n     * @return amountWithdrawn amount withdrawn\r\n     */\r\n    function withdrawDepositorBalance() external returns (uint256 amountWithdrawn) {\r\n        uint256 depositorBalance = depositsByAddress[msg.sender];\r\n        require(depositorBalance > 0 && address(this).balance >= depositorBalance);\r\n        depositsByAddress[msg.sender] = 0;\r\n        unspentDeposits = unspentDeposits.sub(depositorBalance);\r\n        msg.sender.transfer(depositorBalance);\r\n        emit DepositorBalance(msg.sender, 0);\r\n        return depositorBalance;\r\n    }\r\n\r\n    /**\r\n     * @notice Mint an Avastar Prime for a purchaser who has previously deposited funds.\r\n     * Invokable only by minter role, when contract is not paused.\r\n     * Minted token will be owned by `_purchaser` address.\r\n     * If successful, emits a `DepositorBalance` event with the depositor's remaining balance,\r\n     * and the `AvastarTeleporter` contract will emit a `NewPrime` event.\r\n     * @param _purchaser address that will own the token\r\n     * @param _price price in ETH of token, removed from purchaser's deposit balance\r\n     * @param _traits the Avastar's Trait hash\r\n     * @param _gender the Avastar's Gender\r\n     * @param _ranking the Avastar's Ranking\r\n     * @return tokenId the Avastar's tokenId\r\n     * @return serial the Prime's serial\r\n     */\r\n    function purchasePrime(\r\n        address _purchaser,\r\n        uint256 _price,\r\n        uint256 _traits,\r\n        Gender _gender,\r\n        uint8 _ranking\r\n    )\r\n    external\r\n    onlyMinter\r\n    whenNotPaused\r\n    returns (uint256 tokenId, uint256 serial)\r\n    {\r\n        require(_purchaser != address(0));\r\n        require (depositsByAddress[_purchaser] >= _price);\r\n        require(_gender > Gender.ANY);\r\n        depositsByAddress[_purchaser] = depositsByAddress[_purchaser].sub(_price);\r\n        unspentDeposits = unspentDeposits.sub(_price);\r\n        (tokenId, serial) = teleporterContract.mintPrime(_purchaser, _traits, currentGeneration, currentSeries, _gender, _ranking);\r\n        emit DepositorBalance(_purchaser, depositsByAddress[_purchaser]);\r\n        return (tokenId, serial);\r\n    }\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum AvastarTypes.Generation\",\"name\":\"currentGeneration\",\"type\":\"uint8\"}],\"name\":\"CurrentGenerationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum AvastarTypes.Series\",\"name\":\"currentSeries\",\"type\":\"uint8\"}],\"name\":\"CurrentSeriesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"DepositorBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FranchiseBalanceWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"TeleporterContractSet\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minterAddress\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sysAdminAddress\",\"type\":\"address\"}],\"name\":\"addSysAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkDepositorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkFranchiseBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"franchiseBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_purchaser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_traits\",\"type\":\"uint256\"},{\"internalType\":\"enum AvastarTypes.Gender\",\"name\":\"_gender\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_ranking\",\"type\":\"uint8\"}],\"name\":\"purchasePrime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"serial\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"enum AvastarTypes.Generation\",\"name\":\"_generation\",\"type\":\"uint8\"}],\"name\":\"setCurrentGeneration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"enum AvastarTypes.Series\",\"name\":\"_series\",\"type\":\"uint8\"}],\"name\":\"setCurrentSeries\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTeleporterContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"stripRoles\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgraded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDepositorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFranchiseBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AvastarPrimeMinter", "CompilerVersion": "v0.5.14+commit.1f1aaa4", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://0865c58406e4019ec7edc3bf0670470649dd2b9678aed6ee1f5ba18dd05943f4"}