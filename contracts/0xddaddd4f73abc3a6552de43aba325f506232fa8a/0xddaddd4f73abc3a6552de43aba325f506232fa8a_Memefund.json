{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\nlibrary SafeMaths {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Memefund {\r\n\r\n    using SafeMaths for uint256;\r\n\r\n    address public rebaseOracle;       // Used for authentication\r\n    address public owner;              // Used for authentication\r\n    address public newOwner;\r\n\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    string public name;\r\n    string public symbol;\r\n\r\n    uint256 private constant MAX_UINT256 = ~uint256(0);   // (2^256) - 1\r\n    uint256 private constant MAXSUPPLY = ~uint128(0);  // (2^128) - 1\r\n\r\n    uint256 private totalAtoms;\r\n    uint256 private atomsPerMolecule;\r\n\r\n    mapping (address => uint256) private atomBalances;\r\n    mapping (address => mapping (address => uint256)) private allowedMolecules;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event LogRebase(uint256 _totalSupply);\r\n    event LogNewRebaseOracle(address _rebaseOracle);\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public\r\n    {\r\n        decimals = 9;                               // decimals  \r\n        totalSupply = 100000000*10**9;                // initialSupply\r\n        name = \"Memefund\";                         // Set the name for display purposes\r\n        symbol = \"MFUND\";                            // Set the symbol for display purposes\r\n\r\n        owner = msg.sender;\r\n        totalAtoms = MAX_UINT256 - (MAX_UINT256 % totalSupply);     // totalAtoms is a multiple of totalSupply so that atomsPerMolecule is an integer.\r\n        atomBalances[msg.sender] = totalAtoms;\r\n        atomsPerMolecule = totalAtoms.div(totalSupply);\r\n\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @param newRebaseOracle The address of the new oracle for rebasement (used for authentication).\r\n     */\r\n    function setRebaseOracle(address newRebaseOracle) external {\r\n        require(msg.sender == owner, \"Can only be executed by owner.\");\r\n        rebaseOracle = newRebaseOracle;\r\n\r\n        emit LogNewRebaseOracle(rebaseOracle);\r\n    }\r\n\r\n    /**\r\n     * @dev Propose a new owner.\r\n     * @param _newOwner The address of the new owner.\r\n     */\r\n    function transferOwnership(address _newOwner) public\r\n    {\r\n        require(msg.sender == owner, \"Can only be executed by owner.\");\r\n        require(_newOwner != address(0), \"0x00 address not allowed.\");\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Accept new owner.\r\n     */\r\n    function acceptOwnership() public\r\n    {\r\n        require(msg.sender == newOwner, \"Sender not authorized.\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Notifies Benchmark contract about a new rebase cycle.\r\n     * @param supplyDelta The number of new molecule tokens to add into or remove from circulation.\r\n     * @param increaseSupply Whether to increase or decrease the total supply.\r\n     * @return The total number of molecules after the supply adjustment.\r\n     */\r\n    function rebase(uint256 supplyDelta, bool increaseSupply) external returns (uint256) {\r\n        require(msg.sender == rebaseOracle, \"Can only be executed by rebaseOracle.\");\r\n        \r\n        if (supplyDelta == 0) {\r\n            emit LogRebase(totalSupply);\r\n            return totalSupply;\r\n        }\r\n\r\n        if (increaseSupply == true) {\r\n            totalSupply = totalSupply.add(supplyDelta);\r\n        } else {\r\n            totalSupply = totalSupply.sub(supplyDelta);\r\n        }\r\n\r\n        if (totalSupply > MAXSUPPLY) {\r\n            totalSupply = MAXSUPPLY;\r\n        }\r\n\r\n        atomsPerMolecule = totalAtoms.div(totalSupply);\r\n\r\n        emit LogRebase(totalSupply);\r\n        return totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @param who The address to query.\r\n     * @return The balance of the specified address.\r\n     */\r\n    function balanceOf(address who) public view returns (uint256) {\r\n        return atomBalances[who].div(atomsPerMolecule);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens to a specified address.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     * @return True on success, false otherwise.\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        require(to != address(0),\"Invalid address.\");\r\n        require(to != address(this),\"Molecules contract can't receive MARK.\");\r\n\r\n        uint256 atomValue = value.mul(atomsPerMolecule);\r\n\r\n        atomBalances[msg.sender] = atomBalances[msg.sender].sub(atomValue);\r\n        atomBalances[to] = atomBalances[to].add(atomValue);\r\n\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner has allowed to a spender.\r\n     * @param owner_ The address which owns the funds.\r\n     * @param spender The address which will spend the funds.\r\n     * @return The number of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner_, address spender) public view returns (uint256) {\r\n        return allowedMolecules[owner_][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * @param from The address you want to send tokens from.\r\n     * @param to The address you want to transfer to.\r\n     * @param value The amount of tokens to be transferred.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        require(to != address(0),\"Invalid address.\");\r\n        require(to != address(this),\"Molecules contract can't receive MARK.\");\r\n\r\n        allowedMolecules[from][msg.sender] = allowedMolecules[from][msg.sender].sub(value);\r\n\r\n        uint256 atomValue = value.mul(atomsPerMolecule);\r\n        atomBalances[from] = atomBalances[from].sub(atomValue);\r\n        atomBalances[to] = atomBalances[to].add(atomValue);\r\n        \r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of\r\n     * msg.sender. This method is included for ERC20 compatibility.\r\n     * IncreaseAllowance and decreaseAllowance should be used instead.\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        allowedMolecules[msg.sender][spender] = value;\r\n\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner has allowed to a spender.\r\n     * This method should be used instead of approve() to avoid the double approval vulnerability.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        allowedMolecules[msg.sender][spender] = allowedMolecules[msg.sender][spender].add(addedValue);\r\n\r\n        emit Approval(msg.sender, spender, allowedMolecules[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner has allowed to a spender.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        uint256 oldValue = allowedMolecules[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            allowedMolecules[msg.sender][spender] = 0;\r\n        } else {\r\n            allowedMolecules[msg.sender][spender] = oldValue.sub(subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, spender, allowedMolecules[msg.sender][spender]);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rebaseOracle\",\"type\":\"address\"}],\"name\":\"LogNewRebaseOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supplyDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"increaseSupply\",\"type\":\"bool\"}],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRebaseOracle\",\"type\":\"address\"}],\"name\":\"setRebaseOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Memefund", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://83aa968bece01e9e664a042bfdc067ca789bd72ed6fb18a15be667a007c7fca9"}