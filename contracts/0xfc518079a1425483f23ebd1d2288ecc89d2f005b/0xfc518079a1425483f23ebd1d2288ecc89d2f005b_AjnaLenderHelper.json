{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/AjnaLenderHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport \\\"@ajna-core/interfaces/pool/IPool.sol\\\";\\nimport { IPoolErrors } from '@ajna-core/interfaces/pool/commons/IPoolErrors.sol';\\nimport { \\n    _depositFeeRate, \\n    _priceAt\\n}                      from '@ajna-core/libraries/helpers/PoolHelper.sol';\\nimport { Buckets }     from '@ajna-core/libraries/internal/Buckets.sol';\\nimport { Maths }       from \\\"@ajna-core/libraries/internal/Maths.sol\\\";\\nimport { SafeERC20 }   from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 }      from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Math }        from '@openzeppelin/contracts/utils/math/Math.sol';\\n\\ncontract AjnaLenderHelper {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     *  @notice Smallest amount which would minimize rounding error is, inexplicably, greater than maxAmount specified.\\n     */\\n    error RoundedAmountExceededRequestedMaximum();\\n\\n    /**\\n     *  @notice Called by lenders to deposit into specified price bucket with protection against exchange rate manipulation.\\n     *  @param  pool_        Address of the pool in which quote token shall be added.\\n     *  @param  maxAmount_   The maximum amount of quote token lender wishes to add (`WAD` precision).\\n     *  @param  index_       The index of the bucket to which the quote tokens will be added.\\n     *  @param  expiry_      Timestamp after which this transaction will revert, preventing inclusion in a block with unfavorable price.\\n     *  @return bucketLP_    The amount of `LP` changed for the added quote tokens (`WAD` precision).\\n     *  @return addedAmount_ The amount of quote token added (`WAD` precision).\\n     */\\n    function addQuoteToken(\\n        address pool_,\\n        uint256 maxAmount_,\\n        uint256 index_,\\n        uint256 expiry_\\n    ) external returns (uint256 bucketLP_, uint256 addedAmount_) {\\n        IPool pool = IPool(pool_);\\n        uint256 amount = _adjustQuantity(index_, maxAmount_, true, pool);\\n\\n        // perform the deposit\\n        _transferQuoteTokenFrom(msg.sender, amount, pool);\\n        _approveForPool(pool, amount);\\n        (bucketLP_, addedAmount_) = pool.addQuoteToken(amount, index_, expiry_);\\n\\n        // set LP allowances\\n        uint256[] memory buckets = new uint256[](1);\\n        buckets[0] = index_;\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = amount;\\n        pool.increaseLPAllowance(address(msg.sender), buckets, amounts);\\n\\n        // return LP to msg.sender\\n        pool.transferLP(address(this), msg.sender, buckets);\\n    }\\n\\n    /**\\n     *  @notice Called by lenders to move an amount of credit from a specified price bucket to another specified price bucket with protection against exchange rate manipulation.\\n     *  @param  pool_         Address of the pool in which liquidity shall be moved.\\n     *  @param  maxAmount_    The maximum amount of quote token to be moved by a lender (`WAD` precision).\\n     *  @param  fromIndex_    The bucket index from which the quote tokens will be removed.\\n     *  @param  toIndex_      The bucket index to which the quote tokens will be added.\\n     *  @param  expiry_       Timestamp after which this transaction will revert, preventing inclusion in a block with unfavorable price.\\n     *  @return fromBucketRedeemedLP_ The amount of `LP` moved out from bucket (`WAD` precision).\\n     *  @return toBucketAwardedLP_    The amount of `LP` moved to destination bucket (`WAD` precision).\\n     *  @return movedAmount_          The amount of quote token moved (`WAD` precision).\\n     */\\n    function moveQuoteToken(\\n        address pool_,\\n        uint256 maxAmount_,\\n        uint256 fromIndex_,\\n        uint256 toIndex_,\\n        uint256 expiry_\\n    ) external returns (uint256 fromBucketRedeemedLP_, uint256 toBucketAwardedLP_, uint256 movedAmount_) {\\n        IPool pool = IPool(pool_);\\n\\n        // limit the move amount based on deposit available for lender to withdraw after interest accrual\\n        pool.updateInterest();\\n        (uint256 lenderLP, ) = pool.lenderInfo(fromIndex_, address(msg.sender));\\n        uint256 amount = Maths.min(maxAmount_, _lpToQuoteToken(fromIndex_, lenderLP, pool));\\n        amount = _adjustQuantity(toIndex_, amount, fromIndex_ < toIndex_, pool);\\n\\n        // transfer lender's LP to helper\\n        uint256[] memory buckets = new uint256[](1);\\n        buckets[0] = fromIndex_;\\n        pool.transferLP(msg.sender, address(this), buckets);\\n\\n        // move the liquidity\\n        (fromBucketRedeemedLP_, toBucketAwardedLP_, movedAmount_) = pool.moveQuoteToken(amount, fromIndex_, toIndex_, expiry_);\\n\\n        // transfer any remaining LP in fromBucket back to lender\\n        uint256[] memory amounts = new uint256[](1);\\n        (amounts[0], ) = pool.lenderInfo(fromIndex_, address(this));\\n        if (amounts[0] != 0) {\\n            pool.increaseLPAllowance(address(msg.sender), buckets, amounts);\\n            pool.transferLP(address(this), msg.sender, buckets);\\n        }\\n\\n        // transfer LP in toBucket back to lender\\n        amounts[0] = toBucketAwardedLP_;\\n        buckets[0] = toIndex_;\\n        pool.increaseLPAllowance(address(msg.sender), buckets, amounts);\\n        pool.transferLP(address(this), msg.sender, buckets);\\n    }\\n\\n    /**\\n     *  @notice Called implicitly by addQuoteToken to allow pool to spend the helper's quote token if needed.\\n     *  @param  pool_              Pool lender wishes to interact with through the helper.\\n     *  @param  allowanceRequired_ If current allowance lower than this amount, token approval will be performed.\\n     */\\n    function _approveForPool(IPool pool_, uint256 allowanceRequired_) internal {\\n        IERC20 token = IERC20(pool_.quoteTokenAddress());\\n        if (token.allowance(address(this), address(pool_)) < allowanceRequired_)\\n        {   // If approval insufficient, run a blanket approval for helper.\\n            // This saves gas for subsequent lenders using the helper.\\n            token.approve(address(pool_), type(uint256).max);\\n        }\\n    }\\n\\n    /**\\n     *  @notice Pulls quote token from lender into this helper contract.\\n     *  @param  from_   Address of the lender from which quote token shall be transferred.\\n     *  @param  amount_ Amount of quote token to transfer to helper.\\n     *  @param  pool_   Pool used to identify quote token scale and address.\\n     */\\n    function _transferQuoteTokenFrom(address from_, uint256 amount_, IPool pool_) internal {\\n        uint256 transferAmount = Maths.ceilDiv(amount_, pool_.quoteTokenScale());\\n        IERC20(pool_.quoteTokenAddress()).safeTransferFrom(from_, address(this), transferAmount);\\n    }\\n\\n    /**\\n     *  @notice Converts LP balance to quote token amount, limiting by deposit in bucket.\\n     *  @param  index_    Identifies the bucket.\\n     *  @param  lpAmount_ Lender's LP balance in the bucket.\\n     *  @param  pool_     Pool in which the bucket resides.\\n     *  @return quoteAmount_ The exact amount of quote tokens that can be exchanged for the given `LP`, `WAD` units.\\n     */\\n    function _lpToQuoteToken(uint256 index_, uint256 lpAmount_, IPool pool_) internal view returns (uint256 quoteAmount_) {\\n        (uint256 bucketLP, uint256 bucketCollateral , , uint256 bucketDeposit, ) = pool_.bucketInfo(index_);\\n        quoteAmount_ = Buckets.lpToQuoteTokens(\\n            bucketCollateral,\\n            bucketLP,\\n            bucketDeposit,\\n            lpAmount_,\\n            _priceAt(index_),\\n            Math.Rounding.Down\\n        );\\n\\n        if (quoteAmount_ > bucketDeposit) quoteAmount_ = bucketDeposit;\\n    }\\n\\n    /**\\n     *  @notice Adjusts deposit quantity to minimize rounding error.\\n     *  @param  index_           Identifies the bucket.\\n     *  @param  maxAmount_       The maximum amount of quote token to be deposited or moved by a lender (`WAD` precision).\\n     *  @param  applyDepositFee_ True if moving quote token to a higher-priced bucket, otherwise false.\\n     *  @param  pool_            Pool in which quote token is being added/moved.\\n     *  @return amount_ The adjusted amount, in `WAD` units.\\n     */\\n    function _adjustQuantity(uint256 index_, uint256 maxAmount_, bool applyDepositFee_, IPool pool_) internal view returns (uint256 amount_) {\\n        (uint256 bucketLP, uint256 collateral, , uint256 quoteTokens, ) = pool_.bucketInfo(index_);\\n        if (bucketLP == 0) return maxAmount_;\\n\\n        /**\\n            When adding quote token to a bucket, the amount of LP actually recieved is rounded down against the user.\\n            The user is awarded (qty * lps) / (deposit * WAD + collateral * price) LP tokens.\\n            So, we should try to ensure (qty * lps) is as close to a multiple of (deposit * WAD + collateral * price) as possible, while exceeding it.\\n            To choose x<a such that x * b /c close to a multiple of c, set x = [a * b / c * c - 1] / b + 1.  But note that c/b = (deposit * WAD + collateral * price) / lps is the exchange rate.\\n            An additional wrinkle is introduced by the deposit fee factor, which we first scale the quantity down and then up.\\n        **/\\n\\n        uint256 exchangeRate = Buckets.getExchangeRate(collateral, bucketLP, quoteTokens, _priceAt(index_));\\n\\n        if (applyDepositFee_) {\\n            (uint256 interestRate, ) = pool_.interestRateInfo();\\n            uint256 depositFeeFactor = Maths.WAD - _depositFeeRate(interestRate);\\n\\n            // exact amount that would be passed into quoteTokensToLPs, so want to match it's awarded LPs\\n            uint256 postFeeMaxAmount = Maths.wmul(maxAmount_, depositFeeFactor);\\n            // revert if adding quote tokens are not sufficient to get even 1 LP token\\n            if (postFeeMaxAmount * 1e18 <= exchangeRate) revert IPoolErrors.InsufficientLP();\\n            uint256 denominator = quoteTokens * Maths.WAD + collateral * _priceAt(index_);\\n\\n            // calculate the smallest amount we could pass in with same resulting LPs as postFeeMaxAmount\\n            uint256 minAmountWithSameLPs = ((postFeeMaxAmount * bucketLP * Maths.WAD - 1) / denominator * denominator) / (bucketLP * Maths.WAD) + 1;\\n\\n            // this should be an amount <= maxAmount that gives minAmountWithSameLPs after wmul with depositFeeFactor\\n            amount_ = Maths.min(maxAmount_, Maths.ceilWdiv(minAmountWithSameLPs, depositFeeFactor));\\n\\n            // backup revert... should never happen\\n            if(Maths.wmul(amount_, depositFeeFactor) < minAmountWithSameLPs) revert RoundedAmountExceededRequestedMaximum();\\n        } else {\\n            // revert if adding quote tokens are not sufficient to get even 1 LP token\\n            if (maxAmount_ * 1e18 <= exchangeRate) revert IPoolErrors.InsufficientLP();\\n            uint256 denominator = quoteTokens * Maths.WAD + collateral * _priceAt(index_);\\n\\n            // calculate the smallest amount we could pass in with same resulting LPs as postFeeMaxAmount\\n            amount_ = ((maxAmount_ * bucketLP * Maths.WAD - 1) / denominator * denominator) / (bucketLP * Maths.WAD) + 1;\\n\\n            // backup revert... should never happen\\n            if(maxAmount_ < amount_) revert RoundedAmountExceededRequestedMaximum();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/ajna-core/src/interfaces/pool/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport { IPoolBorrowerActions } from './commons/IPoolBorrowerActions.sol';\\nimport { IPoolLPActions }       from './commons/IPoolLPActions.sol';\\nimport { IPoolLenderActions }   from './commons/IPoolLenderActions.sol';\\nimport { IPoolKickerActions }   from './commons/IPoolKickerActions.sol';\\nimport { IPoolTakerActions }    from './commons/IPoolTakerActions.sol';\\nimport { IPoolSettlerActions }  from './commons/IPoolSettlerActions.sol';\\n\\nimport { IPoolImmutables }      from './commons/IPoolImmutables.sol';\\nimport { IPoolState }           from './commons/IPoolState.sol';\\nimport { IPoolDerivedState }    from './commons/IPoolDerivedState.sol';\\nimport { IPoolEvents }          from './commons/IPoolEvents.sol';\\nimport { IPoolErrors }          from './commons/IPoolErrors.sol';\\nimport { IERC3156FlashLender }  from './IERC3156FlashLender.sol';\\n\\n/**\\n * @title Base Pool Interface\\n */\\ninterface IPool is\\n    IPoolBorrowerActions,\\n    IPoolLPActions,\\n    IPoolLenderActions,\\n    IPoolKickerActions,\\n    IPoolTakerActions,\\n    IPoolSettlerActions,\\n    IPoolImmutables,\\n    IPoolState,\\n    IPoolDerivedState,\\n    IPoolEvents,\\n    IPoolErrors,\\n    IERC3156FlashLender\\n{\\n\\n}\\n\\n/// @dev Pool type enum - `ERC20` and `ERC721`\\nenum PoolType { ERC20, ERC721 }\\n\\n/// @dev `ERC20` token interface.\\ninterface IERC20Token {\\n    function balanceOf(address account) external view returns (uint256);\\n    function burn(uint256 amount) external;\\n    function decimals() external view returns (uint8);\\n}\\n\\n/// @dev `ERC721` token interface.\\ninterface IERC721Token {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/ajna-core/src/interfaces/pool/commons/IPoolErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Pool Errors.\\n */\\ninterface IPoolErrors {\\n    /**************************/\\n    /*** Common Pool Errors ***/\\n    /**************************/\\n\\n    /**\\n     *  @notice Adding liquidity above current auction price.\\n     */\\n    error AddAboveAuctionPrice();\\n\\n    /**\\n     *  @notice The action cannot be executed on an active auction.\\n     */\\n    error AuctionActive();\\n\\n    /**\\n     *  @notice Attempted auction to clear doesn't meet conditions.\\n     */\\n    error AuctionNotClearable();\\n\\n    /**\\n     *  @notice Auction does not meet requirements to take liquidity.\\n     */\\n    error AuctionNotTakeable();\\n\\n    /**\\n     *  @notice Head auction should be cleared prior of executing this action.\\n     */\\n    error AuctionNotCleared();\\n\\n    /**\\n     *  @notice The auction price is greater than the arbed bucket price.\\n     */\\n    error AuctionPriceGtBucketPrice();\\n\\n    /**\\n     *  @notice Pool already initialized.\\n     */\\n    error AlreadyInitialized();\\n\\n    /**\\n     *  @notice Borrower is attempting to create or modify a loan such that their loan's quote token would be less than the pool's minimum debt amount.\\n     */\\n    error AmountLTMinDebt();\\n\\n    /**\\n     *  @notice Recipient of borrowed quote tokens doesn't match the caller of the `drawDebt` function.\\n     */\\n    error BorrowerNotSender();\\n\\n    /**\\n     *  @notice Borrower has a healthy over-collateralized position.\\n     */\\n    error BorrowerOk();\\n\\n    /**\\n     *  @notice Borrower is attempting to borrow more quote token than they have collateral for.\\n     */\\n    error BorrowerUnderCollateralized();\\n\\n    /**\\n     *  @notice Operation cannot be executed in the same block when bucket becomes insolvent.\\n     */\\n    error BucketBankruptcyBlock();\\n\\n    /**\\n     *  @notice User attempted to merge collateral from a lower price bucket into a higher price bucket.\\n     */\\n    error CannotMergeToHigherPrice();\\n\\n    /**\\n     *  @notice User attempted an operation which does not exceed the dust amount, or leaves behind less than the dust amount.\\n     */\\n    error DustAmountNotExceeded();\\n\\n    /**\\n     *  @notice Callback invoked by `flashLoan` function did not return the expected hash (see `ERC-3156` spec).\\n     */\\n    error FlashloanCallbackFailed();\\n\\n    /**\\n     *  @notice Balance of pool contract before flashloan is different than the balance after flashloan.\\n     */\\n    error FlashloanIncorrectBalance();\\n\\n    /**\\n     *  @notice Pool cannot facilitate a flashloan for the specified token address.\\n     */\\n    error FlashloanUnavailableForToken();\\n\\n    /**\\n     *  @notice User is attempting to move or pull more collateral than is available.\\n     */\\n    error InsufficientCollateral();\\n\\n    /**\\n     *  @notice Lender is attempting to move or remove more collateral they have claim to in the bucket.\\n     *  @notice Lender is attempting to remove more collateral they have claim to in the bucket.\\n     *  @notice Lender must have enough `LP` to claim the desired amount of quote from the bucket.\\n     */\\n    error InsufficientLP();\\n\\n    /**\\n     *  @notice Bucket must have more quote available in the bucket than the lender is attempting to claim.\\n     */\\n    error InsufficientLiquidity();\\n\\n    /**\\n     *  @notice When increasing / decreasing `LP` allowances indexes and amounts arrays parameters should have same length.\\n     */\\n    error InvalidAllowancesInput();\\n\\n    /**\\n     *  @notice When transferring `LP` between indices, the new index must be a valid index.\\n     */\\n    error InvalidIndex();\\n\\n    /**\\n     *  @notice The amount used for performed action should be greater than `0`.\\n     */\\n    error InvalidAmount();\\n\\n    /**\\n     *  @notice Borrower is attempting to borrow more quote token than is available before the supplied `limitIndex`.\\n     */\\n    error LimitIndexExceeded();\\n\\n    /**\\n     *  @notice When moving quote token `HTP` must stay below `LUP`.\\n     *  @notice When removing quote token `HTP` must stay below `LUP`.\\n     */\\n    error LUPBelowHTP();\\n\\n    /**\\n     *  @notice From index and to index arguments to move are the same.\\n     */\\n    error MoveToSameIndex();\\n\\n    /**\\n     *  @notice Owner of the `LP` must have approved the new owner prior to transfer.\\n     */\\n    error NoAllowance();\\n\\n    /**\\n     *  @notice Actor is attempting to take or clear an inactive auction.\\n     */\\n    error NoAuction();\\n\\n    /**\\n     *  @notice No pool reserves are claimable.\\n     */\\n    error NoReserves();\\n\\n    /**\\n     *  @notice Actor is attempting to take or clear an inactive reserves auction.\\n     */\\n    error NoReservesAuction();\\n\\n    /**\\n     *  @notice Lender must have non-zero `LP` when attemptign to remove quote token from the pool.\\n     */\\n    error NoClaim();\\n\\n    /**\\n     *  @notice Borrower has no debt to liquidate.\\n     *  @notice Borrower is attempting to repay when they have no outstanding debt.\\n     */\\n    error NoDebt();\\n\\n    /**\\n     *  @notice Actor is attempting to kick with bucket price below the `LUP`.\\n     */\\n    error PriceBelowLUP();\\n\\n    /**\\n     *  @notice Lender is attempting to remove quote tokens from a bucket that exists above active auction debt from top-of-book downward.\\n     */\\n    error RemoveDepositLockedByAuctionDebt();\\n\\n    /**\\n     * @notice User attempted to kick off a new auction less than `2` weeks since the last auction completed.\\n     */\\n    error ReserveAuctionTooSoon();\\n\\n    /**\\n     *  @notice Current block timestamp has reached or exceeded a user-provided expiration.\\n     */\\n    error TransactionExpired();\\n\\n    /**\\n     *  @notice The address that transfer `LP` is not approved by the `LP` receiving address.\\n     */\\n    error TransferorNotApproved();\\n\\n    /**\\n     *  @notice Owner of the `LP` attemps to transfer `LP` to same address.\\n     */\\n    error TransferToSameOwner();\\n\\n    /**\\n     *  @notice The DebtToCollateral of the loan to be inserted in loans heap is zero.\\n     */\\n    error ZeroDebtToCollateral();\\n\\n}\\n\"\r\n    },\r\n    \"lib/ajna-core/src/libraries/helpers/PoolHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.18;\\n\\nimport { PRBMathSD59x18 } from \\\"@prb-math/contracts/PRBMathSD59x18.sol\\\";\\nimport { Math }           from '@openzeppelin/contracts/utils/math/Math.sol';\\nimport { SafeCast }       from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { PoolType }                 from '../../interfaces/pool/IPool.sol';\\nimport { InflatorState, PoolState } from '../../interfaces/pool/commons/IPoolState.sol';\\n\\nimport { Buckets } from '../internal/Buckets.sol';\\nimport { Maths }   from '../internal/Maths.sol';\\n\\n    error BucketIndexOutOfBounds();\\n    error BucketPriceOutOfBounds();\\n\\n    /*************************/\\n    /*** Price Conversions ***/\\n    /*************************/\\n\\n    /// @dev constant price indices defining the min and max of the potential price range\\n    int256  constant MAX_BUCKET_INDEX  =  4_156;\\n    int256  constant MIN_BUCKET_INDEX  = -3_232;\\n    uint256 constant MAX_FENWICK_INDEX =  7_388;\\n\\n    uint256 constant MIN_PRICE = 99_836_282_890;\\n    uint256 constant MAX_PRICE = 1_004_968_987.606512354182109771 * 1e18;\\n\\n    uint256 constant MAX_INFLATED_PRICE = 50_248_449_380.325617709105488550 * 1e18; // 50 * MAX_PRICE\\n\\n    /// @dev deposit buffer (extra margin) used for calculating reserves\\n    uint256 constant DEPOSIT_BUFFER = 1.000000001 * 1e18;\\n\\n    /// @dev step amounts in basis points. This is a constant across pools at `0.005`, achieved by dividing `WAD` by `10,000`\\n    int256 constant FLOAT_STEP_INT = 1.005 * 1e18;\\n\\n    /// @dev collateralization factor used to calculate borrrower HTP/TP/collateralization.\\n    uint256 constant COLLATERALIZATION_FACTOR = 1.04 * 1e18;\\n\\n    /**\\n     *  @notice Calculates the price (`WAD` precision) for a given `Fenwick` index.\\n     *  @dev    Reverts with `BucketIndexOutOfBounds` if index exceeds maximum constant.\\n     *  @dev    Uses fixed-point math to get around lack of floating point numbers in `EVM`.\\n     *  @dev    Fenwick index is converted to bucket index.\\n     *  @dev    Fenwick index to bucket index conversion:\\n     *  @dev      `1.00`      : bucket index `0`,     fenwick index `4156`: `7388-4156-3232=0`.\\n     *  @dev      `MAX_PRICE` : bucket index `4156`,  fenwick index `0`:    `7388-0-3232=4156`.\\n     *  @dev      `MIN_PRICE` : bucket index - `3232`, fenwick index `7388`: `7388-7388-3232=-3232`.\\n     *  @dev    `V1`: `price = MIN_PRICE + (FLOAT_STEP * index)`\\n     *  @dev    `V2`: `price = MAX_PRICE * (FLOAT_STEP ** (abs(int256(index - MAX_PRICE_INDEX))));`\\n     *  @dev    `V3 (final)`: `x^y = 2^(y*log_2(x))`\\n     */\\n    function _priceAt(\\n        uint256 index_\\n    ) pure returns (uint256) {\\n        // Lowest Fenwick index is highest price, so invert the index and offset by highest bucket index.\\n        int256 bucketIndex = MAX_BUCKET_INDEX - int256(index_);\\n        if (bucketIndex < MIN_BUCKET_INDEX || bucketIndex > MAX_BUCKET_INDEX) revert BucketIndexOutOfBounds();\\n\\n        return uint256(\\n            PRBMathSD59x18.exp2(\\n                PRBMathSD59x18.mul(\\n                    PRBMathSD59x18.fromInt(bucketIndex),\\n                    PRBMathSD59x18.log2(FLOAT_STEP_INT)\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     *  @notice Calculates the  Fenwick  index for a given price.\\n     *  @dev    Reverts with `BucketPriceOutOfBounds` if price exceeds maximum constant.\\n     *  @dev    Price expected to be inputted as a `WAD` (`18` decimal).\\n     *  @dev    `V1`: `bucket index = (price - MIN_PRICE) / FLOAT_STEP`\\n     *  @dev    `V2`: `bucket index = (log(FLOAT_STEP) * price) /  MAX_PRICE`\\n     *  @dev    `V3 (final)`: `bucket index =  log_2(price) / log_2(FLOAT_STEP)`\\n     *  @dev    `Fenwick index = 7388 - bucket index + 3232`\\n     */\\n    function _indexOf(\\n        uint256 price_\\n    ) pure returns (uint256) {\\n        if (price_ < MIN_PRICE || price_ > MAX_PRICE) revert BucketPriceOutOfBounds();\\n\\n        int256 index = PRBMathSD59x18.div(\\n            PRBMathSD59x18.log2(int256(price_)),\\n            PRBMathSD59x18.log2(FLOAT_STEP_INT)\\n        );\\n\\n        int256 ceilIndex = PRBMathSD59x18.ceil(index);\\n        if (index < 0 && ceilIndex - index > 0.5 * 1e18) {\\n            return uint256(4157 - PRBMathSD59x18.toInt(ceilIndex));\\n        }\\n        return uint256(4156 - PRBMathSD59x18.toInt(ceilIndex));\\n    }\\n\\n    /**********************/\\n    /*** Pool Utilities ***/\\n    /**********************/\\n\\n    /**\\n     *  @notice Calculates the minimum debt amount that can be borrowed or can remain in a loan in pool.\\n     *  @param  debt_          The debt amount to calculate minimum debt amount for.\\n     *  @param  loansCount_    The number of loans in pool.\\n     *  @return minDebtAmount_ Minimum debt amount value of the pool.\\n     */\\n    function _minDebtAmount(\\n        uint256 debt_,\\n        uint256 loansCount_\\n    ) pure returns (uint256 minDebtAmount_) {\\n        if (loansCount_ != 0) {\\n            minDebtAmount_ = Maths.wdiv(Maths.wdiv(debt_, Maths.wad(loansCount_)), 10**19);\\n        }\\n    }\\n\\n    /**\\n     *  @notice Calculates origination fee for a given interest rate.\\n     *  @notice Calculated as greater of the current annualized interest rate divided by `52` (one week of interest) or `5` bps.\\n     *  @param  interestRate_ The current interest rate.\\n     *  @return Fee rate based upon the given interest rate.\\n     */\\n    function _borrowFeeRate(\\n        uint256 interestRate_\\n    ) pure returns (uint256) {\\n        // greater of the current annualized interest rate divided by 52 (one week of interest) or 5 bps\\n        return Maths.max(Maths.wdiv(interestRate_, 52 * 1e18), 0.0005 * 1e18);\\n    }\\n\\n    /**\\n     * @notice Calculates the unutilized deposit fee, charged to lenders who deposit below the `LUP`.\\n     * @param  interestRate_ The current interest rate.\\n     * @return Fee rate based upon the given interest rate\\n     */\\n    function _depositFeeRate(\\n        uint256 interestRate_\\n    ) pure returns (uint256) {\\n        // current annualized rate divided by 365 * 3 (8 hours of interest)\\n        return Maths.wdiv(interestRate_, 365 * 3e18);\\n    }\\n\\n    /**\\n     * @notice Determines how the inflator state should be updated\\n     * @param  poolState_     State of the pool after updateInterestState was called.\\n     * @param  inflatorState_ Old inflator state.\\n     * @return newInflator_     New inflator value.\\n     * @return updateTimestamp_ `True` if timestamp of last update should be updated.\\n     */\\n    function _determineInflatorState(\\n        PoolState memory poolState_,\\n        InflatorState memory inflatorState_\\n    ) view returns (uint208 newInflator_, bool updateTimestamp_) {\\n        newInflator_ = inflatorState_.inflator;\\n\\n        // update pool inflator\\n        if (poolState_.isNewInterestAccrued) {\\n            newInflator_     = SafeCast.toUint208(poolState_.inflator);\\n            updateTimestamp_ = true;\\n        // if the debt in the current pool state is 0, also update the inflator and inflatorUpdate fields in inflatorState\\n        // slither-disable-next-line incorrect-equality\\n        } else if (poolState_.debt == 0) {\\n            newInflator_     = SafeCast.toUint208(Maths.WAD);\\n            updateTimestamp_ = true;\\n        // if the first loan has just been drawn, update the inflator timestamp\\n        // slither-disable-next-line incorrect-equality\\n        } else if (inflatorState_.inflator == Maths.WAD && inflatorState_.inflatorUpdate != block.timestamp){\\n            updateTimestamp_ = true;\\n        }\\n    }\\n\\n    /**\\n     *  @notice Calculates `HTP` price.\\n     *  @param  maxT0DebtToCollateral_ Max t0 debt to collateral in pool.\\n     *  @param  inflator_              Pool's inflator.\\n     */\\n    function _htp(\\n        uint256 maxT0DebtToCollateral_,\\n        uint256 inflator_\\n    ) pure returns (uint256) {\\n        return Maths.wmul(\\n            Maths.wmul(maxT0DebtToCollateral_, inflator_),\\n            COLLATERALIZATION_FACTOR\\n        );\\n    }\\n\\n    /**\\n     *  @notice Calculates debt-weighted average threshold price.\\n     *  @param  t0Debt_              Pool debt owed by borrowers in `t0` terms.\\n     *  @param  inflator_            Pool's borrower inflator.\\n     *  @param  t0Debt2ToCollateral_ `t0-debt-squared-to-collateral` accumulator. \\n     */\\n    function _dwatp(\\n        uint256 t0Debt_,\\n        uint256 inflator_,\\n        uint256 t0Debt2ToCollateral_\\n    ) pure returns (uint256) {\\n        return t0Debt_ == 0 ? 0 : Maths.wdiv(\\n            Maths.wmul(\\n                Maths.wmul(inflator_, t0Debt2ToCollateral_),\\n                COLLATERALIZATION_FACTOR\\n            ),\\n            t0Debt_\\n        );\\n    }\\n\\n    /**\\n     *  @notice Collateralization calculation.\\n     *  @param debt_       Debt to calculate collateralization for.\\n     *  @param collateral_ Collateral to calculate collateralization for.\\n     *  @param price_      Price to calculate collateralization for.\\n     *  @param type_       Type of the pool.\\n     *  @return `True` if value of collateral exceeds or equals debt.\\n     */\\n    function _isCollateralized(\\n        uint256 debt_,\\n        uint256 collateral_,\\n        uint256 price_,\\n        uint8 type_\\n    ) pure returns (bool) {\\n        // `False` if LUP = MIN_PRICE unless there is no debt\\n        if (price_ == MIN_PRICE && debt_ != 0) return false;\\n\\n        // Use collateral floor for NFT pools\\n        if (type_ == uint8(PoolType.ERC721)) {\\n            //slither-disable-next-line divide-before-multiply\\n            collateral_ = (collateral_ / Maths.WAD) * Maths.WAD; // use collateral floor\\n        }\\n        \\n        return Maths.wmul(collateral_, price_) >= Maths.wmul(COLLATERALIZATION_FACTOR, debt_);\\n    }\\n\\n    /**\\n     *  @notice Price precision adjustment used in calculating collateral dust for a bucket.\\n     *          To ensure the accuracy of the exchange rate calculation, buckets with smaller prices require\\n     *          larger minimum amounts of collateral.  This formula imposes a lower bound independent of token scale.\\n     *  @param  bucketIndex_              Index of the bucket, or `0` for encumbered collateral with no bucket affinity.\\n     *  @return pricePrecisionAdjustment_ Unscaled integer of the minimum number of decimal places the dust limit requires.\\n     */\\n    function _getCollateralDustPricePrecisionAdjustment(\\n        uint256 bucketIndex_\\n    ) pure returns (uint256 pricePrecisionAdjustment_) {\\n        // conditional is a gas optimization\\n        if (bucketIndex_ > 3900) {\\n            int256 bucketOffset = int256(bucketIndex_ - 3900);\\n            int256 result = PRBMathSD59x18.sqrt(PRBMathSD59x18.div(bucketOffset * 1e18, int256(36 * 1e18)));\\n            pricePrecisionAdjustment_ = uint256(result / 1e18);\\n        }\\n    }\\n\\n    /**\\n     *  @notice Returns the amount of collateral calculated for the given amount of `LP`.\\n     *  @dev    The value returned is capped at collateral amount available in bucket.\\n     *  @param  bucketCollateral_ Amount of collateral in bucket.\\n     *  @param  bucketLP_         Amount of `LP` in bucket.\\n     *  @param  deposit_          Current bucket deposit (quote tokens). Used to calculate bucket's exchange rate / `LP`.\\n     *  @param  lenderLPBalance_  The amount of `LP` to calculate collateral for.\\n     *  @param  bucketPrice_      Bucket's price.\\n     *  @return collateralAmount_ Amount of collateral calculated for the given `LP `amount.\\n     */\\n    function _lpToCollateral(\\n        uint256 bucketCollateral_,\\n        uint256 bucketLP_,\\n        uint256 deposit_,\\n        uint256 lenderLPBalance_,\\n        uint256 bucketPrice_\\n    ) pure returns (uint256 collateralAmount_) {\\n        collateralAmount_ = Buckets.lpToCollateral(\\n            bucketCollateral_,\\n            bucketLP_,\\n            deposit_,\\n            lenderLPBalance_,\\n            bucketPrice_,\\n            Math.Rounding.Down\\n        );\\n\\n        if (collateralAmount_ > bucketCollateral_) {\\n            // user is owed more collateral than is available in the bucket\\n            collateralAmount_ = bucketCollateral_;\\n        }\\n    }\\n\\n    /**\\n     *  @notice Returns the amount of quote tokens calculated for the given amount of `LP`.\\n     *  @dev    The value returned is capped at available bucket deposit.\\n     *  @param  bucketLP_         Amount of `LP` in bucket.\\n     *  @param  bucketCollateral_ Amount of collateral in bucket.\\n     *  @param  deposit_          Current bucket deposit (quote tokens). Used to calculate bucket's exchange rate / `LP`.\\n     *  @param  lenderLPBalance_  The amount of `LP` to calculate quote token amount for.\\n     *  @param  bucketPrice_      Bucket's price.\\n     *  @return quoteTokenAmount_ Amount of quote tokens calculated for the given `LP` amount, capped at available bucket deposit.\\n     */\\n    function _lpToQuoteToken(\\n        uint256 bucketLP_,\\n        uint256 bucketCollateral_,\\n        uint256 deposit_,\\n        uint256 lenderLPBalance_,\\n        uint256 bucketPrice_\\n    ) pure returns (uint256 quoteTokenAmount_) {\\n        quoteTokenAmount_ = Buckets.lpToQuoteTokens(\\n            bucketCollateral_,\\n            bucketLP_,\\n            deposit_,\\n            lenderLPBalance_,\\n            bucketPrice_,\\n            Math.Rounding.Down\\n        );\\n\\n        if (quoteTokenAmount_ > deposit_) quoteTokenAmount_ = deposit_;\\n    }\\n\\n    /**\\n     *  @notice Rounds a token amount down to the minimum amount permissible by the token scale.\\n     *  @param  amount_       Value to be rounded.\\n     *  @param  tokenScale_   Scale of the token, presented as a power of `10`.\\n     *  @return scaledAmount_ Rounded value.\\n     */\\n    function _roundToScale(\\n        uint256 amount_,\\n        uint256 tokenScale_\\n    ) pure returns (uint256 scaledAmount_) {\\n        scaledAmount_ = (amount_ / tokenScale_) * tokenScale_;\\n    }\\n\\n    /**\\n     *  @notice Rounds a token amount up to the next amount permissible by the token scale.\\n     *  @param  amount_       Value to be rounded.\\n     *  @param  tokenScale_   Scale of the token, presented as a power of `10`.\\n     *  @return scaledAmount_ Rounded value.\\n     */\\n    function _roundUpToScale(\\n        uint256 amount_,\\n        uint256 tokenScale_\\n    ) pure returns (uint256 scaledAmount_) {\\n        if (amount_ % tokenScale_ == 0)\\n            scaledAmount_ = amount_;\\n        else\\n            scaledAmount_ = _roundToScale(amount_, tokenScale_) + tokenScale_;\\n    }\\n\\n    /*********************************/\\n    /*** Reserve Auction Utilities ***/\\n    /*********************************/\\n\\n    uint256 constant MINUTE_HALF_LIFE    = 0.988514020352896135_356867505 * 1e27;  // 0.5^(1/60)\\n\\n    /**\\n     *  @notice Calculates claimable reserves within the pool.\\n     *  @dev    Claimable reserve auctions and escrowed auction bonds are guaranteed by the pool.\\n     *  @param  debt_                    Pool's debt.\\n     *  @param  poolSize_                Pool's deposit size.\\n     *  @param  totalBondEscrowed_       Total bond escrowed.\\n     *  @param  reserveAuctionUnclaimed_ Pool's unclaimed reserve auction.\\n     *  @param  quoteTokenBalance_       Pool's quote token balance.\\n     *  @return claimable_               Calculated pool reserves.\\n     */  \\n    function _claimableReserves(\\n        uint256 debt_,\\n        uint256 poolSize_,\\n        uint256 totalBondEscrowed_,\\n        uint256 reserveAuctionUnclaimed_,\\n        uint256 quoteTokenBalance_\\n    ) pure returns (uint256 claimable_) {\\n        uint256 guaranteedFunds = totalBondEscrowed_ + reserveAuctionUnclaimed_;\\n\\n        // calculate claimable reserves if there's quote token excess\\n        if (quoteTokenBalance_ > guaranteedFunds) {\\n            claimable_ = debt_ + quoteTokenBalance_;\\n\\n            claimable_ -= Maths.min(\\n                claimable_,\\n                // require 1.0 + 1e-9 deposit buffer (extra margin) for deposits\\n                Maths.wmul(DEPOSIT_BUFFER, poolSize_) + guaranteedFunds\\n            );\\n\\n            // incremental claimable reserve should not exceed excess quote in pool\\n            claimable_ = Maths.min(\\n                claimable_,\\n                quoteTokenBalance_ - guaranteedFunds\\n            );\\n        }\\n    }\\n\\n    /**\\n     *  @notice Calculates reserves auction price.\\n     *  @param  reserveAuctionKicked_ Time when reserve auction was started (kicked).\\n     *  @param  lastKickedReserves_   Reserves to be auctioned when started (kicked).\\n     *  @return price_                Calculated auction price.\\n     */     \\n    function _reserveAuctionPrice(\\n        uint256 reserveAuctionKicked_,\\n        uint256 lastKickedReserves_\\n    ) view returns (uint256 price_) {\\n        if (reserveAuctionKicked_ != 0) {\\n            uint256 secondsElapsed   = block.timestamp - reserveAuctionKicked_;\\n            uint256 hoursComponent   = 1e27 >> secondsElapsed / 3600;\\n            uint256 minutesComponent = Maths.rpow(MINUTE_HALF_LIFE, secondsElapsed % 3600 / 60);\\n            uint256 initialPrice     = lastKickedReserves_ == 0 ? 0 : Maths.wdiv(1_000_000_000 * 1e18, lastKickedReserves_);\\n\\n            price_ = initialPrice * Maths.rmul(hoursComponent, minutesComponent) / 1e27;\\n        }\\n    }\\n\\n    /*************************/\\n    /*** Auction Utilities ***/\\n    /*************************/\\n\\n    /// @dev min bond factor.\\n    uint256 constant MIN_BOND_FACTOR = 0.005 * 1e18;\\n    /// @dev max bond factor.\\n    uint256 constant MAX_BOND_FACTOR = 0.03 * 1e18;\\n\\n    /**\\n     *  @notice Calculates auction price.\\n     *  @param  referencePrice_ Recorded at kick, used to calculate start price.\\n     *  @param  kickTime_       Time when auction was kicked.\\n     *  @return price_          Calculated auction price.\\n     */\\n    function _auctionPrice(\\n        uint256 referencePrice_,\\n        uint256 kickTime_\\n    ) view returns (uint256 price_) {\\n        uint256 elapsedMinutes = Maths.wdiv((block.timestamp - kickTime_) * 1e18, 1 minutes * 1e18);\\n\\n        int256 timeAdjustment;\\n        if (elapsedMinutes < 120 * 1e18) {\\n            timeAdjustment = PRBMathSD59x18.mul(-1 * 1e18, int256(elapsedMinutes / 20));\\n            price_ = 256 * Maths.wmul(referencePrice_, uint256(PRBMathSD59x18.exp2(timeAdjustment)));\\n        } else if (elapsedMinutes < 840 * 1e18) {\\n            timeAdjustment = PRBMathSD59x18.mul(-1 * 1e18, int256((elapsedMinutes - 120 * 1e18) / 120));\\n            price_ = 4 * Maths.wmul(referencePrice_, uint256(PRBMathSD59x18.exp2(timeAdjustment)));\\n        } else {\\n            timeAdjustment = PRBMathSD59x18.mul(-1 * 1e18, int256((elapsedMinutes - 840 * 1e18) / 60));\\n            price_ = Maths.wmul(referencePrice_, uint256(PRBMathSD59x18.exp2(timeAdjustment))) / 16;\\n        }\\n    }\\n\\n    /**\\n     *  @notice Calculates bond penalty factor.\\n     *  @dev    Called in kick and take.\\n     *  @param debtToCollateral_ Borrower debt to collateral at time of kick.\\n     *  @param neutralPrice_     `NP` of auction.\\n     *  @param bondFactor_       Factor used to determine bondSize.\\n     *  @param auctionPrice_     Auction price at the time of call or, for bucket takes, bucket price.\\n     *  @return bpf_             Factor used in determining bond `reward` (positive) or `penalty` (negative).\\n     */\\n    function _bpf(\\n        uint256 debtToCollateral_,\\n        uint256 neutralPrice_,\\n        uint256 bondFactor_,\\n        uint256 auctionPrice_\\n    ) pure returns (int256) {\\n        int256 sign;\\n        if (debtToCollateral_ < neutralPrice_) {\\n            // BPF = BondFactor * min(1, max(-1, (neutralPrice - price) / (neutralPrice - debtToCollateral)))\\n            sign = Maths.minInt(\\n                1e18,\\n                Maths.maxInt(\\n                    -1 * 1e18,\\n                    PRBMathSD59x18.div(\\n                        int256(neutralPrice_) - int256(auctionPrice_),\\n                        int256(neutralPrice_) - int256(debtToCollateral_)\\n                    )\\n                )\\n            );\\n        } else {\\n            int256 val = int256(neutralPrice_) - int256(auctionPrice_);\\n            if (val < 0 )      sign = -1e18;\\n            else if (val != 0) sign = 1e18;\\n        }\\n\\n        return PRBMathSD59x18.mul(int256(bondFactor_), sign);\\n    }\\n\\n    /**\\n     *  @notice Calculates bond parameters of an auction.\\n     *  @param  borrowerDebt_   Borrower's debt before entering in liquidation.\\n     *  @param  npTpRatio_      Borrower's Np to Tp ratio\\n     */\\n    function _bondParams(\\n        uint256 borrowerDebt_,\\n        uint256 npTpRatio_\\n    ) pure returns (uint256 bondFactor_, uint256 bondSize_) {\\n        // bondFactor = max(min(MAX_BOND_FACTOR, (NP/TP_ratio - 1) / 10), MIN_BOND_FACTOR)\\n        bondFactor_ = Maths.max(\\n            Maths.min(\\n                MAX_BOND_FACTOR,\\n                (npTpRatio_ - 1e18) / 10\\n            ),\\n            MIN_BOND_FACTOR\\n        );\\n\\n        bondSize_ = Maths.wmul(bondFactor_,  borrowerDebt_);\\n    }\\n\"\r\n    },\r\n    \"lib/ajna-core/src/libraries/internal/Buckets.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.18;\\n\\nimport { Math } from '@openzeppelin/contracts/utils/math/Math.sol';\\n\\nimport { Bucket, Lender } from '../../interfaces/pool/commons/IPoolState.sol';\\n\\nimport { Maths } from './Maths.sol';\\n\\n/**\\n    @title  Buckets library\\n    @notice Internal library containing common logic for buckets management.\\n */\\nlibrary Buckets {\\n\\n    /**************/\\n    /*** Events ***/\\n    /**************/\\n\\n    // See `IPoolError` for descriptions\\n    error BucketBankruptcyBlock();\\n\\n    /***********************************/\\n    /*** Bucket Management Functions ***/\\n    /***********************************/\\n\\n    /**\\n     *  @notice Add collateral to a bucket and updates `LP` for bucket and lender with the amount coresponding to collateral amount added.\\n     *  @dev    Increment `bucket.collateral` and `bucket.lps` accumulator\\n     *  @dev    - `addLenderLP`:\\n     *  @dev    increment `lender.lps` accumulator and `lender.depositTime` state\\n     *  @param  lender_                Address of the lender.\\n     *  @param  deposit_               Current bucket deposit (quote tokens). Used to calculate bucket's exchange rate / `LP`.\\n     *  @param  collateralAmountToAdd_ Additional collateral amount to add to bucket.\\n     *  @param  bucketPrice_           Bucket price.\\n     *  @return addedLP_               Amount of bucket `LP` for the collateral amount added.\\n     */\\n    function addCollateral(\\n        Bucket storage bucket_,\\n        address lender_,\\n        uint256 deposit_,\\n        uint256 collateralAmountToAdd_,\\n        uint256 bucketPrice_\\n    ) internal returns (uint256 addedLP_) {\\n        // cannot deposit in the same block when bucket becomes insolvent\\n        uint256 bankruptcyTime = bucket_.bankruptcyTime;\\n        if (bankruptcyTime == block.timestamp) revert BucketBankruptcyBlock();\\n\\n        // calculate amount of LP to be added for the amount of collateral added to bucket\\n        addedLP_ = collateralToLP(\\n            bucket_.collateral,\\n            bucket_.lps,\\n            deposit_,\\n            collateralAmountToAdd_,\\n            bucketPrice_,\\n            Math.Rounding.Down\\n        );\\n        // update bucket LP balance and collateral\\n\\n        // update bucket collateral\\n        bucket_.collateral += collateralAmountToAdd_;\\n        // update bucket and lender LP balance and deposit timestamp\\n        bucket_.lps += addedLP_;\\n\\n        addLenderLP(bucket_, bankruptcyTime, lender_, addedLP_);\\n    }\\n\\n    /**\\n     *  @notice Add amount of `LP` for a given lender in a given bucket.\\n     *  @dev    Increments lender lps accumulator and updates the deposit time.\\n     *  @param  bucket_         Bucket to record lender `LP`.\\n     *  @param  bankruptcyTime_ Time when bucket become insolvent.\\n     *  @param  lender_         Lender address to add `LP` for in the given bucket.\\n     *  @param  lpAmount_       Amount of `LP` to be recorded for the given lender.\\n     */\\n    function addLenderLP(\\n        Bucket storage bucket_,\\n        uint256 bankruptcyTime_,\\n        address lender_,\\n        uint256 lpAmount_\\n    ) internal {\\n        if (lpAmount_ != 0) {\\n            Lender storage lender = bucket_.lenders[lender_];\\n\\n            if (bankruptcyTime_ >= lender.depositTime) lender.lps = lpAmount_;\\n            else lender.lps += lpAmount_;\\n\\n            lender.depositTime = block.timestamp;\\n        }\\n    }\\n\\n    /**********************/\\n    /*** View Functions ***/\\n    /**********************/\\n\\n    /****************************/\\n    /*** Assets to LP helpers ***/\\n    /****************************/\\n\\n    /**\\n     *  @notice Returns the amount of bucket `LP` calculated for the given amount of collateral.\\n     *  @param  bucketCollateral_ Amount of collateral in bucket.\\n     *  @param  bucketLP_         Amount of `LP` in bucket.\\n     *  @param  deposit_          Current bucket deposit (quote tokens). Used to calculate bucket's exchange rate / `LP`.\\n     *  @param  collateral_       The amount of collateral to calculate bucket LP for.\\n     *  @param  bucketPrice_      Bucket's price.\\n     *  @param  rounding_         The direction of rounding when calculating LP (down when adding, up when removing collateral from pool).\\n     *  @return Amount of `LP` calculated for the amount of collateral.\\n     */\\n    function collateralToLP(\\n        uint256 bucketCollateral_,\\n        uint256 bucketLP_,\\n        uint256 deposit_,\\n        uint256 collateral_,\\n        uint256 bucketPrice_,\\n        Math.Rounding rounding_\\n    ) internal pure returns (uint256) {\\n        // case when there's no deposit nor collateral in bucket\\n        if (deposit_ == 0 && bucketCollateral_ == 0) return Maths.wmul(collateral_, bucketPrice_);\\n\\n        // case when there's deposit or collateral in bucket but no LP to cover\\n        if (bucketLP_ == 0) return Maths.wmul(collateral_, bucketPrice_);\\n\\n        // case when there's deposit or collateral and bucket has LP balance\\n        return Math.mulDiv(\\n            bucketLP_,\\n            collateral_ * bucketPrice_,\\n            deposit_ * Maths.WAD + bucketCollateral_ * bucketPrice_,\\n            rounding_\\n        );\\n    }\\n\\n    /**\\n     *  @notice Returns the amount of `LP` calculated for the given amount of quote tokens.\\n     *  @param  bucketCollateral_ Amount of collateral in bucket.\\n     *  @param  bucketLP_         Amount of `LP` in bucket.\\n     *  @param  deposit_          Current bucket deposit (quote tokens). Used to calculate bucket's exchange rate / `LP`.\\n     *  @param  quoteTokens_      The amount of quote tokens to calculate `LP` amount for.\\n     *  @param  bucketPrice_      Bucket's price.\\n     *  @param  rounding_         The direction of rounding when calculating LP (down when adding, up when removing quote tokens from pool).\\n     *  @return The amount of `LP` coresponding to the given quote tokens in current bucket.\\n     */\\n    function quoteTokensToLP(\\n        uint256 bucketCollateral_,\\n        uint256 bucketLP_,\\n        uint256 deposit_,\\n        uint256 quoteTokens_,\\n        uint256 bucketPrice_,\\n        Math.Rounding rounding_\\n    ) internal pure returns (uint256) {\\n        // case when there's no deposit nor collateral in bucket\\n        if (deposit_ == 0 && bucketCollateral_ == 0) return quoteTokens_;\\n\\n        // case when there's deposit or collateral in bucket but no LP to cover\\n        if (bucketLP_ == 0) return quoteTokens_;\\n\\n        // case when there's deposit or collateral and bucket has LP balance\\n        return Math.mulDiv(\\n            bucketLP_,\\n            quoteTokens_ * Maths.WAD,\\n            deposit_ * Maths.WAD + bucketCollateral_ * bucketPrice_,\\n            rounding_\\n        );\\n    }\\n\\n    /****************************/\\n    /*** LP to Assets helpers ***/\\n    /****************************/\\n\\n    /**\\n     *  @notice Returns the amount of collateral calculated for the given amount of lp\\n     *  @dev    The value returned is not capped at collateral amount available in bucket.\\n     *  @param  bucketCollateral_ Amount of collateral in bucket.\\n     *  @param  bucketLP_         Amount of `LP` in bucket.\\n     *  @param  deposit_          Current bucket deposit (quote tokens). Used to calculate bucket's exchange rate / `LP`.\\n     *  @param  lp_               The amount of LP to calculate collateral amount for.\\n     *  @param  bucketPrice_      Bucket's price.\\n     *  @return The amount of collateral coresponding to the given `LP` in current bucket.\\n     */\\n    function lpToCollateral(\\n        uint256 bucketCollateral_,\\n        uint256 bucketLP_,\\n        uint256 deposit_,\\n        uint256 lp_,\\n        uint256 bucketPrice_,\\n        Math.Rounding rounding_\\n    ) internal pure returns (uint256) {\\n        // case when there's no deposit nor collateral in bucket\\n        if (deposit_ == 0 && bucketCollateral_ == 0) return Maths.wdiv(lp_, bucketPrice_);\\n\\n        // case when there's deposit or collateral in bucket but no LP to cover\\n        if (bucketLP_ == 0) return Maths.wdiv(lp_, bucketPrice_);\\n\\n        // case when there's deposit or collateral and bucket has LP balance\\n        return Math.mulDiv(\\n            deposit_ * Maths.WAD + bucketCollateral_ * bucketPrice_,\\n            lp_,\\n            bucketLP_ * bucketPrice_,\\n            rounding_\\n        );\\n    }\\n\\n    /**\\n     *  @notice Returns the amount of quote token (in value) calculated for the given amount of `LP`.\\n     *  @dev    The value returned is not capped at available bucket deposit.\\n     *  @param  bucketCollateral_ Amount of collateral in bucket.\\n     *  @param  bucketLP_         Amount of `LP` in bucket.\\n     *  @param  deposit_          Current bucket deposit (quote tokens). Used to calculate bucket's exchange rate / `LP`.\\n     *  @param  lp_               The amount of LP to calculate quote tokens amount for.\\n     *  @param  bucketPrice_      Bucket's price.\\n     *  @return The amount coresponding to the given quote tokens in current bucket.\\n     */\\n    function lpToQuoteTokens(\\n        uint256 bucketCollateral_,\\n        uint256 bucketLP_,\\n        uint256 deposit_,\\n        uint256 lp_,\\n        uint256 bucketPrice_,\\n        Math.Rounding rounding_\\n    ) internal pure returns (uint256) {\\n        // case when there's no deposit nor collateral in bucket\\n        if (deposit_ == 0 && bucketCollateral_ == 0) return lp_;\\n\\n        // case when there's deposit or collateral in bucket but no LP to cover\\n        if (bucketLP_ == 0) return lp_;\\n\\n        // case when there's deposit or collateral and bucket has LP balance\\n        return Math.mulDiv(\\n            deposit_ * Maths.WAD + bucketCollateral_ * bucketPrice_,\\n            lp_,\\n            bucketLP_ * Maths.WAD,\\n            rounding_\\n        );\\n    }\\n\\n    /****************************/\\n    /*** Exchange Rate helper ***/\\n    /****************************/\\n\\n    /**\\n     *  @notice Returns the exchange rate for a given bucket (conversion of 1 lp to quote token).\\n     *  @param  bucketCollateral_ Amount of collateral in bucket.\\n     *  @param  bucketLP_         Amount of `LP` in bucket.\\n     *  @param  bucketDeposit_    The amount of quote tokens deposited in the given bucket.\\n     *  @param  bucketPrice_      Bucket's price.\\n     */\\n    function getExchangeRate(\\n        uint256 bucketCollateral_,\\n        uint256 bucketLP_,\\n        uint256 bucketDeposit_,\\n        uint256 bucketPrice_\\n    ) internal pure returns (uint256) {\\n        return lpToQuoteTokens(\\n            bucketCollateral_,\\n            bucketLP_,\\n            bucketDeposit_,\\n            Maths.WAD,\\n            bucketPrice_,\\n            Math.Rounding.Up\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/ajna-core/src/libraries/internal/Maths.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.18;\\n\\n/**\\n    @title  Maths library\\n    @notice Internal library containing common maths.\\n */\\nlibrary Maths {\\n\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant RAY = 1e27;\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x * y + WAD / 2) / WAD;\\n    }\\n\\n    function floorWmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x * y) / WAD;\\n    }\\n\\n    function ceilWmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x * y + WAD - 1) / WAD;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x * WAD + y / 2) / y;\\n    }\\n\\n    function floorWdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x * WAD) / y;\\n    }\\n\\n    function ceilWdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x * WAD + y - 1) / y;\\n    }\\n\\n    function ceilDiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x + y - 1) / y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function wad(uint256 x) internal pure returns (uint256) {\\n        return x * WAD;\\n    }\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x * y + RAY / 2) / RAY;\\n    }\\n\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n\\n    /*************************/\\n    /*** Integer Functions ***/\\n    /*************************/\\n\\n    function maxInt(int256 x, int256 y) internal pure returns (int256) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function minInt(int256 x, int256 y) internal pure returns (int256) {\\n        return x <= y ? x : y;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"lib/ajna-core/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/ajna-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/ajna-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/ajna-core/src/interfaces/pool/commons/IPoolBorrowerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Pool Borrower Actions\\n */\\ninterface IPoolBorrowerActions {\\n\\n    /**\\n     *  @notice Called by fully collateralized borrowers to restamp the `Np to Tp ratio` of the loan (only if loan is fully collateralized and not in auction).\\n     *          The reason for stamping the `Np to Tp ratio` on the loan is to provide some certainty to the borrower as to at what price they can expect to be liquidated.\\n     *          This action can restamp only the loan of `msg.sender`.\\n     */\\n    function stampLoan() external;\\n\\n}\\n\"\r\n    },\r\n    \"lib/ajna-core/src/interfaces/pool/commons/IPoolLPActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Pool `LP` Actions\\n */\\ninterface IPoolLPActions {\\n\\n    /**\\n     *  @notice Called by `LP` owners to approve transfer of an amount of `LP` to a new owner.\\n     *  @dev    Intended for use by the `PositionManager` contract.\\n     *  @param  spender_ The new owner of the `LP`.\\n     *  @param  indexes_ Bucket indexes from where `LP` are transferred.\\n     *  @param  amounts_ The amounts of `LP` approved to transfer (`WAD` precision).\\n     */\\n    function increaseLPAllowance(\\n        address spender_,\\n        uint256[] calldata indexes_,\\n        uint256[] calldata amounts_\\n    ) external;\\n\\n    /**\\n     *  @notice Called by `LP` owners to decrease the amount of `LP` that can be spend by a new owner.\\n     *  @dev    Intended for use by the `PositionManager` contract.\\n     *  @param  spender_ The new owner of the `LP`.\\n     *  @param  indexes_ Bucket indexes from where `LP` are transferred.\\n     *  @param  amounts_ The amounts of `LP` disapproved to transfer (`WAD` precision).\\n     */\\n    function decreaseLPAllowance(\\n        address spender_,\\n        uint256[] calldata indexes_,\\n        uint256[] calldata amounts_\\n    ) external;\\n\\n    /**\\n     *  @notice Called by `LP` owners to decrease the amount of `LP` that can be spend by a new owner.\\n     *  @param  spender_ Address that is having it's allowance revoked.\\n     *  @param  indexes_ List of bucket index to remove the allowance from.\\n     */\\n    function revokeLPAllowance(\\n        address spender_,\\n        uint256[] calldata indexes_\\n    ) external;\\n\\n    /**\\n     *  @notice Called by `LP` owners to allow addresses that can transfer LP.\\n     *  @dev    Intended for use by the `PositionManager` contract.\\n     *  @param  transferors_ Addresses that are allowed to transfer `LP` to new owner.\\n     */\\n    function approveLPTransferors(\\n        address[] calldata transferors_\\n    ) external;\\n\\n    /**\\n     *  @notice Called by `LP` owners to revoke addresses that can transfer `LP`.\\n     *  @dev    Intended for use by the `PositionManager` contract.\\n     *  @param  transferors_ Addresses that are revoked to transfer `LP` to new owner.\\n     */\\n    function revokeLPTransferors(\\n        address[] calldata transferors_\\n    ) external;\\n\\n    /**\\n     *  @notice Called by `LP` owners to transfers their `LP` to a different address. `approveLpOwnership` needs to be run first.\\n     *  @dev    Used by `PositionManager.memorializePositions()`.\\n     *  @param  owner_    The original owner address of the position.\\n     *  @param  newOwner_ The new owner address of the position.\\n     *  @param  indexes_  Array of price buckets index at which `LP` were moved.\\n     */\\n    function transferLP(\\n        address owner_,\\n        address newOwner_,\\n        uint256[] calldata indexes_\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/ajna-core/src/interfaces/pool/commons/IPoolLenderActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Pool Lender Actions\\n */\\ninterface IPoolLenderActions {\\n\\n    /*********************************************/\\n    /*** Quote/collateral management functions ***/\\n    /*********************************************/\\n\\n    /**\\n     *  @notice Called by lenders to add an amount of credit at a specified price bucket.\\n     *  @param  amount_           The amount of quote token to be added by a lender (`WAD` precision).\\n     *  @param  index_            The index of the bucket to which the quote tokens will be added.\\n     *  @param  expiry_           Timestamp after which this transaction will revert, preventing inclusion in a block with unfavorable price.\\n     *  @return bucketLP_         The amount of `LP` changed for the added quote tokens (`WAD` precision).\\n     *  @return addedAmount_      The amount of quote token added (`WAD` precision).\\n     */\\n    function addQuoteToken(\\n        uint256 amount_,\\n        uint256 index_,\\n        uint256 expiry_\\n    ) external returns (uint256 bucketLP_, uint256 addedAmount_);\\n\\n    /**\\n     *  @notice Called by lenders to move an amount of credit from a specified price bucket to another specified price bucket.\\n     *  @param  maxAmount_        The maximum amount of quote token to be moved by a lender (`WAD` precision).\\n     *  @param  fromIndex_        The bucket index from which the quote tokens will be removed.\\n     *  @param  toIndex_          The bucket index to which the quote tokens will be added.\\n     *  @param  expiry_           Timestamp after which this transaction will revert, preventing inclusion in a block with unfavorable price.\\n     *  @return fromBucketLP_     The amount of `LP` moved out from bucket (`WAD` precision).\\n     *  @return toBucketLP_       The amount of `LP` moved to destination bucket (`WAD` precision).\\n     *  @return movedAmount_      The amount of quote token moved (`WAD` precision).\\n     */\\n    function moveQuoteToken(\\n        uint256 maxAmount_,\\n        uint256 fromIndex_,\\n        uint256 toIndex_,\\n        uint256 expiry_\\n    ) external returns (uint256 fromBucketLP_, uint256 toBucketLP_, uint256 movedAmount_);\\n\\n    /**\\n     *  @notice Called by lenders to claim collateral from a price bucket.\\n     *  @param  maxAmount_     The amount of collateral (`WAD` precision for `ERC20` pools, number of `NFT` tokens for `ERC721` pools) to claim.\\n     *  @param  index_         The bucket index from which collateral will be removed.\\n     *  @return removedAmount_ The amount of collateral removed (`WAD` precision).\\n     *  @return redeemedLP_    The amount of `LP` used for removing collateral amount (`WAD` precision).\\n     */\\n    function removeCollateral(\\n        uint256 maxAmount_,\\n        uint256 index_\\n    ) external returns (uint256 removedAmount_, uint256 redeemedLP_);\\n\\n    /**\\n     *  @notice Called by lenders to remove an amount of credit at a specified price bucket.\\n     *  @param  maxAmount_     The max amount of quote token to be removed by a lender (`WAD` precision).\\n     *  @param  index_         The bucket index from which quote tokens will be removed.\\n     *  @return removedAmount_ The amount of quote token removed (`WAD` precision).\\n     *  @return redeemedLP_    The amount of `LP` used for removing quote tokens amount (`WAD` precision).\\n     */\\n    function removeQuoteToken(\\n        uint256 maxAmount_,\\n        uint256 index_\\n    ) external returns (uint256 removedAmount_, uint256 redeemedLP_);\\n\\n    /********************************/\\n    /*** Interest update function ***/\\n    /********************************/\\n\\n    /**\\n     *  @notice Called by actors to update pool interest rate (can be updated only once in a `12` hours period of time).\\n     */\\n    function updateInterest() external;\\n\\n}\\n\"\r\n    },\r\n    \"lib/ajna-core/src/interfaces/pool/commons/IPoolKickerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Pool Kicker Actions\\n */\\ninterface IPoolKickerActions {\\n\\n    /********************/\\n    /*** Liquidations ***/\\n    /********************/\\n\\n    /**\\n     *  @notice Called by actors to initiate a liquidation.\\n     *  @param  borrower_     Identifies the loan to liquidate.\\n     *  @param  npLimitIndex_ Index of the lower bound of `NP` tolerated when kicking the auction.\\n     */\\n    function kick(\\n        address borrower_,\\n        uint256 npLimitIndex_\\n    ) external;\\n\\n    /**\\n     *  @notice Called by lenders to liquidate the top loan.\\n     *  @param  index_        The deposit index to use for kicking the top loan.\\n     *  @param  npLimitIndex_ Index of the lower bound of `NP` tolerated when kicking the auction.\\n     */\\n    function lenderKick(\\n        uint256 index_,\\n        uint256 npLimitIndex_\\n    ) external;\\n\\n    /**\\n     *  @notice Called by kickers to withdraw their auction bonds (the amount of quote tokens that are not locked in active auctions).\\n     *  @param  recipient_ Address to receive claimed bonds amount.\\n     *  @param  maxAmount_ The max amount to withdraw from auction bonds (`WAD` precision). Constrained by claimable amounts and liquidity.\\n     *  @return withdrawnAmount_ The amount withdrawn (`WAD` precision).\\n     */\\n    function withdrawBonds(\\n        address recipient_,\\n        uint256 maxAmount_\\n    ) external returns (uint256 withdrawnAmount_);\\n\\n    /***********************/\\n    /*** Reserve Auction ***/\\n    /***********************/\\n\\n    /**\\n     *  @notice Called by actor to start a `Claimable Reserve Auction` (`CRA`).\\n     */\\n    function kickReserveAuction() external;\\n}\"\r\n    },\r\n    \"lib/ajna-core/src/interfaces/pool/commons/IPoolTakerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Pool Taker Actions\\n */\\ninterface IPoolTakerActions {\\n\\n    /**\\n     *  @notice Called by actors to use quote token to arb higher-priced deposit off the book.\\n     *  @param  borrowerAddress_  Address of the borower take is being called upon.\\n     *  @param  depositTake_      If `true` then the take will happen at an auction price equal with bucket price. Auction price is used otherwise.\\n     *  @param  index_            Index of a bucket, likely the `HPB`, in which collateral will be deposited.\\n     */\\n    function bucketTake(\\n        address borrowerAddress_,\\n        bool    depositTake_,\\n        uint256 index_\\n    ) external;\\n\\n    /**\\n     *  @notice Called by actors to purchase collateral from the auction in exchange for quote token.\\n     *  @param  borrowerAddress_  Address of the borower take is being called upon.\\n     *  @param  maxAmount_        Max amount of collateral that will be taken from the auction (`WAD` precision for `ERC20` pools, max number of `NFT`s for `ERC721` pools).\\n     *  @param  callee_           Identifies where collateral should be sent and where quote token should be obtained.\\n     *  @param  data_             If provided, take will assume the callee implements `IERC*Taker`.  Take will send collateral to \\n     *                            callee before passing this data to `IERC*Taker.atomicSwapCallback`.  If not provided, \\n     *                            the callback function will not be invoked.\\n     *  @return collateralTaken_  Amount of collateral taken from the auction (`WAD` precision for `ERC20` pools, max number of `NFT`s for `ERC721` pools).\\n     */\\n    function take(\\n        address        borrowerAddress_,\\n        uint256        maxAmount_,\\n        address        callee_,\\n        bytes calldata data_\\n    ) external returns (uint256 collateralTaken_);\\n\\n    /***********************/\\n    /*** Reserve Auction ***/\\n    /***********************/\\n\\n    /**\\n     *  @notice Purchases claimable reserves during a `CRA` using `Ajna` token.\\n     *  @param  maxAmount_ Maximum amount of quote token to purchase at the current auction price (`WAD` precision).\\n     *  @return amount_    Actual amount of reserves taken (`WAD` precision).\\n     */\\n    function takeReserves(\\n        uint256 maxAmount_\\n    ) external returns (uint256 amount_);\\n\\n}\"\r\n    },\r\n    \"lib/ajna-core/src/interfaces/pool/commons/IPoolSettlerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Pool Settler Actions\\n */\\ninterface IPoolSettlerActions {\\n\\n    /**\\n     *  @notice Called by actors to settle an amount of debt in a completed liquidation.\\n     *  @param  borrowerAddress_   Address of the auctioned borrower.\\n     *  @param  maxDepth_          Measured from `HPB`, maximum number of buckets deep to settle debt.\\n     *  @return collateralSettled_ Amount of collateral settled.\\n     *  @return isBorrowerSettled_ True if all borrower's debt is settled.\\n     *  @dev    `maxDepth_` is used to prevent unbounded iteration clearing large liquidations.\\n     */\\n    function settle(\\n        address borrowerAddress_,\\n        uint256 maxDepth_\\n    ) external returns (uint256 collateralSettled_, bool isBorrowerSettled_);\\n\\n}\"\r\n    },\r\n    \"lib/ajna-core/src/interfaces/pool/commons/IPoolImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Pool Immutables\\n */\\ninterface IPoolImmutables {\\n\\n    /**\\n     *  @notice Returns the type of the pool (`0` for `ERC20`, `1` for `ERC721`).\\n     */\\n    function poolType() external pure returns (uint8);\\n\\n    /**\\n     *  @notice Returns the address of the pool's collateral token.\\n     */\\n    function collateralAddress() external pure returns (address);\\n\\n    /**\\n     *  @notice Returns the address of the pool's quote token.\\n     */\\n    function quoteTokenAddress() external pure returns (address);\\n\\n    /**\\n     *  @notice Returns the `quoteTokenScale` state variable.\\n     *  @notice Token scale is also the minimum amount a lender may have in a bucket (dust amount).\\n     *  @return The precision of the quote `ERC20` token based on decimals.\\n     */\\n    function quoteTokenScale() external pure returns (uint256);\\n}\"\r\n    },\r\n    \"lib/ajna-core/src/interfaces/pool/commons/IPoolState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Pool State\\n */\\ninterface IPoolState {\\n\\n    /**\\n     *  @notice Returns details of an auction for a given borrower address.\\n     *  @param  borrower_         Address of the borrower that is liquidated.\\n     *  @return kicker_           Address of the kicker that is kicking the auction.\\n     *  @return bondFactor_       The factor used for calculating bond size.\\n     *  @return bondSize_         The bond amount in quote token terms.\\n     *  @return kickTime_         Time the liquidation was initiated.\\n     *  @return referencePrice_   Price used to determine auction start price.\\n     *  @return neutralPrice_     `Neutral Price` of auction.\\n     *  @return debtToCollateral_ Borrower debt to collateral, which is used in BPF for kicker's reward calculation.\\n     *  @return head_             Address of the head auction.\\n     *  @return next_             Address of the next auction in queue.\\n     *  @return prev_             Address of the prev auction in queue.\\n     */\\n    function auctionInfo(address borrower_)\\n        external\\n        view\\n        returns (\\n            address kicker_,\\n            uint256 bondFactor_,\\n            uint256 bondSize_,\\n            uint256 kickTime_,\\n            uint256 referencePrice_,\\n            uint256 neutralPrice_,\\n            uint256 debtToCollateral_,\\n            address head_,\\n            address next_,\\n            address prev_\\n        );\\n\\n    /**\\n     *  @notice Returns pool related debt values.\\n     *  @return debt_                Current amount of debt owed by borrowers in pool.\\n     *  @return accruedDebt_         Debt owed by borrowers based on last inflator snapshot.\\n     *  @return debtInAuction_       Total amount of debt in auction.\\n     *  @return t0Debt2ToCollateral_ t0debt accross all borrowers divided by their collateral, used in determining a collateralization weighted debt.\\n     */\\n    function debtInfo()\\n        external\\n        view\\n        returns (\\n            uint256 debt_,\\n            uint256 accruedDebt_,\\n            uint256 debtInAuction_,\\n            uint256 t0Debt2ToCollateral_\\n        );\\n\\n    /**\\n     *  @notice Mapping of borrower addresses to `Borrower` structs.\\n     *  @dev    NOTE: Cannot use appended underscore syntax for return params since struct is used.\\n     *  @param  borrower_   Address of the borrower.\\n     *  @return t0Debt_     Amount of debt borrower would have had if their loan was the first debt drawn from the pool.\\n     *  @return collateral_ Amount of collateral that the borrower has deposited, in collateral token.\\n     *  @return npTpRatio_  Np to Tp ratio of borrower at the time of last borrow or pull collateral.\\n     */\\n    function borrowerInfo(address borrower_)\\n        external\\n        view\\n        returns (\\n            uint256 t0Debt_,\\n            uint256 collateral_,\\n            uint256 npTpRatio_\\n        );\\n\\n    /**\\n     *  @notice Mapping of buckets indexes to `Bucket` structs.\\n     *  @dev    NOTE: Cannot use appended underscore syntax for return params since struct is used.\\n     *  @param  index_               Bucket index.\\n     *  @return lpAccumulator_       Amount of `LP` accumulated in current bucket.\\n     *  @return availableCollateral_ Amount of collateral available in current bucket.\\n     *  @return bankruptcyTime_      Timestamp when bucket become insolvent, `0` if healthy.\\n     *  @return bucketDeposit_       Amount of quote tokens in bucket.\\n     *  @return bucketScale_         Bucket multiplier.\\n     */\\n    function bucketInfo(uint256 index_)\\n        external\\n        view\\n        returns (\\n            uint256 lpAccumulator_,\\n            uint256 availableCollateral_,\\n            uint256 bankruptcyTime_,\\n            uint256 bucketDeposit_,\\n            uint256 bucketScale_\\n        );\\n\\n    /**\\n     *  @notice Mapping of burnEventEpoch to `BurnEvent` structs.\\n     *  @dev    Reserve auctions correspond to burn events.\\n     *  @param  burnEventEpoch_  Id of the current reserve auction.\\n     *  @return burnBlock_       Block in which a reserve auction started.\\n     *  @return totalInterest_   Total interest as of the reserve auction.\\n     *  @return totalBurned_     Total ajna tokens burned as of the reserve auction.\\n     */\\n    function burnInfo(uint256 burnEventEpoch_) external view returns (uint256, uint256, uint256);\\n\\n    /**\\n     *  @notice Returns the latest `burnEventEpoch` of reserve auctions.\\n     *  @dev    If a reserve auction is active, it refers to the current reserve auction. If no reserve auction is active, it refers to the last reserve auction.\\n     *  @return Current `burnEventEpoch`.\\n     */\\n    function currentBurnEpoch() external view returns (uint256);\\n\\n    /**\\n     *  @notice Returns information about the pool `EMA (Exponential Moving Average)` variables.\\n     *  @return debtColEma_   Debt squared to collateral Exponential, numerator to `TU` calculation.\\n     *  @return lupt0DebtEma_ Exponential of `LUP * t0 debt`, denominator to `TU` calculation\\n     *  @return debtEma_      Exponential debt moving average.\\n     *  @return depositEma_   sample of meaningful deposit Exponential, denominator to `MAU` calculation.\\n     */\\n    function emasInfo()\\n        external\\n        view\\n        returns (\\n            uint256 debtColEma_,\\n            uint256 lupt0DebtEma_,\\n            uint256 debtEma_,\\n            uint256 depositEma_\\n    );\\n\\n    /**\\n     *  @notice Returns information about pool inflator.\\n     *  @return inflator_   Pool inflator value.\\n     *  @return lastUpdate_ The timestamp of the last `inflator` update.\\n     */\\n    function inflatorInfo()\\n        external\\n        view\\n        returns (\\n            uint256 inflator_,\\n            uint256 lastUpdate_\\n    );\\n\\n    /**\\n     *  @notice Returns information about pool interest rate.\\n     *  @return interestRate_       Current interest rate in pool.\\n     *  @return interestRateUpdate_ The timestamp of the last interest rate update.\\n     */\\n    function interestRateInfo()\\n        external\\n        view\\n        returns (\\n            uint256 interestRate_,\\n            uint256 interestRateUpdate_\\n        );\\n\\n\\n    /**\\n     *  @notice Returns details about kicker balances.\\n     *  @param  kicker_    The address of the kicker to retrieved info for.\\n     *  @return claimable_ Amount of quote token kicker can claim / withdraw from pool at any time.\\n     *  @return locked_    Amount of quote token kicker locked in auctions (as bonds).\\n     */\\n    function kickerInfo(address kicker_)\\n        external\\n        view\\n        returns (\\n            uint256 claimable_,\\n            uint256 locked_\\n        );\\n\\n    /**\\n     *  @notice Mapping of buckets indexes and owner addresses to `Lender` structs.\\n     *  @param  index_       Bucket index.\\n     *  @param  lender_      Address of the liquidity provider.\\n     *  @return lpBalance_   Amount of `LP` owner has in current bucket.\\n     *  @return depositTime_ Time the user last deposited quote token.\\n     */\\n    function lenderInfo(\\n        uint256 index_,\\n        address lender_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 lpBalance_,\\n            uint256 depositTime_\\n    );\\n\\n    /**\\n     *  @notice Return the `LP` allowance a `LP` owner provided to a spender.\\n     *  @param  index_     Bucket index.\\n     *  @param  spender_   Address of the `LP` spender.\\n     *  @param  owner_     The initial owner of the `LP`.\\n     *  @return allowance_ Amount of `LP` spender can utilize.\\n     */\\n    function lpAllowance(\\n        uint256 index_,\\n        address spender_,\\n        address owner_\\n    ) external view returns (uint256 allowance_);\\n\\n    /**\\n     *  @notice Returns information about a loan in the pool.\\n     *  @param  loanId_             Loan's id within loan heap. Max loan is position `1`.\\n     *  @return borrower_           Borrower address at the given position.\\n     *  @return t0DebtToCollateral_ Borrower t0 debt to collateral.\\n     */\\n    function loanInfo(\\n        uint256 loanId_\\n    )\\n        external\\n        view\\n        returns (\\n            address borrower_,\\n            uint256 t0DebtToCollateral_\\n    );\\n\\n    /**\\n     *  @notice Returns information about pool loans.\\n     *  @return maxBorrower_           Borrower address with highest t0 debt to collateral.\\n     *  @return maxT0DebtToCollateral_ Highest t0 debt to collateral in pool.\\n     *  @return noOfLoans_             Total number of loans.\\n     */\\n    function loansInfo()\\n        external\\n        view\\n        returns (\\n            address maxBorrower_,\\n            uint256 maxT0DebtToCollateral_,\\n            uint256 noOfLoans_\\n    );\\n\\n    /**\\n     *  @notice Returns information about pool reserves.\\n     *  @return liquidationBondEscrowed_ Amount of liquidation bond across all liquidators.\\n     *  @return reserveAuctionUnclaimed_ Amount of claimable reserves which has not been taken in the `Claimable Reserve Auction`.\\n     *  @return reserveAuctionKicked_    Time a `Claimable Reserve Auction` was last kicked.\\n     *  @return lastKickedReserves_      Amount of reserves upon last kick, used to calculate price.\\n     *  @return totalInterestEarned_     Total interest earned by all lenders in the pool\\n     */\\n    function reservesInfo()\\n        external\\n        view\\n        returns (\\n            uint256 liquidationBondEscrowed_,\\n            uint256 reserveAuctionUnclaimed_,\\n            uint256 reserveAuctionKicked_,\\n            uint256 lastKickedReserves_,\\n            uint256 totalInterestEarned_\\n    );\\n\\n    /**\\n     *  @notice Returns the `pledgedCollateral` state variable.\\n     *  @return The total pledged collateral in the system, in WAD units.\\n     */\\n    function pledgedCollateral() external view returns (uint256);\\n\\n    /**\\n     *  @notice Returns the total number of active auctions in pool.\\n     *  @return totalAuctions_ Number of active auctions.\\n     */\\n    function totalAuctionsInPool() external view returns (uint256);\\n\\n     /**\\n     *  @notice Returns the `t0Debt` state variable.\\n     *  @dev    This value should be multiplied by inflator in order to calculate current debt of the pool.\\n     *  @return The total `t0Debt` in the system, in `WAD` units.\\n     */\\n    function totalT0Debt() external view returns (uint256);\\n\\n    /**\\n     *  @notice Returns the `t0DebtInAuction` state variable.\\n     *  @dev    This value should be multiplied by inflator in order to calculate current debt in auction of the pool.\\n     *  @return The total `t0DebtInAuction` in the system, in `WAD` units.\\n     */\\n    function totalT0DebtInAuction() external view returns (uint256);\\n\\n    /**\\n     *  @notice Mapping of addresses that can transfer `LP` to a given lender.\\n     *  @param  lender_     Lender that receives `LP`.\\n     *  @param  transferor_ Transferor that transfers `LP`.\\n     *  @return True if the transferor is approved by lender.\\n     */\\n    function approvedTransferors(\\n        address lender_,\\n        address transferor_\\n    ) external view returns (bool);\\n\\n}\\n\\n/*********************/\\n/*** State Structs ***/\\n/*********************/\\n\\n/******************/\\n/*** Pool State ***/\\n/******************/\\n\\n/// @dev Struct holding inflator state.\\nstruct InflatorState {\\n    uint208 inflator;       // [WAD] pool's inflator\\n    uint48  inflatorUpdate; // [SEC] last time pool's inflator was updated\\n}\\n\\n/// @dev Struct holding pool interest state.\\nstruct InterestState {\\n    uint208 interestRate;        // [WAD] pool's interest rate\\n    uint48  interestRateUpdate;  // [SEC] last time pool's interest rate was updated (not before 12 hours passed)\\n    uint256 debt;                // [WAD] previous update's debt\\n    uint256 meaningfulDeposit;   // [WAD] previous update's meaningfulDeposit\\n    uint256 t0Debt2ToCollateral; // [WAD] utilization weight accumulator, tracks debt and collateral relationship accross borrowers \\n    uint256 debtCol;             // [WAD] previous debt squared to collateral\\n    uint256 lupt0Debt;           // [WAD] previous LUP * t0 debt\\n}\\n\\n/// @dev Struct holding pool EMAs state.\\nstruct EmaState {\\n    uint256 debtEma;             // [WAD] sample of debt EMA, numerator to MAU calculation\\n    uint256 depositEma;          // [WAD] sample of meaningful deposit EMA, denominator to MAU calculation\\n    uint256 debtColEma;          // [WAD] debt squared to collateral EMA, numerator to TU calculation\\n    uint256 lupt0DebtEma;        // [WAD] EMA of LUP * t0 debt, denominator to TU calculation\\n    uint256 emaUpdate;           // [SEC] last time pool's EMAs were updated\\n}\\n\\n/// @dev Struct holding pool balances state.\\nstruct PoolBalancesState {\\n    uint256 pledgedCollateral; // [WAD] total collateral pledged in pool\\n    uint256 t0DebtInAuction;   // [WAD] Total debt in auction used to restrict LPB holder from withdrawing\\n    uint256 t0Debt;            // [WAD] Pool debt as if the whole amount was incurred upon the first loan\\n}\\n\\n/// @dev Struct holding pool params (in memory only).\\nstruct PoolState {\\n    uint8   poolType;             // pool type, can be ERC20 or ERC721\\n    uint256 t0Debt;               // [WAD] t0 debt in pool\\n    uint256 t0DebtInAuction;      // [WAD] t0 debt in auction within pool\\n    uint256 debt;                 // [WAD] total debt in pool, accrued in current block\\n    uint256 collateral;           // [WAD] total collateral pledged in pool\\n    uint256 inflator;             // [WAD] current pool inflator\\n    bool    isNewInterestAccrued; // true if new interest already accrued in current block\\n    uint256 rate;                 // [WAD] pool's current interest rate\\n    uint256 quoteTokenScale;      // [WAD] quote token scale of the pool. Same as quote token dust.\\n}\\n\\n/*********************/\\n/*** Buckets State ***/\\n/*********************/\\n\\n/// @dev Struct holding lender state.\\nstruct Lender {\\n    uint256 lps;         // [WAD] Lender LP accumulator\\n    uint256 depositTime; // timestamp of last deposit\\n}\\n\\n/// @dev Struct holding bucket state.\\nstruct Bucket {\\n    uint256 lps;                        // [WAD] Bucket LP accumulator\\n    uint256 collateral;                 // [WAD] Available collateral tokens deposited in the bucket\\n    uint256 bankruptcyTime;             // Timestamp when bucket become insolvent, 0 if healthy\\n    mapping(address => Lender) lenders; // lender address to Lender struct mapping\\n}\\n\\n/**********************/\\n/*** Deposits State ***/\\n/**********************/\\n\\n/// @dev Struct holding deposits (Fenwick) values and scaling.\\nstruct DepositsState {\\n    uint256[8193] values;  // Array of values in the FenwickTree.\\n    uint256[8193] scaling; // Array of values which scale (multiply) the FenwickTree accross indexes.\\n}\\n\\n/*******************/\\n/*** Loans State ***/\\n/*******************/\\n\\n/// @dev Struct holding loans state.\\nstruct LoansState {\\n    Loan[] loans;\\n    mapping (address => uint)     indices;   // borrower address => loan index mapping\\n    mapping (address => Borrower) borrowers; // borrower address => Borrower struct mapping\\n}\\n\\n/// @dev Struct holding loan state.\\nstruct Loan {\\n    address borrower;           // borrower address\\n    uint96  t0DebtToCollateral; // [WAD] Borrower t0 debt to collateral.\\n}\\n\\n/// @dev Struct holding borrower state.\\nstruct Borrower {\\n    uint256 t0Debt;                    // [WAD] Borrower debt time-adjusted as if it was incurred upon first loan of pool.\\n    uint256 collateral;                // [WAD] Collateral deposited by borrower.\\n    uint256 npTpRatio;                 // [WAD] Np to Tp ratio at the time of last borrow or pull collateral.\\n}\\n\\n/**********************/\\n/*** Auctions State ***/\\n/**********************/\\n\\n/// @dev Struct holding pool auctions state.\\nstruct AuctionsState {\\n    uint96  noOfAuctions;                         // total number of auctions in pool\\n    address head;                                 // first address in auction queue\\n    address tail;                                 // last address in auction queue\\n    uint256 totalBondEscrowed;                    // [WAD] total amount of quote token posted as auction kick bonds\\n    mapping(address => Liquidation) liquidations; // mapping of borrower address and auction details\\n    mapping(address => Kicker)      kickers;      // mapping of kicker address and kicker balances\\n}\\n\\n/// @dev Struct holding liquidation state.\\nstruct Liquidation {\\n    address kicker;                // address that initiated liquidation\\n    uint96  bondFactor;            // [WAD] bond factor used to start liquidation\\n    uint96  kickTime;              // timestamp when liquidation was started\\n    address prev;                  // previous liquidated borrower in auctions queue\\n    uint96  referencePrice;        // [WAD] used to calculate auction start price\\n    address next;                  // next liquidated borrower in auctions queue\\n    uint160 bondSize;              // [WAD] liquidation bond size\\n    uint96  neutralPrice;          // [WAD] Neutral Price when liquidation was started\\n    uint256 debtToCollateral;      // [WAD] Borrower debt to collateral, which is used in BPF for kicker's reward calculation\\n    uint256 t0ReserveSettleAmount; // [WAD] Amount of t0Debt that could be settled via reserves in this auction\\n}\\n\\n/// @dev Struct holding kicker state.\\nstruct Kicker {\\n    uint256 claimable; // [WAD] kicker's claimable balance\\n    uint256 locked;    // [WAD] kicker's balance of tokens locked in auction bonds\\n}\\n\\n/******************************/\\n/*** Reserve Auctions State ***/\\n/******************************/\\n\\n/// @dev Struct holding reserve auction state.\\nstruct ReserveAuctionState {\\n    uint256 kicked;                            // Time a Claimable Reserve Auction was last kicked.\\n    uint256 lastKickedReserves;                // [WAD] Amount of reserves upon last kick, used to calculate price.\\n    uint256 unclaimed;                         // [WAD] Amount of claimable reserves which has not been taken in the Claimable Reserve Auction.\\n    uint256 latestBurnEventEpoch;              // Latest burn event epoch.\\n    uint256 totalAjnaBurned;                   // [WAD] Total ajna burned in the pool.\\n    uint256 totalInterestEarned;               // [WAD] Total interest earned by all lenders in the pool.\\n    mapping (uint256 => BurnEvent) burnEvents; // Mapping burnEventEpoch => BurnEvent.\\n}\\n\\n/// @dev Struct holding burn event state.\\nstruct BurnEvent {\\n    uint256 timestamp;     // time at which the burn event occured\\n    uint256 totalInterest; // [WAD] current pool interest accumulator `PoolCommons.accrueInterest().newInterest`\\n    uint256 totalBurned;   // [WAD] burn amount accumulator\\n}\"\r\n    },\r\n    \"lib/ajna-core/src/interfaces/pool/commons/IPoolDerivedState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Pool Derived State\\n */\\ninterface IPoolDerivedState {\\n\\n    /**\\n     *  @notice Returns the exchange rate for a given bucket index.\\n     *  @param  index_        The bucket index.\\n     *  @return exchangeRate_ Exchange rate of the bucket (`WAD` precision).\\n     */\\n    function bucketExchangeRate(\\n        uint256 index_\\n    ) external view returns (uint256 exchangeRate_);\\n\\n    /**\\n     *  @notice Returns the prefix sum of a given bucket.\\n     *  @param  index_   The bucket index.\\n     *  @return The deposit up to given index (`WAD` precision).\\n     */\\n    function depositUpToIndex(\\n        uint256 index_\\n    ) external view returns (uint256);\\n\\n    /**\\n     *  @notice Returns the bucket index for a given debt amount.\\n     *  @param  debt_  The debt amount to calculate bucket index for (`WAD` precision).\\n     *  @return Bucket index.\\n     */\\n    function depositIndex(\\n        uint256 debt_\\n    ) external view returns (uint256);\\n\\n    /**\\n     *  @notice Returns the total amount of quote tokens deposited in pool.\\n     *  @return Total amount of deposited quote tokens (`WAD` precision).\\n     */\\n    function depositSize() external view returns (uint256);\\n\\n    /**\\n     *  @notice Returns the meaningful actual utilization of the pool.\\n     *  @return Deposit utilization (`WAD` precision).\\n     */\\n    function depositUtilization() external view returns (uint256);\\n\\n    /**\\n     *  @notice Returns the scaling value of deposit at given index.\\n     *  @param  index_  Deposit index.\\n     *  @return Deposit scaling (`WAD` precision).\\n     */\\n    function depositScale(\\n        uint256 index_\\n    ) external view returns (uint256);\\n\\n}\\n\"\r\n    },\r\n    \"lib/ajna-core/src/interfaces/pool/commons/IPoolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Pool Events\\n */\\ninterface IPoolEvents {\\n\\n    /*********************/\\n    /*** Lender events ***/\\n    /*********************/\\n\\n    /**\\n     *  @notice Emitted when lender adds quote token to the pool.\\n     *  @param  lender    Recipient that added quote tokens.\\n     *  @param  index     Index at which quote tokens were added.\\n     *  @param  amount    Amount of quote tokens added to the pool (`WAD` precision).\\n     *  @param  lpAwarded Amount of `LP` awarded for the deposit (`WAD` precision).\\n     *  @param  lup       `LUP` calculated after deposit.\\n     */\\n    event AddQuoteToken(\\n        address indexed lender,\\n        uint256 indexed index,\\n        uint256 amount,\\n        uint256 lpAwarded,\\n        uint256 lup\\n    );\\n\\n    /**\\n     *  @notice Emitted when lender moves quote token from a bucket price to another.\\n     *  @param  lender         Recipient that moved quote tokens.\\n     *  @param  from           Price bucket from which quote tokens were moved.\\n     *  @param  to             Price bucket where quote tokens were moved.\\n     *  @param  amount         Amount of quote tokens moved (`WAD` precision).\\n     *  @param  lpRedeemedFrom Amount of `LP` removed from the `from` bucket (`WAD` precision).\\n     *  @param  lpAwardedTo    Amount of `LP` credited to the `to` bucket (`WAD` precision).\\n     *  @param  lup            `LUP` calculated after removal.\\n     */\\n    event MoveQuoteToken(\\n        address indexed lender,\\n        uint256 indexed from,\\n        uint256 indexed to,\\n        uint256 amount,\\n        uint256 lpRedeemedFrom,\\n        uint256 lpAwardedTo,\\n        uint256 lup\\n    );\\n\\n    /**\\n     *  @notice Emitted when lender removes quote token from the pool.\\n     *  @param  lender     Recipient that removed quote tokens.\\n     *  @param  index      Index at which quote tokens were removed.\\n     *  @param  amount     Amount of quote tokens removed from the pool (`WAD` precision).\\n     *  @param  lpRedeemed Amount of `LP` exchanged for quote token (`WAD` precision).\\n     *  @param  lup        `LUP` calculated after removal.\\n     */\\n    event RemoveQuoteToken(\\n        address indexed lender,\\n        uint256 indexed index,\\n        uint256 amount,\\n        uint256 lpRedeemed,\\n        uint256 lup\\n    );\\n\\n    /**\\n     *  @notice Emitted when lender claims collateral from a bucket.\\n     *  @param  claimer    Recipient that claimed collateral.\\n     *  @param  index      Index at which collateral was claimed.\\n     *  @param  amount     The amount of collateral (`WAD` precision for `ERC20` pools, number of `NFT` tokens for `ERC721` pools) transferred to the claimer.\\n     *  @param  lpRedeemed Amount of `LP` exchanged for quote token (`WAD` precision).\\n     */\\n    event RemoveCollateral(\\n        address indexed claimer,\\n        uint256 indexed index,\\n        uint256 amount,\\n        uint256 lpRedeemed\\n    );\\n\\n    /***********************/\\n    /*** Borrower events ***/\\n    /***********************/\\n\\n    /**\\n     *  @notice Emitted when borrower repays quote tokens to the pool and/or pulls collateral from the pool.\\n     *  @param  borrower         `msg.sender` or on behalf of sender.\\n     *  @param  quoteRepaid      Amount of quote tokens repaid to the pool (`WAD` precision).\\n     *  @param  collateralPulled The amount of collateral (`WAD` precision for `ERC20` pools, number of `NFT` tokens for `ERC721` pools) transferred to the claimer.\\n     *  @param  lup              `LUP` after repay.\\n     */\\n    event RepayDebt(\\n        address indexed borrower,\\n        uint256 quoteRepaid,\\n        uint256 collateralPulled,\\n        uint256 lup\\n    );\\n\\n    /**********************/\\n    /*** Auction events ***/\\n    /**********************/\\n\\n    /**\\n     *  @notice Emitted when a liquidation is initiated.\\n     *  @param  borrower   Identifies the loan being liquidated.\\n     *  @param  debt       Debt the liquidation will attempt to cover (`WAD` precision).\\n     *  @param  collateral Amount of collateral up for liquidation (`WAD` precision for `ERC20` pools, number of `NFT` tokens for `ERC721` pools).\\n     *  @param  bond       Bond amount locked by kicker (`WAD` precision).\\n     */\\n    event Kick(\\n        address indexed borrower,\\n        uint256 debt,\\n        uint256 collateral,\\n        uint256 bond\\n    );\\n\\n    /**\\n     *  @notice Emitted when kickers are withdrawing funds posted as auction bonds.\\n     *  @param  kicker   The kicker withdrawing bonds.\\n     *  @param  reciever The address receiving withdrawn bond amount.\\n     *  @param  amount   The bond amount that was withdrawn (`WAD` precision).\\n     */\\n    event BondWithdrawn(\\n        address indexed kicker,\\n        address indexed reciever,\\n        uint256 amount\\n    );\\n\\n    /**\\n     *  @notice Emitted when an actor uses quote token to arb higher-priced deposit off the book.\\n     *  @param  borrower    Identifies the loan being liquidated.\\n     *  @param  index       The index of the `Highest Price Bucket` used for this take.\\n     *  @param  amount      Amount of quote token used to purchase collateral (`WAD` precision).\\n     *  @param  collateral  Amount of collateral purchased with quote token (`WAD` precision).\\n     *  @param  bondChange  Impact of this take to the liquidation bond (`WAD` precision).\\n     *  @param  isReward    `True` if kicker was rewarded with `bondChange` amount, `false` if kicker was penalized.\\n     *  @dev    amount / collateral implies the auction price.\\n     */\\n    event BucketTake(\\n        address indexed borrower,\\n        uint256 index,\\n        uint256 amount,\\n        uint256 collateral,\\n        uint256 bondChange,\\n        bool    isReward\\n    );\\n\\n    /**\\n     *  @notice Emitted when `LP` are awarded to a taker or kicker in a bucket take.\\n     *  @param  taker           Actor who invoked the bucket take.\\n     *  @param  kicker          Actor who started the auction.\\n     *  @param  lpAwardedTaker  Amount of `LP` awarded to the taker (`WAD` precision).\\n     *  @param  lpAwardedKicker Amount of `LP` awarded to the actor who started the auction (`WAD` precision).\\n     */\\n    event BucketTakeLPAwarded(\\n        address indexed taker,\\n        address indexed kicker,\\n        uint256 lpAwardedTaker,\\n        uint256 lpAwardedKicker\\n    );\\n\\n    /**\\n     *  @notice Emitted when an actor uses quote token outside of the book to purchase collateral under liquidation.\\n     *  @param  borrower   Identifies the loan being liquidated.\\n     *  @param  amount     Amount of quote token used to purchase collateral (`WAD` precision).\\n     *  @param  collateral Amount of collateral purchased with quote token (for `ERC20` pool, `WAD` precision) or number of `NFT`s purchased (for `ERC721` pool).\\n     *  @param  bondChange Impact of this take to the liquidation bond (`WAD` precision).\\n     *  @param  isReward   `True` if kicker was rewarded with `bondChange` amount, `false` if kicker was penalized.\\n     *  @dev    amount / collateral implies the auction price.\\n     */\\n    event Take(\\n        address indexed borrower,\\n        uint256 amount,\\n        uint256 collateral,\\n        uint256 bondChange,\\n        bool    isReward\\n    );\\n\\n    /**\\n     *  @notice Emitted when an actor settles debt in a completed liquidation\\n     *  @param  borrower    Identifies the loan under liquidation.\\n     *  @param  settledDebt Amount of pool debt settled in this transaction (`WAD` precision).\\n     *  @dev    When `amountRemaining_ == 0`, the auction has been completed cleared and removed from the queue.\\n     */\\n    event Settle(\\n        address indexed borrower,\\n        uint256 settledDebt\\n    );\\n\\n    /**\\n     *  @notice Emitted when auction is completed.\\n     *  @param  borrower   Address of borrower that exits auction.\\n     *  @param  collateral Borrower's remaining collateral when auction completed (`WAD` precision).\\n     */\\n    event AuctionSettle(\\n        address indexed borrower,\\n        uint256 collateral\\n    );\\n\\n    /**\\n     *  @notice Emitted when `NFT` auction is completed.\\n     *  @param  borrower   Address of borrower that exits auction.\\n     *  @param  collateral Borrower's remaining collateral when auction completed.\\n     *  @param  lp         Amount of `LP` given to the borrower to compensate fractional collateral (if any, `WAD` precision).\\n     *  @param  index      Index of the bucket with `LP` to compensate fractional collateral.\\n     */\\n    event AuctionNFTSettle(\\n        address indexed borrower,\\n        uint256 collateral,\\n        uint256 lp,\\n        uint256 index\\n    );\\n\\n    /**\\n     *  @notice Emitted when a `Claimaible Reserve Auction` is started.\\n     *  @param  claimableReservesRemaining Amount of claimable reserves which has not yet been taken (`WAD` precision).\\n     *  @param  auctionPrice               Current price at which `1` quote token may be purchased, denominated in `Ajna`.\\n     *  @param  currentBurnEpoch           Current burn epoch.\\n     */\\n    event KickReserveAuction(\\n        uint256 claimableReservesRemaining,\\n        uint256 auctionPrice,\\n        uint256 currentBurnEpoch\\n    );\\n\\n    /**\\n     *  @notice Emitted when a `Claimaible Reserve Auction` is taken.\\n     *  @param  claimableReservesRemaining Amount of claimable reserves which has not yet been taken (`WAD` precision).\\n     *  @param  auctionPrice               Current price at which `1` quote token may be purchased, denominated in `Ajna`.\\n     *  @param  currentBurnEpoch           Current burn epoch.\\n     */\\n    event ReserveAuction(\\n        uint256 claimableReservesRemaining,\\n        uint256 auctionPrice,\\n        uint256 currentBurnEpoch\\n    );\\n\\n    /**************************/\\n    /*** LP transfer events ***/\\n    /**************************/\\n\\n    /**\\n     *  @notice Emitted when owner increase the `LP` allowance of a spender at specified indexes with specified amounts.\\n     *  @param  owner     `LP` owner.\\n     *  @param  spender   Address approved to transfer `LP`.\\n     *  @param  indexes   Bucket indexes of `LP` approved.\\n     *  @param  amounts   `LP` amounts added (ordered by indexes, `WAD` precision).\\n     */\\n    event IncreaseLPAllowance(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256[] indexes,\\n        uint256[] amounts\\n    );\\n\\n    /**\\n     *  @notice Emitted when owner decrease the `LP` allowance of a spender at specified indexes with specified amounts.\\n     *  @param  owner     `LP` owner.\\n     *  @param  spender   Address approved to transfer `LP`.\\n     *  @param  indexes   Bucket indexes of `LP` approved.\\n     *  @param  amounts   `LP` amounts removed (ordered by indexes, `WAD` precision).\\n     */\\n    event DecreaseLPAllowance(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256[] indexes,\\n        uint256[] amounts\\n    );\\n\\n    /**\\n     *  @notice Emitted when lender removes the allowance of a spender for their `LP`.\\n     *  @param  owner   `LP` owner.\\n     *  @param  spender Address that is having it's allowance revoked.\\n     *  @param  indexes List of bucket index to remove the allowance from.\\n     */\\n    event RevokeLPAllowance(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256[] indexes\\n    );\\n\\n    /**\\n     *  @notice Emitted when lender whitelists addresses to accept `LP` from.\\n     *  @param  lender      Recipient that approves new owner for `LP`.\\n     *  @param  transferors List of addresses that can transfer `LP` to lender.\\n     */\\n    event ApproveLPTransferors(\\n        address indexed lender,\\n        address[] transferors\\n    );\\n\\n    /**\\n     *  @notice Emitted when lender removes addresses from the `LP` transferors whitelist.\\n     *  @param  lender      Recipient that approves new owner for `LP`.\\n     *  @param  transferors List of addresses that won't be able to transfer `LP` to lender anymore.\\n     */\\n    event RevokeLPTransferors(\\n        address indexed lender,\\n        address[] transferors\\n    );\\n\\n    /**\\n     *  @notice Emitted when a lender transfers their `LP` to a different address.\\n     *  @dev    Used by `PositionManager.memorializePositions()`.\\n     *  @param  owner    The original owner address of the position.\\n     *  @param  newOwner The new owner address of the position.\\n     *  @param  indexes  Array of price bucket indexes at which `LP` were transferred.\\n     *  @param  lp       Amount of `LP` transferred (`WAD` precision).\\n     */\\n    event TransferLP(\\n        address owner,\\n        address newOwner,\\n        uint256[] indexes,\\n        uint256 lp\\n    );\\n\\n    /**************************/\\n    /*** Pool common events ***/\\n    /**************************/\\n\\n    /**\\n     *  @notice Emitted when `LP` are forfeited as a result of the bucket losing all assets.\\n     *  @param  index       The index of the bucket.\\n     *  @param  lpForfeited Amount of `LP` forfeited by lenders (`WAD` precision).\\n     */\\n    event BucketBankruptcy(\\n        uint256 indexed index,\\n        uint256 lpForfeited\\n    );\\n\\n    /**\\n     *  @notice Emitted when a flashloan is taken from pool.\\n     *  @param  receiver The address receiving the flashloan.\\n     *  @param  token    The address of token flashloaned from pool.\\n     *  @param  amount   The amount of tokens flashloaned from pool (token precision).\\n     */\\n    event Flashloan(\\n        address indexed receiver,\\n        address indexed token,\\n        uint256 amount\\n    );\\n\\n    /**\\n     *  @notice Emitted when a loan `Np to Tp ratio` is restamped.\\n     *  @param  borrower Identifies the loan to update the `Np to Tp ratio`.\\n     */\\n    event LoanStamped(\\n        address indexed borrower\\n    );\\n\\n    /**\\n     *  @notice Emitted when pool interest rate is reset. This happens when `interest rate > 10%` and `debtEma < 5%` of `depositEma`\\n     *  @param  oldRate Old pool interest rate.\\n     *  @param  newRate New pool interest rate.\\n     */\\n    event ResetInterestRate(\\n        uint256 oldRate,\\n        uint256 newRate\\n    );\\n\\n    /**\\n     *  @notice Emitted when pool interest rate is updated.\\n     *  @param  oldRate Old pool interest rate.\\n     *  @param  newRate New pool interest rate.\\n     */\\n    event UpdateInterestRate(\\n        uint256 oldRate,\\n        uint256 newRate\\n    );\\n\\n    /**\\n     *  @notice Emitted when interest accural or update interest overflows.\\n     */\\n    event InterestUpdateFailure();\\n\\n}\"\r\n    },\r\n    \"lib/ajna-core/src/interfaces/pool/IERC3156FlashLender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\nimport { IERC3156FlashBorrower } from \\\"./IERC3156FlashBorrower.sol\\\";\\n\\n\\ninterface IERC3156FlashLender {\\n\\n    /**\\n     * @dev    The amount of currency available to be lent.\\n     * @param  token_ The loan currency.\\n     * @return The amount of `token` that can be borrowed (token precision).\\n     */\\n    function maxFlashLoan(\\n        address token_\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev    The fee to be charged for a given loan.\\n     * @param  token_    The loan currency.\\n     * @param  amount_   The amount of tokens lent (token precision).\\n     * @return The amount of `token` to be charged for the loan (token precision), on top of the returned principal .\\n     */\\n    function flashFee(\\n        address token_,\\n        uint256 amount_\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev    Initiate a flash loan.\\n     * @param  receiver_ The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param  token_    The loan currency.\\n     * @param  amount_   The amount of tokens lent (token precision).\\n     * @param  data_     Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return `True` when successful flashloan, `false` otherwise.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver_,\\n        address token_,\\n        uint256 amount_,\\n        bytes   calldata data_\\n    ) external returns (bool);\\n}\"\r\n    },\r\n    \"lib/ajna-core/lib/prb-math/contracts/PRBMathSD59x18.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathSD59x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with int256 numbers considered to have 18\\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\\nlibrary PRBMathSD59x18 {\\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\\n    int256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev Half the SCALE number.\\n    int256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_792003956564819967;\\n\\n    /// @dev The maximum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_WHOLE_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev The minimum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\\n\\n    /// @dev The minimum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_WHOLE_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    int256 internal constant SCALE = 1e18;\\n\\n    /// INTERNAL FUNCTIONS ///\\n\\n    /// @notice Calculate the absolute value of x.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than MIN_SD59x18.\\n    ///\\n    /// @param x The number to calculate the absolute value for.\\n    /// @param result The absolute value of x.\\n    function abs(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x == MIN_SD59x18) {\\n                revert PRBMathSD59x18__AbsInputTooSmall();\\n            }\\n            result = x < 0 ? -x : x;\\n        }\\n    }\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as a signed 59.18-decimal fixed-point number.\\n    function avg(int256 x, int256 y) internal pure returns (int256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            int256 sum = (x >> 1) + (y >> 1);\\n            if (sum < 0) {\\n                // If at least one of x and y is odd, we add 1 to the result. This is because shifting negative numbers to the\\n                // right rounds down to infinity.\\n                assembly {\\n                    result := add(sum, and(or(x, y), 1))\\n                }\\n            } else {\\n                // If both x and y are odd, we add 1 to the result. This is because if both numbers are odd, the 0.5\\n                // remainder gets truncated twice.\\n                result = sum + (x & y & 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the least greatest signed 59.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function ceil(int256 x) internal pure returns (int256 result) {\\n        if (x > MAX_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__CeilOverflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x > 0) {\\n                    result += SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Divides two signed 59.18-decimal fixed-point numbers, returning a new signed 59.18-decimal fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    /// - None of the inputs can be MIN_SD59x18.\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within int256.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    ///\\n    /// @param x The numerator as a signed 59.18-decimal fixed-point number.\\n    /// @param y The denominator as a signed 59.18-decimal fixed-point number.\\n    /// @param result The quotient as a signed 59.18-decimal fixed-point number.\\n    function div(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__DivInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x and y.\\n        uint256 ax;\\n        uint256 ay;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n        }\\n\\n        // Compute the absolute value of (x*SCALE)\u00f7y. The result must fit within int256.\\n        uint256 rAbs = PRBMath.mulDiv(ax, uint256(SCALE), ay);\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__DivOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x and y.\\n        uint256 sx;\\n        uint256 sy;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n        }\\n\\n        // XOR over sx and sy. This is basically checking whether the inputs have the same sign. If yes, the result\\n        // should be positive. Otherwise, it should be negative.\\n        result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns Euler's number as a signed 59.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (int256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\".\\n    /// - For any x less than -41.446531673892822322, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp(int256 x) internal pure returns (int256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be less than -59.794705707972522261.\\n        if (x < -41_446531673892822322) {\\n            return 0;\\n        }\\n\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathSD59x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            int256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - For any x less than -59.794705707972522261, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp2(int256 x) internal pure returns (int256 result) {\\n        // This works because 2^(-x) = 1/2^x.\\n        if (x < 0) {\\n            // 2^59.794705707972522262 is the maximum number whose inverse does not truncate down to zero.\\n            if (x < -59_794705707972522261) {\\n                return 0;\\n            }\\n\\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n            unchecked {\\n                result = 1e36 / exp2(-x);\\n            }\\n        } else {\\n            // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n            if (x >= 192e18) {\\n                revert PRBMathSD59x18__Exp2InputTooBig(x);\\n            }\\n\\n            unchecked {\\n                // Convert x to the 192.64-bit fixed-point format.\\n                uint256 x192x64 = (uint256(x) << 64) / uint256(SCALE);\\n\\n                // Safe to convert the result to int256 directly because the maximum input allowed is 192.\\n                result = int256(PRBMath.exp2(x192x64));\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the greatest signed 59.18 decimal fixed-point number less than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to MIN_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function floor(int256 x) internal pure returns (int256 result) {\\n        if (x < MIN_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__FloorUnderflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x < 0) {\\n                    result -= SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right\\n    /// of the radix point for negative numbers.\\n    /// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\\n    /// @param x The signed 59.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as a signed 59.18-decimal fixed-point number.\\n    function frac(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x % SCALE;\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to signed 59.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than or equal to MIN_SD59x18 divided by SCALE.\\n    /// - x must be less than or equal to MAX_SD59x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in signed 59.18-decimal fixed-point representation.\\n    function fromInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < MIN_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntUnderflow(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_SD59x18, lest it overflows.\\n    /// - x * y cannot be negative.\\n    ///\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function gm(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            int256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathSD59x18__GmOverflow(x, y);\\n            }\\n\\n            // The product cannot be negative.\\n            if (xy < 0) {\\n                revert PRBMathSD59x18__GmNegativeProduct(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = int256(PRBMath.sqrt(uint256(xy)));\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as a signed 59.18-decimal fixed-point number.\\n    function inv(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as a signed 59.18-decimal fixed-point number.\\n    function ln(int256 x) internal pure returns (int256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 195205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as a signed 59.18-decimal fixed-point number.\\n    function log10(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly mul operation, not the \\\"mul\\\" function defined in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            default {\\n                result := MAX_SD59x18\\n            }\\n        }\\n\\n        if (result == MAX_SD59x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than zero.\\n    ///\\n    /// Caveats:\\n    /// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\\n    function log2(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // This works because log2(x) = -log2(1/x).\\n            int256 sign;\\n            if (x >= SCALE) {\\n                sign = 1;\\n            } else {\\n                sign = -1;\\n                // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n                assembly {\\n                    x := div(1000000000000000000000000000000000000, x)\\n                }\\n            }\\n\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(uint256(x / SCALE));\\n\\n            // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\\n            result = int256(n) * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            int256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result * sign;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (int256 delta = int256(HALF_SCALE); delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n            result *= sign;\\n        }\\n    }\\n\\n    /// @notice Multiplies two signed 59.18-decimal fixed-point numbers together, returning a new signed 59.18-decimal\\n    /// fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers and employs constant folding, i.e. the denominator is\\n    /// always 1e18.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - None of the inputs can be MIN_SD59x18\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    ///\\n    /// @param x The multiplicand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The multiplier as a signed 59.18-decimal fixed-point number.\\n    /// @return result The product as a signed 59.18-decimal fixed-point number.\\n    function mul(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__MulInputTooSmall();\\n        }\\n\\n        unchecked {\\n            uint256 ax;\\n            uint256 ay;\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n\\n            uint256 rAbs = PRBMath.mulDivFixedPoint(ax, ay);\\n            if (rAbs > uint256(MAX_SD59x18)) {\\n                revert PRBMathSD59x18__MulOverflow(rAbs);\\n            }\\n\\n            uint256 sx;\\n            uint256 sy;\\n            assembly {\\n                sx := sgt(x, sub(0, 1))\\n                sy := sgt(y, sub(0, 1))\\n            }\\n            result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n        }\\n    }\\n\\n    /// @notice Returns PI as a signed 59.18-decimal fixed-point number.\\n    function pi() internal pure returns (int256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - z cannot be zero.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as a signed 59.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as a signed 59.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as a signed 59.18-decimal fixed-point number.\\n    function pow(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : int256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (signed 59.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"abs\\\" and \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as a signed 59.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function powu(int256 x, uint256 y) internal pure returns (int256 result) {\\n        uint256 xAbs = uint256(abs(x));\\n\\n        // Calculate the first iteration of the loop in advance.\\n        uint256 rAbs = y & 1 > 0 ? xAbs : uint256(SCALE);\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        uint256 yAux = y;\\n        for (yAux >>= 1; yAux > 0; yAux >>= 1) {\\n            xAbs = PRBMath.mulDivFixedPoint(xAbs, xAbs);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (yAux & 1 > 0) {\\n                rAbs = PRBMath.mulDivFixedPoint(rAbs, xAbs);\\n            }\\n        }\\n\\n        // The result must fit within the 59.18-decimal fixed-point representation.\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__PowuOverflow(rAbs);\\n        }\\n\\n        // Is the base negative and the exponent an odd number?\\n        bool isNegative = x < 0 && y & 1 == 1;\\n        result = isNegative ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns 1 as a signed 59.18-decimal fixed-point number.\\n    function scale() internal pure returns (int256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x cannot be negative.\\n    /// - x must be less than MAX_SD59x18 / SCALE.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as a signed 59.18-decimal fixed-point .\\n    function sqrt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < 0) {\\n                revert PRBMathSD59x18__SqrtNegativeInput(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two signed\\n            // 59.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = int256(PRBMath.sqrt(uint256(x * SCALE)));\\n        }\\n    }\\n\\n    /// @notice Converts a signed 59.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The signed 59.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/ajna-core/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/ajna-core/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/ajna-core/lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/ajna-core/src/interfaces/pool/IERC3156FlashBorrower.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\ninterface IERC3156FlashBorrower {\\n\\n    /**\\n     * @dev    Receive a flash loan.\\n     * @param  initiator The initiator of the loan.\\n     * @param  token     The loan currency.\\n     * @param  amount    The amount of tokens lent (token precision).\\n     * @param  fee       The additional amount of tokens to repay.\\n     * @param  data      Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The `keccak256` hash of `ERC3156FlashBorrower.onFlashLoan`\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes   calldata data\\n    ) external returns (bytes32);\\n}\"\r\n    },\r\n    \"lib/ajna-core/lib/prb-math/contracts/PRBMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@ajna-core/=lib/ajna-core/src/\",\r\n      \"@ajna-core-test/=lib/ajna-core/tests/forge/\",\r\n      \"@openzeppelin/contracts/=lib/ajna-core/lib/openzeppelin-contracts/contracts/\",\r\n      \"src/=src/\",\r\n      \"@base64-sol/=lib/ajna-core/lib/base64/\",\r\n      \"@clones/=lib/ajna-core/lib/clones-with-immutable-args/src/\",\r\n      \"@openzeppelin/contracts/=lib/ajna-core/lib/openzeppelin-contracts/contracts/\",\r\n      \"@prb-math/=lib/ajna-core/lib/prb-math/\",\r\n      \"@solmate/=lib/ajna-core/lib/solmate/src/\",\r\n      \"@std/=lib/ajna-core/lib/forge-std/src/\",\r\n      \"ajna-core/=lib/ajna-core/\",\r\n      \"base64/=lib/ajna-core/lib/base64/\",\r\n      \"clones-with-immutable-args/=lib/ajna-core/lib/clones-with-immutable-args/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/ajna-core/lib/openzeppelin-contracts/\",\r\n      \"prb-math/=lib/ajna-core/lib/prb-math/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"BucketIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientLP\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMathSD59x18__Exp2InputTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMathSD59x18__FromIntOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMathSD59x18__FromIntUnderflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMathSD59x18__LogInputTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMathSD59x18__MulInputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAbs\",\"type\":\"uint256\"}],\"name\":\"PRBMathSD59x18__MulOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoundedAmountExceededRequestedMaximum\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry_\",\"type\":\"uint256\"}],\"name\":\"addQuoteToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bucketLP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromIndex_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toIndex_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry_\",\"type\":\"uint256\"}],\"name\":\"moveQuoteToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fromBucketRedeemedLP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toBucketAwardedLP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"movedAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AjnaLenderHelper", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}