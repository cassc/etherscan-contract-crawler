{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interfaces/IGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\n/**\\n * @dev Interface made for the Curve's Gauge contract\\n */\\ninterface IGauge {\\n\\n    struct Reward {\\n        address token;\\n        address distributor;\\n        uint256 period_finish;\\n        uint256 rate;\\n        uint256 last_update;\\n        uint256 integral;\\n    }\\n\\n    function reward_data(address _reward_token) external view returns(Reward memory);\\n\\n    function deposit_reward_token(address _reward_token, uint256 _amount) external;\\n    function set_reward_distributor(address _reward_token, address _distributor) external;\\n    function add_reward(address _reward_token, address _distributor) external;\\n    \\n}\"\r\n    },\r\n    \"contracts/interfaces/IGaugeController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\n/**\\n * @dev Interface made for the Curve's GaugeController contract\\n */\\ninterface IGaugeController {\\n\\n    struct VotedSlope {\\n        uint slope;\\n        uint power;\\n        uint end;\\n    }\\n    \\n    struct Point {\\n        uint bias;\\n        uint slope;\\n    }\\n    \\n    function vote_user_slopes(address, address) external view returns(VotedSlope memory);\\n    function last_user_vote(address, address) external view returns(uint);\\n    function points_weight(address, uint256) external view returns(Point memory);\\n    function checkpoint_gauge(address) external;\\n    function gauge_types(address _addr) external view returns(int128);\\n    \\n}\"\r\n    },\r\n    \"contracts/interfaces/IQuestBoard.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"../libraries/QuestDataTypes.sol\\\";\\n\\n/** @title Interface fo Quest Board V2  */\\n/// @author Paladin\\ninterface IQuestBoard {\\n\\n    // Structs\\n\\n    /** @notice Struct for a Period of a Quest */\\n    struct QuestPeriod {\\n        // Total reward amount that can be distributed for that period\\n        uint256 rewardAmountPerPeriod;\\n        // Min Amount of reward for each vote (for 1 veToken)\\n        uint256 minRewardPerVote;\\n        // Max Amount of reward for each vote (for 1 veToken)\\n        uint256 maxRewardPerVote;\\n        // Min Target Bias for the Gauge\\n        uint256 minObjectiveVotes;\\n        // Max Target Bias for the Gauge\\n        uint256 maxObjectiveVotes;\\n        // Amount of reward to distribute, at period closing\\n        uint256 rewardAmountDistributed;\\n        // Timestamp of the Period start\\n        uint48 periodStart;\\n        // Current state of the Period\\n        QuestDataTypes.PeriodState currentState;\\n    }\\n\\n    /** @notice Struct holding the parameters of the Quest common for all periods */\\n    struct Quest {\\n        // Address of the Quest creator (caller of createQuest() method)\\n        address creator;\\n        // Address of the ERC20 used for rewards\\n        address rewardToken;\\n        // Address of the target Gauge\\n        address gauge;\\n        // Total number of periods for the Quest\\n        uint48 duration;\\n        // Timestamp where the 1st QuestPeriod starts\\n        uint48 periodStart;\\n        // Total amount of rewards paid for this Quest\\n        // If changes were made to the parameters of this Quest, this will account\\n        // any added reward amounts\\n        uint256 totalRewardAmount;\\n        // Quest Types\\n        QuestTypes types;\\n    }\\n\\n    /** @notice Struct with all the Quest types */\\n    struct QuestTypes {\\n        QuestDataTypes.QuestVoteType voteType;\\n        QuestDataTypes.QuestRewardsType rewardsType;\\n        QuestDataTypes.QuestCloseType closeType;\\n    }\\n\\n    /** @notice Struct for the local variables in _createQuest() method */\\n    struct CreateVars {\\n        address creator;\\n        uint256 rewardPerPeriod;\\n        uint256 minObjective;\\n        uint256 startPeriod;\\n        uint256 periodIterator;\\n        uint256 maxObjective;\\n    }\\n\\n    /** @notice Struct for the local variables in extendQuest() method */\\n    struct ExtendVars {\\n        uint256 lastPeriod;\\n        address gauge;\\n        address rewardToken;\\n        uint256 rewardPerPeriod;\\n        uint256 periodIterator;\\n        uint256 minObjective;\\n        uint256 maxObjective;\\n        uint256 minRewardPerVote;\\n        uint256 maxRewardPerVote;\\n    }\\n\\n    /** @notice Struct for the local variables in updateQuestParameters() methods */\\n    struct UpdateVars {\\n        uint256 remainingDuration;\\n        uint256 currentPeriod;\\n        uint256 newRewardPerPeriod;\\n        uint256 newMaxObjective;\\n        uint256 newMinObjective;\\n        uint256 periodIterator;\\n        uint256 lastPeriod;\\n        address creator;\\n    }\\n\\n    // Events\\n\\n    /** @notice Event emitted when the Board is Initialized */\\n    event Init(address distributor, address biasCalculator);\\n\\n    /** @notice Event emitted when a new Quest is created */\\n    event NewQuest(\\n        uint256 indexed questID,\\n        address indexed creator,\\n        address indexed gauge,\\n        address rewardToken,\\n        uint48 duration,\\n        uint256 startPeriod\\n    );\\n\\n    /** @notice Event emitted when the Quest duration is extended */\\n    event ExtendQuestDuration(uint256 indexed questID, uint256 addedDuration, uint256 addedRewardAmount);\\n\\n    /** @notice Event emitted when a Quest parameters are updated */\\n    event UpdateQuestParameters(\\n        uint256 indexed questID,\\n        uint256 indexed updatePeriod,\\n        uint256 newMinRewardPerVote,\\n        uint256 newMaxRewardPerVote,\\n        uint256 addedPeriodRewardAmount\\n    );\\n\\n    /** @notice Event emitted when Quest creator withdraw undistributed rewards */\\n    event WithdrawUnusedRewards(uint256 indexed questID, address recipient, uint256 amount);\\n\\n    /** @notice Event emitted when a Period is Closed */\\n    event PeriodClosed(uint256 indexed questID, uint256 indexed period);\\n    /** @notice Event emitted when a Quest Period rools over the undistributed rewards */\\n    event RewardsRollover(uint256 indexed questID, uint256 newRewardPeriod, uint256 newMinRewardPerVote, uint256 newMaxRewardPerVote);\\n\\n    /** @notice Event emitted when a Period Bias is fixed */\\n    event PeriodBiasFixed(uint256 indexed questID, uint256 indexed period, uint256 newBias);\\n\\n    /** @notice Event emitted when a new reward token is whitelisted */\\n    event WhitelistToken(address indexed token, uint256 minRewardPerVote);\\n    /** @notice Event emitted when a reward token parameter is updated */\\n    event UpdateRewardToken(address indexed token, uint256 newMinRewardPerVote);\\n    /** @notice Event emitted when the contract is killed */\\n    event Killed(uint256 killTime);\\n    /** @notice Event emitted when the contract is unkilled */\\n    event Unkilled(uint256 unkillTime);\\n    /** @notice Event emitted when the Quest creator withdraw all unused funds (if the contract was killed) */\\n    event EmergencyWithdraw(uint256 indexed questID, address recipient, uint256 amount);\\n\\n    /** @notice Event emitted when a new manager is approved */\\n    event ApprovedManager(address indexed manager);\\n    /** @notice Event emitted when a manager is removed */\\n    event RemovedManager(address indexed manager);\\n    /** @notice Event emitted when the Chest address is updated */\\n    event ChestUpdated(address oldChest, address newChest);\\n    /** @notice Event emitted when a custom fee ratio is set for a given address */\\n    event SetCustomFeeRatio(address indexed creator, uint256 customFeeRatio);\\n    /** @notice Event emitted when the Distributor address is updated */\\n    event DistributorUpdated(address oldDistributor, address newDistributor);\\n    /** @notice Event emitted when the fee ratio is updated */\\n    event PlatformFeeRatioUpdated(uint256 oldFeeRatio, uint256 newFeeRatio);\\n    /** @notice Event emitted when the minimum objective of votes is updated */\\n    event MinObjectiveUpdated(uint256 oldMinObjective, uint256 newMinObjective);\\n    \\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Errors.sol\": {\r\n      \"content\": \"pragma solidity 0.8.16;\\n//SPDX-License-Identifier: MIT\\n\\nlibrary Errors {\\n\\n    // Common Errors\\n    error AddressZero();\\n    error NullAmount();\\n    error CallerNotAllowed();\\n    error IncorrectRewardToken();\\n    error SameAddress();\\n    error InequalArraySizes();\\n    error EmptyArray();\\n    error EmptyParameters();\\n    error AlreadyInitialized();\\n    error InvalidParameter();\\n    error CannotRecoverToken();\\n    error ForbiddenCall();\\n\\n    error CannotBeOwner();\\n    error CallerNotPendingOwner();\\n\\n    error Killed();\\n    error AlreadyKilled();\\n    error NotKilled();\\n    error KillDelayExpired();\\n    error KillDelayNotExpired();\\n\\n\\n    // Merkle Errors\\n    error MerkleRootNotUpdated();\\n    error AlreadyClaimed();\\n    error InvalidProof();\\n    error EmptyMerkleRoot();\\n    error IncorrectRewardAmount();\\n    error MerkleRootFrozen();\\n    error NotFrozen();\\n    error AlreadyFrozen();\\n\\n\\n    // Quest Errors\\n    error CallerNotQuestBoard();\\n    error IncorrectQuestID();\\n    error IncorrectPeriod();\\n    error TokenNotWhitelisted();\\n    error QuestAlreadyListed();\\n    error QuestNotListed();\\n    error PeriodAlreadyUpdated();\\n    error PeriodNotClosed();\\n    error PeriodStillActive();\\n    error PeriodNotListed();\\n    error EmptyQuest();\\n    error EmptyPeriod();\\n    error ExpiredQuest();\\n    error QuestNotStarted();\\n\\n    error NotInitialized();\\n    error NoDistributorSet();\\n    error DisitributorFail();\\n    error InvalidGauge();\\n    error InvalidQuestID();\\n    error InvalidPeriod();\\n    error ObjectiveTooLow();\\n    error NewObjectiveTooLow();\\n    error RewardPerVoteTooLow();\\n    error MinValueOverMaxValue();\\n    error IncorrectDuration();\\n    error IncorrectAddDuration();\\n    error IncorrectTotalRewardAmount();\\n    error IncorrectAddedRewardAmount();\\n    error IncorrectFeeAmount();\\n    error InvalidQuestType();\\n    error QuestTypesIncompatible();\\n    error CalletNotQuestCreator();\\n    error LowerRewardPerVote();\\n    error LowerObjective();\\n    error CreatorNotAllowed();\\n    error AlreadyListed();\\n    error NotListed();\\n    error MaxListSize();\\n    error BoardIsNotAllowedDistributor();\\n\\n\\n    //Math\\n    error NumberExceed48Bits();\\n\\n}\"\r\n    },\r\n    \"contracts/libraries/QuestDataTypes.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.16;\\n\\n/** @title Data Types fo Quest Board V2  */\\n/// @author Paladin\\nlibrary QuestDataTypes {\\n\\n    // Enums\\n\\n    /** @notice State of each Period for each Quest */\\n    enum PeriodState { ZERO, ACTIVE, CLOSED, DISTRIBUTED }\\n    // All Periods are ACTIVE at creation since the voters from past periods are also accounted for the future period\\n\\n    /** @notice Types of Vote logic for Quests */\\n    enum QuestVoteType { NORMAL, BLACKLIST, WHITELIST }\\n    // NORMAL: basic vote logic\\n    // BLACKLIST: remove the blacklisted voters bias from the gauge biases\\n    // WHITELIST: only sum up the whitelisted voters biases\\n\\n    /** @notice Types of Rewards logic for Quests */\\n    enum QuestRewardsType { FIXED, RANGE }\\n    // FIXED: reward per vote is fixed\\n    // RANGE: reward per vote is a range between min and max, based on the Quest completion between min objective and max objective\\n\\n    /** @notice Types of logic for undistributed rewards when closing Quest periods */\\n    enum QuestCloseType { NORMAL, ROLLOVER, DISTRIBUTE }\\n    // NORMAL: undistributed rewards are available to be withdrawn by the creator\\n    // ROLLOVER: undistributed rewards are added to the next period, increasing the reward/vote parameter\\n    // DISTRIBUTE: undistributed rewards are sent to the gauge for direct distribution\\n\\n}\\n\"\r\n    },\r\n    \"contracts/modules/BiasCalculator.sol\": {\r\n      \"content\": \"//\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557      \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\\n//\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\\n//\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\\n//\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\\n//\u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\\n//\u255a\u2550\u255d     \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\\n \\n\\n//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nimport \\\"../interfaces/IGaugeController.sol\\\";\\nimport \\\"../libraries/QuestDataTypes.sol\\\";\\nimport \\\"../QuestBoard.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\n\\n/** @title Quest Bias Calculator Module  */\\n/// @author Paladin\\n/*\\n    Contract to calculate the bias of a given Quest based on the Gauge & Quest parameters\\n*/\\ncontract BiasCalculator {\\n\\n    /** @notice Seconds in a Week */\\n    uint256 private constant WEEK = 604800;\\n    /** @notice Max VoterList size */\\n    uint256 private constant MAX_VOTERLIST_SIZE = 10;\\n\\n    /** @notice Address of the Curve Gauge Controller */\\n    address public immutable GAUGE_CONTROLLER;\\n\\n    /** @notice Address of the QuestBoard contract */\\n    address public immutable questBoard;\\n\\n    /** @notice Mapping of voter list (blacklist or whitelist) for each Quest */\\n    // ID => VoterList\\n    mapping(uint256 => address[]) private questVoterList;\\n    /** @notice Mapping of valid Quests */\\n    mapping(uint256 => bool) private validQuests;\\n\\n\\n    // Events\\n\\n    /** @notice Event emitted when an address is added to a Quest voter list */\\n    event AddToVoterList(uint256 indexed questID, address indexed account);\\n    /** @notice Event emitted when an address is removed from a Quest voter list */\\n    event RemoveFromVoterList(uint256 indexed questID, address indexed account);\\n\\n\\n    // Modifier\\n\\n    /** @notice Check the caller is the QuestBoard contract */\\n    modifier onlyBoard(){\\n        if(msg.sender != questBoard) revert Errors.CallerNotAllowed();\\n        _;\\n    }\\n\\n\\n    // Constructor\\n    constructor(address _gaugeController, address _questBoard) {\\n        if(_gaugeController == address(0) || _questBoard == address(0)) revert Errors.AddressZero();\\n\\n        questBoard = _questBoard;\\n        GAUGE_CONTROLLER = _gaugeController;\\n    }\\n\\n    /**\\n    * @notice Returns the current Period for the contract\\n    */\\n    function getCurrentPeriod() public view returns(uint256) {\\n        return (block.timestamp / WEEK) * WEEK;\\n    }\\n\\n    /**\\n    * @notice Returns the voter list for a given Quest\\n    * @param questID ID of the Quest\\n    * @return address[] : vote list\\n    */\\n    function getQuestVoterList(uint256 questID) external view returns(address[] memory){\\n        return questVoterList[questID];\\n    }\\n\\n    /**\\n    * @notice Returns the current reduced bias for a given gauge (based on a Quest's voter list)\\n    * @param questID ID of the Quest\\n    * @param gauge address of the gauge\\n    * @param questType Vote type of the Quest\\n    * @return uint256 : current reduced bias\\n    */\\n    function getCurrentReducedBias(uint256 questID, address gauge, QuestDataTypes.QuestVoteType questType) external view returns(uint256) {\\n        uint256 nextPeriod = getCurrentPeriod() + WEEK;\\n\\n        return getReducedBias(nextPeriod, questID, gauge, questType);\\n    }\\n\\n    /**\\n    * @notice Returns the reduced bias for a given gauge for a given period (based on a Quest's voter list)\\n    * @param period timestamp of the period\\n    * @param questID ID of the Quest\\n    * @param gauge address of the gauge\\n    * @param questType Vote type of the Quest\\n    * @return uint256 : current reduced bias\\n    */\\n    function getReducedBias(uint256 period, uint256 questID, address gauge, QuestDataTypes.QuestVoteType questType) public view returns(uint256) {\\n        address[] memory voterList = questVoterList[questID];\\n\\n        IGaugeController gaugeController = IGaugeController(GAUGE_CONTROLLER);\\n\\n        uint256 voterListSumBias;\\n\\n        uint256 voterListLength = voterList.length;\\n            for(uint256 i; i < voterListLength;) {\\n                voterListSumBias += _getVoterBias(gauge, voterList[i], period);\\n\\n                unchecked { i++; }\\n            }\\n\\n        // For a WHITELIST type, simply return the sum of voters bias\\n        if(questType == QuestDataTypes.QuestVoteType.WHITELIST) return voterListSumBias;\\n\\n        // Get the bias of the Gauge for the given period\\n        uint256 periodAdjustedBias = gaugeController.points_weight(gauge, period).bias;\\n\\n        // If the Quest is a Blacklist, we need to remove the bias of the voters\\n        if(questType == QuestDataTypes.QuestVoteType.BLACKLIST) {\\n            periodAdjustedBias = voterListSumBias >= periodAdjustedBias ? 0 : periodAdjustedBias - voterListSumBias;\\n        }\\n        \\n        return periodAdjustedBias;\\n    }\\n\\n    /**\\n    * @notice Returns the bias for a given voter for a given gauge, at a given period\\n    * @param gauge address of the gauge\\n    * @param voter address of the voter\\n    * @param period timestamp of the period\\n    * @return userBias (uint256) : voter bias\\n    */\\n    function _getVoterBias(address gauge, address voter, uint256 period) internal view returns(uint256 userBias) {\\n        IGaugeController gaugeController = IGaugeController(GAUGE_CONTROLLER);\\n        uint256 lastUserVote = gaugeController.last_user_vote(voter, gauge);\\n        IGaugeController.VotedSlope memory voteUserSlope = gaugeController.vote_user_slopes(voter, gauge);\\n\\n        if(lastUserVote >= period) return 0;\\n        if(voteUserSlope.end <= period) return 0;\\n        if(voteUserSlope.slope == 0) return 0;\\n\\n        userBias = voteUserSlope.slope * (voteUserSlope.end - period);\\n    }\\n\\n    /**\\n    * @notice Adds a given address to a Quest's voter list\\n    * @dev Adds a given address to a Quest's voter list\\n    * @param questID ID of the Quest\\n    * @param account address of the voter\\n    */\\n    function _addToVoterList(uint256 questID, address account) internal {\\n        //We don't want to have 2x the same address in the list\\n        address[] memory _list = questVoterList[questID];\\n        uint256 length = _list.length;\\n        for(uint256 i; i < length;){\\n            if(_list[i] == account) revert Errors.AlreadyListed();\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        questVoterList[questID].push(account);\\n\\n        emit AddToVoterList(questID, account);\\n    }\\n\\n    /**\\n    * @notice Sets the initial voter list for a given Quest\\n    * @param questID ID of the Quest\\n    * @param accounts list of voters\\n    */\\n    function setQuestVoterList(uint256 questID, address[] calldata accounts) external onlyBoard {\\n        uint256 length = accounts.length;\\n        if(length > MAX_VOTERLIST_SIZE) revert Errors.MaxListSize();\\n\\n        for(uint256 i; i < length;){\\n            if(accounts[i] == address(0)) revert Errors.AddressZero();\\n\\n            _addToVoterList(questID, accounts[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        validQuests[questID] = true;\\n    }\\n\\n    /**\\n    * @notice Adds a given list of addresses to a Quest's voter list\\n    * @param questID ID of the Quest\\n    * @param accounts list of voters\\n    */\\n    function addToVoterList(uint256 questID, address[] calldata accounts) external {\\n        uint256 length = accounts.length;\\n        if(length == 0) revert Errors.EmptyArray();\\n        if(!validQuests[questID]) revert Errors.InvalidQuestID();\\n        if(msg.sender != QuestBoard(questBoard).getQuestCreator(questID)) revert Errors.CallerNotAllowed();\\n        if(length + questVoterList[questID].length > MAX_VOTERLIST_SIZE) revert Errors.MaxListSize();\\n\\n\\n        for(uint256 i = 0; i < length;){\\n            if(accounts[i] == address(0)) revert Errors.AddressZero();\\n\\n            _addToVoterList(questID, accounts[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n    * @notice Removes a given address from a Quest's voter list\\n    * @param questID ID of the Quest\\n    * @param account address of the voter\\n    */\\n    function removeFromVoterList(uint256 questID, address account) external {\\n        if(!validQuests[questID]) revert Errors.InvalidQuestID();\\n        if(msg.sender != QuestBoard(questBoard).getQuestCreator(questID)) revert Errors.CallerNotAllowed();\\n        if(account == address(0)) revert Errors.AddressZero();\\n\\n        address[] memory _list = questVoterList[questID];\\n        uint256 length = _list.length;\\n\\n        for(uint256 i; i < length;){\\n            if(_list[i] == account){\\n                if(i != length - 1){\\n                    questVoterList[questID][i] = _list[length - 1];\\n                }\\n                questVoterList[questID].pop();\\n\\n                emit RemoveFromVoterList(questID, account);\\n\\n                return;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/MultiMerkleDistributor.sol\": {\r\n      \"content\": \"//\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557      \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\\n//\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\\n//\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\\n//\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\\n//\u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\\n//\u255a\u2550\u255d     \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\\n \\n\\n//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nimport \\\"./oz/interfaces/IERC20.sol\\\";\\nimport \\\"./oz/libraries/SafeERC20.sol\\\";\\nimport \\\"./oz/utils/MerkleProof.sol\\\";\\nimport \\\"./utils/Owner.sol\\\";\\nimport \\\"./oz/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./libraries/Errors.sol\\\";\\n\\n/** @title Quest Multi Merkle Distributor  */\\n/// @author Paladin\\n/*\\n    Contract holds ERC20 rewards from Quests\\n    Can handle multiple MerkleRoots\\n*/\\n\\ncontract MultiMerkleDistributor is Owner, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /** @notice Seconds in a Week */\\n    uint256 private constant WEEK = 604800;\\n\\n    /** @notice Mapping listing the reward token associated to each Quest ID */\\n    // QuestID => reward token\\n    mapping(uint256 => address) public questRewardToken;\\n\\n    /** @notice Mapping of tokens this contract is or was distributing */\\n    // token address => boolean\\n    mapping(address => bool) public rewardTokens;\\n\\n    // Periods: timestamp => start of a week, used as a voting period \\n    // in the Curve GaugeController though the timestamp / WEEK *  WEEK logic.\\n    // Handled through the QuestManager contract.\\n    // Those can be fetched through this contract when they are closed, or through the QuestManager contract.\\n\\n    /** @notice List of Closed QuestPeriods by Quest ID */\\n    // QuestID => array of periods\\n    mapping(uint256 => uint256[]) public questClosedPeriods;\\n\\n    /** @notice Merkle Root for each period of a Quest (indexed by Quest ID) */\\n    // QuestID => period => merkleRoot\\n    mapping(uint256 => mapping(uint256 => bytes32)) public questMerkleRootPerPeriod;\\n\\n    /** @notice Amount of rewards for each period of a Quest (indexed by Quest ID) */\\n    // QuestID => period => totalRewardsAmount\\n    mapping(uint256 => mapping(uint256 => uint256)) public questRewardsPerPeriod;\\n\\n    /** @notice BitMap of claims for each period of a Quest */\\n    // QuestID => period => claimedBitMap\\n    // This is a packed array of booleans.\\n    mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256))) private questPeriodClaimedBitMap;\\n\\n    /** @notice Address of the QuestBoard contract */\\n    address public immutable questBoard;\\n\\n\\n    // Events\\n\\n    /** @notice Event emitted when a user Claims */\\n    event Claimed(\\n        uint256 indexed questID,\\n        uint256 indexed period,\\n        uint256 index,\\n        uint256 amount,\\n        address rewardToken,\\n        address indexed account\\n    );\\n    /** @notice Event emitted when a New Quest is added */\\n    event NewQuest(uint256 indexed questID, address rewardToken);\\n    /** @notice Event emitted when a Period of a Quest is updated (when the Merkle Root is added) */\\n    event QuestPeriodUpdated(uint256 indexed questID, uint256 indexed period, bytes32 merkleRoot);\\n\\n\\n    // Modifier\\n\\n    /** @notice Check the caller is either the admin or the QuestBoard contract */\\n    modifier onlyAllowed(){\\n        if(msg.sender != questBoard && msg.sender != owner()) revert Errors.CallerNotAllowed();\\n        _;\\n    }\\n\\n\\n    // Constructor\\n\\n    constructor(address _questBoard){\\n        if(_questBoard == address(0)) revert Errors.AddressZero();\\n\\n        questBoard = _questBoard;\\n    }\\n\\n    // Functions\\n   \\n    /**\\n    * @notice Checks if the rewards were claimed for a user on a given period\\n    * @dev Checks if the rewards were claimed for a user (based on the index) on a given period\\n    * @param questID ID of the Quest\\n    * @param period Amount of underlying to borrow\\n    * @param index Index of the claim\\n    * @return bool : true if already claimed\\n    */\\n    function isClaimed(uint256 questID, uint256 period, uint256 index) public view returns (bool) {\\n        uint256 claimedWordIndex = index >> 8;\\n        uint256 claimedBitIndex = index & 0xff;\\n        uint256 claimedWord = questPeriodClaimedBitMap[questID][period][claimedWordIndex];\\n        uint256 mask = (1 << claimedBitIndex);\\n        return claimedWord & mask != 0;\\n    }\\n   \\n    /**\\n    * @dev Sets the rewards as claimed for the index on the given period\\n    * @param questID ID of the Quest\\n    * @param period Timestamp of the period\\n    * @param index Index of the claim\\n    */\\n    function _setClaimed(uint256 questID, uint256 period, uint256 index) private {\\n        uint256 claimedWordIndex = index >> 8;\\n        uint256 claimedBitIndex = index & 0xff;\\n        questPeriodClaimedBitMap[questID][period][claimedWordIndex] |= (1 << claimedBitIndex);\\n    }\\n\\n    //Basic Claim   \\n    /**\\n    * @notice Claims the reward for a user for a given period of a Quest\\n    * @dev Claims the reward for a user for a given period of a Quest if the correct proof was given\\n    * @param questID ID of the Quest\\n    * @param period Timestamp of the period\\n    * @param index Index in the Merkle Tree\\n    * @param account Address of the user claiming the rewards\\n    * @param amount Amount of rewards to claim\\n    * @param merkleProof Proof to claim the rewards\\n    */\\n    function claim(uint256 questID, uint256 period, uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) public nonReentrant {\\n        if(account == address(0)) revert Errors.AddressZero();\\n        if(questMerkleRootPerPeriod[questID][period] == 0) revert Errors.MerkleRootNotUpdated();\\n        if(isClaimed(questID, period, index)) revert Errors.AlreadyClaimed();\\n\\n        // Check that the given parameters match the given Proof\\n        bytes32 node = keccak256(abi.encodePacked(questID, period, index, account, amount));\\n        if(!MerkleProof.verify(merkleProof, questMerkleRootPerPeriod[questID][period], node)) revert Errors.InvalidProof();\\n\\n        // Set the rewards as claimed for that period\\n        // And transfer the rewards to the user\\n        address rewardToken = questRewardToken[questID];\\n        _setClaimed(questID, period, index);\\n        questRewardsPerPeriod[questID][period] -= amount;\\n        IERC20(rewardToken).safeTransfer(account, amount);\\n\\n        emit Claimed(questID, period, index, amount, rewardToken, account);\\n    }\\n\\n\\n    //Struct ClaimParams\\n    struct ClaimParams {\\n        uint256 questID;\\n        uint256 period;\\n        uint256 index;\\n        uint256 amount;\\n        bytes32[] merkleProof;\\n    }\\n\\n\\n    //Multi Claim   \\n    /**\\n    * @notice Claims multiple rewards for a given list\\n    * @dev Calls the claim() method for each entry in the claims array\\n    * @param account Address of the user claiming the rewards\\n    * @param claims List of ClaimParams struct data to claim\\n    */\\n    function multiClaim(address account, ClaimParams[] calldata claims) external {\\n        uint256 length = claims.length;\\n        \\n        if(length == 0) revert Errors.EmptyParameters();\\n\\n        for(uint256 i; i < length;){\\n            claim(claims[i].questID, claims[i].period, claims[i].index, account, claims[i].amount, claims[i].merkleProof);\\n\\n            unchecked{ ++i; }\\n        }\\n    }\\n\\n\\n    //FullQuest Claim (form of Multi Claim but for only one Quest => only one ERC20 transfer)\\n    //Only works for the given periods (in ClaimParams) for the Quest. Any omitted period will be skipped   \\n    /**\\n    * @notice Claims the reward for all the given periods of a Quest, and transfer all the rewards at once\\n    * @dev Sums up all the rewards for given periods of a Quest, and executes only one transfer\\n    * @param account Address of the user claiming the rewards\\n    * @param questID ID of the Quest\\n    * @param claims List of ClaimParams struct data to claim\\n    */\\n    function claimQuest(address account, uint256 questID, ClaimParams[] calldata claims) external nonReentrant {\\n        if(account == address(0)) revert Errors.AddressZero();\\n        uint256 length = claims.length;\\n\\n        if(length == 0) revert Errors.EmptyParameters();\\n\\n        // Total amount claimable, to transfer at once\\n        uint256 totalClaimAmount;\\n        address rewardToken = questRewardToken[questID];\\n\\n        for(uint256 i; i < length;){\\n            if(claims[i].questID != questID) revert Errors.IncorrectQuestID();\\n            if(questMerkleRootPerPeriod[questID][claims[i].period] == 0) revert Errors.MerkleRootNotUpdated();\\n            if(isClaimed(questID, claims[i].period, claims[i].index)) revert Errors.AlreadyClaimed();\\n\\n            // For each period given, if the proof matches the given parameters, \\n            // set as claimed and add to the to total to transfer\\n            bytes32 node = keccak256(abi.encodePacked(questID, claims[i].period, claims[i].index, account, claims[i].amount));\\n            if(!MerkleProof.verify(claims[i].merkleProof, questMerkleRootPerPeriod[questID][claims[i].period], node)) revert Errors.InvalidProof();\\n\\n            _setClaimed(questID, claims[i].period, claims[i].index);\\n            questRewardsPerPeriod[questID][claims[i].period] -= claims[i].amount;\\n            totalClaimAmount += claims[i].amount;\\n\\n            emit Claimed(questID, claims[i].period, claims[i].index, claims[i].amount, rewardToken, account);\\n\\n            unchecked{ ++i; }\\n        }\\n\\n        // Transfer the total claimed amount\\n        IERC20(rewardToken).safeTransfer(account, totalClaimAmount);\\n    }\\n\\n   \\n    /**\\n    * @notice Returns all current Closed periods for the given Quest ID\\n    * @dev Returns all current Closed periods for the given Quest ID\\n    * @param questID ID of the Quest\\n    * @return uint256[] : List of closed periods\\n    */\\n    function getClosedPeriodsByQuests(uint256 questID) external view returns (uint256[] memory) {\\n        return questClosedPeriods[questID];\\n    }\\n\\n\\n\\n    // Manager functions\\n   \\n    /**\\n    * @notice Adds a new Quest to the listing\\n    * @dev Adds a new Quest ID and the associated reward token\\n    * @param questID ID of the Quest\\n    * @param token Address of the ERC20 reward token\\n    * @return bool : success\\n    */\\n    function addQuest(uint256 questID, address token) external returns(bool) {\\n        if(msg.sender != questBoard) revert Errors.CallerNotAllowed();\\n        if(questRewardToken[questID] != address(0)) revert Errors.QuestAlreadyListed();\\n        if(token == address(0)) revert Errors.TokenNotWhitelisted();\\n\\n        // Add a new Quest using the QuestID, and list the reward token for that Quest\\n        questRewardToken[questID] = token;\\n\\n        if(!rewardTokens[token]) rewardTokens[token] = true;\\n\\n        emit NewQuest(questID, token);\\n\\n        return true;\\n    }\\n\\n    /**\\n    * @notice Adds a new period & the rewards of this period for a Quest\\n    * @dev Adds a new period & the rewards of this period for a Quest\\n    * @param questID ID of the Quest\\n    * @param period Timestamp of the period\\n    * @param totalRewardAmount Total amount of rewards to distribute for the period\\n    * @return bool : success\\n    */\\n    function addQuestPeriod(uint256 questID, uint256 period, uint256 totalRewardAmount) external returns(bool) {\\n        period = (period / WEEK) * WEEK;\\n        if(msg.sender != questBoard) revert Errors.CallerNotAllowed();\\n        if(questRewardToken[questID] == address(0)) revert Errors.QuestNotListed();\\n        if(questRewardsPerPeriod[questID][period] != 0) revert Errors.PeriodAlreadyUpdated();\\n        if(period == 0) revert Errors.IncorrectPeriod();\\n        if(totalRewardAmount == 0) revert Errors.NullAmount();\\n\\n        questRewardsPerPeriod[questID][period] = totalRewardAmount;\\n\\n        return true;\\n    }\\n\\n\\n    function fixQuestPeriod(uint256 questID, uint256 period, uint256 newTotalRewardAmount) external returns(bool) {\\n        if(msg.sender != questBoard) revert Errors.CallerNotAllowed();\\n        period = (period / WEEK) * WEEK;\\n        if(questRewardToken[questID] == address(0)) revert Errors.QuestNotListed();\\n        if(period == 0) revert Errors.IncorrectPeriod();\\n        if(questRewardsPerPeriod[questID][period] == 0) revert Errors.PeriodNotListed();\\n\\n        uint256 previousTotalRewardAmount = questRewardsPerPeriod[questID][period];\\n\\n        questRewardsPerPeriod[questID][period] = newTotalRewardAmount;\\n\\n        if(previousTotalRewardAmount > newTotalRewardAmount){\\n            // Send back the extra amount of reward token that was incorrectly sent\\n            // In the case of missing reward token, the Board will send them to this contract\\n\\n            uint256 extraAmount = previousTotalRewardAmount - newTotalRewardAmount;\\n            IERC20(questRewardToken[questID]).safeTransfer(questBoard, extraAmount);\\n        }\\n\\n        return true;\\n    }\\n   \\n    /**\\n    * @notice Updates the period of a Quest by adding the Merkle Root\\n    * @dev Add the Merkle Root for the eriod of the given Quest\\n    * @param questID ID of the Quest\\n    * @param period timestamp of the period\\n    * @param totalAmount sum of all rewards for the Merkle Tree\\n    * @param merkleRoot MerkleRoot to add\\n    * @return bool: success\\n    */\\n    function updateQuestPeriod(uint256 questID, uint256 period, uint256 totalAmount, bytes32 merkleRoot) external onlyAllowed returns(bool) {\\n        period = (period / WEEK) * WEEK;\\n        if(questRewardToken[questID] == address(0)) revert Errors.QuestNotListed();\\n        if(period == 0) revert Errors.IncorrectPeriod();\\n        if(questRewardsPerPeriod[questID][period] == 0) revert Errors.PeriodNotListed();\\n        if(questMerkleRootPerPeriod[questID][period] != 0) revert Errors.PeriodAlreadyUpdated();\\n        if(merkleRoot == 0) revert Errors.EmptyMerkleRoot();\\n\\n        // Add a new Closed Period for the Quest\\n        questClosedPeriods[questID].push(period);\\n\\n        if(totalAmount != questRewardsPerPeriod[questID][period]) revert Errors.IncorrectRewardAmount();\\n\\n        // Add the new MerkleRoot for that Closed Period\\n        questMerkleRootPerPeriod[questID][period] = merkleRoot;\\n\\n        emit QuestPeriodUpdated(questID, period, merkleRoot);\\n\\n        return true;\\n    }\\n\\n\\n    //  Admin functions\\n   \\n    /**\\n    * @notice Recovers ERC2O tokens sent by mistake to the contract\\n    * @dev Recovers ERC2O tokens sent by mistake to the contract\\n    * @param token Address tof the EC2O token\\n    * @return bool: success\\n    */\\n    function recoverERC20(address token) external onlyOwner nonReentrant returns(bool) {\\n        if(rewardTokens[token]) revert Errors.CannotRecoverToken();\\n        uint256 amount = IERC20(token).balanceOf(address(this));\\n        if(amount == 0) revert Errors.NullAmount();\\n        IERC20(token).safeTransfer(owner(), amount);\\n\\n        return true;\\n    }\\n\\n    // \\n    /**\\n    * @notice Allows to update the MerkleRoot for a given period of a Quest if the current Root is incorrect\\n    * @dev Updates the MerkleRoot for the period of the Quest\\n    * @param questID ID of the Quest\\n    * @param period Timestamp of the period\\n    * @param merkleRoot New MerkleRoot to add\\n    * @return bool : success\\n    */\\n    function emergencyUpdateQuestPeriod(uint256 questID, uint256 period, uint256 addedRewardAmount, bytes32 merkleRoot) external onlyOwner returns(bool) {\\n        // In case the given MerkleRoot was incorrect:\\n        // Process:\\n        // 1 - block claims for the Quest period by using this method to set an incorrect MerkleRoot, where no proof matches the root\\n        // 2 - prepare a new Merkle Tree, taking in account user previous claims on that period, and missing/overpaid rewards\\n        //      a - for all new claims to be added, set them after the last index of the previous Merkle Tree\\n        //      b - for users that did not claim, keep the same index, and adjust the amount to claim if needed\\n        //      c - for indexes that were claimed, place an empty node in the Merkle Tree (with an amount at 0 & the address 0xdead as the account)\\n        // 3 - update the Quest period with the correct MerkleRoot\\n        // (no need to change the Bitmap, as the new MerkleTree will account for the indexes already claimed)\\n\\n        period = (period / WEEK) * WEEK;\\n        if(questRewardToken[questID] == address(0)) revert Errors.QuestNotListed();\\n        if(period == 0) revert Errors.IncorrectPeriod();\\n        if(questMerkleRootPerPeriod[questID][period] == 0) revert Errors.PeriodNotClosed();\\n        if(merkleRoot == 0) revert Errors.EmptyMerkleRoot();\\n\\n        questMerkleRootPerPeriod[questID][period] = merkleRoot;\\n\\n        questRewardsPerPeriod[questID][period] += addedRewardAmount;\\n\\n        emit QuestPeriodUpdated(questID, period, merkleRoot);\\n\\n        return true;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/oz/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\"\r\n    },\r\n    \"contracts/oz/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/oz/libraries/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/oz/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/oz/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"contracts/oz/utils/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/oz/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    },\r\n    \"contracts/oz/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\"\r\n    },\r\n    \"contracts/QuestBoard.sol\": {\r\n      \"content\": \"//\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557      \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\\n//\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\\n//\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\\n//\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\\n//\u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\\n//\u255a\u2550\u255d     \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\\n \\n\\n//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nimport \\\"./oz/interfaces/IERC20.sol\\\";\\nimport \\\"./oz/libraries/SafeERC20.sol\\\";\\nimport \\\"./oz/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./libraries/QuestDataTypes.sol\\\";\\nimport \\\"./interfaces/IQuestBoard.sol\\\";\\nimport \\\"./interfaces/IGaugeController.sol\\\";\\nimport \\\"./interfaces/IGauge.sol\\\";\\nimport \\\"./MultiMerkleDistributor.sol\\\";\\nimport \\\"./modules/BiasCalculator.sol\\\";\\nimport \\\"./utils/Owner.sol\\\";\\nimport \\\"./libraries/Errors.sol\\\";\\n\\n/** @title Warden Quest Board V2  */\\n/// @author Paladin\\n/*\\n    V2 of Quest Board allowing to blacklist or whitelist veToken voters\\n    and chose between fixed or ranged rewards distribution\\n*/\\n\\ncontract QuestBoard is IQuestBoard, Owner, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // Storage\\n\\n    /** @notice Address of the Curve Gauge Controller */\\n    address public immutable GAUGE_CONTROLLER;\\n\\n    /** @notice Seconds in a Week */\\n    uint256 private constant WEEK = 604800;\\n    /** @notice 1e18 scale */\\n    uint256 private constant UNIT = 1e18;\\n    /** @notice Max BPS value (100%) */\\n    uint256 private constant MAX_BPS = 10000;\\n    /** @notice Delay where contract can be unkilled */\\n    uint256 private constant KILL_DELAY = 2 * 604800; //2 weeks\\n\\n    /** @notice ID for the next Quest to be created */\\n    uint256 public nextID;\\n\\n    /** @notice List of Quest (indexed by ID) */\\n    // ID => Quest\\n    mapping(uint256 => Quest) public quests;\\n    /** @notice List of timestamp periods the Quest is active in */\\n    // QuestID => Periods (timestamps)\\n    mapping(uint256 => uint48[]) private questPeriods;\\n    /** @notice Mapping of all QuestPeriod struct for each period of each Quest */\\n    // QuestID => period => QuestPeriod\\n    mapping(uint256 => mapping(uint256 => QuestPeriod)) public periodsByQuest;\\n    /** @notice All the Quests present in this period */\\n    // period => array of Quest\\n    mapping(uint256 => uint256[]) private questsByPeriod;\\n    /** @notice All the Quests present in this period for each gauge */\\n    // gauge => period => array of Quest\\n    mapping(address => mapping(uint256 => uint256[])) private questsByGaugeByPeriod;\\n    /** @notice Mapping of Distributors used by each Quest to send rewards */\\n    // ID => Distributor\\n    mapping(uint256 => address) public questDistributors;\\n    /** @notice Amount not distributed, for Quest creators to redeem */\\n    mapping(uint256 => uint256) public questWithdrawableAmount;\\n\\n\\n    /** @notice Platform fees ratio (in BPS) */\\n    uint256 public platformFeeRatio = 400;\\n    /** @notice Mapping of specific fee ratio for some Quest creators */\\n    // Creator => specific fee\\n    mapping(address => uint256) public customPlatformFeeRatio;\\n\\n    /** @notice Minimum Objective required */\\n    uint256 public objectiveMinimalThreshold;\\n\\n    /** @notice Address of the Chest to receive platform fees */\\n    address public questChest;\\n    /** @notice Address of the reward Distributor contract */\\n    address public distributor;\\n    /** @notice Address of the Bias Calculator Module */\\n    address public biasCalculator;\\n\\n    /** @notice Mapping of addresses allowed to call manager methods */\\n    mapping(address => bool) private approvedManagers;\\n    /** @notice Whitelisted tokens that can be used as reward tokens */\\n    mapping(address => bool) public whitelistedTokens;\\n    /** @notice Min rewardPerVote per token (to avoid spam creation of useless Quest) */\\n    mapping(address => uint256) public minRewardPerVotePerToken;\\n\\n    /** @notice Boolean, true if the cotnract was killed, stopping main user functions */\\n    bool public isKilled;\\n    /** @notice Timestamp when the contract was killed */\\n    uint256 public killTs;\\n\\n    \\n\\n    // Modifiers\\n\\n    /** @notice Check the caller is either the admin or an approved manager */\\n    modifier onlyAllowed(){\\n        if(!approvedManagers[msg.sender] && msg.sender != owner()) revert Errors.CallerNotAllowed();\\n        _;\\n    }\\n\\n    /** @notice Check that contract was not killed */\\n    modifier isAlive(){\\n        if(isKilled) revert Errors.Killed();\\n        _;\\n    }\\n\\n    /** @notice Check that contract was initialized */\\n    modifier isInitialized(){\\n        if(distributor == address(0)) revert Errors.NotInitialized();\\n        _;\\n    }\\n\\n\\n    // Constructor\\n    constructor(address _gaugeController, address _chest){\\n        if(\\n            _gaugeController == address(0)\\n            || _chest == address(0)\\n        ) revert Errors.AddressZero();\\n\\n        GAUGE_CONTROLLER = _gaugeController;\\n\\n        questChest = _chest;\\n\\n        objectiveMinimalThreshold = 1000 * UNIT;\\n    }\\n\\n   \\n    /**\\n    * @notice Initialize the contract\\n    * @param _distributor Address of the Distributor\\n    * @param _biasCalculator Address of the Bias Calculator\\n    */\\n    function init(address _distributor, address _biasCalculator) external onlyOwner {\\n        if(distributor != address(0)) revert Errors.AlreadyInitialized();\\n        if(_distributor == address(0) || _biasCalculator == address(0)) revert Errors.AddressZero();\\n\\n        distributor = _distributor;\\n        biasCalculator= _biasCalculator;\\n\\n        emit Init(_distributor, _biasCalculator);\\n    }\\n\\n\\n    // View Functions\\n   \\n    /**\\n    * @notice Returns the current Period for the contract\\n    * @dev Returns the current Period for the contract\\n    */\\n    function getCurrentPeriod() public view returns(uint256) {\\n        return (block.timestamp / WEEK) * WEEK;\\n    }\\n   \\n    /**\\n    * @notice Returns the list of all Quest IDs active on a given period\\n    * @dev Returns the list of all Quest IDs active on a given period\\n    * @param period Timestamp of the period\\n    * @return uint256[] : Quest IDs for the period\\n    */\\n    function getQuestIdsForPeriod(uint256 period) external view returns(uint256[] memory) {\\n        period = (period / WEEK) * WEEK;\\n        return questsByPeriod[period];\\n    }\\n   \\n    /**\\n    * @notice Returns the list of all Quest IDs active on a given period\\n    * @dev Returns the list of all Quest IDs active on a given period\\n    * @param period Timestamp of the period\\n    * @return uint256[] : Quest IDs for the period\\n    */\\n    function getQuestIdsForPeriodForGauge(address gauge, uint256 period) external view returns(uint256[] memory) {\\n        period = (period / WEEK) * WEEK;\\n        return questsByGaugeByPeriod[gauge][period];\\n    }\\n   \\n    /**\\n    * @notice Returns all periods for a Quest\\n    * @dev Returns all period timestamps for a Quest ID\\n    * @param questId ID of the Quest\\n    * @return uint256[] : List of period timestamps\\n    */\\n    function getAllPeriodsForQuestId(uint256 questId) external view returns(uint48[] memory) {\\n        return questPeriods[questId];\\n    }\\n   \\n    /**\\n    * @notice Returns all QuestPeriod of a given Quest\\n    * @dev Returns all QuestPeriod of a given Quest ID\\n    * @param questId ID of the Quest\\n    * @return QuestPeriod[] : list of QuestPeriods\\n    */\\n    function getAllQuestPeriodsForQuestId(uint256 questId) external view returns(QuestPeriod[] memory) {\\n        uint256 nbPeriods = questPeriods[questId].length;\\n        QuestPeriod[] memory periods = new QuestPeriod[](nbPeriods);\\n        for(uint256 i; i < nbPeriods;){\\n            periods[i] = periodsByQuest[questId][questPeriods[questId][i]];\\n            unchecked{ ++i; }\\n        }\\n        return periods;\\n    }\\n   \\n    /**\\n    * @notice Returns the number of periods to come for a given Quest\\n    * @dev Returns the number of periods to come for a given Quest\\n    * @param questID ID of the Quest\\n    * @return uint : remaining duration (non active periods)\\n    */\\n    function _getRemainingDuration(uint256 questID) internal view returns(uint256) {\\n        // Since we have the current period, the start period for the Quest, and each period is 1 WEEK\\n        // We can find the number of remaining periods in the Quest simply by dividing the remaining time between\\n        // currentPeriod and the last QuestPeriod start, plus 1 WEEK, by a WEEK.\\n        // If the current period is the last period of the Quest, we want to return 1\\n        if(questPeriods[questID].length == 0) revert Errors.EmptyQuest();\\n        uint256 lastPeriod = questPeriods[questID][questPeriods[questID].length - 1];\\n        uint256 currentPeriod = getCurrentPeriod();\\n        return lastPeriod < currentPeriod ? 0: ((lastPeriod - currentPeriod) + WEEK) / WEEK;\\n    }\\n\\n    /**\\n    * @notice Returns the current reduced bias of a gauge for a given Quest\\n    * @dev Returns the current reduced bias of a gauge for a given Quest\\n    * @param questID ID of the Quest\\n    * @return uint256 : current reduced bias of the gauge\\n    */\\n    function getCurrentReducedBias(uint256 questID) external view returns(uint256) {\\n        return BiasCalculator(biasCalculator).getCurrentReducedBias(\\n            questID,\\n            quests[questID].gauge,\\n            quests[questID].types.voteType\\n        );\\n    }\\n\\n    /**\\n    * @notice Returns the address of the Quest creator\\n    * @dev Returns the address of the Quest creator\\n    * @param questID ID of the Quest\\n    * @return address : creator of the Quest\\n    */\\n    function getQuestCreator(uint256 questID) external view returns(address){\\n        return quests[questID].creator;\\n    }\\n\\n\\n    // Functions\\n\\n    /**\\n    * @notice Creates a fixed rewards Quest based on the given parameters\\n    * @dev Creates a Quest based on the given parameters & the given types with the Fixed Rewards type\\n    * @param gauge Address of the gauge\\n    * @param rewardToken Address of the reward token\\n    * @param startNextPeriod (bool) true to start the Quest the next period\\n    * @param duration Duration of the Quest (in weeks)\\n    * @param rewardPerVote Amount of reward/vote (in wei)\\n    * @param totalRewardAmount Total amount of rewards available for the full Quest duration\\n    * @param feeAmount Amount of fees paid at creation\\n    * @param voteType Vote type for the Quest\\n    * @param closeType Close type for the Quest\\n    * @param voterList List of voters for the Quest (to be used for Blacklist or Whitelist)\\n    * @return uint256 : ID of the newly created Quest\\n    */\\n    function createFixedQuest(\\n        address gauge,\\n        address rewardToken,\\n        bool startNextPeriod,\\n        uint48 duration,\\n        uint256 rewardPerVote,\\n        uint256 totalRewardAmount,\\n        uint256 feeAmount,\\n        QuestDataTypes.QuestVoteType voteType,\\n        QuestDataTypes.QuestCloseType closeType,\\n        address[] calldata voterList\\n    ) external nonReentrant isAlive isInitialized returns(uint256) {\\n        // Set the Quest Types for the new Quest\\n        QuestTypes memory types = QuestTypes({\\n            voteType: voteType,\\n            rewardsType: QuestDataTypes.QuestRewardsType.FIXED,\\n            closeType: closeType\\n        });\\n\\n        return _createQuest(\\n            gauge,\\n            rewardToken,\\n            types,\\n            startNextPeriod,\\n            duration,\\n            rewardPerVote,\\n            rewardPerVote,\\n            totalRewardAmount,\\n            feeAmount,\\n            voterList\\n        );\\n    }\\n\\n    /**\\n    * @notice Creates a ranged rewards Quest based on the given parameters\\n    * @dev Creates a Quest based on the given parameters & the given types with the Ranged Rewards type\\n    * @param gauge Address of the gauge\\n    * @param rewardToken Address of the reward token\\n    * @param startNextPeriod (bool) true to start the Quest the next period\\n    * @param duration Duration of the Quest (in weeks)\\n    * @param minRewardPerVote Minimum amount of reward/vote (in wei)\\n    * @param maxRewardPerVote Maximum amount of reward/vote (in wei)\\n    * @param totalRewardAmount Total amount of rewards available for the full Quest duration\\n    * @param feeAmount Amount of fees paid at creation\\n    * @param voteType Vote type for the Quest\\n    * @param closeType Close type for the Quest\\n    * @param voterList List of voters for the Quest (to be used for Blacklist or Whitelist)\\n    * @return uint256 : ID of the newly created Quest\\n    */\\n    function createRangedQuest(\\n        address gauge,\\n        address rewardToken,\\n        bool startNextPeriod,\\n        uint48 duration,\\n        uint256 minRewardPerVote,\\n        uint256 maxRewardPerVote,\\n        uint256 totalRewardAmount,\\n        uint256 feeAmount,\\n        QuestDataTypes.QuestVoteType voteType,\\n        QuestDataTypes.QuestCloseType closeType,\\n        address[] calldata voterList\\n    ) external nonReentrant isAlive isInitialized returns(uint256) {\\n        // Set the Quest Types for the new Quest\\n        QuestTypes memory types = QuestTypes({\\n            voteType: voteType,\\n            rewardsType: QuestDataTypes.QuestRewardsType.RANGE,\\n            closeType: closeType\\n        });\\n\\n        return _createQuest(\\n            gauge,\\n            rewardToken,\\n            types,\\n            startNextPeriod,\\n            duration,\\n            minRewardPerVote,\\n            maxRewardPerVote,\\n            totalRewardAmount,\\n            feeAmount,\\n            voterList\\n        );\\n    }\\n\\n    /**\\n    * @notice Creates a Quest based on the given parameters\\n    * @dev Creates a Quest based on the given parameters & the given types\\n    * @param gauge Address of the gauge\\n    * @param rewardToken Address of the reward token\\n    * @param types Quest Types (Rewards, Vote & Close)\\n    * @param startNextPeriod (bool) true to start the Quest the next period\\n    * @param duration Duration of the Quest (in weeks)\\n    * @param minRewardPerVote Minimum amount of reward/vote (in wei)\\n    * @param maxRewardPerVote Maximum amount of reward/vote (in wei)\\n    * @param totalRewardAmount Total amount of rewards available for the full Quest duration\\n    * @param feeAmount Amount of fees paid at creation\\n    * @param voterList List of voters for the Quest (to be used for Blacklist or Whitelist)\\n    * @return newQuestID (uint256) : ID of the newly created Quest\\n    */\\n    function _createQuest(\\n        address gauge,\\n        address rewardToken,\\n        QuestTypes memory types,\\n        bool startNextPeriod,\\n        uint48 duration,\\n        uint256 minRewardPerVote,\\n        uint256 maxRewardPerVote,\\n        uint256 totalRewardAmount,\\n        uint256 feeAmount,\\n        address[] calldata voterList\\n    ) internal returns(uint256 newQuestID) {\\n        // Local memory variables\\n        CreateVars memory vars;\\n        vars.creator = msg.sender;\\n\\n        // Check all parameters\\n        if(gauge == address(0) || rewardToken == address(0)) revert Errors.AddressZero();\\n        if(IGaugeController(GAUGE_CONTROLLER).gauge_types(gauge) < 0) revert Errors.InvalidGauge();\\n        if(!whitelistedTokens[rewardToken]) revert Errors.TokenNotWhitelisted();\\n        if(duration == 0) revert Errors.IncorrectDuration();\\n        if(minRewardPerVote == 0 || maxRewardPerVote == 0 || totalRewardAmount == 0 || feeAmount == 0) revert Errors.NullAmount();\\n        if(minRewardPerVote < minRewardPerVotePerToken[rewardToken]) revert Errors.RewardPerVoteTooLow();\\n        if(minRewardPerVote > maxRewardPerVote) revert Errors.MinValueOverMaxValue();\\n        if(types.rewardsType == QuestDataTypes.QuestRewardsType.FIXED && minRewardPerVote != maxRewardPerVote) revert Errors.InvalidQuestType();\\n        if((totalRewardAmount * _getFeeRatio(msg.sender))/MAX_BPS != feeAmount) revert Errors.IncorrectFeeAmount();\\n\\n        // Calculate the reward per period, and the max vote objective per period\\n        vars.rewardPerPeriod = totalRewardAmount / duration;\\n        vars.maxObjective = (vars.rewardPerPeriod * UNIT) / minRewardPerVote;\\n\\n        // And based on the Quest Rewards type, calculate the min vote objective per period\\n        if(types.rewardsType == QuestDataTypes.QuestRewardsType.RANGE) {\\n            // For a Ranged Quest, calculate it based on the max reward per vote\\n            vars.minObjective = (vars.rewardPerPeriod * UNIT) / maxRewardPerVote;\\n        } else {\\n            // Otherwise, min == max\\n            vars.minObjective = vars.maxObjective;\\n        }\\n\\n        if(vars.minObjective < objectiveMinimalThreshold) revert Errors.ObjectiveTooLow();\\n\\n        // Pull all the rewards in this contract\\n        IERC20(rewardToken).safeTransferFrom(vars.creator, address(this), totalRewardAmount);\\n        // And transfer the fees from the Quest creator to the Chest contract\\n        IERC20(rewardToken).safeTransferFrom(vars.creator, questChest, feeAmount);\\n\\n        // Get the period when the Quest starts (current or next period)\\n        vars.startPeriod = getCurrentPeriod();\\n        if(startNextPeriod) vars.startPeriod += WEEK;\\n\\n        // Get the ID for that new Quest and increment the nextID counter\\n        newQuestID = nextID;\\n        unchecked{ ++nextID; }\\n\\n        // Fill the Quest struct data\\n        quests[newQuestID].creator = vars.creator;\\n        quests[newQuestID].rewardToken = rewardToken;\\n        quests[newQuestID].gauge = gauge;\\n        quests[newQuestID].types = types;\\n        quests[newQuestID].duration = duration;\\n        quests[newQuestID].totalRewardAmount = totalRewardAmount;\\n        quests[newQuestID].periodStart = safe48(vars.startPeriod);\\n\\n        //Set the current Distributor as the one to receive the rewards for users for that Quest\\n        questDistributors[newQuestID] = distributor;\\n\\n        // Iterate on periods based on Quest duration\\n        vars.periodIterator = vars.startPeriod;\\n        for(uint256 i; i < duration;){\\n            // Add the Quest on the list of Quests active on the period\\n            questsByPeriod[vars.periodIterator].push(newQuestID);\\n            questsByGaugeByPeriod[gauge][vars.periodIterator].push(newQuestID);\\n\\n            // And add the period in the list of periods of the Quest\\n            questPeriods[newQuestID].push(safe48(vars.periodIterator));\\n\\n            periodsByQuest[newQuestID][vars.periodIterator].periodStart = safe48(vars.periodIterator);\\n            periodsByQuest[newQuestID][vars.periodIterator].minObjectiveVotes = vars.minObjective;\\n            periodsByQuest[newQuestID][vars.periodIterator].maxObjectiveVotes = vars.maxObjective;\\n            periodsByQuest[newQuestID][vars.periodIterator].minRewardPerVote = minRewardPerVote;\\n            periodsByQuest[newQuestID][vars.periodIterator].maxRewardPerVote = maxRewardPerVote;\\n            periodsByQuest[newQuestID][vars.periodIterator].rewardAmountPerPeriod = vars.rewardPerPeriod;\\n            periodsByQuest[newQuestID][vars.periodIterator].currentState = QuestDataTypes.PeriodState.ACTIVE;\\n\\n            vars.periodIterator = ((vars.periodIterator + WEEK) / WEEK) * WEEK;\\n\\n            unchecked{ ++i; }\\n        }\\n\\n        if(voterList.length > 0) {\\n            // Set the voterlist for this Quest\\n            BiasCalculator(biasCalculator).setQuestVoterList(newQuestID, voterList);\\n        }\\n\\n        if(types.closeType == QuestDataTypes.QuestCloseType.DISTRIBUTE){\\n            // Check if the Board is allowed to distribute rewards to the gauge\\n            // If not, we want to revert and the creator to chose another Close type\\n            if(IGauge(gauge).reward_data(rewardToken).distributor != address(this)) revert Errors.BoardIsNotAllowedDistributor();\\n        }\\n\\n        // Add that Quest & the reward token in the Distributor\\n        if(!MultiMerkleDistributor(distributor).addQuest(newQuestID, rewardToken)) revert Errors.DisitributorFail();\\n\\n        emit NewQuest(\\n            newQuestID,\\n            msg.sender,\\n            gauge,\\n            rewardToken,\\n            duration,\\n            vars.startPeriod\\n        );\\n    }\\n\\n    /**\\n    * @notice Increases the duration of a Quest\\n    * @dev Adds more QuestPeriods and extends the duration of a Quest\\n    * @param questID ID of the Quest\\n    * @param addedDuration Number of period to add\\n    * @param addedRewardAmount Amount of reward to add for the new periods (in wei)\\n    * @param feeAmount Platform fees amount (in wei)\\n    */\\n    function extendQuestDuration(\\n        uint256 questID,\\n        uint48 addedDuration,\\n        uint256 addedRewardAmount,\\n        uint256 feeAmount\\n    ) external nonReentrant isAlive isInitialized {\\n        // Local memory variables\\n        ExtendVars memory vars;\\n\\n        if(questID >= nextID) revert Errors.InvalidQuestID();\\n        if(msg.sender != quests[questID].creator) revert Errors.CallerNotAllowed();\\n        if(addedRewardAmount == 0 || feeAmount == 0) revert Errors.NullAmount();\\n        if(addedDuration == 0) revert Errors.IncorrectAddDuration();\\n\\n        // We take data from the last period of the Quest to account for any other changes in the Quest parameters\\n        if(questPeriods[questID].length == 0) revert Errors.EmptyQuest();\\n        vars.lastPeriod = questPeriods[questID][questPeriods[questID].length - 1];\\n        \\n        if(periodsByQuest[questID][questPeriods[questID][0]].periodStart >= block.timestamp) revert Errors.QuestNotStarted();\\n        if(vars.lastPeriod < getCurrentPeriod()) revert Errors.ExpiredQuest();\\n\\n        // Check that the given amounts are correct\\n        vars.rewardPerPeriod = periodsByQuest[questID][vars.lastPeriod].rewardAmountPerPeriod;\\n\\n        if((vars.rewardPerPeriod * addedDuration) != addedRewardAmount) revert Errors.IncorrectAddedRewardAmount();\\n        if((addedRewardAmount * _getFeeRatio(msg.sender))/MAX_BPS != feeAmount) revert Errors.IncorrectFeeAmount();\\n\\n        vars.gauge = quests[questID].gauge;\\n        vars.rewardToken = quests[questID].rewardToken;\\n        // Pull all the rewards in this contract\\n        IERC20(vars.rewardToken).safeTransferFrom(msg.sender, address(this), addedRewardAmount);\\n        // And transfer the fees from the Quest creator to the Chest contract\\n        IERC20(vars.rewardToken).safeTransferFrom(msg.sender, questChest, feeAmount);\\n\\n        vars.periodIterator = ((vars.lastPeriod + WEEK) / WEEK) * WEEK;\\n\\n        // Update the Quest struct with added reward admounts & added duration\\n        quests[questID].totalRewardAmount += addedRewardAmount;\\n        quests[questID].duration += addedDuration;\\n\\n        vars.minObjective = periodsByQuest[questID][vars.lastPeriod].minObjectiveVotes;\\n        vars.maxObjective = periodsByQuest[questID][vars.lastPeriod].maxObjectiveVotes;\\n        vars.minRewardPerVote = periodsByQuest[questID][vars.lastPeriod].minRewardPerVote;\\n        vars.maxRewardPerVote = periodsByQuest[questID][vars.lastPeriod].maxRewardPerVote;\\n\\n        // Add QuestPeriods for the new added duration\\n        for(uint256 i; i < addedDuration;){\\n            questsByPeriod[vars.periodIterator].push(questID);\\n            questsByGaugeByPeriod[quests[questID].gauge][vars.periodIterator].push(questID);\\n\\n            questPeriods[questID].push(safe48(vars.periodIterator));\\n\\n            periodsByQuest[questID][vars.periodIterator].periodStart = safe48(vars.periodIterator);\\n            periodsByQuest[questID][vars.periodIterator].minObjectiveVotes = vars.minObjective;\\n            periodsByQuest[questID][vars.periodIterator].maxObjectiveVotes = vars.maxObjective;\\n            periodsByQuest[questID][vars.periodIterator].minRewardPerVote = vars.minRewardPerVote;\\n            periodsByQuest[questID][vars.periodIterator].maxRewardPerVote = vars.maxRewardPerVote;\\n            periodsByQuest[questID][vars.periodIterator].rewardAmountPerPeriod = vars.rewardPerPeriod;\\n            periodsByQuest[questID][vars.periodIterator].currentState = QuestDataTypes.PeriodState.ACTIVE;\\n            vars.periodIterator = ((vars.periodIterator + WEEK) / WEEK) * WEEK;\\n\\n            unchecked{ ++i; }\\n        }\\n\\n        emit ExtendQuestDuration(questID, addedDuration, addedRewardAmount);\\n\\n    }\\n      \\n    /**\\n    * @notice Updates the parametes of the Quest\\n    * @dev Updates the reward/vote parameters, allowing to update the Quest objectives too\\n    * @param questID ID of the Quest\\n    * @param newMinRewardPerVote New min reward/vote value (in wei)\\n    * @param newMaxRewardPerVote New max reward/vote value (in wei)\\n    * @param addedPeriodRewardAmount Amount of reward to add for each period (in wei)\\n    * @param addedTotalRewardAmount Amount of reward to add for all periods (in wei)\\n    * @param feeAmount Platform fees amount (in wei)\\n    */\\n    function updateQuestParameters(\\n        uint256 questID,\\n        uint256 newMinRewardPerVote,\\n        uint256 newMaxRewardPerVote,\\n        uint256 addedPeriodRewardAmount,\\n        uint256 addedTotalRewardAmount,\\n        uint256 feeAmount\\n    ) external nonReentrant isAlive isInitialized {\\n        // Local memory variables\\n        UpdateVars memory vars;\\n\\n        if(questID >= nextID) revert Errors.InvalidQuestID();\\n        if(msg.sender != quests[questID].creator) revert Errors.CallerNotAllowed();\\n        if(newMinRewardPerVote == 0 || newMaxRewardPerVote == 0) revert Errors.NullAmount();\\n        if(newMinRewardPerVote > newMaxRewardPerVote) revert Errors.MinValueOverMaxValue();\\n        if(quests[questID].types.rewardsType == QuestDataTypes.QuestRewardsType.FIXED && newMinRewardPerVote != newMaxRewardPerVote) revert Errors.InvalidQuestType();\\n\\n        // Check the reamining duration, and that the given reward amounts are correct\\n        vars.remainingDuration = _getRemainingDuration(questID); //Also handles the Empty Quest check\\n        if(vars.remainingDuration == 0) revert Errors.ExpiredQuest();\\n        if(periodsByQuest[questID][questPeriods[questID][0]].periodStart >= block.timestamp) revert Errors.QuestNotStarted();\\n        if((addedPeriodRewardAmount * vars.remainingDuration) != addedTotalRewardAmount) revert Errors.IncorrectAddedRewardAmount();\\n        if((addedTotalRewardAmount * _getFeeRatio(msg.sender))/MAX_BPS != feeAmount) revert Errors.IncorrectFeeAmount();\\n\\n        // The new min reward amount must be higher \\n        vars.currentPeriod = getCurrentPeriod();\\n        if(newMinRewardPerVote < periodsByQuest[questID][vars.currentPeriod].minRewardPerVote) revert Errors.LowerRewardPerVote();\\n\\n        // Get the amount of reward for each period\\n        vars.newRewardPerPeriod = periodsByQuest[questID][vars.currentPeriod].rewardAmountPerPeriod + addedPeriodRewardAmount;\\n\\n        // Calculate the new max vote objective, and the min vote objective based on the Quest Rewards type\\n        vars.newMaxObjective = (vars.newRewardPerPeriod * UNIT) / newMinRewardPerVote;\\n        vars.newMinObjective;\\n        if(quests[questID].types.rewardsType == QuestDataTypes.QuestRewardsType.RANGE) {\\n            vars.newMinObjective = (vars.newRewardPerPeriod * UNIT) / newMaxRewardPerVote;\\n        } else {\\n            vars.newMinObjective = vars.newMaxObjective;\\n        }\\n        \\n        if(\\n            vars.newMinObjective < periodsByQuest[questID][vars.currentPeriod].minObjectiveVotes\\n        ) revert Errors.NewObjectiveTooLow();\\n\\n        if(addedTotalRewardAmount > 0) {\\n            address rewardToken = quests[questID].rewardToken;\\n            // Pull all the rewards in this contract\\n            IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), addedTotalRewardAmount);\\n            // And transfer the fees from the Quest creator to the Chest contract\\n            IERC20(rewardToken).safeTransferFrom(msg.sender, questChest, feeAmount);\\n        }\\n\\n        vars.periodIterator = vars.currentPeriod;\\n\\n        vars.lastPeriod = questPeriods[questID][questPeriods[questID].length - 1];\\n\\n        // Update the Quest struct with the added reward amount\\n        quests[questID].totalRewardAmount += addedTotalRewardAmount;\\n\\n        // Update all QuestPeriods, starting with the currentPeriod one\\n        for(uint256 i; i < vars.remainingDuration;){\\n\\n            if(vars.periodIterator > vars.lastPeriod) break; //Safety check, we never want to write on non-initialized QuestPeriods (that were not initialized)\\n\\n            // And update each QuestPeriod with the new values\\n            periodsByQuest[questID][vars.periodIterator].minRewardPerVote = newMinRewardPerVote;\\n            periodsByQuest[questID][vars.periodIterator].maxRewardPerVote = newMaxRewardPerVote;\\n            periodsByQuest[questID][vars.periodIterator].minObjectiveVotes = vars.newMinObjective;\\n            periodsByQuest[questID][vars.periodIterator].maxObjectiveVotes = vars.newMaxObjective;\\n            periodsByQuest[questID][vars.periodIterator].rewardAmountPerPeriod = vars.newRewardPerPeriod;\\n\\n            vars.periodIterator = ((vars.periodIterator + WEEK) / WEEK) * WEEK;\\n\\n            unchecked{ ++i; }\\n        }\\n\\n        emit UpdateQuestParameters(\\n            questID,\\n            vars.currentPeriod,\\n            newMinRewardPerVote,\\n            newMaxRewardPerVote,\\n            addedPeriodRewardAmount\\n        );\\n    }\\n   \\n    /**\\n    * @notice Withdraw all undistributed rewards from Closed Quest Periods\\n    * @dev Withdraw all undistributed rewards from Closed Quest Periods\\n    * @param questID ID of the Quest\\n    * @param recipient Address to send the reward tokens to\\n    */\\n    function withdrawUnusedRewards(uint256 questID, address recipient) external nonReentrant isAlive isInitialized {\\n        if(questID >= nextID) revert Errors.InvalidQuestID();\\n        if(msg.sender != quests[questID].creator) revert Errors.CallerNotAllowed();\\n        if(recipient == address(0)) revert Errors.AddressZero();\\n\\n        // Total amount available to withdraw\\n        uint256 withdrawAmount = questWithdrawableAmount[questID];\\n        questWithdrawableAmount[questID] = 0;\\n\\n        // If there is a non null amount of token to withdraw, execute a transfer\\n        if(withdrawAmount != 0){\\n            address rewardToken = quests[questID].rewardToken;\\n            IERC20(rewardToken).safeTransfer(recipient, withdrawAmount);\\n\\n            emit WithdrawUnusedRewards(questID, recipient, withdrawAmount);\\n        }\\n    }\\n   \\n    /**\\n    * @notice Emergency withdraws all undistributed rewards from Closed Quest Periods & all rewards for Active Periods\\n    * @dev Emergency withdraws all undistributed rewards from Closed Quest Periods & all rewards for Active Periods\\n    * @param questID ID of the Quest\\n    * @param recipient Address to send the reward tokens to\\n    */\\n    function emergencyWithdraw(uint256 questID, address recipient) external nonReentrant {\\n        if(!isKilled) revert Errors.NotKilled();\\n        if(block.timestamp < killTs + KILL_DELAY) revert Errors.KillDelayNotExpired();\\n\\n        if(questID >= nextID) revert Errors.InvalidQuestID();\\n        if(msg.sender != quests[questID].creator) revert Errors.CallerNotAllowed();\\n        if(recipient == address(0)) revert Errors.AddressZero();\\n\\n        // Total amount to emergency withdraw\\n        uint256 withdrawAmount = questWithdrawableAmount[questID];\\n        questWithdrawableAmount[questID] = 0;\\n\\n        uint48[] memory _questPeriods = questPeriods[questID];\\n        uint256 length = _questPeriods.length;\\n        for(uint256 i; i < length;){\\n            QuestPeriod storage _questPeriod = periodsByQuest[questID][_questPeriods[i]];\\n\\n            // For ACTIVE periods\\n            if(_questPeriod.currentState == QuestDataTypes.PeriodState.ACTIVE){\\n                // For the active period, and the next ones, withdraw the total reward amount\\n                withdrawAmount += _questPeriod.rewardAmountPerPeriod;\\n                _questPeriod.rewardAmountPerPeriod = 0;\\n            }\\n\\n            unchecked{ ++i; }\\n        }\\n\\n        // If the total amount to emergency withdraw is non_null, execute a transfer\\n        if(withdrawAmount != 0){\\n            IERC20(quests[questID].rewardToken).safeTransfer(recipient, withdrawAmount);\\n\\n            emit EmergencyWithdraw(questID, recipient, withdrawAmount);\\n        }\\n\\n    }\\n\\n    /**\\n    * @notice Get the fee ratio for a given Quest creator\\n    * @dev Returns the custom fee ratio for a Quest creator if set, otherwise returns the general fee ratio\\n    * @param questCreator address of the Quest creator\\n    * @return uint256 : fee ratio\\n    */\\n    function _getFeeRatio(address questCreator) internal view returns(uint256) {\\n        return customPlatformFeeRatio[questCreator] != 0 ? customPlatformFeeRatio[questCreator] : platformFeeRatio;\\n    }\\n\\n\\n    // Manager functions\\n\\n    /**\\n    * @notice Gets the amount of rewards to be distributed for the period\\n    * @dev Gets the amount of rewards to be distributed for the\\n    * @param questRewardType Rewards type for the Quest\\n    * @param periodBias Bias of the gauge (reduced if nedded) for the given period\\n    * @param _questPeriod Data for the Quest Period\\n    * @return uint256 : Amount to be distributed\\n    */\\n    function _getDistributionAmount(\\n        QuestDataTypes.QuestRewardsType questRewardType,\\n        uint256 periodBias,\\n        QuestPeriod memory _questPeriod\\n    ) internal pure returns(uint256) {\\n        // Here, if the Gauge Bias is equal or greater than the objective, \\n        // set all the period reward to be distributed.\\n        // If the bias is less, we take that bias, and calculate the amount of rewards based\\n        // on the rewardPerVote & the Gauge bias\\n\\n        // If the votes received exceed the max objective of the Quest (for both types)\\n        // Distribute all the rewards for the period\\n        if(periodBias >= _questPeriod.maxObjectiveVotes) return _questPeriod.rewardAmountPerPeriod;\\n\\n        if(questRewardType == QuestDataTypes.QuestRewardsType.FIXED) {\\n            return (periodBias * _questPeriod.minRewardPerVote) / UNIT;\\n        } else { // For QuestDataTypes.QuestRewardsType.RANGE\\n                // If the bias is under the minimum objective, use max reward/vote\\n            if(periodBias <= _questPeriod.minObjectiveVotes) return (periodBias * _questPeriod.maxRewardPerVote) / UNIT;\\n            else return _questPeriod.rewardAmountPerPeriod;\\n        }\\n    }\\n\\n    /**\\n    * @notice Handles the Quest period undistributed rewards\\n    * @dev Handles the Quest period undistributed rewards based on the Quest Close type\\n    * @param questID ID of the Quest\\n    * @param currentPeriod Timestamp of the current period\\n    * @param questCloseType Close type for the Quest\\n    * @param rewardToken Address of the reward token\\n    * @param undistributedAmount Amount of token not distributed for voter rewards\\n    */\\n    function _handleUndistributedRewards(\\n        uint256 questID,\\n        uint256 currentPeriod,\\n        QuestDataTypes.QuestCloseType questCloseType,\\n        address rewardToken,\\n        uint256 undistributedAmount\\n    ) internal {\\n        if(undistributedAmount == 0) return;\\n\\n        if(questCloseType == QuestDataTypes.QuestCloseType.ROLLOVER) {\\n            // Since this type is only allowed for FIXED Rewards Quests\\n            // We simply recalculate the next period reward/vote based on the current Objective\\n            uint256 nextPeriod = currentPeriod + WEEK;\\n            // If not the last period\\n            if(nextPeriod > questPeriods[questID][questPeriods[questID].length - 1]) {\\n                // This the Quest last period, no period to rollover to\\n                questWithdrawableAmount[questID] += undistributedAmount;\\n                return;\\n            }\\n            QuestPeriod storage _nextPeriod = periodsByQuest[questID][nextPeriod];\\n\\n            // Calculate the new period parameters by adding undistributed rewards to the base period reward amount\\n            // & update the next period parameters based on new calculated parameters\\n            uint256 newRewardPerPeriod = _nextPeriod.rewardAmountPerPeriod + undistributedAmount;\\n            uint256 newMinRewardPerVote = (newRewardPerPeriod * UNIT) / _nextPeriod.maxObjectiveVotes;\\n            uint256 newMaxRewardPerVote = (newRewardPerPeriod * UNIT) / _nextPeriod.minObjectiveVotes;\\n            _nextPeriod.minRewardPerVote = newMinRewardPerVote;\\n            _nextPeriod.maxRewardPerVote = newMaxRewardPerVote;\\n            _nextPeriod.rewardAmountPerPeriod = newRewardPerPeriod;\\n\\n            emit RewardsRollover(questID, newRewardPerPeriod, newMinRewardPerVote, newMaxRewardPerVote);\\n            \\n        } else if(questCloseType == QuestDataTypes.QuestCloseType.DISTRIBUTE) {\\n            address gauge = quests[questID].gauge;\\n            if(IGauge(gauge).reward_data(rewardToken).distributor == address(this)) {\\n                // Give allowance to the Gauge for distribution\\n                IERC20(rewardToken).safeApprove(gauge, undistributedAmount);\\n                // The QuestBoard should have given allowance to the Gauge at the Quest creation\\n                IGauge(gauge).deposit_reward_token(rewardToken, undistributedAmount);\\n            } else {\\n                // The Quest Board is not allowed to distribute the rewards, set them to be withdrawable\\n                questWithdrawableAmount[questID] += undistributedAmount;\\n            }\\n        } else { // For QuestDataTypes.QuestCloseType.NORMAL\\n            questWithdrawableAmount[questID] += undistributedAmount;\\n        }\\n    }\\n\\n    /**\\n    * @notice Closes the Period, and all QuestPeriods for this period\\n    * @dev Closes all QuestPeriod for the given period, calculating rewards to distribute & send them to distributor\\n    * @param period Timestamp of the period\\n    */\\n    function _closeQuestPeriod(uint256 period, uint256 questID) internal returns(bool) {\\n        // We check that this period was not already closed\\n        if(periodsByQuest[questID][period].currentState != QuestDataTypes.PeriodState.ACTIVE) return false;\\n\\n        IGaugeController gaugeController = IGaugeController(GAUGE_CONTROLLER);\\n\\n        Quest memory _quest = quests[questID];\\n        QuestPeriod storage _questPeriod = periodsByQuest[questID][period];\\n        _questPeriod.currentState = QuestDataTypes.PeriodState.CLOSED;\\n\\n        // Call a checkpoint on the Gauge, in case it was not written yet\\n        gaugeController.checkpoint_gauge(_quest.gauge);\\n\\n        // Get the bias of the Gauge for the end of the period\\n        uint256 periodAdjustedBias = BiasCalculator(biasCalculator).getReducedBias(\\n            period + WEEK,\\n            questID,\\n            _quest.gauge,\\n            _quest.types.voteType\\n        );\\n\\n        uint256 undistributedAmount;\\n\\n        if(periodAdjustedBias == 0) { \\n            // Because we don't want to divide by 0 here since the bias is 0, we consider 0% completion\\n            // => no rewards to be distributed\\n            // We do not change _questPeriod.rewardAmountDistributed since the default value is already 0\\n            undistributedAmount = _questPeriod.rewardAmountPerPeriod;\\n        }\\n        else{\\n            // Get the amount of rewards to be distributed\\n            uint256 distributionAmount = _getDistributionAmount(_quest.types.rewardsType, periodAdjustedBias, _questPeriod);\\n            _questPeriod.rewardAmountDistributed = distributionAmount;\\n\\n            // And the rest is set as withdrawable amount, that the Quest creator can retrieve\\n            undistributedAmount = _questPeriod.rewardAmountPerPeriod - distributionAmount;\\n\\n            // Send the rewards to be distributed to the Distrubutor\\n            address questDistributor = questDistributors[questID];\\n            if(!MultiMerkleDistributor(questDistributor).addQuestPeriod(questID, period, distributionAmount)) revert Errors.DisitributorFail();\\n            IERC20(_quest.rewardToken).safeTransfer(questDistributor, distributionAmount);\\n        }\\n\\n        // Handle the undistributed rewards based on the Quest Close type\\n        _handleUndistributedRewards(questID, period, _quest.types.closeType, _quest.rewardToken, undistributedAmount);\\n\\n        emit PeriodClosed(questID, period);\\n\\n        return true;\\n    }\\n \\n    /**\\n    * @notice Closes the Period, and all QuestPeriods for this period\\n    * @dev Closes all QuestPeriod for the given period, calculating rewards to distribute & send them to distributor\\n    * @param period Timestamp of the period\\n    */\\n    function closeQuestPeriod(uint256 period) external nonReentrant isAlive isInitialized onlyAllowed returns(uint256 closed, uint256 skipped) {\\n        period = (period / WEEK) * WEEK;\\n        if(period == 0) revert Errors.InvalidPeriod();\\n        if(period >= getCurrentPeriod()) revert Errors.PeriodStillActive();\\n        if(questsByPeriod[period].length == 0) revert Errors.EmptyPeriod();\\n\\n        uint256[] memory questsForPeriod = questsByPeriod[period];\\n\\n        // For each QuestPeriod\\n        uint256 length = questsForPeriod.length;\\n        for(uint256 i = 0; i < length;){\\n            bool result = _closeQuestPeriod(period, questsForPeriod[i]);\\n\\n            if(result) closed++; \\n            else skipped++;\\n\\n            unchecked{ ++i; }\\n        }\\n    }\\n\\n    /**\\n    * @notice Closes the given QuestPeriods for the Period\\n    * @dev Closes the given QuestPeriods for the Period, calculating rewards to distribute & send them to distributor\\n    * @param period Timestamp of the period\\n    * @param questIDs List of the Quest IDs to close\\n    */\\n    function closePartOfQuestPeriod(uint256 period, uint256[] calldata questIDs) external nonReentrant isAlive isInitialized onlyAllowed returns(uint256 closed, uint256 skipped) {\\n        period = (period / WEEK) * WEEK;\\n        uint256 questIDLength = questIDs.length;\\n        if(questIDLength == 0) revert Errors.EmptyArray();\\n        if(period == 0) revert Errors.InvalidPeriod();\\n        if(period >= getCurrentPeriod()) revert Errors.PeriodStillActive();\\n        if(questsByPeriod[period].length == 0) revert Errors.EmptyPeriod();\\n\\n        // For each QuestPeriod for the given Quest IDs list\\n        for(uint256 i = 0; i < questIDLength;){\\n            bool result = _closeQuestPeriod(period, questIDs[i]);\\n\\n            if(result) closed++; \\n            else skipped++;\\n\\n            unchecked{ ++i; }\\n        }\\n    }\\n   \\n    /**\\n    * @dev Sets the QuestPeriod as disitrbuted, and adds the MerkleRoot to the Distributor contract\\n    * @param questID ID of the Quest\\n    * @param period Timestamp of the period\\n    * @param totalAmount sum of all rewards for the Merkle Tree\\n    * @param merkleRoot MerkleRoot to add\\n    */\\n    function _addMerkleRoot(uint256 questID, uint256 period, uint256 totalAmount, bytes32 merkleRoot) internal {\\n        if(questID >= nextID) revert Errors.InvalidQuestID();\\n        if(merkleRoot == 0) revert Errors.EmptyMerkleRoot();\\n        if(totalAmount == 0) revert Errors.NullAmount();\\n\\n        // This also allows to check if the given period is correct => If not, the currentState is never set to CLOSED for the QuestPeriod\\n        if(periodsByQuest[questID][period].currentState != QuestDataTypes.PeriodState.CLOSED) revert Errors.PeriodNotClosed();\\n\\n        // Add the MerkleRoot to the Distributor & set the QuestPeriod as DISTRIBUTED\\n        if(!MultiMerkleDistributor(questDistributors[questID]).updateQuestPeriod(questID, period, totalAmount, merkleRoot)) revert Errors.DisitributorFail();\\n\\n        periodsByQuest[questID][period].currentState = QuestDataTypes.PeriodState.DISTRIBUTED;\\n    }\\n   \\n    /**\\n    * @notice Sets the QuestPeriod as disitrbuted, and adds the MerkleRoot to the Distributor contract\\n    * @dev internal call to _addMerkleRoot()\\n    * @param questID ID of the Quest\\n    * @param period Timestamp of the period\\n    * @param totalAmount sum of all rewards for the Merkle Tree\\n    * @param merkleRoot MerkleRoot to add\\n    */\\n    function addMerkleRoot(uint256 questID, uint256 period, uint256 totalAmount, bytes32 merkleRoot) external nonReentrant isAlive isInitialized onlyAllowed {\\n        period = (period / WEEK) * WEEK;\\n        _addMerkleRoot(questID, period, totalAmount, merkleRoot);\\n    }\\n\\n    /**\\n    * @notice Sets a list of QuestPeriods as disitrbuted, and adds the MerkleRoot to the Distributor contract for each\\n    * @dev Loop and internal call to _addMerkleRoot()\\n    * @param questIDs List of Quest IDs\\n    * @param period Timestamp of the period\\n    * @param totalAmounts List of sums of all rewards for the Merkle Tree\\n    * @param merkleRoots List of MerkleRoots to add\\n    */\\n    function addMultipleMerkleRoot(\\n        uint256[] calldata questIDs,\\n        uint256 period,\\n        uint256[] calldata totalAmounts,\\n        bytes32[] calldata merkleRoots\\n    ) external nonReentrant isAlive isInitialized onlyAllowed {\\n        period = (period / WEEK) * WEEK;\\n        uint256 length = questIDs.length;\\n\\n        if(length != merkleRoots.length) revert Errors.InequalArraySizes();\\n        if(length != totalAmounts.length) revert Errors.InequalArraySizes();\\n\\n        for(uint256 i = 0; i < length;){\\n            _addMerkleRoot(questIDs[i], period, totalAmounts[i], merkleRoots[i]);\\n\\n            unchecked{ ++i; }\\n        }\\n    }\\n   \\n    /**\\n    * @notice Whitelists a reward token\\n    * @dev Whitelists a reward token\\n    * @param newToken Address of the reward token\\n    * @param minRewardPerVote Minimal threshold of reward per vote for the reward token\\n    */\\n    function whitelistToken(address newToken, uint256 minRewardPerVote) public onlyAllowed {\\n        if(newToken == address(0)) revert Errors.AddressZero();\\n        if(minRewardPerVote == 0) revert Errors.InvalidParameter();\\n\\n        whitelistedTokens[newToken] = true;\\n\\n        minRewardPerVotePerToken[newToken] = minRewardPerVote;\\n\\n        emit WhitelistToken(newToken, minRewardPerVote);\\n    }\\n   \\n    /**\\n    * @notice Whitelists a list of reward tokens\\n    * @dev Whitelists a list of reward tokens\\n    * @param newTokens List of reward tokens addresses\\n    * @param minRewardPerVotes List of minimal threshold of reward per vote for the reward token\\n    */\\n    function whitelistMultipleTokens(address[] calldata newTokens, uint256[] calldata minRewardPerVotes) external onlyAllowed {\\n        uint256 length = newTokens.length;\\n\\n        if(length == 0) revert Errors.EmptyArray();\\n        if(length != minRewardPerVotes.length) revert Errors.InequalArraySizes();\\n\\n        for(uint256 i = 0; i < length;){\\n            whitelistToken(newTokens[i], minRewardPerVotes[i]);\\n\\n            unchecked{ ++i; }\\n        }\\n    }\\n   \\n    /**\\n    * @notice Updates a reward token parameters\\n    * @dev Updates a reward token parameters\\n    * @param newToken Address of the reward token\\n    * @param newMinRewardPerVote New minimal threshold of reward per vote for the reward token\\n    */\\n    function updateRewardToken(address newToken, uint256 newMinRewardPerVote) external onlyAllowed {\\n        if(!whitelistedTokens[newToken]) revert Errors.TokenNotWhitelisted();\\n        if(newMinRewardPerVote == 0) revert Errors.InvalidParameter();\\n\\n        minRewardPerVotePerToken[newToken] = newMinRewardPerVote;\\n\\n        emit UpdateRewardToken(newToken, newMinRewardPerVote);\\n    }\\n\\n\\n    // Admin functions\\n\\n   \\n    /**\\n    * @notice Approves a new address as manager \\n    * @dev Approves a new address as manager\\n    * @param period Timestamp fo the period to fix\\n    * @param questID ID of the Quest\\n    * @param correctReducedBias Currect bias to be used for the Quest period\\n    */\\n    /*\\n        This method is needed for managers to force this contract, in case the reduced bias\\n        calculated for the Gauge is incorrect for the period to close.\\n        The following scenario can create a difference between the expected Gauge Bias & the one calculated:\\n        A voting address, listed in the Blacklist for the given Quest, is already voting for the target Gauge.\\n        Between the moment where the period is ended (Thursday 00:00 GMT) and the moment the closeQuestPeriod()\\n        method is called, and does the calculation for the Gauge Bias (and removes the blacklisted voter bias),\\n        the blacklisted voter changes its vote on the Gauge (by increasing it, or reducing it, or even removing it),\\n        allowing it to change its last VotedSlope for that Gauge, and causing our system not to account correctly\\n        for the Bias used for the voting period we are closing\\n        This method will then allow to send the correct reduced Bias for the Gauge for the given period,\\n        and calculate the rewards for that period correctly (and do the required reward token transfers)\\n    */\\n    function fixQuestPeriodBias(uint256 period, uint256 questID, uint256 correctReducedBias) external nonReentrant isAlive onlyOwner {\\n        period = (period / WEEK) * WEEK;\\n        if(questID >= nextID) revert Errors.InvalidQuestID();\\n        if(distributor == address(0)) revert Errors.NoDistributorSet();\\n        if(period == 0) revert Errors.InvalidPeriod();\\n        if(period > getCurrentPeriod()) revert Errors.InvalidPeriod();\\n\\n        Quest memory _quest = quests[questID];\\n        QuestPeriod storage _questPeriod = periodsByQuest[questID][period];\\n\\n        // This also allows to check if the given period is correct => If not, the currentState is never set to CLOSED for the QuestPeriod\\n        if(_questPeriod.currentState != QuestDataTypes.PeriodState.CLOSED) revert Errors.PeriodNotClosed();\\n\\n        uint256 previousRewardAmountDistributed = _questPeriod.rewardAmountDistributed;\\n        uint256 previousWithdrawableAmount = _questPeriod.rewardAmountPerPeriod - previousRewardAmountDistributed;\\n\\n        address questDistributor = questDistributors[questID];\\n\\n        if(correctReducedBias == 0) { \\n            // Set rewardAmountDistributed back to 0, get all rewards token back to the Board\\n            _questPeriod.rewardAmountDistributed = 0;\\n\\n            if(!MultiMerkleDistributor(questDistributor).fixQuestPeriod(questID, period, 0)) revert Errors.DisitributorFail();\\n\\n            if(_quest.types.closeType == QuestDataTypes.QuestCloseType.NORMAL) {\\n                questWithdrawableAmount[questID] = questWithdrawableAmount[questID] + _questPeriod.rewardAmountPerPeriod - previousWithdrawableAmount;\\n            } else {\\n                _handleUndistributedRewards(questID, period, _quest.types.closeType, _quest.rewardToken, previousRewardAmountDistributed);\\n            }\\n        }\\n        else{\\n            uint256 newToDistributeAmount = _getDistributionAmount(_quest.types.rewardsType, correctReducedBias, _questPeriod);\\n\\n            _questPeriod.rewardAmountDistributed = newToDistributeAmount;\\n\\n            // Fix the Period in the Distributor, and retrieve token in case too much was sent\\n            if(!MultiMerkleDistributor(questDistributor).fixQuestPeriod(questID, period, newToDistributeAmount)) revert Errors.DisitributorFail();\\n\\n            if(_quest.types.closeType == QuestDataTypes.QuestCloseType.ROLLOVER) {\\n                // Since this type is only allowed for FIXED Rewards Quests\\n                // We simply recalculate the next period reward/vote based on the current Objective\\n                uint256 nextPeriod = period + WEEK;\\n                // If not the last period\\n                if(nextPeriod > questPeriods[questID][questPeriods[questID].length - 1]) {\\n                    // This the Quest last period, no period to rollover to\\n                    questWithdrawableAmount[questID] = questWithdrawableAmount[questID] + (_questPeriod.rewardAmountPerPeriod - newToDistributeAmount) - previousWithdrawableAmount;\\n                } else {\\n                    QuestPeriod storage _nextPeriod = periodsByQuest[questID][nextPeriod];\\n\\n                    uint256 newRewardPerPeriod = newToDistributeAmount > previousRewardAmountDistributed ?\\n                        _nextPeriod.rewardAmountPerPeriod - (newToDistributeAmount - previousRewardAmountDistributed) :\\n                        _nextPeriod.rewardAmountPerPeriod + (previousRewardAmountDistributed - newToDistributeAmount);\\n                    uint256 newMinRewardPerVote = (newRewardPerPeriod * UNIT) / _nextPeriod.maxObjectiveVotes;\\n                    uint256 newMaxRewardPerVote = (newRewardPerPeriod * UNIT) / _nextPeriod.minObjectiveVotes;\\n                    \\n                    _nextPeriod.minRewardPerVote = newMinRewardPerVote;\\n                    _nextPeriod.maxRewardPerVote = newMaxRewardPerVote;\\n                    _nextPeriod.rewardAmountPerPeriod = newRewardPerPeriod;\\n\\n                    emit RewardsRollover(questID, newRewardPerPeriod, newMinRewardPerVote, newMaxRewardPerVote);\\n                }\\n\\n                if(newToDistributeAmount > previousRewardAmountDistributed){\\n                    uint256 missingAmount = newToDistributeAmount - previousRewardAmountDistributed;\\n                    IERC20(_quest.rewardToken).safeTransfer(questDistributor, missingAmount);\\n                }\\n                \\n            } else if(_quest.types.closeType == QuestDataTypes.QuestCloseType.DISTRIBUTE) {\\n                if(newToDistributeAmount > previousRewardAmountDistributed){\\n                    uint256 missingAmount = newToDistributeAmount - previousRewardAmountDistributed;\\n\\n                    // Need to pull it, since it was already sent to the Gauge to be distributed\\n                    IERC20(_quest.rewardToken).safeTransferFrom(msg.sender, questDistributor, missingAmount);\\n                } else {\\n                    // Amount sent back by the Distributor\\n                    uint256 missingAmount = previousRewardAmountDistributed - newToDistributeAmount;\\n                    address gauge = _quest.gauge;\\n                    if(IGauge(gauge).reward_data(_quest.rewardToken).distributor == address(this)) {\\n                        // Give allowance to the Gauge for distribution\\n                        IERC20(_quest.rewardToken).safeApprove(gauge, missingAmount);\\n                        // The QuestBoard should have given allowance to the Gauge at the Quest creation\\n                        IGauge(gauge).deposit_reward_token(_quest.rewardToken, missingAmount);\\n                    } else {\\n                        // The Quest Board is not allowed to distribute the rewards, set them to be withdrawable\\n                        questWithdrawableAmount[questID] += missingAmount;\\n                    }\\n                }\\n                \\n            } else { // For QuestDataTypes.QuestCloseType.NORMAL\\n                questWithdrawableAmount[questID] = questWithdrawableAmount[questID] + (_questPeriod.rewardAmountPerPeriod - newToDistributeAmount) - previousWithdrawableAmount;\\n\\n                if(newToDistributeAmount > previousRewardAmountDistributed){\\n                    uint256 missingAmount = newToDistributeAmount - previousRewardAmountDistributed;\\n                    IERC20(_quest.rewardToken).safeTransfer(questDistributor, missingAmount);\\n                }\\n            }\\n        }\\n\\n        emit PeriodBiasFixed(period, questID, correctReducedBias);\\n    }\\n   \\n    /**\\n    * @notice Approves a new address as manager \\n    * @dev Approves a new address as manager\\n    * @param newManager Address to add\\n    */\\n    function approveManager(address newManager) external onlyOwner {\\n        if(newManager == address(0)) revert Errors.AddressZero();\\n        approvedManagers[newManager] = true;\\n\\n        emit ApprovedManager(newManager);\\n    }\\n   \\n    /**\\n    * @notice Removes an address from the managers\\n    * @dev Removes an address from the managers\\n    * @param manager Address to remove\\n    */\\n    function removeManager(address manager) external onlyOwner {\\n        if(manager == address(0)) revert Errors.AddressZero();\\n        approvedManagers[manager] = false;\\n\\n        emit RemovedManager(manager);\\n    }\\n   \\n    /**\\n    * @notice Updates the Chest address\\n    * @dev Updates the Chest address\\n    * @param chest Address of the new Chest\\n    */\\n    function updateChest(address chest) external onlyOwner {\\n        if(chest == address(0)) revert Errors.AddressZero();\\n        address oldChest = questChest;\\n        questChest = chest;\\n\\n        emit ChestUpdated(oldChest, chest);\\n    }\\n   \\n    /**\\n    * @notice Updates the Distributor address\\n    * @dev Updates the Distributor address\\n    * @param newDistributor Address of the new Distributor\\n    */\\n    function updateDistributor(address newDistributor) external onlyOwner {\\n        if(newDistributor == address(0)) revert Errors.AddressZero();\\n        address oldDistributor = distributor;\\n        distributor = newDistributor;\\n\\n        emit DistributorUpdated(oldDistributor, distributor);\\n    }\\n   \\n    /**\\n    * @notice Updates the Platfrom fees BPS ratio\\n    * @dev Updates the Platfrom fees BPS ratio\\n    * @param newFee New fee ratio\\n    */\\n    function updatePlatformFee(uint256 newFee) external onlyOwner {\\n        if(newFee > 500) revert Errors.InvalidParameter();\\n        uint256 oldfee = platformFeeRatio;\\n        platformFeeRatio = newFee;\\n\\n        emit PlatformFeeRatioUpdated(oldfee, newFee);\\n    }\\n   \\n    /**\\n    * @notice Updates the min objective value\\n    * @dev Updates the min objective value\\n    * @param newMinObjective New min objective\\n    */\\n    function updateMinObjective(uint256 newMinObjective) external onlyOwner {\\n        if(newMinObjective == 0) revert Errors.InvalidParameter();\\n        uint256 oldMinObjective = objectiveMinimalThreshold;\\n        objectiveMinimalThreshold = newMinObjective;\\n\\n        emit MinObjectiveUpdated(oldMinObjective, newMinObjective);\\n    }\\n   \\n    /**\\n    * @notice Sets a custom fee ratio for a given address\\n    * @dev Sets a custom fee ratio for a given address\\n    * @param user User address\\n    * @param customFeeRatio Custom fee ratio\\n    */\\n    function setCustomFeeRatio(address user, uint256 customFeeRatio) external onlyOwner {\\n        if(customFeeRatio > platformFeeRatio) revert Errors.InvalidParameter();\\n        \\n        customPlatformFeeRatio[user] = customFeeRatio;\\n\\n        emit SetCustomFeeRatio(user, customFeeRatio);\\n    }\\n   \\n    /**\\n    * @notice Recovers ERC2O tokens sent by mistake to the contract\\n    * @dev Recovers ERC2O tokens sent by mistake to the contract\\n    * @param token Address tof the EC2O token\\n    * @return bool: success\\n    */\\n    function recoverERC20(address token) external onlyOwner returns(bool) {\\n        if(whitelistedTokens[token]) revert Errors.CannotRecoverToken();\\n\\n        uint256 amount = IERC20(token).balanceOf(address(this));\\n        if(amount == 0) revert Errors.NullAmount();\\n        IERC20(token).safeTransfer(owner(), amount);\\n\\n        return true;\\n    }\\n   \\n    /**\\n    * @notice Kills the contract\\n    * @dev Kills the contract\\n    */\\n    function killBoard() external onlyOwner {\\n        if(isKilled) revert Errors.AlreadyKilled();\\n        isKilled = true;\\n        killTs = block.timestamp;\\n\\n        emit Killed(killTs);\\n    }\\n   \\n    /**\\n    * @notice Unkills the contract\\n    * @dev Unkills the contract\\n    */\\n    function unkillBoard() external onlyOwner {\\n        if(!isKilled) revert Errors.NotKilled();\\n        if(block.timestamp >= killTs + KILL_DELAY) revert Errors.KillDelayExpired();\\n        isKilled = false;\\n\\n        emit Unkilled(block.timestamp);\\n    }\\n\\n\\n    // Utils \\n\\n    function safe48(uint n) internal pure returns (uint48) {\\n        if(n > type(uint48).max) revert Errors.NumberExceed48Bits();\\n        return uint48(n);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/utils/Owner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"../oz/utils/Ownable.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\n\\n/** @title 2-step Ownership  */\\n/// @author Paladin\\n/*\\n    Extends OZ Ownable contract to add 2-step ownership transfer\\n*/\\n\\ncontract Owner is Ownable {\\n\\n    address public pendingOwner;\\n\\n    event NewPendingOwner(address indexed previousPendingOwner, address indexed newPendingOwner);\\n\\n    function transferOwnership(address newOwner) public override virtual onlyOwner {\\n        if(newOwner == address(0)) revert Errors.AddressZero();\\n        if(newOwner == owner()) revert Errors.CannotBeOwner();\\n        address oldPendingOwner = pendingOwner;\\n\\n        pendingOwner = newOwner;\\n\\n        emit NewPendingOwner(oldPendingOwner, newOwner);\\n    }\\n\\n    function acceptOwnership() public virtual {\\n        if(msg.sender != pendingOwner) revert Errors.CallerNotPendingOwner();\\n        address newOwner = pendingOwner;\\n        _transferOwnership(pendingOwner);\\n        pendingOwner = address(0);\\n\\n        emit NewPendingOwner(newOwner, address(0));\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"viaIR\": false,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gaugeController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_questBoard\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQuestID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxListSize\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddToVoterList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveFromVoterList\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GAUGE_CONTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questID\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addToVoterList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"enum QuestDataTypes.QuestVoteType\",\"name\":\"questType\",\"type\":\"uint8\"}],\"name\":\"getCurrentReducedBias\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questID\",\"type\":\"uint256\"}],\"name\":\"getQuestVoterList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"questID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"enum QuestDataTypes.QuestVoteType\",\"name\":\"questType\",\"type\":\"uint8\"}],\"name\":\"getReducedBias\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questBoard\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromVoterList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questID\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"setQuestVoterList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BiasCalculator", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c128468b7ce63ea702c1f104d55a2566b13d3abd000000000000000000000000f0ceabf99ddd591bbcc962596b228007ed4624ae", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}