{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SignedSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@setprotocol/set-protocol-v2/contracts/interfaces/external/IWETH.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2018 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title IWETH\\n * @author Set Protocol\\n *\\n * Interface for Wrapped Ether. This interface allows for interaction for wrapped ether's deposit and withdrawal\\n * functionality.\\n */\\ninterface IWETH is IERC20{\\n    function deposit()\\n        external\\n        payable;\\n\\n    function withdraw(\\n        uint256 wad\\n    )\\n        external;\\n}\"\r\n    },\r\n    \"@setprotocol/set-protocol-v2/contracts/lib/AddressArrayUtils.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n\\n*/\\n\\npragma solidity 0.6.10;\\n\\n/**\\n * @title AddressArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Address Arrays\\n *\\n * CHANGELOG:\\n * - 4/21/21: Added validatePairsWithArray methods\\n */\\nlibrary AddressArrayUtils {\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (uint256(-1), false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(address[] memory A, address a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(address[] memory A) internal pure returns(bool) {\\n        require(A.length > 0, \\\"A is empty\\\");\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            address current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(address[] memory A, address a)\\n        internal\\n        pure\\n        returns (address[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"Address not in array.\\\");\\n        } else {\\n            (address[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     */\\n    function removeStorage(address[] storage A, address a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"Address not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(address[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (address[] memory, address)\\n    {\\n        uint256 length = A.length;\\n        require(index < A.length, \\\"Index must be < A length\\\");\\n        address[] memory newAddresses = new address[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newAddresses[j - 1] = A[j];\\n        }\\n        return (newAddresses, A[index]);\\n    }\\n\\n    /**\\n     * Returns the combination of the two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        address[] memory newAddresses = new address[](aLength + bLength);\\n        for (uint256 i = 0; i < aLength; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = 0; j < bLength; j++) {\\n            newAddresses[aLength + j] = B[j];\\n        }\\n        return newAddresses;\\n    }\\n\\n    /**\\n     * Validate that address and uint array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of uint\\n     */\\n    function validatePairsWithArray(address[] memory A, uint[] memory B) internal pure {\\n        require(A.length == B.length, \\\"Array length mismatch\\\");\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and bool array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of bool\\n     */\\n    function validatePairsWithArray(address[] memory A, bool[] memory B) internal pure {\\n        require(A.length == B.length, \\\"Array length mismatch\\\");\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and string array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of strings\\n     */\\n    function validatePairsWithArray(address[] memory A, string[] memory B) internal pure {\\n        require(A.length == B.length, \\\"Array length mismatch\\\");\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address array lengths match, and calling address array are not empty\\n     * and contain no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of addresses\\n     */\\n    function validatePairsWithArray(address[] memory A, address[] memory B) internal pure {\\n        require(A.length == B.length, \\\"Array length mismatch\\\");\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and bytes array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of bytes\\n     */\\n    function validatePairsWithArray(address[] memory A, bytes[] memory B) internal pure {\\n        require(A.length == B.length, \\\"Array length mismatch\\\");\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate address array is not empty and contains no duplicate elements.\\n     *\\n     * @param A          Array of addresses\\n     */\\n    function _validateLengthAndUniqueness(address[] memory A) internal pure {\\n        require(A.length > 0, \\\"Array length must be > 0\\\");\\n        require(!hasDuplicate(A), \\\"Cannot duplicate addresses\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@setprotocol/set-protocol-v2/contracts/lib/PreciseUnitMath.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\n\\n/**\\n * @title PreciseUnitMath\\n * @author Set Protocol\\n *\\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\\n * dYdX's BaseMath library.\\n *\\n * CHANGELOG:\\n * - 9/21/20: Added safePower function\\n * - 4/21/21: Added approximatelyEquals function\\n * - 12/13/21: Added preciseDivCeil (int overloads) function\\n * - 12/13/21: Added abs function\\n */\\nlibrary PreciseUnitMath {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using SafeCast for int256;\\n\\n    // The number One in precise units.\\n    uint256 constant internal PRECISE_UNIT = 10 ** 18;\\n    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\\n\\n    // Max unsigned integer value\\n    uint256 constant internal MAX_UINT_256 = type(uint256).max;\\n    // Max and min signed integer value\\n    int256 constant internal MAX_INT_256 = type(int256).max;\\n    int256 constant internal MIN_INT_256 = type(int256).min;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnit() internal pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnitInt() internal pure returns (int256) {\\n        return PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxUint256() internal pure returns (uint256) {\\n        return MAX_UINT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxInt256() internal pure returns (int256) {\\n        return MAX_INT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function minInt256() internal pure returns (int256) {\\n        return MIN_INT_256;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(b).div(PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\\n     * significand of a number with 18 decimals precision.\\n     */\\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(b).div(PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down).\\n     */\\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(PRECISE_UNIT).div(b);\\n    }\\n\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded towards 0).\\n     */\\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(PRECISE_UNIT_INT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0).\\n     */\\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"Cant divide by 0\\\");\\n\\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0). When `a` is 0, 0 is\\n     * returned. When `b` is 0, method reverts with divide-by-zero error.\\n     */\\n    function preciseDivCeil(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"Cant divide by 0\\\");\\n        \\n        a = a.mul(PRECISE_UNIT_INT);\\n        int256 c = a.div(b);\\n\\n        if (a % b != 0) {\\n            // a ^ b == 0 case is covered by the previous if statement, hence it won't resolve to --c\\n            (a ^ b > 0) ? ++c : --c;\\n        }\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\\n     */\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"Cant divide by 0\\\");\\n        require(a != MIN_INT_256 || b != -1, \\\"Invalid input\\\");\\n\\n        int256 result = a.div(b);\\n        if (a ^ b < 0 && a % b != 0) {\\n            result -= 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\\n    }\\n\\n    /**\\n    * @dev Performs the power on a specified value, reverts on overflow.\\n    */\\n    function safePower(\\n        uint256 a,\\n        uint256 pow\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(a > 0, \\\"Value must be positive\\\");\\n\\n        uint256 result = 1;\\n        for (uint256 i = 0; i < pow; i++){\\n            uint256 previousResult = result;\\n\\n            // Using safemath multiplication prevents overflows\\n            result = previousResult.mul(a);\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns true if a =~ b within range, false otherwise.\\n     */\\n    function approximatelyEquals(uint256 a, uint256 b, uint256 range) internal pure returns (bool) {\\n        return a <= b.add(range) && a >= b.sub(range);\\n    }\\n\\n    /**\\n     * Returns the absolute value of int256 `a` as a uint256\\n     */\\n    function abs(int256 a) internal pure returns (uint) {\\n        return a >= 0 ? a.toUint256() : a.mul(-1).toUint256();\\n    }\\n\\n    /**\\n     * Returns the negation of a\\n     */\\n    function neg(int256 a) internal pure returns (int256) {\\n        require(a > MIN_INT_256, \\\"Inversion overflow\\\");\\n        return -a;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/aave-v2/IAToken.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2021 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n  SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\ninterface IAToken is IERC20 {\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/aave-v2/IFlashLoanReceiver.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2021 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n  SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\ninterface IFlashLoanReceiver {\\n  function executeOperation(\\n    address[] calldata assets,\\n    uint[] calldata amounts,\\n    uint[] calldata premiums,\\n    address initiator,\\n    bytes calldata params\\n  ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/aave-v2/ILendingPool.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2021 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n  SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport { ILendingPoolAddressesProvider } from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport { DataTypes } from \\\"./lib/DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   * @param referral The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n   * LendingPoolCollateral manager using a DELEGATECALL\\n   * This allows to have the events in the generated ABI for LendingPool.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n   * gets added to the LendingPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n  /**\\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n   *        borrowed at a stable rate and depositors are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n   * @param asset The address of the underlying asset deposited\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts amounts being flash-borrowed\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralETH the total collateral in ETH of the user\\n   * @return totalDebtETH the total debt in ETH of the user\\n   * @return availableBorrowsETH the borrowing power left of the user\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\n   * @return ltv the loan to value of the user\\n   * @return healthFactor the current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\n    external;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external;\\n\\n  /**\\n   * @dev Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n  function setPause(bool val) external;\\n\\n  function paused() external view returns (bool);\\n}\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/external/aave-v2/ILendingPoolAddressesProvider.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2021 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n  SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/aave-v2/lib/DataTypes.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2021 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n  SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/gmx/IGlpRewardRouter.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.10;\\n\\ninterface IGlpRewardRouter {\\n    function mintAndStakeGlp(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minUsdg,\\n        uint256 _minGlp\\n    ) external returns (uint256);\\n\\n    function unstakeAndRedeemGlp(\\n        address _tokenOut,\\n        uint256 _glpAmount,\\n        uint256 _minOut,\\n        address _receiver\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/gmx/IGMXAdapter.sol\": {\r\n      \"content\": \"pragma solidity 0.6.10;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\ninterface IGMXAdapter {\\n    struct IncreasePositionRequest {\\n        address _jasperVault;\\n        string _integrationName;\\n        address[] _path;\\n        address _indexToken;\\n        uint256 _amountIn;\\n        int256 _amountInUnits;\\n        uint256 _minOut;\\n        uint256 _minOutUnits;\\n        uint256 _sizeDelta;\\n        uint256 _sizeDeltaUnits;\\n        bool _isLong;\\n        uint256 _acceptablePrice;\\n        uint256 _executionFee;\\n        bytes32 _referralCode;\\n        address _callbackTarget;\\n        bytes _data;\\n    }\\n    struct DecreasePositionRequest {\\n        string _integrationName;\\n        address[] _path;\\n        address _indexToken;\\n        uint256 _collateralDelta;\\n        int256 _collateralUnits;\\n        uint256 _sizeDelta;\\n        int256 _sizeDeltaUnits;\\n        bool _isLong;\\n        address _receiver;\\n        uint256 _acceptablePrice;\\n        uint256 _minOut;\\n        uint256 _minOutUnits;\\n        uint256 _executionFee;\\n        bool _withdrawETH;\\n        address _callbackTarget;\\n        bytes _data;\\n    }\\n    struct SwapData {\\n        address _jasperVault;\\n        string _integrationName;\\n        address[] _path;\\n        uint256 _amountIn;\\n        int256 _amountInUnits;\\n        uint256 _minOut;\\n        uint256 _minOutUnits;\\n        uint256 _swapType;\\n        address _receiver;\\n        bytes _data;\\n    }\\n    struct IncreaseOrderData {\\n        string _integrationName;\\n        address[] _path;\\n        uint256 _amountIn;\\n        int256 _amountInUnits;\\n        uint256 _leverage;\\n        address _indexToken;\\n        uint256 _minOut;\\n        uint256 _minOutUnits;\\n        uint256 _sizeDelta;\\n        uint256 _sizeDeltaUnits;\\n        address _collateralToken;\\n        bool _isLong;\\n        uint256 _triggerPrice;\\n        bool _triggerAboveThreshold;\\n        uint256 _executionFee;\\n        bool _shouldWrap;\\n        uint256 _fee;\\n        bytes _data;\\n    }\\n    struct DecreaseOrderData {\\n        string _integrationName;\\n        address _indexToken;\\n        uint256 _sizeDelta;\\n        uint256 _sizeDeltaUnits;\\n        address _collateralToken;\\n        uint256 _collateralDelta;\\n        uint256 _collateralDeltaUnits;\\n        bool _isLong;\\n        uint256 _triggerPrice;\\n        bool _triggerAboveThreshold;\\n        uint256 _fee;\\n        bytes _data;\\n    }\\n\\n    struct HandleRewardData {\\n        string _integrationName;\\n        bool _shouldClaimGmx;\\n        bool _shouldStakeGmx;\\n        bool _shouldClaimEsGmx;\\n        bool _shouldStakeEsGmx;\\n        bool _shouldStakeMultiplierPoints;\\n        bool _shouldClaimWeth;\\n        bool _shouldConvertWethToEth;\\n        bytes _data;\\n    }\\n\\n    struct CreateOrderData {\\n        string _integrationName;\\n        bool _isLong;\\n        bytes _positionData;\\n    }\\n\\n    struct StakeGMXData {\\n        address _collateralToken;\\n        int256 _underlyingUnits;\\n        uint256 _amount;\\n        string _integrationName;\\n        bool _isStake;\\n        bytes _positionData;\\n    }\\n\\n    struct StakeGLPData {\\n        address _token;\\n        int256 _amountUnits;\\n        uint256 _amount;\\n        uint256 _minUsdg;\\n        uint256 _minUsdgUnits;\\n        uint256 _minGlp;\\n        uint256 _minGlpUnits;\\n        bool _isStake;\\n        string _integrationName;\\n        bytes _data;\\n    }\\n\\n    function ETH_TOKEN() external view returns (address);\\n\\n    function getInCreasingPositionCallData(\\n        IncreasePositionRequest memory request\\n    )\\n        external\\n        view\\n        returns (address _subject, uint256 _value, bytes memory _calldata);\\n\\n    function getDeCreasingPositionCallData(\\n        DecreasePositionRequest memory request\\n    )\\n        external\\n        view\\n        returns (address _subject, uint256 _value, bytes memory _calldata);\\n\\n    function PositionRouter() external view returns (address);\\n\\n    function OrderBook() external view returns (address);\\n\\n    function Vault() external view returns (address);\\n\\n    function GMXRouter() external view returns (address);\\n\\n    function StakedGmx() external view returns (address);\\n\\n    function GlpRewardRouter() external view returns (address);\\n\\n    function getTokenBalance(\\n        address _token,\\n        address _jasperVault\\n    ) external view returns (uint256);\\n\\n    function getCreateDecreaseOrderCallData(\\n        DecreaseOrderData memory data\\n    ) external view returns (address, uint256, bytes memory);\\n\\n    function getCreateIncreaseOrderCallData(\\n        IncreaseOrderData memory data\\n    ) external view returns (address, uint256, bytes memory);\\n\\n    function getSwapCallData(\\n        SwapData memory data\\n    ) external view returns (address, uint256, bytes memory);\\n\\n    function approvePositionRouter()\\n        external\\n        view\\n        returns (address, uint256, bytes memory);\\n\\n    function IsApprovedPlugins(\\n        address jasperVault\\n    ) external view returns (bool);\\n\\n    function getStakeGMXCallData(\\n        address _jasperVault,\\n        uint256 _stakeAmount,\\n        bool _isStake,\\n        bytes calldata _data\\n    )\\n        external\\n        view\\n        returns (address _subject, uint256 _value, bytes memory _calldata);\\n\\n    function getStakeGLPCallData(\\n        address _jasperVault,\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minUsdg,\\n        uint256 _minGlp,\\n        bool _isStake,\\n        bytes calldata _data\\n    )\\n        external\\n        view\\n        returns (address _subject, uint256 _value, bytes memory _calldata);\\n\\n    function getHandleRewardsCallData(\\n        HandleRewardData memory data\\n    )\\n        external\\n        view\\n        returns (address _subject, uint256 _value, bytes memory _calldata);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/gmx/IGMXCallBack.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IPositionRouterCallbackReceiver {\\n  function gmxPositionCallback(bytes32 positionKey, bool isExecuted, bool isIncrease) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/gmx/IGMXModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nimport {IJasperVault} from \\\"../../IJasperVault.sol\\\";\\nimport {IGMXAdapter} from \\\"./IGMXAdapter.sol\\\";\\n\\nimport {IWETH} from \\\"../IWETH.sol\\\";\\n\\ninterface IGMXModule {\\n    function weth() external view returns (IWETH);\\n\\n    function increasingPosition(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.IncreasePositionRequest memory request\\n    ) external;\\n\\n    function decreasingPosition(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.DecreasePositionRequest memory request\\n    ) external;\\n\\n    function swap(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.SwapData memory data\\n    ) external;\\n\\n    function creatOrder(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.CreateOrderData memory data\\n    ) external;\\n\\n    function stakeGMX(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.StakeGMXData memory data\\n    ) external;\\n\\n    function stakeGLP(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.StakeGLPData memory data\\n    ) external;\\n\\n    function handleRewards(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.HandleRewardData memory data\\n    ) external;\\n\\n    function initialize(IJasperVault _jasperVault) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/gmx/IGMXOrderBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IGMXOrderBook {\\n  function createIncreaseOrder(\\n    address[] memory _path,\\n    uint256 _amountIn,\\n    address _indexToken,\\n    uint256 _minOut,\\n    uint256 _sizeDelta,\\n    address _collateralToken,\\n    bool _isLong,\\n    uint256 _triggerPrice,\\n    bool _triggerAboveThreshold,\\n    uint256 _executionFee,\\n    bool _shouldWrap\\n  )external;\\n  function createDecreaseOrder(\\n    address _indexToken,\\n    uint256 _sizeDelta,\\n    address _collateralToken,\\n    uint256 _collateralDelta,\\n    bool _isLong,\\n    uint256 _triggerPrice,\\n    bool _triggerAboveThreshold\\n  )external;\\n  function getSwapOrder(address _account, uint256 _orderIndex) external view returns (\\n    address path0,\\n    address path1,\\n    address path2,\\n    uint256 amountIn,\\n    uint256 minOut,\\n    uint256 triggerRatio,\\n    bool triggerAboveThreshold,\\n    bool shouldUnwrap,\\n    uint256 executionFee\\n  );\\n\\n  function getIncreaseOrder(address _account, uint256 _orderIndex) external view returns (\\n    address purchaseToken,\\n    uint256 purchaseTokenAmount,\\n    address collateralToken,\\n    address indexToken,\\n    uint256 sizeDelta,\\n    bool isLong,\\n    uint256 triggerPrice,\\n    bool triggerAboveThreshold,\\n    uint256 executionFee\\n  );\\n\\n  function getDecreaseOrder(address _account, uint256 _orderIndex) external view returns (\\n    address collateralToken,\\n    uint256 collateralDelta,\\n    address indexToken,\\n    uint256 sizeDelta,\\n    bool isLong,\\n    uint256 triggerPrice,\\n    bool triggerAboveThreshold,\\n    uint256 executionFee\\n  );\\n\\n  function executeSwapOrder(address, uint256, address payable) external;\\n  function executeDecreaseOrder(address, uint256, address payable) external;\\n  function executeIncreaseOrder(address, uint256, address payable) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/gmx/IGMXReBalance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.10;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nimport {IJasperVault} from \\\"../../IJasperVault.sol\\\";\\nimport {IGMXAdapter} from \\\"./IGMXAdapter.sol\\\";\\n\\ninterface IGMXReBalance {\\n    function _rebalanceGMX(\\n        IJasperVault jasperVault,\\n        GMXInfo memory gmxInfos\\n    ) external;\\n\\n    struct GMXInfo {\\n        string _integrationName;\\n        IGMXAdapter.SwapData[] swapDatas;\\n        IGMXAdapter.IncreasePositionRequest[] increasePositionRequests;\\n        IGMXAdapter.DecreasePositionRequest[] decreasePositionRequest;\\n        IGMXAdapter.IncreaseOrderData[] increaseOrderDatas;\\n        IGMXAdapter.DecreaseOrderData[] decreaseOrderDatas;\\n        IGMXAdapter.StakeGMXData[] stakeGMXDatas;\\n        IGMXAdapter.StakeGLPData[] stakeGLPDatas;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/gmx/IGMXRouter.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.10;\\n\\ninterface IGMXRouter {\\n    function approvePlugin(address _plugin) external ;\\n\\n    function approvedPlugins(address arg1, address arg2) external view returns (bool);\\n\\n    function swap(address[] memory _path, uint256 _amountIn, uint256 _minOut, address _receiver) external;\\n\\n    function swapTokensToETH(address[] memory _path, uint256 _amountIn, uint256 _minOut, address _receiver) external;\\n\\n    function swapETHToTokens(address[] memory _path, uint256 _minOut, address _receiver) external payable;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/gmx/IGMXStake.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.10;\\n\\ninterface IGMXStake {\\n    function stakeGmx(uint256 _amount) external;\\n\\n    function unstakeGmx(uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/gmx/IRewardRouter.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.10;\\n\\ninterface IRewardRouter {\\n    function handleRewards(\\n        bool _shouldClaimGmx,\\n        bool _shouldStakeGmx,\\n        bool _shouldClaimEsGmx,\\n        bool _shouldStakeEsGmx,\\n        bool _shouldStakeMultiplierPoints,\\n        bool _shouldClaimWeth,\\n        bool _shouldConvertWethToEth\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/gmx/third_part/IGMXReader.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.10;\\n\\ninterface  IGMXReader {\\n function getPositions(address _vault, address _account, address[] memory _collateralTokens, address[] memory _indexTokens, bool[] memory _isLong) external view returns(uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/IUniswapV2Router.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity ^0.6.10;\\n\\ninterface IUniswapV2Router {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\"\r\n    },\r\n    \"contracts/interfaces/external/IWETH.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2018 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title IWETH\\n * @author Set Protocol\\n *\\n * Interface for Wrapped Ether. This interface allows for interaction for wrapped ether's deposit and withdrawal\\n * functionality.\\n */\\ninterface IWETH is IERC20{\\n    function deposit()\\n        external\\n        payable;\\n\\n    function withdraw(\\n        uint256 wad\\n    )\\n        external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.10;\\n\\ninterface IController {\\n    function addSet(address _jasperVault) external;\\n\\n    function feeRecipient() external view returns (address);\\n\\n    function getModuleFee(\\n        address _module,\\n        uint256 _feeType\\n    ) external view returns (uint256);\\n\\n    function isModule(address _module) external view returns (bool);\\n\\n    function isSet(address _jasperVault) external view returns (bool);\\n\\n    function isSystemContract(\\n        address _contractAddress\\n    ) external view returns (bool);\\n\\n    function resourceId(uint256 _id) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDebtIssuanceModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\n\\nimport { IJasperVault } from \\\"./IJasperVault.sol\\\";\\n\\n/**\\n * @title IDebtIssuanceModule\\n * @author Set Protocol\\n *\\n * Interface for interacting with Debt Issuance module interface.\\n */\\ninterface IDebtIssuanceModule {\\n\\n    /**\\n     * Called by another module to register itself on debt issuance module. Any logic can be included\\n     * in case checks need to be made or state needs to be updated.\\n     */\\n    function registerToIssuanceModule(IJasperVault _jasperVault) external;\\n\\n    /**\\n     * Called by another module to unregister itself on debt issuance module. Any logic can be included\\n     * in case checks need to be made or state needs to be cleared.\\n     */\\n    function unregisterFromIssuanceModule(IJasperVault _jasperVault) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDelegatedManager.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nimport {IJasperVault} from \\\"./IJasperVault.sol\\\";\\n\\ninterface IDelegatedManager {\\n    function interactManager(address _module, bytes calldata _encoded) external;\\n\\n    function initializeExtension() external;\\n\\n    function transferTokens(\\n        address _token,\\n        address _destination,\\n        uint256 _amount\\n    ) external;\\n\\n    function updateOwnerFeeSplit(uint256 _newFeeSplit) external;\\n\\n    function updateOwnerFeeRecipient(address _newFeeRecipient) external;\\n\\n    function setMethodologist(address _newMethodologist) external;\\n\\n    function transferOwnership(address _owner) external;\\n\\n    function jasperVault() external view returns (IJasperVault);\\n\\n    function owner() external view returns (address);\\n\\n    function methodologist() external view returns (address);\\n\\n    function operatorAllowlist(address _operator) external view returns (bool);\\n\\n    // function assetAllowlist(address _asset) external view returns (bool);\\n\\n    function isAllowedAsset(address _asset) external view returns (bool);\\n\\n    function isAllowedAdapter(address _adapter) external view returns (bool);\\n\\n    function isPendingExtension(\\n        address _extension\\n    ) external view returns (bool);\\n\\n    function isInitializedExtension(\\n        address _extension\\n    ) external view returns (bool);\\n\\n    function getExtensions() external view returns (address[] memory);\\n\\n    function getOperators() external view returns (address[] memory);\\n\\n    function getAllowedAssets() external view returns (address[] memory);\\n\\n    function ownerFeeRecipient() external view returns (address);\\n\\n    function ownerFeeSplit() external view returns (uint256);\\n\\n    function setSubscribeStatus(uint256) external;\\n\\n    function subscribeStatus() external view returns (uint256);\\n\\n    function getAdapters() external view returns (address[] memory);\\n    \\n    function setBaseFeeAndToken(address _masterToken,uint256 _followFee,uint256 _profitShareFee,uint256 _delay) external;\\n    function setBaseProperty(string memory _name,string memory _symbol) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    function decimals() external view returns(uint256);\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IExchangeAdapter.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\n\\ninterface IExchangeAdapter {\\n    function getSpender() external view returns(address);\\n    function getTradeCalldata(\\n        address _fromToken,\\n        address _toToken,\\n        address _toAddress,\\n        uint256 _fromQuantity,\\n        uint256 _minToQuantity,\\n        bytes memory _data\\n    )\\n        external\\n        view\\n        returns (address, uint256, bytes memory);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IIdentityService.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\n\\ninterface IIdentityService {\\n      function isPrimeByJasperVault(address _jasperVault) external view returns(bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IIntegrationRegistry.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\n\\ninterface IIntegrationRegistry {\\n    function addIntegration(address _module, string memory _id, address _wrapper) external;\\n    function getIntegrationAdapter(address _module, string memory _id) external view returns(address);\\n    function getIntegrationAdapterWithHash(address _module, bytes32 _id) external view returns(address);\\n    function isValidIntegration(address _module, string memory _id) external view returns(bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IJasperVault.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title IJasperVault\\n * @author Set Protocol\\n *\\n * Interface for operating with SetTokens.\\n */\\ninterface IJasperVault is IERC20 {\\n    /* ============ Enums ============ */\\n\\n    enum ModuleState {\\n        NONE,\\n        PENDING,\\n        INITIALIZED\\n    }\\n\\n    /* ============ Structs ============ */\\n    /**\\n     * The base definition of a SetToken Position\\n     *\\n     * @param component           Address of token in the Position\\n     * @param module              If not in default state, the address of associated module\\n     * @param unit                Each unit is the # of components per 10^18 of a SetToken\\n     * @param positionState       Position ENUM. Default is 0; External is 1\\n     * @param data                Arbitrary data\\n     */\\n    struct Position {\\n        address component;\\n        address module;\\n        int256 unit;\\n        uint8 positionState;\\n        bytes data;\\n        uint256 coinType;\\n    }\\n\\n    /**\\n     * A struct that stores a component's cash position details and external positions\\n     * This data structure allows O(1) access to a component's cash position units and\\n     * virtual units.\\n     *\\n     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\\n     *                                  updating all units at once via the position multiplier. Virtual units are achieved\\n     *                                  by dividing a \\\"real\\\" value by the \\\"positionMultiplier\\\"\\n     * @param componentIndex\\n     * @param externalPositionModules   List of external modules attached to each external position. Each module\\n     *                                  maps to an external position\\n     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\\n     */\\n    struct ComponentPosition {\\n        int256 virtualUnit;\\n        uint256 coinType;\\n        address[] externalPositionModules;\\n        mapping(address => ExternalPosition) externalPositions;\\n    }\\n\\n    /**\\n     * A struct that stores a component's external position details including virtual unit and any\\n     * auxiliary data.\\n     *\\n     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\\n     * @param data              Arbitrary data\\n     */\\n    struct ExternalPosition {\\n        uint256 coinType;\\n        int256 virtualUnit;\\n        bytes data;\\n    }\\n\\n    /* ============ Functions ============ */\\n    function controller() external view returns (address);\\n\\n    function editDefaultPositionCoinType(\\n        address _component,\\n        uint256 coinType\\n    ) external;\\n\\n    function editExternalPositionCoinType(\\n        address _component,\\n        address _module,\\n        uint256 coinType\\n    ) external;\\n\\n    function addComponent(address _component) external;\\n\\n    function removeComponent(address _component) external;\\n\\n    function editDefaultPositionUnit(\\n        address _component,\\n        int256 _realUnit\\n    ) external;\\n\\n    function addExternalPositionModule(\\n        address _component,\\n        address _positionModule\\n    ) external;\\n\\n    function removeExternalPositionModule(\\n        address _component,\\n        address _positionModule\\n    ) external;\\n\\n    function editExternalPositionUnit(\\n        address _component,\\n        address _positionModule,\\n        int256 _realUnit\\n    ) external;\\n\\n    function editExternalPositionData(\\n        address _component,\\n        address _positionModule,\\n        bytes calldata _data\\n    ) external;\\n\\n    function invoke(\\n        address _target,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory);\\n\\n    function editPositionMultiplier(int256 _newMultiplier) external;\\n\\n    function mint(address _account, uint256 _quantity) external;\\n\\n    function burn(address _account, uint256 _quantity) external;\\n\\n    function lock() external;\\n\\n    function unlock() external;\\n\\n    function addModule(address _module) external;\\n\\n    function removeModule(address _module) external;\\n\\n    function initializeModule() external;\\n\\n    function setManager(address _manager) external;\\n\\n    function manager() external view returns (address);\\n\\n    function moduleStates(address _module) external view returns (ModuleState);\\n\\n    function getModules() external view returns (address[] memory);\\n\\n    function getDefaultPositionRealUnit(\\n        address _component\\n    ) external view returns (int256);\\n\\n    function getExternalPositionRealUnit(\\n        address _component,\\n        address _positionModule\\n    ) external view returns (int256);\\n\\n    function getComponents() external view returns (address[] memory);\\n\\n    function getExternalPositionModules(\\n        address _component\\n    ) external view returns (address[] memory);\\n\\n    function getExternalPositionData(\\n        address _component,\\n        address _positionModule\\n    ) external view returns (bytes memory);\\n\\n    function isExternalPositionModule(\\n        address _component,\\n        address _module\\n    ) external view returns (bool);\\n\\n    function isComponent(address _component) external view returns (bool);\\n\\n    function positionMultiplier() external view returns (int256);\\n\\n    function getPositions() external view returns (Position[] memory);\\n\\n    function getTotalComponentRealUnits(\\n        address _component\\n    ) external view returns (int256);\\n\\n    function isInitializedModule(address _module) external view returns (bool);\\n\\n    function isPendingModule(address _module) external view returns (bool);\\n\\n    function isLocked() external view returns (bool);\\n\\n    function masterToken() external view returns (address);\\n\\n    function setBaseProperty(string memory _name,string memory _symbol,uint256 _followFee,uint256 _maxFollowFee) external;\\n    function setBaseFeeAndToken(address _masterToken,uint256 _profitShareFee) external;\\n\\n     function followFee() external view returns(uint256);\\n     function maxFollowFee() external view returns(uint256);\\n     function profitShareFee() external view returns(uint256);\\n\\n     function removAllPosition() external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILeverageModule.sol\": {\r\n      \"content\": \"pragma solidity 0.6.10;\\nimport {IJasperVault} from \\\"./IJasperVault.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ILeverageModule {\\n    function initialize(\\n        IJasperVault _jasperVault\\n    ) external;\\n\\n    function borrow(           \\n           IJasperVault _jasperVault,\\n           IERC20 _borrowAsset,\\n           uint256 _borrowQuantityUnits) external;\\n\\n    function  repay(\\n        IJasperVault _jasperVault,\\n        IERC20 _repayAsset,\\n        uint256 _redeemQuantityUnits,\\n        bool  _isAllRepay\\n    ) external;      \\n\\n    function lever(\\n        IJasperVault _jasperVault,\\n        IERC20 _borrowAsset,\\n        IERC20 _collateralAsset,\\n        uint256 _borrowQuantityUnits,\\n        uint256 _minReceiveQuantityUnits,\\n        string memory _tradeAdapterName,\\n        bytes memory _tradeData\\n    ) external;\\n\\n    function delever(\\n        IJasperVault _jasperVault,\\n        IERC20 _collateralAsset,\\n        IERC20 _repayAsset,\\n        uint256 _redeemQuantityUnits,\\n        uint256 _minRepayQuantityUnits,\\n        string memory _tradeAdapterName,\\n        bytes memory _tradeData\\n    ) external;\\n\\n    function deleverToZeroBorrowBalance(\\n        IJasperVault _jasperVault,\\n        IERC20 _collateralAsset,\\n        IERC20 _repayAsset,\\n        uint256 _redeemQuantityUnits,\\n        string memory _tradeAdapterName,\\n        bytes memory _tradeData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\n\\n\\n/**\\n * @title IModule\\n * @author Set Protocol\\n *\\n * Interface for interacting with Modules.\\n */\\ninterface IModule {\\n    /**\\n     * Called by a SetToken to notify that this module was removed from the Set token. Any logic can be included\\n     * in case checks need to be made or state needs to be cleared.\\n     */\\n    function removeModule() external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IModuleIssuanceHook.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IJasperVault } from \\\"./IJasperVault.sol\\\";\\n\\n\\n/**\\n * CHANGELOG:\\n *      - Added a module level issue hook that can be used to set state ahead of component level\\n *        issue hooks\\n */\\ninterface IModuleIssuanceHook {\\n\\n    function moduleIssueHook(IJasperVault _jasperVault, uint256 _setTokenQuantity) external;\\n    function moduleRedeemHook(IJasperVault _jasperVault, uint256 _setTokenQuantity) external;\\n\\n    function componentIssueHook(\\n        IJasperVault _jasperVault,\\n        uint256 _setTokenQuantity,\\n        IERC20 _component,\\n        bool _isEquity\\n    ) external;\\n\\n    function componentRedeemHook(\\n        IJasperVault _jasperVault,\\n        uint256 _setTokenQuantity,\\n        IERC20 _component,\\n        bool _isEquity\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\n\\n/**\\n * @title IPriceOracle\\n * @author Set Protocol\\n *\\n * Interface for interacting with PriceOracle\\n */\\ninterface IPriceOracle {\\n\\n    /* ============ Functions ============ */\\n\\n    function getPrice(address _assetOne, address _assetTwo) external view returns (uint256);\\n    function masterQuoteAsset() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISetValuer.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\n\\nimport { IJasperVault } from \\\"../interfaces/IJasperVault.sol\\\";\\n\\ninterface ISetValuer {\\n    function calculateSetTokenValuation(IJasperVault _jasperVault, address _quoteAsset) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISignalSubscriptionModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\nimport {IJasperVault} from \\\"./IJasperVault.sol\\\";\\n\\ninterface ISignalSubscriptionModule {\\n    function subscribe(IJasperVault _jasperVault, address target) external;\\n\\n    function unsubscribe(IJasperVault _jasperVault, address target) external;\\n\\n    function unsubscribeByMaster(address target) external;\\n\\n    function exectueFollowStart(address _jasperVault) external;\\n    function exectueFollowEnd(address _jasperVault) external;\\n    \\n    function isExectueFollow(address _jasperVault) external view returns (bool);\\n  \\n    function warningLine() external view returns(uint256);\\n\\n    function unsubscribeLine() external view returns(uint256);\\n\\n    function handleFee(IJasperVault _jasperVault) external;\\n\\n    function handleResetFee(IJasperVault _target,address _token,uint256 _amount) external;\\n\\n    function mirrorToken() external view returns(address);\\n\\n    function udpate_allowedCopytrading(\\n        IJasperVault _jasperVault, \\n        bool can_copy_trading\\n    ) external;\\n\\n    function get_followers(address target)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function get_signal_provider(IJasperVault _jasperVault)\\n        external\\n        view\\n        returns (address);\\n}\\n\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/ISignalSuscriptionModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\nimport {IJasperVault} from \\\"./IJasperVault.sol\\\";\\n\\ninterface ISignalSuscriptionModule {\\n    function subscribe(IJasperVault _jasperVault, address target) external;\\n\\n    function unsubscribe(IJasperVault _jasperVault, address target) external;\\n\\n    function unsubscribeByMaster(address target) external;\\n\\n    function exectueFollowStart(address _jasperVault) external;\\n    function exectueFollowEnd(address _jasperVault) external;\\n    \\n    function isExectueFollow(address _jasperVault) external view returns (bool);\\n  \\n    function warningLine() external view returns(uint256);\\n\\n    function unsubscribeLine() external view returns(uint256);\\n\\n    function handleFee(IJasperVault _jasperVault) external view  returns(address[] memory,uint256[] memory);\\n    function handleTransferShareFee(IJasperVault _jasperVault,address[] memory sharer,uint256[] memory shareFee) external view;\\n    function handleResetFee(IJasperVault _target,IJasperVault _jasperVault,address _token,uint256 _amount) external;\\n   \\n    function mirrorToken() external view returns(address);\\n\\n    function udpate_allowedCopytrading(\\n        IJasperVault _jasperVault, \\n        bool can_copy_trading\\n    ) external;\\n\\n    function get_followers(address target)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function get_signal_provider(IJasperVault _jasperVault)\\n        external\\n        view\\n        returns (address);\\n}\\n\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/ISubscribeFeePool.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\ninterface ISubscribeFeePool {\\n    function deposit(address _token, address _to, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUtilsModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nimport { IJasperVault } from \\\"./IJasperVault.sol\\\";\\n\\ninterface IUtilsModule {\\n\\n    struct  SwapInfo{\\n        string  exchangeName;\\n        address assetIn;\\n        address assetOut;\\n        uint256 amountIn;\\n        uint256 amountLimit;\\n        uint256 approveAmont;\\n        bool isExact;\\n        bytes   data;    \\n    }\\n\\n    struct Param{\\n        IJasperVault target;\\n        IJasperVault follow;\\n        uint256 positionRate;\\n        address[]  aTokens;\\n        address[]  dTokens;\\n        SwapInfo[] masterToOther;\\n        SwapInfo[] otherToMaster;    \\n        int256   rate;  //1000\\n        SwapInfo[] beforeSwap;\\n        SwapInfo[] afterSwap;\\n        address[] spotTokens;\\n        bool isMirror;\\n    }\\n    function initialize(IJasperVault _jasperVault) external;\\n    function reset(Param memory param) external;  \\n}\\n\"\r\n    },\r\n    \"contracts/lib/AddressArrayUtils.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n\\n*/\\n\\npragma solidity 0.6.10;\\n\\n/**\\n * @title AddressArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Address Arrays\\n *\\n * CHANGELOG:\\n * - 4/21/21: Added validatePairsWithArray methods\\n */\\nlibrary AddressArrayUtils {\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (uint256(-1), false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(address[] memory A, address a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(address[] memory A) internal pure returns(bool) {\\n        require(A.length > 0, \\\"A is empty\\\");\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            address current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(address[] memory A, address a)\\n        internal\\n        pure\\n        returns (address[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"Address not in array.\\\");\\n        } else {\\n            (address[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     */\\n    function removeStorage(address[] storage A, address a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"Address not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(address[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (address[] memory, address)\\n    {\\n        uint256 length = A.length;\\n        require(index < A.length, \\\"Index must be < A length\\\");\\n        address[] memory newAddresses = new address[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newAddresses[j - 1] = A[j];\\n        }\\n        return (newAddresses, A[index]);\\n    }\\n\\n    /**\\n     * Returns the combination of the two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        address[] memory newAddresses = new address[](aLength + bLength);\\n        for (uint256 i = 0; i < aLength; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = 0; j < bLength; j++) {\\n            newAddresses[aLength + j] = B[j];\\n        }\\n        return newAddresses;\\n    }\\n\\n    /**\\n     * Validate that address and uint array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of uint\\n     */\\n    function validatePairsWithArray(address[] memory A, uint[] memory B) internal pure {\\n        require(A.length == B.length, \\\"Array length mismatch\\\");\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and bool array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of bool\\n     */\\n    function validatePairsWithArray(address[] memory A, bool[] memory B) internal pure {\\n        require(A.length == B.length, \\\"Array length mismatch\\\");\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and string array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of strings\\n     */\\n    function validatePairsWithArray(address[] memory A, string[] memory B) internal pure {\\n        require(A.length == B.length, \\\"Array length mismatch\\\");\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address array lengths match, and calling address array are not empty\\n     * and contain no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of addresses\\n     */\\n    function validatePairsWithArray(address[] memory A, address[] memory B) internal pure {\\n        require(A.length == B.length, \\\"Array length mismatch\\\");\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and bytes array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of bytes\\n     */\\n    function validatePairsWithArray(address[] memory A, bytes[] memory B) internal pure {\\n        require(A.length == B.length, \\\"Array length mismatch\\\");\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate address array is not empty and contains no duplicate elements.\\n     *\\n     * @param A          Array of addresses\\n     */\\n    function _validateLengthAndUniqueness(address[] memory A) internal pure {\\n        require(A.length > 0, \\\"Array length must be > 0\\\");\\n        require(!hasDuplicate(A), \\\"Cannot duplicate addresses\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/ExplicitERC20.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title ExplicitERC20\\n * @author Set Protocol\\n *\\n * Utility functions for ERC20 transfers that require the explicit amount to be transferred.\\n */\\nlibrary ExplicitERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * When given allowance, transfers a token from the \\\"_from\\\" to the \\\"_to\\\" of quantity \\\"_quantity\\\".\\n     * Ensures that the recipient has received the correct quantity (ie no fees taken on transfer)\\n     *\\n     * @param _token           ERC20 token to approve\\n     * @param _from            The account to transfer tokens from\\n     * @param _to              The account to transfer tokens to\\n     * @param _quantity        The quantity to transfer\\n     */\\n    function transferFrom(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _quantity\\n    )\\n        internal\\n    {\\n        // Call specified ERC20 contract to transfer tokens (via proxy).\\n        if (_quantity > 0) {\\n            uint256 existingBalance = _token.balanceOf(_to);\\n\\n            SafeERC20.safeTransferFrom(\\n                _token,\\n                _from,\\n                _to,\\n                _quantity\\n            );\\n\\n            uint256 newBalance = _token.balanceOf(_to);\\n\\n            // Verify transfer quantity is reflected in balance\\n            require(\\n                newBalance == existingBalance.add(_quantity),\\n                \\\"Invalid post transfer balance\\\"\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/PreciseUnitMath.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\n\\n/**\\n * @title PreciseUnitMath\\n * @author Set Protocol\\n *\\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\\n * dYdX's BaseMath library.\\n *\\n * CHANGELOG:\\n * - 9/21/20: Added safePower function\\n * - 4/21/21: Added approximatelyEquals function\\n * - 12/13/21: Added preciseDivCeil (int overloads) function\\n * - 12/13/21: Added abs function\\n */\\nlibrary PreciseUnitMath {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using SafeCast for int256;\\n\\n    // The number One in precise units.\\n    uint256 constant internal PRECISE_UNIT = 10 ** 18;\\n    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\\n\\n    // Max unsigned integer value\\n    uint256 constant internal MAX_UINT_256 = type(uint256).max;\\n    // Max and min signed integer value\\n    int256 constant internal MAX_INT_256 = type(int256).max;\\n    int256 constant internal MIN_INT_256 = type(int256).min;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnit() internal pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnitInt() internal pure returns (int256) {\\n        return PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxUint256() internal pure returns (uint256) {\\n        return MAX_UINT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxInt256() internal pure returns (int256) {\\n        return MAX_INT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function minInt256() internal pure returns (int256) {\\n        return MIN_INT_256;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(b).div(PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\\n     * significand of a number with 18 decimals precision.\\n     */\\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(b).div(PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down).\\n     */\\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(PRECISE_UNIT).div(b);\\n    }\\n\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded towards 0).\\n     */\\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(PRECISE_UNIT_INT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0).\\n     */\\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"Cant divide by 0\\\");\\n\\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0). When `a` is 0, 0 is\\n     * returned. When `b` is 0, method reverts with divide-by-zero error.\\n     */\\n    function preciseDivCeil(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"Cant divide by 0\\\");\\n        \\n        a = a.mul(PRECISE_UNIT_INT);\\n        int256 c = a.div(b);\\n\\n        if (a % b != 0) {\\n            // a ^ b == 0 case is covered by the previous if statement, hence it won't resolve to --c\\n            (a ^ b > 0) ? ++c : --c;\\n        }\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\\n     */\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"Cant divide by 0\\\");\\n        require(a != MIN_INT_256 || b != -1, \\\"Invalid input\\\");\\n\\n        int256 result = a.div(b);\\n        if (a ^ b < 0 && a % b != 0) {\\n            result -= 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\\n    }\\n\\n    /**\\n    * @dev Performs the power on a specified value, reverts on overflow.\\n    */\\n    function safePower(\\n        uint256 a,\\n        uint256 pow\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(a > 0, \\\"Value must be positive\\\");\\n\\n        uint256 result = 1;\\n        for (uint256 i = 0; i < pow; i++){\\n            uint256 previousResult = result;\\n\\n            // Using safemath multiplication prevents overflows\\n            result = previousResult.mul(a);\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns true if a =~ b within range, false otherwise.\\n     */\\n    function approximatelyEquals(uint256 a, uint256 b, uint256 range) internal pure returns (bool) {\\n        return a <= b.add(range) && a >= b.sub(range);\\n    }\\n\\n    /**\\n     * Returns the absolute value of int256 `a` as a uint256\\n     */\\n    function abs(int256 a) internal pure returns (uint) {\\n        return a >= 0 ? a.toUint256() : a.mul(-1).toUint256();\\n    }\\n\\n    /**\\n     * Returns the negation of a\\n     */\\n    function neg(int256 a) internal pure returns (int256) {\\n        require(a > MIN_INT_256, \\\"Inversion overflow\\\");\\n        return -a;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/manager/extensions/GMXExtension.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental \\\"ABIEncoderV2\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {IJasperVault} from \\\"../../interfaces/IJasperVault.sol\\\";\\nimport {IWETH} from \\\"@setprotocol/set-protocol-v2/contracts/interfaces/external/IWETH.sol\\\";\\nimport {IGMXModule} from \\\"../../interfaces/external/gmx/IGMXModule.sol\\\";\\nimport {IGMXAdapter} from \\\"../../interfaces/external/gmx/IGMXAdapter.sol\\\";\\n\\nimport {BaseGlobalExtension} from \\\"../lib/BaseGlobalExtension.sol\\\";\\nimport {IDelegatedManager} from \\\"../interfaces/IDelegatedManager.sol\\\";\\nimport {IManagerCore} from \\\"../interfaces/IManagerCore.sol\\\";\\nimport {ISignalSubscriptionModule} from \\\"../../interfaces/ISignalSubscriptionModule.sol\\\";\\n\\n/**\\n * @title GMXExtension\\n * @author Set Protocol\\n *\\n * Smart contract global extension which provides DelegatedManager operator(s) the ability to GMX\\n * via third party protocols.\\n *\\n */\\ncontract GMXExtension is BaseGlobalExtension {\\n    /* ============ Events ============ */\\n\\n    event GMXExtensionInitialized(\\n        address indexed _jasperVault,\\n        address indexed _delegatedManager\\n    );\\n    event InvokeFail(\\n        address indexed _manage,\\n        address _wrapModule,\\n        string _reason,\\n        bytes _callData\\n    );\\n    /* ============ State Variables ============ */\\n\\n    // Instance of GMXModule\\n    IGMXModule public immutable GMXModule;\\n\\n    ISignalSubscriptionModule public immutable signalSubscriptionModule;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Instantiate with ManagerCore address and GMXModule address.\\n     *\\n     * @param _managerCore              Address of ManagerCore contract\\n     * @param _GMXModule               Address of GMXModule contract\\n     */\\n    constructor(\\n        IManagerCore _managerCore,\\n        IGMXModule _GMXModule,\\n        ISignalSubscriptionModule _signalSubscriptionModule\\n    ) public BaseGlobalExtension(_managerCore) {\\n        GMXModule = _GMXModule;\\n        signalSubscriptionModule = _signalSubscriptionModule;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * ONLY OWNER: Initializes GMXModule on the JasperVault associated with the DelegatedManager.\\n     *\\n     * @param _delegatedManager     Instance of the DelegatedManager to initialize the GMXModule for jasperVault\\n     */\\n    function initializeModule(\\n        IDelegatedManager _delegatedManager\\n    ) external onlyOwnerAndValidManager(_delegatedManager) {\\n        _initializeModule(_delegatedManager.jasperVault(), _delegatedManager);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Initializes GMXExtension to the DelegatedManager.\\n     *\\n     * @param _delegatedManager     Instance of the DelegatedManager to initialize\\n     */\\n    function initializeExtension(\\n        IDelegatedManager _delegatedManager\\n    ) external onlyOwnerAndValidManager(_delegatedManager) {\\n        IJasperVault jasperVault = _delegatedManager.jasperVault();\\n\\n        _initializeExtension(jasperVault, _delegatedManager);\\n\\n        emit GMXExtensionInitialized(\\n            address(jasperVault),\\n            address(_delegatedManager)\\n        );\\n    }\\n\\n    /**\\n     * ONLY OWNER: Initializes GMXExtension to the DelegatedManager and TradeModule to the JasperVault\\n     *\\n     * @param _delegatedManager     Instance of the DelegatedManager to initialize\\n     */\\n    function initializeModuleAndExtension(\\n        IDelegatedManager _delegatedManager\\n    ) external onlyOwnerAndValidManager(_delegatedManager) {\\n        IJasperVault jasperVault = _delegatedManager.jasperVault();\\n\\n        _initializeExtension(jasperVault, _delegatedManager);\\n        _initializeModule(jasperVault, _delegatedManager);\\n\\n        emit GMXExtensionInitialized(\\n            address(jasperVault),\\n            address(_delegatedManager)\\n        );\\n    }\\n\\n    /**\\n     * ONLY MANAGER: Remove an existing JasperVault and DelegatedManager tracked by the GMXExtension\\n     */\\n    function removeExtension() external override {\\n        IDelegatedManager delegatedManager = IDelegatedManager(msg.sender);\\n        IJasperVault jasperVault = delegatedManager.jasperVault();\\n\\n        _removeExtension(jasperVault, delegatedManager);\\n    }\\n\\n    function increasingPosition(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.IncreasePositionRequest memory request\\n    )\\n        external\\n        onlyReset(_jasperVault)\\n        onlyOperator(_jasperVault)\\n    // onlyAllowedAsset(_jasperVault, request._path[0])\\n    // ValidAdapter(_jasperVault, address(GMXModule), request._integrationName)\\n    {\\n        bytes memory callData = abi.encodeWithSelector(\\n            IGMXModule.increasingPosition.selector,\\n            _jasperVault,\\n            request\\n        );\\n        _invokeManager(_manager(_jasperVault), address(GMXModule), callData);\\n    }\\n\\n    function increasingPositionWithFollowers(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.IncreasePositionRequest memory request\\n    )\\n        external\\n        onlyReset(_jasperVault)\\n        onlyOperator(_jasperVault)\\n        onlyAllowedAsset(_jasperVault, request._path[0])\\n        ValidAdapter(_jasperVault, address(GMXModule), request._integrationName)\\n    {\\n        bytes memory callData = abi.encodeWithSelector(\\n            IGMXModule.increasingPosition.selector,\\n            _jasperVault,\\n            request\\n        );\\n        _invokeManager(_manager(_jasperVault), address(GMXModule), callData);\\n        _executeIncreasingPositionWithFollowers(_jasperVault, request);\\n        callData = abi.encodeWithSelector(\\n            ISignalSubscriptionModule.exectueFollowStart.selector,\\n            address(_jasperVault)\\n        );\\n        _invokeManager(\\n            _manager(_jasperVault),\\n            address(signalSubscriptionModule),\\n            callData\\n        );\\n    }\\n\\n    function _executeIncreasingPositionWithFollowers(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.IncreasePositionRequest memory _positionData\\n    ) internal {\\n        address[] memory followers = signalSubscriptionModule.get_followers(\\n            address(_jasperVault)\\n        );\\n        for (uint256 i = 0; i < followers.length; i++) {\\n            bytes memory callData = abi.encodeWithSelector(\\n                IGMXModule.increasingPosition.selector,\\n                IJasperVault(followers[i]),\\n                _positionData\\n            );\\n            _execute(\\n                _manager(IJasperVault(followers[i])),\\n                address(GMXModule),\\n                callData\\n            );\\n        }\\n    }\\n\\n    function _execute(\\n        IDelegatedManager manager,\\n        address module,\\n        bytes memory callData\\n    ) internal {\\n        try manager.interactManager(module, callData) {} catch Error(\\n            string memory reason\\n        ) {\\n            emit InvokeFail(address(manager), module, reason, callData);\\n        }\\n    }\\n\\n    function decreasingPosition(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.DecreasePositionRequest memory request\\n    )\\n        external\\n        onlyReset(_jasperVault)\\n        onlyOperator(_jasperVault)\\n        onlyAllowedAsset(_jasperVault, request._path[0])\\n        ValidAdapter(_jasperVault, address(GMXModule), request._integrationName)\\n    {\\n        bytes memory callData = abi.encodeWithSelector(\\n            IGMXModule.decreasingPosition.selector,\\n            _jasperVault,\\n            request\\n        );\\n        _invokeManager(_manager(_jasperVault), address(GMXModule), callData);\\n    }\\n\\n    function decreasingPositionWithFollowers(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.DecreasePositionRequest memory request\\n    )\\n        external\\n        onlyReset(_jasperVault)\\n        onlyOperator(_jasperVault)\\n        onlyAllowedAsset(_jasperVault, request._path[0])\\n        ValidAdapter(_jasperVault, address(GMXModule), request._integrationName)\\n    {\\n        bytes memory callData = abi.encodeWithSelector(\\n            IGMXModule.decreasingPosition.selector,\\n            _jasperVault,\\n            request\\n        );\\n        _invokeManager(_manager(_jasperVault), address(GMXModule), callData);\\n        _executeDecreasingPositionWithFollowers(_jasperVault, request);\\n        callData = abi.encodeWithSelector(\\n            ISignalSubscriptionModule.exectueFollowStart.selector,\\n            address(_jasperVault)\\n        );\\n        _invokeManager(\\n            _manager(_jasperVault),\\n            address(signalSubscriptionModule),\\n            callData\\n        );\\n    }\\n\\n    function _executeDecreasingPositionWithFollowers(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.DecreasePositionRequest memory request\\n    ) internal {\\n        address[] memory followers = signalSubscriptionModule.get_followers(\\n            address(_jasperVault)\\n        );\\n        for (uint256 i = 0; i < followers.length; i++) {\\n            bytes memory callData = abi.encodeWithSelector(\\n                IGMXModule.decreasingPosition.selector,\\n                IJasperVault(followers[i]),\\n                request\\n            );\\n            _execute(\\n                _manager(IJasperVault(followers[i])),\\n                address(GMXModule),\\n                callData\\n            );\\n        }\\n    }\\n\\n    function swap(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.SwapData memory data\\n    )\\n        external\\n        onlyReset(_jasperVault)\\n        onlyOperator(_jasperVault)\\n        onlyAllowedAsset(_jasperVault, data._path[0])\\n        ValidAdapter(_jasperVault, address(GMXModule), data._integrationName)\\n    {\\n        bytes memory callData = abi.encodeWithSelector(\\n            IGMXModule.swap.selector,\\n            _jasperVault,\\n            data\\n        );\\n        _invokeManager(_manager(_jasperVault), address(GMXModule), callData);\\n    }\\n\\n    function swapWithFollowers(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.SwapData memory data\\n    )\\n        external\\n        onlyReset(_jasperVault)\\n        onlyOperator(_jasperVault)\\n        onlyAllowedAsset(_jasperVault, data._path[0])\\n        ValidAdapter(_jasperVault, address(GMXModule), data._integrationName)\\n    {\\n        bytes memory callData = abi.encodeWithSelector(\\n            IGMXModule.swap.selector,\\n            _jasperVault,\\n            data\\n        );\\n        _invokeManager(_manager(_jasperVault), address(GMXModule), callData);\\n        _executeSwapWithFollowers(_jasperVault, data);\\n        callData = abi.encodeWithSelector(\\n            ISignalSubscriptionModule.exectueFollowStart.selector,\\n            address(_jasperVault)\\n        );\\n        _invokeManager(\\n            _manager(_jasperVault),\\n            address(signalSubscriptionModule),\\n            callData\\n        );\\n    }\\n\\n    function _executeSwapWithFollowers(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.SwapData memory data\\n    ) internal {\\n        address[] memory followers = signalSubscriptionModule.get_followers(\\n            address(_jasperVault)\\n        );\\n        for (uint256 i = 0; i < followers.length; i++) {\\n            bytes memory callData = abi.encodeWithSelector(\\n                IGMXModule.swap.selector,\\n                IJasperVault(followers[i]),\\n                data\\n            );\\n            _execute(\\n                _manager(IJasperVault(followers[i])),\\n                address(GMXModule),\\n                callData\\n            );\\n        }\\n    }\\n\\n    function creatOrder(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.CreateOrderData memory _orderData\\n    )\\n        external\\n        onlyReset(_jasperVault)\\n        onlyOperator(_jasperVault)\\n        ValidAdapter(\\n            _jasperVault,\\n            address(GMXModule),\\n            _orderData._integrationName\\n        )\\n    {\\n        executeOrder(_jasperVault, _orderData);\\n    }\\n\\n    function creatOrderWithFollowers(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.CreateOrderData memory _orderData\\n    )\\n        external\\n        onlyReset(_jasperVault)\\n        onlyOperator(_jasperVault)\\n        ValidAdapter(\\n            _jasperVault,\\n            address(GMXModule),\\n            _orderData._integrationName\\n        )\\n    {\\n        executeOrder(_jasperVault, _orderData);\\n        _executeCreateOrderWithFollowers(_jasperVault, _orderData);\\n        bytes memory callData = abi.encodeWithSelector(\\n            ISignalSubscriptionModule.exectueFollowStart.selector,\\n            address(_jasperVault)\\n        );\\n        _invokeManager(\\n            _manager(_jasperVault),\\n            address(signalSubscriptionModule),\\n            callData\\n        );\\n    }\\n\\n    function executeOrder(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.CreateOrderData memory _orderData\\n    ) internal {\\n        bytes memory callData = abi.encodeWithSelector(\\n            IGMXModule.creatOrder.selector,\\n            _jasperVault,\\n            _orderData\\n        );\\n        _invokeManager(_manager(_jasperVault), address(GMXModule), callData);\\n    }\\n\\n    function _executeCreateOrderWithFollowers(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.CreateOrderData memory _orderData\\n    ) internal {\\n        address[] memory followers = signalSubscriptionModule.get_followers(\\n            address(_jasperVault)\\n        );\\n        for (uint256 i = 0; i < followers.length; i++) {\\n            executeOrder(IJasperVault(followers[i]), _orderData);\\n        }\\n    }\\n\\n    function GMXStake(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.StakeGMXData memory _stakeData\\n    )\\n        external\\n        onlyReset(_jasperVault)\\n        onlyOperator(_jasperVault)\\n        onlyAllowedAsset(_jasperVault, _stakeData._collateralToken)\\n        ValidAdapter(\\n            _jasperVault,\\n            address(GMXModule),\\n            _stakeData._integrationName\\n        )\\n    {\\n        executeStake(_jasperVault, _stakeData);\\n    }\\n\\n    function executeStake(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.StakeGMXData memory _stakeData\\n    ) internal {\\n        bytes memory callData = abi.encodeWithSelector(\\n            IGMXModule.stakeGMX.selector,\\n            _jasperVault,\\n            _stakeData\\n        );\\n        _invokeManager(_manager(_jasperVault), address(GMXModule), callData);\\n    }\\n\\n    function GMXStakeWithFollowers(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.StakeGMXData memory _stakeData\\n    )\\n        external\\n        onlyReset(_jasperVault)\\n        onlyOperator(_jasperVault)\\n        onlyAllowedAsset(_jasperVault, _stakeData._collateralToken)\\n        ValidAdapter(\\n            _jasperVault,\\n            address(GMXModule),\\n            _stakeData._integrationName\\n        )\\n    {\\n        executeStake(_jasperVault, _stakeData);\\n        _executeGMXStakeWithFollowers(_jasperVault, _stakeData);\\n        bytes memory callData = abi.encodeWithSelector(\\n            ISignalSubscriptionModule.exectueFollowStart.selector,\\n            address(_jasperVault)\\n        );\\n        _invokeManager(\\n            _manager(_jasperVault),\\n            address(signalSubscriptionModule),\\n            callData\\n        );\\n    }\\n\\n    function _executeGMXStakeWithFollowers(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.StakeGMXData memory _stakeData\\n    ) internal {\\n        address[] memory followers = signalSubscriptionModule.get_followers(\\n            address(_jasperVault)\\n        );\\n        for (uint256 i = 0; i < followers.length; i++) {\\n            executeStake(IJasperVault(followers[i]), _stakeData);\\n        }\\n    }\\n\\n    function stakeGLP(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.StakeGLPData memory _stakeData\\n    )\\n        external\\n        onlyReset(_jasperVault)\\n        onlyOperator(_jasperVault)\\n        onlyAllowedAsset(_jasperVault, _stakeData._token)\\n        ValidAdapter(\\n            _jasperVault,\\n            address(GMXModule),\\n            _stakeData._integrationName\\n        )\\n    {\\n        executeGLPStake(_jasperVault, _stakeData);\\n    }\\n\\n    function executeGLPStake(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.StakeGLPData memory _stakeData\\n    ) internal {\\n        bytes memory callData = abi.encodeWithSelector(\\n            IGMXModule.stakeGLP.selector,\\n            _jasperVault,\\n            _stakeData\\n        );\\n        _invokeManager(_manager(_jasperVault), address(GMXModule), callData);\\n    }\\n\\n    function stakeGLPWithFollowers(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.StakeGLPData memory _stakeData\\n    )\\n        external\\n        onlyReset(_jasperVault)\\n        onlyOperator(_jasperVault)\\n        onlyAllowedAsset(_jasperVault, _stakeData._token)\\n        ValidAdapter(\\n            _jasperVault,\\n            address(GMXModule),\\n            _stakeData._integrationName\\n        )\\n    {\\n        executeGLPStake(_jasperVault, _stakeData);\\n        _executeStakeGLPWithFollowers(_jasperVault, _stakeData);\\n        bytes memory callData = abi.encodeWithSelector(\\n            ISignalSubscriptionModule.exectueFollowStart.selector,\\n            address(_jasperVault)\\n        );\\n        _invokeManager(\\n            _manager(_jasperVault),\\n            address(signalSubscriptionModule),\\n            callData\\n        );\\n    }\\n\\n    function _executeStakeGLPWithFollowers(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.StakeGLPData memory _stakeData\\n    ) internal {\\n        address[] memory followers = signalSubscriptionModule.get_followers(\\n            address(_jasperVault)\\n        );\\n        for (uint256 i = 0; i < followers.length; i++) {\\n            executeGLPStake(IJasperVault(followers[i]), _stakeData);\\n        }\\n    }\\n\\n    function handleRewards(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.HandleRewardData calldata rewardData\\n    )\\n        external\\n        onlyReset(_jasperVault)\\n        onlyOperator(_jasperVault)\\n        ValidAdapter(\\n            _jasperVault,\\n            address(GMXModule),\\n            rewardData._integrationName\\n        )\\n    {\\n        executeHandleRewards(_jasperVault, rewardData);\\n    }\\n\\n    function handleRewardsWithFollowers(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.HandleRewardData calldata rewardData\\n    )\\n        external\\n        onlyReset(_jasperVault)\\n        onlyOperator(_jasperVault)\\n        ValidAdapter(\\n            _jasperVault,\\n            address(GMXModule),\\n            rewardData._integrationName\\n        )\\n    {\\n        executeHandleRewards(_jasperVault, rewardData);\\n        _executeHandleRewardsFollowers(_jasperVault, rewardData);\\n        bytes memory callData = abi.encodeWithSelector(\\n            ISignalSubscriptionModule.exectueFollowStart.selector,\\n            address(_jasperVault)\\n        );\\n        _invokeManager(\\n            _manager(_jasperVault),\\n            address(signalSubscriptionModule),\\n            callData\\n        );\\n    }\\n\\n    function _executeHandleRewardsFollowers(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.HandleRewardData calldata rewardData\\n    ) internal {\\n        address[] memory followers = signalSubscriptionModule.get_followers(\\n            address(_jasperVault)\\n        );\\n        for (uint256 i = 0; i < followers.length; i++) {\\n            bytes memory callData = abi.encodeWithSelector(\\n                IGMXModule.handleRewards.selector,\\n                _jasperVault,\\n                rewardData\\n            );\\n            _invokeManager(\\n                _manager(_jasperVault),\\n                address(GMXModule),\\n                callData\\n            );\\n        }\\n    }\\n\\n    function executeHandleRewards(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.HandleRewardData calldata rewardData\\n    ) internal {\\n        bytes memory callData = abi.encodeWithSelector(\\n            IGMXModule.handleRewards.selector,\\n            _jasperVault,\\n            rewardData\\n        );\\n        _invokeManager(_manager(_jasperVault), address(GMXModule), callData);\\n    }\\n\\n    /**\\n     * Internal function to initialize GMXModule on the JasperVault associated with the DelegatedManager.\\n     *\\n     * @param _jasperVault             Instance of the JasperVault corresponding to the DelegatedManager\\n     * @param _delegatedManager     Instance of the DelegatedManager to initialize the GMXModule for\\n     */\\n    function _initializeModule(\\n        IJasperVault _jasperVault,\\n        IDelegatedManager _delegatedManager\\n    ) internal {\\n        bytes memory callData = abi.encodeWithSelector(\\n            IGMXModule.initialize.selector,\\n            _jasperVault\\n        );\\n        _invokeManager(_delegatedManager, address(GMXModule), callData);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/manager/extensions/SignalSuscriptionExtension.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport {IJasperVault} from \\\"../../interfaces/IJasperVault.sol\\\";\\nimport {ISignalSuscriptionModule} from \\\"../../interfaces/ISignalSuscriptionModule.sol\\\";\\n\\nimport {BaseGlobalExtension} from \\\"../lib/BaseGlobalExtension.sol\\\";\\nimport {IDelegatedManager} from \\\"../interfaces/IDelegatedManager.sol\\\";\\nimport {IManagerCore} from \\\"../interfaces/IManagerCore.sol\\\";\\nimport {AddressArrayUtils} from \\\"@setprotocol/set-protocol-v2/contracts/lib/AddressArrayUtils.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\ninterface IOwnable {\\n    function owner() external view returns (address);\\n}\\ninterface IAaveLeverageModule{\\n    function  sync(IJasperVault _jasperVault) external ;\\n}\\n\\ncontract SignalSuscriptionExtension is BaseGlobalExtension {   \\n    /* ============ Events ============ */\\n    using AddressArrayUtils for address[];\\n    using SafeERC20 for IERC20;\\n    event SignalSuscriptionExtensionInitialized(\\n        address indexed _jasperVault,\\n        address indexed _delegatedManager\\n    );\\n\\n    event EditFeeAndInfo(\\n        IJasperVault indexed _jasperVault,\\n        uint256 _profitShareFee,\\n        uint256 _delay\\n    );\\n\\n    // event SetSubscribeTarget(\\n    //      address indexed _jasperVault,\\n    //      address target\\n    // );\\n    event SetSubscribeStatus(IJasperVault indexed _jasperVault, uint256 status);\\n\\n    event SetWhiteList(\\n        IJasperVault indexed _jasperVault,\\n        address user,\\n        bool status\\n    );\\n\\n    /* ============ State Variables ============ */\\n\\n    // Instance of SignalSuscriptionModule\\n    ISignalSuscriptionModule public immutable signalSuscriptionModule;\\n\\n    mapping(IJasperVault => address[]) public whiteList;\\n    mapping(IJasperVault => bool) public allowSubscribe;\\n\\n    mapping(IJasperVault => uint256) public allowMaxSubscribe;\\n    mapping(IJasperVault => uint256) public currentSubscribeNumber;\\n    //settleType == 1 outSettle\\n    mapping(IJasperVault=> uint256) public settleTypes;\\n    IAaveLeverageModule public aaveLeverageModule;\\n    /* ============ Constructor ============ */\\n\\n    constructor(\\n        IManagerCore _managerCore,\\n        ISignalSuscriptionModule _signalSuscriptionModule,\\n        IAaveLeverageModule _aaveLeverageModule\\n    ) public BaseGlobalExtension(_managerCore) {\\n        signalSuscriptionModule = _signalSuscriptionModule;\\n        aaveLeverageModule = _aaveLeverageModule;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    function setWhiteListAndSubscribeStatus(\\n        IJasperVault _jasperVault,\\n        address[] memory _addList,\\n        uint256[] memory _settleType, \\n        address[] memory _delList,\\n        uint256 _allowMaxSubscribe,\\n        bool _status\\n    ) external onlyOperator(_jasperVault) {\\n        allowSubscribe[_jasperVault] = _status;\\n        address[] memory currentWhiteList=whiteList[_jasperVault];\\n        allowMaxSubscribe[_jasperVault]=1;\\n        for (uint256 i = 0; i < _addList.length; i++) {\\n            bool isExist = currentWhiteList.contains(_addList[i]);\\n            if (!isExist) {\\n                settleTypes[_jasperVault]=_settleType[i];\\n                whiteList[_jasperVault].push(_addList[i]);\\n                emit SetWhiteList(_jasperVault, _addList[i], true);\\n            }\\n        }\\n        for (uint256 i = 0; i < _delList.length; i++) {\\n            bool isExist = currentWhiteList.contains(_delList[i]);\\n            if (isExist) {\\n                delete  settleTypes[_jasperVault];\\n                whiteList[_jasperVault].removeStorage(_delList[i]);\\n                emit SetWhiteList(_jasperVault, _delList[i], false);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * ONLY OWNER: Initializes SignalSuscriptionModule on the JasperVault associated with the DelegatedManager.\\n     *\\n     * @param _delegatedManager     Instance of the DelegatedManager to initialize the TradeModule for\\n     */\\n    function initializeModule(\\n        IDelegatedManager _delegatedManager\\n    ) external onlyOwnerAndValidManager(_delegatedManager) {\\n        require(\\n            _delegatedManager.isInitializedExtension(address(this)),\\n            \\\"Extension must be initialized\\\"\\n        );\\n\\n        _initializeModule(_delegatedManager.jasperVault(), _delegatedManager);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Initializes TradeExtension to the DelegatedManager.\\n     *\\n     * @param _delegatedManager     Instance of the DelegatedManager to initialize\\n     */\\n    function initializeExtension(\\n        IDelegatedManager _delegatedManager\\n    ) external onlyOwnerAndValidManager(_delegatedManager) {\\n        require(\\n            _delegatedManager.isPendingExtension(address(this)),\\n            \\\"Extension must be pending\\\"\\n        );\\n\\n        IJasperVault jasperVault = _delegatedManager.jasperVault();\\n\\n        _initializeExtension(jasperVault, _delegatedManager);\\n\\n        emit SignalSuscriptionExtensionInitialized(\\n            address(jasperVault),\\n            address(_delegatedManager)\\n        );\\n    }\\n\\n    /**\\n     * ONLY OWNER: Initializes TradeExtension to the DelegatedManager and TradeModule to the JasperVault\\n     *\\n     * @param _delegatedManager     Instance of the DelegatedManager to initialize\\n     */\\n    function initializeModuleAndExtension(\\n        IDelegatedManager _delegatedManager\\n    ) external onlyOwnerAndValidManager(_delegatedManager) {\\n        require(\\n            _delegatedManager.isPendingExtension(address(this)),\\n            \\\"Extension must be pending\\\"\\n        );\\n\\n        IJasperVault jasperVault = _delegatedManager.jasperVault();\\n\\n        _initializeExtension(jasperVault, _delegatedManager);\\n        _initializeModule(jasperVault, _delegatedManager);\\n\\n        emit SignalSuscriptionExtensionInitialized(\\n            address(jasperVault),\\n            address(_delegatedManager)\\n        );\\n    }\\n\\n    /**\\n     * ONLY MANAGER: Remove an existing JasperVault and DelegatedManager tracked by the TradeExtension\\n     */\\n    function removeExtension() external override {\\n        IDelegatedManager delegatedManager = IDelegatedManager(msg.sender);\\n        IJasperVault jasperVault = delegatedManager.jasperVault();\\n\\n        _removeExtension(jasperVault, delegatedManager);\\n    }\\n\\n    function editFeeAndInfo(\\n        IJasperVault _jasperVault,\\n        address _masterToken,\\n        uint256 _profitShareFee,\\n        uint256 _delay\\n    ) external onlyReset(_jasperVault) onlyOperator(_jasperVault) {\\n        address[] memory followers = signalSuscriptionModule.get_followers(\\n            address(_jasperVault)\\n        );\\n        for (uint256 i = 0; i < followers.length; i++) {\\n            bytes memory callData = abi.encodeWithSelector(\\n                ISignalSuscriptionModule.unsubscribe.selector,\\n                followers[i],\\n                address(_jasperVault)\\n            );\\n            _invokeManager(\\n                _manager(IJasperVault(followers[i])),\\n                address(signalSuscriptionModule),\\n                callData\\n            );\\n            _manager(IJasperVault(followers[i])).setSubscribeStatus(2);   \\n            emit SetSubscribeStatus(IJasperVault(followers[i]), 2);\\n        }\\n        _manager(_jasperVault).setBaseFeeAndToken(\\n            _masterToken,\\n            _profitShareFee,\\n            _delay\\n        );\\n        currentSubscribeNumber[_jasperVault]=0;\\n        emit EditFeeAndInfo(_jasperVault, _profitShareFee, _delay);\\n    }\\n\\n    function subscribe(\\n        IJasperVault _jasperVault,\\n        address target\\n    )\\n        external\\n        onlyReset(_jasperVault)\\n        onlyOperator(_jasperVault)\\n        onlyPrimeMember(_jasperVault, target)\\n    {\\n        checkWhiteList(IJasperVault(target));\\n        bytes memory callData = abi.encodeWithSelector(\\n            ISignalSuscriptionModule.subscribe.selector,\\n            _jasperVault,\\n            target\\n        );\\n        _invokeManager(\\n            _manager(_jasperVault),\\n            address(signalSuscriptionModule),\\n            callData\\n        );\\n        _manager(_jasperVault).setSubscribeStatus(1);\\n        currentSubscribeNumber[IJasperVault(target)] =\\n            currentSubscribeNumber[IJasperVault(target)] +\\n            1;\\n        emit SetSubscribeStatus(_jasperVault, 1);\\n    }\\n\\n    function unsubscribe(\\n        IJasperVault _jasperVault,\\n        address target\\n    ) external onlySubscribed(_jasperVault) onlyOperator(_jasperVault) {\\n        _unsubscribe(_jasperVault, target);\\n    }\\n\\n    function unsubscribeByExtension(\\n        IJasperVault _jasperVault,\\n        address target\\n    )\\n        external\\n        onlySubscribed(_jasperVault)\\n        onlyExtension(IJasperVault(target))\\n    {\\n        _unsubscribe(_jasperVault, target);\\n    }\\n\\n    function _unsubscribe(IJasperVault _jasperVault, address target) internal {\\n        bytes memory callData = abi.encodeWithSelector(\\n            ISignalSuscriptionModule.unsubscribe.selector,\\n            _jasperVault,\\n            target\\n        );\\n        _invokeManager(\\n            _manager(_jasperVault),\\n            address(signalSuscriptionModule),\\n            callData\\n        );\\n        _manager(_jasperVault).setSubscribeStatus(2);\\n        currentSubscribeNumber[IJasperVault(target)] =\\n            currentSubscribeNumber[IJasperVault(target)] -\\n            1;\\n        emit SetSubscribeStatus(_jasperVault, 2);\\n    }\\n\\n    //masterVault unsubscribe  followVault\\n    function unsubscribeByMaster(\\n        IJasperVault _target,\\n        bool _isAll,\\n        address[] memory _followers\\n    ) external onlyOperator(_target) {\\n        address[] memory allFollower = signalSuscriptionModule.get_followers(\\n            address(_target)\\n        );\\n        if(allFollower.length>0){\\n            if (_isAll) {\\n                delete currentSubscribeNumber[_target];\\n                bytes memory callData = abi.encodeWithSelector(\\n                    ISignalSuscriptionModule.unsubscribeByMaster.selector,\\n                    _target\\n                );\\n                _invokeManager(\\n                    _manager(_target),\\n                    address(signalSuscriptionModule),\\n                    callData\\n                );\\n                //edit subscribeStatus\\n                for (uint256 i = 0; i < allFollower.length; i++) {\\n                    _manager(IJasperVault(allFollower[i])).setSubscribeStatus(2);\\n                }\\n            } else {\\n                for (uint256 i = 0; i < _followers.length; i++) {\\n                    if (allFollower.contains(_followers[i])) {\\n                        bytes memory callData = abi.encodeWithSelector(\\n                            ISignalSuscriptionModule.unsubscribe.selector,\\n                            IJasperVault(_followers[i]),\\n                            _target\\n                        );\\n                        _invokeManager(\\n                            _manager(IJasperVault(_followers[i])),\\n                            address(signalSuscriptionModule),\\n                            callData\\n                        );\\n                        _manager(IJasperVault(_followers[i])).setSubscribeStatus(2);\\n                        currentSubscribeNumber[_target] =\\n                            currentSubscribeNumber[_target] -\\n                            1;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function exectueFollowEnd(\\n        address _jasperVault\\n    ) external onlyExtension(IJasperVault(_jasperVault)) {\\n        bytes memory callData = abi.encodeWithSelector(\\n            ISignalSuscriptionModule.exectueFollowEnd.selector,\\n            _jasperVault\\n        );\\n        _invokeManager(\\n            _manager(IJasperVault(_jasperVault)),\\n            address(signalSuscriptionModule),\\n            callData\\n        );\\n    }\\n\\n    function reset(IJasperVault _jasperVault) external  onlyUnSubscribed(_jasperVault) onlyOperator(_jasperVault){\\n        address target= signalSuscriptionModule.get_signal_provider(_jasperVault);\\n\\n        if(settleTypes[IJasperVault(target)]!=1){\\n        (address[] memory sharer,uint256[] memory shareFee)=signalSuscriptionModule.handleFee(_jasperVault);\\n         uint256 amount;\\n         for(uint i;i<shareFee.length;i++){\\n             amount+=shareFee[i];\\n         }\\n         address metamask=IOwnable(msg.sender).owner();\\n         address masterToken=_jasperVault.masterToken();\\n         IERC20(masterToken).safeTransferFrom(metamask,address(signalSuscriptionModule), amount);\\n         bytes memory callData = abi.encodeWithSelector(\\n            ISignalSuscriptionModule.handleTransferShareFee.selector,\\n            _jasperVault,\\n            sharer,\\n            shareFee\\n        );\\n        _invokeManager(\\n            _manager(IJasperVault(_jasperVault)),\\n            address(signalSuscriptionModule),\\n            callData\\n        );\\n        }\\n        _manager(_jasperVault).setSubscribeStatus(0);\\n        emit SetSubscribeStatus(_jasperVault,0);\\n    }\\n\\n    /* ============ view Functions ============ */\\n    function getFollowers(\\n        address _jasperVault\\n    ) external view returns (address[] memory) {\\n        return signalSuscriptionModule.get_followers(_jasperVault);\\n    }\\n\\n    function isWhiteListByMaster(\\n        IJasperVault _target,\\n        address _user\\n    ) external view returns (bool) {\\n        address[] memory list = whiteList[_target];\\n        bool isSubscribe = list.contains(_user);\\n        return isSubscribe;\\n    }\\n\\n    function getWhiteList(\\n        IJasperVault _jasperVault\\n    ) external view returns (address[] memory) {\\n        return whiteList[_jasperVault];\\n    }\\n\\n    function getExectueFollow(\\n        address _jasperVault\\n    ) external view returns (bool) {\\n        return signalSuscriptionModule.isExectueFollow(_jasperVault);\\n    }\\n\\n    function warningLine() external view returns (uint256) {\\n        return signalSuscriptionModule.warningLine();\\n    }\\n\\n    function unsubscribeLine() external view returns (uint256) {\\n        return signalSuscriptionModule.unsubscribeLine();\\n    }\\n\\n\\n\\n    /* ============ Internal Functions ============ */\\n    function checkWhiteList(IJasperVault _jasperVault) internal view{\\n        require(\\n            allowSubscribe[_jasperVault],\\n            \\\"jasperVault not allow subscribe\\\"\\n        );\\n        require(\\n            currentSubscribeNumber[_jasperVault] <\\n                allowMaxSubscribe[_jasperVault],\\n            \\\"target subscribe number already full\\\"\\n        );\\n        require(isContract(msg.sender),\\\"caller not contract\\\");\\n        address owner = IOwnable(msg.sender).owner();\\n        address[] memory list = whiteList[_jasperVault];\\n        bool isExist = list.contains(owner);\\n        require(isExist, \\\"user is not in the whitelist\\\");\\n    }\\n    function isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly { size := extcodesize(_addr) }\\n        return size > 0;\\n    }\\n    /**\\n     * Internal function to initialize TradeModule on the JasperVault associated with the DelegatedManager.\\n     *\\n     * @param _jasperVault             Instance of the JasperVault corresponding to the DelegatedManager\\n     * @param _delegatedManager     Instance of the DelegatedManager to initialize the TradeModule for\\n     */\\n    function _initializeModule(\\n        IJasperVault _jasperVault,\\n        IDelegatedManager _delegatedManager\\n    ) internal {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"initialize(address)\\\",\\n            _jasperVault\\n        );\\n        _invokeManager(\\n            _delegatedManager,\\n            address(signalSuscriptionModule),\\n            callData\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/manager/extensions/UtilsExtension.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nimport {IJasperVault} from \\\"../../interfaces/IJasperVault.sol\\\";\\nimport {IUtilsModule} from \\\"../../interfaces/IUtilsModule.sol\\\";\\nimport {BaseGlobalExtension} from \\\"../lib/BaseGlobalExtension.sol\\\";\\nimport {IDelegatedManager} from \\\"../interfaces/IDelegatedManager.sol\\\";\\nimport {IManagerCore} from \\\"../interfaces/IManagerCore.sol\\\";\\nimport {ISignalSuscriptionModule} from \\\"../../interfaces/ISignalSuscriptionModule.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport { PreciseUnitMath } from \\\"../../lib/PreciseUnitMath.sol\\\";\\ninterface IOwnable {\\n    function owner() external view returns (address);\\n}\\n\\ncontract UtilsExtension is BaseGlobalExtension {\\n    using SafeERC20 for IERC20;\\n    using PreciseUnitMath for uint256;\\n    event WrapExtensionInitialized(\\n        address indexed _jasperVault,\\n        address indexed _delegatedManager\\n    );\\n    event SetSubscribeStatus(IJasperVault indexed _jasperVault, uint256 status);\\n    IUtilsModule public immutable utilsModule;\\n    ISignalSuscriptionModule public immutable signalSuscriptionModule;\\n    constructor(\\n        IManagerCore _managerCore,\\n        IUtilsModule _utilsModule,\\n        ISignalSuscriptionModule _signalSuscriptionModule\\n    ) public BaseGlobalExtension(_managerCore) {\\n        utilsModule = _utilsModule;\\n        signalSuscriptionModule = _signalSuscriptionModule;\\n    }\\n\\n    // function reset(IUtilsModule.Param memory info) external  onlyUnSubscribed(info.follow) onlyOperator(info.follow){\\n    //         info.isMirror=false;\\n    //         bytes memory callData = abi.encodeWithSelector(\\n    //             IUtilsModule.reset.selector,\\n    //             info\\n    //         );\\n    //         _invokeManager(_manager(info.follow), address(utilsModule), callData);\\n    //         //calculate fee\\n    //         callData = abi.encodeWithSelector(\\n    //             ISignalSuscriptionModule.handleFee.selector,\\n    //             info.follow\\n    //         );\\n    //         _invokeManager(_manager(info.follow), address(signalSuscriptionModule), callData);\\n\\n    //         //update status\\n    //         _manager(info.follow).setSubscribeStatus(0);\\n    //         emit SetSubscribeStatus( info.follow,0);\\n    // }\\n\\n\\n    function rebalance(IUtilsModule.Param memory info) external \\n    onlyOperator(info.follow) \\n    onlyReset(info.follow){\\n\\n            bytes memory callData = abi.encodeWithSelector(\\n                IUtilsModule.reset.selector,\\n                info\\n            );\\n            _invokeManager(_manager(info.follow), address(utilsModule), callData);                  \\n            uint256 vaultProfit=_getJasperVaultValue(info.follow);\\n            uint256 totalSupply=info.follow.totalSupply();\\n            vaultProfit=vaultProfit.preciseMul(totalSupply);\\n            //calculate  mirror fee\\n            if(vaultProfit>=info.target.maxFollowFee()){\\n              //traferFrom fee from metamask \\n              require(isContract(msg.sender),\\\"caller not contract\\\");\\n              address metamask=IOwnable(msg.sender).owner();\\n              address mirrorToken=signalSuscriptionModule.mirrorToken();\\n              require(mirrorToken!=address(0x00),\\\"invalid mirrorToken\\\");\\n              uint256 amount=info.target.followFee();\\n          \\n              if(amount>0){\\n                IERC20(mirrorToken).safeTransferFrom(metamask, address(signalSuscriptionModule), amount);\\n                callData = abi.encodeWithSelector(\\n                    ISignalSuscriptionModule.handleResetFee.selector,\\n                    info.target,\\n                    info.follow,\\n                    mirrorToken,\\n                    amount\\n                );\\n                _invokeManager(_manager(info.follow), address(signalSuscriptionModule), callData);\\n              }\\n            }\\n    }\\n\\n\\n    function isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly { size := extcodesize(_addr) }\\n        return size > 0;\\n    }\\n\\n    //initial\\n    function initializeModule(\\n        IDelegatedManager _delegatedManager\\n    ) external onlyOwnerAndValidManager(_delegatedManager) {\\n        _initializeModule(_delegatedManager.jasperVault(), _delegatedManager);\\n    }\\n\\n    function _initializeModule(\\n        IJasperVault _jasperVault,\\n        IDelegatedManager _delegatedManager\\n    ) internal {\\n        bytes memory callData = abi.encodeWithSelector(\\n            IUtilsModule.initialize.selector,\\n            _jasperVault\\n        );\\n        _invokeManager(_delegatedManager, address(utilsModule), callData);\\n    }\\n\\n    function initializeExtension(\\n        IDelegatedManager _delegatedManager\\n    ) external onlyOwnerAndValidManager(_delegatedManager) {\\n        IJasperVault jasperVault = _delegatedManager.jasperVault();\\n\\n        _initializeExtension(jasperVault, _delegatedManager);\\n\\n        emit WrapExtensionInitialized(\\n            address(jasperVault),\\n            address(_delegatedManager)\\n        );\\n    }\\n    function initializeModuleAndExtension(\\n        IDelegatedManager _delegatedManager\\n    ) external onlyOwnerAndValidManager(_delegatedManager) {\\n        IJasperVault jasperVault = _delegatedManager.jasperVault();\\n\\n        _initializeExtension(jasperVault, _delegatedManager);\\n        _initializeModule(jasperVault, _delegatedManager);\\n\\n        emit WrapExtensionInitialized(\\n            address(jasperVault),\\n            address(_delegatedManager)\\n        );\\n    }\\n\\n    function removeExtension() external override {\\n        IDelegatedManager delegatedManager = IDelegatedManager(msg.sender);\\n        IJasperVault jasperVault = delegatedManager.jasperVault();\\n        _removeExtension(jasperVault, delegatedManager);\\n    }\\n\\n  \\n\\n\\n}\\n\"\r\n    },\r\n    \"contracts/manager/interfaces/IDelegatedManager.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nimport {IJasperVault} from \\\"../../interfaces/IJasperVault.sol\\\";\\n\\ninterface IDelegatedManager {\\n    function interactManager(address _module, bytes calldata _encoded) external;\\n\\n    function initializeExtension() external;\\n\\n    function transferTokens(\\n        address _token,\\n        address _destination,\\n        uint256 _amount\\n    ) external;\\n\\n    function factoryReset(\\n        uint256 _newFeeSplit,\\n        uint256 _managerFees,\\n        uint256 _delay\\n    ) external;\\n\\n    function updateOwnerFeeSplit(uint256 _newFeeSplit) external;\\n\\n    function updateOwnerFeeRecipient(address _newFeeRecipient) external;\\n\\n    function setMethodologist(address _newMethodologist) external;\\n\\n    function transferOwnership(address _owner) external;\\n\\n    function isAllowedAdapter(address _adapter) external view returns (bool);\\n\\n    function jasperVault() external view returns (IJasperVault);\\n\\n    function owner() external view returns (address);\\n\\n    function methodologist() external view returns (address);\\n\\n    function operatorAllowlist(address _operator) external view returns (bool);\\n\\n    function assetAllowlist(address _asset) external view returns (bool);\\n\\n    function useAssetAllowlist() external view returns (bool);\\n\\n    function isAllowedAsset(address _asset) external view returns (bool);\\n\\n    function isPendingExtension(\\n        address _extension\\n    ) external view returns (bool);\\n\\n    function isInitializedExtension(\\n        address _extension\\n    ) external view returns (bool);\\n\\n    function getExtensions() external view returns (address[] memory);\\n\\n    function getOperators() external view returns (address[] memory);\\n\\n    function getAllowedAssets() external view returns (address[] memory);\\n\\n    function ownerFeeRecipient() external view returns (address);\\n\\n    function ownerFeeSplit() external view returns (uint256);\\n\\n    function subscribeStatus() external view returns (uint256);\\n\\n    function setSubscribeStatus(uint256) external;\\n\\n    function getAdapters() external view returns (address[] memory);\\n\\n    function setBaseFeeAndToken(address _masterToken,uint256 _profitShareFee,uint256 _delay) external;\\n    function setBaseProperty(string memory _name,string memory _symbol,uint256 _followFee,uint256 _maxFollowFee) external;\\n    \\n}\\n\"\r\n    },\r\n    \"contracts/manager/interfaces/IGlobalExtension.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nimport { IJasperVault } from \\\"../../interfaces/IJasperVault.sol\\\";\\n\\ninterface IGlobalExtension {\\n    function removeExtension() external;\\n}\\n\"\r\n    },\r\n    \"contracts/manager/interfaces/IManagerCore.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\n\\ninterface IManagerCore {\\n    function addManager(address _manager) external;\\n    function isExtension(address _extension) external view returns(bool);\\n    function isFactory(address _factory) external view returns(bool);\\n    function isManager(address _manager) external view returns(bool);\\n    function owner() external view returns(address);\\n}\"\r\n    },\r\n    \"contracts/manager/lib/BaseGlobalExtension.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport {AddressArrayUtils} from \\\"@setprotocol/set-protocol-v2/contracts/lib/AddressArrayUtils.sol\\\";\\nimport {IJasperVault} from \\\"../../interfaces/IJasperVault.sol\\\";\\n\\nimport {IDelegatedManager} from \\\"../interfaces/IDelegatedManager.sol\\\";\\nimport {IManagerCore} from \\\"../interfaces/IManagerCore.sol\\\";\\n\\nimport {IController} from \\\"../../interfaces/IController.sol\\\";\\nimport {ResourceIdentifier} from \\\"../../protocol/lib/ResourceIdentifier.sol\\\";\\nimport {IIdentityService} from \\\"../../interfaces/IIdentityService.sol\\\";\\n\\n/**\\n * @title BaseGlobalExtension\\n * @author Set Protocol\\n *\\n * Abstract class that houses common global extension-related functions. Global extensions must\\n * also have their own initializeExtension function (not included here because interfaces will vary).\\n */\\nabstract contract BaseGlobalExtension {\\n    using AddressArrayUtils for address[];\\n    using ResourceIdentifier for IController;\\n    /* ============ Events ============ */\\n\\n    event ExtensionRemoved(\\n        address indexed _jasperVault,\\n        address indexed _delegatedManager\\n    );\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of the ManagerCore\\n    IManagerCore public immutable managerCore;\\n\\n    // Mapping from Set Token to DelegatedManager\\n    mapping(IJasperVault => IDelegatedManager) public setManagers;\\n\\n    /* ============ Modifiers ============ */\\n    modifier onlyPrimeMember(IJasperVault _jasperVault, address _target) {\\n        require(\\n            _isPrimeMember(_jasperVault) &&\\n                _isPrimeMember(IJasperVault(_target)),\\n            \\\"This feature is only available to Prime Members\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * Throws if the sender is not the JasperVault manager contract owner\\n     */\\n    modifier onlyOwner(IJasperVault _jasperVault) {\\n        require(msg.sender == _manager(_jasperVault).owner(), \\\"Must be owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * Throws if the sender is not the JasperVault methodologist\\n     */\\n    modifier onlyMethodologist(IJasperVault _jasperVault) {\\n        require(\\n            msg.sender == _manager(_jasperVault).methodologist(),\\n            \\\"Must be methodologist\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyUnSubscribed(IJasperVault _jasperVault) {\\n        require(\\n            _manager(_jasperVault).subscribeStatus() == 2,\\n            \\\"jasperVault not unsubscribed\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlySubscribed(IJasperVault _jasperVault) {\\n        require(\\n            _manager(_jasperVault).subscribeStatus() == 1,\\n            \\\"jasperVault not subscribed\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyReset(IJasperVault _jasperVault) {\\n        require(\\n            _manager(_jasperVault).subscribeStatus() == 0,\\n            \\\"jasperVault not unsettle\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyNotSubscribed(IJasperVault _jasperVault) {\\n        require(\\n            _manager(_jasperVault).subscribeStatus() != 1,\\n            \\\"jasperVault not unsettle\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * Throws if the sender is not a JasperVault operator\\n     */\\n    modifier onlyOperator(IJasperVault _jasperVault) {\\n        require(\\n            _manager(_jasperVault).operatorAllowlist(msg.sender),\\n            \\\"Must be approved operator\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier ValidAdapter(\\n        IJasperVault _jasperVault,\\n        address _module,\\n        string memory _integrationName\\n    ) {\\n        if (_isPrimeMember(_jasperVault)) {\\n            bool isValid = ValidAdapterByModule(\\n                _jasperVault,\\n                _module,\\n                _integrationName\\n            );\\n            require(isValid, \\\"Must be allowed adapter\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * Throws if the sender is not the JasperVault manager contract owner or if the manager is not enabled on the ManagerCore\\n     */\\n    modifier onlyOwnerAndValidManager(IDelegatedManager _delegatedManager) {\\n        require(msg.sender == _delegatedManager.owner(), \\\"Must be owner\\\");\\n        require(\\n            managerCore.isManager(address(_delegatedManager)),\\n            \\\"Must be ManagerCore-enabled manager\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * Throws if asset is not allowed to be held by the Set\\n     */\\n    modifier onlyAllowedAsset(IJasperVault _jasperVault, address _asset) {\\n        if (_isPrimeMember(_jasperVault)) {\\n            require(\\n                _manager(_jasperVault).isAllowedAsset(_asset),\\n                \\\"Must be allowed asset\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n     modifier onlyAllowedAssetTwo(IJasperVault _jasperVault, address _assetone,address _assetTwo) {\\n        if (_isPrimeMember(_jasperVault)) {\\n            require(\\n                _manager(_jasperVault).isAllowedAsset(_assetone) && _manager(_jasperVault).isAllowedAsset(_assetTwo),\\n                \\\"Must be allowed asset\\\"\\n            );\\n        }\\n        _;\\n    }   \\n\\n    modifier onlyExtension(IJasperVault _jasperVault) {\\n        bool isExist = _manager(_jasperVault).isPendingExtension(msg.sender) ||\\n            _manager(_jasperVault).isInitializedExtension(msg.sender);\\n        require(isExist, \\\"Only the extension can call\\\");\\n        _;\\n    }\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Set state variables\\n     *\\n     * @param _managerCore             Address of managerCore contract\\n     */\\n    constructor(IManagerCore _managerCore) public {\\n        managerCore = _managerCore;\\n    }\\n\\n    /* ============ External Functions ============ */\\n    function ValidAssetsByModule(IJasperVault _jasperVault, address _assetone,address _assetTwo) internal view{\\n        if (_isPrimeMember(_jasperVault)) {\\n            require(\\n                _manager(_jasperVault).isAllowedAsset(_assetone) && _manager(_jasperVault).isAllowedAsset(_assetTwo),\\n                \\\"Must be allowed asset\\\"\\n            );\\n        }        \\n    }\\n\\n\\n    function ValidAdapterByModule(\\n        IJasperVault _jasperVault,\\n        address _module,\\n        string memory _integrationName\\n    ) public view returns (bool) {\\n        address controller = _jasperVault.controller();\\n        bytes32 _integrationHash = keccak256(bytes(_integrationName));\\n        address adapter = IController(controller)\\n            .getIntegrationRegistry()\\n            .getIntegrationAdapterWithHash(_module, _integrationHash);\\n        return _manager(_jasperVault).isAllowedAdapter(adapter);\\n    }\\n\\n    /**\\n     * ONLY MANAGER: Deletes JasperVault/Manager state from extension. Must only be callable by manager!\\n     */\\n    function removeExtension() external virtual;\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Invoke call from manager\\n     *\\n     * @param _delegatedManager      Manager to interact with\\n     * @param _module                Module to interact with\\n     * @param _encoded               Encoded byte data\\n     */\\n    function _invokeManager(\\n        IDelegatedManager _delegatedManager,\\n        address _module,\\n        bytes memory _encoded\\n    ) internal {\\n        _delegatedManager.interactManager(_module, _encoded);\\n    }\\n\\n    /**\\n     * Internal function to grab manager of passed JasperVault from extensions data structure.\\n     *\\n     * @param _jasperVault         JasperVault who's manager is needed\\n     */\\n    function _manager(\\n        IJasperVault _jasperVault\\n    ) internal view returns (IDelegatedManager) {\\n        return setManagers[_jasperVault];\\n    }\\n\\n    /**\\n     * Internal function to initialize extension to the DelegatedManager.\\n     *\\n     * @param _jasperVault             Instance of the JasperVault corresponding to the DelegatedManager\\n     * @param _delegatedManager     Instance of the DelegatedManager to initialize\\n     */\\n    function _initializeExtension(\\n        IJasperVault _jasperVault,\\n        IDelegatedManager _delegatedManager\\n    ) internal {\\n        setManagers[_jasperVault] = _delegatedManager;\\n        _delegatedManager.initializeExtension();\\n    }\\n\\n    /**\\n     * ONLY MANAGER: Internal function to delete JasperVault/Manager state from extension\\n     */\\n    function _removeExtension(\\n        IJasperVault _jasperVault,\\n        IDelegatedManager _delegatedManager\\n    ) internal {\\n        require(\\n            msg.sender == address(_manager(_jasperVault)),\\n            \\\"Must be Manager\\\"\\n        );\\n\\n        delete setManagers[_jasperVault];\\n\\n        emit ExtensionRemoved(\\n            address(_jasperVault),\\n            address(_delegatedManager)\\n        );\\n    }\\n\\n    function _isPrimeMember(IJasperVault _jasperVault) internal view returns (bool) {\\n        address controller = _jasperVault.controller();\\n        IIdentityService identityService = IIdentityService(\\n            IController(controller).resourceId(3)\\n        );\\n        return identityService.isPrimeByJasperVault(address(_jasperVault));\\n    }\\n\\n    function _getJasperVaultValue(IJasperVault _jasperVault) internal view returns(uint256){     \\n        address controller = _jasperVault.controller();\\n        return IController(controller).getSetValuer().calculateSetTokenValuation(_jasperVault, _jasperVault.masterToken());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/manager/lib/MutualUpgradeV2.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\n\\n/**\\n * @title MutualUpgradeV2\\n * @author Set Protocol\\n *\\n * The MutualUpgradeV2 contract contains a modifier for handling mutual upgrades between two parties\\n *\\n * CHANGELOG:\\n * - Update mutualUpgrade to allow single transaction execution if the two signing addresses are the same\\n */\\ncontract MutualUpgradeV2 {\\n    /* ============ State Variables ============ */\\n\\n    // Mapping of upgradable units and if upgrade has been initialized by other party\\n    mapping(bytes32 => bool) public mutualUpgrades;\\n\\n    /* ============ Events ============ */\\n\\n    event MutualUpgradeRegistered(\\n        bytes32 _upgradeHash\\n    );\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier mutualUpgrade(address _signerOne, address _signerTwo) {\\n        require(\\n            msg.sender == _signerOne || msg.sender == _signerTwo,\\n            \\\"Must be authorized address\\\"\\n        );\\n\\n        // If the two signing addresses are the same, skip upgrade hash step\\n        if (_signerOne == _signerTwo) {\\n            _;\\n        }\\n\\n        address nonCaller = _getNonCaller(_signerOne, _signerTwo);\\n\\n        // The upgrade hash is defined by the hash of the transaction call data and sender of msg,\\n        // which uniquely identifies the function, arguments, and sender.\\n        bytes32 expectedHash = keccak256(abi.encodePacked(msg.data, nonCaller));\\n\\n        if (!mutualUpgrades[expectedHash]) {\\n            bytes32 newHash = keccak256(abi.encodePacked(msg.data, msg.sender));\\n\\n            mutualUpgrades[newHash] = true;\\n\\n            emit MutualUpgradeRegistered(newHash);\\n\\n            return;\\n        }\\n\\n        delete mutualUpgrades[expectedHash];\\n\\n        // Run the rest of the upgrades\\n        _;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _getNonCaller(address _signerOne, address _signerTwo) internal view returns(address) {\\n        return msg.sender == _signerOne ? _signerTwo : _signerOne;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/manager/manager/DelegatedManager.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport {AddressArrayUtils} from \\\"@setprotocol/set-protocol-v2/contracts/lib/AddressArrayUtils.sol\\\";\\nimport {IJasperVault} from \\\"../../interfaces/IJasperVault.sol\\\";\\nimport {PreciseUnitMath} from \\\"@setprotocol/set-protocol-v2/contracts/lib/PreciseUnitMath.sol\\\";\\n\\nimport {IGlobalExtension} from \\\"../interfaces/IGlobalExtension.sol\\\";\\nimport {MutualUpgradeV2} from \\\"../lib/MutualUpgradeV2.sol\\\";\\n\\n/**\\n * @title DelegatedManager\\n * @author Set Protocol\\n *\\n * Smart contract manager that maintains permissions and JasperVault admin functionality via owner role. Owner\\n * works alongside methodologist to ensure business agreements are kept. Owner is able to delegate maintenance\\n * operations to operator(s). There can be more than one operator, however they have a global role so once\\n * delegated to they can perform any operator delegated roles. The owner is able to set restrictions on what\\n * operators can do in the form of asset whitelists. Operators cannot trade/wrap/claim/etc. an asset that is not\\n * a part of the asset whitelist, hence they are a semi-trusted party. It is recommended that the owner address\\n * be managed by a multi-sig or some form of permissioning system.\\n */\\ncontract DelegatedManager is Ownable, MutualUpgradeV2 {\\n    using Address for address;\\n    using AddressArrayUtils for address[];\\n    using SafeERC20 for IERC20;\\n    /* ============ Enums ============ */\\n\\n    enum ExtensionState {\\n        NONE,\\n        PENDING,\\n        INITIALIZED\\n    }\\n\\n    /* ============ Events ============ */\\n\\n    event MethodologistChanged(address indexed _newMethodologist);\\n\\n    event ExtensionAdded(address indexed _extension);\\n\\n    event ExtensionRemoved(address indexed _extension);\\n\\n    event ExtensionInitialized(address indexed _extension);\\n\\n    event OperatorAdded(address indexed _operator);\\n\\n    event OperatorRemoved(address indexed _operator);\\n\\n    event AllowedAssetAdded(address indexed _asset);\\n\\n    event AllowedAssetRemoved(address indexed _asset);\\n\\n    event AllowedAdapterAdded(address indexed _adapter);\\n\\n    event UseAssetAllowlistUpdated(bool _status);\\n\\n    event UseAdapterAllowlistUpdated(bool _status);\\n\\n    event AllowedAdapterRemoved(address indexed _adapter);\\n\\n    event SetAdapter(address[] _addList, address[] _deleteList);\\n\\n    /* ============ Modifiers ============ */\\n\\n    /**\\n     * Throws if the sender is not the JasperVault methodologist\\n     */\\n    modifier onlyMethodologist() {\\n        require(msg.sender == methodologist, \\\"Must be methodologist\\\");\\n        _;\\n    }\\n\\n    /**\\n     * Throws if the sender is not an initialized extension\\n     */\\n    modifier onlyExtension() {\\n        require(\\n            extensionAllowlist[msg.sender] == ExtensionState.INITIALIZED,\\n            \\\"Must be initialized extension\\\"\\n        );\\n        _;\\n    }\\n\\n    /* ============ State Variables ============ */\\n\\n    // Instance of JasperVault\\n    IJasperVault public immutable jasperVault;\\n\\n    uint256 public subscribeStatus; //0 settle     1 subscribe  2 unsubscribe\\n\\n    // Address of factory contract used to deploy contract\\n    address public immutable factory;\\n\\n    // Mapping to check which ExtensionState a given extension is in\\n    mapping(address => ExtensionState) public extensionAllowlist;\\n\\n    // Array of initialized extensions\\n    address[] internal extensions;\\n\\n    // Mapping indicating if address is an approved operator\\n    mapping(address => bool) public operatorAllowlist;\\n\\n    // List of approved operators\\n    address[] internal operators;\\n\\n    // List of allowed assets\\n    address[] internal allowedAssets;\\n\\n    // Toggle if asset allow list is being enforced\\n    bool public useAssetAllowlist;\\n    // Address owners portions of fees get sent to\\n    address public ownerFeeRecipient;\\n\\n    // Address of methodologist which serves as providing methodology for the index and receives fee splits\\n    address public methodologist;\\n    address[] internal adapters;\\n\\n    bool public useAdapterAllowlist;\\n\\n    mapping(address => uint256) public adapters_timestamps;\\n    mapping(address => uint256) public assets_timestamps;\\n\\n    uint256 public delay;\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(\\n        IJasperVault _jasperVault,\\n        address _factory,\\n        address _methodologist,\\n        address[] memory _extensions,\\n        address[] memory _operators,\\n        address[] memory _allowedAssets,\\n        address[] memory _adapters,\\n        bool _useAssetAllowlist,\\n        bool _useAdapterAllowlist,\\n        uint256 _delay\\n    ) public {\\n        jasperVault = _jasperVault;\\n        factory = _factory;\\n        methodologist = _methodologist;\\n        useAssetAllowlist = _useAssetAllowlist;\\n        useAdapterAllowlist = _useAdapterAllowlist;\\n        delay = _delay;\\n\\n        _addExtensions(_extensions);\\n        _addOperators(_operators);\\n        _addAllowedAssets(_allowedAssets);\\n        _addAllowAdapters(_adapters);\\n        emit UseAssetAllowlistUpdated(_useAssetAllowlist);\\n    }\\n\\n    /* ============ ExternalFunctions ============ */\\n\\n    function setSubscribeStatus(uint256 _status) external onlyExtension {\\n        require(subscribeStatus != _status, \\\"status already set\\\");\\n        subscribeStatus = _status;\\n    }\\n\\n    /**\\n     * ONLY EXTENSION: Interact with a module registered on the JasperVault. In order to ensure JasperVault admin\\n     * functions can only be changed from this contract no calls to the JasperVault can originate from Extensions.\\n     * To transfer SetTokens use the `transferTokens` function.\\n     *\\n     * @param _module           Module to interact with\\n     * @param _data             Byte data of function to call in module\\n     */\\n    function interactManager(\\n        address _module,\\n        bytes calldata _data\\n    ) external onlyExtension {\\n        require(\\n            _module != address(jasperVault),\\n            \\\"Extensions cannot call JasperVault\\\"\\n        );\\n        _module.functionCallWithValue(_data, 0);\\n    }\\n\\n    /**\\n     * EXTENSION ONLY: Transfers _tokens held by the manager to _destination. Can be used to\\n     * distribute fees or recover anything sent here accidentally.\\n     *\\n     * @param _token           ERC20 token to send\\n     * @param _destination     Address receiving the tokens\\n     * @param _amount          Quantity of tokens to send\\n     */\\n    function transferTokens(\\n        address _token,\\n        address _destination,\\n        uint256 _amount\\n    ) external onlyExtension {\\n        IERC20(_token).safeTransfer(_destination, _amount);\\n    }\\n\\n    /**\\n     * Initializes an added extension from PENDING to INITIALIZED state and adds to extension array. An\\n     * address can only enter a PENDING state if it is an enabled extension added by the manager. Only\\n     * callable by the extension itself, hence msg.sender is the subject of update.\\n     */\\n    function initializeExtension() external {\\n        require(\\n            extensionAllowlist[msg.sender] == ExtensionState.PENDING,\\n            \\\"Extension must be pending\\\"\\n        );\\n\\n        extensionAllowlist[msg.sender] = ExtensionState.INITIALIZED;\\n        extensions.push(msg.sender);\\n\\n        emit ExtensionInitialized(msg.sender);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Add new extension(s) that the DelegatedManager can call. Puts extensions into PENDING\\n     * state, each must be initialized in order to be used.\\n     *\\n     * @param _extensions           New extension(s) to add\\n     */\\n    function addExtensions(address[] memory _extensions) external onlyOwner {\\n        _addExtensions(_extensions);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Remove existing extension(s) tracked by the DelegatedManager. Removed extensions are\\n     * placed in NONE state.\\n     *\\n     * @param _extensions           Old extension to remove\\n     */\\n    function removeExtensions(address[] memory _extensions) external onlyOwner {\\n        for (uint256 i = 0; i < _extensions.length; i++) {\\n            address extension = _extensions[i];\\n\\n            require(\\n                extensionAllowlist[extension] == ExtensionState.INITIALIZED,\\n                \\\"Extension not initialized\\\"\\n            );\\n\\n            extensions.removeStorage(extension);\\n\\n            extensionAllowlist[extension] = ExtensionState.NONE;\\n\\n            IGlobalExtension(extension).removeExtension();\\n\\n            emit ExtensionRemoved(extension);\\n        }\\n    }\\n\\n    function updateDelay(uint256 _delay) external onlyOwner {\\n        delay = _delay;\\n    }\\n\\n    /**\\n     * ONLY OWNER: Add new operator(s) address(es)\\n     *\\n     * @param _operators           New operator(s) to add\\n     */\\n    function addOperators(address[] memory _operators) external onlyOwner {\\n        _addOperators(_operators);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Remove operator(s) from the allowlist\\n     *\\n     * @param _operators           New operator(s) to remove\\n     */\\n    function removeOperators(address[] memory _operators) external onlyOwner {\\n        for (uint256 i = 0; i < _operators.length; i++) {\\n            address operator = _operators[i];\\n\\n            require(operatorAllowlist[operator], \\\"Operator not already added\\\");\\n\\n            operators.removeStorage(operator);\\n\\n            operatorAllowlist[operator] = false;\\n\\n            emit OperatorRemoved(operator);\\n        }\\n    }\\n\\n    function setAllowedAssets(\\n        address[] memory _addAssets,\\n        address[] memory _deleteAssets,\\n        bool _status\\n    ) external onlyOwner {\\n        require(subscribeStatus != 1, \\\"not operable after subscription\\\");\\n        useAssetAllowlist = _status;\\n        _addAllowedAssets(_addAssets);\\n        for (uint256 i = 0; i < _deleteAssets.length; i++) {\\n            address asset = _deleteAssets[i];\\n            if (allowedAssets.contains(asset)) {\\n                allowedAssets.removeStorage(asset);\\n                emit AllowedAssetRemoved(asset);\\n            }\\n        }\\n        emit UseAssetAllowlistUpdated(_status);\\n    }\\n\\n    function setAdapters(\\n        address[] memory _addList,\\n        address[] memory _deleteList,\\n        bool _status\\n    ) external onlyOwner {\\n        require(subscribeStatus != 1, \\\"not operable after subscription\\\");\\n        _addAllowAdapters(_addList);\\n        useAdapterAllowlist = _status;\\n        for (uint256 i = 0; i < _deleteList.length; i++) {\\n            if (adapters.contains(_deleteList[i])) {\\n                adapters.removeStorage(_deleteList[i]);\\n            }\\n        }\\n        emit SetAdapter(_addList, _deleteList);\\n        emit UseAdapterAllowlistUpdated(_status);\\n    }\\n\\n    function isAllowedAsset(address _asset) external view returns (bool) {\\n        return\\n            useAssetAllowlist &&\\n            assets_timestamps[_asset] <= block.timestamp &&\\n            allowedAssets.contains(_asset);\\n    }\\n\\n    function isAllowedAdapter(address _adapter) external view returns (bool) {\\n        return\\n            useAdapterAllowlist &&\\n            adapters_timestamps[_adapter] <= block.timestamp &&\\n            adapters.contains(_adapter);\\n    }\\n\\n    function setBaseProperty(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _followFee,\\n        uint256 _maxFollowFee\\n    ) external onlyOwner {\\n        jasperVault.setBaseProperty(_name, _symbol, _followFee, _maxFollowFee);\\n    }\\n\\n    function setBaseFeeAndToken(\\n        address _masterToken,\\n        uint256 _profitShareFee,\\n        uint256 _delay\\n    ) external onlyExtension {\\n        delay = _delay;\\n        jasperVault.setBaseFeeAndToken(_masterToken, _profitShareFee);\\n    }\\n\\n    /**\\n     * ONLY METHODOLOGIST: Update the methodologist address\\n     *\\n     * @param _newMethodologist           New methodologist address\\n     */\\n    function setMethodologist(\\n        address _newMethodologist\\n    ) external onlyMethodologist {\\n        require(_newMethodologist != address(0), \\\"Null address passed\\\");\\n\\n        methodologist = _newMethodologist;\\n\\n        emit MethodologistChanged(_newMethodologist);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Update the JasperVault manager address.\\n     *\\n     * @param _newManager           New manager address\\n     */\\n    function setManager(address _newManager) external onlyOwner {\\n        require(_newManager != address(0), \\\"Zero address not valid\\\");\\n        require(extensions.length == 0, \\\"Must remove all extensions\\\");\\n        jasperVault.setManager(_newManager);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Add a new module to the JasperVault.\\n     *\\n     * @param _module           New module to add\\n     */\\n    function addModule(address _module) external onlyOwner {\\n        jasperVault.addModule(_module);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Remove a module from the JasperVault.\\n\\n\\n     \\n     *\\n     * @param _module           Module to remove\\n     */\\n    function removeModule(address _module) external onlyOwner {\\n        jasperVault.removeModule(_module);\\n    }\\n\\n    /* ============ External View Functions ============ */\\n    function isPendingExtension(\\n        address _extension\\n    ) external view returns (bool) {\\n        return extensionAllowlist[_extension] == ExtensionState.PENDING;\\n    }\\n\\n    function isInitializedExtension(\\n        address _extension\\n    ) external view returns (bool) {\\n        return extensionAllowlist[_extension] == ExtensionState.INITIALIZED;\\n    }\\n\\n    function getExtensions() external view returns (address[] memory) {\\n        return extensions;\\n    }\\n\\n    function getOperators() external view returns (address[] memory) {\\n        return operators;\\n    }\\n\\n    function getAllowedAssets() external view returns (address[] memory) {\\n        return allowedAssets;\\n    }\\n\\n    function getAdapters() external view returns (address[] memory) {\\n        return adapters;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Add extensions that the DelegatedManager can call.\\n     *\\n     * @param _extensions           New extension to add\\n     */\\n    function _addExtensions(address[] memory _extensions) internal {\\n        for (uint256 i = 0; i < _extensions.length; i++) {\\n            address extension = _extensions[i];\\n\\n            require(\\n                extensionAllowlist[extension] == ExtensionState.NONE,\\n                \\\"Extension already exists\\\"\\n            );\\n\\n            extensionAllowlist[extension] = ExtensionState.PENDING;\\n\\n            emit ExtensionAdded(extension);\\n        }\\n    }\\n\\n    /**\\n     * Add new operator(s) address(es)\\n     *\\n     * @param _operators           New operator to add\\n     */\\n    function _addOperators(address[] memory _operators) internal {\\n        for (uint256 i = 0; i < _operators.length; i++) {\\n            address operator = _operators[i];\\n\\n            require(!operatorAllowlist[operator], \\\"Operator already added\\\");\\n\\n            operators.push(operator);\\n\\n            operatorAllowlist[operator] = true;\\n\\n            emit OperatorAdded(operator);\\n        }\\n    }\\n\\n    /**\\n     * Add new assets that can be traded to, wrapped to, or claimed\\n     *\\n     * @param _assets           New asset to add\\n     */\\n    function _addAllowedAssets(address[] memory _assets) internal {\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            address asset = _assets[i];\\n            if (!allowedAssets.contains(asset)) {\\n                assets_timestamps[asset] = block.timestamp + delay;\\n                allowedAssets.push(asset);\\n                emit AllowedAssetAdded(asset);\\n            }\\n        }\\n    }\\n\\n    function _addAllowAdapters(address[] memory _adapters) internal {\\n        for (uint256 i = 0; i < _adapters.length; i++) {\\n            address adapter = _adapters[i];\\n            if (!adapters.contains(adapter)) {\\n                adapters_timestamps[adapter] = block.timestamp + delay;\\n                adapters.push(adapter);\\n            }\\n            emit AllowedAdapterAdded(adapter);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/manager/ManagerCore.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { AddressArrayUtils } from \\\"@setprotocol/set-protocol-v2/contracts/lib/AddressArrayUtils.sol\\\";\\n\\n/**\\n * @title ManagerCore\\n * @author Set Protocol\\n *\\n *  Registry for governance approved GlobalExtensions, DelegatedManagerFactories, and DelegatedManagers.\\n */\\ncontract ManagerCore is Ownable {\\n    using AddressArrayUtils for address[];\\n\\n    /* ============ Events ============ */\\n\\n    event ExtensionAdded(address indexed _extension);\\n    event ExtensionRemoved(address indexed _extension);\\n    event FactoryAdded(address indexed _factory);\\n    event FactoryRemoved(address indexed _factory);\\n    event ManagerAdded(address indexed _manager, address indexed _factory);\\n    event ManagerRemoved(address indexed _manager);\\n\\n    /* ============ Modifiers ============ */\\n\\n    /**\\n     * Throws if function is called by any address other than a valid factory.\\n     */\\n    modifier onlyFactory() {\\n        require(isFactory[msg.sender], \\\"Only valid factories can call\\\");\\n        _;\\n    }\\n\\n    modifier onlyInitialized() {\\n        require(isInitialized, \\\"Contract must be initialized.\\\");\\n        _;\\n    }\\n\\n    /* ============ State Variables ============ */\\n\\n    // List of enabled extensions\\n    address[] public extensions;\\n    // List of enabled factories of managers\\n    address[] public factories;\\n    // List of enabled managers\\n    address[] public managers;\\n\\n    // Mapping to check whether address is valid Extension, Factory, or Manager\\n    mapping(address => bool) public isExtension;\\n    mapping(address => bool) public isFactory;\\n    mapping(address => bool) public isManager;\\n\\n\\n    // Return true if the ManagerCore is initialized\\n    bool public isInitialized;\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Initializes any predeployed factories. Note: This function can only be called by\\n     * the owner once to batch initialize the initial system contracts.\\n     *\\n     * @param _extensions            List of extensions to add\\n     * @param _factories             List of factories to add\\n     */\\n    function initialize(\\n        address[] memory _extensions,\\n        address[] memory _factories\\n    )\\n        external\\n        onlyOwner\\n    {\\n        require(!isInitialized, \\\"ManagerCore is already initialized\\\");\\n\\n        extensions = _extensions;\\n        factories = _factories;\\n\\n        // Loop through and initialize isExtension and isFactory mapping\\n        for (uint256 i = 0; i < _extensions.length; i++) {\\n            _addExtension(_extensions[i]);\\n        }\\n        for (uint256 i = 0; i < _factories.length; i++) {\\n            _addFactory(_factories[i]);\\n        }\\n\\n        // Set to true to only allow initialization once\\n        isInitialized = true;\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to add an extension\\n     *\\n     * @param _extension               Address of the extension contract to add\\n     */\\n    function addExtension(address _extension) external onlyInitialized onlyOwner {\\n        require(!isExtension[_extension], \\\"Extension already exists\\\");\\n\\n        _addExtension(_extension);\\n\\n        extensions.push(_extension);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to remove an extension\\n     *\\n     * @param _extension               Address of the extension contract to remove\\n     */\\n    function removeExtension(address _extension) external onlyInitialized onlyOwner {\\n        require(isExtension[_extension], \\\"Extension does not exist\\\");\\n\\n        extensions.removeStorage(_extension);\\n\\n        isExtension[_extension] = false;\\n\\n        emit ExtensionRemoved(_extension);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to add a factory\\n     *\\n     * @param _factory               Address of the factory contract to add\\n     */\\n    function addFactory(address _factory) external onlyInitialized onlyOwner {\\n        require(!isFactory[_factory], \\\"Factory already exists\\\");\\n\\n        _addFactory(_factory);\\n\\n        factories.push(_factory);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to remove a factory\\n     *\\n     * @param _factory               Address of the factory contract to remove\\n     */\\n    function removeFactory(address _factory) external onlyInitialized onlyOwner {\\n        require(isFactory[_factory], \\\"Factory does not exist\\\");\\n\\n        factories.removeStorage(_factory);\\n\\n        isFactory[_factory] = false;\\n\\n        emit FactoryRemoved(_factory);\\n    }\\n\\n    /**\\n     * PRIVILEGED FACTORY FUNCTION. Adds a newly deployed manager as an enabled manager.\\n     *\\n     * @param _manager               Address of the manager contract to add\\n     */\\n    function addManager(address _manager) external onlyInitialized onlyFactory {\\n        require(!isManager[_manager], \\\"Manager already exists\\\");\\n\\n        isManager[_manager] = true;\\n\\n        managers.push(_manager);\\n\\n        emit ManagerAdded(_manager, msg.sender);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to remove a manager\\n     *\\n     * @param _manager               Address of the manager contract to remove\\n     */\\n    function removeManager(address _manager) external onlyInitialized onlyOwner {\\n        require(isManager[_manager], \\\"Manager does not exist\\\");\\n\\n        managers.removeStorage(_manager);\\n\\n        isManager[_manager] = false;\\n\\n        emit ManagerRemoved(_manager);\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    function getExtensions() external view returns (address[] memory) {\\n        return extensions;\\n    }\\n\\n    function getFactories() external view returns (address[] memory) {\\n        return factories;\\n    }\\n\\n    function getManagers() external view returns (address[] memory) {\\n        return managers;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Add an extension tracked on the ManagerCore\\n     *\\n     * @param _extension               Address of the extension contract to add\\n     */\\n    function _addExtension(address _extension) internal {\\n        require(_extension != address(0), \\\"Zero address submitted.\\\");\\n\\n        isExtension[_extension] = true;\\n\\n        emit ExtensionAdded(_extension);\\n    }\\n\\n    /**\\n     * Add a factory tracked on the ManagerCore\\n     *\\n     * @param _factory               Address of the factory contract to add\\n     */\\n    function _addFactory(address _factory) internal {\\n        require(_factory != address(0), \\\"Zero address submitted.\\\");\\n\\n        isFactory[_factory] = true;\\n\\n        emit FactoryAdded(_factory);\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/Controller.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { AddressArrayUtils } from \\\"../lib/AddressArrayUtils.sol\\\";\\n\\n\\n/**\\n * @title Controller\\n * @author Set Protocol\\n *\\n * Contract that houses state for approvals and system contracts such as added Sets,\\n * modules, factories, resources (like price oracles), and protocol fee configurations.\\n */\\ncontract Controller is Ownable {\\n    using AddressArrayUtils for address[];\\n\\n    /* ============ Events ============ */\\n\\n    event FactoryAdded(address indexed _factory);\\n    event FactoryRemoved(address indexed _factory);\\n    event FeeEdited(address indexed _module, uint256 indexed _feeType, uint256 _feePercentage);\\n    event FeeRecipientChanged(address _newFeeRecipient);\\n    event ModuleAdded(address indexed _module);\\n    event ModuleRemoved(address indexed _module);\\n    event ResourceAdded(address indexed _resource, uint256 _id);\\n    event ResourceRemoved(address indexed _resource, uint256 _id);\\n    event SetAdded(address indexed _jasperVault, address indexed _factory);\\n    event SetRemoved(address indexed _jasperVault);\\n\\n    /* ============ Modifiers ============ */\\n\\n    /**\\n     * Throws if function is called by any address other than a valid factory.\\n     */\\n    modifier onlyFactory() {\\n        require(isFactory[msg.sender], \\\"Only valid factories can call\\\");\\n        _;\\n    }\\n\\n    modifier onlyInitialized() {\\n        require(isInitialized, \\\"Contract must be initialized.\\\");\\n        _;\\n    }\\n\\n    /* ============ State Variables ============ */\\n\\n    // List of enabled Sets\\n    address[] public sets;\\n    // List of enabled factories of SetTokens\\n    address[] public factories;\\n    // List of enabled Modules; Modules extend the functionality of SetTokens\\n    address[] public modules;\\n    // List of enabled Resources; Resources provide data, functionality, or\\n    // permissions that can be drawn upon from Module, SetTokens or factories\\n    address[] public resources;\\n\\n    // Mappings to check whether address is valid Set, Factory, Module or Resource\\n    mapping(address => bool) public isSet;\\n    mapping(address => bool) public isFactory;\\n    mapping(address => bool) public isModule;\\n    mapping(address => bool) public isResource;\\n\\n    // Mapping of modules to fee types to fee percentage. A module can have multiple feeTypes\\n    // Fee is denominated in precise unit percentages (100% = 1e18, 1% = 1e16)\\n    mapping(address => mapping(uint256 => uint256)) public fees;\\n\\n    // Mapping of resource ID to resource address, which allows contracts to fetch the correct\\n    // resource while providing an ID\\n    mapping(uint256 => address) public resourceId;\\n\\n    // Recipient of protocol fees\\n    address public feeRecipient;\\n\\n    // Return true if the controller is initialized\\n    bool public isInitialized;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Initializes the initial fee recipient on deployment.\\n     *\\n     * @param _feeRecipient          Address of the initial protocol fee recipient\\n     */\\n    constructor(address _feeRecipient) public {\\n        feeRecipient = _feeRecipient;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Initializes any predeployed factories, modules, and resources post deployment. Note: This function can\\n     * only be called by the owner once to batch initialize the initial system contracts.\\n     *\\n     * @param _factories             List of factories to add\\n     * @param _modules               List of modules to add\\n     * @param _resources             List of resources to add\\n     * @param _resourceIds           List of resource IDs associated with the resources\\n     */\\n    function initialize(\\n        address[] memory _factories,\\n        address[] memory _modules,\\n        address[] memory _resources,\\n        uint256[] memory _resourceIds\\n    )\\n        external\\n        onlyOwner\\n    {\\n        require(!isInitialized, \\\"Controller is already initialized\\\");\\n        require(_resources.length == _resourceIds.length, \\\"Array lengths do not match.\\\");\\n\\n        factories = _factories;\\n        modules = _modules;\\n        resources = _resources;\\n\\n        // Loop through and initialize isModule, isFactory, and isResource mapping\\n        for (uint256 i = 0; i < _factories.length; i++) {\\n            require(_factories[i] != address(0), \\\"Zero address submitted.\\\");\\n            isFactory[_factories[i]] = true;\\n        }\\n        for (uint256 i = 0; i < _modules.length; i++) {\\n            require(_modules[i] != address(0), \\\"Zero address submitted.\\\");\\n            isModule[_modules[i]] = true;\\n        }\\n\\n        for (uint256 i = 0; i < _resources.length; i++) {\\n            require(_resources[i] != address(0), \\\"Zero address submitted.\\\");\\n            require(resourceId[_resourceIds[i]] == address(0), \\\"Resource ID already exists\\\");\\n            isResource[_resources[i]] = true;\\n            resourceId[_resourceIds[i]] = _resources[i];\\n        }\\n\\n        // Set to true to only allow initialization once\\n        isInitialized = true;\\n    }\\n\\n    /**\\n     * PRIVILEGED FACTORY FUNCTION. Adds a newly deployed JasperVault as an enabled JasperVault.\\n     *\\n     * @param _jasperVault               Address of the JasperVault contract to add\\n     */\\n    function addSet(address _jasperVault) external onlyInitialized onlyFactory {\\n        require(!isSet[_jasperVault], \\\"Set already exists\\\");\\n\\n        isSet[_jasperVault] = true;\\n\\n        sets.push(_jasperVault);\\n\\n        emit SetAdded(_jasperVault, msg.sender);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to remove a Set\\n     *\\n     * @param _jasperVault               Address of the JasperVault contract to remove\\n     */\\n    function removeSet(address _jasperVault) external onlyInitialized onlyOwner {\\n        require(isSet[_jasperVault], \\\"Set does not exist\\\");\\n\\n        sets = sets.remove(_jasperVault);\\n\\n        isSet[_jasperVault] = false;\\n\\n        emit SetRemoved(_jasperVault);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to add a factory\\n     *\\n     * @param _factory               Address of the factory contract to add\\n     */\\n    function addFactory(address _factory) external onlyInitialized onlyOwner {\\n        require(!isFactory[_factory], \\\"Factory already exists\\\");\\n\\n        isFactory[_factory] = true;\\n\\n        factories.push(_factory);\\n\\n        emit FactoryAdded(_factory);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to remove a factory\\n     *\\n     * @param _factory               Address of the factory contract to remove\\n     */\\n    function removeFactory(address _factory) external onlyInitialized onlyOwner {\\n        require(isFactory[_factory], \\\"Factory does not exist\\\");\\n\\n        factories = factories.remove(_factory);\\n\\n        isFactory[_factory] = false;\\n\\n        emit FactoryRemoved(_factory);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to add a module\\n     *\\n     * @param _module               Address of the module contract to add\\n     */\\n    function addModule(address _module) external onlyInitialized onlyOwner {\\n        require(!isModule[_module], \\\"Module already exists\\\");\\n\\n        isModule[_module] = true;\\n\\n        modules.push(_module);\\n\\n        emit ModuleAdded(_module);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to remove a module\\n     *\\n     * @param _module               Address of the module contract to remove\\n     */\\n    function removeModule(address _module) external onlyInitialized onlyOwner {\\n        require(isModule[_module], \\\"Module does not exist\\\");\\n\\n        modules = modules.remove(_module);\\n\\n        isModule[_module] = false;\\n\\n        emit ModuleRemoved(_module);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to add a resource\\n     *\\n     * @param _resource               Address of the resource contract to add\\n     * @param _id                     New ID of the resource contract\\n     */\\n    function addResource(address _resource, uint256 _id) external onlyInitialized onlyOwner {\\n        require(!isResource[_resource], \\\"Resource already exists\\\");\\n\\n        require(resourceId[_id] == address(0), \\\"Resource ID already exists\\\");\\n\\n        isResource[_resource] = true;\\n\\n        resourceId[_id] = _resource;\\n\\n        resources.push(_resource);\\n\\n        emit ResourceAdded(_resource, _id);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to remove a resource\\n     *\\n     * @param _id               ID of the resource contract to remove\\n     */\\n    function removeResource(uint256 _id) external onlyInitialized onlyOwner {\\n        address resourceToRemove = resourceId[_id];\\n\\n        require(resourceToRemove != address(0), \\\"Resource does not exist\\\");\\n\\n        resources = resources.remove(resourceToRemove);\\n\\n        delete resourceId[_id];\\n\\n        isResource[resourceToRemove] = false;\\n\\n        emit ResourceRemoved(resourceToRemove, _id);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to add a fee to a module\\n     *\\n     * @param _module               Address of the module contract to add fee to\\n     * @param _feeType              Type of the fee to add in the module\\n     * @param _newFeePercentage     Percentage of fee to add in the module (denominated in preciseUnits eg 1% = 1e16)\\n     */\\n    function addFee(address _module, uint256 _feeType, uint256 _newFeePercentage) external onlyInitialized onlyOwner {\\n        require(isModule[_module], \\\"Module does not exist\\\");\\n\\n        require(fees[_module][_feeType] == 0, \\\"Fee type already exists on module\\\");\\n\\n        fees[_module][_feeType] = _newFeePercentage;\\n\\n        emit FeeEdited(_module, _feeType, _newFeePercentage);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to edit a fee in an existing module\\n     *\\n     * @param _module               Address of the module contract to edit fee\\n     * @param _feeType              Type of the fee to edit in the module\\n     * @param _newFeePercentage     Percentage of fee to edit in the module (denominated in preciseUnits eg 1% = 1e16)\\n     */\\n    function editFee(address _module, uint256 _feeType, uint256 _newFeePercentage) external onlyInitialized onlyOwner {\\n        require(isModule[_module], \\\"Module does not exist\\\");\\n\\n        require(fees[_module][_feeType] != 0, \\\"Fee type does not exist on module\\\");\\n\\n        fees[_module][_feeType] = _newFeePercentage;\\n\\n        emit FeeEdited(_module, _feeType, _newFeePercentage);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to edit the protocol fee recipient\\n     *\\n     * @param _newFeeRecipient      Address of the new protocol fee recipient\\n     */\\n    function editFeeRecipient(address _newFeeRecipient) external onlyInitialized onlyOwner {\\n        require(_newFeeRecipient != address(0), \\\"Address must not be 0\\\");\\n\\n        feeRecipient = _newFeeRecipient;\\n\\n        emit FeeRecipientChanged(_newFeeRecipient);\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    function getModuleFee(\\n        address _moduleAddress,\\n        uint256 _feeType\\n    )\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return fees[_moduleAddress][_feeType];\\n    }\\n\\n    function getFactories() external view returns (address[] memory) {\\n        return factories;\\n    }\\n\\n    function getModules() external view returns (address[] memory) {\\n        return modules;\\n    }\\n\\n    function getResources() external view returns (address[] memory) {\\n        return resources;\\n    }\\n\\n    function getSets() external view returns (address[] memory) {\\n        return sets;\\n    }\\n\\n    /**\\n     * Check if a contract address is a module, Set, resource, factory or controller\\n     *\\n     * @param  _contractAddress           The contract address to check\\n     */\\n    function isSystemContract(address _contractAddress) external view returns (bool) {\\n        return (\\n            isSet[_contractAddress] ||\\n            isModule[_contractAddress] ||\\n            isResource[_contractAddress] ||\\n            isFactory[_contractAddress] ||\\n            _contractAddress == address(this)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/integration/gmx/GMXAdapter.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nimport {IGMXAdapter} from \\\"../../../interfaces/external/gmx/IGMXAdapter.sol\\\";\\nimport {IGMXRouter} from \\\"../../../interfaces/external/gmx/IGMXRouter.sol\\\";\\nimport {IGMXOrderBook} from \\\"../../../interfaces/external/gmx/IGMXOrderBook.sol\\\";\\nimport {IGMXStake} from \\\"../../../interfaces/external/gmx/IGMXStake.sol\\\";\\nimport {IGlpRewardRouter} from \\\"../../../interfaces/external/gmx/IGlpRewardRouter.sol\\\";\\nimport {IRewardRouter} from \\\"../../../interfaces/external/gmx/IRewardRouter.sol\\\";\\n\\nimport {IJasperVault} from \\\"../../../interfaces/IJasperVault.sol\\\";\\nimport {Invoke} from \\\"../../lib/Invoke.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title GMXAdapter\\n * GMX adapter for GMX that returns data for (opening/increasing position)/(closing/decreasing position) of tokens\\n */\\ncontract GMXAdapter is Ownable, IGMXAdapter {\\n    using Invoke for IJasperVault;\\n    address public override PositionRouter;\\n    address public override GMXRouter;\\n    address public override ETH_TOKEN;\\n    address public override OrderBook;\\n    address public override Vault;\\n    address public override GlpRewardRouter;\\n    address public RewardRouter;\\n    address public AdapterManager;\\n    address public override StakedGmx;\\n    mapping(address => bool) whiteList;\\n    uint256 GMXDecimals = 10 ** 30;\\n    enum SwapType {\\n        SwapToken,\\n        SwapTokensToETH,\\n        SwapETHToTokens\\n    } // \u679a\u4e3e\\n\\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _manager,\\n        address _positionRouter,\\n        address _GMXRouter,\\n        address _OrderBook,\\n        address _RewardRouter,\\n        address _GlpRewardRouter,\\n        address _StakedGmx,\\n        address[] memory _whiteList\\n    ) public {\\n        AdapterManager = _manager;\\n        for (uint i; i < _whiteList.length; i++) {\\n            whiteList[_whiteList[i]] = true;\\n        }\\n        //Address of Curve Eth/StEth stableswap pool.\\n        PositionRouter = _positionRouter;\\n        GMXRouter = _GMXRouter;\\n        OrderBook = _OrderBook;\\n        RewardRouter = _RewardRouter;\\n        GlpRewardRouter = _GlpRewardRouter;\\n        StakedGmx = _StakedGmx;\\n    }\\n\\n    /* ============ External Functions ============ */\\n    function updateWhiteList(\\n        address[] calldata _addList,\\n        address[] calldata removeList\\n    ) public onlyOwner {\\n        for (uint i; i < _addList.length; i++) {\\n            whiteList[_addList[i]] = true;\\n        }\\n        for (uint i; i < removeList.length; i++) {\\n            whiteList[removeList[i]] = false;\\n        }\\n    }\\n\\n    function approvePositionRouter()\\n        external\\n        view\\n        override\\n        returns (address, uint256, bytes memory)\\n    {\\n        bytes memory approveCallData = abi.encodeWithSignature(\\n            \\\"approvePlugin(address)\\\",\\n            PositionRouter\\n        );\\n        return (GMXRouter, 0, approveCallData);\\n    }\\n\\n    function getInCreasingPositionCallData(\\n        IncreasePositionRequest memory request\\n    ) external view override returns (address, uint256, bytes memory) {\\n        if (\\n            !IGMXRouter(GMXRouter).approvedPlugins(\\n                request._jasperVault,\\n                PositionRouter\\n            )\\n        ) {\\n            bytes memory approveCallData = abi.encodeWithSignature(\\n                \\\"approvePlugin(address)\\\",\\n                PositionRouter\\n            );\\n            return (GMXRouter, 0, approveCallData);\\n        }\\n\\n        require(whiteList[request._indexToken], \\\"_indexToken not in whiteList\\\");\\n        for (uint i; i < request._path.length; i++) {\\n            require(whiteList[request._path[i]], \\\"_path not in whiteList\\\");\\n        }\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"createIncreasePosition(address[],address,uint256,uint256,uint256,bool,uint256,uint256,bytes32,address)\\\",\\n            request._path,\\n            request._indexToken,\\n            request._amountIn,\\n            request._minOut,\\n            request._sizeDelta,\\n            request._isLong,\\n            request._acceptablePrice,\\n            request._executionFee,\\n            request._referralCode,\\n            request._callbackTarget\\n        );\\n        return (PositionRouter, request._executionFee, callData);\\n    }\\n\\n    function getDeCreasingPositionCallData(\\n        DecreasePositionRequest memory request\\n    ) external view override returns (address, uint256, bytes memory) {\\n        require(whiteList[request._indexToken], \\\"_indexToken not in whiteList\\\");\\n        for (uint i; i < request._path.length; i++) {\\n            require(whiteList[request._path[i]], \\\"_path not in whiteList\\\");\\n        }\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"createDecreasePosition(address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,bool,address)\\\",\\n            request._path,\\n            request._indexToken,\\n            request._collateralDelta,\\n            request._sizeDelta,\\n            request._isLong,\\n            request._receiver,\\n            request._acceptablePrice,\\n            request._minOut,\\n            request._executionFee,\\n            request._withdrawETH,\\n            request._callbackTarget\\n        );\\n\\n        return (PositionRouter, request._executionFee, callData);\\n    }\\n\\n    function IsApprovedPlugins(\\n        address _Vault\\n    ) public view override returns (bool) {\\n        return IGMXRouter(GMXRouter).approvedPlugins(_Vault, PositionRouter);\\n    }\\n\\n    /**\\n     * @return address        Target contract address\\n     * @return uint256        Total quantity of decreasing token units to position. This will always be 215000000000000 for decreasing\\n     * @return bytes          Position calldata\\n     **/\\n    function getSwapCallData(\\n        SwapData memory data\\n    ) external view override returns (address, uint256, bytes memory) {\\n        for (uint i; i < data._path.length; i++) {\\n            require(whiteList[data._path[i]], \\\"_path not in whiteList\\\");\\n        }\\n        bytes memory callData;\\n        if (data._swapType == uint256(SwapType.SwapToken)) {\\n            callData = abi.encodeWithSelector(\\n                IGMXRouter.swap.selector,\\n                data._path,\\n                data._amountIn,\\n                data._minOut,\\n                data._jasperVault\\n            );\\n            return (GMXRouter, 0, callData);\\n        } else if (data._swapType == uint256(SwapType.SwapTokensToETH)) {\\n            callData = abi.encodeWithSelector(\\n                IGMXRouter.swapTokensToETH.selector,\\n                data._path,\\n                data._amountIn,\\n                data._minOut,\\n                data._jasperVault\\n            );\\n            return (GMXRouter, 0, callData);\\n        } else if (data._swapType == uint256(SwapType.SwapETHToTokens)) {\\n            callData = abi.encodeWithSelector(\\n                IGMXRouter.swapETHToTokens.selector,\\n                data._path,\\n                data._minOut,\\n                data._jasperVault\\n            );\\n            return (GMXRouter, data._amountIn, callData);\\n        }\\n        return (GMXRouter, 0, callData);\\n    }\\n\\n    function getCreateIncreaseOrderCallData(\\n        IncreaseOrderData memory data\\n    ) external view override returns (address, uint256, bytes memory) {\\n        require(whiteList[data._indexToken], \\\"_indexToken not in whiteList\\\");\\n        for (uint i; i < data._path.length; i++) {\\n            require(whiteList[data._path[i]], \\\"_path not in whiteList\\\");\\n        }\\n        bytes memory callData = abi.encodeWithSelector(\\n            IGMXOrderBook.createIncreaseOrder.selector,\\n            data._amountIn,\\n            data._indexToken,\\n            data._minOut,\\n            data._sizeDelta,\\n            data._collateralToken,\\n            data._isLong,\\n            data._triggerPrice,\\n            data._triggerAboveThreshold,\\n            data._executionFee,\\n            data._shouldWrap\\n        );\\n        return (OrderBook, data._fee, callData);\\n    }\\n\\n    /**\\n     * Generates the calldata to Create Decrease Order CallData .\\n     * @param data       Data of order\\n     *\\n     * @return address        Target contract address\\n     * @return uint256        Call data value\\n     * @return bytes          Order Calldata\\n     **/\\n    function getCreateDecreaseOrderCallData(\\n        DecreaseOrderData memory data\\n    ) external view override returns (address, uint256, bytes memory) {\\n        require(whiteList[data._indexToken], \\\"_indexToken not in whiteList\\\");\\n\\n        bytes memory callData = abi.encodeWithSelector(\\n            IGMXOrderBook.createDecreaseOrder.selector,\\n            data._indexToken,\\n            data._sizeDelta,\\n            data._collateralToken,\\n            data._collateralDelta,\\n            data._isLong,\\n            data._triggerPrice,\\n            data._triggerAboveThreshold\\n        );\\n        return (OrderBook, data._fee, callData);\\n    }\\n\\n    function getTokenBalance(\\n        address _token,\\n        address _jasperVault\\n    ) external view override returns (uint256) {\\n        require(whiteList[_token], \\\"token not in whiteList\\\");\\n        return IERC20(_token).balanceOf(_jasperVault);\\n    }\\n\\n    function getStakeGMXCallData(\\n        address _jasperVault,\\n        uint256 _stakeAmount,\\n        bool _isStake,\\n        bytes calldata _data\\n    )\\n        external\\n        view\\n        override\\n        returns (address _subject, uint256 _value, bytes memory _calldata)\\n    {\\n        if (_isStake) {\\n            bytes memory callData = abi.encodeWithSelector(\\n                IGMXStake(RewardRouter).stakeGmx.selector,\\n                _stakeAmount\\n            );\\n            return (RewardRouter, 0, callData);\\n        } else {\\n            bytes memory callData = abi.encodeWithSelector(\\n                IGMXStake(RewardRouter).unstakeGmx.selector,\\n                _stakeAmount\\n            );\\n            return (RewardRouter, 0, callData);\\n        }\\n        return (RewardRouter, 0, _calldata);\\n    }\\n\\n    function getStakeGLPCallData(\\n        address _jasperVault,\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minUsdg,\\n        uint256 _minGlp,\\n        bool _isStake,\\n        bytes calldata _data\\n    )\\n        external\\n        view\\n        override\\n        returns (address _subject, uint256 _value, bytes memory _calldata)\\n    {\\n        if (_isStake) {\\n            bytes memory callData = abi.encodeWithSelector(\\n                IGlpRewardRouter(GlpRewardRouter).mintAndStakeGlp.selector,\\n                _token,\\n                _amount,\\n                _minUsdg,\\n                _minGlp\\n            );\\n            return (GlpRewardRouter, 0, callData);\\n        } else {\\n            bytes memory callData = abi.encodeWithSelector(\\n                IGlpRewardRouter(GlpRewardRouter).unstakeAndRedeemGlp.selector,\\n                _token,\\n                _amount,\\n                _minGlp,\\n                _jasperVault\\n            );\\n            return (GlpRewardRouter, 0, callData);\\n        }\\n        return (GlpRewardRouter, 0, _calldata);\\n    }\\n\\n    function getHandleRewardsCallData(\\n        HandleRewardData memory _rewardData\\n    )\\n        external\\n        view\\n        override\\n        returns (address _subject, uint256 _value, bytes memory _calldata)\\n    {\\n        bytes memory callData = abi.encodeWithSelector(\\n            IRewardRouter(RewardRouter).handleRewards.selector,\\n            _rewardData._shouldClaimGmx,\\n            _rewardData._shouldStakeGmx,\\n            _rewardData._shouldClaimEsGmx,\\n            _rewardData._shouldStakeEsGmx,\\n            _rewardData._shouldStakeMultiplierPoints,\\n            _rewardData._shouldClaimWeth,\\n            _rewardData._shouldConvertWethToEth\\n        );\\n        return (RewardRouter, 0, callData);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/integration/lib/AaveV2.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ILendingPool } from \\\"../../../interfaces/external/aave-v2/ILendingPool.sol\\\";\\nimport { IJasperVault } from \\\"../../../interfaces/IJasperVault.sol\\\";\\n\\n/**\\n * @title AaveV2\\n * @author Set Protocol\\n *\\n * Collection of helper functions for interacting with AaveV2 integrations.\\n */\\nlibrary AaveV2 {\\n    /* ============ External ============ */\\n\\n    /**\\n     * Get deposit calldata from JasperVault\\n     *\\n     * Deposits an `_amountNotional` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the underlying asset to deposit\\n     * @param _amountNotional       The amount to be deposited\\n     * @param _onBehalfOf           The address that will receive the aTokens, same as msg.sender if the user\\n     *                              wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *                              is a different wallet\\n     * @param _referralCode         Code used to register the integrator originating the operation, for potential rewards.\\n     *                              0 if the action is executed directly by the user, without any middle-man\\n     *\\n     * @return address              Target contract address\\n     * @return uint256              Call value\\n     * @return bytes                Deposit calldata\\n     */\\n    function getDepositCalldata(\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _amountNotional,\\n        address _onBehalfOf,\\n        uint16 _referralCode\\n    )\\n        public\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"deposit(address,uint256,address,uint16)\\\",\\n            _asset,\\n            _amountNotional,\\n            _onBehalfOf,\\n            _referralCode\\n        );\\n\\n        return (address(_lendingPool), 0, callData);\\n    }\\n\\n    /**\\n     * Invoke deposit on LendingPool from JasperVault\\n     *\\n     * Deposits an `_amountNotional` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. JasperVault deposits 100 USDC and gets in return 100 aUSDC\\n     * @param _jasperVault             Address of the JasperVault\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the underlying asset to deposit\\n     * @param _amountNotional       The amount to be deposited\\n     */\\n    function invokeDeposit(\\n        IJasperVault _jasperVault,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _amountNotional\\n    )\\n        external\\n    {\\n        ( , , bytes memory depositCalldata) = getDepositCalldata(\\n            _lendingPool,\\n            _asset,\\n            _amountNotional,\\n            address(_jasperVault),\\n            0\\n        );\\n\\n        _jasperVault.invoke(address(_lendingPool), 0, depositCalldata);\\n    }\\n\\n    /**\\n     * Get withdraw calldata from JasperVault\\n     *\\n     * Withdraws an `_amountNotional` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * - E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the underlying asset to withdraw\\n     * @param _amountNotional       The underlying amount to be withdrawn\\n     *                              Note: Passing type(uint256).max will withdraw the entire aToken balance\\n     * @param _receiver             Address that will receive the underlying, same as msg.sender if the user\\n     *                              wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *                              different wallet\\n     *\\n     * @return address              Target contract address\\n     * @return uint256              Call value\\n     * @return bytes                Withdraw calldata\\n     */\\n    function getWithdrawCalldata(\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _amountNotional,\\n        address _receiver\\n    )\\n        public\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"withdraw(address,uint256,address)\\\",\\n            _asset,\\n            _amountNotional,\\n            _receiver\\n        );\\n\\n        return (address(_lendingPool), 0, callData);\\n    }\\n\\n    /**\\n     * Invoke withdraw on LendingPool from JasperVault\\n     *\\n     * Withdraws an `_amountNotional` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * - E.g. JasperVault has 100 aUSDC, and receives 100 USDC, burning the 100 aUSDC\\n     *\\n     * @param _jasperVault         Address of the JasperVault\\n     * @param _lendingPool      Address of the LendingPool contract\\n     * @param _asset            The address of the underlying asset to withdraw\\n     * @param _amountNotional   The underlying amount to be withdrawn\\n     *                          Note: Passing type(uint256).max will withdraw the entire aToken balance\\n     *\\n     * @return uint256          The final amount withdrawn\\n     */\\n    function invokeWithdraw(\\n        IJasperVault _jasperVault,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _amountNotional\\n    )\\n        external\\n        returns (uint256)\\n    {\\n        ( , , bytes memory withdrawCalldata) = getWithdrawCalldata(\\n            _lendingPool,\\n            _asset,\\n            _amountNotional,\\n            address(_jasperVault)\\n        );\\n\\n        return abi.decode(_jasperVault.invoke(address(_lendingPool), 0, withdrawCalldata), (uint256));\\n    }\\n\\n    /**\\n     * Get borrow calldata from JasperVault\\n     *\\n     * Allows users to borrow a specific `_amountNotional` of the reserve underlying `_asset`, provided that\\n     * the borrower already deposited enough collateral, or he was given enough allowance by a credit delegator\\n     * on the corresponding debt token (StableDebtToken or VariableDebtToken)\\n     *\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the underlying asset to borrow\\n     * @param _amountNotional       The amount to be borrowed\\n     * @param _interestRateMode     The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param _referralCode         Code used to register the integrator originating the operation, for potential rewards.\\n     *                              0 if the action is executed directly by the user, without any middle-man\\n     * @param _onBehalfOf           Address of the user who will receive the debt. Should be the address of the borrower itself\\n     *                              calling the function if he wants to borrow against his own collateral, or the address of the\\n     *                              credit delegator if he has been given credit delegation allowance\\n     *\\n     * @return address              Target contract address\\n     * @return uint256              Call value\\n     * @return bytes                Borrow calldata\\n     */\\n    function getBorrowCalldata(\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _amountNotional,\\n        uint256 _interestRateMode,\\n        uint16 _referralCode,\\n        address _onBehalfOf\\n    )\\n        public\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"borrow(address,uint256,uint256,uint16,address)\\\",\\n            _asset,\\n            _amountNotional,\\n            _interestRateMode,\\n            _referralCode,\\n            _onBehalfOf\\n        );\\n\\n        return (address(_lendingPool), 0, callData);\\n    }\\n\\n    /**\\n     * Invoke borrow on LendingPool from JasperVault\\n     *\\n     * Allows JasperVault to borrow a specific `_amountNotional` of the reserve underlying `_asset`, provided that\\n     * the JasperVault already deposited enough collateral, or it was given enough allowance by a credit delegator\\n     * on the corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * @param _jasperVault             Address of the SetToken\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the underlying asset to borrow\\n     * @param _amountNotional       The amount to be borrowed\\n     * @param _interestRateMode     The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     */\\n    function invokeBorrow(\\n        IJasperVault _jasperVault,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _amountNotional,\\n        uint256 _interestRateMode\\n    )\\n        external\\n    {\\n        ( , , bytes memory borrowCalldata) = getBorrowCalldata(\\n            _lendingPool,\\n            _asset,\\n            _amountNotional,\\n            _interestRateMode,\\n            0,\\n            address(_jasperVault)\\n        );\\n\\n        _jasperVault.invoke(address(_lendingPool), 0, borrowCalldata);\\n    }\\n\\n    /**\\n     * Get repay calldata from SetToken\\n     *\\n     * Repays a borrowed `_amountNotional` on a specific `_asset` reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the borrowed underlying asset previously borrowed\\n     * @param _amountNotional       The amount to repay\\n     *                              Note: Passing type(uint256).max will repay the whole debt for `_asset` on the specific `_interestRateMode`\\n     * @param _interestRateMode     The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param _onBehalfOf           Address of the user who will get his debt reduced/removed. Should be the address of the\\n     *                              user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     *                              other borrower whose debt should be removed\\n     *\\n     * @return address              Target contract address\\n     * @return uint256              Call value\\n     * @return bytes                Repay calldata\\n     */\\n    function getRepayCalldata(\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _amountNotional,\\n        uint256 _interestRateMode,\\n        address _onBehalfOf\\n    )\\n        public\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"repay(address,uint256,uint256,address)\\\",\\n            _asset,\\n            _amountNotional,\\n            _interestRateMode,\\n            _onBehalfOf\\n        );\\n\\n        return (address(_lendingPool), 0, callData);\\n    }\\n\\n    /**\\n     * Invoke repay on LendingPool from SetToken\\n     *\\n     * Repays a borrowed `_amountNotional` on a specific `_asset` reserve, burning the equivalent debt tokens owned\\n     * - E.g. SetToken repays 100 USDC, burning 100 variable/stable debt tokens\\n     * @param _jasperVault             Address of the SetToken\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the borrowed underlying asset previously borrowed\\n     * @param _amountNotional       The amount to repay\\n     *                              Note: Passing type(uint256).max will repay the whole debt for `_asset` on the specific `_interestRateMode`\\n     * @param _interestRateMode     The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     *\\n     * @return uint256              The final amount repaid\\n     */\\n    function invokeRepay(\\n        IJasperVault _jasperVault,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _amountNotional,\\n        uint256 _interestRateMode\\n    )\\n        external\\n        returns (uint256)\\n    {\\n        ( , , bytes memory repayCalldata) = getRepayCalldata(\\n            _lendingPool,\\n            _asset,\\n            _amountNotional,\\n            _interestRateMode,\\n            address(_jasperVault)\\n        );\\n\\n        return abi.decode(_jasperVault.invoke(address(_lendingPool), 0, repayCalldata), (uint256));\\n    }\\n\\n    /**\\n     * Get setUserUseReserveAsCollateral calldata from SetToken\\n     *\\n     * Allows borrower to enable/disable a specific deposited asset as collateral\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the underlying asset deposited\\n     * @param _useAsCollateral      true` if the user wants to use the deposit as collateral, `false` otherwise\\n     *\\n     * @return address              Target contract address\\n     * @return uint256              Call value\\n     * @return bytes                SetUserUseReserveAsCollateral calldata\\n     */\\n    function getSetUserUseReserveAsCollateralCalldata(\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        bool _useAsCollateral\\n    )\\n        public\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"setUserUseReserveAsCollateral(address,bool)\\\",\\n            _asset,\\n            _useAsCollateral\\n        );\\n\\n        return (address(_lendingPool), 0, callData);\\n    }\\n\\n    /**\\n     * Invoke an asset to be used as collateral on Aave from SetToken\\n     *\\n     * Allows SetToken to enable/disable a specific deposited asset as collateral\\n     * @param _jasperVault             Address of the SetToken\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the underlying asset deposited\\n     * @param _useAsCollateral      true` if the user wants to use the deposit as collateral, `false` otherwise\\n     */\\n    function invokeSetUserUseReserveAsCollateral(\\n        IJasperVault _jasperVault,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        bool _useAsCollateral\\n    )\\n        external\\n    {\\n        ( , , bytes memory callData) = getSetUserUseReserveAsCollateralCalldata(\\n            _lendingPool,\\n            _asset,\\n            _useAsCollateral\\n        );\\n\\n        _jasperVault.invoke(address(_lendingPool), 0, callData);\\n    }\\n\\n    /**\\n     * Get swapBorrowRate calldata from SetToken\\n     *\\n     * Allows a borrower to toggle his debt between stable and variable mode\\n     * @param _lendingPool      Address of the LendingPool contract\\n     * @param _asset            The address of the underlying asset borrowed\\n     * @param _rateMode         The rate mode that the user wants to swap to\\n     *\\n     * @return address          Target contract address\\n     * @return uint256          Call value\\n     * @return bytes            SwapBorrowRate calldata\\n     */\\n    function getSwapBorrowRateModeCalldata(\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _rateMode\\n    )\\n        public\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"swapBorrowRateMode(address,uint256)\\\",\\n            _asset,\\n            _rateMode\\n        );\\n\\n        return (address(_lendingPool), 0, callData);\\n    }\\n\\n    /**\\n     * Invoke to swap borrow rate of SetToken\\n     *\\n     * Allows SetToken to toggle it's debt between stable and variable mode\\n     * @param _jasperVault         Address of the SetToken\\n     * @param _lendingPool      Address of the LendingPool contract\\n     * @param _asset            The address of the underlying asset borrowed\\n     * @param _rateMode         The rate mode that the user wants to swap to\\n     */\\n    function invokeSwapBorrowRateMode(\\n        IJasperVault _jasperVault,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _rateMode\\n    )\\n        external\\n    {\\n        ( , , bytes memory callData) = getSwapBorrowRateModeCalldata(\\n            _lendingPool,\\n            _asset,\\n            _rateMode\\n        );\\n\\n        _jasperVault.invoke(address(_lendingPool), 0, callData);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/IntegrationRegistry.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport { IController } from \\\"../interfaces/IController.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title IntegrationRegistry\\n * @author Set Protocol\\n *\\n * The IntegrationRegistry holds state relating to the Modules and the integrations they are connected with.\\n * The state is combined into a single Registry to allow governance updates to be aggregated to one contract.\\n */\\ncontract IntegrationRegistry is Ownable {\\n\\n    /* ============ Events ============ */\\n\\n    event IntegrationAdded(address indexed _module, address indexed _adapter, string _integrationName);\\n    event IntegrationRemoved(address indexed _module, address indexed _adapter, string _integrationName);\\n    event IntegrationEdited(\\n        address indexed _module,\\n        address _newAdapter,\\n        string _integrationName\\n    );\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of the Controller contract\\n    IController public controller;\\n\\n    // Mapping of module => integration identifier => adapter address\\n    mapping(address => mapping(bytes32 => address)) private integrations;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Initializes the controller\\n     *\\n     * @param _controller          Instance of the controller\\n     */\\n    constructor(IController _controller) public {\\n        controller = _controller;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * GOVERNANCE FUNCTION: Add a new integration to the registry\\n     *\\n     * @param  _module       The address of the module associated with the integration\\n     * @param  _name         Human readable string identifying the integration\\n     * @param  _adapter      Address of the adapter contract to add\\n     */\\n    function addIntegration(\\n        address _module,\\n        string memory _name,\\n        address _adapter\\n    )\\n        public\\n        onlyOwner\\n    {\\n        bytes32 hashedName = _nameHash(_name);\\n        require(controller.isModule(_module), \\\"Must be valid module.\\\");\\n        require(integrations[_module][hashedName] == address(0), \\\"Integration exists already.\\\");\\n        require(_adapter != address(0), \\\"Adapter address must exist.\\\");\\n\\n        integrations[_module][hashedName] = _adapter;\\n\\n        emit IntegrationAdded(_module, _adapter, _name);\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION: Batch add new adapters. Reverts if exists on any module and name\\n     *\\n     * @param  _modules      Array of addresses of the modules associated with integration\\n     * @param  _names        Array of human readable strings identifying the integration\\n     * @param  _adapters     Array of addresses of the adapter contracts to add\\n     */\\n    function batchAddIntegration(\\n        address[] memory _modules,\\n        string[] memory _names,\\n        address[] memory _adapters\\n    )\\n        external\\n        onlyOwner\\n    {\\n        // Storing modules count to local variable to save on invocation\\n        uint256 modulesCount = _modules.length;\\n\\n        require(modulesCount > 0, \\\"Modules must not be empty\\\");\\n        require(modulesCount == _names.length, \\\"Module and name lengths mismatch\\\");\\n        require(modulesCount == _adapters.length, \\\"Module and adapter lengths mismatch\\\");\\n\\n        for (uint256 i = 0; i < modulesCount; i++) {\\n            // Add integrations to the specified module. Will revert if module and name combination exists\\n            addIntegration(\\n                _modules[i],\\n                _names[i],\\n                _adapters[i]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION: Edit an existing integration on the registry\\n     *\\n     * @param  _module       The address of the module associated with the integration\\n     * @param  _name         Human readable string identifying the integration\\n     * @param  _adapter      Address of the adapter contract to edit\\n     */\\n    function editIntegration(\\n        address _module,\\n        string memory _name,\\n        address _adapter\\n    )\\n        public\\n        onlyOwner\\n    {\\n        bytes32 hashedName = _nameHash(_name);\\n\\n        require(controller.isModule(_module), \\\"Must be valid module.\\\");\\n        require(integrations[_module][hashedName] != address(0), \\\"Integration does not exist.\\\");\\n        require(_adapter != address(0), \\\"Adapter address must exist.\\\");\\n\\n        integrations[_module][hashedName] = _adapter;\\n\\n        emit IntegrationEdited(_module, _adapter, _name);\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION: Batch edit adapters for modules. Reverts if module and\\n     * adapter name don't map to an adapter address\\n     *\\n     * @param  _modules      Array of addresses of the modules associated with integration\\n     * @param  _names        Array of human readable strings identifying the integration\\n     * @param  _adapters     Array of addresses of the adapter contracts to add\\n     */\\n    function batchEditIntegration(\\n        address[] memory _modules,\\n        string[] memory _names,\\n        address[] memory _adapters\\n    )\\n        external\\n        onlyOwner\\n    {\\n        // Storing name count to local variable to save on invocation\\n        uint256 modulesCount = _modules.length;\\n\\n        require(modulesCount > 0, \\\"Modules must not be empty\\\");\\n        require(modulesCount == _names.length, \\\"Module and name lengths mismatch\\\");\\n        require(modulesCount == _adapters.length, \\\"Module and adapter lengths mismatch\\\");\\n\\n        for (uint256 i = 0; i < modulesCount; i++) {\\n            // Edits integrations to the specified module. Will revert if module and name combination does not exist\\n            editIntegration(\\n                _modules[i],\\n                _names[i],\\n                _adapters[i]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION: Remove an existing integration on the registry\\n     *\\n     * @param  _module       The address of the module associated with the integration\\n     * @param  _name         Human readable string identifying the integration\\n     */\\n    function removeIntegration(address _module, string memory _name) external onlyOwner {\\n        bytes32 hashedName = _nameHash(_name);\\n        require(integrations[_module][hashedName] != address(0), \\\"Integration does not exist.\\\");\\n\\n        address oldAdapter = integrations[_module][hashedName];\\n        delete integrations[_module][hashedName];\\n\\n        emit IntegrationRemoved(_module, oldAdapter, _name);\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    /**\\n     * Get integration adapter address associated with passed human readable name\\n     *\\n     * @param  _module       The address of the module associated with the integration\\n     * @param  _name         Human readable adapter name\\n     *\\n     * @return               Address of adapter\\n     */\\n    function getIntegrationAdapter(address _module, string memory _name) external view returns (address) {\\n        return integrations[_module][_nameHash(_name)];\\n    }\\n\\n    /**\\n     * Get integration adapter address associated with passed hashed name\\n     *\\n     * @param  _module       The address of the module associated with the integration\\n     * @param  _nameHash     Hash of human readable adapter name\\n     *\\n     * @return               Address of adapter\\n     */\\n    function getIntegrationAdapterWithHash(address _module, bytes32 _nameHash) external view returns (address) {\\n        return integrations[_module][_nameHash];\\n    }\\n\\n    /**\\n     * Check if adapter name is valid\\n     *\\n     * @param  _module       The address of the module associated with the integration\\n     * @param  _name         Human readable string identifying the integration\\n     *\\n     * @return               Boolean indicating if valid\\n     */\\n    function isValidIntegration(address _module, string memory _name) external view returns (bool) {\\n        return integrations[_module][_nameHash(_name)] != address(0);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Hashes the string and returns a bytes32 value\\n     */\\n    function _nameHash(string memory _name) internal pure returns(bytes32) {\\n        return keccak256(bytes(_name));\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/JasperVault.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {SignedSafeMath} from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\nimport {IController} from \\\"../interfaces/IController.sol\\\";\\nimport {IModule} from \\\"../interfaces/IModule.sol\\\";\\nimport {IJasperVault} from \\\"../interfaces/IJasperVault.sol\\\";\\nimport {Position} from \\\"./lib/Position.sol\\\";\\nimport {PreciseUnitMath} from \\\"../lib/PreciseUnitMath.sol\\\";\\nimport {AddressArrayUtils} from \\\"../lib/AddressArrayUtils.sol\\\";\\n\\n/**\\n * @title JasperVault\\n * @author Set Protocol\\n *\\n * ERC20 Token contract that allows privileged modules to make modifications to its positions and invoke function calls\\n * from the JasperVault.\\n */\\ncontract JasperVault is ERC20 {\\n    using SafeMath for uint256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SignedSafeMath for int256;\\n    using PreciseUnitMath for int256;\\n    using Address for address;\\n    using AddressArrayUtils for address[];\\n\\n    /* ============ Constants ============ */\\n\\n    /*\\n        The PositionState is the status of the Position, whether it is Default (held on the JasperVault)\\n        or otherwise held on a separate smart contract (whether a module or external source).\\n        There are issues with cross-usage of enums, so we are defining position states\\n        as a uint8.\\n    */\\n    uint8 internal constant DEFAULT = 0;\\n    uint8 internal constant EXTERNAL = 1;\\n\\n    /* ============ Events ============ */\\n\\n    event Invoked(\\n        address indexed _target,\\n        uint indexed _value,\\n        bytes _data,\\n        bytes _returnValue\\n    );\\n    event ModuleAdded(address indexed _module);\\n    event ModuleRemoved(address indexed _module);\\n    event ModuleInitialized(address indexed _module);\\n    event ManagerEdited(address _newManager, address _oldManager);\\n    event PendingModuleRemoved(address indexed _module);\\n    event PositionMultiplierEdited(int256 _newMultiplier);\\n    event ComponentAdded(address indexed _component);\\n    event ComponentRemoved(address indexed _component);\\n    event DefaultPositionUnitEdited(\\n        address indexed _component,\\n        int256 _realUnit\\n    );\\n    event ExternalPositionUnitEdited(\\n        address indexed _component,\\n        address indexed _positionModule,\\n        int256 _realUnit\\n    );\\n    event ExternalPositionDataEdited(\\n        address indexed _component,\\n        address indexed _positionModule,\\n        bytes _data\\n    );\\n    event PositionModuleAdded(\\n        address indexed _component,\\n        address indexed _positionModule\\n    );\\n    event PositionModuleRemoved(\\n        address indexed _component,\\n        address indexed _positionModule\\n    );\\n    event MasterTokenEdited(address _newMasterToken, address _oldMasterToken);\\n\\n    /* ============ Modifiers ============ */\\n\\n    /**\\n     * Throws if the sender is not a JasperVault's module or module not enabled\\n     */\\n    modifier onlyModule() {\\n        // Internal function used to reduce bytecode size\\n        _validateOnlyModule();\\n        _;\\n    }\\n\\n    /**\\n     * Throws if the sender is not the JasperVault's manager\\n     */\\n    modifier onlyManager() {\\n        _validateOnlyManager();\\n        _;\\n    }\\n\\n    /**\\n     * Throws if JasperVault is locked and called by any account other than the locker.\\n     */\\n    modifier whenLockedOnlyLocker() {\\n        _validateWhenLockedOnlyLocker();\\n        _;\\n    }\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of the controller\\n    IController public controller;\\n\\n    // The manager has the privelege to add modules, remove, and set a new manager\\n    address public manager;\\n\\n    // A module that has locked other modules from privileged functionality, typically required\\n    // for multi-block module actions such as auctions\\n    address public locker;\\n\\n    // List of initialized Modules; Modules extend the functionality of SetTokens\\n    address[] public modules;\\n\\n    // Modules are initialized from NONE -> PENDING -> INITIALIZED through the\\n    // addModule (called by manager) and initialize  (called by module) functions\\n    mapping(address => IJasperVault.ModuleState) public moduleStates;\\n\\n    // When locked, only the locker (a module) can call privileged functionality\\n    // Typically utilized if a module (e.g. Auction) needs multiple transactions to complete an action\\n    // without interruption\\n    bool public isLocked;\\n\\n    // List of components\\n    address[] public components;\\n\\n    // Mapping that stores all Default and External position information for a given component.\\n    // Position quantities are represented as virtual units; Default positions are on the top-level,\\n    // while external positions are stored in a module array and accessed through its externalPositions mapping\\n    mapping(address => IJasperVault.ComponentPosition)\\n        private componentPositions;  \\n\\n    // The multiplier applied to the virtual position unit to achieve the real/actual unit.\\n    // This multiplier is used for efficiently modifying the entire position units (e.g. streaming fee)\\n    int256 public positionMultiplier;\\n\\n    address public masterToken;\\n\\n    uint256 public followFee;\\n    uint256 public maxFollowFee;\\n    \\n    uint256 public profitShareFee;\\n\\n    string private jasperName;\\n    string private jasperSymbol;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * When a new JasperVault is created, initializes Positions in default state and adds modules into pending state.\\n     * All parameter validations are on the SetTokenCreator contract. Validations are performed already on the\\n     * SetTokenCreator. Initiates the positionMultiplier as 1e18 (no adjustments).\\n     *\\n     * @param _components             List of addresses of components for initial Positions\\n     * @param _units                  List of units. Each unit is the # of components per 10^18 of a JasperVault\\n     * @param _modules                List of modules to enable. All modules must be approved by the Controller\\n     * @param _controller             Address of the controller\\n     * @param _manager                Address of the manager\\n     * @param _name                   Name of the JasperVault\\n     * @param _symbol                 Symbol of the JasperVault\\n     */\\n    constructor(\\n        address[] memory _components,\\n        int256[] memory _units,\\n        address[] memory _modules,\\n        IController _controller,\\n        address _manager,\\n        string memory _name,\\n        string memory _symbol,\\n        address _masterToken,\\n        uint256 _followFee,\\n        uint256 _maxFollowFee,\\n        uint256 _profitShareFee\\n    ) public ERC20(_name, _symbol) {\\n        require(\\n            _followFee <= PreciseUnitMath.PRECISE_UNIT,\\n            \\\"subscribeFee too high\\\"\\n        );\\n        require(\\n            _profitShareFee <= PreciseUnitMath.PRECISE_UNIT,\\n            \\\"profitShareFee too high\\\"\\n        );\\n\\n        jasperName = _name;\\n        jasperSymbol = _symbol;\\n        controller = _controller;\\n        manager = _manager;\\n        positionMultiplier = PreciseUnitMath.preciseUnitInt();\\n        components = _components;\\n        followFee = _followFee;\\n        profitShareFee = _profitShareFee;\\n        masterToken=_masterToken;\\n        maxFollowFee=_maxFollowFee;\\n        // Modules are put in PENDING state, as they need to be individually initialized by the Module\\n        for (uint256 i = 0; i < _modules.length; i++) {\\n            moduleStates[_modules[i]] = IJasperVault.ModuleState.PENDING;\\n        }\\n\\n        // Positions are put in default state initially\\n        for (uint256 j = 0; j < _components.length; j++) {\\n            componentPositions[_components[j]].virtualUnit = _units[j];\\n        }\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. Low level function that allows a module to make an arbitrary function\\n     * call to any contract.\\n     *\\n     * @param _target                 Address of the smart contract to call\\n     * @param _value                  Quantity of Ether to provide the call (typically 0)\\n     * @param _data                   Encoded function selector and arguments\\n     * @return _returnValue           Bytes encoded return value\\n     */\\n    function invoke(\\n        address _target,\\n        uint256 _value,\\n        bytes calldata _data\\n    )\\n        external\\n        onlyModule\\n        whenLockedOnlyLocker\\n        returns (bytes memory _returnValue)\\n    {\\n        _returnValue = _target.functionCallWithValue(_data, _value);\\n\\n        emit Invoked(_target, _value, _data, _returnValue);\\n\\n        return _returnValue;\\n    }\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. Low level function that adds a component to the components array.\\n     */\\n    function addComponent(\\n        address _component\\n    ) external onlyModule whenLockedOnlyLocker {\\n        require(!isComponent(_component), \\\"Must not be component\\\");\\n\\n        components.push(_component);\\n\\n        emit ComponentAdded(_component);\\n    }\\n\\n    function setBaseProperty(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _followFee,\\n        uint256 _maxFollowFee\\n    ) external onlyManager {\\n        jasperName = _name;\\n        jasperSymbol = _symbol;\\n        followFee=_followFee;\\n        maxFollowFee=_maxFollowFee;\\n    }\\n\\n    function setBaseFeeAndToken(\\n        address _masterToken,\\n        uint256 _profitShareFee\\n    ) external onlyManager {\\n        require(\\n            _profitShareFee <= PreciseUnitMath.PRECISE_UNIT,\\n            \\\"profitShareFee too high\\\"\\n        );\\n        masterToken = _masterToken;\\n        profitShareFee = _profitShareFee;\\n    }\\n\\n    function name() public view override returns (string memory) {\\n        return jasperName;\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        return jasperSymbol;\\n    }\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. Low level function that removes a component from the components array.\\n     */\\n    function removeComponent(\\n        address _component\\n    ) external onlyModule whenLockedOnlyLocker {\\n        components.removeStorage(_component);\\n\\n        emit ComponentRemoved(_component);\\n    }\\n    function removAllPosition() external onlyModule whenLockedOnlyLocker {\\n        for(uint256 i=components.length;i>0;i--){\\n             delete  componentPositions[components[i-1]];\\n             components.pop();\\n        }\\n    }\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. Low level function that edits a component's virtual unit. Takes a real unit\\n     * and converts it to virtual before committing.\\n     */\\n    function editDefaultPositionUnit(\\n        address _component,\\n        int256 _realUnit\\n    ) external onlyModule whenLockedOnlyLocker {\\n        int256 virtualUnit = _convertRealToVirtualUnit(_realUnit);\\n        componentPositions[_component].virtualUnit = virtualUnit;\\n        emit DefaultPositionUnitEdited(_component, _realUnit);\\n    }\\n\\n    function editDefaultPositionCoinType(\\n        address _component,\\n        uint256 coinType\\n    ) external onlyModule whenLockedOnlyLocker {\\n        componentPositions[_component].coinType = coinType;\\n    }\\n\\n    function editExternalPositionCoinType(\\n        address _component,\\n        address _module,\\n        uint256 coinType\\n    ) external onlyModule whenLockedOnlyLocker {\\n        componentPositions[_component]\\n            .externalPositions[_module]\\n            .coinType = coinType;\\n    }\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. Low level function that adds a module to a component's externalPositionModules array\\n     */\\n    function addExternalPositionModule(\\n        address _component,\\n        address _positionModule\\n    ) external onlyModule whenLockedOnlyLocker {\\n        require(\\n            !isExternalPositionModule(_component, _positionModule),\\n            \\\"Module already added\\\"\\n        );\\n\\n        componentPositions[_component].externalPositionModules.push(\\n            _positionModule\\n        );\\n\\n        emit PositionModuleAdded(_component, _positionModule);\\n    }\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. Low level function that removes a module from a component's\\n     * externalPositionModules array and deletes the associated externalPosition.\\n     */\\n    function removeExternalPositionModule(\\n        address _component,\\n        address _positionModule\\n    ) external onlyModule whenLockedOnlyLocker {\\n        componentPositions[_component].externalPositionModules.removeStorage(\\n            _positionModule\\n        );\\n\\n        delete componentPositions[_component].externalPositions[\\n            _positionModule\\n        ];\\n\\n        emit PositionModuleRemoved(_component, _positionModule);\\n    }\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. Low level function that edits a component's external position virtual unit.\\n     * Takes a real unit and converts it to virtual before committing.\\n     */\\n    function editExternalPositionUnit(\\n        address _component,\\n        address _positionModule,\\n        int256 _realUnit\\n    ) external onlyModule whenLockedOnlyLocker {\\n        int256 virtualUnit = _convertRealToVirtualUnit(_realUnit);\\n\\n        componentPositions[_component]\\n            .externalPositions[_positionModule]\\n            .virtualUnit = virtualUnit;\\n\\n        emit ExternalPositionUnitEdited(_component, _positionModule, _realUnit);\\n    }\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. Low level function that edits a component's external position data\\n     */\\n    function editExternalPositionData(\\n        address _component,\\n        address _positionModule,\\n        bytes calldata _data\\n    ) external onlyModule whenLockedOnlyLocker {\\n        componentPositions[_component]\\n            .externalPositions[_positionModule]\\n            .data = _data;\\n\\n        emit ExternalPositionDataEdited(_component, _positionModule, _data);\\n    }\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. Modifies the position multiplier. This is typically used to efficiently\\n     * update all the Positions' units at once in applications where inflation is awarded (e.g. subscription fees).\\n     */\\n    function editPositionMultiplier(\\n        int256 _newMultiplier\\n    ) external onlyModule whenLockedOnlyLocker {\\n        _validateNewMultiplier(_newMultiplier);\\n\\n        positionMultiplier = _newMultiplier;\\n\\n        emit PositionMultiplierEdited(_newMultiplier);\\n    }\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. Increases the \\\"account\\\" balance by the \\\"quantity\\\".\\n     */\\n    function mint(\\n        address _account,\\n        uint256 _quantity\\n    ) external onlyModule whenLockedOnlyLocker {\\n        _mint(_account, _quantity);\\n    }\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. Decreases the \\\"account\\\" balance by the \\\"quantity\\\".\\n     * _burn checks that the \\\"account\\\" already has the required \\\"quantity\\\".\\n     */\\n    function burn(\\n        address _account,\\n        uint256 _quantity\\n    ) external onlyModule whenLockedOnlyLocker {\\n        _burn(_account, _quantity);\\n    }\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. When a JasperVault is locked, only the locker can call privileged functions.\\n     */\\n    function lock() external onlyModule {\\n        require(!isLocked, \\\"Must not be locked\\\");\\n        locker = msg.sender;\\n        isLocked = true;\\n    }\\n\\n    /**\\n     * PRIVELEGED MODULE FUNCTION. Unlocks the JasperVault and clears the locker\\n     */\\n    function unlock() external onlyModule {\\n        require(isLocked, \\\"Must be locked\\\");\\n        require(locker == msg.sender, \\\"Must be locker\\\");\\n        delete locker;\\n        isLocked = false;\\n    }\\n\\n    /**\\n     * MANAGER ONLY. Adds a module into a PENDING state; Module must later be initialized via\\n     * module's initialize function\\n     */\\n    function addModule(address _module) external onlyManager {\\n        require(\\n            moduleStates[_module] == IJasperVault.ModuleState.NONE,\\n            \\\"Module must not be added\\\"\\n        );\\n        require(controller.isModule(_module), \\\"Must be enabled on Controller\\\");\\n\\n        moduleStates[_module] = IJasperVault.ModuleState.PENDING;\\n\\n        emit ModuleAdded(_module);\\n    }\\n\\n    /**\\n     * MANAGER ONLY. Removes a module from the JasperVault. JasperVault calls removeModule on module itself to confirm\\n     * it is not needed to manage any remaining positions and to remove state.\\n     */\\n    function removeModule(address _module) external onlyManager {\\n        require(!isLocked, \\\"Only when unlocked\\\");\\n        require(\\n            moduleStates[_module] == IJasperVault.ModuleState.INITIALIZED,\\n            \\\"Module must be added\\\"\\n        );\\n\\n        IModule(_module).removeModule();\\n\\n        moduleStates[_module] = IJasperVault.ModuleState.NONE;\\n\\n        modules.removeStorage(_module);\\n\\n        emit ModuleRemoved(_module);\\n    }\\n\\n    /**\\n     * MANAGER ONLY. Removes a pending module from the JasperVault.\\n     */\\n    function removePendingModule(address _module) external onlyManager {\\n        require(!isLocked, \\\"Only when unlocked\\\");\\n        require(\\n            moduleStates[_module] == IJasperVault.ModuleState.PENDING,\\n            \\\"Module must be pending\\\"\\n        );\\n\\n        moduleStates[_module] = IJasperVault.ModuleState.NONE;\\n\\n        emit PendingModuleRemoved(_module);\\n    }\\n\\n    /**\\n     * Initializes an added module from PENDING to INITIALIZED state. Can only call when unlocked.\\n     * An address can only enter a PENDING state if it is an enabled module added by the manager.\\n     * Only callable by the module itself, hence msg.sender is the subject of update.\\n     */\\n    function initializeModule() external {\\n        require(!isLocked, \\\"Only when unlocked\\\");\\n        require(\\n            moduleStates[msg.sender] == IJasperVault.ModuleState.PENDING,\\n            \\\"Module must be pending\\\"\\n        );\\n\\n        moduleStates[msg.sender] = IJasperVault.ModuleState.INITIALIZED;\\n        modules.push(msg.sender);\\n\\n        emit ModuleInitialized(msg.sender);\\n    }\\n\\n    /**\\n     * MANAGER ONLY. Changes manager; We allow null addresses in case the manager wishes to wind down the JasperVault.\\n     * Modules may rely on the manager state, so only changable when unlocked\\n     */\\n    function setManager(address _manager) external onlyManager {\\n        require(!isLocked, \\\"Only when unlocked\\\");\\n        address oldManager = manager;\\n        manager = _manager;\\n\\n        emit ManagerEdited(_manager, oldManager);\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    function getComponents() external view returns (address[] memory) {\\n        return components;\\n    }\\n\\n    function getDefaultPositionRealUnit(\\n        address _component\\n    ) public view returns (int256) {\\n        return\\n            _convertVirtualToRealUnit(_defaultPositionVirtualUnit(_component));\\n    }\\n\\n    function getExternalPositionRealUnit(\\n        address _component,\\n        address _positionModule\\n    ) public view returns (int256) {\\n        return\\n            _convertVirtualToRealUnit(\\n                _externalPositionVirtualUnit(_component, _positionModule)\\n            );\\n    }\\n\\n    function getExternalPositionModules(\\n        address _component\\n    ) external view returns (address[] memory) {\\n        return _externalPositionModules(_component);\\n    }\\n\\n    function getExternalPositionData(\\n        address _component,\\n        address _positionModule\\n    ) external view returns (bytes memory) {\\n        return _externalPositionData(_component, _positionModule);\\n    }\\n\\n    function getModules() external view returns (address[] memory) {\\n        return modules;\\n    }\\n\\n    function isComponent(address _component) public view returns (bool) {\\n        return components.contains(_component);\\n    }\\n\\n    function isExternalPositionModule(\\n        address _component,\\n        address _module\\n    ) public view returns (bool) {\\n        return _externalPositionModules(_component).contains(_module);\\n    }\\n\\n    /**\\n     * Only ModuleStates of INITIALIZED modules are considered enabled\\n     */\\n    function isInitializedModule(address _module) external view returns (bool) {\\n        return moduleStates[_module] == IJasperVault.ModuleState.INITIALIZED;\\n    }\\n\\n    /**\\n     * Returns whether the module is in a pending state\\n     */\\n    function isPendingModule(address _module) external view returns (bool) {\\n        return moduleStates[_module] == IJasperVault.ModuleState.PENDING;\\n    }\\n\\n    /**\\n     * Returns a list of Positions, through traversing the components. Each component with a non-zero virtual unit\\n     * is considered a Default Position, and each externalPositionModule will generate a unique position.\\n     * Virtual units are converted to real units. This function is typically used off-chain for data presentation purposes.\\n     */\\n    function getPositions()\\n        external\\n        view\\n        returns (IJasperVault.Position[] memory)\\n    {\\n        IJasperVault.Position[] memory positions = new IJasperVault.Position[](\\n            _getPositionCount()\\n        );\\n        uint256 positionCount = 0;\\n\\n        for (uint256 i = 0; i < components.length; i++) {\\n            address component = components[i];\\n\\n            // A default position exists if the default virtual unit is > 0\\n            if (_defaultPositionVirtualUnit(component) > 0) {\\n                positions[positionCount] = IJasperVault.Position({\\n                    component: component,\\n                    module: address(0),\\n                    unit: getDefaultPositionRealUnit(component),\\n                    positionState: DEFAULT,\\n                    coinType: componentPositions[component].coinType,\\n                    data: \\\"\\\"\\n                });\\n\\n                positionCount++;\\n            }\\n\\n            address[] memory externalModules = _externalPositionModules(\\n                component\\n            );\\n            for (uint256 j = 0; j < externalModules.length; j++) {\\n                address currentModule = externalModules[j];\\n\\n                positions[positionCount] = IJasperVault.Position({\\n                    component: component,\\n                    module: currentModule,\\n                    unit: getExternalPositionRealUnit(component, currentModule),\\n                    positionState: EXTERNAL,\\n                    coinType: componentPositions[component]\\n                        .externalPositions[currentModule]\\n                        .coinType,\\n                    data: _externalPositionData(component, currentModule)\\n                });\\n\\n                positionCount++;\\n            }\\n        }\\n\\n        return positions;\\n    }\\n\\n    /**\\n     * Returns the total Real Units for a given component, summing the default and external position units.\\n     */\\n    function getTotalComponentRealUnits(\\n        address _component\\n    ) external view returns (int256) {\\n        int256 totalUnits = getDefaultPositionRealUnit(_component);\\n\\n        address[] memory externalModules = _externalPositionModules(_component);\\n        for (uint256 i = 0; i < externalModules.length; i++) {\\n            // We will perform the summation no matter what, as an external position virtual unit can be negative\\n            totalUnits = totalUnits.add(\\n                getExternalPositionRealUnit(_component, externalModules[i])\\n            );\\n        }\\n\\n        return totalUnits;\\n    }\\n\\n    receive() external payable {} // solium-disable-line quotes\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _defaultPositionVirtualUnit(\\n        address _component\\n    ) internal view returns (int256) {\\n        return componentPositions[_component].virtualUnit;\\n    }\\n\\n    function _externalPositionModules(\\n        address _component\\n    ) internal view returns (address[] memory) {\\n        return componentPositions[_component].externalPositionModules;\\n    }\\n\\n    function _externalPositionVirtualUnit(\\n        address _component,\\n        address _module\\n    ) internal view returns (int256) {\\n        return\\n            componentPositions[_component]\\n                .externalPositions[_module]\\n                .virtualUnit;\\n    }\\n\\n    function _externalPositionData(\\n        address _component,\\n        address _module\\n    ) internal view returns (bytes memory) {\\n        return componentPositions[_component].externalPositions[_module].data;\\n    }\\n\\n    /**\\n     * Takes a real unit and divides by the position multiplier to return the virtual unit. Negative units will\\n     * be rounded away from 0 so no need to check that unit will be rounded down to 0 in conversion.\\n     */\\n    function _convertRealToVirtualUnit(\\n        int256 _realUnit\\n    ) internal view returns (int256) {\\n        int256 virtualUnit = _realUnit.conservativePreciseDiv(\\n            positionMultiplier\\n        );\\n\\n        // This check ensures that the virtual unit does not return a result that has rounded down to 0\\n        if (_realUnit > 0 && virtualUnit == 0) {\\n            revert(\\\"Real to Virtual unit conversion invalid\\\");\\n        }\\n\\n        // This check ensures that when converting back to realUnits the unit won't be rounded down to 0\\n        if (_realUnit > 0 && _convertVirtualToRealUnit(virtualUnit) == 0) {\\n            revert(\\\"Virtual to Real unit conversion invalid\\\");\\n        }\\n\\n        return virtualUnit;\\n    }\\n\\n    /**\\n     * Takes a virtual unit and multiplies by the position multiplier to return the real unit\\n     */\\n    function _convertVirtualToRealUnit(\\n        int256 _virtualUnit\\n    ) internal view returns (int256) {\\n        return _virtualUnit.conservativePreciseMul(positionMultiplier);\\n    }\\n\\n    /**\\n     * To prevent virtual to real unit conversion issues (where real unit may be 0), the\\n     * product of the positionMultiplier and the lowest absolute virtualUnit value (across default and\\n     * external positions) must be greater than 0.\\n     */\\n    function _validateNewMultiplier(int256 _newMultiplier) internal view {\\n        int256 minVirtualUnit = _getPositionsAbsMinimumVirtualUnit();\\n\\n        require(\\n            minVirtualUnit.conservativePreciseMul(_newMultiplier) > 0,\\n            \\\"New multiplier too small\\\"\\n        );\\n    }\\n\\n    /**\\n     * Loops through all of the positions and returns the smallest absolute value of\\n     * the virtualUnit.\\n     *\\n     * @return Min virtual unit across positions denominated as int256\\n     */\\n    function _getPositionsAbsMinimumVirtualUnit()\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        // Additional assignment happens in the loop below\\n        uint256 minimumUnit = uint256(-1);\\n\\n        for (uint256 i = 0; i < components.length; i++) {\\n            address component = components[i];\\n\\n            // A default position exists if the default virtual unit is > 0\\n            uint256 defaultUnit = _defaultPositionVirtualUnit(component)\\n                .toUint256();\\n            if (defaultUnit > 0 && defaultUnit < minimumUnit) {\\n                minimumUnit = defaultUnit;\\n            }\\n\\n            address[] memory externalModules = _externalPositionModules(\\n                component\\n            );\\n            for (uint256 j = 0; j < externalModules.length; j++) {\\n                address currentModule = externalModules[j];\\n\\n                uint256 virtualUnit = _absoluteValue(\\n                    _externalPositionVirtualUnit(component, currentModule)\\n                );\\n                if (virtualUnit > 0 && virtualUnit < minimumUnit) {\\n                    minimumUnit = virtualUnit;\\n                }\\n            }\\n        }\\n\\n        return minimumUnit.toInt256();\\n    }\\n\\n    /**\\n     * Gets the total number of positions, defined as the following:\\n     * - Each component has a default position if its virtual unit is > 0\\n     * - Each component's external positions module is counted as a position\\n     */\\n    function _getPositionCount() internal view returns (uint256) {\\n        uint256 positionCount;\\n        for (uint256 i = 0; i < components.length; i++) {\\n            address component = components[i];\\n\\n            // Increment the position count if the default position is > 0\\n            if (_defaultPositionVirtualUnit(component) > 0) {\\n                positionCount++;\\n            }\\n\\n            // Increment the position count by each external position module\\n            address[] memory externalModules = _externalPositionModules(\\n                component\\n            );\\n            if (externalModules.length > 0) {\\n                positionCount = positionCount.add(externalModules.length);\\n            }\\n        }\\n\\n        return positionCount;\\n    }\\n\\n    /**\\n     * Returns the absolute value of the signed integer value\\n     * @param _a Signed interger value\\n     * @return Returns the absolute value in uint256\\n     */\\n    function _absoluteValue(int256 _a) internal pure returns (uint256) {\\n        return _a >= 0 ? _a.toUint256() : (-_a).toUint256();\\n    }\\n\\n    /**\\n     * Due to reason error bloat, internal functions are used to reduce bytecode size\\n     *\\n     * Module must be initialized on the JasperVault and enabled by the controller\\n     */\\n    function _validateOnlyModule() internal view {\\n        require(\\n            moduleStates[msg.sender] == IJasperVault.ModuleState.INITIALIZED,\\n            \\\"Only the module can call\\\"\\n        );\\n\\n        require(\\n            controller.isModule(msg.sender),\\n            \\\"Module must be enabled on controller\\\"\\n        );\\n    }\\n\\n    function _validateOnlyManager() internal view {\\n        require(msg.sender == manager, \\\"Only manager can call\\\");\\n    }\\n\\n    function _validateWhenLockedOnlyLocker() internal view {\\n        if (isLocked) {\\n            require(\\n                msg.sender == locker,\\n                \\\"When locked, only the locker can call\\\"\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/lib/Invoke.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport { IJasperVault } from \\\"../../interfaces/IJasperVault.sol\\\";\\n\\n\\n/**\\n * @title Invoke\\n * @author Set Protocol\\n *\\n * A collection of common utility functions for interacting with the JasperVault's invoke function\\n */\\nlibrary Invoke {\\n    using SafeMath for uint256;\\n\\n    /* ============ Internal ============ */\\n\\n    /**\\n     * Instructs the JasperVault to set approvals of the ERC20 token to a spender.\\n     *\\n     * @param _jasperVault        JasperVault instance to invoke\\n     * @param _token           ERC20 token to approve\\n     * @param _spender         The account allowed to spend the JasperVault's balance\\n     * @param _quantity        The quantity of allowance to allow\\n     */\\n    function invokeApprove(\\n        IJasperVault _jasperVault,\\n        address _token,\\n        address _spender,\\n        uint256 _quantity\\n    )\\n        internal\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\\"approve(address,uint256)\\\", _spender, _quantity);\\n        _jasperVault.invoke(_token, 0, callData);\\n    }\\n\\n    /**\\n     * Instructs the JasperVault to transfer the ERC20 token to a recipient.\\n     *\\n     * @param _jasperVault        JasperVault instance to invoke\\n     * @param _token           ERC20 token to transfer\\n     * @param _to              The recipient account\\n     * @param _quantity        The quantity to transfer\\n     */\\n    function invokeTransfer(\\n        IJasperVault _jasperVault,\\n        address _token,\\n        address _to,\\n        uint256 _quantity\\n    )\\n        internal\\n    {\\n        if (_quantity > 0) {\\n            bytes memory callData = abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", _to, _quantity);\\n            _jasperVault.invoke(_token, 0, callData);\\n        }\\n    }\\n\\n    /**\\n     * Instructs the JasperVault to transfer the ERC20 token to a recipient.\\n     * The new JasperVault balance must equal the existing balance less the quantity transferred\\n     *\\n     * @param _jasperVault        JasperVault instance to invoke\\n     * @param _token           ERC20 token to transfer\\n     * @param _to              The recipient account\\n     * @param _quantity        The quantity to transfer\\n     */\\n    function strictInvokeTransfer(\\n        IJasperVault _jasperVault,\\n        address _token,\\n        address _to,\\n        uint256 _quantity\\n    )\\n        internal\\n    {\\n        if (_quantity > 0) {\\n            // Retrieve current balance of token for the JasperVault\\n            uint256 existingBalance = IERC20(_token).balanceOf(address(_jasperVault));\\n\\n            Invoke.invokeTransfer(_jasperVault, _token, _to, _quantity);\\n\\n            // Get new balance of transferred token for JasperVault\\n            uint256 newBalance = IERC20(_token).balanceOf(address(_jasperVault));\\n\\n            // Verify only the transfer quantity is subtracted\\n            require(\\n                newBalance >= existingBalance.sub(_quantity),\\n                \\\"Invalid post transfer balance\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * Instructs the JasperVault to unwrap the passed quantity of WETH\\n     *\\n     * @param _jasperVault        JasperVault instance to invoke\\n     * @param _weth            WETH address\\n     * @param _quantity        The quantity to unwrap\\n     */\\n    function invokeUnwrapWETH(IJasperVault _jasperVault, address _weth, uint256 _quantity) internal {\\n        bytes memory callData = abi.encodeWithSignature(\\\"withdraw(uint256)\\\", _quantity);\\n        _jasperVault.invoke(_weth, 0, callData);\\n    }\\n\\n    /**\\n     * Instructs the JasperVault to wrap the passed quantity of ETH\\n     *\\n     * @param _jasperVault        JasperVault instance to invoke\\n     * @param _weth            WETH address\\n     * @param _quantity        The quantity to unwrap\\n     */\\n    function invokeWrapWETH(IJasperVault _jasperVault, address _weth, uint256 _quantity) internal {\\n        bytes memory callData = abi.encodeWithSignature(\\\"deposit()\\\");\\n        _jasperVault.invoke(_weth, _quantity, callData);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/lib/ModuleBase.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { AddressArrayUtils } from \\\"../../lib/AddressArrayUtils.sol\\\";\\nimport { ExplicitERC20 } from \\\"../../lib/ExplicitERC20.sol\\\";\\nimport { IController } from \\\"../../interfaces/IController.sol\\\";\\nimport { IModule } from \\\"../../interfaces/IModule.sol\\\";\\nimport { IJasperVault } from \\\"../../interfaces/IJasperVault.sol\\\";\\nimport { Invoke } from \\\"./Invoke.sol\\\";\\nimport { Position } from \\\"./Position.sol\\\";\\nimport { PreciseUnitMath } from \\\"../../lib/PreciseUnitMath.sol\\\";\\nimport { ResourceIdentifier } from \\\"./ResourceIdentifier.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\n/**\\n * @title ModuleBase\\n * @author Set Protocol\\n *\\n * Abstract class that houses common Module-related state and functions.\\n *\\n * CHANGELOG:\\n * - 4/21/21: Delegated modifier logic to internal helpers to reduce contract size\\n *\\n */\\nabstract contract ModuleBase is IModule {\\n    using AddressArrayUtils for address[];\\n    using Invoke for IJasperVault;\\n    using Position for IJasperVault;\\n    using PreciseUnitMath for uint256;\\n    using ResourceIdentifier for IController;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of the controller\\n    IController public controller;\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier onlyManagerAndValidSet(IJasperVault _jasperVault) {\\n        _validateOnlyManagerAndValidSet(_jasperVault);\\n        _;\\n    }\\n\\n    modifier onlySetManager(IJasperVault _jasperVault, address _caller) {\\n        _validateOnlySetManager(_jasperVault, _caller);\\n        _;\\n    }\\n\\n    modifier onlyValidAndInitializedSet(IJasperVault _jasperVault) {\\n        _validateOnlyValidAndInitializedSet(_jasperVault);\\n        _;\\n    }\\n\\n    /**\\n     * Throws if the sender is not a JasperVault's module or module not enabled\\n     */\\n    modifier onlyModule(IJasperVault _jasperVault) {\\n        _validateOnlyModule(_jasperVault);\\n        _;\\n    }\\n\\n    /**\\n     * Utilized during module initializations to check that the module is in pending state\\n     * and that the JasperVault is valid\\n     */\\n    modifier onlyValidAndPendingSet(IJasperVault _jasperVault) {\\n        _validateOnlyValidAndPendingSet(_jasperVault);\\n        _;\\n    }\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Set state variables and map asset pairs to their oracles\\n     *\\n     * @param _controller             Address of controller contract\\n     */\\n    constructor(IController _controller) public {\\n        controller = _controller;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Transfers tokens from an address (that has set allowance on the module).\\n     *\\n     * @param  _token          The address of the ERC20 token\\n     * @param  _from           The address to transfer from\\n     * @param  _to             The address to transfer to\\n     * @param  _quantity       The number of tokens to transfer\\n     */\\n    function transferFrom(IERC20 _token, address _from, address _to, uint256 _quantity) internal {\\n        ExplicitERC20.transferFrom(_token, _from, _to, _quantity);\\n    }\\n\\n    /**\\n     * Gets the integration for the module with the passed in name. Validates that the address is not empty\\n     */\\n    function getAndValidateAdapter(string memory _integrationName) internal view returns(address) {\\n        bytes32 integrationHash = getNameHash(_integrationName);\\n        return getAndValidateAdapterWithHash(integrationHash);\\n    }\\n\\n    /**\\n     * Gets the integration for the module with the passed in hash. Validates that the address is not empty\\n     */\\n    function getAndValidateAdapterWithHash(bytes32 _integrationHash) internal view returns(address) {\\n        address adapter = controller.getIntegrationRegistry().getIntegrationAdapterWithHash(\\n            address(this),\\n            _integrationHash\\n        );\\n\\n        require(adapter != address(0), \\\"Must be valid adapter\\\");\\n        return adapter;\\n    }\\n\\n    /**\\n     * Gets the total fee for this module of the passed in index (fee % * quantity)\\n     */\\n    function getModuleFee(uint256 _feeIndex, uint256 _quantity) internal view returns(uint256) {\\n        uint256 feePercentage = controller.getModuleFee(address(this), _feeIndex);\\n        return _quantity.preciseMul(feePercentage);\\n    }\\n\\n    /**\\n     * Pays the _feeQuantity from the _jasperVault denominated in _token to the protocol fee recipient\\n     */\\n    function payProtocolFeeFromSetToken(IJasperVault _jasperVault, address _token, uint256 _feeQuantity) internal {\\n        if (_feeQuantity > 0) {\\n            _jasperVault.strictInvokeTransfer(_token, controller.feeRecipient(), _feeQuantity);\\n        }\\n    }\\n\\n    /**\\n     * Returns true if the module is in process of initialization on the JasperVault\\n     */\\n    function isSetPendingInitialization(IJasperVault _jasperVault) internal view returns(bool) {\\n        return _jasperVault.isPendingModule(address(this));\\n    }\\n\\n    /**\\n     * Returns true if the address is the JasperVault's manager\\n     */\\n    function isSetManager(IJasperVault _jasperVault, address _toCheck) internal view returns(bool) {\\n        return _jasperVault.manager() == _toCheck;\\n    }\\n\\n    /**\\n     * Returns true if JasperVault must be enabled on the controller\\n     * and module is registered on the JasperVault\\n     */\\n    function isSetValidAndInitialized(IJasperVault _jasperVault) internal view returns(bool) {\\n        return controller.isSet(address(_jasperVault)) &&\\n            _jasperVault.isInitializedModule(address(this));\\n    }\\n\\n    /**\\n     * Hashes the string and returns a bytes32 value\\n     */\\n    function getNameHash(string memory _name) internal pure returns(bytes32) {\\n        return keccak256(bytes(_name));\\n    }\\n\\n    /* ============== Modifier Helpers ===============\\n     * Internal functions used to reduce bytecode size\\n     */\\n\\n    /**\\n     * Caller must JasperVault manager and JasperVault must be valid and initialized\\n     */\\n    function _validateOnlyManagerAndValidSet(IJasperVault _jasperVault) internal view {\\n       require(isSetManager(_jasperVault, msg.sender), \\\"Must be the JasperVault manager\\\");\\n       require(isSetValidAndInitialized(_jasperVault), \\\"Must be a valid and initialized JasperVault\\\");\\n    }\\n\\n    /**\\n     * Caller must JasperVault manager\\n     */\\n    function _validateOnlySetManager(IJasperVault _jasperVault, address _caller) internal view {\\n        require(isSetManager(_jasperVault, _caller), \\\"Must be the JasperVault manager\\\");\\n    }\\n\\n    /**\\n     * JasperVault must be valid and initialized\\n     */\\n    function _validateOnlyValidAndInitializedSet(IJasperVault _jasperVault) internal view {\\n        require(isSetValidAndInitialized(_jasperVault), \\\"Must be a valid and initialized JasperVault\\\");\\n    }\\n\\n    /**\\n     * Caller must be initialized module and module must be enabled on the controller\\n     */\\n    function _validateOnlyModule(IJasperVault _jasperVault) internal view {\\n        require(\\n            _jasperVault.moduleStates(msg.sender) == IJasperVault.ModuleState.INITIALIZED,\\n            \\\"Only the module can call\\\"\\n        );\\n\\n        require(\\n            controller.isModule(msg.sender),\\n            \\\"Module must be enabled on controller\\\"\\n        );\\n    }\\n\\n    /**\\n     * JasperVault must be in a pending state and module must be in pending state\\n     */\\n    function _validateOnlyValidAndPendingSet(IJasperVault _jasperVault) internal view {\\n        require(controller.isSet(address(_jasperVault)), \\\"Must be controller-enabled JasperVault\\\");\\n        require(isSetPendingInitialization(_jasperVault), \\\"Must be pending initialization\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/lib/Position.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {SignedSafeMath} from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\nimport {IJasperVault} from \\\"../../interfaces/IJasperVault.sol\\\";\\nimport {PreciseUnitMath} from \\\"../../lib/PreciseUnitMath.sol\\\";\\n\\n/**\\n * @title Position\\n * @author Set Protocol\\n *\\n * Collection of helper functions for handling and updating JasperVault Positions\\n *\\n * CHANGELOG:\\n *  - Updated editExternalPosition to work when no external position is associated with module\\n */\\nlibrary Position {\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SafeCast for int256;\\n    using SignedSafeMath for int256;\\n    using PreciseUnitMath for uint256;\\n\\n    /* ============ Helper ============ */\\n\\n    /**\\n     * Returns whether the JasperVault has a default position for a given component (if the real unit is > 0)\\n     */\\n    function hasDefaultPosition(\\n\\tIJasperVault _jasperVault,\\n\\taddress _component\\n    ) internal view returns (bool) {\\n\\treturn _jasperVault.getDefaultPositionRealUnit(_component) > 0;\\n    }\\n\\n    /**\\n     * Returns whether the JasperVault has an external position for a given component (if # of position modules is > 0)\\n     */\\n    function hasExternalPosition(\\n\\tIJasperVault _jasperVault,\\n\\taddress _component\\n    ) internal view returns (bool) {\\n\\treturn _jasperVault.getExternalPositionModules(_component).length > 0;\\n    }\\n\\n    /**\\n     * Returns whether the JasperVault component default position real unit is greater than or equal to units passed in.\\n     */\\n    function hasSufficientDefaultUnits(\\n\\tIJasperVault _jasperVault,\\n\\taddress _component,\\n\\tuint256 _unit\\n    ) internal view returns (bool) {\\n\\treturn\\n\\t_jasperVault.getDefaultPositionRealUnit(_component) >=\\n\\t_unit.toInt256();\\n    }\\n\\n    /**\\n     * Returns whether the JasperVault component external position is greater than or equal to the real units passed in.\\n     */\\n    function hasSufficientExternalUnits(\\n\\tIJasperVault _jasperVault,\\n\\taddress _component,\\n\\taddress _positionModule,\\n\\tuint256 _unit\\n    ) internal view returns (bool) {\\n\\treturn\\n\\t_jasperVault.getExternalPositionRealUnit(\\n\\t    _component,\\n\\t    _positionModule\\n\\t) >= _unit.toInt256();\\n    }\\n\\n    /**\\n     * If the position does not exist, create a new Position and add to the JasperVault. If it already exists,\\n     * then set the position units. If the new units is 0, remove the position. Handles adding/removing of\\n     * components where needed (in light of potential external positions).\\n     *\\n     * @param _jasperVault           Address of JasperVault being modified\\n     * @param _component          Address of the component\\n     * @param _newUnit            Quantity of Position units - must be >= 0\\n     */\\n    function editDefaultPosition(\\n\\tIJasperVault _jasperVault,\\n\\taddress _component,\\n\\tuint256 _newUnit\\n    ) internal {\\n\\tbool isPositionFound = hasDefaultPosition(_jasperVault, _component);\\n\\tif (!isPositionFound && _newUnit > 0) {\\n\\t    // If there is no Default Position and no External Modules, then component does not exist\\n\\t    if (!hasExternalPosition(_jasperVault, _component)) {\\n\\t\\t_jasperVault.addComponent(_component);\\n\\t    }\\n\\t} else if (isPositionFound && _newUnit == 0) {\\n\\t    // If there is a Default Position and no external positions, remove the component\\n\\t    if (!hasExternalPosition(_jasperVault, _component)) {\\n\\t\\t_jasperVault.removeComponent(_component);\\n\\t    }\\n\\t}\\n\\t_jasperVault.editDefaultPositionUnit(_component, _newUnit.toInt256());\\n    }\\n\\n    function editCoinType(\\n\\tIJasperVault _jasperVault,\\n\\taddress _component,\\n\\tuint256 coinType\\n    ) internal {\\n\\t_jasperVault.editDefaultPositionCoinType(_component, coinType);\\n    }\\n\\n    function editExternalCoinType(\\n\\tIJasperVault _jasperVault,\\n\\taddress _component,\\n\\taddress _module,\\n\\tuint256 coinType\\n    ) internal {\\n\\t_jasperVault.editExternalPositionCoinType(\\n\\t    _component,\\n\\t    _module,\\n\\t    coinType\\n\\t);\\n    }\\n\\n    /**\\n     * Update an external position and remove and external positions or components if necessary. The logic flows as follows:\\n     * 1) If component is not already added then add component and external position.\\n     * 2) If component is added but no existing external position using the passed module exists then add the external position.\\n     * 3) If the existing position is being added to then just update the unit and data\\n     * 4) If the position is being closed and no other external positions or default positions are associated with the component\\n     *    then untrack the component and remove external position.\\n     * 5) If the position is being closed and other existing positions still exist for the component then just remove the\\n     *    external position.\\n     *\\n     * @param _jasperVault         JasperVault being updated\\n     * @param _component        Component position being updated\\n     * @param _module           Module external position is associated with\\n     * @param _newUnit          Position units of new external position\\n     * @param _data             Arbitrary data associated with the position\\n     */\\n    function editExternalPosition(\\n\\tIJasperVault _jasperVault,\\n\\taddress _component,\\n\\taddress _module,\\n\\tint256 _newUnit,\\n\\tbytes memory _data\\n    ) internal {\\n\\tif (_newUnit != 0) {\\n\\t    if (!_jasperVault.isComponent(_component)) {\\n\\t\\t_jasperVault.addComponent(_component);\\n\\t    }\\n\\t    if (!_jasperVault.isExternalPositionModule(_component, _module)) {\\n\\t\\t_jasperVault.addExternalPositionModule(_component, _module);\\n\\t    }\\n\\t    _jasperVault.editExternalPositionUnit(\\n\\t\\t_component,\\n\\t\\t_module,\\n\\t\\t_newUnit\\n\\t    );\\n\\t    _jasperVault.editExternalPositionData(_component, _module, _data);\\n\\t} else {\\n\\t    require(_data.length == 0, \\\"Passed data must be null\\\");\\n\\t    // If no default or external position remaining then remove component from components array\\n\\t    if (\\n\\t\\t_jasperVault.getExternalPositionRealUnit(_component, _module) !=\\n\\t\\t0\\n\\t    ) {\\n\\t\\taddress[] memory positionModules = _jasperVault\\n\\t\\t.getExternalPositionModules(_component);\\n\\t\\tif (\\n\\t\\t    _jasperVault.getDefaultPositionRealUnit(_component) == 0 &&\\n\\t\\t    positionModules.length == 1\\n\\t\\t) {\\n\\t\\t    require(\\n\\t\\t\\tpositionModules[0] == _module,\\n\\t\\t\\t\\\"External positions must be 0 to remove component\\\"\\n\\t\\t    );\\n\\t\\t    _jasperVault.removeComponent(_component);\\n\\t\\t}\\n\\t\\t_jasperVault.removeExternalPositionModule(_component, _module);\\n\\t    }\\n\\t}\\n    }\\n\\n    /**\\n     * Get total notional amount of Default position\\n     *\\n     * @param _setTokenSupply     Supply of JasperVault in precise units (10^18)\\n     * @param _positionUnit       Quantity of Position units\\n     *\\n     * @return                    Total notional amount of units\\n     */\\n    function getDefaultTotalNotional(\\n\\tuint256 _setTokenSupply,\\n\\tuint256 _positionUnit\\n    ) internal pure returns (uint256) {\\n\\treturn _setTokenSupply.preciseMul(_positionUnit);\\n    }\\n\\n    /**\\n     * Get position unit from total notional amount\\n     *\\n     * @param _setTokenSupply     Supply of JasperVault in precise units (10^18)\\n     * @param _totalNotional      Total notional amount of component prior to\\n     * @return                    Default position unit\\n     */\\n    function getDefaultPositionUnit(\\n\\tuint256 _setTokenSupply,\\n\\tuint256 _totalNotional\\n    ) internal pure returns (uint256) {\\n\\treturn _totalNotional.preciseDiv(_setTokenSupply);\\n    }\\n\\n    /**\\n     * Get the total tracked balance - total supply * position unit\\n     *\\n     * @param _jasperVault           Address of the JasperVault\\n     * @param _component          Address of the component\\n     * @return                    Notional tracked balance\\n     */\\n    function getDefaultTrackedBalance(\\n\\tIJasperVault _jasperVault,\\n\\taddress _component\\n    ) internal view returns (uint256) {\\n\\tint256 positionUnit = _jasperVault.getDefaultPositionRealUnit(\\n\\t    _component\\n\\t);\\n\\treturn _jasperVault.totalSupply().preciseMul(positionUnit.toUint256());\\n    }\\n\\n    /**\\n     * Calculates the new default position unit and performs the edit with the new unit\\n     *\\n     * @param _jasperVault                 Address of the JasperVault\\n     * @param _component                Address of the component\\n     * @param _setTotalSupply           Current JasperVault supply\\n     * @param _componentPreviousBalance Pre-action component balance\\n     * @return                          Current component balance\\n     * @return                          Previous position unit\\n     * @return                          New position unit\\n     */\\n    function calculateAndEditDefaultPosition(\\n\\tIJasperVault _jasperVault,\\n\\taddress _component,\\n\\tuint256 _setTotalSupply,\\n\\tuint256 _componentPreviousBalance\\n    ) internal returns (uint256, uint256, uint256) {\\n\\tuint256 currentBalance = IERC20(_component).balanceOf(\\n\\t    address(_jasperVault)\\n\\t);\\n\\tuint256 positionUnit = _jasperVault\\n\\t.getDefaultPositionRealUnit(_component)\\n\\t.toUint256();\\n\\n\\tuint256 newTokenUnit;\\n\\tif (currentBalance > 0) {\\n\\t    newTokenUnit = calculateDefaultEditPositionUnit(\\n\\t\\t_setTotalSupply,\\n\\t\\t_componentPreviousBalance,\\n\\t\\tcurrentBalance,\\n\\t\\tpositionUnit\\n\\t    );\\n\\t} else {\\n\\t    newTokenUnit = 0;\\n\\t}\\n\\n\\teditDefaultPosition(_jasperVault, _component, newTokenUnit);\\n\\n\\treturn (currentBalance, positionUnit, newTokenUnit);\\n    }\\n\\n    /**\\n     * Calculate the new position unit given total notional values pre and post executing an action that changes JasperVault state\\n     * The intention is to make updates to the units without accidentally picking up airdropped assets as well.\\n     *\\n     * @param _setTokenSupply     Supply of JasperVault in precise units (10^18)\\n     * @param _preTotalNotional   Total notional amount of component prior to executing action\\n     * @param _postTotalNotional  Total notional amount of component after the executing action\\n     * @param _prePositionUnit    Position unit of JasperVault prior to executing action\\n     * @return                    New position unit\\n     */\\n    function calculateDefaultEditPositionUnit(\\n\\tuint256 _setTokenSupply,\\n\\tuint256 _preTotalNotional,\\n\\tuint256 _postTotalNotional,\\n\\tuint256 _prePositionUnit\\n    ) internal pure returns (uint256) {\\n\\t// If pre action total notional amount is greater then subtract post action total notional and calculate new position units\\n\\tuint256 airdroppedAmount = _preTotalNotional.sub(\\n\\t    _prePositionUnit.preciseMul(_setTokenSupply)\\n\\t);\\n\\treturn\\n\\t_postTotalNotional.sub(airdroppedAmount).preciseDiv(\\n\\t    _setTokenSupply\\n\\t);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/lib/ResourceIdentifier.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport { IController } from \\\"../../interfaces/IController.sol\\\";\\nimport { IIntegrationRegistry } from \\\"../../interfaces/IIntegrationRegistry.sol\\\";\\nimport { IPriceOracle } from \\\"../../interfaces/IPriceOracle.sol\\\";\\nimport { ISetValuer } from \\\"../../interfaces/ISetValuer.sol\\\";\\n\\n/**\\n * @title ResourceIdentifier\\n * @author Set Protocol\\n *\\n * A collection of utility functions to fetch information related to Resource contracts in the system\\n */\\nlibrary ResourceIdentifier {\\n\\n    // IntegrationRegistry will always be resource ID 0 in the system\\n    uint256 constant internal INTEGRATION_REGISTRY_RESOURCE_ID = 0;\\n    // PriceOracle will always be resource ID 1 in the system\\n    uint256 constant internal PRICE_ORACLE_RESOURCE_ID = 1;\\n    // SetValuer resource will always be resource ID 2 in the system\\n    uint256 constant internal SET_VALUER_RESOURCE_ID = 2;\\n    /* ============ Internal ============ */\\n\\n    /**\\n     * Gets the instance of integration registry stored on Controller. Note: IntegrationRegistry is stored as index 0 on\\n     * the Controller\\n     */\\n    function getIntegrationRegistry(IController _controller) internal view returns (IIntegrationRegistry) {\\n        return IIntegrationRegistry(_controller.resourceId(INTEGRATION_REGISTRY_RESOURCE_ID));\\n    }\\n\\n    /**\\n     * Gets instance of price oracle on Controller. Note: PriceOracle is stored as index 1 on the Controller\\n     */\\n    function getPriceOracle(IController _controller) internal view returns (IPriceOracle) {\\n        return IPriceOracle(_controller.resourceId(PRICE_ORACLE_RESOURCE_ID));\\n    }\\n\\n    /**\\n     * Gets the instance of Set valuer on Controller. Note: SetValuer is stored as index 2 on the Controller\\n     */\\n    function getSetValuer(IController _controller) internal view returns (ISetValuer) {\\n        return ISetValuer(_controller.resourceId(SET_VALUER_RESOURCE_ID));\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/modules/v1/GMXModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport {IController} from \\\"../../../interfaces/IController.sol\\\";\\nimport {IIntegrationRegistry} from \\\"../../../interfaces/IIntegrationRegistry.sol\\\";\\nimport {Invoke} from \\\"../../lib/Invoke.sol\\\";\\nimport {IJasperVault} from \\\"../../../interfaces/IJasperVault.sol\\\";\\nimport {IDelegatedManager} from \\\"../../../interfaces/IDelegatedManager.sol\\\";\\nimport {IGMXAdapter} from \\\"../../../interfaces/external/gmx/IGMXAdapter.sol\\\";\\nimport {IPositionRouterCallbackReceiver} from \\\"../../../interfaces/external/gmx/IGMXCallBack.sol\\\";\\nimport {IGMXReader} from \\\"../../../interfaces/external/gmx/third_part/IGMXReader.sol\\\";\\nimport {ModuleBase} from \\\"../../lib/ModuleBase.sol\\\";\\nimport {Position} from \\\"../../lib/Position.sol\\\";\\nimport {PreciseUnitMath} from \\\"../../../lib/PreciseUnitMath.sol\\\";\\nimport {IGMXModule} from \\\"../../../interfaces/external/gmx/IGMXModule.sol\\\";\\nimport {IWETH} from \\\"../../../interfaces/external/IWETH.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IERC20MetaData {\\n    function decimals() external view returns (uint256);\\n\\n    function stakedAmounts(address accmount) external view returns (uint256);\\n}\\n\\ncontract GMXModule is\\n    ModuleBase,\\n    ReentrancyGuard,\\n    IPositionRouterCallbackReceiver,\\n    IGMXModule,\\n    Ownable\\n{\\n    using SafeCast for int256;\\n    using PreciseUnitMath for uint256;\\n    using PreciseUnitMath for int256;\\n\\n    using Position for uint256;\\n    using SafeMath for uint256;\\n\\n    using Invoke for IJasperVault;\\n    using Position for IJasperVault.Position;\\n    using Position for IJasperVault;\\n\\n    /* ============ Events ============ */\\n\\n    event InCreasingPosition(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.IncreasePositionRequest,\\n        bytes key\\n    );\\n    event DeCreasingPosition(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.DecreasePositionRequest\\n    );\\n    event Swap(IJasperVault _jasperVault, IGMXAdapter.SwapData);\\n    event CreatOrder(IJasperVault _jasperVault, IGMXAdapter.CreateOrderData);\\n    event StakeGMX(IJasperVault _jasperVault, IGMXAdapter.StakeGMXData);\\n    event StakeGLP(IJasperVault _jasperVault, IGMXAdapter.StakeGLPData);\\n    event HandleRewards(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.HandleRewardData\\n    );\\n    event UpdatePosition(\\n        IJasperVault _jasperVault,\\n        address _token,\\n        uint256 coinType,\\n        uint256 tokanBalance\\n    );\\n\\n    event GMXPositionCallback(\\n        bytes32 positionKey,\\n        bool isExecuted,\\n        bool isIncrease,\\n        PositionData PositionModuleData,\\n        IJasperVault.Position[] oldPosition,\\n        IJasperVault.Position[] newPosition\\n    );\\n\\n    /* ============ State Variables ============ */\\n    function weth() external view override returns (IWETH) {\\n        return IWETH(address(0));\\n    }\\n\\n    uint256 public immutable coinTypeIndexToken = 11;\\n    uint256 public immutable coinTypeStakeGMX = 12;\\n    uint256 public gmxPositionDecimals = 30;\\n\\n    struct PositionData {\\n        address _jasperVault;\\n        address _collateralToken;\\n        address _indexToken;\\n    }\\n\\n    mapping(bytes => PositionData) requestKey2Position;\\n    address public usdcAddr;\\n    address public gmxReader;\\n    address public gmxVault;\\n    address public sbfGMXToken;\\n    address public sGLP;\\n    address public glpManager;\\n\\n    /* ============ Constructor ============ */\\n\\n    /*\\n  @param _controller               Address of controller contract\\n   */\\n    constructor(\\n        IController _controller,\\n        address _usdcAddr,\\n        address _gmxReader,\\n        address _gmxVault,\\n        address _sbfGMXToken,\\n        address _sGLP,\\n        address _GlpRewardRouter\\n    ) public ModuleBase(_controller) {\\n        usdcAddr = _usdcAddr;\\n        gmxReader = _gmxReader;\\n        gmxVault = _gmxVault;\\n        sbfGMXToken = _sbfGMXToken;\\n        sGLP = _sGLP;\\n        glpManager = _GlpRewardRouter;\\n    }\\n\\n    function manageAddress(\\n        IController _controller,\\n        address _usdcAddr,\\n        address _gmxReader,\\n        address _gmxVault,\\n        address _sbfGMXToken,\\n        address _sGLP,\\n        address _GlpRewardRouter\\n    ) public onlyOwner {\\n        usdcAddr = _usdcAddr;\\n        gmxReader = _gmxReader;\\n        gmxVault = _gmxVault;\\n        sbfGMXToken = _sbfGMXToken;\\n        sGLP = _sGLP;\\n        glpManager = _GlpRewardRouter;\\n    }\\n\\n    /**\\n     * Initializes this module to the JasperVault. Only callable by the JasperVault's manager.\\n     *\\n     * @param _jasperVault             Instance of the JasperVault to issue\\n     */\\n    function initialize(\\n        IJasperVault _jasperVault\\n    ) external override onlySetManager(_jasperVault, msg.sender) {\\n        require(\\n            controller.isSet(address(_jasperVault)),\\n            \\\"Must be controller-enabled JasperVault\\\"\\n        );\\n        require(\\n            isSetPendingInitialization(_jasperVault),\\n            \\\"Must be pending initialization\\\"\\n        );\\n        _jasperVault.initializeModule();\\n    }\\n\\n    /**\\n     * Removes this module from the JasperVault, via call by the JasperVault.\\n     */\\n    function removeModule() external override {}\\n\\n    function gmxPositionCallback(\\n        bytes32 positionKey,\\n        bool isExecuted,\\n        bool isIncrease\\n    ) external override {\\n        PositionData memory _positionDict = requestKey2Position[\\n            abi.encodePacked(positionKey)\\n        ];\\n        bytes memory _data;\\n        IJasperVault _jasperVault = IJasperVault(_positionDict._jasperVault);\\n        IJasperVault.Position[] memory oldPosition = _jasperVault\\n            .getPositions();\\n\\n        _updatePosition(_jasperVault, _positionDict._collateralToken, 0);\\n        _updatePosition(\\n            _jasperVault,\\n            _positionDict._indexToken,\\n            coinTypeIndexToken\\n        );\\n\\n        IJasperVault.Position[] memory newPosition = _jasperVault\\n            .getPositions();\\n        emit GMXPositionCallback(\\n            positionKey,\\n            isExecuted,\\n            isIncrease,\\n            _positionDict,\\n            oldPosition,\\n            newPosition\\n        );\\n    }\\n\\n    function increasingPosition(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.IncreasePositionRequest memory request\\n    ) external override nonReentrant onlyManagerAndValidSet(_jasperVault) {\\n        _validateAndIncreasingPosition(\\n            _jasperVault,\\n            request._integrationName,\\n            request\\n        );\\n    }\\n\\n    function _validateAndIncreasingPosition(\\n        IJasperVault _jasperVault,\\n        string memory _integrationName,\\n        IGMXAdapter.IncreasePositionRequest memory request\\n    ) internal {\\n        // Snapshot pre OpenPosition balances\\n        if (request._amountInUnits < 0) {\\n            request._amountIn = _getBalance(_jasperVault, request._path[0]);\\n        } else {\\n            request._amountIn = _jasperVault\\n                .totalSupply()\\n                .getDefaultTotalNotional(request._amountInUnits.abs());\\n        }\\n        request._minOut = _jasperVault.totalSupply().getDefaultTotalNotional(\\n            request._minOutUnits\\n        );\\n\\n        request._sizeDelta = _jasperVault.totalSupply().getDefaultTotalNotional(\\n            request._sizeDeltaUnits\\n        );\\n\\n        IGMXAdapter gmxAdapter = IGMXAdapter(\\n            getAndValidateAdapter(_integrationName)\\n        );\\n        _jasperVault.invokeApprove(\\n            request._path[0],\\n            gmxAdapter.GMXRouter(),\\n            request._amountIn\\n        );\\n        // Get function call key and invoke on JasperVault\\n        bytes memory key = _createIncreasingPositionCallDataAndInvoke(\\n            _jasperVault,\\n            gmxAdapter,\\n            request\\n        );\\n        requestKey2Position[key]._jasperVault = address(_jasperVault);\\n        requestKey2Position[key]._collateralToken = request._path[0];\\n        requestKey2Position[key]._indexToken = request._indexToken;\\n\\n        _updatePosition(_jasperVault, request._path[0], 0);\\n        _updatePosition(_jasperVault, request._indexToken, coinTypeIndexToken);\\n        emit InCreasingPosition(_jasperVault, request, key);\\n\\n        return;\\n    }\\n\\n    /**\\n     * Create the memory for _positionData and then invoke the call on the JasperVault.\\n     */\\n    function _createIncreasingPositionCallDataAndInvoke(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter _gmxAdapter,\\n        IGMXAdapter.IncreasePositionRequest memory request\\n    ) internal returns (bytes memory) {\\n        (\\n            address callTarget,\\n            uint256 callValue,\\n            bytes memory callByteData\\n        ) = _gmxAdapter.getInCreasingPositionCallData(request);\\n\\n        return _jasperVault.invoke(callTarget, callValue, callByteData);\\n    }\\n\\n    function decreasingPosition(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.DecreasePositionRequest memory request\\n    ) external override nonReentrant onlyManagerAndValidSet(_jasperVault) {\\n        _validateAndDecreasingPosition(\\n            _jasperVault,\\n            request._integrationName,\\n            request\\n        );\\n    }\\n\\n    /**\\n     * The module calculates the total notional Decreasing token to GMX, then invokes the JasperVault to call\\n     * decreasing position by passing its memory along.\\n     *\\n     * Returns notional amount of underlying tokens  _decreasingPosition and tokens postActionPosition.\\n     */\\n    function _validateAndDecreasingPosition(\\n        IJasperVault _jasperVault,\\n        string memory _integrationName,\\n        IGMXAdapter.DecreasePositionRequest memory request\\n    ) internal {\\n        request._collateralDelta = _jasperVault\\n            .totalSupply()\\n            .getDefaultTotalNotional(request._collateralUnits.abs());\\n\\n        request._sizeDelta = _jasperVault.totalSupply().getDefaultTotalNotional(\\n            request._sizeDeltaUnits.abs()\\n        );\\n        request._minOut = _jasperVault.totalSupply().getDefaultTotalNotional(\\n            request._minOutUnits\\n        );\\n\\n        IGMXAdapter gmxAdapter = IGMXAdapter(\\n            getAndValidateAdapter(_integrationName)\\n        );\\n        // Get function call data and invoke on JasperVault\\n        _createDecreasingPositionDataAndInvoke(\\n            _jasperVault,\\n            gmxAdapter,\\n            request\\n        );\\n        //_collateralTokens\\n        _updatePosition(\\n            _jasperVault,\\n            request._path[request._path.length - 1],\\n            0\\n        );\\n        _updatePosition(_jasperVault, request._indexToken, coinTypeIndexToken);\\n        emit DeCreasingPosition(_jasperVault, request);\\n        return;\\n    }\\n\\n    /**\\n     * Create the memory for gmx decreasing position and then invoke the call on the JasperVault.\\n     */\\n    function _createDecreasingPositionDataAndInvoke(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter _gmxAdapter,\\n        IGMXAdapter.DecreasePositionRequest memory request\\n    ) internal {\\n        (\\n            address callTarget,\\n            uint256 callValue,\\n            bytes memory callByteData\\n        ) = _gmxAdapter.getDeCreasingPositionCallData(request);\\n\\n        _jasperVault.invoke(callTarget, callValue, callByteData);\\n    }\\n\\n    /**\\n     * Take snapshot of JasperVault's balance of  tokens.\\n     */\\n    function _getBalance(\\n        IJasperVault _jasperVault,\\n        address _collateralToken\\n    ) internal view returns (uint256) {\\n        return IERC20(_collateralToken).balanceOf(address(_jasperVault));\\n    }\\n\\n    function toBytes(bytes32 _data) public pure returns (bytes memory) {\\n        return abi.encodePacked(_data);\\n    }\\n\\n    /**\\n     *\\n     * @param _jasperVault             Instance of the JasperVault\\n     */\\n    function swap(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.SwapData memory data\\n    ) external override nonReentrant onlyManagerAndValidSet(_jasperVault) {\\n        (\\n            uint256 preActionUnderlyingNotional,\\n            uint256 postActionPosition\\n        ) = _validateAndSwap(_jasperVault, data._integrationName, data);\\n        emit Swap(_jasperVault, data);\\n    }\\n\\n    /**\\n     * The GMXModule calculates the total notional underlying to Open Increasing Position, approves the underlying to the 3rd party\\n     * integration contract, then invokes the JasperVault to call Increasing Position by passing its memory along.\\n     * Returns notional amount of underlying tokens and positionToken.\\n     */\\n    function _validateAndSwap(\\n        IJasperVault _jasperVault,\\n        string memory _integrationName,\\n        IGMXAdapter.SwapData memory data\\n    ) internal returns (uint256, uint256) {\\n        // Snapshot pre OpenPosition balances\\n        uint256 preActionUnderlyingNotional = _getBalance(\\n            _jasperVault,\\n            data._path[0]\\n        );\\n\\n        if (data._amountInUnits < 0) {\\n            data._amountIn = preActionUnderlyingNotional;\\n        } else {\\n            data._amountIn = _jasperVault.totalSupply().getDefaultTotalNotional(\\n                data._amountInUnits.abs()\\n            );\\n        }\\n        data._minOut = _jasperVault.totalSupply().getDefaultTotalNotional(\\n            data._minOutUnits\\n        );\\n        IGMXAdapter gmxAdapter = IGMXAdapter(\\n            getAndValidateAdapter(_integrationName)\\n        );\\n        _jasperVault.invokeApprove(\\n            data._path[0],\\n            gmxAdapter.GMXRouter(),\\n            data._amountIn\\n        );\\n        // Get function call data and invoke on JasperVault\\n        _createSwapCallDataAndInvoke(_jasperVault, gmxAdapter, data);\\n\\n        uint256 postActionPosition = _getBalance(_jasperVault, data._path[0]);\\n        _updatePosition(_jasperVault, data._path[0], 0);\\n        _updatePosition(_jasperVault, data._path[data._path.length - 1], 0);\\n        return (preActionUnderlyingNotional, postActionPosition);\\n    }\\n\\n    /**\\n     * Create the memory for _positionData and then invoke the call on the JasperVault.\\n     */\\n    function _createSwapCallDataAndInvoke(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter _gmxAdapter,\\n        IGMXAdapter.SwapData memory data\\n    ) internal returns (bytes memory) {\\n        (\\n            address callTarget,\\n            uint256 callValue,\\n            bytes memory callByteData\\n        ) = _gmxAdapter.getSwapCallData(data);\\n        return _jasperVault.invoke(callTarget, callValue, callByteData);\\n    }\\n\\n    function creatOrder(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.CreateOrderData memory data\\n    ) external override nonReentrant onlyManagerAndValidSet(_jasperVault) {\\n        _validateAndCreateOrder(\\n            _jasperVault,\\n            data._integrationName,\\n            data._isLong,\\n            data._positionData\\n        );\\n        emit CreatOrder(_jasperVault, data);\\n    }\\n\\n    function _validateAndCreateOrder(\\n        IJasperVault _jasperVault,\\n        string memory _integrationName,\\n        bool _isLong,\\n        bytes memory _positionData\\n    ) internal {\\n        IGMXAdapter gmxAdapter = IGMXAdapter(\\n            getAndValidateAdapter(_integrationName)\\n        );\\n\\n        if (_isLong) {\\n            IGMXAdapter.IncreaseOrderData memory data = abi.decode(\\n                _positionData,\\n                (IGMXAdapter.IncreaseOrderData)\\n            );\\n            // Snapshot pre OpenPosition balances\\n            uint256 preActionUnderlyingNotional = _getBalance(\\n                _jasperVault,\\n                data._path[0]\\n            );\\n            if (data._amountInUnits < 0) {\\n                data._amountIn = preActionUnderlyingNotional;\\n            } else {\\n                data._amountIn = _jasperVault\\n                    .totalSupply()\\n                    .getDefaultTotalNotional(data._amountInUnits.abs());\\n            }\\n            _jasperVault.invokeApprove(\\n                data._path[0],\\n                gmxAdapter.GMXRouter(),\\n                data._amountIn\\n            );\\n\\n            data._minOut = _jasperVault.totalSupply().getDefaultTotalNotional(\\n                data._minOutUnits\\n            );\\n            data._sizeDelta = _jasperVault\\n                .totalSupply()\\n                .getDefaultTotalNotional(data._sizeDeltaUnits);\\n            // Get function call data and invoke on JasperVault\\n            _createIncreaseOrderCallDataAndInvoke(\\n                _jasperVault,\\n                gmxAdapter,\\n                data\\n            );\\n            _updatePosition(_jasperVault, data._path[0], 0);\\n            _updatePosition(_jasperVault, data._indexToken, coinTypeIndexToken);\\n        } else {\\n            IGMXAdapter.DecreaseOrderData memory data = abi.decode(\\n                _positionData,\\n                (IGMXAdapter.DecreaseOrderData)\\n            );\\n            data._sizeDelta = _jasperVault\\n                .totalSupply()\\n                .getDefaultTotalNotional(data._sizeDeltaUnits);\\n            data._collateralDelta = _jasperVault\\n                .totalSupply()\\n                .getDefaultTotalNotional(data._collateralDeltaUnits);\\n            // Get function call data and invoke on JasperVault\\n            _createDecreaseOrderCallDataAndInvoke(\\n                _jasperVault,\\n                gmxAdapter,\\n                data\\n            );\\n            _updatePosition(_jasperVault, data._indexToken, 0);\\n            _updatePosition(\\n                _jasperVault,\\n                data._collateralToken,\\n                coinTypeIndexToken\\n            );\\n        }\\n        return;\\n    }\\n\\n    /**\\n     * Create the memory for _positionData and then invoke the call on the JasperVault.\\n     */\\n    function _createIncreaseOrderCallDataAndInvoke(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter _gmxAdapter,\\n        IGMXAdapter.IncreaseOrderData memory _data\\n    ) internal returns (bytes memory) {\\n        (\\n            address callTarget,\\n            uint256 callValue,\\n            bytes memory callByteData\\n        ) = _gmxAdapter.getCreateIncreaseOrderCallData(_data);\\n        return _jasperVault.invoke(callTarget, callValue, callByteData);\\n    }\\n\\n    /**\\n     * Create the memory for _positionData and then invoke the call on the JasperVault.\\n     */\\n    function _createDecreaseOrderCallDataAndInvoke(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter _gmxAdapter,\\n        IGMXAdapter.DecreaseOrderData memory _data\\n    ) internal returns (bytes memory) {\\n        (\\n            address callTarget,\\n            uint256 callValue,\\n            bytes memory callByteData\\n        ) = _gmxAdapter.getCreateDecreaseOrderCallData(_data);\\n        return _jasperVault.invoke(callTarget, callValue, callByteData);\\n    }\\n\\n    function getGMXPositionTotalUnit(\\n        IJasperVault _jasperVault,\\n        address _indexToken\\n    ) public returns (int256) {\\n        address[] memory _collateralTokens = new address[](1);\\n        _collateralTokens[0] = usdcAddr;\\n        address[] memory _indexTokens = new address[](1);\\n        _indexTokens[0] = _indexToken;\\n        bool[] memory _isLong = new bool[](1);\\n        uint256[] memory _IncreasingGMXPosition = IGMXReader(gmxReader)\\n            .getPositions(\\n                gmxVault,\\n                address(_jasperVault),\\n                _collateralTokens,\\n                _indexTokens,\\n                _isLong\\n            );\\n        _isLong[0] = true;\\n        uint256[] memory _DecreasingGMXPosition = IGMXReader(gmxReader)\\n            .getPositions(\\n                gmxVault,\\n                address(_jasperVault),\\n                _collateralTokens,\\n                _indexTokens,\\n                _isLong\\n            );\\n        return\\n            int256(_IncreasingGMXPosition[0]) -\\n            int256(_DecreasingGMXPosition[0]);\\n    }\\n\\n    function _createStakeGMXCallDataAndInvoke(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter _gmxAdapter,\\n        address _collateralToken,\\n        uint256 _stakeAmount,\\n        bool _isStake,\\n        bytes memory _data\\n    ) internal returns (bytes memory) {\\n        (\\n            address callTarget,\\n            uint256 callValue,\\n            bytes memory callByteData\\n        ) = _gmxAdapter.getStakeGMXCallData(\\n                address(_jasperVault),\\n                _stakeAmount,\\n                _isStake,\\n                _data\\n            );\\n\\n        return _jasperVault.invoke(callTarget, callValue, callByteData);\\n    }\\n\\n    function stakeGMX(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.StakeGMXData memory data\\n    ) external override nonReentrant onlyManagerAndValidSet(_jasperVault) {\\n        // Snapshot pre OpenPosition balances\\n        uint256 preActionUnderlyingNotional = _getBalance(\\n            _jasperVault,\\n            data._collateralToken\\n        );\\n\\n        uint256 notionalUnderlying;\\n\\n        if (data._underlyingUnits < 0) {\\n            notionalUnderlying = preActionUnderlyingNotional;\\n        } else {\\n            notionalUnderlying = _jasperVault\\n                .totalSupply()\\n                .getDefaultTotalNotional(data._underlyingUnits.abs());\\n        }\\n        if (data._isStake) {\\n            _jasperVault.invokeApprove(\\n                data._collateralToken,\\n                sbfGMXToken,\\n                notionalUnderlying\\n            );\\n        }\\n        IGMXAdapter gmxAdapter = IGMXAdapter(\\n            getAndValidateAdapter(data._integrationName)\\n        );\\n        // Get function call data and invoke on JasperVault\\n        _createStakeGMXCallDataAndInvoke(\\n            _jasperVault,\\n            gmxAdapter,\\n            data._collateralToken,\\n            notionalUnderlying,\\n            data._isStake,\\n            data._positionData\\n        );\\n\\n        _updatePosition(_jasperVault, data._collateralToken, 0);\\n        _updatePosition(_jasperVault, data._collateralToken, coinTypeStakeGMX);\\n        emit StakeGMX(_jasperVault, data);\\n    }\\n\\n    function _createStakeGLPCallDataAndInvoke(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter _gmxAdapter,\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minUsdg,\\n        uint256 _minGlp,\\n        bool _isStake,\\n        bytes memory _data\\n    ) internal returns (bytes memory) {\\n        (\\n            address callTarget,\\n            uint256 callValue,\\n            bytes memory callByteData\\n        ) = _gmxAdapter.getStakeGLPCallData(\\n                address(_jasperVault),\\n                _token,\\n                _amount,\\n                _minUsdg,\\n                _minGlp,\\n                _isStake,\\n                _data\\n            );\\n\\n        return _jasperVault.invoke(callTarget, callValue, callByteData);\\n    }\\n\\n    function stakeGLP(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.StakeGLPData memory data\\n    ) external override nonReentrant onlyManagerAndValidSet(_jasperVault) {\\n        uint256 _tokeAmount;\\n        if (data._amountUnits < 0) {\\n            if (data._isStake) {\\n                _tokeAmount = _getBalance(_jasperVault, data._token);\\n            } else {\\n                _tokeAmount = _getBalance(_jasperVault, sGLP);\\n            }\\n        } else {\\n            _tokeAmount = _jasperVault.totalSupply().getDefaultTotalNotional(\\n                data._amountUnits.abs()\\n            );\\n        }\\n        data._minUsdg = _jasperVault.totalSupply().getDefaultTotalNotional(\\n            data._minUsdgUnits\\n        );\\n        data._minGlp = _jasperVault.totalSupply().getDefaultTotalNotional(\\n            data._minGlpUnits\\n        );\\n        if (data._isStake) {\\n            _jasperVault.invokeApprove(data._token, glpManager, _tokeAmount);\\n        }\\n        IGMXAdapter gmxAdapter = IGMXAdapter(\\n            getAndValidateAdapter(data._integrationName)\\n        );\\n        // Get function call data and invoke on JasperVault\\n        _createStakeGLPCallDataAndInvoke(\\n            _jasperVault,\\n            gmxAdapter,\\n            data._token,\\n            _tokeAmount,\\n            data._minUsdg,\\n            data._minGlp,\\n            data._isStake,\\n            data._data\\n        );\\n\\n        _updatePosition(_jasperVault, data._token, 0);\\n        _updatePosition(_jasperVault, sGLP, 0);\\n        emit StakeGLP(_jasperVault, data);\\n    }\\n\\n    function handleRewards(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter.HandleRewardData memory data\\n    ) external override nonReentrant onlyManagerAndValidSet(_jasperVault) {\\n        IGMXAdapter gmxAdapter = IGMXAdapter(\\n            getAndValidateAdapter(data._integrationName)\\n        );\\n        // Get function call data and invoke on JasperVault\\n        _createHandleRewardsCallDataAndInvoke(_jasperVault, gmxAdapter, data);\\n        emit HandleRewards(_jasperVault, data);\\n    }\\n\\n    function _createHandleRewardsCallDataAndInvoke(\\n        IJasperVault _jasperVault,\\n        IGMXAdapter _gmxAdapter,\\n        IGMXAdapter.HandleRewardData memory data\\n    ) internal {\\n        (\\n            address callTarget,\\n            uint256 callValue,\\n            bytes memory callByteData\\n        ) = _gmxAdapter.getHandleRewardsCallData(data);\\n\\n        _jasperVault.invoke(callTarget, callValue, callByteData);\\n    }\\n\\n    function _updatePositionModuleAndCoinType(\\n        IJasperVault _jasperVault,\\n        address _token,\\n        address module,\\n        uint256 coinType\\n    ) internal {\\n        if (!_jasperVault.isExternalPositionModule(_token, address(this))) {\\n            _jasperVault.addExternalPositionModule(_token, address(this));\\n        }\\n        _jasperVault.editExternalPositionCoinType(\\n            _token,\\n            address(this),\\n            coinType\\n        );\\n    }\\n\\n    function _updatePositionByBalance(\\n        IJasperVault _jasperVault,\\n        string memory _integrationName,\\n        address _token\\n    ) public {\\n        require(\\n            IDelegatedManager(_jasperVault.manager()).owner() == msg.sender,\\n            \\\"only _jasperVault Owner\\\"\\n        );\\n        IGMXAdapter gmxAdapter = IGMXAdapter(\\n            getAndValidateAdapter(_integrationName)\\n        );\\n        uint256 tokenBalance = gmxAdapter.getTokenBalance(\\n            _token,\\n            address(_jasperVault)\\n        );\\n        _jasperVault.editDefaultPosition(\\n            _token,\\n            tokenBalance.mul(1 ether).div(_jasperVault.totalSupply())\\n        );\\n    }\\n\\n    /**\\n     * edit position with new token\\n     */\\n    function _updatePosition(\\n        IJasperVault _jasperVault,\\n        address _token,\\n        uint256 coinType\\n    ) public {\\n        bytes memory _data;\\n        if (coinType == coinTypeIndexToken) {\\n            int256 tokenUint = getGMXPositionTotalUnit(_jasperVault, _token);\\n            int256 tokenBalance = (tokenUint *\\n                int256(10 ** IERC20MetaData(_token).decimals())) /\\n                int256(10 ** gmxPositionDecimals);\\n            emit UpdatePosition(\\n                _jasperVault,\\n                _token,\\n                coinType,\\n                uint256(tokenBalance)\\n            );\\n            int256 newTokenUnit = (tokenBalance * int256(1 ether)) /\\n                int256(_jasperVault.totalSupply());\\n            _jasperVault.editExternalPosition(\\n                _token,\\n                address(this),\\n                newTokenUnit,\\n                _data\\n            );\\n            _updatePositionModuleAndCoinType(\\n                _jasperVault,\\n                _token,\\n                address(this),\\n                coinType\\n            );\\n        } else if (coinType == coinTypeStakeGMX) {\\n            int256 tokenBalance = int256(\\n                IERC20MetaData(sbfGMXToken).stakedAmounts(address(_jasperVault))\\n            );\\n            int256 newTokenUnit = (tokenBalance * int256(1 ether)) /\\n                int256(_jasperVault.totalSupply());\\n            _jasperVault.editExternalPosition(\\n                _token,\\n                address(this),\\n                newTokenUnit,\\n                _data\\n            );\\n            _updatePositionModuleAndCoinType(\\n                _jasperVault,\\n                _token,\\n                address(this),\\n                coinType\\n            );\\n        } else {\\n            uint256 tokenBalance = IERC20(_token).balanceOf(\\n                address(_jasperVault)\\n            );\\n            emit UpdatePosition(_jasperVault, _token, coinType, tokenBalance);\\n            uint256 newTokenUnit = tokenBalance.mul(1 ether).div(\\n                _jasperVault.totalSupply()\\n            );\\n            _jasperVault.editDefaultPosition(_token, newTokenUnit);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/modules/v1/rebalance/GMXReBalance.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.10;\\npragma experimental \\\"ABIEncoderV2\\\";\\nimport {IGMXAdapter} from \\\"../../../../interfaces/external/gmx/IGMXAdapter.sol\\\";\\nimport {IGMXReBalance} from \\\"../../../../interfaces/external/gmx/IGMXReBalance.sol\\\";\\nimport {IController} from \\\"../../../../interfaces/IController.sol\\\";\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {ModuleBase} from \\\"../../../lib/ModuleBase.sol\\\";\\nimport {IJasperVault} from \\\"../../../../interfaces/IJasperVault.sol\\\";\\n\\ncontract GMXReBalance is ModuleBase, ReentrancyGuard, IGMXReBalance {\\n    constructor(IController _controller) public ModuleBase(_controller) {}\\n\\n    function _rebalanceGMX(\\n        IJasperVault jasperVault,\\n        GMXInfo memory gmxInfos\\n    ) external override nonReentrant onlyManagerAndValidSet(jasperVault) {\\n        IGMXAdapter gmxAdapter = IGMXAdapter(\\n            getAndValidateAdapter(gmxInfos._integrationName)\\n        );\\n        address _callContract;\\n        uint256 _callValue;\\n        bytes memory _callByteData;\\n        if (!gmxAdapter.IsApprovedPlugins(address(jasperVault))) {\\n            (_callContract, _callValue, _callByteData) = gmxAdapter\\n                .approvePositionRouter();\\n            jasperVault.invoke(_callContract, _callValue, _callByteData);\\n        }\\n        for (uint256 i = 0; i < gmxInfos.increasePositionRequests.length; i++) {\\n            IGMXAdapter.SwapData memory request = gmxInfos.swapDatas[i];\\n            jasperVault.invokeApprove(\\n                request._path[0],\\n                gmxAdapter.GMXRouter(),\\n                request._amountIn\\n            );\\n            (_callContract, _callValue, _callByteData) = gmxAdapter\\n                .getSwapCallData(request);\\n            jasperVault.invoke(_callContract, _callValue, _callByteData);\\n        }\\n        for (uint256 i = 0; i < gmxInfos.increasePositionRequests.length; i++) {\\n            IGMXAdapter.IncreasePositionRequest memory request = gmxInfos\\n                .increasePositionRequests[i];\\n            jasperVault.invokeApprove(\\n                request._path[0],\\n                gmxAdapter.GMXRouter(),\\n                request._amountIn\\n            );\\n            (_callContract, _callValue, _callByteData) = gmxAdapter\\n                .getInCreasingPositionCallData(request);\\n            jasperVault.invoke(_callContract, _callValue, _callByteData);\\n        }\\n        for (uint256 i = 0; i < gmxInfos.decreasePositionRequest.length; i++) {\\n            IGMXAdapter.DecreasePositionRequest memory request = gmxInfos\\n                .decreasePositionRequest[i];\\n            (_callContract, _callValue, _callByteData) = gmxAdapter\\n                .getDeCreasingPositionCallData(request);\\n            jasperVault.invoke(_callContract, _callValue, _callByteData);\\n        }\\n        for (uint256 i = 0; i < gmxInfos.increaseOrderDatas.length; i++) {\\n            IGMXAdapter.IncreaseOrderData memory request = gmxInfos\\n                .increaseOrderDatas[i];\\n            jasperVault.invokeApprove(\\n                request._path[0],\\n                gmxAdapter.GMXRouter(),\\n                request._amountIn\\n            );\\n            (_callContract, _callValue, _callByteData) = gmxAdapter\\n                .getCreateIncreaseOrderCallData(request);\\n            jasperVault.invoke(_callContract, _callValue, _callByteData);\\n        }\\n        for (uint256 i = 0; i < gmxInfos.decreaseOrderDatas.length; i++) {\\n            IGMXAdapter.DecreaseOrderData memory request = gmxInfos\\n                .decreaseOrderDatas[i];\\n            (_callContract, _callValue, _callByteData) = gmxAdapter\\n                .getCreateDecreaseOrderCallData(request);\\n            jasperVault.invoke(_callContract, _callValue, _callByteData);\\n        }\\n        for (uint256 i = 0; i < gmxInfos.stakeGMXDatas.length; i++) {\\n            IGMXAdapter.StakeGMXData memory request = gmxInfos.stakeGMXDatas[i];\\n\\n            if (request._isStake) {\\n                jasperVault.invokeApprove(\\n                    request._collateralToken,\\n                    gmxAdapter.StakedGmx(),\\n                    request._amount\\n                );\\n            }\\n            (_callContract, _callValue, _callByteData) = gmxAdapter\\n                .getStakeGMXCallData(\\n                    address(jasperVault),\\n                    request._amount,\\n                    request._isStake,\\n                    request._positionData\\n                );\\n            jasperVault.invoke(_callContract, _callValue, _callByteData);\\n        }\\n        for (uint256 i = 0; i < gmxInfos.stakeGLPDatas.length; i++) {\\n            IGMXAdapter.StakeGLPData memory request = gmxInfos.stakeGLPDatas[i];\\n\\n            if (request._isStake) {\\n                jasperVault.invokeApprove(\\n                    request._token,\\n                    gmxAdapter.GlpRewardRouter(),\\n                    request._amount\\n                );\\n            }\\n            (_callContract, _callValue, _callByteData) = gmxAdapter\\n                .getStakeGLPCallData(\\n                    address(jasperVault),\\n                    request._token,\\n                    request._amount,\\n                    request._minUsdg,\\n                    request._minGlp,\\n                    request._isStake,\\n                    request._data\\n                );\\n            jasperVault.invoke(_callContract, _callValue, _callByteData);\\n        }\\n    }\\n\\n    function removeModule() external override {}\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/modules/v1/SignalSuscriptionModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity ^0.6.10;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\n\\nimport {IController} from \\\"../../../interfaces/IController.sol\\\";\\nimport {Invoke} from \\\"../../lib/Invoke.sol\\\";\\nimport {IJasperVault} from \\\"../../../interfaces/IJasperVault.sol\\\";\\nimport {ModuleBase} from \\\"../../lib/ModuleBase.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {PreciseUnitMath} from \\\"../../../lib/PreciseUnitMath.sol\\\";\\nimport {AddressArrayUtils} from \\\"../../../lib/AddressArrayUtils.sol\\\";\\nimport {IERC20} from \\\"../../../interfaces/IERC20.sol\\\";\\nimport {ISubscribeFeePool} from \\\"../../../interfaces/ISubscribeFeePool.sol\\\";\\nimport { IPriceOracle } from \\\"../../../interfaces/IPriceOracle.sol\\\";\\n/**\\n * @title TradeModule\\n * @author Set Protocol\\n *\\n * Module that enables SetTokens to perform atomic trades using Decentralized Exchanges\\n * such as 1inch or Kyber. Integrations mappings are stored on the IntegrationRegistry contract.\\n */\\ncontract SignalSuscriptionModule is ModuleBase, Ownable, ReentrancyGuard {\\n    using SafeCast for int256;\\n    using SafeMath for uint256;\\n\\n    using Invoke for IJasperVault;\\n\\n    using PreciseUnitMath for uint256;\\n    using AddressArrayUtils for address[];\\n\\n    mapping(address => address[]) public followers;\\n\\n    mapping(address => bool) public isExectueFollow;\\n\\n    uint256 public warningLine;\\n    uint256 public unsubscribeLine;\\n    //1%=1e16  100%=1e18\\n    uint256 public platformFee;\\n    address public platform_vault;\\n\\n    address public mirrorToken;\\n\\n    mapping(address => address) public Signal_provider;\\n    mapping(IJasperVault => uint256) public jasperVaultPreBalance;\\n\\n    mapping(address => uint256) public followFees;\\n\\n    mapping(address => uint256) public profitShareFees;\\n\\n    ISubscribeFeePool public subscribeFeePool;\\n\\n    event SetPlatformAndPlatformFee(\\n        ISubscribeFeePool _subscribeFeePool,\\n        uint256 _fee,\\n        address _platform_vault,\\n        uint256 _warningLine,\\n        uint256 _unsubscribeLine,\\n        address _mirrorToken\\n    );\\n    event RemoveFollower(address target, address follower);\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(\\n        IController _controller,\\n        ISubscribeFeePool _subscribeFeePool,\\n        uint256 _warningLine,\\n        uint256 _unsubscribeLine,\\n        uint256 _platformFee,\\n        address _platform_vault,\\n        address _mirrorToken\\n    ) public ModuleBase(_controller) {\\n        warningLine = _warningLine;\\n        unsubscribeLine = _unsubscribeLine;\\n        platformFee = _platformFee;\\n        subscribeFeePool = _subscribeFeePool;\\n        platform_vault = _platform_vault;\\n        mirrorToken = _mirrorToken;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    function exectueFollowStart(\\n        address _jasperVault\\n    ) external nonReentrant onlyManagerAndValidSet(IJasperVault(_jasperVault)) {\\n        require(\\n            !isExectueFollow[_jasperVault],\\n            \\\"exectueFollow  status not false\\\"\\n        );\\n        isExectueFollow[_jasperVault] = true;\\n    }\\n\\n    function exectueFollowEnd(\\n        address _jasperVault\\n    ) external nonReentrant onlyManagerAndValidSet(IJasperVault(_jasperVault)) {\\n        require(isExectueFollow[_jasperVault], \\\"exectueFollow status not true\\\");\\n        isExectueFollow[_jasperVault] = false;\\n    }\\n\\n    //1%=1e16  100%=1e18\\n    function setPlatformAndPlatformFee(\\n        ISubscribeFeePool _subscribeFeePool,\\n        address _platform_vault,\\n        uint256 _warningLine,\\n        uint256 _unsubscribeLine,\\n        uint256 _fee,\\n        address _mirrorToken\\n    ) external nonReentrant onlyOwner {\\n        require(_fee <= 10 ** 18, \\\"fee can not be more than 1e18\\\");\\n        subscribeFeePool = _subscribeFeePool;\\n        platformFee = _fee;\\n        platform_vault = _platform_vault;\\n\\n        warningLine = _warningLine;\\n        unsubscribeLine = _unsubscribeLine;\\n        mirrorToken = _mirrorToken;\\n        emit SetPlatformAndPlatformFee(\\n            _subscribeFeePool,\\n            _fee,\\n            _platform_vault,\\n            _warningLine,\\n            _unsubscribeLine,\\n            _mirrorToken\\n        );\\n    }\\n\\n    /**\\n     * Initializes this module to the JasperVault. Only callable by the JasperVault's manager.\\n     *\\n     * @param _jasperVault                 Instance of the JasperVault to initialize\\n     */\\n    function initialize(\\n        IJasperVault _jasperVault\\n    )\\n        external\\n        onlyValidAndPendingSet(_jasperVault)\\n        onlySetManager(_jasperVault, msg.sender)\\n    {\\n        _jasperVault.initializeModule();\\n    }\\n\\n    /**\\n     * Removes this module from the JasperVault, via call by the JasperVault. Left with empty logic\\n     * here because there are no check needed to verify removal.\\n     */\\n    function removeModule() external override {}\\n\\n    function subscribe(\\n        IJasperVault _jasperVault,\\n        address target\\n    ) external nonReentrant onlyManagerAndValidSet(_jasperVault) {\\n        uint256 preBalance = controller.getSetValuer().calculateSetTokenValuation(    \\n                _jasperVault,\\n                _jasperVault.masterToken()\\n            );\\n//        jasperVaultPreBalance[_jasperVault]=preBalance;\\n        followers[target].push(address(_jasperVault));\\n        Signal_provider[address(_jasperVault)] = target;\\n        profitShareFees[address(_jasperVault)] = IJasperVault(target).profitShareFee();         \\n    }\\n\\n    function unsubscribe(\\n        IJasperVault _jasperVault,\\n        address target\\n    ) external nonReentrant onlyManagerAndValidSet(_jasperVault) {\\n        followers[target].removeStorage(address(_jasperVault));\\n    }\\n\\n    function unsubscribeByMaster(\\n        address target\\n    ) external nonReentrant onlyManagerAndValidSet(IJasperVault(target)) {\\n        address[] memory list = followers[target];\\n        for (uint256 i = 0; i < list.length; i++) {\\n            followers[target].removeStorage(list[i]);\\n        }\\n    }\\n\\n    function removeFollower(\\n        address target,\\n        address follower\\n    ) external nonReentrant onlyOwner {\\n        followers[target].removeStorage(follower);\\n        delete Signal_provider[follower];\\n        emit RemoveFollower(target, follower);\\n    }\\n\\n    function get_followers(\\n        address target\\n    ) external view returns (address[] memory) {\\n        return followers[target];\\n    }\\n\\n    function get_signal_provider(\\n        IJasperVault _jasperVault\\n    ) external view returns (address) {\\n        return Signal_provider[address(_jasperVault)];\\n    }\\n\\n    //calculate fee\\n    function handleFee(\\n        IJasperVault _jasperVault\\n    ) external view  returns(address[] memory,uint256[] memory){\\n        uint256[] memory shareFee=new uint256[](2);\\n        address[] memory sharer=new address[](2); \\n        uint256[3] memory param=[uint256(0),uint256(0),uint256(0)]; \\n        address masterToken = _jasperVault.masterToken();\\n        address target = Signal_provider[address(_jasperVault)];\\n\\n        param[0] = jasperVaultPreBalance[_jasperVault];\\n\\n        param[1] = controller.getSetValuer().calculateSetTokenValuation(\\n                _jasperVault,\\n                _jasperVault.masterToken()\\n            );       \\n        if (param[1] > param[0]) {\\n            param[2] = _jasperVault.totalSupply();//\u603b\u989d\\n            IPriceOracle priceOracle = controller.getPriceOracle();\\n\\n            uint256 componentPrice = priceOracle.getPrice(masterToken,  priceOracle.masterQuoteAsset());\\n\\n            uint256 profit = param[1] - param[0];\\n\\n            uint256 _strategistFee = profitShareFees[address(_jasperVault)]; \\n            uint256 shareFeeBalance = profit.preciseMul(_strategistFee);\\n            uint256 platformFeeBalance = profit.preciseMul(platformFee);\\n             if (shareFeeBalance > profit) {\\n                platformFeeBalance =0;\\n                shareFeeBalance=profit;\\n             }      \\n             sharer[0]=target;\\n             shareFee[0]=shareFeeBalance.preciseMul(param[2]).preciseDiv(componentPrice);\\n             sharer[1]=platform_vault;\\n             shareFee[1]=platformFeeBalance.preciseMul(param[2]).preciseDiv(componentPrice);                    \\n        }\\n        return (sharer,shareFee);\\n    }\\n\\n    function handleTransferShareFee(IJasperVault _jasperVault,address[] memory sharer,uint256[] memory shareFee) external nonReentrant onlyManagerAndValidSet(_jasperVault){      \\n            address masterToken=_jasperVault.masterToken();\\n            for(uint256 i;i<sharer.length;i++){\\n                if(shareFee[i]>0){\\n                   IERC20(masterToken).approve(address(subscribeFeePool), shareFee[i]);\\n                   subscribeFeePool.deposit(masterToken, sharer[i], shareFee[i]);\\n                }\\n            }   \\n            delete jasperVaultPreBalance[_jasperVault];\\n            delete Signal_provider[address(_jasperVault)];  \\n    }\\n\\n    function handleResetFee(\\n        IJasperVault _target,\\n        IJasperVault _jasperVault,\\n        address _token,\\n        uint256 _amount\\n    ) external nonReentrant onlyManagerAndValidSet(_jasperVault) {\\n        if (_amount > 0) {\\n            IERC20(_token).approve(address(subscribeFeePool), _amount);\\n            subscribeFeePool.deposit(_token, address(_target), _amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/modules/v1/TradeModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity ^0.6.10;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\n\\nimport { IController } from \\\"../../../interfaces/IController.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IExchangeAdapter } from \\\"../../../interfaces/IExchangeAdapter.sol\\\";\\nimport { IIntegrationRegistry } from \\\"../../../interfaces/IIntegrationRegistry.sol\\\";\\nimport { Invoke } from \\\"../../lib/Invoke.sol\\\";\\nimport { IJasperVault } from \\\"../../../interfaces/IJasperVault.sol\\\";\\nimport { ModuleBase } from \\\"../../lib/ModuleBase.sol\\\";\\nimport { Position } from \\\"../../lib/Position.sol\\\";\\nimport { PreciseUnitMath } from \\\"../../../lib/PreciseUnitMath.sol\\\";\\nimport {IUniswapV2Router} from \\\"../../../interfaces/external/IUniswapV2Router.sol\\\";\\n\\n/**\\n * @title TradeModule\\n * @author Set Protocol\\n *\\n * Module that enables SetTokens to perform atomic trades using Decentralized Exchanges\\n * such as 1inch or Kyber. Integrations mappings are stored on the IntegrationRegistry contract.\\n */\\ncontract TradeModule is ModuleBase, ReentrancyGuard {\\n    using SafeCast for int256;\\n    using SafeMath for uint256;\\n\\n    using Invoke for IJasperVault;\\n    using Position for IJasperVault;\\n    using PreciseUnitMath for uint256;\\n    \\n\\n    /* ============ Struct ============ */\\n\\n    struct TradeInfo {\\n        IJasperVault jasperVault;                             // Instance of JasperVault\\n        IExchangeAdapter exchangeAdapter;               // Instance of exchange adapter contract\\n        address sendToken;                              // Address of token being sold\\n        address receiveToken;                           // Address of token being bought\\n        uint256 setTotalSupply;                         // Total supply of JasperVault in Precise Units (10^18)\\n        uint256 totalSendQuantity;                      // Total quantity of sold token (position unit x total supply)\\n        uint256 totalMinReceiveQuantity;                // Total minimum quantity of token to receive back\\n        uint256 preTradeSendTokenBalance;               // Total initial balance of token being sold\\n        uint256 preTradeReceiveTokenBalance;            // Total initial balance of token being bought\\n    }\\n\\n    /* ============ Events ============ */\\n\\n    event ComponentExchanged(\\n        IJasperVault indexed _jasperVault,\\n        address indexed _sendToken,\\n        address indexed _receiveToken,\\n        IExchangeAdapter _exchangeAdapter,\\n        uint256 _totalSendAmount,\\n        uint256 _totalReceiveAmount,\\n        uint256 _protocolFee\\n    );\\n\\n    /* ============ Constants ============ */\\n\\n    // 0 index stores the fee % charged in the trade function\\n    uint256 constant internal TRADE_MODULE_PROTOCOL_FEE_INDEX = 0;\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(IController _controller) public ModuleBase(_controller) {}\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Initializes this module to the JasperVault. Only callable by the JasperVault's manager.\\n     *\\n     * @param _jasperVault                 Instance of the JasperVault to initialize\\n     */\\n    function initialize(\\n        IJasperVault _jasperVault\\n    )\\n        external\\n        onlyValidAndPendingSet(_jasperVault)\\n        onlySetManager(_jasperVault, msg.sender)\\n    {\\n        _jasperVault.initializeModule();\\n    }\\n    /**\\n     * Executes a trade on a supported DEX. Only callable by the JasperVault's manager.\\n     * @dev Although the JasperVault units are passed in for the send and receive quantities, the total quantity\\n     * sent and received is the quantity of JasperVault units multiplied by the JasperVault totalSupply.\\n     *\\n     * @param _jasperVault             Instance of the JasperVault to trade\\n     * @param _exchangeName         Human readable name of the exchange in the integrations registry\\n     * @param _sendToken            Address of the token to be sent to the exchange\\n     * @param _sendQuantity         Units of token in JasperVault sent to the exchange\\n     * @param _receiveToken         Address of the token that will be received from the exchange\\n     * @param _minReceiveQuantity   Min units of token in JasperVault to be received from the exchange\\n     * @param _data                 Arbitrary bytes to be used to construct trade call data\\n     */\\n    function trade(\\n        IJasperVault _jasperVault,\\n        string memory _exchangeName,\\n        address _sendToken,\\n        int256 _sendQuantity,\\n        address _receiveToken,\\n        uint256 _minReceiveQuantity,\\n        bytes memory _data\\n    )\\n        external\\n        nonReentrant\\n        onlyManagerAndValidSet(_jasperVault)\\n    {\\n        TradeInfo memory tradeInfo = _createTradeInfo(\\n            _jasperVault,\\n            _exchangeName,\\n            _sendToken,\\n            _receiveToken,\\n            _sendQuantity,\\n            _minReceiveQuantity\\n        );\\n        if(_sendQuantity<0){\\n           _validatePreTradeData(tradeInfo, 1);         \\n        }else{\\n           _validatePreTradeData(tradeInfo, uint256(_sendQuantity));\\n        }\\n     \\n\\n        _executeTrade(tradeInfo, _data);\\n\\n        uint256 exchangedQuantity = _validatePostTrade(tradeInfo);\\n\\n        uint256 protocolFee = _accrueProtocolFee(tradeInfo, exchangedQuantity);\\n\\n        (\\n            uint256 netSendAmount,\\n            uint256 netReceiveAmount\\n        ) = _updateSetTokenPositions(tradeInfo);\\n\\n        emit ComponentExchanged(\\n            _jasperVault,\\n            _sendToken,\\n            _receiveToken,\\n            tradeInfo.exchangeAdapter,\\n            netSendAmount,\\n            netReceiveAmount,\\n            protocolFee\\n        );\\n    }\\n\\n    /**\\n     * Removes this module from the JasperVault, via call by the JasperVault. Left with empty logic\\n     * here because there are no check needed to verify removal.\\n     */\\n    function removeModule() external override {}\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Create and return TradeInfo struct\\n     *\\n     * @param _jasperVault             Instance of the JasperVault to trade\\n     * @param _exchangeName         Human readable name of the exchange in the integrations registry\\n     * @param _sendToken            Address of the token to be sent to the exchange\\n     * @param _receiveToken         Address of the token that will be received from the exchange\\n     * @param _sendQuantity         Units of token in JasperVault sent to the exchange\\n     * @param _minReceiveQuantity   Min units of token in JasperVault to be received from the exchange\\n     *\\n     * return TradeInfo             Struct containing data for trade\\n     */\\n    function _createTradeInfo(\\n        IJasperVault _jasperVault,\\n        string memory _exchangeName,\\n        address _sendToken,\\n        address _receiveToken,\\n        int256 _sendQuantity,\\n        uint256 _minReceiveQuantity\\n    )\\n        internal\\n        view\\n        returns (TradeInfo memory)\\n    {\\n        TradeInfo memory tradeInfo;\\n\\n        tradeInfo.jasperVault = _jasperVault;\\n\\n        tradeInfo.exchangeAdapter = IExchangeAdapter(getAndValidateAdapter(_exchangeName));\\n\\n        tradeInfo.sendToken = _sendToken;\\n        tradeInfo.receiveToken = _receiveToken;\\n\\n        tradeInfo.setTotalSupply = _jasperVault.totalSupply();\\n\\n        if(_sendQuantity<0){\\n           tradeInfo.totalSendQuantity =IERC20(_sendToken).balanceOf(address(_jasperVault));    \\n        }else{\\n           tradeInfo.totalSendQuantity = Position.getDefaultTotalNotional(tradeInfo.setTotalSupply, uint256(_sendQuantity));\\n        }\\n        tradeInfo.totalMinReceiveQuantity = Position.getDefaultTotalNotional(tradeInfo.setTotalSupply, _minReceiveQuantity);\\n\\n        tradeInfo.preTradeSendTokenBalance = IERC20(_sendToken).balanceOf(address(_jasperVault));\\n        tradeInfo.preTradeReceiveTokenBalance = IERC20(_receiveToken).balanceOf(address(_jasperVault));\\n\\n        return tradeInfo;\\n    }\\n\\n    /**\\n     * Validate pre trade data. Check exchange is valid, token quantity is valid.\\n     *\\n     * @param _tradeInfo            Struct containing trade information used in internal functions\\n     * @param _sendQuantity         Units of token in JasperVault sent to the exchange\\n     */\\n    function _validatePreTradeData(TradeInfo memory _tradeInfo, uint256 _sendQuantity) internal view {\\n        require(_tradeInfo.totalSendQuantity > 0, \\\"Token to sell must be nonzero\\\");\\n\\n        require(\\n            _tradeInfo.jasperVault.hasSufficientDefaultUnits(_tradeInfo.sendToken, _sendQuantity),\\n            \\\"Unit cant be greater than existing\\\"\\n        );\\n    }\\n\\n    /**\\n     * Invoke approve for send token, get method data and invoke trade in the context of the JasperVault.\\n     *\\n     * @param _tradeInfo            Struct containing trade information used in internal functions\\n     * @param _data                 Arbitrary bytes to be used to construct trade call data\\n     */\\n    function _executeTrade(\\n        TradeInfo memory _tradeInfo,\\n        bytes memory _data\\n    )\\n        internal\\n    {\\n        // Get spender address from exchange adapter and invoke approve for exact amount on JasperVault\\n        _tradeInfo.jasperVault.invokeApprove(\\n            _tradeInfo.sendToken,\\n            _tradeInfo.exchangeAdapter.getSpender(),\\n            _tradeInfo.totalSendQuantity\\n        );\\n\\n        (\\n            address targetExchange,\\n            uint256 callValue,\\n            bytes memory methodData\\n        ) = _tradeInfo.exchangeAdapter.getTradeCalldata(\\n            _tradeInfo.sendToken,\\n            _tradeInfo.receiveToken,\\n            address(_tradeInfo.jasperVault),\\n            _tradeInfo.totalSendQuantity,\\n            _tradeInfo.totalMinReceiveQuantity,\\n            _data\\n        );\\n\\n        _tradeInfo.jasperVault.invoke(targetExchange, callValue, methodData);\\n    }\\n\\n    /**\\n     * Validate post trade data.\\n     *\\n     * @param _tradeInfo                Struct containing trade information used in internal functions\\n     * @return uint256                  Total quantity of receive token that was exchanged\\n     */\\n    function _validatePostTrade(TradeInfo memory _tradeInfo) internal view returns (uint256) {\\n        uint256 exchangedQuantity = IERC20(_tradeInfo.receiveToken)\\n            .balanceOf(address(_tradeInfo.jasperVault))\\n            .sub(_tradeInfo.preTradeReceiveTokenBalance);\\n\\n        require(\\n            exchangedQuantity >= _tradeInfo.totalMinReceiveQuantity,\\n            \\\"Slippage greater than allowed\\\"\\n        );\\n\\n        return exchangedQuantity;\\n    }\\n\\n    /**\\n     * Retrieve fee from controller and calculate total protocol fee and send from JasperVault to protocol recipient\\n     *\\n     * @param _tradeInfo                Struct containing trade information used in internal functions\\n     * @return uint256                  Amount of receive token taken as protocol fee\\n     */\\n    function _accrueProtocolFee(TradeInfo memory _tradeInfo, uint256 _exchangedQuantity) internal returns (uint256) {\\n        uint256 protocolFeeTotal = getModuleFee(TRADE_MODULE_PROTOCOL_FEE_INDEX, _exchangedQuantity);\\n\\n        payProtocolFeeFromSetToken(_tradeInfo.jasperVault, _tradeInfo.receiveToken, protocolFeeTotal);\\n\\n        return protocolFeeTotal;\\n    }\\n\\n    /**\\n     * Update JasperVault positions\\n     *\\n     * @param _tradeInfo                Struct containing trade information used in internal functions\\n     * @return uint256                  Amount of sendTokens used in the trade\\n     * @return uint256                  Amount of receiveTokens received in the trade (net of fees)\\n     */\\n    function _updateSetTokenPositions(TradeInfo memory _tradeInfo) internal returns (uint256, uint256) {\\n        (uint256 currentSendTokenBalance,,) = _tradeInfo.jasperVault.calculateAndEditDefaultPosition(\\n            _tradeInfo.sendToken,\\n            _tradeInfo.setTotalSupply,\\n            _tradeInfo.preTradeSendTokenBalance\\n        );\\n\\n        (uint256 currentReceiveTokenBalance,,) = _tradeInfo.jasperVault.calculateAndEditDefaultPosition(\\n            _tradeInfo.receiveToken,\\n            _tradeInfo.setTotalSupply,\\n            _tradeInfo.preTradeReceiveTokenBalance\\n        );\\n\\n        return (\\n            _tradeInfo.preTradeSendTokenBalance.sub(currentSendTokenBalance),\\n            currentReceiveTokenBalance.sub(_tradeInfo.preTradeReceiveTokenBalance)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/modules/v1/UtilsModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity ^0.6.10;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nimport { IController } from \\\"../../../interfaces/IController.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { ModuleBase } from \\\"../../lib/ModuleBase.sol\\\";\\nimport { Invoke } from \\\"../../lib/Invoke.sol\\\";\\nimport { IJasperVault } from \\\"../../../interfaces/IJasperVault.sol\\\";\\nimport { ModuleBase } from \\\"../../lib/ModuleBase.sol\\\";\\nimport { IExchangeAdapter } from \\\"../../../interfaces/IExchangeAdapter.sol\\\";\\n\\nimport { IAToken } from \\\"../../../interfaces/external/aave-v2/IAToken.sol\\\";\\nimport { ILendingPool } from \\\"../../../interfaces/external/aave-v2/ILendingPool.sol\\\";\\nimport { IFlashLoanReceiver } from \\\"../../../interfaces/external/aave-v2/IFlashLoanReceiver.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { PreciseUnitMath } from \\\"../../../lib/PreciseUnitMath.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {IGMXAdapter} from \\\"../../../interfaces/external/gmx/IGMXAdapter.sol\\\";\\n\\ncontract UtilsModule is ModuleBase, ReentrancyGuard, IFlashLoanReceiver {\\n    using PreciseUnitMath for int256;\\n    using SafeERC20 for IERC20;\\n    uint256 internal constant BORROW_RATE_MODE = 2;\\n    ILendingPool public lendingPool;\\n    address public aaveLeverageModule;\\n\\n    uint256 public positionMultiplier = 10 ** 18;\\n    constructor(\\n        IController _controller,\\n        ILendingPool _lendingPool,\\n        address _aaveLeverageModule\\n    ) public ModuleBase(_controller) {\\n        lendingPool = _lendingPool;\\n        aaveLeverageModule=_aaveLeverageModule;\\n    }\\n\\n\\n     struct ParamInterInfo{\\n        address[]  flashAtoken;\\n        uint256[]  flashAunit;\\n        address[]  flashDtoken;\\n        uint256[]  flashDunit;\\n        uint256 flashAIndex;\\n        uint256 flashDindex;\\n        address jasperVault;\\n        address[] positionAToken;\\n        uint256 positionAIndex;\\n        address[] positionDToken;\\n        uint256 positionDIndex;\\n\\n        address[] aaveBorrowToken;\\n        uint256[] aaveBorrowUnit;\\n        uint256 aaveBorrowIndex;\\n\\n        address[] aaveWithdrawToken;\\n        uint256[] aaveWithdrawUnit;\\n        uint256 aaveWithdrawIndex;\\n       \\n     }\\n    struct  SwapInfo{\\n        string  exchangeName;\\n        address assetIn;\\n        address assetOut;\\n        uint256 amountIn;\\n        uint256 amountLimit;\\n        uint256 approveAmont;\\n        bool isExact;\\n        bytes   data;    \\n    }\\n\\n    struct Param{\\n        IJasperVault target;\\n        IJasperVault follow;\\n        uint256 positionRate;\\n        address[]  aTokens;\\n        address[]  dTokens;\\n        SwapInfo[] masterToOther;\\n        SwapInfo[] otherToMaster;    \\n        int256   rate;  //1000\\n        SwapInfo[] beforeSwap;\\n        SwapInfo[] afterSwap;\\n        address[] spotTokens;\\n        bool isMirror;\\n    }\\n    function reset(Param memory param) external nonReentrant onlyValidAndInitializedSet(param.follow){\\n          _beforeAndAfterSwap(param.follow,param.beforeSwap);\\n          ParamInterInfo memory info;\\n          info.positionAToken=new address[](param.aTokens.length);\\n          info.positionDToken=new address[](param.dTokens.length);\\n          //-\\n          info.flashAtoken=new address[](param.aTokens.length);\\n          info.flashAunit=new uint256[](param.aTokens.length);\\n          info.flashDtoken=new address[](param.dTokens.length);\\n          info.flashDunit=new uint256[](param.dTokens.length);\\n\\n          info.aaveBorrowToken=new address[](param.aTokens.length+param.dTokens.length);\\n          info.aaveBorrowUnit=new uint256[](param.aTokens.length+param.dTokens.length);\\n\\n          info.aaveWithdrawToken=new address[](param.aTokens.length+param.dTokens.length);\\n          info.aaveWithdrawUnit=new uint256[](param.aTokens.length+param.dTokens.length);\\n\\n          info.jasperVault=address(param.follow);\\n          address underlyAsset;\\n\\n          int256 tBalance;\\n          int256 fBalance;\\n          int256 diff;\\n          for(uint256 i;i<param.aTokens.length;i++){\\n              tBalance= param.isMirror ? int256(IERC20(param.aTokens[i]).balanceOf(address(param.target))):0;\\n               //get position list\\n\\n              info.positionAToken[info.positionAIndex]=param.aTokens[i];\\n              info.positionAIndex++;\\n\\n              fBalance= int256(IERC20(param.aTokens[i]).balanceOf(address(param.follow)));\\n    \\n\\n              diff=tBalance.mul(param.rate).preciseMul(int256(param.positionRate)) .div(1000).sub(fBalance);\\n              underlyAsset=IAToken(param.aTokens[i]).UNDERLYING_ASSET_ADDRESS();\\n         \\n              //Borrow from flash\\n              if(diff>0){\\n                  info.flashAtoken[info.flashAIndex]= underlyAsset;\\n                  info.flashAunit[info.flashAIndex]=diff.abs();\\n                  info.flashAIndex++;\\n              }\\n              if(diff<0){\\n                info.aaveWithdrawToken[info.aaveWithdrawIndex]=underlyAsset;\\n                info.aaveWithdrawUnit[info.aaveWithdrawIndex]=diff.abs();\\n                info.aaveWithdrawIndex++;        \\n              }\\n          }\\n\\n          for(uint256 i;i<param.dTokens.length;i++){\\n              tBalance=param.isMirror ?  int256(IERC20(param.dTokens[i]).balanceOf(address(param.target))):0;\\n              //get position list\\n\\n              info.positionDToken[info.positionDIndex]=param.dTokens[i];\\n              info.positionDIndex++;\\n\\n              fBalance= int256(IERC20(param.dTokens[i]).balanceOf(address(param.follow)));  \\n              diff=tBalance.mul(param.rate).preciseMul(int256(param.positionRate)).div(1000).sub(fBalance);\\n              underlyAsset=IAToken(param.dTokens[i]).UNDERLYING_ASSET_ADDRESS();\\n              if(diff<0){\\n                  info.flashDtoken[info.flashDindex]=underlyAsset;\\n                  info.flashDunit[info.flashDindex]=diff.abs();   \\n                  info.flashDindex++;  \\n              }\\n              if(diff>0){\\n                info.aaveBorrowToken[info.aaveBorrowIndex]=underlyAsset;\\n                info.aaveBorrowUnit[info.aaveBorrowIndex]=diff.abs();\\n                info.aaveBorrowIndex++;         \\n              }\\n          }\\n          if(info.flashDindex>0 || info.flashAIndex>0){\\n              _handleFlash(info,param);\\n          }else{\\n              _handleFlashLever(info,param);\\n          }\\n\\n          _beforeAndAfterSwap(param.follow,param.afterSwap);\\n          //update aave Position\\n          _updateAavePostion(info);\\n          for(uint256 i;i<param.spotTokens.length;i++){\\n             _updateMasterToken(param.follow,param.spotTokens[i]);\\n          }\\n         \\n    }\\n\\n    function _updateMasterToken(IJasperVault follow,address _token) internal {\\n           address masterToken=_token;\\n           uint256 totalSupply=follow.totalSupply();\\n           uint256 balance = IERC20(masterToken).balanceOf(\\n               address(follow)\\n            );\\n            balance = uint256(int256(balance).preciseDiv(int256(totalSupply)));\\n            _updatePosition(follow, masterToken, balance, 0);\\n    }\\n\\n\\n\\n    function _handleFlash(ParamInterInfo memory info,Param memory param) internal {\\n          address[] memory flashToken=new address[](info.flashAIndex+info.flashDindex);\\n          uint256[] memory flashUnit=new uint256[](info.flashAIndex+info.flashDindex);\\n          uint256[] memory flashMode=new uint256[](info.flashAIndex+info.flashDindex);\\n          uint256 index;\\n          for(uint256 i;i<info.flashAIndex;i++){\\n              flashToken[index]=info.flashAtoken[i];\\n              flashUnit[index]=info.flashAunit[i];\\n              index++;\\n          }\\n          for(uint256 i;i<info.flashDindex;i++){\\n              flashToken[index]=info.flashDtoken[i];\\n              flashUnit[index]=info.flashDunit[i];\\n              index++;\\n          }\\n          bytes memory infoBytes=abi.encode(info,param);\\n          lendingPool.flashLoan(address(this), flashToken,flashUnit,flashMode,address(this),infoBytes,0);\\n    }\\n\\n    function _handleFlashLever(ParamInterInfo memory info,Param memory param) internal {\\n          address _callContract;\\n          uint256 _callValue;\\n          bytes memory _callByteData; \\n          for(uint256 i;i<info.aaveBorrowIndex;i++){\\n                 (_callContract,_callValue,_callByteData )=  getAaveBorrowCallData(info.aaveBorrowToken[i],info.aaveBorrowUnit[i],address(param.follow));\\n                  param.follow.invoke(_callContract,_callValue, _callByteData);      \\n                  _handleOMAsset(param.follow,info.aaveBorrowToken[i],info.aaveBorrowUnit[i],param.otherToMaster);\\n          }\\n          for(uint256 i;i<info.aaveWithdrawIndex;i++){\\n\\n                (_callContract,_callValue,_callByteData )=  getAaveWithdrawCallData(info.aaveWithdrawToken[i],info.aaveWithdrawUnit[i],address(param.follow));\\n                param.follow.invoke(_callContract,_callValue, _callByteData);  \\n                _handleOMAsset(param.follow,info.aaveWithdrawToken[i],info.aaveWithdrawUnit[i],param.otherToMaster);\\n          }\\n    }\\n\\n\\n    function _handleFlashDelever(ParamInterInfo memory info) internal{\\n         address _callContract;\\n          uint256 _callValue;\\n          bytes memory _callByteData;\\n          for(uint256 i;i<info.flashAIndex;i++){\\n               IJasperVault(info.jasperVault).invokeApprove(\\n                        info.flashAtoken[i],\\n                        address(lendingPool),\\n                        info.flashAunit[i]\\n                    );\\n             (_callContract,_callValue,_callByteData )=  getAaveDepositCallData(info.flashAtoken[i],info.flashAunit[i],info.jasperVault);\\n              IJasperVault(info.jasperVault).invoke(_callContract,_callValue, _callByteData);\\n          }\\n          for(uint256 i;i<info.flashDindex;i++){\\n               IJasperVault(info.jasperVault).invokeApprove(\\n                        info.flashDtoken[i],\\n                        address(lendingPool),\\n                        info.flashDunit[i]\\n            );\\n              (_callContract,_callValue,_callByteData )=  getAaveRepayCallData(info.flashDtoken[i],info.flashDunit[i],info.jasperVault);\\n              IJasperVault(info.jasperVault).invoke(_callContract,_callValue, _callByteData);\\n          }    \\n\\n\\n    }\\n    function _updateAavePostion(ParamInterInfo memory info) internal{\\n         uint256 balance;\\n         int256 totalSupply=int256(IJasperVault(info.jasperVault).totalSupply());\\n         address underlyAsset;\\n         for(uint256 i;i<info.positionAIndex;i++){\\n            balance=IERC20(info.positionAToken[i]).balanceOf(info.jasperVault);\\n            balance = uint256(int256(balance).preciseDiv(totalSupply));\\n            _updatePosition(IJasperVault(info.jasperVault),info.positionAToken[i],balance,1);\\n         }\\n\\n         for(uint i;i<info.positionDIndex;i++){\\n            int256 zero=0;\\n            balance=IERC20(info.positionDToken[i]).balanceOf(info.jasperVault);\\n            int256 result =zero.sub(int256(balance).preciseDiv(totalSupply));\\n            underlyAsset=IAToken(info.positionDToken[i]).UNDERLYING_ASSET_ADDRESS();\\n            _updateExternalPosition(IJasperVault(info.jasperVault),underlyAsset,aaveLeverageModule,result,1);\\n         }\\n    }\\n    function _updatePosition(ParamInterInfo memory info) internal{\\n         uint256 balance;\\n         int256 totalSupply=int256(IJasperVault(info.jasperVault).totalSupply());\\n         address underlyAsset;\\n         for(uint256 i;i<info.positionAIndex;i++){\\n            balance=IERC20(info.positionAToken[i]).balanceOf(info.jasperVault);\\n            balance = uint256(int256(balance).preciseDiv(totalSupply));\\n            _updatePosition(IJasperVault(info.jasperVault),info.positionAToken[i],balance,1);\\n         }\\n}\\n\\n    //masterToken->other\\n    function _handleMOAsset(IJasperVault follow,address asset,uint256 amount, SwapInfo[] memory masterToOther) internal {\\n            uint256 balance=IERC20(follow.masterToken()).balanceOf(address(follow));\\n            for(uint256 i;i<masterToOther.length;i++){\\n                if(masterToOther[i].assetOut==asset){\\n                   SwapInfo memory info=masterToOther[i];\\n                   info.amountIn=amount;\\n                   info.amountLimit=balance;\\n                    (\\n                    address  _callContract,\\n                    uint256 _callValue,\\n                    bytes memory  _callByteData,\\n                    address  _spender\\n                    ) = getUniswapTokenCallData(\\n                        info,\\n                        address(follow)\\n                    );\\n                    follow.invokeApprove(\\n                        follow.masterToken(),\\n                        _spender,\\n                        balance\\n                    );\\n                    follow.invoke(_callContract, _callValue, _callByteData);\\n                    break;\\n                }\\n           }\\n    }\\n    //other->masterToken\\n    // need add amount limit out\\n    function _handleOMAsset(IJasperVault follow,address asset,uint256 amount, SwapInfo[] memory otherToMaster) internal {\\n            for(uint256 i;i<otherToMaster.length;i++){\\n                if(otherToMaster[i].assetIn==asset){\\n                   SwapInfo memory info=otherToMaster[i];\\n                   info.amountIn=amount;\\n//                   info.amountLimit=amount.mul(95).div(100);\\n                    (\\n                    address  _callContract,\\n                    uint256 _callValue,\\n                    bytes memory  _callByteData,\\n                    address  _spender\\n                    ) = getUniswapTokenCallData(\\n                        info,\\n                        address(follow)\\n                    );\\n                    follow.invokeApprove(\\n                        asset,\\n                        _spender,\\n                        info.amountIn\\n                    );\\n                    follow.invoke(_callContract, _callValue, _callByteData);\\n                    break;\\n                }\\n           }\\n    }\\n    //\\n    function _beforeAndAfterSwap(IJasperVault follow,SwapInfo[] memory info) internal {\\n            for(uint256 i;i<info.length;i++){\\n                if(info[i].isExact){\\n                   info[i].amountIn=IERC20(info[i].assetIn).balanceOf(address(follow));\\n//                   info[i].amountLimit=info[i].amountLimit.mul(95).div(100);\\n                   info[i].approveAmont=info[i].amountIn;\\n                }\\n                    (\\n                    address  _callContract,\\n                    uint256 _callValue,\\n                    bytes memory  _callByteData,\\n                    address  _spender\\n                    ) = getUniswapTokenCallData(\\n                        info[i],\\n                        address(follow)\\n                    );\\n                    follow.invokeApprove(\\n                        info[i].assetIn,\\n                        _spender,\\n                        info[i].approveAmont\\n                    );\\n                    try  follow.invoke(_callContract, _callValue, _callByteData){                  \\n                    } catch{\\n\\n                    }\\n           }\\n    }\\n\\n    //\\n    function _replayFlash(IJasperVault follow,address[] memory assets, uint256[] memory amounts,uint256[] memory premiums,SwapInfo[] memory masterToOther) internal{\\n             for(uint256 i;i<assets.length;i++){\\n                 uint256 amount=amounts[i].add(premiums[i]);\\n                 _handleMOAsset(follow,assets[i],amount,masterToOther);\\n             }\\n            for (uint256 i = 0; i < assets.length; i++) {\\n                follow.invokeTransfer(\\n                 assets[i],\\n                  address(this),\\n                  (amounts[i] + premiums[i])\\n                 );\\n            }\\n            for (uint i = 0; i < assets.length; i++) {\\n                 IERC20(assets[i]).approve(\\n                  address(lendingPool),\\n                   (amounts[i] + premiums[i])\\n             );\\n           }\\n    }\\n\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint[] calldata amounts,\\n        uint[] calldata premiums,\\n        address /*initiator*/,\\n        bytes calldata params\\n    ) external override returns (bool) {\\n        (ParamInterInfo memory info,Param memory param)= abi.decode(params, (ParamInterInfo,Param));\\n        //current contract  transfer jaspervault\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            IERC20(assets[i]).safeTransfer(\\n                address(info.jasperVault),\\n                amounts[i]\\n            );\\n        }\\n        _handleFlashDelever(info);\\n        _handleFlashLever(info,param);\\n        _replayFlash(IJasperVault(info.jasperVault),assets,amounts,premiums,param.masterToOther);\\n   \\n        return true;\\n    }\\n   //-----------\\n    function initialize(IJasperVault _jasperVault) external {\\n        _jasperVault.initializeModule();\\n    }\\n    //-------------------\\n    function getAaveDepositCallData(\\n        address _asset,\\n        uint256 _amount,\\n        address _onBehalfOf\\n    ) internal view returns (address, uint256, bytes memory) {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"deposit(address,uint256,address,uint16)\\\",\\n            _asset,\\n            _amount,\\n            _onBehalfOf,\\n            0\\n        );\\n        return (address(lendingPool), 0, callData);\\n    }\\n\\n    function getAaveBorrowCallData(\\n        address _asset,\\n        uint256 _amount,\\n        address _onBehalfOf\\n    ) internal view returns (address, uint256, bytes memory) {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"borrow(address,uint256,uint256,uint16,address)\\\",\\n            _asset,\\n            _amount,\\n            BORROW_RATE_MODE,\\n            0,\\n            _onBehalfOf\\n        );\\n\\n        return (address(lendingPool), 0, callData);\\n    }\\n\\n    function getAaveRepayCallData(\\n        address _assset,\\n        uint256 _amount,\\n        address _onBehalfOf\\n    ) internal view returns (address, uint256, bytes memory) {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"repay(address,uint256,uint256,address)\\\",\\n            _assset,\\n            _amount,\\n            BORROW_RATE_MODE,\\n            _onBehalfOf\\n        );\\n\\n        return (address(lendingPool), 0, callData);\\n    }\\n\\n    function getAaveWithdrawCallData(\\n        address _asset,\\n        uint256 _amount,\\n        address _to\\n    ) internal view returns (address, uint256, bytes memory) {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"withdraw(address,uint256,address)\\\",\\n            _asset,\\n            _amount,\\n            _to\\n        );\\n\\n        return (address(lendingPool), 0, callData);\\n    }\\n\\n    function getUniswapTokenCallData(\\n        SwapInfo memory _swapInfo,\\n        address _to\\n    )\\n        internal\\n        view\\n        returns (\\n            address targetExchange,\\n            uint256 callValue,\\n            bytes memory methodData,\\n            address uniswapRouter\\n        )\\n    {\\n        IExchangeAdapter exchangeAdapter = IExchangeAdapter(\\n            getAndValidateAdapter(_swapInfo.exchangeName)\\n        );\\n        uniswapRouter = exchangeAdapter.getSpender();\\n        (targetExchange, callValue, methodData) = exchangeAdapter\\n            .getTradeCalldata(\\n                _swapInfo.assetIn,\\n                _swapInfo.assetOut,\\n                _to,\\n                _swapInfo.amountIn,\\n                _swapInfo.amountLimit,\\n                _swapInfo.data\\n            );\\n        return (targetExchange, callValue, methodData, uniswapRouter);\\n    }\\n    function _updatePosition(\\n        IJasperVault _jasperVault,\\n        address _token,\\n        uint256 _newPositionUnit,\\n        uint256 _coinType\\n    ) internal {\\n        _jasperVault.editCoinType(_token, _coinType);\\n        _jasperVault.editDefaultPosition(_token, _newPositionUnit);\\n    }\\n\\n    function _updateExternalPosition(\\n        IJasperVault _jasperVault,\\n        address _token,\\n        address _module,\\n        int256 _newPositionUnit,\\n        uint256 _coinType\\n    ) internal {\\n        _jasperVault.editExternalCoinType(_token, _module, _coinType);\\n        _jasperVault.editExternalPosition(\\n            _token,\\n            _module,\\n            _newPositionUnit,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    function removeModule() external override {}\\n}\"\r\n    },\r\n    \"hardhat/console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract ILendingPool\",\"name\":\"_lendingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveLeverageModule\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"aaveLeverageModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IJasperVault\",\"name\":\"_jasperVault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IJasperVault\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"contract IJasperVault\",\"name\":\"follow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionRate\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"aTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"dTokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"exchangeName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approveAmont\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExact\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct UtilsModule.SwapInfo[]\",\"name\":\"masterToOther\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"exchangeName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approveAmont\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExact\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct UtilsModule.SwapInfo[]\",\"name\":\"otherToMaster\",\"type\":\"tuple[]\"},{\"internalType\":\"int256\",\"name\":\"rate\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"exchangeName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approveAmont\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExact\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct UtilsModule.SwapInfo[]\",\"name\":\"beforeSwap\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"exchangeName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approveAmont\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExact\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct UtilsModule.SwapInfo[]\",\"name\":\"afterSwap\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"spotTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isMirror\",\"type\":\"bool\"}],\"internalType\":\"struct UtilsModule.Param\",\"name\":\"param\",\"type\":\"tuple\"}],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UtilsModule", "CompilerVersion": "v0.6.10+commit.00c0fcaf", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005efbec87936fa05d60a754fdc0051cf507dc7ed50000000000000000000000008dff5e27ea6b7ac08ebfdf9eb090f32ee9a30fcf000000000000000000000000d1f0ac918fa77e3d4eda33cd3063853d599eca61", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}