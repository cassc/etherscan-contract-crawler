{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/OwlRouterV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT \\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./MockUniswapV2.sol\\\";\\n\\ncontract OwlRouter is Context, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n\\n    // address of the OWL token\\n    address private _owlAddress;\\n    // uniswap v2 router address\\n    address private _uniswapV2RouterAddress;\\n    // address of the tax wallet\\n    address private _taxWallet;\\n\\n    // OWL balances of users\\n    mapping(address => uint256) private _owlBalances;\\n\\n\\n    constructor (\\n        address owlAddress,\\n        address uniswapV2RouterAddress\\n    ) {\\n        _owlAddress = owlAddress;\\n        _uniswapV2RouterAddress = uniswapV2RouterAddress;\\n        _taxWallet = owner();\\n    }\\n\\n\\n    // --- Tax management functions --- \\n\\n    /**\\n     * @dev Sets the address of the tax wallet.\\n     * @param taxWallet The address of the new tax wallet.\\n     * @notice This function can only be called by the owner or the current tax wallet.\\n     * @notice The tax wallet is the address that receives the tax fees for each transaction.\\n    */\\n    function setTaxWallet(address taxWallet) external {\\n        require(_msgSender() == owner() || _msgSender() == _taxWallet, \\\"OwlRouter: caller is not the owner or tax wallet\\\");\\n        _taxWallet = taxWallet;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the tax wallet.\\n     * @return The address of the tax wallet.\\n    */\\n    function getTaxWallet() external view returns (address) {\\n        return _taxWallet;\\n    }\\n\\n\\n    // --- Contract OWL balance management functions ---\\n\\n    /**\\n     * @dev Deposits OWL tokens to the contract.\\n     * @param amount The amount of OWL tokens to deposit.\\n     * @notice The OWL tokens are used to pay the tax fees.\\n     */\\n    function deposit(uint256 amount) external nonReentrant {\\n        IERC20(_owlAddress).safeTransferFrom(_msgSender(), address(this), amount);\\n        _owlBalances[_msgSender()] = _owlBalances[_msgSender()].add(amount);\\n    }\\n\\n    /**\\n     * @dev Withdraws OWL tokens from the contract.\\n     * @param amount The amount of OWL tokens to withdraw.\\n     */\\n    function withdraw(uint256 amount) external nonReentrant {\\n        require(_owlBalances[_msgSender()] >= amount, \\\"OwlRouter: sender does not have enough OWL balance\\\");\\n        _owlBalances[_msgSender()] = _owlBalances[_msgSender()].sub(amount);\\n        IERC20(_owlAddress).safeTransfer(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Returns the OWL balance of a wallet which has been deposited to the contract.\\n     * @param wallet The wallet to get the OWL balance for.\\n     * @return The OWL balance of the specified wallet.\\n     */\\n    function balanceOf(address wallet) external view returns (uint256) {\\n        return _owlBalances[wallet];\\n    }\\n\\n\\n    // --- External transfer functions ---\\n\\n    /**\\n     * @dev Transfers ETH to a recipient.\\n     * @param recipient The recipient to transfer ETH to.\\n     * @param payWithOWL Whether to pay the tax fee with OWL or input ETH.\\n     * @param taxFee The tax fee to pay to the tax wallet.\\n     * @notice The tax fee is sent to the tax wallet.\\n     * @notice If payWithOWL is true, the sender must have enough OWL balance in the contract.\\n     * @notice If payWithOWL is false, the fee is deducted from the amount of ETH being transfered.\\n     */\\n    function transferETH(address payable recipient, bool payWithOWL, uint256 taxFee) external payable {\\n        uint256 taxAmount = _sendTax(address(0), msg.value, payWithOWL, taxFee);\\n        recipient.transfer(msg.value.sub(taxAmount));\\n    }\\n\\n    /**\\n     * @dev Transfers ETH to a recipient.\\n     * @param recipient The recipient to transfer ETH to.\\n     * @param tokenAddress The address of the token to transfer.\\n     * @param amount The amount of tokens to transfer.\\n     * @param payWithOWL Whether to pay the tax fee with OWL or input tokens.\\n     * @param taxFee The tax fee to pay to the tax wallet.\\n     * @notice The tax fee is sent to the tax wallet.\\n     * @notice If payWithOWL is true, the sender must have enough OWL balance in the contract.\\n     * @notice If payWithOWL is false, the fee is deducted from the amount of tokens being transfered.\\n     */\\n    function transfer(address recipient, address tokenAddress, uint256 amount, bool payWithOWL, uint256 taxFee) external {\\n        uint256 taxAmount = _sendTax(tokenAddress, amount, payWithOWL, taxFee);\\n        IERC20(tokenAddress).safeTransferFrom(_msgSender(), recipient, amount.sub(taxAmount));\\n    }\\n\\n    /**\\n     * @dev Transfers ETH to a recipient with a custom fee.\\n     * @param recipient The recipient to transfer ETH to.\\n     * @param payWithOWL Whether to pay the tax fee with OWL or input ETH.\\n     * @param taxFee The tax fee pay to the tax wallet.\\n     * @param appWallet The wallet to receive the custom tax fee.\\n     * @param customFee The custom tax fee to pay to the app wallet. \\n     * @notice Same as transferETH, but the custom tax fee is sent to the app wallet instead of the tax wallet.\\n     * @notice The app wallet will pay the regular tax fee to the tax wallet using OWL deposited in the contract.\\n     */\\n    function transferETHWithCustomFee(address payable recipient, bool payWithOWL, uint256 taxFee, address appWallet, uint256 customFee) external payable {\\n        uint256 taxAmount = _sendTaxWithCustomFee(address(0), msg.value, payWithOWL, taxFee, appWallet, customFee);\\n        recipient.transfer(msg.value.sub(taxAmount));\\n    }\\n\\n    /**\\n     * @dev Transfers tokens to a recipient with a custom fee.\\n     * @param recipient The recipient to transfer tokens to.\\n     * @param tokenAddress The address of the token to transfer.\\n     * @param amount The amount of tokens to transfer.\\n     * @param payWithOWL Whether to pay the tax fee with OWL or input tokens.\\n     * @param taxFee The tax fee to pay to the tax wallet.\\n     * @param appWallet The wallet to receive the custom tax fee.\\n     * @param customFee The custom tax fee to pay to the app wallet.\\n     * @notice Same as transfer, but the custom tax fee is sent to the app wallet instead of the tax wallet.\\n     * @notice The app wallet will pay the regular tax fee to the tax wallet using OWL deposited in the contract.\\n     */\\n    function transferWithCustomFee(address recipient, address tokenAddress, uint256 amount, bool payWithOWL, uint256 taxFee, address appWallet, uint256 customFee) external {\\n        uint256 taxAmount = _sendTaxWithCustomFee(tokenAddress, amount, payWithOWL, taxFee, appWallet, customFee);\\n        IERC20(tokenAddress).safeTransferFrom(_msgSender(), recipient, amount.sub(taxAmount));\\n    }\\n\\n    function transferETHWithReferral(address payable recipient, uint256 taxFee, address referrerWallet, uint256 referrerBonus, uint256 refereeBonus) external payable {\\n        uint256 taxAmount = _sendTaxWithReferral(address(0), msg.value, taxFee, referrerWallet, referrerBonus, refereeBonus);\\n        recipient.transfer(msg.value.sub(taxAmount));\\n    }\\n\\n    function transferWithReferral(address recipient, address tokenAddress, uint256 amount, uint256 taxFee, address referrerWallet, uint256 referrerBonus, uint256 refereeBonus) external {\\n        uint256 taxAmount = _sendTaxWithReferral(tokenAddress, amount, taxFee, referrerWallet, referrerBonus, refereeBonus);\\n        IERC20(tokenAddress).safeTransferFrom(_msgSender(), recipient, amount.sub(taxAmount));\\n    }\\n\\n\\n    // --- External swap functions ---\\n\\n    /**\\n     * @dev Swaps ETH for tokens.\\n     * @param tokenAddress The address of the token to swap for.\\n     * @param amountOutMin The minimum amount of tokens to receive.\\n     * @param payWithOWL Whether to pay the tax fee with OWL or input ETH.\\n     * @param taxFee The tax fee to pay to the tax wallet.\\n     * @notice The tax fee is sent to the tax wallet.\\n     * @notice If payWithOWL is true, the sender must have enough OWL balance in the contract.\\n     * @notice If payWithOWL is false, the fee is deducted from the amount of ETH being transfered.\\n     */\\n    function swapETHForTokens(address tokenAddress, uint256 amountOutMin, bool payWithOWL, uint256 taxFee) external payable {\\n        uint256 taxAmount = _sendTax(address(0), msg.value, payWithOWL, taxFee);\\n        _swapETHForTokens(tokenAddress, amountOutMin, taxAmount);\\n    }\\n\\n    /**\\n     * @dev Swaps tokens for ETH.\\n     * @param tokenAddress The address of the token to swap.\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin The minimum amount of ETH to receive.\\n     * @param payWithOWL Whether to pay the tax fee with OWL or input tokens.\\n     * @param taxFee The tax fee to pay to the tax wallet.\\n     * @notice The tax fee is sent to the tax wallet.\\n     * @notice If payWithOWL is true, the sender must have enough OWL balance in the contract.\\n     * @notice If payWithOWL is false, the fee is deducted from the amount of tokens being transfered.\\n     */\\n    function swapTokensForETH(address tokenAddress, uint256 amountIn, uint256 amountOutMin, bool payWithOWL, uint256 taxFee) external {\\n        uint256 taxAmount = _sendTax(tokenAddress, amountIn, payWithOWL, taxFee);\\n        _swapTokensForETH(tokenAddress, amountIn, amountOutMin, taxAmount);\\n    }\\n\\n    /**\\n     * @dev Swaps tokens for tokens.\\n     * @param tokenAddressIn The address of the token to swap.\\n     * @param tokenAddressOut The address of the token to swap for.\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin The minimum amount of tokens to receive.\\n     * @param payWithOWL Whether to pay the tax fee with OWL or input tokens.\\n     * @param taxFee The tax fee to pay to the tax wallet.\\n     * @notice The tax fee is sent to the tax wallet.\\n     * @notice If payWithOWL is true, the sender must have enough OWL balance in the contract.\\n     * @notice If payWithOWL is false, the fee is deducted from the amount of tokens being transfered.\\n     */\\n    function swapTokensForTokens(address tokenAddressIn, address tokenAddressOut, uint256 amountIn, uint256 amountOutMin, bool payWithOWL, uint256 taxFee) external {\\n        uint256 taxAmount = _sendTax(tokenAddressIn, amountIn, payWithOWL, taxFee);\\n        _swapTokensForTokens(tokenAddressIn, tokenAddressOut, amountIn, amountOutMin, taxAmount);\\n    }\\n\\n    /**\\n     * @dev Swaps ETH for tokens with a custom fee.\\n     * @param tokenAddress The address of the token to swap for.\\n     * @param amountOutMin The minimum amount of tokens to receive.\\n     * @param payWithOWL Whether to pay the tax fee with OWL or input ETH.\\n     * @param taxFee The tax fee to pay to the tax wallet.\\n     * @param appWallet The wallet to receive the custom tax fee.\\n     * @param customFee The custom tax fee to pay to the app wallet.\\n     * @notice Same as swapETHForTokens, but the custom tax fee is sent to the app wallet instead of the tax wallet.\\n     * @notice The app wallet will pay the regular tax fee to the tax wallet using OWL deposited in the contract.\\n     */\\n    function swapETHForTokensWithCustomFee(address tokenAddress, uint256 amountOutMin, bool payWithOWL, uint256 taxFee, address appWallet, uint256 customFee) external payable {\\n        uint256 taxAmount = _sendTaxWithCustomFee(address(0), msg.value, payWithOWL, taxFee, appWallet, customFee);\\n        _swapETHForTokens(tokenAddress, amountOutMin, taxAmount);\\n    }\\n\\n    /**\\n     * @dev Swaps tokens for ETH with a custom fee.\\n     * @param tokenAddress The address of the token to swap.\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin The minimum amount of ETH to receive.\\n     * @param payWithOWL Whether to pay the tax fee with OWL or input tokens.\\n     * @param taxFee The tax fee to pay to the tax wallet.\\n     * @param appWallet The wallet to receive the custom tax fee.\\n     * @param customFee The custom tax fee to pay to the app wallet.\\n     * @notice Same as swapTokensForETH, but the custom tax fee is sent to the app wallet instead of the tax wallet.\\n     * @notice The app wallet will pay the regular tax fee to the tax wallet using OWL deposited in the contract.\\n     */\\n    function swapTokensForETHWithCustomFee(address tokenAddress, uint256 amountIn, uint256 amountOutMin, bool payWithOWL, uint256 taxFee, address appWallet, uint256 customFee) external {\\n        uint256 taxAmount = _sendTaxWithCustomFee(tokenAddress, amountIn, payWithOWL, taxFee, appWallet, customFee);\\n        _swapTokensForETH(tokenAddress, amountIn, amountOutMin, taxAmount);\\n    }\\n\\n    /**\\n     * @dev Swaps tokens for tokens with a custom fee.\\n     * @param tokenAddressIn The address of the token to swap.\\n     * @param tokenAddressOut The address of the token to swap for.\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin The minimum amount of tokens to receive.\\n     * @param payWithOWL Whether to pay the tax fee with OWL or input tokens.\\n     * @param taxFee The tax fee to pay to the tax wallet.\\n     * @param appWallet The wallet to receive the custom tax fee.\\n     * @param customFee The custom tax fee to pay to the app wallet.\\n     * @notice Same as swapTokensForTokens, but the custom tax fee is sent to the app wallet instead of the tax wallet.\\n     * @notice The app wallet will pay the regular tax fee to the tax wallet using OWL deposited in the contract.\\n     */\\n    function swapTokensForTokensWithCustomFee(address tokenAddressIn, address tokenAddressOut, uint256 amountIn, uint256 amountOutMin, bool payWithOWL, uint256 taxFee, address appWallet, uint256 customFee) external {\\n        uint256 taxAmount = _sendTaxWithCustomFee(tokenAddressIn, amountIn, payWithOWL, taxFee, appWallet, customFee);\\n        _swapTokensForTokens(tokenAddressIn, tokenAddressOut, amountIn, amountOutMin, taxAmount);\\n    }\\n\\n    function swapETHForTokensWithReferral(address tokenAddress, uint256 amountOutMin, uint256 taxFee, address referrerWallet, uint256 referrerBonus, uint256 refereeBonus) external payable {\\n        uint256 taxAmount = _sendTaxWithReferral(address(0), msg.value, taxFee, referrerWallet, referrerBonus, refereeBonus);\\n        _swapETHForTokens(tokenAddress, amountOutMin, taxAmount);\\n    }\\n\\n    function swapTokensForETHWithReferral(address tokenAddress, uint256 amountIn, uint256 amountOutMin, uint256 taxFee, address referrerWallet, uint256 referrerBonus, uint256 refereeBonus) external {\\n        uint256 taxAmount = _sendTaxWithReferral(tokenAddress, amountIn, taxFee, referrerWallet, referrerBonus, refereeBonus);\\n        _swapTokensForETH(tokenAddress, amountIn, amountOutMin, taxAmount);\\n    }\\n\\n    function swapTokensForTokensWithReferral(address tokenAddressIn, address tokenAddressOut, uint256 amountIn, uint256 amountOutMin, uint256 taxFee, address referrerWallet, uint256 referrerBonus, uint256 refereeBonus) external {\\n        uint256 taxAmount = _sendTaxWithReferral(tokenAddressIn, amountIn, taxFee, referrerWallet, referrerBonus, refereeBonus);\\n        _swapTokensForTokens(tokenAddressIn, tokenAddressOut, amountIn, amountOutMin, taxAmount);\\n    }\\n\\n\\n    // --- private swap functions ---\\n    \\n    /**\\n     * @dev Swaps ETH for tokens.\\n     * @param tokenAddress The address of the token to swap for.\\n     * @param amountOutMin The minimum amount of tokens to receive.\\n     * @param taxAmount The tax fee to pay to the tax wallet.\\n     * @notice The tax fee is sent to the tax wallet, so it is subtracted from the amount of ETH being swapped.\\n     */\\n    function _swapETHForTokens(address tokenAddress, uint256 amountOutMin, uint256 taxAmount) private {\\n        address[] memory path = new address[](2);\\n        path[0] = IUniswapV2Router02(_uniswapV2RouterAddress).WETH();\\n        path[1] = tokenAddress;\\n\\n        IUniswapV2Router02(_uniswapV2RouterAddress).swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value.sub(taxAmount)}(amountOutMin, path, _msgSender(), block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Swaps tokens for ETH.\\n     * @param tokenAddress The address of the token to swap.\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin The minimum amount of ETH to receive.\\n     * @param taxAmount The tax fee to pay to the tax wallet.\\n     * @notice The tax fee is sent to the tax wallet, so it is subtracted from the amount of tokens being swapped.\\n     */\\n    function _swapTokensForETH(address tokenAddress, uint256 amountIn, uint256 amountOutMin, uint256 taxAmount) private {\\n        address[] memory path = new address[](2);\\n        path[0] = tokenAddress;\\n        path[1] = IUniswapV2Router02(_uniswapV2RouterAddress).WETH();\\n\\n        IERC20(tokenAddress).safeTransferFrom(_msgSender(), address(this), amountIn.sub(taxAmount));\\n        IERC20(tokenAddress).safeApprove(_uniswapV2RouterAddress, amountIn.sub(taxAmount));\\n        IUniswapV2Router02(_uniswapV2RouterAddress).swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn.sub(taxAmount), amountOutMin, path, _msgSender(), block.timestamp); \\n    }\\n\\n    /**\\n     * @dev Swaps tokens for tokens.\\n     * @param tokenAddressIn The address of the token to swap.\\n     * @param tokenAddressOut The address of the token to swap for.\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin The minimum amount of tokens to receive.\\n     * @param taxAmount The tax fee to pay to the tax wallet.\\n     * @notice The tax fee is sent to the tax wallet, so it is subtracted from the amount of tokens being swapped.\\n     */\\n    function _swapTokensForTokens(address tokenAddressIn, address tokenAddressOut, uint256 amountIn, uint256 amountOutMin, uint256 taxAmount) private {\\n        address[] memory path = new address[](3);\\n        path[0] = tokenAddressIn;\\n        path[1] = IUniswapV2Router02(_uniswapV2RouterAddress).WETH();\\n        path[2] = tokenAddressOut;\\n\\n        IERC20(tokenAddressIn).safeTransferFrom(_msgSender(), address(this), amountIn.sub(taxAmount));\\n        IERC20(tokenAddressIn).safeApprove(_uniswapV2RouterAddress, amountIn.sub(taxAmount));\\n        IUniswapV2Router02(_uniswapV2RouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn.sub(taxAmount), amountOutMin, path, _msgSender(), block.timestamp);\\n    }\\n\\n    // --- Tax fee transfer functions ---\\n\\n    /**\\n     * @dev Sends tokens as a tax fee to the tax wallet.\\n     * @param tokenAddress The address of the token used in the transaction.\\n     * @param amount The amount of tokens used in the transaction.\\n     * @param payWithOWL Whether to pay the tax fee with OWL or input tokens.\\n     * @param taxFee The tax fee to pay to the tax wallet.\\n     */\\n    function _sendTax(address tokenAddress, uint256 amount, bool payWithOWL, uint256 taxFee) private returns (uint256) {\\n        return _sendTaxToTaxWallet(tokenAddress, amount, _taxWallet, payWithOWL, taxFee, taxFee);\\n    }\\n\\n    /**\\n     * @dev Sends tokens as a tax fee to the app wallet and OWL as a tax fee to the tax wallet.\\n     * @param tokenAddress The address of the token used in the transaction.\\n     * @param amount The amount of tokens used in the transaction.\\n     * @param payWithOWL Whether to pay the tax fee with OWL or input tokens.\\n     * @param taxFee The tax fee to pay to the tax wallet.\\n     * @param appWallet The wallet to receive the custom tax fee.\\n     * @param customFee The custom tax fee to pay to the app wallet.\\n     * @notice The app wallet will pay the regular tax fee to the tax wallet using OWL deposited in the contract.\\n     */\\n    function _sendTaxWithCustomFee(address tokenAddress, uint256 amount, bool payWithOWL, uint256 taxFee, address appWallet, uint256 customFee) private returns (uint256) {\\n        require(_owlBalances[appWallet] >= taxFee, \\\"OwlRouter: app wallet does not have enough OWL balance\\\");\\n        \\n        // send tax from app wallet to tax wallet\\n        _owlBalances[appWallet] = _owlBalances[appWallet].sub(taxFee);\\n        _owlBalances[_taxWallet] = _owlBalances[_taxWallet].add(taxFee);\\n\\n        // send tax from sender to app wallet\\n        return _sendTaxToTaxWallet(tokenAddress, amount, appWallet, payWithOWL, customFee, customFee);\\n    }\\n\\n    /**\\n     * @dev Sends tax fee to the tax wallet and referral bonuses to the referrer and referee.\\n     * @param tokenAddress The address of the token used in the transaction.\\n     * @param amount The amount of tokens used in the transaction.\\n     * @param taxFee The tax fee to pay to the tax wallet.\\n     * @param referrerWallet The wallet to receive the referral bonus.\\n     * @param referrerBonus The referral bonus to pay to the referrer.\\n     * @param refereeBonus The referral bonus to pay to the referee.\\n     * @notice The referrer and referee bonuses must not exceed the tax fee.\\n     * @notice The referral bonuses are deducted from the tax fee.\\n     */\\n    function _sendTaxWithReferral(address tokenAddress, uint256 amount, uint256 taxFee, address referrerWallet, uint256 referrerBonus, uint256 refereeBonus) private returns (uint256) {\\n        require(referrerBonus.add(refereeBonus) <= taxFee, \\\"OwlRouter: referral bonuses exceed tax fee\\\");\\n\\n        // send tax from sender to tax wallet\\n        \\n        uint256 taxAmount = _sendTaxToTaxWallet(tokenAddress, amount, _taxWallet, true, taxFee, taxFee.sub(referrerBonus).sub(refereeBonus));\\n\\n        // pay referrer and referee bonuses\\n        _owlBalances[referrerWallet] = _owlBalances[referrerWallet].add(referrerBonus);\\n        _owlBalances[_msgSender()] = _owlBalances[_msgSender()].add(refereeBonus);\\n\\n        return taxAmount;\\n    }\\n\\n    /**\\n     * @dev Sends tokens as a tax fee to the tax wallet.\\n     * @param tokenAddress The address of the token used in the transaction.\\n     * @param amount The amount of tokens used in the transaction.\\n     * @param taxWallet The wallet to receive the tax fee.\\n     * @param payWithOWL Whether to pay the tax fee with OWL or input tokens.\\n     * @param taxSubtracted The tax fee to subtract from the the sender.\\n     * @param taxPayed The tax fee to send to the tax wallet.\\n     * @notice This function is called by _sendTax and _sendTaxWithCustomFee to send the tax fee to the tax wallet.\\n     */\\n    function _sendTaxToTaxWallet(address tokenAddress, uint256 amount, address taxWallet, bool payWithOWL, uint256 taxSubtracted, uint256 taxPayed) private returns (uint256) {\\n        if (taxSubtracted == 0) {\\n            return 0;\\n        }\\n\\n        // pay tax fee with OWL\\n        if (payWithOWL) {\\n            require(_owlBalances[_msgSender()] >= taxSubtracted, \\\"OwlRouter: sender does not have enough OWL balance\\\");\\n            _owlBalances[_msgSender()] = _owlBalances[_msgSender()].sub(taxSubtracted);\\n            _owlBalances[taxWallet] = _owlBalances[taxWallet].add(taxPayed);\\n            return 0;\\n        }\\n\\n        require(taxSubtracted <= amount, \\\"OwlRouter: taxFee exceeds amount\\\");\\n        \\n        // pay tax fee with ETH\\n        if (tokenAddress == address(0)) {\\n            payable(taxWallet).transfer(taxSubtracted);\\n        }\\n        // pay tax fee with tokens\\n        else {\\n            IERC20(tokenAddress).safeTransferFrom(_msgSender(), taxWallet, taxSubtracted);\\n        }\\n        return taxSubtracted;\\n    }\\n\\n\\n    // --- default contract functions ---\\n\\n    receive() external payable {}\\n\\n}\"\r\n    },\r\n    \"contracts/MockUniswapV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\\ninterface IUniswapV2Pair {\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    \\n    function factory() external pure returns (address);\\n    \\n    function WETH() external pure returns (address);\\n    \\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    \\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn, \\n        uint amountOutMin, \\n        address[] calldata path, \\n        address to, \\n        uint deadline\\n    ) external;\\n\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    \\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owlAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapV2RouterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaxWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"taxWallet\",\"type\":\"address\"}],\"name\":\"setTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"payWithOWL\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"swapETHForTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"payWithOWL\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"appWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"customFee\",\"type\":\"uint256\"}],\"name\":\"swapETHForTokensWithCustomFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrerWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refereeBonus\",\"type\":\"uint256\"}],\"name\":\"swapETHForTokensWithReferral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"payWithOWL\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"swapTokensForETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"payWithOWL\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"appWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"customFee\",\"type\":\"uint256\"}],\"name\":\"swapTokensForETHWithCustomFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrerWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refereeBonus\",\"type\":\"uint256\"}],\"name\":\"swapTokensForETHWithReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddressIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddressOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"payWithOWL\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"swapTokensForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddressIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddressOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"payWithOWL\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"appWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"customFee\",\"type\":\"uint256\"}],\"name\":\"swapTokensForTokensWithCustomFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddressIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddressOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrerWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refereeBonus\",\"type\":\"uint256\"}],\"name\":\"swapTokensForTokensWithReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"payWithOWL\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"payWithOWL\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"transferETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"payWithOWL\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"appWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"customFee\",\"type\":\"uint256\"}],\"name\":\"transferETHWithCustomFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrerWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refereeBonus\",\"type\":\"uint256\"}],\"name\":\"transferETHWithReferral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"payWithOWL\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"appWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"customFee\",\"type\":\"uint256\"}],\"name\":\"transferWithCustomFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrerWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refereeBonus\",\"type\":\"uint256\"}],\"name\":\"transferWithReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OwlRouter", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bda06080ea4961fc423396a704009873fe612b3f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}