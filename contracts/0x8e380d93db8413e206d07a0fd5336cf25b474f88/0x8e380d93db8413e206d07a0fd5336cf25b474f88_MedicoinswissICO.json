{"SourceCode": "pragma solidity ^0.4.21;\r\n\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n  function transfer(address to, uint value) returns (bool ok);\r\n  function transferFrom(address from, address to, uint value) returns (bool ok);\r\n  function approve(address spender, uint value) returns (bool ok);\r\n  function mintToken(address to, uint256 value) returns (uint256);\r\n  function changeTransfer(bool allowed);\r\n}\r\n\r\n\r\ncontract MedicoinswissICO{\r\n\r\n    uint256 public maxMintable;\r\n    uint256 public totalMinted;\r\n    uint public endBlock;\r\n    uint public startBlock;\r\n    uint public exchangeRate;\r\n    bool public isFunding;\r\n    ERC20 public Token;\r\n    address public ETHWallet;\r\n    uint256 public heldTotal;\r\n\r\n    bool private configSet;\r\n    address public creator;\r\n\r\n    mapping (address => uint256) public heldTokens;\r\n    mapping (address => uint) public heldTimeline;\r\n\r\n    event Contribution(address from, uint256 amount);\r\n    event ReleaseTokens(address from, uint256 amount);\r\n\r\n    function Sale(address _wallet) {\r\n        startBlock = block.number;\r\n        maxMintable = 337500000000000000000000000; // 750 million max sellable (18 decimals)\r\n        ETHWallet = _wallet;\r\n        isFunding = true;\r\n        creator = msg.sender;\r\n        createHeldCoins();\r\n        exchangeRate = 16129;  //Token price 0.000062 ETH / STAGE 1 start 03/15/2023 STAGE 1\r\n      //exchangeRate = 12048;  //Token price 0.000083 ETH / STAGE 2 start 06/16/2023\r\n      //exchangeRate = 10000;  //Token price 0.0001 ETH / STAGE 3 start 08/17/2023\r\n      //exchangeRate = 8333;  //Token price 0.00012 ETH / STAGE 4 start 10/19/2023\r\n    }\r\n\r\n    function setup(address token_address, uint end_block) {\r\n        require(!configSet);\r\n        Token = ERC20(token_address);\r\n        endBlock = end_block;\r\n        configSet = true;\r\n    }\r\n\r\n    function closeSale() external {\r\n      require(msg.sender==creator);\r\n      isFunding = false;\r\n    }\r\n\r\n    function () payable {\r\n        require(msg.value>0);\r\n        require(isFunding);\r\n        require(block.number <= endBlock);\r\n        uint256 amount = msg.value * exchangeRate;\r\n        uint256 total = totalMinted + amount;\r\n        require(total<=maxMintable);\r\n        totalMinted = total;\r\n        ETHWallet.transfer(msg.value);\r\n        Token.mintToken(msg.sender, amount);\r\n        Contribution(msg.sender, amount);\r\n    }\r\n\r\n  \r\n    function contribute() external payable {\r\n        require(msg.value>0);\r\n        require(isFunding);\r\n        require(block.number <= endBlock);\r\n        uint256 amount = msg.value * exchangeRate;\r\n        uint256 total = totalMinted + amount;\r\n        require(total<=maxMintable);\r\n        totalMinted = total;\r\n        ETHWallet.transfer(msg.value);\r\n        Token.mintToken(msg.sender, amount);\r\n        Contribution(msg.sender, amount);\r\n    }\r\n\r\n    // update the ETH/COIN rate\r\n    function updateRate(uint256 rate) external {\r\n        require(msg.sender==creator);\r\n        require(isFunding);\r\n        exchangeRate = rate;\r\n    }\r\n\r\n    // change creator address\r\n    function changeCreator(address _creator) external {\r\n        require(msg.sender==creator);\r\n        creator = _creator;\r\n    }\r\n\r\n    // change transfer status for ERC20 token\r\n    function changeTransferStats(bool _allowed) external {\r\n        require(msg.sender==creator);\r\n        Token.changeTransfer(_allowed);\r\n    }\r\n\r\n    // internal function that allocates a specific amount of TOKENS at a specific block number.\r\n    // only ran 1 time on initialization\r\n    function createHeldCoins() internal {\r\n      \r\n        createHoldToken(msg.sender, 1000);\r\n        createHoldToken(0xA2c135d087532bfAB4725A1a335f3424e723B657, 0);\r\n        createHoldToken(0xA2c135d087532bfAB4725A1a335f3424e723B657, 0);\r\n    }\r\n\r\n    // public function to get the amount of tokens held for an address\r\n    function getHeldCoin(address _address) public constant returns (uint256) {\r\n        return heldTokens[_address];\r\n    }\r\n\r\n    // function to create held tokens for developer\r\n    function createHoldToken(address _to, uint256 amount) internal {\r\n        heldTokens[_to] = amount;\r\n        heldTimeline[_to] = block.number + 0;\r\n        heldTotal += amount;\r\n        totalMinted += heldTotal;\r\n    }\r\n\r\n    // function to release held tokens for developers\r\n    function releaseHeldCoins() external {\r\n        uint256 held = heldTokens[msg.sender];\r\n        uint heldBlock = heldTimeline[msg.sender];\r\n        require(!isFunding);\r\n        require(held >= 0);\r\n        require(block.number >= heldBlock);\r\n        heldTokens[msg.sender] = 0;\r\n        heldTimeline[msg.sender] = 0;\r\n        Token.mintToken(msg.sender, held);\r\n        ReleaseTokens(msg.sender, held);\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"heldTimeline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxMintable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseHeldCoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"changeCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"Sale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getHeldCoin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"heldTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"changeTransferStats\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"heldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_address\",\"type\":\"address\"},{\"name\":\"end_block\",\"type\":\"uint256\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Contribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReleaseTokens\",\"type\":\"event\"}]", "ContractName": "MedicoinswissICO", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://459950eeca50372acca4490d89253c28735921d48b6a2087fce98afbe33431d2"}